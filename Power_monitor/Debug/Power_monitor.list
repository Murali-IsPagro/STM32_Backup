
Power_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080088c0  080088c0  000188c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e1c  08008e1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008e1c  08008e1c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e1c  08008e1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001e0  08009004  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08009004  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c375  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8a  00000000  00000000  0002c57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  0002fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d057  00000000  00000000  000487e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b928  00000000  00000000  00055840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000437c  00000000  00000000  000e11bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080088a4 	.word	0x080088a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080088a4 	.word	0x080088a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	4621      	mov	r1, r4
 8001078:	4628      	mov	r0, r5
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x3F // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f023 030f 	bic.w	r3, r3, #15
 80010f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f043 030c 	orr.w	r3, r3, #12
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	b2db      	uxtb	r3, r3
 800110a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	f043 030c 	orr.w	r3, r3, #12
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001120:	f107 0208 	add.w	r2, r7, #8
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2304      	movs	r3, #4
 800112a:	213f      	movs	r1, #63	; 0x3f
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <lcd_send_cmd+0x5c>)
 800112e:	f001 fe09 	bl	8002d44 <HAL_I2C_Master_Transmit>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000218 	.word	0x20000218

08001140 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f023 030f 	bic.w	r3, r3, #15
 8001150:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f043 030d 	orr.w	r3, r3, #13
 800115e:	b2db      	uxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f043 0309 	orr.w	r3, r3, #9
 8001168:	b2db      	uxtb	r3, r3
 800116a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	f043 030d 	orr.w	r3, r3, #13
 8001172:	b2db      	uxtb	r3, r3
 8001174:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	f043 0309 	orr.w	r3, r3, #9
 800117c:	b2db      	uxtb	r3, r3
 800117e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	2364      	movs	r3, #100	; 0x64
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2304      	movs	r3, #4
 800118a:	213f      	movs	r1, #63	; 0x3f
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <lcd_send_data+0x5c>)
 800118e:	f001 fdd9 	bl	8002d44 <HAL_I2C_Master_Transmit>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000218 	.word	0x20000218

080011a0 <lcd_clear>:

void lcd_clear (void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff9a 	bl	80010e0 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e005      	b.n	80011be <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80011b2:	2020      	movs	r0, #32
 80011b4:	f7ff ffc4 	bl	8001140 <lcd_send_data>
	for (int i=0; i<100; i++)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b63      	cmp	r3, #99	; 0x63
 80011c2:	ddf6      	ble.n	80011b2 <lcd_clear+0x12>
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <lcd_init>:

void lcd_init (void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011d2:	2032      	movs	r0, #50	; 0x32
 80011d4:	f000 fd76 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011d8:	2030      	movs	r0, #48	; 0x30
 80011da:	f7ff ff81 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011de:	2005      	movs	r0, #5
 80011e0:	f000 fd70 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011e4:	2030      	movs	r0, #48	; 0x30
 80011e6:	f7ff ff7b 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 fd6a 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011f0:	2030      	movs	r0, #48	; 0x30
 80011f2:	f7ff ff75 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f000 fd64 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011fc:	2020      	movs	r0, #32
 80011fe:	f7ff ff6f 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f000 fd5e 	bl	8001cc4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001208:	2028      	movs	r0, #40	; 0x28
 800120a:	f7ff ff69 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fd58 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001214:	2008      	movs	r0, #8
 8001216:	f7ff ff63 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fd52 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ff5d 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fd4c 	bl	8001cc4 <HAL_Delay>
	HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fd49 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001232:	2006      	movs	r0, #6
 8001234:	f7ff ff54 	bl	80010e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 fd43 	bl	8001cc4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800123e:	200c      	movs	r0, #12
 8001240:	f7ff ff4e 	bl	80010e0 <lcd_send_cmd>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <setCursor>:


void setCursor(int a, int b)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	int i=0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d81b      	bhi.n	8001294 <setCursor+0x4c>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <setCursor+0x1c>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001275 	.word	0x08001275
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001285 	.word	0x08001285
 8001270:	0800128d 	.word	0x0800128d
	switch(b){
	case 0:lcd_send_cmd(0x80);break;
 8001274:	2080      	movs	r0, #128	; 0x80
 8001276:	f7ff ff33 	bl	80010e0 <lcd_send_cmd>
 800127a:	e00b      	b.n	8001294 <setCursor+0x4c>
	case 1:lcd_send_cmd(0xC0);break;
 800127c:	20c0      	movs	r0, #192	; 0xc0
 800127e:	f7ff ff2f 	bl	80010e0 <lcd_send_cmd>
 8001282:	e007      	b.n	8001294 <setCursor+0x4c>
	case 2:lcd_send_cmd(0x94);break;
 8001284:	2094      	movs	r0, #148	; 0x94
 8001286:	f7ff ff2b 	bl	80010e0 <lcd_send_cmd>
 800128a:	e003      	b.n	8001294 <setCursor+0x4c>
	case 3:lcd_send_cmd(0xd4);break;}
 800128c:	20d4      	movs	r0, #212	; 0xd4
 800128e:	f7ff ff27 	bl	80010e0 <lcd_send_cmd>
 8001292:	bf00      	nop
	for(i=0;i<a;i++)
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e005      	b.n	80012a6 <setCursor+0x5e>
	lcd_send_cmd(0x14);
 800129a:	2014      	movs	r0, #20
 800129c:	f7ff ff20 	bl	80010e0 <lcd_send_cmd>
	for(i=0;i<a;i++)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf5      	blt.n	800129a <setCursor+0x52>
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012c0:	e006      	b.n	80012d0 <lcd_send_string+0x18>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff38 	bl	8001140 <lcd_send_data>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f4      	bne.n	80012c2 <lcd_send_string+0xa>
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <getPotVal>:
	 lcd.setCursor(6,3);
	 lcd.print(highVal,1);
	 }*/
}

void getPotVal(int lval, int hval) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	long temp = 0, temp1 = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
	lowVal = (((lval) * MAXCURRENT) / 4096.0);
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <getPotVal+0xe4>)
 800130e:	f7ff fa0d 	bl	800072c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fbd5 	bl	8000ac8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <getPotVal+0xe8>)
 8001322:	6013      	str	r3, [r2, #0]
	highVal = (((hval) * MAXCURRENT) / 4096.0);
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f867 	bl	8000404 <__aeabi_i2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <getPotVal+0xe4>)
 800133c:	f7ff f9f6 	bl	800072c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbbe 	bl	8000ac8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <getPotVal+0xec>)
 8001350:	6013      	str	r3, [r2, #0]
	temp = lowVal * 10;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <getPotVal+0xe8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	491f      	ldr	r1, [pc, #124]	; (80013d4 <getPotVal+0xf0>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd13 	bl	8000d84 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe5f 	bl	8001024 <__aeabi_f2iz>
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
	lowVal = (float) temp / 10;
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff fcb6 	bl	8000cdc <__aeabi_i2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4918      	ldr	r1, [pc, #96]	; (80013d4 <getPotVal+0xf0>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdb9 	bl	8000eec <__aeabi_fdiv>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <getPotVal+0xe8>)
 8001380:	601a      	str	r2, [r3, #0]
	temp1 = highVal * 10;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <getPotVal+0xec>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4913      	ldr	r1, [pc, #76]	; (80013d4 <getPotVal+0xf0>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fcfb 	bl	8000d84 <__aeabi_fmul>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe47 	bl	8001024 <__aeabi_f2iz>
 8001396:	4603      	mov	r3, r0
 8001398:	60bb      	str	r3, [r7, #8]
	highVal = (float) temp1 / 10;
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f7ff fc9e 	bl	8000cdc <__aeabi_i2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	490c      	ldr	r1, [pc, #48]	; (80013d4 <getPotVal+0xf0>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fda1 	bl	8000eec <__aeabi_fdiv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <getPotVal+0xec>)
 80013b0:	601a      	str	r2, [r3, #0]
	rawlowVal = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <getPotVal+0xf4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	rawhighVal = 0;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <getPotVal+0xf8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40b00000 	.word	0x40b00000
 80013cc:	20000204 	.word	0x20000204
 80013d0:	20000208 	.word	0x20000208
 80013d4:	41200000 	.word	0x41200000
 80013d8:	200001fc 	.word	0x200001fc
 80013dc:	20000200 	.word	0x20000200

080013e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013e4:	f000 fc0c 	bl	8001c00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013e8:	f000 f88a 	bl	8001500 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ec:	f000 f9ac 	bl	8001748 <MX_GPIO_Init>
	MX_ADC1_Init();
 80013f0:	f000 f8e2 	bl	80015b8 <MX_ADC1_Init>
	MX_I2C1_Init();
 80013f4:	f000 f950 	bl	8001698 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013f8:	f000 f97c 	bl	80016f4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 80013fc:	f7ff fee7 	bl	80011ce <lcd_init>
	//	lcd_send_cmd(0x80 | 0x00);
	setCursor(0, 0);
 8001400:	2100      	movs	r1, #0
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ff20 	bl	8001248 <setCursor>
	lcd_send_string("ANGULAIR");
 8001408:	4834      	ldr	r0, [pc, #208]	; (80014dc <main+0xfc>)
 800140a:	f7ff ff55 	bl	80012b8 <lcd_send_string>
	HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001412:	f000 fc57 	bl	8001cc4 <HAL_Delay>
	lcd_clear();
 8001416:	f7ff fec3 	bl	80011a0 <lcd_clear>

	//	lcd_send_cmd(0x80 | 0x40);
	setCursor(3, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2003      	movs	r0, #3
 800141e:	f7ff ff13 	bl	8001248 <setCursor>
	lcd_send_string("INITIALIZING");
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <main+0x100>)
 8001424:	f7ff ff48 	bl	80012b8 <lcd_send_string>
	//	LCD1602_PrintInt(12);
	Relay_on;
 8001428:	2201      	movs	r2, #1
 800142a:	2101      	movs	r1, #1
 800142c:	482d      	ldr	r0, [pc, #180]	; (80014e4 <main+0x104>)
 800142e:	f001 fb2d 	bl	8002a8c <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* USER CODE END WHILE */
		HAL_ADC_Start(&hadc1);
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <main+0x108>)
 8001434:	f000 fd42 	bl	8001ebc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 20);
 8001438:	2114      	movs	r1, #20
 800143a:	482b      	ldr	r0, [pc, #172]	; (80014e8 <main+0x108>)
 800143c:	f000 fe18 	bl	8002070 <HAL_ADC_PollForConversion>
		ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8001440:	4829      	ldr	r0, [pc, #164]	; (80014e8 <main+0x108>)
 8001442:	f000 ff1b 	bl	800227c <HAL_ADC_GetValue>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <main+0x10c>)
 800144c:	801a      	strh	r2, [r3, #0]

		HAL_ADC_PollForConversion(&hadc1, 20);
 800144e:	2114      	movs	r1, #20
 8001450:	4825      	ldr	r0, [pc, #148]	; (80014e8 <main+0x108>)
 8001452:	f000 fe0d 	bl	8002070 <HAL_ADC_PollForConversion>
		ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <main+0x108>)
 8001458:	f000 ff10 	bl	800227c <HAL_ADC_GetValue>
 800145c:	4603      	mov	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <main+0x10c>)
 8001462:	805a      	strh	r2, [r3, #2]

		HAL_ADC_PollForConversion(&hadc1, 20);
 8001464:	2114      	movs	r1, #20
 8001466:	4820      	ldr	r0, [pc, #128]	; (80014e8 <main+0x108>)
 8001468:	f000 fe02 	bl	8002070 <HAL_ADC_PollForConversion>
		ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 800146c:	481e      	ldr	r0, [pc, #120]	; (80014e8 <main+0x108>)
 800146e:	f000 ff05 	bl	800227c <HAL_ADC_GetValue>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <main+0x10c>)
 8001478:	809a      	strh	r2, [r3, #4]

		HAL_ADC_PollForConversion(&hadc1, 20);
 800147a:	2114      	movs	r1, #20
 800147c:	481a      	ldr	r0, [pc, #104]	; (80014e8 <main+0x108>)
 800147e:	f000 fdf7 	bl	8002070 <HAL_ADC_PollForConversion>
		ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8001482:	4819      	ldr	r0, [pc, #100]	; (80014e8 <main+0x108>)
 8001484:	f000 fefa 	bl	800227c <HAL_ADC_GetValue>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <main+0x10c>)
 800148e:	80da      	strh	r2, [r3, #6]

		HAL_ADC_Stop(&hadc1);
 8001490:	4815      	ldr	r0, [pc, #84]	; (80014e8 <main+0x108>)
 8001492:	f000 fdc1 	bl	8002018 <HAL_ADC_Stop>

		rawhighVal = ADC_VAL[2];
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <main+0x10c>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	461a      	mov	r2, r3
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <main+0x110>)
 800149e:	601a      	str	r2, [r3, #0]
		getPotVal(rawlowVal, rawhighVal);
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0x114>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <main+0x110>)
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff1a 	bl	80012e4 <getPotVal>
		lcd_clear();
 80014b0:	f7ff fe76 	bl	80011a0 <lcd_clear>
		setCursor(3, 1);
 80014b4:	2101      	movs	r1, #1
 80014b6:	2003      	movs	r0, #3
 80014b8:	f7ff fec6 	bl	8001248 <setCursor>
		sprintf(str1, "%d", rawhighVal);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <main+0x110>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <main+0x118>)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <main+0x11c>)
 80014c6:	f003 fc5b 	bl	8004d80 <siprintf>
		lcd_send_string(str1);
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <main+0x11c>)
 80014cc:	f7ff fef4 	bl	80012b8 <lcd_send_string>
		HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d4:	f000 fbf6 	bl	8001cc4 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80014d8:	e7ab      	b.n	8001432 <main+0x52>
 80014da:	bf00      	nop
 80014dc:	08008910 	.word	0x08008910
 80014e0:	0800891c 	.word	0x0800891c
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	20000280 	.word	0x20000280
 80014ec:	2000031c 	.word	0x2000031c
 80014f0:	20000200 	.word	0x20000200
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	080088c0 	.word	0x080088c0
 80014fc:	20000308 	.word	0x20000308

08001500 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	2228      	movs	r2, #40	; 0x28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fdb8 	bl	8004084 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153e:	2301      	movs	r3, #1
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800154c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fefa 	bl	8003350 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x66>
		Error_Handler();
 8001562:	f000 f93b 	bl	80017dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f964 	bl	8003850 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x92>
		Error_Handler();
 800158e:	f000 f925 	bl	80017dc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001592:	2302      	movs	r3, #2
 8001594:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800159a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 faf0 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xae>
		Error_Handler();
 80015aa:	f000 f917 	bl	80017dc <Error_Handler>
	}
}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <MX_ADC1_Init+0xdc>)
 80015cc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015d8:	2201      	movs	r2, #1
 80015da:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015e8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <MX_ADC1_Init+0xd8>)
 80015f8:	f000 fb88 	bl	8001d0c <HAL_ADC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC1_Init+0x4e>
		Error_Handler();
 8001602:	f000 f8eb 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800160a:	2301      	movs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800160e:	2302      	movs	r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	481e      	ldr	r0, [pc, #120]	; (8001690 <MX_ADC1_Init+0xd8>)
 8001618:	f000 fe3c 	bl	8002294 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001622:	f000 f8db 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001626:	2301      	movs	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800162a:	2302      	movs	r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800162e:	2303      	movs	r3, #3
 8001630:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4816      	ldr	r0, [pc, #88]	; (8001690 <MX_ADC1_Init+0xd8>)
 8001638:	f000 fe2c 	bl	8002294 <HAL_ADC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001642:	f000 f8cb 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001646:	2302      	movs	r3, #2
 8001648:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800164a:	2303      	movs	r3, #3
 800164c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800164e:	2304      	movs	r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_ADC1_Init+0xd8>)
 8001658:	f000 fe1c 	bl	8002294 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC1_Init+0xae>
		Error_Handler();
 8001662:	f000 f8bb 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001666:	2304      	movs	r3, #4
 8001668:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800166a:	2304      	movs	r3, #4
 800166c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800166e:	2305      	movs	r3, #5
 8001670:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC1_Init+0xd8>)
 8001678:	f000 fe0c 	bl	8002294 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC1_Init+0xce>
		Error_Handler();
 8001682:	f000 f8ab 	bl	80017dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000280 	.word	0x20000280
 8001694:	40012400 	.word	0x40012400

08001698 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f001 f9f1 	bl	8002abc <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80016e0:	f000 f87c 	bl	80017dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000218 	.word	0x20000218
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART1_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800172c:	f002 fba4 	bl	8003e78 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001736:	f000 f851 	bl	80017dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002b0 	.word	0x200002b0
 8001744:	40013800 	.word	0x40013800

08001748 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_GPIO_Init+0x8c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <MX_GPIO_Init+0x8c>)
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_GPIO_Init+0x8c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_GPIO_Init+0x8c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <MX_GPIO_Init+0x8c>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_GPIO_Init+0x8c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_GPIO_Init+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <MX_GPIO_Init+0x8c>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_GPIO_Init+0x8c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2103      	movs	r1, #3
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <MX_GPIO_Init+0x90>)
 80017aa:	f001 f96f 	bl	8002a8c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017ae:	2303      	movs	r3, #3
 80017b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_GPIO_Init+0x90>)
 80017c6:	f000 ffdd 	bl	8002784 <HAL_GPIO_Init>

}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_MspInit+0x5c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x5c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_MspInit+0x5c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x5c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MspInit+0x60>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_MspInit+0x60>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000

0800184c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_ADC_MspInit+0x6c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d121      	bne.n	80018b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_ADC_MspInit+0x70>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_ADC_MspInit+0x70>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_ADC_MspInit+0x70>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_ADC_MspInit+0x70>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_ADC_MspInit+0x70>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_ADC_MspInit+0x70>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800189c:	2317      	movs	r3, #23
 800189e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a0:	2303      	movs	r3, #3
 80018a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_ADC_MspInit+0x74>)
 80018ac:	f000 ff6a 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40012400 	.word	0x40012400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800

080018c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <HAL_I2C_MspInit+0x70>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d123      	bne.n	800192c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_I2C_MspInit+0x74>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_I2C_MspInit+0x74>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_I2C_MspInit+0x74>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001900:	2312      	movs	r3, #18
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_I2C_MspInit+0x78>)
 8001910:	f000 ff38 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_I2C_MspInit+0x74>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_I2C_MspInit+0x74>)
 800191a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_I2C_MspInit+0x74>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40005400 	.word	0x40005400
 8001938:	40021000 	.word	0x40021000
 800193c:	40010c00 	.word	0x40010c00

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_UART_MspInit+0x8c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d131      	bne.n	80019c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_MspInit+0x90>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_UART_MspInit+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_UART_MspInit+0x90>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_UART_MspInit+0x94>)
 80019a6:	f000 feed 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_UART_MspInit+0x94>)
 80019c0:	f000 fee0 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010800 	.word	0x40010800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 f935 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
	return 1;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a3e:	f002 faf7 	bl	8004030 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
	return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a66:	e7fe      	b.n	8001a66 <_exit+0x12>

08001a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a7a:	f3af 8000 	nop.w
 8001a7e:	4601      	mov	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
	}

return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e009      	b.n	8001ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf1      	blt.n	8001ab4 <_write+0x12>
	}
	return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_close>:

int _close(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b00:	605a      	str	r2, [r3, #4]
	return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
	return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f002 fa60 	bl	8004030 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20005000 	.word	0x20005000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	2000020c 	.word	0x2000020c
 8001ba4:	20000360 	.word	0x20000360

08001ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	; (8001bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bda:	f7ff ffe5 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f002 fa2d 	bl	800403c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be2:	f7ff fbfd 	bl	80013e0 <main>
  bx lr
 8001be6:	4770      	bx	lr
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bf0:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 8001bf4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bf8:	20000360 	.word	0x20000360

08001bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_2_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x28>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x28>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fd83 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fde4 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fd8d 	bl	800276a <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 fd63 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x20>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_IncTick+0x20>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	2000034c 	.word	0x2000034c

08001cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_GetTick+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	2000034c 	.word	0x2000034c

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffe0 	bl	8001cb0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0be      	b.n	8001eac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fd7e 	bl	800184c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fbf1 	bl	8002538 <ADC_ConversionStop_Disable>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8099 	bne.w	8001e9a <HAL_ADC_Init+0x18e>
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8095 	bne.w	8001e9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d78:	f023 0302 	bic.w	r3, r3, #2
 8001d7c:	f043 0202 	orr.w	r2, r3, #2
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7b1b      	ldrb	r3, [r3, #12]
 8001d92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da4:	d003      	beq.n	8001dae <HAL_ADC_Init+0xa2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_ADC_Init+0xa8>
 8001dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db2:	e000      	b.n	8001db6 <HAL_ADC_Init+0xaa>
 8001db4:	2300      	movs	r3, #0
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7d1b      	ldrb	r3, [r3, #20]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d119      	bne.n	8001df8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b1b      	ldrb	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	035a      	lsls	r2, r3, #13
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e00b      	b.n	8001df8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_ADC_Init+0x1a8>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e28:	d003      	beq.n	8001e32 <HAL_ADC_Init+0x126>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d104      	bne.n	8001e3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	051b      	lsls	r3, r3, #20
 8001e3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_ADC_Init+0x1ac>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10b      	bne.n	8001e78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e76:	e018      	b.n	8001eaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f023 0312 	bic.w	r3, r3, #18
 8001e80:	f043 0210 	orr.w	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e98:	e007      	b.n	8001eaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	f043 0210 	orr.w	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	ffe1f7fd 	.word	0xffe1f7fd
 8001eb8:	ff1f0efe 	.word	0xff1f0efe

08001ebc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Start+0x1a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e098      	b.n	8002008 <HAL_ADC_Start+0x14c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fad0 	bl	8002484 <ADC_Enable>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 8087 	bne.w	8001ffe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_ADC_Start+0x154>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_Start+0x5e>
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_ADC_Start+0x158>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d026      	beq.n	8001f82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f44:	e01d      	b.n	8001f82 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <HAL_ADC_Start+0x158>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d004      	beq.n	8001f66 <HAL_ADC_Start+0xaa>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_ADC_Start+0x154>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10d      	bne.n	8001f82 <HAL_ADC_Start+0xc6>
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_ADC_Start+0x158>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	f023 0206 	bic.w	r2, r3, #6
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0202 	mvn.w	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fbe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fc2:	d113      	bne.n	8001fec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_ADC_Start+0x154>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_ADC_Start+0x158>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	e00c      	b.n	8002006 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40012800 	.word	0x40012800
 8002014:	40012400 	.word	0x40012400

08002018 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Stop+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e01a      	b.n	8002068 <HAL_ADC_Stop+0x50>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa7c 	bl	8002538 <ADC_ConversionStop_Disable>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002086:	f7ff fe13 	bl	8001cb0 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f043 0220 	orr.w	r2, r3, #32
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0d3      	b.n	800225a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d131      	bne.n	8002124 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d12a      	bne.n	8002124 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020ce:	e021      	b.n	8002114 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d01d      	beq.n	8002114 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_ADC_PollForConversion+0x7e>
 80020de:	f7ff fde7 	bl	8001cb0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d212      	bcs.n	8002114 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0a2      	b.n	800225a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0d6      	beq.n	80020d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002122:	e070      	b.n	8002206 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_ADC_PollForConversion+0x1f4>)
 8002126:	681c      	ldr	r4, [r3, #0]
 8002128:	2002      	movs	r0, #2
 800212a:	f001 fde1 	bl	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800212e:	4603      	mov	r3, r0
 8002130:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_ADC_PollForConversion+0x1f8>)
 800213c:	400b      	ands	r3, r1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_ADC_PollForConversion+0x104>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_ADC_PollForConversion+0x1fc>)
 800214a:	400b      	ands	r3, r1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_ADC_PollForConversion+0x104>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_ADC_PollForConversion+0x200>)
 8002158:	400b      	ands	r3, r1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <HAL_ADC_PollForConversion+0x100>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68d9      	ldr	r1, [r3, #12]
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_ADC_PollForConversion+0x204>)
 8002166:	400b      	ands	r3, r1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_PollForConversion+0x100>
 800216c:	2314      	movs	r3, #20
 800216e:	e020      	b.n	80021b2 <HAL_ADC_PollForConversion+0x142>
 8002170:	2329      	movs	r3, #41	; 0x29
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_PollForConversion+0x142>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_ADC_PollForConversion+0x200>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_ADC_PollForConversion+0x120>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_ADC_PollForConversion+0x204>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <HAL_ADC_PollForConversion+0x13c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_ADC_PollForConversion+0x208>)
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x140>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68d9      	ldr	r1, [r3, #12]
 80021a4:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_ADC_PollForConversion+0x208>)
 80021a6:	400b      	ands	r3, r1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x140>
 80021ac:	2354      	movs	r3, #84	; 0x54
 80021ae:	e000      	b.n	80021b2 <HAL_ADC_PollForConversion+0x142>
 80021b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021b8:	e021      	b.n	80021fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d01a      	beq.n	80021f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_ADC_PollForConversion+0x168>
 80021c8:	f7ff fd72 	bl	8001cb0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d20f      	bcs.n	80021f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d90b      	bls.n	80021f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e030      	b.n	800225a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	429a      	cmp	r2, r3
 8002204:	d8d9      	bhi.n	80021ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f06f 0212 	mvn.w	r2, #18
 800220e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002226:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800222a:	d115      	bne.n	8002258 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002230:	2b00      	cmp	r3, #0
 8002232:	d111      	bne.n	8002258 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000
 8002268:	24924924 	.word	0x24924924
 800226c:	00924924 	.word	0x00924924
 8002270:	12492492 	.word	0x12492492
 8002274:	00492492 	.word	0x00492492
 8002278:	00249249 	.word	0x00249249

0800227c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x20>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0dc      	b.n	800246e <HAL_ADC_ConfigChannel+0x1da>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d81c      	bhi.n	80022fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b05      	subs	r3, #5
 80022d6:	221f      	movs	r2, #31
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	fa00 f203 	lsl.w	r2, r0, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34
 80022fc:	e03c      	b.n	8002378 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d81c      	bhi.n	8002340 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b23      	subs	r3, #35	; 0x23
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	4019      	ands	r1, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b23      	subs	r3, #35	; 0x23
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
 800233e:	e01b      	b.n	8002378 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b41      	subs	r3, #65	; 0x41
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	4019      	ands	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b41      	subs	r3, #65	; 0x41
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d91c      	bls.n	80023ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68d9      	ldr	r1, [r3, #12]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	3b1e      	subs	r3, #30
 8002392:	2207      	movs	r2, #7
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	4019      	ands	r1, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6898      	ldr	r0, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	fa00 f203 	lsl.w	r2, r0, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	e019      	b.n	80023ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d132      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_ADC_ConfigChannel+0x1e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d125      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d126      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002424:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b10      	cmp	r3, #16
 800242c:	d11a      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_ADC_ConfigChannel+0x1e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_ADC_ConfigChannel+0x1ec>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9a      	lsrs	r2, r3, #18
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002444:	e002      	b.n	800244c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x1b2>
 8002452:	e007      	b.n	8002464 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40012400 	.word	0x40012400
 800247c:	20000000 	.word	0x20000000
 8002480:	431bde83 	.word	0x431bde83

08002484 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d040      	beq.n	8002524 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <ADC_Enable+0xac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <ADC_Enable+0xb0>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9b      	lsrs	r3, r3, #18
 80024be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024c0:	e002      	b.n	80024c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f9      	bne.n	80024c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ce:	f7ff fbef 	bl	8001cb0 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024d4:	e01f      	b.n	8002516 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024d6:	f7ff fbeb 	bl	8001cb0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d918      	bls.n	8002516 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d011      	beq.n	8002516 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d1d8      	bne.n	80024d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000000 	.word	0x20000000
 8002534:	431bde83 	.word	0x431bde83

08002538 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d12e      	bne.n	80025b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002562:	f7ff fba5 	bl	8001cb0 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002568:	e01b      	b.n	80025a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800256a:	f7ff fba1 	bl	8001cb0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d914      	bls.n	80025a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10d      	bne.n	80025a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e007      	b.n	80025b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d0dc      	beq.n	800256a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff90 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff49 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff5e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffb0 	bl	80026d8 <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	e169      	b.n	8002a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002798:	2201      	movs	r2, #1
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8158 	bne.w	8002a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a9a      	ldr	r2, [pc, #616]	; (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d05e      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027c0:	4a98      	ldr	r2, [pc, #608]	; (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d875      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027c6:	4a98      	ldr	r2, [pc, #608]	; (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d058      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027cc:	4a96      	ldr	r2, [pc, #600]	; (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d86f      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027d2:	4a96      	ldr	r2, [pc, #600]	; (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d052      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027d8:	4a94      	ldr	r2, [pc, #592]	; (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d869      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027de:	4a94      	ldr	r2, [pc, #592]	; (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d04c      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027e4:	4a92      	ldr	r2, [pc, #584]	; (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d863      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027ea:	4a92      	ldr	r2, [pc, #584]	; (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d046      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027f0:	4a90      	ldr	r2, [pc, #576]	; (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d85d      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027f6:	2b12      	cmp	r3, #18
 80027f8:	d82a      	bhi.n	8002850 <HAL_GPIO_Init+0xcc>
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d859      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_GPIO_Init+0x80>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	0800287f 	.word	0x0800287f
 8002808:	08002859 	.word	0x08002859
 800280c:	0800286b 	.word	0x0800286b
 8002810:	080028ad 	.word	0x080028ad
 8002814:	080028b3 	.word	0x080028b3
 8002818:	080028b3 	.word	0x080028b3
 800281c:	080028b3 	.word	0x080028b3
 8002820:	080028b3 	.word	0x080028b3
 8002824:	080028b3 	.word	0x080028b3
 8002828:	080028b3 	.word	0x080028b3
 800282c:	080028b3 	.word	0x080028b3
 8002830:	080028b3 	.word	0x080028b3
 8002834:	080028b3 	.word	0x080028b3
 8002838:	080028b3 	.word	0x080028b3
 800283c:	080028b3 	.word	0x080028b3
 8002840:	080028b3 	.word	0x080028b3
 8002844:	080028b3 	.word	0x080028b3
 8002848:	08002861 	.word	0x08002861
 800284c:	08002875 	.word	0x08002875
 8002850:	4a79      	ldr	r2, [pc, #484]	; (8002a38 <HAL_GPIO_Init+0x2b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002856:	e02c      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e029      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	3304      	adds	r3, #4
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e024      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	3308      	adds	r3, #8
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e01f      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	330c      	adds	r3, #12
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e01a      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002886:	2304      	movs	r3, #4
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e013      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002894:	2308      	movs	r3, #8
 8002896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	611a      	str	r2, [r3, #16]
          break;
 800289e:	e009      	b.n	80028b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	615a      	str	r2, [r3, #20]
          break;
 80028aa:	e003      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          break;
 80028b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d801      	bhi.n	80028be <HAL_GPIO_Init+0x13a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_Init+0x13e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	; 0xff
 80028c8:	d802      	bhi.n	80028d0 <HAL_GPIO_Init+0x14c>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x152>
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3b08      	subs	r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	210f      	movs	r1, #15
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80b1 	beq.w	8002a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002904:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x2b8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800291c:	4a48      	ldr	r2, [pc, #288]	; (8002a40 <HAL_GPIO_Init+0x2bc>)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_GPIO_Init+0x2c0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <HAL_GPIO_Init+0x2c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1e8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <HAL_GPIO_Init+0x2c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3d      	ldr	r2, [pc, #244]	; (8002a50 <HAL_GPIO_Init+0x2cc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1e0>
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002964:	2304      	movs	r3, #4
 8002966:	e004      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002968:	2302      	movs	r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002970:	2300      	movs	r3, #0
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	f002 0203 	and.w	r2, r2, #3
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4093      	lsls	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002982:	492f      	ldr	r1, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x2bc>)
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	492c      	ldr	r1, [pc, #176]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4928      	ldr	r1, [pc, #160]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4922      	ldr	r1, [pc, #136]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	491e      	ldr	r1, [pc, #120]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4918      	ldr	r1, [pc, #96]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4914      	ldr	r1, [pc, #80]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d021      	beq.n	8002a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
 8002a20:	e021      	b.n	8002a66 <HAL_GPIO_Init+0x2e2>
 8002a22:	bf00      	nop
 8002a24:	10320000 	.word	0x10320000
 8002a28:	10310000 	.word	0x10310000
 8002a2c:	10220000 	.word	0x10220000
 8002a30:	10210000 	.word	0x10210000
 8002a34:	10120000 	.word	0x10120000
 8002a38:	10110000 	.word	0x10110000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40010800 	.word	0x40010800
 8002a48:	40010c00 	.word	0x40010c00
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4909      	ldr	r1, [pc, #36]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	3301      	adds	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f ae8e 	bne.w	8002798 <HAL_GPIO_Init+0x14>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	372c      	adds	r7, #44	; 0x2c
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	611a      	str	r2, [r3, #16]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e12b      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe feee 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b20:	f000 ffea 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a81      	ldr	r2, [pc, #516]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d807      	bhi.n	8002b40 <HAL_I2C_Init+0x84>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a80      	ldr	r2, [pc, #512]	; (8002d34 <HAL_I2C_Init+0x278>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e006      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a7d      	ldr	r2, [pc, #500]	; (8002d38 <HAL_I2C_Init+0x27c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0e7      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a78      	ldr	r2, [pc, #480]	; (8002d3c <HAL_I2C_Init+0x280>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <HAL_I2C_Init+0xd4>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	e009      	b.n	8002ba4 <HAL_I2C_Init+0xe8>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a69      	ldr	r2, [pc, #420]	; (8002d40 <HAL_I2C_Init+0x284>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	495c      	ldr	r1, [pc, #368]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_I2C_Init+0x13c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e59      	subs	r1, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd8:	400b      	ands	r3, r1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_I2C_Init+0x138>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e59      	subs	r1, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	e051      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e04f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d111      	bne.n	8002c24 <HAL_I2C_Init+0x168>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e012      	b.n	8002c4a <HAL_I2C_Init+0x18e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x196>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e022      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1e58      	subs	r0, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	440b      	add	r3, r1
 8002c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	e00f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	0099      	lsls	r1, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6809      	ldr	r1, [r1, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6911      	ldr	r1, [r2, #16]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	000186a0 	.word	0x000186a0
 8002d34:	001e847f 	.word	0x001e847f
 8002d38:	003d08ff 	.word	0x003d08ff
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	10624dd3 	.word	0x10624dd3

08002d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d58:	f7fe ffaa 	bl	8001cb0 <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 80e0 	bne.w	8002f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	4970      	ldr	r1, [pc, #448]	; (8002f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f964 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0d3      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x50>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0cc      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d007      	beq.n	8002dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f89c 	bl	8002f40 <I2C_MasterRequestWrite>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e08d      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e28:	e066      	b.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f9de 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06b      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	6a39      	ldr	r1, [r7, #32]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f9ce 	bl	8003272 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01a      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d194      	bne.n	8002e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	00100002 	.word	0x00100002
 8002f3c:	ffff0000 	.word	0xffff0000

08002f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d006      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00b      	b.n	8002f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d107      	bne.n	8002f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f84f 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d103      	bne.n	8002fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e035      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e01b      	b.n	800301c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	11db      	asrs	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f063 030f 	orn	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <I2C_MasterRequestWrite+0xfc>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f875 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e010      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <I2C_MasterRequestWrite+0x100>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f865 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010008 	.word	0x00010008
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	e025      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d021      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fe fe27 	bl	8001cb0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e023      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10d      	bne.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	e00c      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0b6      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003100:	e051      	b.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d123      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e046      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fda5 	bl	8001cb0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e020      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10c      	bne.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e00b      	b.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d18d      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	e02d      	b.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f878 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e02d      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d021      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe fd4b 	bl	8001cb0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d1ca      	bne.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327e:	e02d      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f837 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02d      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d021      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe fd0a 	bl	8001cb0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1ca      	bne.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d11b      	bne.n	8003344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e26c      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8087 	beq.w	800347e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
 800337a:	d00c      	beq.n	8003396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d112      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06c      	beq.n	800347c <HAL_RCC_OscConfig+0x12c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d168      	bne.n	800347c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e246      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x76>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e02e      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xbc>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fc40 	bl	8001cb0 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fc3c 	bl	8001cb0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1fa      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xe4>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fc2c 	bl	8001cb0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fc28 	bl	8001cb0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1e6      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x10c>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1ba      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fbe1 	bl	8001cb0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fbdd 	bl	8001cb0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e19b      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4927      	ldr	r1, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fbc0 	bl	8001cb0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fbbc 	bl	8001cb0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e17a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe fba0 	bl	8001cb0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fb9c 	bl	8001cb0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e15a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 fad8 	bl	8003b48 <RCC_Delay>
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fe fb86 	bl	8001cb0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fb82 	bl	8001cb0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e140      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	42420000 	.word	0x42420000
 80035c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b97      	ldr	r3, [pc, #604]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a93      	ldr	r2, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b91      	ldr	r3, [pc, #580]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b8e      	ldr	r3, [pc, #568]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b8b      	ldr	r3, [pc, #556]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8a      	ldr	r2, [pc, #552]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fb43 	bl	8001cb0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fb3f 	bl	8001cb0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0fd      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003654:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a7a      	ldr	r2, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e02d      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x334>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x356>
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a66      	ldr	r2, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fe faf3 	bl	8001cb0 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fe faef 	bl	8001cb0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0ab      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fadd 	bl	8001cb0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe fad9 	bl	8001cb0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e095      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8081 	beq.w	800383a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d061      	beq.n	8003808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d146      	bne.n	80037da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe faad 	bl	8001cb0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe faa9 	bl	8001cb0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e067      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	492d      	ldr	r1, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a19      	ldr	r1, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fa7d 	bl	8001cb0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fa79 	bl	8001cb0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e037      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
 80037d8:	e02f      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fa66 	bl	8001cb0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fa62 	bl	8001cb0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e020      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x498>
 8003806:	e018      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e013      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	42420060 	.word	0x42420060

08003850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d0      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4965      	ldr	r1, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d040      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e073      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fe f9b6 	bl	8001cb0 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe f9b2 	bl	8001cb0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e053      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d210      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1cc>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f914 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	0800894c 	.word	0x0800894c
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b490      	push	{r4, r7}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a2c:	1d3c      	adds	r4, r7, #4
 8003a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a34:	f240 2301 	movw	r3, #513	; 0x201
 8003a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x46>
 8003a62:	e02d      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a66:	623b      	str	r3, [r7, #32]
      break;
 8003a68:	e02d      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a96:	4413      	add	r3, r2
 8003a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa2:	fb02 f203 	mul.w	r2, r2, r3
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e004      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	623b      	str	r3, [r7, #32]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc90      	pop	{r4, r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	0800892c 	.word	0x0800892c
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	003d0900 	.word	0x003d0900

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	20000000 	.word	0x20000000

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff2 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	0800895c 	.word	0x0800895c

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffde 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	0adb      	lsrs	r3, r3, #11
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	0800895c 	.word	0x0800895c

08003b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <RCC_Delay+0x34>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <RCC_Delay+0x38>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	0a5b      	lsrs	r3, r3, #9
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b64:	bf00      	nop
  }
  while (Delay --);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	60fa      	str	r2, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f9      	bne.n	8003b64 <RCC_Delay+0x1c>
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d07d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	61d3      	str	r3, [r2, #28]
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d118      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a42      	ldr	r2, [pc, #264]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be4:	f7fe f864 	bl	8001cb0 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fe f860 	bl	8001cb0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e06d      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0a:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d027      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c32:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d014      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe f82f 	bl	8001cb0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fe f82b 	bl	8001cb0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e036      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ee      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	490b      	ldr	r1, [pc, #44]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	42420440 	.word	0x42420440

08003cf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b08d      	sub	sp, #52	; 0x34
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cfa:	f107 040c 	add.w	r4, r7, #12
 8003cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d04:	f240 2301 	movw	r3, #513	; 0x201
 8003d08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	f200 8091 	bhi.w	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d04c      	beq.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d07c      	beq.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d38:	e089      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8082 	beq.w	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	0c9b      	lsrs	r3, r3, #18
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d60:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d6c:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c5b      	lsrs	r3, r3, #17
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d8c:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	e004      	b.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	4a33      	ldr	r2, [pc, #204]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003da8:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db4:	d102      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dba:	e04a      	b.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dca:	e042      	b.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ddc:	d108      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dee:	e01f      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003e08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1a:	d11c      	bne.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003e28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e2e:	e012      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e30:	e011      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e32:	f7ff fe75 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0b9b      	lsrs	r3, r3, #14
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e56:	bf00      	nop
    }
  }
  return (frequency);
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3734      	adds	r7, #52	; 0x34
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	0800893c 	.word	0x0800893c
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	007a1200 	.word	0x007a1200
 8003e70:	003d0900 	.word	0x003d0900
 8003e74:	aaaaaaab 	.word	0xaaaaaaab

08003e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e03f      	b.n	8003f0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fd4e 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f829 	bl	8003f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f4e:	f023 030c 	bic.w	r3, r3, #12
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <UART_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7ff fdd0 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	e002      	b.n	8003f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f84:	f7ff fdb8 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8003f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <UART_SetConfig+0x118>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	0119      	lsls	r1, r3, #4
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <UART_SetConfig+0x118>)
 8003fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	2064      	movs	r0, #100	; 0x64
 8003fca:	fb00 f303 	mul.w	r3, r0, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	3332      	adds	r3, #50	; 0x32
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <UART_SetConfig+0x118>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe0:	4419      	add	r1, r3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <UART_SetConfig+0x118>)
 8003ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2064      	movs	r0, #100	; 0x64
 8004002:	fb00 f303 	mul.w	r3, r0, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	; 0x32
 800400c:	4a07      	ldr	r2, [pc, #28]	; (800402c <UART_SetConfig+0x118>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	440a      	add	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40013800 	.word	0x40013800
 800402c:	51eb851f 	.word	0x51eb851f

08004030 <__errno>:
 8004030:	4b01      	ldr	r3, [pc, #4]	; (8004038 <__errno+0x8>)
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	2000000c 	.word	0x2000000c

0800403c <__libc_init_array>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	2600      	movs	r6, #0
 8004040:	4d0c      	ldr	r5, [pc, #48]	; (8004074 <__libc_init_array+0x38>)
 8004042:	4c0d      	ldr	r4, [pc, #52]	; (8004078 <__libc_init_array+0x3c>)
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	42a6      	cmp	r6, r4
 800404a:	d109      	bne.n	8004060 <__libc_init_array+0x24>
 800404c:	f004 fc2a 	bl	80088a4 <_init>
 8004050:	2600      	movs	r6, #0
 8004052:	4d0a      	ldr	r5, [pc, #40]	; (800407c <__libc_init_array+0x40>)
 8004054:	4c0a      	ldr	r4, [pc, #40]	; (8004080 <__libc_init_array+0x44>)
 8004056:	1b64      	subs	r4, r4, r5
 8004058:	10a4      	asrs	r4, r4, #2
 800405a:	42a6      	cmp	r6, r4
 800405c:	d105      	bne.n	800406a <__libc_init_array+0x2e>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	f855 3b04 	ldr.w	r3, [r5], #4
 8004064:	4798      	blx	r3
 8004066:	3601      	adds	r6, #1
 8004068:	e7ee      	b.n	8004048 <__libc_init_array+0xc>
 800406a:	f855 3b04 	ldr.w	r3, [r5], #4
 800406e:	4798      	blx	r3
 8004070:	3601      	adds	r6, #1
 8004072:	e7f2      	b.n	800405a <__libc_init_array+0x1e>
 8004074:	08008e1c 	.word	0x08008e1c
 8004078:	08008e1c 	.word	0x08008e1c
 800407c:	08008e1c 	.word	0x08008e1c
 8004080:	08008e20 	.word	0x08008e20

08004084 <memset>:
 8004084:	4603      	mov	r3, r0
 8004086:	4402      	add	r2, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <__cvt>:
 8004094:	2b00      	cmp	r3, #0
 8004096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409a:	461f      	mov	r7, r3
 800409c:	bfbb      	ittet	lt
 800409e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	461f      	movlt	r7, r3
 80040a4:	2300      	movge	r3, #0
 80040a6:	232d      	movlt	r3, #45	; 0x2d
 80040a8:	b088      	sub	sp, #32
 80040aa:	4614      	mov	r4, r2
 80040ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040b0:	7013      	strb	r3, [r2, #0]
 80040b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80040b8:	f023 0820 	bic.w	r8, r3, #32
 80040bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040c0:	d005      	beq.n	80040ce <__cvt+0x3a>
 80040c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040c6:	d100      	bne.n	80040ca <__cvt+0x36>
 80040c8:	3501      	adds	r5, #1
 80040ca:	2302      	movs	r3, #2
 80040cc:	e000      	b.n	80040d0 <__cvt+0x3c>
 80040ce:	2303      	movs	r3, #3
 80040d0:	aa07      	add	r2, sp, #28
 80040d2:	9204      	str	r2, [sp, #16]
 80040d4:	aa06      	add	r2, sp, #24
 80040d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040da:	e9cd 3500 	strd	r3, r5, [sp]
 80040de:	4622      	mov	r2, r4
 80040e0:	463b      	mov	r3, r7
 80040e2:	f001 fda1 	bl	8005c28 <_dtoa_r>
 80040e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ea:	4606      	mov	r6, r0
 80040ec:	d102      	bne.n	80040f4 <__cvt+0x60>
 80040ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040f0:	07db      	lsls	r3, r3, #31
 80040f2:	d522      	bpl.n	800413a <__cvt+0xa6>
 80040f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f8:	eb06 0905 	add.w	r9, r6, r5
 80040fc:	d110      	bne.n	8004120 <__cvt+0x8c>
 80040fe:	7833      	ldrb	r3, [r6, #0]
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d10a      	bne.n	800411a <__cvt+0x86>
 8004104:	2200      	movs	r2, #0
 8004106:	2300      	movs	r3, #0
 8004108:	4620      	mov	r0, r4
 800410a:	4639      	mov	r1, r7
 800410c:	f7fc fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8004110:	b918      	cbnz	r0, 800411a <__cvt+0x86>
 8004112:	f1c5 0501 	rsb	r5, r5, #1
 8004116:	f8ca 5000 	str.w	r5, [sl]
 800411a:	f8da 3000 	ldr.w	r3, [sl]
 800411e:	4499      	add	r9, r3
 8004120:	2200      	movs	r2, #0
 8004122:	2300      	movs	r3, #0
 8004124:	4620      	mov	r0, r4
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800412c:	b108      	cbz	r0, 8004132 <__cvt+0x9e>
 800412e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004132:	2230      	movs	r2, #48	; 0x30
 8004134:	9b07      	ldr	r3, [sp, #28]
 8004136:	454b      	cmp	r3, r9
 8004138:	d307      	bcc.n	800414a <__cvt+0xb6>
 800413a:	4630      	mov	r0, r6
 800413c:	9b07      	ldr	r3, [sp, #28]
 800413e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004140:	1b9b      	subs	r3, r3, r6
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	b008      	add	sp, #32
 8004146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	9107      	str	r1, [sp, #28]
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e7f0      	b.n	8004134 <__cvt+0xa0>

08004152 <__exponent>:
 8004152:	4603      	mov	r3, r0
 8004154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004156:	2900      	cmp	r1, #0
 8004158:	f803 2b02 	strb.w	r2, [r3], #2
 800415c:	bfb6      	itet	lt
 800415e:	222d      	movlt	r2, #45	; 0x2d
 8004160:	222b      	movge	r2, #43	; 0x2b
 8004162:	4249      	neglt	r1, r1
 8004164:	2909      	cmp	r1, #9
 8004166:	7042      	strb	r2, [r0, #1]
 8004168:	dd2b      	ble.n	80041c2 <__exponent+0x70>
 800416a:	f10d 0407 	add.w	r4, sp, #7
 800416e:	46a4      	mov	ip, r4
 8004170:	270a      	movs	r7, #10
 8004172:	fb91 f6f7 	sdiv	r6, r1, r7
 8004176:	460a      	mov	r2, r1
 8004178:	46a6      	mov	lr, r4
 800417a:	fb07 1516 	mls	r5, r7, r6, r1
 800417e:	2a63      	cmp	r2, #99	; 0x63
 8004180:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004184:	4631      	mov	r1, r6
 8004186:	f104 34ff 	add.w	r4, r4, #4294967295
 800418a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800418e:	dcf0      	bgt.n	8004172 <__exponent+0x20>
 8004190:	3130      	adds	r1, #48	; 0x30
 8004192:	f1ae 0502 	sub.w	r5, lr, #2
 8004196:	f804 1c01 	strb.w	r1, [r4, #-1]
 800419a:	4629      	mov	r1, r5
 800419c:	1c44      	adds	r4, r0, #1
 800419e:	4561      	cmp	r1, ip
 80041a0:	d30a      	bcc.n	80041b8 <__exponent+0x66>
 80041a2:	f10d 0209 	add.w	r2, sp, #9
 80041a6:	eba2 020e 	sub.w	r2, r2, lr
 80041aa:	4565      	cmp	r5, ip
 80041ac:	bf88      	it	hi
 80041ae:	2200      	movhi	r2, #0
 80041b0:	4413      	add	r3, r2
 80041b2:	1a18      	subs	r0, r3, r0
 80041b4:	b003      	add	sp, #12
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041c0:	e7ed      	b.n	800419e <__exponent+0x4c>
 80041c2:	2330      	movs	r3, #48	; 0x30
 80041c4:	3130      	adds	r1, #48	; 0x30
 80041c6:	7083      	strb	r3, [r0, #2]
 80041c8:	70c1      	strb	r1, [r0, #3]
 80041ca:	1d03      	adds	r3, r0, #4
 80041cc:	e7f1      	b.n	80041b2 <__exponent+0x60>
	...

080041d0 <_printf_float>:
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b091      	sub	sp, #68	; 0x44
 80041d6:	460c      	mov	r4, r1
 80041d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041dc:	4616      	mov	r6, r2
 80041de:	461f      	mov	r7, r3
 80041e0:	4605      	mov	r5, r0
 80041e2:	f002 fe75 	bl	8006ed0 <_localeconv_r>
 80041e6:	6803      	ldr	r3, [r0, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	9309      	str	r3, [sp, #36]	; 0x24
 80041ec:	f7fb ffb0 	bl	8000150 <strlen>
 80041f0:	2300      	movs	r3, #0
 80041f2:	930e      	str	r3, [sp, #56]	; 0x38
 80041f4:	f8d8 3000 	ldr.w	r3, [r8]
 80041f8:	900a      	str	r0, [sp, #40]	; 0x28
 80041fa:	3307      	adds	r3, #7
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	f103 0208 	add.w	r2, r3, #8
 8004204:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004208:	f8d4 b000 	ldr.w	fp, [r4]
 800420c:	f8c8 2000 	str.w	r2, [r8]
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004218:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800421c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004220:	930b      	str	r3, [sp, #44]	; 0x2c
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	4640      	mov	r0, r8
 8004228:	4b9c      	ldr	r3, [pc, #624]	; (800449c <_printf_float+0x2cc>)
 800422a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800422c:	f7fc fbee 	bl	8000a0c <__aeabi_dcmpun>
 8004230:	bb70      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	4640      	mov	r0, r8
 8004238:	4b98      	ldr	r3, [pc, #608]	; (800449c <_printf_float+0x2cc>)
 800423a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800423c:	f7fc fbc8 	bl	80009d0 <__aeabi_dcmple>
 8004240:	bb30      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004242:	2200      	movs	r2, #0
 8004244:	2300      	movs	r3, #0
 8004246:	4640      	mov	r0, r8
 8004248:	4651      	mov	r1, sl
 800424a:	f7fc fbb7 	bl	80009bc <__aeabi_dcmplt>
 800424e:	b110      	cbz	r0, 8004256 <_printf_float+0x86>
 8004250:	232d      	movs	r3, #45	; 0x2d
 8004252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004256:	4b92      	ldr	r3, [pc, #584]	; (80044a0 <_printf_float+0x2d0>)
 8004258:	4892      	ldr	r0, [pc, #584]	; (80044a4 <_printf_float+0x2d4>)
 800425a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800425e:	bf94      	ite	ls
 8004260:	4698      	movls	r8, r3
 8004262:	4680      	movhi	r8, r0
 8004264:	2303      	movs	r3, #3
 8004266:	f04f 0a00 	mov.w	sl, #0
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	f02b 0304 	bic.w	r3, fp, #4
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	4633      	mov	r3, r6
 8004274:	4621      	mov	r1, r4
 8004276:	4628      	mov	r0, r5
 8004278:	9700      	str	r7, [sp, #0]
 800427a:	aa0f      	add	r2, sp, #60	; 0x3c
 800427c:	f000 f9d4 	bl	8004628 <_printf_common>
 8004280:	3001      	adds	r0, #1
 8004282:	f040 8090 	bne.w	80043a6 <_printf_float+0x1d6>
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	b011      	add	sp, #68	; 0x44
 800428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004290:	4642      	mov	r2, r8
 8004292:	4653      	mov	r3, sl
 8004294:	4640      	mov	r0, r8
 8004296:	4651      	mov	r1, sl
 8004298:	f7fc fbb8 	bl	8000a0c <__aeabi_dcmpun>
 800429c:	b148      	cbz	r0, 80042b2 <_printf_float+0xe2>
 800429e:	f1ba 0f00 	cmp.w	sl, #0
 80042a2:	bfb8      	it	lt
 80042a4:	232d      	movlt	r3, #45	; 0x2d
 80042a6:	4880      	ldr	r0, [pc, #512]	; (80044a8 <_printf_float+0x2d8>)
 80042a8:	bfb8      	it	lt
 80042aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042ae:	4b7f      	ldr	r3, [pc, #508]	; (80044ac <_printf_float+0x2dc>)
 80042b0:	e7d3      	b.n	800425a <_printf_float+0x8a>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	d142      	bne.n	8004342 <_printf_float+0x172>
 80042bc:	2306      	movs	r3, #6
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	9206      	str	r2, [sp, #24]
 80042c4:	aa0e      	add	r2, sp, #56	; 0x38
 80042c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042ca:	aa0d      	add	r2, sp, #52	; 0x34
 80042cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042d0:	9203      	str	r2, [sp, #12]
 80042d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	4642      	mov	r2, r8
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4628      	mov	r0, r5
 80042e4:	4653      	mov	r3, sl
 80042e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80042e8:	f7ff fed4 	bl	8004094 <__cvt>
 80042ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ee:	4680      	mov	r8, r0
 80042f0:	2947      	cmp	r1, #71	; 0x47
 80042f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042f4:	d108      	bne.n	8004308 <_printf_float+0x138>
 80042f6:	1cc8      	adds	r0, r1, #3
 80042f8:	db02      	blt.n	8004300 <_printf_float+0x130>
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	4299      	cmp	r1, r3
 80042fe:	dd40      	ble.n	8004382 <_printf_float+0x1b2>
 8004300:	f1a9 0902 	sub.w	r9, r9, #2
 8004304:	fa5f f989 	uxtb.w	r9, r9
 8004308:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800430c:	d81f      	bhi.n	800434e <_printf_float+0x17e>
 800430e:	464a      	mov	r2, r9
 8004310:	3901      	subs	r1, #1
 8004312:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004316:	910d      	str	r1, [sp, #52]	; 0x34
 8004318:	f7ff ff1b 	bl	8004152 <__exponent>
 800431c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800431e:	4682      	mov	sl, r0
 8004320:	1813      	adds	r3, r2, r0
 8004322:	2a01      	cmp	r2, #1
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	dc02      	bgt.n	800432e <_printf_float+0x15e>
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	07d2      	lsls	r2, r2, #31
 800432c:	d501      	bpl.n	8004332 <_printf_float+0x162>
 800432e:	3301      	adds	r3, #1
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004336:	2b00      	cmp	r3, #0
 8004338:	d09b      	beq.n	8004272 <_printf_float+0xa2>
 800433a:	232d      	movs	r3, #45	; 0x2d
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004340:	e797      	b.n	8004272 <_printf_float+0xa2>
 8004342:	2947      	cmp	r1, #71	; 0x47
 8004344:	d1bc      	bne.n	80042c0 <_printf_float+0xf0>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ba      	bne.n	80042c0 <_printf_float+0xf0>
 800434a:	2301      	movs	r3, #1
 800434c:	e7b7      	b.n	80042be <_printf_float+0xee>
 800434e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004352:	d118      	bne.n	8004386 <_printf_float+0x1b6>
 8004354:	2900      	cmp	r1, #0
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	dd0b      	ble.n	8004372 <_printf_float+0x1a2>
 800435a:	6121      	str	r1, [r4, #16]
 800435c:	b913      	cbnz	r3, 8004364 <_printf_float+0x194>
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	07d0      	lsls	r0, r2, #31
 8004362:	d502      	bpl.n	800436a <_printf_float+0x19a>
 8004364:	3301      	adds	r3, #1
 8004366:	440b      	add	r3, r1
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	f04f 0a00 	mov.w	sl, #0
 800436e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004370:	e7df      	b.n	8004332 <_printf_float+0x162>
 8004372:	b913      	cbnz	r3, 800437a <_printf_float+0x1aa>
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	07d2      	lsls	r2, r2, #31
 8004378:	d501      	bpl.n	800437e <_printf_float+0x1ae>
 800437a:	3302      	adds	r3, #2
 800437c:	e7f4      	b.n	8004368 <_printf_float+0x198>
 800437e:	2301      	movs	r3, #1
 8004380:	e7f2      	b.n	8004368 <_printf_float+0x198>
 8004382:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004388:	4299      	cmp	r1, r3
 800438a:	db05      	blt.n	8004398 <_printf_float+0x1c8>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	6121      	str	r1, [r4, #16]
 8004390:	07d8      	lsls	r0, r3, #31
 8004392:	d5ea      	bpl.n	800436a <_printf_float+0x19a>
 8004394:	1c4b      	adds	r3, r1, #1
 8004396:	e7e7      	b.n	8004368 <_printf_float+0x198>
 8004398:	2900      	cmp	r1, #0
 800439a:	bfcc      	ite	gt
 800439c:	2201      	movgt	r2, #1
 800439e:	f1c1 0202 	rsble	r2, r1, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	e7e0      	b.n	8004368 <_printf_float+0x198>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	055a      	lsls	r2, r3, #21
 80043aa:	d407      	bmi.n	80043bc <_printf_float+0x1ec>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	4642      	mov	r2, r8
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b8      	blx	r7
 80043b6:	3001      	adds	r0, #1
 80043b8:	d12b      	bne.n	8004412 <_printf_float+0x242>
 80043ba:	e764      	b.n	8004286 <_printf_float+0xb6>
 80043bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043c0:	f240 80dd 	bls.w	800457e <_printf_float+0x3ae>
 80043c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	f7fc faec 	bl	80009a8 <__aeabi_dcmpeq>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d033      	beq.n	800443c <_printf_float+0x26c>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <_printf_float+0x2e0>)
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f af51 	beq.w	8004286 <_printf_float+0xb6>
 80043e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043e8:	429a      	cmp	r2, r3
 80043ea:	db02      	blt.n	80043f2 <_printf_float+0x222>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07d8      	lsls	r0, r3, #31
 80043f0:	d50f      	bpl.n	8004412 <_printf_float+0x242>
 80043f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	f43f af42 	beq.w	8004286 <_printf_float+0xb6>
 8004402:	f04f 0800 	mov.w	r8, #0
 8004406:	f104 091a 	add.w	r9, r4, #26
 800440a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800440c:	3b01      	subs	r3, #1
 800440e:	4543      	cmp	r3, r8
 8004410:	dc09      	bgt.n	8004426 <_printf_float+0x256>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	079b      	lsls	r3, r3, #30
 8004416:	f100 8102 	bmi.w	800461e <_printf_float+0x44e>
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800441e:	4298      	cmp	r0, r3
 8004420:	bfb8      	it	lt
 8004422:	4618      	movlt	r0, r3
 8004424:	e731      	b.n	800428a <_printf_float+0xba>
 8004426:	2301      	movs	r3, #1
 8004428:	464a      	mov	r2, r9
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f af28 	beq.w	8004286 <_printf_float+0xb6>
 8004436:	f108 0801 	add.w	r8, r8, #1
 800443a:	e7e6      	b.n	800440a <_printf_float+0x23a>
 800443c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	dc38      	bgt.n	80044b4 <_printf_float+0x2e4>
 8004442:	2301      	movs	r3, #1
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <_printf_float+0x2e0>)
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	f43f af1a 	beq.w	8004286 <_printf_float+0xb6>
 8004452:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004456:	4313      	orrs	r3, r2
 8004458:	d102      	bne.n	8004460 <_printf_float+0x290>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	07d9      	lsls	r1, r3, #31
 800445e:	d5d8      	bpl.n	8004412 <_printf_float+0x242>
 8004460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004464:	4631      	mov	r1, r6
 8004466:	4628      	mov	r0, r5
 8004468:	47b8      	blx	r7
 800446a:	3001      	adds	r0, #1
 800446c:	f43f af0b 	beq.w	8004286 <_printf_float+0xb6>
 8004470:	f04f 0900 	mov.w	r9, #0
 8004474:	f104 0a1a 	add.w	sl, r4, #26
 8004478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800447a:	425b      	negs	r3, r3
 800447c:	454b      	cmp	r3, r9
 800447e:	dc01      	bgt.n	8004484 <_printf_float+0x2b4>
 8004480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004482:	e794      	b.n	80043ae <_printf_float+0x1de>
 8004484:	2301      	movs	r3, #1
 8004486:	4652      	mov	r2, sl
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f aef9 	beq.w	8004286 <_printf_float+0xb6>
 8004494:	f109 0901 	add.w	r9, r9, #1
 8004498:	e7ee      	b.n	8004478 <_printf_float+0x2a8>
 800449a:	bf00      	nop
 800449c:	7fefffff 	.word	0x7fefffff
 80044a0:	08008968 	.word	0x08008968
 80044a4:	0800896c 	.word	0x0800896c
 80044a8:	08008974 	.word	0x08008974
 80044ac:	08008970 	.word	0x08008970
 80044b0:	08008978 	.word	0x08008978
 80044b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044b8:	429a      	cmp	r2, r3
 80044ba:	bfa8      	it	ge
 80044bc:	461a      	movge	r2, r3
 80044be:	2a00      	cmp	r2, #0
 80044c0:	4691      	mov	r9, r2
 80044c2:	dc37      	bgt.n	8004534 <_printf_float+0x364>
 80044c4:	f04f 0b00 	mov.w	fp, #0
 80044c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044cc:	f104 021a 	add.w	r2, r4, #26
 80044d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044d4:	ebaa 0309 	sub.w	r3, sl, r9
 80044d8:	455b      	cmp	r3, fp
 80044da:	dc33      	bgt.n	8004544 <_printf_float+0x374>
 80044dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044e0:	429a      	cmp	r2, r3
 80044e2:	db3b      	blt.n	800455c <_printf_float+0x38c>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d438      	bmi.n	800455c <_printf_float+0x38c>
 80044ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044ee:	eba2 030a 	sub.w	r3, r2, sl
 80044f2:	eba2 0901 	sub.w	r9, r2, r1
 80044f6:	4599      	cmp	r9, r3
 80044f8:	bfa8      	it	ge
 80044fa:	4699      	movge	r9, r3
 80044fc:	f1b9 0f00 	cmp.w	r9, #0
 8004500:	dc34      	bgt.n	800456c <_printf_float+0x39c>
 8004502:	f04f 0800 	mov.w	r8, #0
 8004506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800450a:	f104 0a1a 	add.w	sl, r4, #26
 800450e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	eba3 0309 	sub.w	r3, r3, r9
 8004518:	4543      	cmp	r3, r8
 800451a:	f77f af7a 	ble.w	8004412 <_printf_float+0x242>
 800451e:	2301      	movs	r3, #1
 8004520:	4652      	mov	r2, sl
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f aeac 	beq.w	8004286 <_printf_float+0xb6>
 800452e:	f108 0801 	add.w	r8, r8, #1
 8004532:	e7ec      	b.n	800450e <_printf_float+0x33e>
 8004534:	4613      	mov	r3, r2
 8004536:	4631      	mov	r1, r6
 8004538:	4642      	mov	r2, r8
 800453a:	4628      	mov	r0, r5
 800453c:	47b8      	blx	r7
 800453e:	3001      	adds	r0, #1
 8004540:	d1c0      	bne.n	80044c4 <_printf_float+0x2f4>
 8004542:	e6a0      	b.n	8004286 <_printf_float+0xb6>
 8004544:	2301      	movs	r3, #1
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	920b      	str	r2, [sp, #44]	; 0x2c
 800454c:	47b8      	blx	r7
 800454e:	3001      	adds	r0, #1
 8004550:	f43f ae99 	beq.w	8004286 <_printf_float+0xb6>
 8004554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004556:	f10b 0b01 	add.w	fp, fp, #1
 800455a:	e7b9      	b.n	80044d0 <_printf_float+0x300>
 800455c:	4631      	mov	r1, r6
 800455e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	d1bf      	bne.n	80044ea <_printf_float+0x31a>
 800456a:	e68c      	b.n	8004286 <_printf_float+0xb6>
 800456c:	464b      	mov	r3, r9
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	eb08 020a 	add.w	r2, r8, sl
 8004576:	47b8      	blx	r7
 8004578:	3001      	adds	r0, #1
 800457a:	d1c2      	bne.n	8004502 <_printf_float+0x332>
 800457c:	e683      	b.n	8004286 <_printf_float+0xb6>
 800457e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004580:	2a01      	cmp	r2, #1
 8004582:	dc01      	bgt.n	8004588 <_printf_float+0x3b8>
 8004584:	07db      	lsls	r3, r3, #31
 8004586:	d537      	bpl.n	80045f8 <_printf_float+0x428>
 8004588:	2301      	movs	r3, #1
 800458a:	4642      	mov	r2, r8
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	f43f ae77 	beq.w	8004286 <_printf_float+0xb6>
 8004598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	47b8      	blx	r7
 80045a2:	3001      	adds	r0, #1
 80045a4:	f43f ae6f 	beq.w	8004286 <_printf_float+0xb6>
 80045a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045ac:	2200      	movs	r2, #0
 80045ae:	2300      	movs	r3, #0
 80045b0:	f7fc f9fa 	bl	80009a8 <__aeabi_dcmpeq>
 80045b4:	b9d8      	cbnz	r0, 80045ee <_printf_float+0x41e>
 80045b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b8:	f108 0201 	add.w	r2, r8, #1
 80045bc:	3b01      	subs	r3, #1
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d10e      	bne.n	80045e6 <_printf_float+0x416>
 80045c8:	e65d      	b.n	8004286 <_printf_float+0xb6>
 80045ca:	2301      	movs	r3, #1
 80045cc:	464a      	mov	r2, r9
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	f43f ae56 	beq.w	8004286 <_printf_float+0xb6>
 80045da:	f108 0801 	add.w	r8, r8, #1
 80045de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e0:	3b01      	subs	r3, #1
 80045e2:	4543      	cmp	r3, r8
 80045e4:	dcf1      	bgt.n	80045ca <_printf_float+0x3fa>
 80045e6:	4653      	mov	r3, sl
 80045e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045ec:	e6e0      	b.n	80043b0 <_printf_float+0x1e0>
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f104 091a 	add.w	r9, r4, #26
 80045f6:	e7f2      	b.n	80045de <_printf_float+0x40e>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4642      	mov	r2, r8
 80045fc:	e7df      	b.n	80045be <_printf_float+0x3ee>
 80045fe:	2301      	movs	r3, #1
 8004600:	464a      	mov	r2, r9
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae3c 	beq.w	8004286 <_printf_float+0xb6>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	4543      	cmp	r3, r8
 800461a:	dcf0      	bgt.n	80045fe <_printf_float+0x42e>
 800461c:	e6fd      	b.n	800441a <_printf_float+0x24a>
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	f104 0919 	add.w	r9, r4, #25
 8004626:	e7f4      	b.n	8004612 <_printf_float+0x442>

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4699      	mov	r9, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	4607      	mov	r7, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfb8      	it	lt
 800463a:	4613      	movlt	r3, r2
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004642:	460c      	mov	r4, r1
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc28      	bgt.n	80046c2 <_printf_common+0x9a>
 8004670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d42d      	bmi.n	80046dc <_printf_common+0xb4>
 8004680:	4649      	mov	r1, r9
 8004682:	4638      	mov	r0, r7
 8004684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d020      	beq.n	80046d0 <_printf_common+0xa8>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	68e5      	ldr	r5, [r4, #12]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf18      	it	ne
 800469a:	2500      	movne	r5, #0
 800469c:	6832      	ldr	r2, [r6, #0]
 800469e:	f04f 0600 	mov.w	r6, #0
 80046a2:	68a3      	ldr	r3, [r4, #8]
 80046a4:	bf08      	it	eq
 80046a6:	1aad      	subeq	r5, r5, r2
 80046a8:	6922      	ldr	r2, [r4, #16]
 80046aa:	bf08      	it	eq
 80046ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bfc4      	itt	gt
 80046b4:	1a9b      	subgt	r3, r3, r2
 80046b6:	18ed      	addgt	r5, r5, r3
 80046b8:	341a      	adds	r4, #26
 80046ba:	42b5      	cmp	r5, r6
 80046bc:	d11a      	bne.n	80046f4 <_printf_common+0xcc>
 80046be:	2000      	movs	r0, #0
 80046c0:	e008      	b.n	80046d4 <_printf_common+0xac>
 80046c2:	2301      	movs	r3, #1
 80046c4:	4652      	mov	r2, sl
 80046c6:	4649      	mov	r1, r9
 80046c8:	4638      	mov	r0, r7
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d103      	bne.n	80046d8 <_printf_common+0xb0>
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d8:	3501      	adds	r5, #1
 80046da:	e7c4      	b.n	8004666 <_printf_common+0x3e>
 80046dc:	2030      	movs	r0, #48	; 0x30
 80046de:	18e1      	adds	r1, r4, r3
 80046e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ea:	4422      	add	r2, r4
 80046ec:	3302      	adds	r3, #2
 80046ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f2:	e7c5      	b.n	8004680 <_printf_common+0x58>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4622      	mov	r2, r4
 80046f8:	4649      	mov	r1, r9
 80046fa:	4638      	mov	r0, r7
 80046fc:	47c0      	blx	r8
 80046fe:	3001      	adds	r0, #1
 8004700:	d0e6      	beq.n	80046d0 <_printf_common+0xa8>
 8004702:	3601      	adds	r6, #1
 8004704:	e7d9      	b.n	80046ba <_printf_common+0x92>
	...

08004708 <_printf_i>:
 8004708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	460c      	mov	r4, r1
 800470e:	7e27      	ldrb	r7, [r4, #24]
 8004710:	4691      	mov	r9, r2
 8004712:	2f78      	cmp	r7, #120	; 0x78
 8004714:	4680      	mov	r8, r0
 8004716:	469a      	mov	sl, r3
 8004718:	990c      	ldr	r1, [sp, #48]	; 0x30
 800471a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800471e:	d807      	bhi.n	8004730 <_printf_i+0x28>
 8004720:	2f62      	cmp	r7, #98	; 0x62
 8004722:	d80a      	bhi.n	800473a <_printf_i+0x32>
 8004724:	2f00      	cmp	r7, #0
 8004726:	f000 80d9 	beq.w	80048dc <_printf_i+0x1d4>
 800472a:	2f58      	cmp	r7, #88	; 0x58
 800472c:	f000 80a4 	beq.w	8004878 <_printf_i+0x170>
 8004730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004738:	e03a      	b.n	80047b0 <_printf_i+0xa8>
 800473a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800473e:	2b15      	cmp	r3, #21
 8004740:	d8f6      	bhi.n	8004730 <_printf_i+0x28>
 8004742:	a001      	add	r0, pc, #4	; (adr r0, 8004748 <_printf_i+0x40>)
 8004744:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047b5 	.word	0x080047b5
 8004750:	08004731 	.word	0x08004731
 8004754:	08004731 	.word	0x08004731
 8004758:	08004731 	.word	0x08004731
 800475c:	08004731 	.word	0x08004731
 8004760:	080047b5 	.word	0x080047b5
 8004764:	08004731 	.word	0x08004731
 8004768:	08004731 	.word	0x08004731
 800476c:	08004731 	.word	0x08004731
 8004770:	08004731 	.word	0x08004731
 8004774:	080048c3 	.word	0x080048c3
 8004778:	080047e5 	.word	0x080047e5
 800477c:	080048a5 	.word	0x080048a5
 8004780:	08004731 	.word	0x08004731
 8004784:	08004731 	.word	0x08004731
 8004788:	080048e5 	.word	0x080048e5
 800478c:	08004731 	.word	0x08004731
 8004790:	080047e5 	.word	0x080047e5
 8004794:	08004731 	.word	0x08004731
 8004798:	08004731 	.word	0x08004731
 800479c:	080048ad 	.word	0x080048ad
 80047a0:	680b      	ldr	r3, [r1, #0]
 80047a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	600a      	str	r2, [r1, #0]
 80047ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0a4      	b.n	80048fe <_printf_i+0x1f6>
 80047b4:	6825      	ldr	r5, [r4, #0]
 80047b6:	6808      	ldr	r0, [r1, #0]
 80047b8:	062e      	lsls	r6, r5, #24
 80047ba:	f100 0304 	add.w	r3, r0, #4
 80047be:	d50a      	bpl.n	80047d6 <_printf_i+0xce>
 80047c0:	6805      	ldr	r5, [r0, #0]
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	da03      	bge.n	80047d0 <_printf_i+0xc8>
 80047c8:	232d      	movs	r3, #45	; 0x2d
 80047ca:	426d      	negs	r5, r5
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d0:	230a      	movs	r3, #10
 80047d2:	485e      	ldr	r0, [pc, #376]	; (800494c <_printf_i+0x244>)
 80047d4:	e019      	b.n	800480a <_printf_i+0x102>
 80047d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047da:	6805      	ldr	r5, [r0, #0]
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	bf18      	it	ne
 80047e0:	b22d      	sxthne	r5, r5
 80047e2:	e7ef      	b.n	80047c4 <_printf_i+0xbc>
 80047e4:	680b      	ldr	r3, [r1, #0]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	1d18      	adds	r0, r3, #4
 80047ea:	6008      	str	r0, [r1, #0]
 80047ec:	0628      	lsls	r0, r5, #24
 80047ee:	d501      	bpl.n	80047f4 <_printf_i+0xec>
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	e002      	b.n	80047fa <_printf_i+0xf2>
 80047f4:	0669      	lsls	r1, r5, #25
 80047f6:	d5fb      	bpl.n	80047f0 <_printf_i+0xe8>
 80047f8:	881d      	ldrh	r5, [r3, #0]
 80047fa:	2f6f      	cmp	r7, #111	; 0x6f
 80047fc:	bf0c      	ite	eq
 80047fe:	2308      	moveq	r3, #8
 8004800:	230a      	movne	r3, #10
 8004802:	4852      	ldr	r0, [pc, #328]	; (800494c <_printf_i+0x244>)
 8004804:	2100      	movs	r1, #0
 8004806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800480a:	6866      	ldr	r6, [r4, #4]
 800480c:	2e00      	cmp	r6, #0
 800480e:	bfa8      	it	ge
 8004810:	6821      	ldrge	r1, [r4, #0]
 8004812:	60a6      	str	r6, [r4, #8]
 8004814:	bfa4      	itt	ge
 8004816:	f021 0104 	bicge.w	r1, r1, #4
 800481a:	6021      	strge	r1, [r4, #0]
 800481c:	b90d      	cbnz	r5, 8004822 <_printf_i+0x11a>
 800481e:	2e00      	cmp	r6, #0
 8004820:	d04d      	beq.n	80048be <_printf_i+0x1b6>
 8004822:	4616      	mov	r6, r2
 8004824:	fbb5 f1f3 	udiv	r1, r5, r3
 8004828:	fb03 5711 	mls	r7, r3, r1, r5
 800482c:	5dc7      	ldrb	r7, [r0, r7]
 800482e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004832:	462f      	mov	r7, r5
 8004834:	42bb      	cmp	r3, r7
 8004836:	460d      	mov	r5, r1
 8004838:	d9f4      	bls.n	8004824 <_printf_i+0x11c>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d10b      	bne.n	8004856 <_printf_i+0x14e>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	07df      	lsls	r7, r3, #31
 8004842:	d508      	bpl.n	8004856 <_printf_i+0x14e>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	6861      	ldr	r1, [r4, #4]
 8004848:	4299      	cmp	r1, r3
 800484a:	bfde      	ittt	le
 800484c:	2330      	movle	r3, #48	; 0x30
 800484e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004852:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004856:	1b92      	subs	r2, r2, r6
 8004858:	6122      	str	r2, [r4, #16]
 800485a:	464b      	mov	r3, r9
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f8cd a000 	str.w	sl, [sp]
 8004864:	aa03      	add	r2, sp, #12
 8004866:	f7ff fedf 	bl	8004628 <_printf_common>
 800486a:	3001      	adds	r0, #1
 800486c:	d14c      	bne.n	8004908 <_printf_i+0x200>
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	b004      	add	sp, #16
 8004874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004878:	4834      	ldr	r0, [pc, #208]	; (800494c <_printf_i+0x244>)
 800487a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800487e:	680e      	ldr	r6, [r1, #0]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f856 5b04 	ldr.w	r5, [r6], #4
 8004886:	061f      	lsls	r7, r3, #24
 8004888:	600e      	str	r6, [r1, #0]
 800488a:	d514      	bpl.n	80048b6 <_printf_i+0x1ae>
 800488c:	07d9      	lsls	r1, r3, #31
 800488e:	bf44      	itt	mi
 8004890:	f043 0320 	orrmi.w	r3, r3, #32
 8004894:	6023      	strmi	r3, [r4, #0]
 8004896:	b91d      	cbnz	r5, 80048a0 <_printf_i+0x198>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	2310      	movs	r3, #16
 80048a2:	e7af      	b.n	8004804 <_printf_i+0xfc>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	2378      	movs	r3, #120	; 0x78
 80048ae:	4828      	ldr	r0, [pc, #160]	; (8004950 <_printf_i+0x248>)
 80048b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048b4:	e7e3      	b.n	800487e <_printf_i+0x176>
 80048b6:	065e      	lsls	r6, r3, #25
 80048b8:	bf48      	it	mi
 80048ba:	b2ad      	uxthmi	r5, r5
 80048bc:	e7e6      	b.n	800488c <_printf_i+0x184>
 80048be:	4616      	mov	r6, r2
 80048c0:	e7bb      	b.n	800483a <_printf_i+0x132>
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	6826      	ldr	r6, [r4, #0]
 80048c6:	1d1d      	adds	r5, r3, #4
 80048c8:	6960      	ldr	r0, [r4, #20]
 80048ca:	600d      	str	r5, [r1, #0]
 80048cc:	0635      	lsls	r5, r6, #24
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	d501      	bpl.n	80048d6 <_printf_i+0x1ce>
 80048d2:	6018      	str	r0, [r3, #0]
 80048d4:	e002      	b.n	80048dc <_printf_i+0x1d4>
 80048d6:	0671      	lsls	r1, r6, #25
 80048d8:	d5fb      	bpl.n	80048d2 <_printf_i+0x1ca>
 80048da:	8018      	strh	r0, [r3, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	4616      	mov	r6, r2
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	e7ba      	b.n	800485a <_printf_i+0x152>
 80048e4:	680b      	ldr	r3, [r1, #0]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	600a      	str	r2, [r1, #0]
 80048ea:	681e      	ldr	r6, [r3, #0]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4630      	mov	r0, r6
 80048f0:	6862      	ldr	r2, [r4, #4]
 80048f2:	f002 fb0b 	bl	8006f0c <memchr>
 80048f6:	b108      	cbz	r0, 80048fc <_printf_i+0x1f4>
 80048f8:	1b80      	subs	r0, r0, r6
 80048fa:	6060      	str	r0, [r4, #4]
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	2300      	movs	r3, #0
 8004902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004906:	e7a8      	b.n	800485a <_printf_i+0x152>
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	47d0      	blx	sl
 8004912:	3001      	adds	r0, #1
 8004914:	d0ab      	beq.n	800486e <_printf_i+0x166>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	079b      	lsls	r3, r3, #30
 800491a:	d413      	bmi.n	8004944 <_printf_i+0x23c>
 800491c:	68e0      	ldr	r0, [r4, #12]
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	4298      	cmp	r0, r3
 8004922:	bfb8      	it	lt
 8004924:	4618      	movlt	r0, r3
 8004926:	e7a4      	b.n	8004872 <_printf_i+0x16a>
 8004928:	2301      	movs	r3, #1
 800492a:	4632      	mov	r2, r6
 800492c:	4649      	mov	r1, r9
 800492e:	4640      	mov	r0, r8
 8004930:	47d0      	blx	sl
 8004932:	3001      	adds	r0, #1
 8004934:	d09b      	beq.n	800486e <_printf_i+0x166>
 8004936:	3501      	adds	r5, #1
 8004938:	68e3      	ldr	r3, [r4, #12]
 800493a:	9903      	ldr	r1, [sp, #12]
 800493c:	1a5b      	subs	r3, r3, r1
 800493e:	42ab      	cmp	r3, r5
 8004940:	dcf2      	bgt.n	8004928 <_printf_i+0x220>
 8004942:	e7eb      	b.n	800491c <_printf_i+0x214>
 8004944:	2500      	movs	r5, #0
 8004946:	f104 0619 	add.w	r6, r4, #25
 800494a:	e7f5      	b.n	8004938 <_printf_i+0x230>
 800494c:	0800897a 	.word	0x0800897a
 8004950:	0800898b 	.word	0x0800898b

08004954 <_scanf_float>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	b087      	sub	sp, #28
 800495a:	9303      	str	r3, [sp, #12]
 800495c:	688b      	ldr	r3, [r1, #8]
 800495e:	4617      	mov	r7, r2
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004966:	bf85      	ittet	hi
 8004968:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800496c:	195b      	addhi	r3, r3, r5
 800496e:	2300      	movls	r3, #0
 8004970:	9302      	strhi	r3, [sp, #8]
 8004972:	bf88      	it	hi
 8004974:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004978:	468b      	mov	fp, r1
 800497a:	f04f 0500 	mov.w	r5, #0
 800497e:	bf8c      	ite	hi
 8004980:	608b      	strhi	r3, [r1, #8]
 8004982:	9302      	strls	r3, [sp, #8]
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	4680      	mov	r8, r0
 8004988:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800498c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004990:	460c      	mov	r4, r1
 8004992:	465e      	mov	r6, fp
 8004994:	46aa      	mov	sl, r5
 8004996:	46a9      	mov	r9, r5
 8004998:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800499c:	9501      	str	r5, [sp, #4]
 800499e:	68a2      	ldr	r2, [r4, #8]
 80049a0:	b152      	cbz	r2, 80049b8 <_scanf_float+0x64>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b4e      	cmp	r3, #78	; 0x4e
 80049a8:	d864      	bhi.n	8004a74 <_scanf_float+0x120>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d83c      	bhi.n	8004a28 <_scanf_float+0xd4>
 80049ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049b2:	b2c8      	uxtb	r0, r1
 80049b4:	280e      	cmp	r0, #14
 80049b6:	d93a      	bls.n	8004a2e <_scanf_float+0xda>
 80049b8:	f1b9 0f00 	cmp.w	r9, #0
 80049bc:	d003      	beq.n	80049c6 <_scanf_float+0x72>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ca:	f1ba 0f01 	cmp.w	sl, #1
 80049ce:	f200 8113 	bhi.w	8004bf8 <_scanf_float+0x2a4>
 80049d2:	455e      	cmp	r6, fp
 80049d4:	f200 8105 	bhi.w	8004be2 <_scanf_float+0x28e>
 80049d8:	2501      	movs	r5, #1
 80049da:	4628      	mov	r0, r5
 80049dc:	b007      	add	sp, #28
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049e6:	2a0d      	cmp	r2, #13
 80049e8:	d8e6      	bhi.n	80049b8 <_scanf_float+0x64>
 80049ea:	a101      	add	r1, pc, #4	; (adr r1, 80049f0 <_scanf_float+0x9c>)
 80049ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049f0:	08004b2f 	.word	0x08004b2f
 80049f4:	080049b9 	.word	0x080049b9
 80049f8:	080049b9 	.word	0x080049b9
 80049fc:	080049b9 	.word	0x080049b9
 8004a00:	08004b8f 	.word	0x08004b8f
 8004a04:	08004b67 	.word	0x08004b67
 8004a08:	080049b9 	.word	0x080049b9
 8004a0c:	080049b9 	.word	0x080049b9
 8004a10:	08004b3d 	.word	0x08004b3d
 8004a14:	080049b9 	.word	0x080049b9
 8004a18:	080049b9 	.word	0x080049b9
 8004a1c:	080049b9 	.word	0x080049b9
 8004a20:	080049b9 	.word	0x080049b9
 8004a24:	08004af5 	.word	0x08004af5
 8004a28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a2c:	e7db      	b.n	80049e6 <_scanf_float+0x92>
 8004a2e:	290e      	cmp	r1, #14
 8004a30:	d8c2      	bhi.n	80049b8 <_scanf_float+0x64>
 8004a32:	a001      	add	r0, pc, #4	; (adr r0, 8004a38 <_scanf_float+0xe4>)
 8004a34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a38:	08004ae7 	.word	0x08004ae7
 8004a3c:	080049b9 	.word	0x080049b9
 8004a40:	08004ae7 	.word	0x08004ae7
 8004a44:	08004b7b 	.word	0x08004b7b
 8004a48:	080049b9 	.word	0x080049b9
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004ad1 	.word	0x08004ad1
 8004a54:	08004ad1 	.word	0x08004ad1
 8004a58:	08004ad1 	.word	0x08004ad1
 8004a5c:	08004ad1 	.word	0x08004ad1
 8004a60:	08004ad1 	.word	0x08004ad1
 8004a64:	08004ad1 	.word	0x08004ad1
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004ad1 	.word	0x08004ad1
 8004a74:	2b6e      	cmp	r3, #110	; 0x6e
 8004a76:	d809      	bhi.n	8004a8c <_scanf_float+0x138>
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d8b2      	bhi.n	80049e2 <_scanf_float+0x8e>
 8004a7c:	2b54      	cmp	r3, #84	; 0x54
 8004a7e:	d077      	beq.n	8004b70 <_scanf_float+0x21c>
 8004a80:	2b59      	cmp	r3, #89	; 0x59
 8004a82:	d199      	bne.n	80049b8 <_scanf_float+0x64>
 8004a84:	2d07      	cmp	r5, #7
 8004a86:	d197      	bne.n	80049b8 <_scanf_float+0x64>
 8004a88:	2508      	movs	r5, #8
 8004a8a:	e029      	b.n	8004ae0 <_scanf_float+0x18c>
 8004a8c:	2b74      	cmp	r3, #116	; 0x74
 8004a8e:	d06f      	beq.n	8004b70 <_scanf_float+0x21c>
 8004a90:	2b79      	cmp	r3, #121	; 0x79
 8004a92:	e7f6      	b.n	8004a82 <_scanf_float+0x12e>
 8004a94:	6821      	ldr	r1, [r4, #0]
 8004a96:	05c8      	lsls	r0, r1, #23
 8004a98:	d51a      	bpl.n	8004ad0 <_scanf_float+0x17c>
 8004a9a:	9b02      	ldr	r3, [sp, #8]
 8004a9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004aa0:	6021      	str	r1, [r4, #0]
 8004aa2:	f109 0901 	add.w	r9, r9, #1
 8004aa6:	b11b      	cbz	r3, 8004ab0 <_scanf_float+0x15c>
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	3201      	adds	r2, #1
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	60a2      	str	r2, [r4, #8]
 8004ab0:	68a3      	ldr	r3, [r4, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	60a3      	str	r3, [r4, #8]
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	f340 8084 	ble.w	8004bd0 <_scanf_float+0x27c>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	e766      	b.n	800499e <_scanf_float+0x4a>
 8004ad0:	eb1a 0f05 	cmn.w	sl, r5
 8004ad4:	f47f af70 	bne.w	80049b8 <_scanf_float+0x64>
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ae4:	e7e4      	b.n	8004ab0 <_scanf_float+0x15c>
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	0610      	lsls	r0, r2, #24
 8004aea:	f57f af65 	bpl.w	80049b8 <_scanf_float+0x64>
 8004aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af2:	e7f4      	b.n	8004ade <_scanf_float+0x18a>
 8004af4:	f1ba 0f00 	cmp.w	sl, #0
 8004af8:	d10e      	bne.n	8004b18 <_scanf_float+0x1c4>
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	d10e      	bne.n	8004b1e <_scanf_float+0x1ca>
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b0a:	d108      	bne.n	8004b1e <_scanf_float+0x1ca>
 8004b0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b10:	f04f 0a01 	mov.w	sl, #1
 8004b14:	6022      	str	r2, [r4, #0]
 8004b16:	e7e3      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b18:	f1ba 0f02 	cmp.w	sl, #2
 8004b1c:	d055      	beq.n	8004bca <_scanf_float+0x276>
 8004b1e:	2d01      	cmp	r5, #1
 8004b20:	d002      	beq.n	8004b28 <_scanf_float+0x1d4>
 8004b22:	2d04      	cmp	r5, #4
 8004b24:	f47f af48 	bne.w	80049b8 <_scanf_float+0x64>
 8004b28:	3501      	adds	r5, #1
 8004b2a:	b2ed      	uxtb	r5, r5
 8004b2c:	e7d8      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b2e:	f1ba 0f01 	cmp.w	sl, #1
 8004b32:	f47f af41 	bne.w	80049b8 <_scanf_float+0x64>
 8004b36:	f04f 0a02 	mov.w	sl, #2
 8004b3a:	e7d1      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b3c:	b97d      	cbnz	r5, 8004b5e <_scanf_float+0x20a>
 8004b3e:	f1b9 0f00 	cmp.w	r9, #0
 8004b42:	f47f af3c 	bne.w	80049be <_scanf_float+0x6a>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b50:	f47f af39 	bne.w	80049c6 <_scanf_float+0x72>
 8004b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b58:	2501      	movs	r5, #1
 8004b5a:	6022      	str	r2, [r4, #0]
 8004b5c:	e7c0      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b5e:	2d03      	cmp	r5, #3
 8004b60:	d0e2      	beq.n	8004b28 <_scanf_float+0x1d4>
 8004b62:	2d05      	cmp	r5, #5
 8004b64:	e7de      	b.n	8004b24 <_scanf_float+0x1d0>
 8004b66:	2d02      	cmp	r5, #2
 8004b68:	f47f af26 	bne.w	80049b8 <_scanf_float+0x64>
 8004b6c:	2503      	movs	r5, #3
 8004b6e:	e7b7      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b70:	2d06      	cmp	r5, #6
 8004b72:	f47f af21 	bne.w	80049b8 <_scanf_float+0x64>
 8004b76:	2507      	movs	r5, #7
 8004b78:	e7b2      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	0591      	lsls	r1, r2, #22
 8004b7e:	f57f af1b 	bpl.w	80049b8 <_scanf_float+0x64>
 8004b82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b86:	6022      	str	r2, [r4, #0]
 8004b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b8c:	e7a8      	b.n	8004ae0 <_scanf_float+0x18c>
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b98:	d006      	beq.n	8004ba8 <_scanf_float+0x254>
 8004b9a:	0550      	lsls	r0, r2, #21
 8004b9c:	f57f af0c 	bpl.w	80049b8 <_scanf_float+0x64>
 8004ba0:	f1b9 0f00 	cmp.w	r9, #0
 8004ba4:	f43f af0f 	beq.w	80049c6 <_scanf_float+0x72>
 8004ba8:	0591      	lsls	r1, r2, #22
 8004baa:	bf58      	it	pl
 8004bac:	9901      	ldrpl	r1, [sp, #4]
 8004bae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bb2:	bf58      	it	pl
 8004bb4:	eba9 0101 	subpl.w	r1, r9, r1
 8004bb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004bbc:	f04f 0900 	mov.w	r9, #0
 8004bc0:	bf58      	it	pl
 8004bc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	e78a      	b.n	8004ae0 <_scanf_float+0x18c>
 8004bca:	f04f 0a03 	mov.w	sl, #3
 8004bce:	e787      	b.n	8004ae0 <_scanf_float+0x18c>
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bd8:	4798      	blx	r3
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f43f aedf 	beq.w	800499e <_scanf_float+0x4a>
 8004be0:	e6ea      	b.n	80049b8 <_scanf_float+0x64>
 8004be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004be6:	463a      	mov	r2, r7
 8004be8:	4640      	mov	r0, r8
 8004bea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bee:	4798      	blx	r3
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	e6ec      	b.n	80049d2 <_scanf_float+0x7e>
 8004bf8:	1e6b      	subs	r3, r5, #1
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d825      	bhi.n	8004c4a <_scanf_float+0x2f6>
 8004bfe:	2d02      	cmp	r5, #2
 8004c00:	d836      	bhi.n	8004c70 <_scanf_float+0x31c>
 8004c02:	455e      	cmp	r6, fp
 8004c04:	f67f aee8 	bls.w	80049d8 <_scanf_float+0x84>
 8004c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c14:	4798      	blx	r3
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	e7f1      	b.n	8004c02 <_scanf_float+0x2ae>
 8004c1e:	9802      	ldr	r0, [sp, #8]
 8004c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c28:	463a      	mov	r2, r7
 8004c2a:	9002      	str	r0, [sp, #8]
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	4798      	blx	r3
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8004c3e:	f1ba 0f02 	cmp.w	sl, #2
 8004c42:	d1ec      	bne.n	8004c1e <_scanf_float+0x2ca>
 8004c44:	3d03      	subs	r5, #3
 8004c46:	b2ed      	uxtb	r5, r5
 8004c48:	1b76      	subs	r6, r6, r5
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	05da      	lsls	r2, r3, #23
 8004c4e:	d52f      	bpl.n	8004cb0 <_scanf_float+0x35c>
 8004c50:	055b      	lsls	r3, r3, #21
 8004c52:	d510      	bpl.n	8004c76 <_scanf_float+0x322>
 8004c54:	455e      	cmp	r6, fp
 8004c56:	f67f aebf 	bls.w	80049d8 <_scanf_float+0x84>
 8004c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4640      	mov	r0, r8
 8004c62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c66:	4798      	blx	r3
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	e7f1      	b.n	8004c54 <_scanf_float+0x300>
 8004c70:	46aa      	mov	sl, r5
 8004c72:	9602      	str	r6, [sp, #8]
 8004c74:	e7df      	b.n	8004c36 <_scanf_float+0x2e2>
 8004c76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	2965      	cmp	r1, #101	; 0x65
 8004c7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c82:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	d00c      	beq.n	8004ca4 <_scanf_float+0x350>
 8004c8a:	2945      	cmp	r1, #69	; 0x45
 8004c8c:	d00a      	beq.n	8004ca4 <_scanf_float+0x350>
 8004c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c92:	463a      	mov	r2, r7
 8004c94:	4640      	mov	r0, r8
 8004c96:	4798      	blx	r3
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	1eb5      	subs	r5, r6, #2
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cac:	4798      	blx	r3
 8004cae:	462e      	mov	r6, r5
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	f015 0510 	ands.w	r5, r5, #16
 8004cb6:	d159      	bne.n	8004d6c <_scanf_float+0x418>
 8004cb8:	7035      	strb	r5, [r6, #0]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc4:	d11c      	bne.n	8004d00 <_scanf_float+0x3ac>
 8004cc6:	9b01      	ldr	r3, [sp, #4]
 8004cc8:	454b      	cmp	r3, r9
 8004cca:	eba3 0209 	sub.w	r2, r3, r9
 8004cce:	d124      	bne.n	8004d1a <_scanf_float+0x3c6>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4659      	mov	r1, fp
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	f000 fe8b 	bl	80059f0 <_strtod_r>
 8004cda:	f8d4 c000 	ldr.w	ip, [r4]
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	f01c 0f02 	tst.w	ip, #2
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460f      	mov	r7, r1
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	d021      	beq.n	8004d30 <_scanf_float+0x3dc>
 8004cec:	9903      	ldr	r1, [sp, #12]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	600a      	str	r2, [r1, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	e9c3 6700 	strd	r6, r7, [r3]
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60e3      	str	r3, [r4, #12]
 8004cfe:	e66c      	b.n	80049da <_scanf_float+0x86>
 8004d00:	9b04      	ldr	r3, [sp, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0e4      	beq.n	8004cd0 <_scanf_float+0x37c>
 8004d06:	9905      	ldr	r1, [sp, #20]
 8004d08:	230a      	movs	r3, #10
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	3101      	adds	r1, #1
 8004d10:	f000 fefa 	bl	8005b08 <_strtol_r>
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	9e05      	ldr	r6, [sp, #20]
 8004d18:	1ac2      	subs	r2, r0, r3
 8004d1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d1e:	429e      	cmp	r6, r3
 8004d20:	bf28      	it	cs
 8004d22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d26:	4630      	mov	r0, r6
 8004d28:	4911      	ldr	r1, [pc, #68]	; (8004d70 <_scanf_float+0x41c>)
 8004d2a:	f000 f829 	bl	8004d80 <siprintf>
 8004d2e:	e7cf      	b.n	8004cd0 <_scanf_float+0x37c>
 8004d30:	f01c 0f04 	tst.w	ip, #4
 8004d34:	f103 0e04 	add.w	lr, r3, #4
 8004d38:	d003      	beq.n	8004d42 <_scanf_float+0x3ee>
 8004d3a:	9903      	ldr	r1, [sp, #12]
 8004d3c:	f8c1 e000 	str.w	lr, [r1]
 8004d40:	e7d7      	b.n	8004cf2 <_scanf_float+0x39e>
 8004d42:	9a03      	ldr	r2, [sp, #12]
 8004d44:	f8c2 e000 	str.w	lr, [r2]
 8004d48:	f8d3 8000 	ldr.w	r8, [r3]
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	f7fb fe5c 	bl	8000a0c <__aeabi_dcmpun>
 8004d54:	b128      	cbz	r0, 8004d62 <_scanf_float+0x40e>
 8004d56:	4807      	ldr	r0, [pc, #28]	; (8004d74 <_scanf_float+0x420>)
 8004d58:	f000 f80e 	bl	8004d78 <nanf>
 8004d5c:	f8c8 0000 	str.w	r0, [r8]
 8004d60:	e7ca      	b.n	8004cf8 <_scanf_float+0x3a4>
 8004d62:	4630      	mov	r0, r6
 8004d64:	4639      	mov	r1, r7
 8004d66:	f7fb feaf 	bl	8000ac8 <__aeabi_d2f>
 8004d6a:	e7f7      	b.n	8004d5c <_scanf_float+0x408>
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	e634      	b.n	80049da <_scanf_float+0x86>
 8004d70:	0800899c 	.word	0x0800899c
 8004d74:	08008db8 	.word	0x08008db8

08004d78 <nanf>:
 8004d78:	4800      	ldr	r0, [pc, #0]	; (8004d7c <nanf+0x4>)
 8004d7a:	4770      	bx	lr
 8004d7c:	7fc00000 	.word	0x7fc00000

08004d80 <siprintf>:
 8004d80:	b40e      	push	{r1, r2, r3}
 8004d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d86:	b500      	push	{lr}
 8004d88:	b09c      	sub	sp, #112	; 0x70
 8004d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	9006      	str	r0, [sp, #24]
 8004d90:	9107      	str	r1, [sp, #28]
 8004d92:	9104      	str	r1, [sp, #16]
 8004d94:	4808      	ldr	r0, [pc, #32]	; (8004db8 <siprintf+0x38>)
 8004d96:	4909      	ldr	r1, [pc, #36]	; (8004dbc <siprintf+0x3c>)
 8004d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9c:	9105      	str	r1, [sp, #20]
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	a902      	add	r1, sp, #8
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	f002 fe96 	bl	8007ad4 <_svfiprintf_r>
 8004da8:	2200      	movs	r2, #0
 8004daa:	9b02      	ldr	r3, [sp, #8]
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	b01c      	add	sp, #112	; 0x70
 8004db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db4:	b003      	add	sp, #12
 8004db6:	4770      	bx	lr
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	ffff0208 	.word	0xffff0208

08004dc0 <sulp>:
 8004dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	4690      	mov	r8, r2
 8004dc8:	f002 fc2c 	bl	8007624 <__ulp>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d011      	beq.n	8004dfa <sulp+0x3a>
 8004dd6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004dda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dd0b      	ble.n	8004dfa <sulp+0x3a>
 8004de2:	2400      	movs	r4, #0
 8004de4:	051b      	lsls	r3, r3, #20
 8004de6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004dea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	f7fb fb71 	bl	80004d8 <__aeabi_dmul>
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e02:	0000      	movs	r0, r0
 8004e04:	0000      	movs	r0, r0
	...

08004e08 <_strtod_l>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	469b      	mov	fp, r3
 8004e0e:	2300      	movs	r3, #0
 8004e10:	b0a1      	sub	sp, #132	; 0x84
 8004e12:	931c      	str	r3, [sp, #112]	; 0x70
 8004e14:	4ba1      	ldr	r3, [pc, #644]	; (800509c <_strtod_l+0x294>)
 8004e16:	4682      	mov	sl, r0
 8004e18:	681f      	ldr	r7, [r3, #0]
 8004e1a:	460e      	mov	r6, r1
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e20:	f7fb f996 	bl	8000150 <strlen>
 8004e24:	f04f 0800 	mov.w	r8, #0
 8004e28:	4604      	mov	r4, r0
 8004e2a:	f04f 0900 	mov.w	r9, #0
 8004e2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	2a2b      	cmp	r2, #43	; 0x2b
 8004e36:	d04c      	beq.n	8004ed2 <_strtod_l+0xca>
 8004e38:	d83a      	bhi.n	8004eb0 <_strtod_l+0xa8>
 8004e3a:	2a0d      	cmp	r2, #13
 8004e3c:	d833      	bhi.n	8004ea6 <_strtod_l+0x9e>
 8004e3e:	2a08      	cmp	r2, #8
 8004e40:	d833      	bhi.n	8004eaa <_strtod_l+0xa2>
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	d03d      	beq.n	8004ec2 <_strtod_l+0xba>
 8004e46:	2300      	movs	r3, #0
 8004e48:	930c      	str	r3, [sp, #48]	; 0x30
 8004e4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e4c:	782b      	ldrb	r3, [r5, #0]
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	f040 80af 	bne.w	8004fb2 <_strtod_l+0x1aa>
 8004e54:	786b      	ldrb	r3, [r5, #1]
 8004e56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e5a:	2b58      	cmp	r3, #88	; 0x58
 8004e5c:	d16c      	bne.n	8004f38 <_strtod_l+0x130>
 8004e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e60:	4650      	mov	r0, sl
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	ab1c      	add	r3, sp, #112	; 0x70
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	4a8d      	ldr	r2, [pc, #564]	; (80050a0 <_strtod_l+0x298>)
 8004e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8004e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e70:	a91b      	add	r1, sp, #108	; 0x6c
 8004e72:	f001 fd2f 	bl	80068d4 <__gethex>
 8004e76:	f010 0607 	ands.w	r6, r0, #7
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	d005      	beq.n	8004e8a <_strtod_l+0x82>
 8004e7e:	2e06      	cmp	r6, #6
 8004e80:	d129      	bne.n	8004ed6 <_strtod_l+0xce>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3501      	adds	r5, #1
 8004e86:	951b      	str	r5, [sp, #108]	; 0x6c
 8004e88:	930c      	str	r3, [sp, #48]	; 0x30
 8004e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8596 	bne.w	80059be <_strtod_l+0xbb6>
 8004e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e94:	b1d3      	cbz	r3, 8004ecc <_strtod_l+0xc4>
 8004e96:	4642      	mov	r2, r8
 8004e98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	b021      	add	sp, #132	; 0x84
 8004ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea6:	2a20      	cmp	r2, #32
 8004ea8:	d1cd      	bne.n	8004e46 <_strtod_l+0x3e>
 8004eaa:	3301      	adds	r3, #1
 8004eac:	931b      	str	r3, [sp, #108]	; 0x6c
 8004eae:	e7bf      	b.n	8004e30 <_strtod_l+0x28>
 8004eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8004eb2:	d1c8      	bne.n	8004e46 <_strtod_l+0x3e>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	920c      	str	r2, [sp, #48]	; 0x30
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1c3      	bne.n	8004e4a <_strtod_l+0x42>
 8004ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ec4:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 8577 	bne.w	80059ba <_strtod_l+0xbb2>
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	e7e4      	b.n	8004e9c <_strtod_l+0x94>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	e7ef      	b.n	8004eb6 <_strtod_l+0xae>
 8004ed6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ed8:	b13a      	cbz	r2, 8004eea <_strtod_l+0xe2>
 8004eda:	2135      	movs	r1, #53	; 0x35
 8004edc:	a81e      	add	r0, sp, #120	; 0x78
 8004ede:	f002 fca5 	bl	800782c <__copybits>
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ee6:	f002 f86d 	bl	8006fc4 <_Bfree>
 8004eea:	3e01      	subs	r6, #1
 8004eec:	2e05      	cmp	r6, #5
 8004eee:	d807      	bhi.n	8004f00 <_strtod_l+0xf8>
 8004ef0:	e8df f006 	tbb	[pc, r6]
 8004ef4:	1d180b0e 	.word	0x1d180b0e
 8004ef8:	030e      	.short	0x030e
 8004efa:	f04f 0900 	mov.w	r9, #0
 8004efe:	46c8      	mov	r8, r9
 8004f00:	0721      	lsls	r1, r4, #28
 8004f02:	d5c2      	bpl.n	8004e8a <_strtod_l+0x82>
 8004f04:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004f08:	e7bf      	b.n	8004e8a <_strtod_l+0x82>
 8004f0a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004f0e:	e7f7      	b.n	8004f00 <_strtod_l+0xf8>
 8004f10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004f12:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004f16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004f22:	e7ed      	b.n	8004f00 <_strtod_l+0xf8>
 8004f24:	f04f 0800 	mov.w	r8, #0
 8004f28:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80050a4 <_strtod_l+0x29c>
 8004f2c:	e7e8      	b.n	8004f00 <_strtod_l+0xf8>
 8004f2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004f32:	f04f 38ff 	mov.w	r8, #4294967295
 8004f36:	e7e3      	b.n	8004f00 <_strtod_l+0xf8>
 8004f38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d0f9      	beq.n	8004f38 <_strtod_l+0x130>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0a0      	beq.n	8004e8a <_strtod_l+0x82>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9307      	str	r3, [sp, #28]
 8004f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f4e:	220a      	movs	r2, #10
 8004f50:	9308      	str	r3, [sp, #32]
 8004f52:	2300      	movs	r3, #0
 8004f54:	469b      	mov	fp, r3
 8004f56:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004f5a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004f5c:	7805      	ldrb	r5, [r0, #0]
 8004f5e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004f62:	b2d9      	uxtb	r1, r3
 8004f64:	2909      	cmp	r1, #9
 8004f66:	d926      	bls.n	8004fb6 <_strtod_l+0x1ae>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f002 fec8 	bl	8007d00 <strncmp>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d032      	beq.n	8004fda <_strtod_l+0x1d2>
 8004f74:	2000      	movs	r0, #0
 8004f76:	462b      	mov	r3, r5
 8004f78:	465c      	mov	r4, fp
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	9004      	str	r0, [sp, #16]
 8004f7e:	2b65      	cmp	r3, #101	; 0x65
 8004f80:	d001      	beq.n	8004f86 <_strtod_l+0x17e>
 8004f82:	2b45      	cmp	r3, #69	; 0x45
 8004f84:	d113      	bne.n	8004fae <_strtod_l+0x1a6>
 8004f86:	b91c      	cbnz	r4, 8004f90 <_strtod_l+0x188>
 8004f88:	9b07      	ldr	r3, [sp, #28]
 8004f8a:	4303      	orrs	r3, r0
 8004f8c:	d099      	beq.n	8004ec2 <_strtod_l+0xba>
 8004f8e:	2400      	movs	r4, #0
 8004f90:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004f92:	1c73      	adds	r3, r6, #1
 8004f94:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f96:	7873      	ldrb	r3, [r6, #1]
 8004f98:	2b2b      	cmp	r3, #43	; 0x2b
 8004f9a:	d078      	beq.n	800508e <_strtod_l+0x286>
 8004f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8004f9e:	d07b      	beq.n	8005098 <_strtod_l+0x290>
 8004fa0:	2700      	movs	r7, #0
 8004fa2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004fa6:	2909      	cmp	r1, #9
 8004fa8:	f240 8082 	bls.w	80050b0 <_strtod_l+0x2a8>
 8004fac:	961b      	str	r6, [sp, #108]	; 0x6c
 8004fae:	2500      	movs	r5, #0
 8004fb0:	e09e      	b.n	80050f0 <_strtod_l+0x2e8>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e7c9      	b.n	8004f4a <_strtod_l+0x142>
 8004fb6:	f1bb 0f08 	cmp.w	fp, #8
 8004fba:	bfd5      	itete	le
 8004fbc:	9906      	ldrle	r1, [sp, #24]
 8004fbe:	9905      	ldrgt	r1, [sp, #20]
 8004fc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004fc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004fc8:	f100 0001 	add.w	r0, r0, #1
 8004fcc:	bfd4      	ite	le
 8004fce:	9306      	strle	r3, [sp, #24]
 8004fd0:	9305      	strgt	r3, [sp, #20]
 8004fd2:	f10b 0b01 	add.w	fp, fp, #1
 8004fd6:	901b      	str	r0, [sp, #108]	; 0x6c
 8004fd8:	e7bf      	b.n	8004f5a <_strtod_l+0x152>
 8004fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fdc:	191a      	adds	r2, r3, r4
 8004fde:	921b      	str	r2, [sp, #108]	; 0x6c
 8004fe0:	5d1b      	ldrb	r3, [r3, r4]
 8004fe2:	f1bb 0f00 	cmp.w	fp, #0
 8004fe6:	d036      	beq.n	8005056 <_strtod_l+0x24e>
 8004fe8:	465c      	mov	r4, fp
 8004fea:	9004      	str	r0, [sp, #16]
 8004fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004ff0:	2a09      	cmp	r2, #9
 8004ff2:	d912      	bls.n	800501a <_strtod_l+0x212>
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	e7c2      	b.n	8004f7e <_strtod_l+0x176>
 8004ff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	921b      	str	r2, [sp, #108]	; 0x6c
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b30      	cmp	r3, #48	; 0x30
 8005004:	d0f8      	beq.n	8004ff8 <_strtod_l+0x1f0>
 8005006:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800500a:	2a08      	cmp	r2, #8
 800500c:	f200 84dc 	bhi.w	80059c8 <_strtod_l+0xbc0>
 8005010:	9004      	str	r0, [sp, #16]
 8005012:	2000      	movs	r0, #0
 8005014:	4604      	mov	r4, r0
 8005016:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005018:	9208      	str	r2, [sp, #32]
 800501a:	3b30      	subs	r3, #48	; 0x30
 800501c:	f100 0201 	add.w	r2, r0, #1
 8005020:	d013      	beq.n	800504a <_strtod_l+0x242>
 8005022:	9904      	ldr	r1, [sp, #16]
 8005024:	1905      	adds	r5, r0, r4
 8005026:	4411      	add	r1, r2
 8005028:	9104      	str	r1, [sp, #16]
 800502a:	4622      	mov	r2, r4
 800502c:	210a      	movs	r1, #10
 800502e:	42aa      	cmp	r2, r5
 8005030:	d113      	bne.n	800505a <_strtod_l+0x252>
 8005032:	1822      	adds	r2, r4, r0
 8005034:	2a08      	cmp	r2, #8
 8005036:	f104 0401 	add.w	r4, r4, #1
 800503a:	4404      	add	r4, r0
 800503c:	dc1b      	bgt.n	8005076 <_strtod_l+0x26e>
 800503e:	220a      	movs	r2, #10
 8005040:	9906      	ldr	r1, [sp, #24]
 8005042:	fb02 3301 	mla	r3, r2, r1, r3
 8005046:	9306      	str	r3, [sp, #24]
 8005048:	2200      	movs	r2, #0
 800504a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800504c:	4610      	mov	r0, r2
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	911b      	str	r1, [sp, #108]	; 0x6c
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	e7ca      	b.n	8004fec <_strtod_l+0x1e4>
 8005056:	4658      	mov	r0, fp
 8005058:	e7d3      	b.n	8005002 <_strtod_l+0x1fa>
 800505a:	2a08      	cmp	r2, #8
 800505c:	dc04      	bgt.n	8005068 <_strtod_l+0x260>
 800505e:	9f06      	ldr	r7, [sp, #24]
 8005060:	434f      	muls	r7, r1
 8005062:	9706      	str	r7, [sp, #24]
 8005064:	3201      	adds	r2, #1
 8005066:	e7e2      	b.n	800502e <_strtod_l+0x226>
 8005068:	1c57      	adds	r7, r2, #1
 800506a:	2f10      	cmp	r7, #16
 800506c:	bfde      	ittt	le
 800506e:	9f05      	ldrle	r7, [sp, #20]
 8005070:	434f      	mulle	r7, r1
 8005072:	9705      	strle	r7, [sp, #20]
 8005074:	e7f6      	b.n	8005064 <_strtod_l+0x25c>
 8005076:	2c10      	cmp	r4, #16
 8005078:	bfdf      	itttt	le
 800507a:	220a      	movle	r2, #10
 800507c:	9905      	ldrle	r1, [sp, #20]
 800507e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005082:	9305      	strle	r3, [sp, #20]
 8005084:	e7e0      	b.n	8005048 <_strtod_l+0x240>
 8005086:	2300      	movs	r3, #0
 8005088:	2201      	movs	r2, #1
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	e77c      	b.n	8004f88 <_strtod_l+0x180>
 800508e:	2700      	movs	r7, #0
 8005090:	1cb3      	adds	r3, r6, #2
 8005092:	931b      	str	r3, [sp, #108]	; 0x6c
 8005094:	78b3      	ldrb	r3, [r6, #2]
 8005096:	e784      	b.n	8004fa2 <_strtod_l+0x19a>
 8005098:	2701      	movs	r7, #1
 800509a:	e7f9      	b.n	8005090 <_strtod_l+0x288>
 800509c:	08008bf8 	.word	0x08008bf8
 80050a0:	080089a4 	.word	0x080089a4
 80050a4:	7ff00000 	.word	0x7ff00000
 80050a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d0f9      	beq.n	80050a8 <_strtod_l+0x2a0>
 80050b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80050b8:	2908      	cmp	r1, #8
 80050ba:	f63f af78 	bhi.w	8004fae <_strtod_l+0x1a6>
 80050be:	f04f 0e0a 	mov.w	lr, #10
 80050c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80050c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	911b      	str	r1, [sp, #108]	; 0x6c
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80050d6:	2d09      	cmp	r5, #9
 80050d8:	d935      	bls.n	8005146 <_strtod_l+0x33e>
 80050da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050dc:	1b49      	subs	r1, r1, r5
 80050de:	2908      	cmp	r1, #8
 80050e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80050e4:	dc02      	bgt.n	80050ec <_strtod_l+0x2e4>
 80050e6:	4565      	cmp	r5, ip
 80050e8:	bfa8      	it	ge
 80050ea:	4665      	movge	r5, ip
 80050ec:	b107      	cbz	r7, 80050f0 <_strtod_l+0x2e8>
 80050ee:	426d      	negs	r5, r5
 80050f0:	2c00      	cmp	r4, #0
 80050f2:	d14c      	bne.n	800518e <_strtod_l+0x386>
 80050f4:	9907      	ldr	r1, [sp, #28]
 80050f6:	4301      	orrs	r1, r0
 80050f8:	f47f aec7 	bne.w	8004e8a <_strtod_l+0x82>
 80050fc:	2a00      	cmp	r2, #0
 80050fe:	f47f aee0 	bne.w	8004ec2 <_strtod_l+0xba>
 8005102:	2b69      	cmp	r3, #105	; 0x69
 8005104:	d026      	beq.n	8005154 <_strtod_l+0x34c>
 8005106:	dc23      	bgt.n	8005150 <_strtod_l+0x348>
 8005108:	2b49      	cmp	r3, #73	; 0x49
 800510a:	d023      	beq.n	8005154 <_strtod_l+0x34c>
 800510c:	2b4e      	cmp	r3, #78	; 0x4e
 800510e:	f47f aed8 	bne.w	8004ec2 <_strtod_l+0xba>
 8005112:	499c      	ldr	r1, [pc, #624]	; (8005384 <_strtod_l+0x57c>)
 8005114:	a81b      	add	r0, sp, #108	; 0x6c
 8005116:	f001 fe2b 	bl	8006d70 <__match>
 800511a:	2800      	cmp	r0, #0
 800511c:	f43f aed1 	beq.w	8004ec2 <_strtod_l+0xba>
 8005120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b28      	cmp	r3, #40	; 0x28
 8005126:	d12c      	bne.n	8005182 <_strtod_l+0x37a>
 8005128:	4997      	ldr	r1, [pc, #604]	; (8005388 <_strtod_l+0x580>)
 800512a:	aa1e      	add	r2, sp, #120	; 0x78
 800512c:	a81b      	add	r0, sp, #108	; 0x6c
 800512e:	f001 fe33 	bl	8006d98 <__hexnan>
 8005132:	2805      	cmp	r0, #5
 8005134:	d125      	bne.n	8005182 <_strtod_l+0x37a>
 8005136:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005138:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800513c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005140:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005144:	e6a1      	b.n	8004e8a <_strtod_l+0x82>
 8005146:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800514a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800514e:	e7bc      	b.n	80050ca <_strtod_l+0x2c2>
 8005150:	2b6e      	cmp	r3, #110	; 0x6e
 8005152:	e7dc      	b.n	800510e <_strtod_l+0x306>
 8005154:	498d      	ldr	r1, [pc, #564]	; (800538c <_strtod_l+0x584>)
 8005156:	a81b      	add	r0, sp, #108	; 0x6c
 8005158:	f001 fe0a 	bl	8006d70 <__match>
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f aeb0 	beq.w	8004ec2 <_strtod_l+0xba>
 8005162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005164:	498a      	ldr	r1, [pc, #552]	; (8005390 <_strtod_l+0x588>)
 8005166:	3b01      	subs	r3, #1
 8005168:	a81b      	add	r0, sp, #108	; 0x6c
 800516a:	931b      	str	r3, [sp, #108]	; 0x6c
 800516c:	f001 fe00 	bl	8006d70 <__match>
 8005170:	b910      	cbnz	r0, 8005178 <_strtod_l+0x370>
 8005172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005174:	3301      	adds	r3, #1
 8005176:	931b      	str	r3, [sp, #108]	; 0x6c
 8005178:	f04f 0800 	mov.w	r8, #0
 800517c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80053a0 <_strtod_l+0x598>
 8005180:	e683      	b.n	8004e8a <_strtod_l+0x82>
 8005182:	4884      	ldr	r0, [pc, #528]	; (8005394 <_strtod_l+0x58c>)
 8005184:	f002 fda6 	bl	8007cd4 <nan>
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
 800518c:	e67d      	b.n	8004e8a <_strtod_l+0x82>
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	f1bb 0f00 	cmp.w	fp, #0
 8005194:	bf08      	it	eq
 8005196:	46a3      	moveq	fp, r4
 8005198:	1aeb      	subs	r3, r5, r3
 800519a:	2c10      	cmp	r4, #16
 800519c:	9806      	ldr	r0, [sp, #24]
 800519e:	4626      	mov	r6, r4
 80051a0:	9307      	str	r3, [sp, #28]
 80051a2:	bfa8      	it	ge
 80051a4:	2610      	movge	r6, #16
 80051a6:	f7fb f91d 	bl	80003e4 <__aeabi_ui2d>
 80051aa:	2c09      	cmp	r4, #9
 80051ac:	4680      	mov	r8, r0
 80051ae:	4689      	mov	r9, r1
 80051b0:	dd13      	ble.n	80051da <_strtod_l+0x3d2>
 80051b2:	4b79      	ldr	r3, [pc, #484]	; (8005398 <_strtod_l+0x590>)
 80051b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80051b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051bc:	f7fb f98c 	bl	80004d8 <__aeabi_dmul>
 80051c0:	4680      	mov	r8, r0
 80051c2:	9805      	ldr	r0, [sp, #20]
 80051c4:	4689      	mov	r9, r1
 80051c6:	f7fb f90d 	bl	80003e4 <__aeabi_ui2d>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4640      	mov	r0, r8
 80051d0:	4649      	mov	r1, r9
 80051d2:	f7fa ffcb 	bl	800016c <__adddf3>
 80051d6:	4680      	mov	r8, r0
 80051d8:	4689      	mov	r9, r1
 80051da:	2c0f      	cmp	r4, #15
 80051dc:	dc36      	bgt.n	800524c <_strtod_l+0x444>
 80051de:	9b07      	ldr	r3, [sp, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f43f ae52 	beq.w	8004e8a <_strtod_l+0x82>
 80051e6:	dd22      	ble.n	800522e <_strtod_l+0x426>
 80051e8:	2b16      	cmp	r3, #22
 80051ea:	dc09      	bgt.n	8005200 <_strtod_l+0x3f8>
 80051ec:	4c6a      	ldr	r4, [pc, #424]	; (8005398 <_strtod_l+0x590>)
 80051ee:	4642      	mov	r2, r8
 80051f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80051f4:	464b      	mov	r3, r9
 80051f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80051fa:	f7fb f96d 	bl	80004d8 <__aeabi_dmul>
 80051fe:	e7c3      	b.n	8005188 <_strtod_l+0x380>
 8005200:	9a07      	ldr	r2, [sp, #28]
 8005202:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005206:	4293      	cmp	r3, r2
 8005208:	db20      	blt.n	800524c <_strtod_l+0x444>
 800520a:	4d63      	ldr	r5, [pc, #396]	; (8005398 <_strtod_l+0x590>)
 800520c:	f1c4 040f 	rsb	r4, r4, #15
 8005210:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005214:	4642      	mov	r2, r8
 8005216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800521a:	464b      	mov	r3, r9
 800521c:	f7fb f95c 	bl	80004d8 <__aeabi_dmul>
 8005220:	9b07      	ldr	r3, [sp, #28]
 8005222:	1b1c      	subs	r4, r3, r4
 8005224:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800522c:	e7e5      	b.n	80051fa <_strtod_l+0x3f2>
 800522e:	9b07      	ldr	r3, [sp, #28]
 8005230:	3316      	adds	r3, #22
 8005232:	db0b      	blt.n	800524c <_strtod_l+0x444>
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	4a58      	ldr	r2, [pc, #352]	; (8005398 <_strtod_l+0x590>)
 8005238:	1b5d      	subs	r5, r3, r5
 800523a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800523e:	4640      	mov	r0, r8
 8005240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb fa71 	bl	800072c <__aeabi_ddiv>
 800524a:	e79d      	b.n	8005188 <_strtod_l+0x380>
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	1ba6      	subs	r6, r4, r6
 8005250:	441e      	add	r6, r3
 8005252:	2e00      	cmp	r6, #0
 8005254:	dd71      	ble.n	800533a <_strtod_l+0x532>
 8005256:	f016 030f 	ands.w	r3, r6, #15
 800525a:	d00a      	beq.n	8005272 <_strtod_l+0x46a>
 800525c:	494e      	ldr	r1, [pc, #312]	; (8005398 <_strtod_l+0x590>)
 800525e:	4642      	mov	r2, r8
 8005260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005268:	464b      	mov	r3, r9
 800526a:	f7fb f935 	bl	80004d8 <__aeabi_dmul>
 800526e:	4680      	mov	r8, r0
 8005270:	4689      	mov	r9, r1
 8005272:	f036 060f 	bics.w	r6, r6, #15
 8005276:	d050      	beq.n	800531a <_strtod_l+0x512>
 8005278:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800527c:	dd27      	ble.n	80052ce <_strtod_l+0x4c6>
 800527e:	f04f 0b00 	mov.w	fp, #0
 8005282:	f8cd b010 	str.w	fp, [sp, #16]
 8005286:	f8cd b020 	str.w	fp, [sp, #32]
 800528a:	f8cd b018 	str.w	fp, [sp, #24]
 800528e:	2322      	movs	r3, #34	; 0x22
 8005290:	f04f 0800 	mov.w	r8, #0
 8005294:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80053a0 <_strtod_l+0x598>
 8005298:	f8ca 3000 	str.w	r3, [sl]
 800529c:	9b08      	ldr	r3, [sp, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f43f adf3 	beq.w	8004e8a <_strtod_l+0x82>
 80052a4:	4650      	mov	r0, sl
 80052a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052a8:	f001 fe8c 	bl	8006fc4 <_Bfree>
 80052ac:	4650      	mov	r0, sl
 80052ae:	9906      	ldr	r1, [sp, #24]
 80052b0:	f001 fe88 	bl	8006fc4 <_Bfree>
 80052b4:	4650      	mov	r0, sl
 80052b6:	9904      	ldr	r1, [sp, #16]
 80052b8:	f001 fe84 	bl	8006fc4 <_Bfree>
 80052bc:	4650      	mov	r0, sl
 80052be:	9908      	ldr	r1, [sp, #32]
 80052c0:	f001 fe80 	bl	8006fc4 <_Bfree>
 80052c4:	4659      	mov	r1, fp
 80052c6:	4650      	mov	r0, sl
 80052c8:	f001 fe7c 	bl	8006fc4 <_Bfree>
 80052cc:	e5dd      	b.n	8004e8a <_strtod_l+0x82>
 80052ce:	2300      	movs	r3, #0
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	461f      	mov	r7, r3
 80052d6:	1136      	asrs	r6, r6, #4
 80052d8:	2e01      	cmp	r6, #1
 80052da:	dc21      	bgt.n	8005320 <_strtod_l+0x518>
 80052dc:	b10b      	cbz	r3, 80052e2 <_strtod_l+0x4da>
 80052de:	4680      	mov	r8, r0
 80052e0:	4689      	mov	r9, r1
 80052e2:	4b2e      	ldr	r3, [pc, #184]	; (800539c <_strtod_l+0x594>)
 80052e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80052e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80052ec:	4642      	mov	r2, r8
 80052ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f2:	464b      	mov	r3, r9
 80052f4:	f7fb f8f0 	bl	80004d8 <__aeabi_dmul>
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <_strtod_l+0x598>)
 80052fa:	460a      	mov	r2, r1
 80052fc:	400b      	ands	r3, r1
 80052fe:	4929      	ldr	r1, [pc, #164]	; (80053a4 <_strtod_l+0x59c>)
 8005300:	4680      	mov	r8, r0
 8005302:	428b      	cmp	r3, r1
 8005304:	d8bb      	bhi.n	800527e <_strtod_l+0x476>
 8005306:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800530a:	428b      	cmp	r3, r1
 800530c:	bf86      	itte	hi
 800530e:	f04f 38ff 	movhi.w	r8, #4294967295
 8005312:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80053a8 <_strtod_l+0x5a0>
 8005316:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800531a:	2300      	movs	r3, #0
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	e07e      	b.n	800541e <_strtod_l+0x616>
 8005320:	07f2      	lsls	r2, r6, #31
 8005322:	d507      	bpl.n	8005334 <_strtod_l+0x52c>
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <_strtod_l+0x594>)
 8005326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb f8d3 	bl	80004d8 <__aeabi_dmul>
 8005332:	2301      	movs	r3, #1
 8005334:	3701      	adds	r7, #1
 8005336:	1076      	asrs	r6, r6, #1
 8005338:	e7ce      	b.n	80052d8 <_strtod_l+0x4d0>
 800533a:	d0ee      	beq.n	800531a <_strtod_l+0x512>
 800533c:	4276      	negs	r6, r6
 800533e:	f016 020f 	ands.w	r2, r6, #15
 8005342:	d00a      	beq.n	800535a <_strtod_l+0x552>
 8005344:	4b14      	ldr	r3, [pc, #80]	; (8005398 <_strtod_l+0x590>)
 8005346:	4640      	mov	r0, r8
 8005348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534c:	4649      	mov	r1, r9
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f7fb f9eb 	bl	800072c <__aeabi_ddiv>
 8005356:	4680      	mov	r8, r0
 8005358:	4689      	mov	r9, r1
 800535a:	1136      	asrs	r6, r6, #4
 800535c:	d0dd      	beq.n	800531a <_strtod_l+0x512>
 800535e:	2e1f      	cmp	r6, #31
 8005360:	dd24      	ble.n	80053ac <_strtod_l+0x5a4>
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	f8cd b010 	str.w	fp, [sp, #16]
 800536a:	f8cd b020 	str.w	fp, [sp, #32]
 800536e:	f8cd b018 	str.w	fp, [sp, #24]
 8005372:	2322      	movs	r3, #34	; 0x22
 8005374:	f04f 0800 	mov.w	r8, #0
 8005378:	f04f 0900 	mov.w	r9, #0
 800537c:	f8ca 3000 	str.w	r3, [sl]
 8005380:	e78c      	b.n	800529c <_strtod_l+0x494>
 8005382:	bf00      	nop
 8005384:	08008975 	.word	0x08008975
 8005388:	080089b8 	.word	0x080089b8
 800538c:	0800896d 	.word	0x0800896d
 8005390:	08008afc 	.word	0x08008afc
 8005394:	08008db8 	.word	0x08008db8
 8005398:	08008c98 	.word	0x08008c98
 800539c:	08008c70 	.word	0x08008c70
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	7ca00000 	.word	0x7ca00000
 80053a8:	7fefffff 	.word	0x7fefffff
 80053ac:	f016 0310 	ands.w	r3, r6, #16
 80053b0:	bf18      	it	ne
 80053b2:	236a      	movne	r3, #106	; 0x6a
 80053b4:	4640      	mov	r0, r8
 80053b6:	9305      	str	r3, [sp, #20]
 80053b8:	4649      	mov	r1, r9
 80053ba:	2300      	movs	r3, #0
 80053bc:	4fb2      	ldr	r7, [pc, #712]	; (8005688 <_strtod_l+0x880>)
 80053be:	07f2      	lsls	r2, r6, #31
 80053c0:	d504      	bpl.n	80053cc <_strtod_l+0x5c4>
 80053c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c6:	f7fb f887 	bl	80004d8 <__aeabi_dmul>
 80053ca:	2301      	movs	r3, #1
 80053cc:	1076      	asrs	r6, r6, #1
 80053ce:	f107 0708 	add.w	r7, r7, #8
 80053d2:	d1f4      	bne.n	80053be <_strtod_l+0x5b6>
 80053d4:	b10b      	cbz	r3, 80053da <_strtod_l+0x5d2>
 80053d6:	4680      	mov	r8, r0
 80053d8:	4689      	mov	r9, r1
 80053da:	9b05      	ldr	r3, [sp, #20]
 80053dc:	b1bb      	cbz	r3, 800540e <_strtod_l+0x606>
 80053de:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80053e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	4649      	mov	r1, r9
 80053ea:	dd10      	ble.n	800540e <_strtod_l+0x606>
 80053ec:	2b1f      	cmp	r3, #31
 80053ee:	f340 812b 	ble.w	8005648 <_strtod_l+0x840>
 80053f2:	2b34      	cmp	r3, #52	; 0x34
 80053f4:	bfd8      	it	le
 80053f6:	f04f 32ff 	movle.w	r2, #4294967295
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	bfcf      	iteee	gt
 8005400:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005404:	3b20      	suble	r3, #32
 8005406:	fa02 f303 	lslle.w	r3, r2, r3
 800540a:	ea03 0901 	andle.w	r9, r3, r1
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fb fac7 	bl	80009a8 <__aeabi_dcmpeq>
 800541a:	2800      	cmp	r0, #0
 800541c:	d1a1      	bne.n	8005362 <_strtod_l+0x55a>
 800541e:	9b06      	ldr	r3, [sp, #24]
 8005420:	465a      	mov	r2, fp
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4650      	mov	r0, sl
 8005426:	4623      	mov	r3, r4
 8005428:	9908      	ldr	r1, [sp, #32]
 800542a:	f001 fe37 	bl	800709c <__s2b>
 800542e:	9008      	str	r0, [sp, #32]
 8005430:	2800      	cmp	r0, #0
 8005432:	f43f af24 	beq.w	800527e <_strtod_l+0x476>
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	f04f 0b00 	mov.w	fp, #0
 800543c:	1b5d      	subs	r5, r3, r5
 800543e:	9b07      	ldr	r3, [sp, #28]
 8005440:	f8cd b010 	str.w	fp, [sp, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfb4      	ite	lt
 8005448:	462b      	movlt	r3, r5
 800544a:	2300      	movge	r3, #0
 800544c:	930e      	str	r3, [sp, #56]	; 0x38
 800544e:	9b07      	ldr	r3, [sp, #28]
 8005450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005454:	9316      	str	r3, [sp, #88]	; 0x58
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	4650      	mov	r0, sl
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	f001 fd72 	bl	8006f44 <_Balloc>
 8005460:	9006      	str	r0, [sp, #24]
 8005462:	2800      	cmp	r0, #0
 8005464:	f43f af13 	beq.w	800528e <_strtod_l+0x486>
 8005468:	9b08      	ldr	r3, [sp, #32]
 800546a:	300c      	adds	r0, #12
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	f103 010c 	add.w	r1, r3, #12
 8005472:	3202      	adds	r2, #2
 8005474:	0092      	lsls	r2, r2, #2
 8005476:	f001 fd57 	bl	8006f28 <memcpy>
 800547a:	ab1e      	add	r3, sp, #120	; 0x78
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	ab1d      	add	r3, sp, #116	; 0x74
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	4642      	mov	r2, r8
 8005484:	464b      	mov	r3, r9
 8005486:	4650      	mov	r0, sl
 8005488:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800548c:	f002 f944 	bl	8007718 <__d2b>
 8005490:	901c      	str	r0, [sp, #112]	; 0x70
 8005492:	2800      	cmp	r0, #0
 8005494:	f43f aefb 	beq.w	800528e <_strtod_l+0x486>
 8005498:	2101      	movs	r1, #1
 800549a:	4650      	mov	r0, sl
 800549c:	f001 fe96 	bl	80071cc <__i2b>
 80054a0:	4603      	mov	r3, r0
 80054a2:	9004      	str	r0, [sp, #16]
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f aef2 	beq.w	800528e <_strtod_l+0x486>
 80054aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80054ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	bfab      	itete	ge
 80054b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80054b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80054b6:	18ee      	addge	r6, r5, r3
 80054b8:	1b5c      	sublt	r4, r3, r5
 80054ba:	9b05      	ldr	r3, [sp, #20]
 80054bc:	bfa8      	it	ge
 80054be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80054c0:	eba5 0503 	sub.w	r5, r5, r3
 80054c4:	4415      	add	r5, r2
 80054c6:	4b71      	ldr	r3, [pc, #452]	; (800568c <_strtod_l+0x884>)
 80054c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80054cc:	bfb8      	it	lt
 80054ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80054d0:	429d      	cmp	r5, r3
 80054d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054d6:	f280 80c9 	bge.w	800566c <_strtod_l+0x864>
 80054da:	1b5b      	subs	r3, r3, r5
 80054dc:	2b1f      	cmp	r3, #31
 80054de:	f04f 0701 	mov.w	r7, #1
 80054e2:	eba2 0203 	sub.w	r2, r2, r3
 80054e6:	f300 80b6 	bgt.w	8005656 <_strtod_l+0x84e>
 80054ea:	2500      	movs	r5, #0
 80054ec:	fa07 f303 	lsl.w	r3, r7, r3
 80054f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f2:	18b7      	adds	r7, r6, r2
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	42be      	cmp	r6, r7
 80054f8:	4414      	add	r4, r2
 80054fa:	441c      	add	r4, r3
 80054fc:	4633      	mov	r3, r6
 80054fe:	bfa8      	it	ge
 8005500:	463b      	movge	r3, r7
 8005502:	42a3      	cmp	r3, r4
 8005504:	bfa8      	it	ge
 8005506:	4623      	movge	r3, r4
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfc2      	ittt	gt
 800550c:	1aff      	subgt	r7, r7, r3
 800550e:	1ae4      	subgt	r4, r4, r3
 8005510:	1af6      	subgt	r6, r6, r3
 8005512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	dd17      	ble.n	8005548 <_strtod_l+0x740>
 8005518:	461a      	mov	r2, r3
 800551a:	4650      	mov	r0, sl
 800551c:	9904      	ldr	r1, [sp, #16]
 800551e:	f001 ff0f 	bl	8007340 <__pow5mult>
 8005522:	9004      	str	r0, [sp, #16]
 8005524:	2800      	cmp	r0, #0
 8005526:	f43f aeb2 	beq.w	800528e <_strtod_l+0x486>
 800552a:	4601      	mov	r1, r0
 800552c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800552e:	4650      	mov	r0, sl
 8005530:	f001 fe62 	bl	80071f8 <__multiply>
 8005534:	9009      	str	r0, [sp, #36]	; 0x24
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f aea9 	beq.w	800528e <_strtod_l+0x486>
 800553c:	4650      	mov	r0, sl
 800553e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005540:	f001 fd40 	bl	8006fc4 <_Bfree>
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	931c      	str	r3, [sp, #112]	; 0x70
 8005548:	2f00      	cmp	r7, #0
 800554a:	f300 8093 	bgt.w	8005674 <_strtod_l+0x86c>
 800554e:	9b07      	ldr	r3, [sp, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dd08      	ble.n	8005566 <_strtod_l+0x75e>
 8005554:	4650      	mov	r0, sl
 8005556:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005558:	9906      	ldr	r1, [sp, #24]
 800555a:	f001 fef1 	bl	8007340 <__pow5mult>
 800555e:	9006      	str	r0, [sp, #24]
 8005560:	2800      	cmp	r0, #0
 8005562:	f43f ae94 	beq.w	800528e <_strtod_l+0x486>
 8005566:	2c00      	cmp	r4, #0
 8005568:	dd08      	ble.n	800557c <_strtod_l+0x774>
 800556a:	4622      	mov	r2, r4
 800556c:	4650      	mov	r0, sl
 800556e:	9906      	ldr	r1, [sp, #24]
 8005570:	f001 ff40 	bl	80073f4 <__lshift>
 8005574:	9006      	str	r0, [sp, #24]
 8005576:	2800      	cmp	r0, #0
 8005578:	f43f ae89 	beq.w	800528e <_strtod_l+0x486>
 800557c:	2e00      	cmp	r6, #0
 800557e:	dd08      	ble.n	8005592 <_strtod_l+0x78a>
 8005580:	4632      	mov	r2, r6
 8005582:	4650      	mov	r0, sl
 8005584:	9904      	ldr	r1, [sp, #16]
 8005586:	f001 ff35 	bl	80073f4 <__lshift>
 800558a:	9004      	str	r0, [sp, #16]
 800558c:	2800      	cmp	r0, #0
 800558e:	f43f ae7e 	beq.w	800528e <_strtod_l+0x486>
 8005592:	4650      	mov	r0, sl
 8005594:	9a06      	ldr	r2, [sp, #24]
 8005596:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005598:	f001 ffb4 	bl	8007504 <__mdiff>
 800559c:	4683      	mov	fp, r0
 800559e:	2800      	cmp	r0, #0
 80055a0:	f43f ae75 	beq.w	800528e <_strtod_l+0x486>
 80055a4:	2400      	movs	r4, #0
 80055a6:	68c3      	ldr	r3, [r0, #12]
 80055a8:	9904      	ldr	r1, [sp, #16]
 80055aa:	60c4      	str	r4, [r0, #12]
 80055ac:	930d      	str	r3, [sp, #52]	; 0x34
 80055ae:	f001 ff8d 	bl	80074cc <__mcmp>
 80055b2:	42a0      	cmp	r0, r4
 80055b4:	da70      	bge.n	8005698 <_strtod_l+0x890>
 80055b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b8:	ea53 0308 	orrs.w	r3, r3, r8
 80055bc:	f040 8096 	bne.w	80056ec <_strtod_l+0x8e4>
 80055c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 8091 	bne.w	80056ec <_strtod_l+0x8e4>
 80055ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ce:	0d1b      	lsrs	r3, r3, #20
 80055d0:	051b      	lsls	r3, r3, #20
 80055d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80055d6:	f240 8089 	bls.w	80056ec <_strtod_l+0x8e4>
 80055da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80055de:	b923      	cbnz	r3, 80055ea <_strtod_l+0x7e2>
 80055e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f340 8081 	ble.w	80056ec <_strtod_l+0x8e4>
 80055ea:	4659      	mov	r1, fp
 80055ec:	2201      	movs	r2, #1
 80055ee:	4650      	mov	r0, sl
 80055f0:	f001 ff00 	bl	80073f4 <__lshift>
 80055f4:	9904      	ldr	r1, [sp, #16]
 80055f6:	4683      	mov	fp, r0
 80055f8:	f001 ff68 	bl	80074cc <__mcmp>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dd75      	ble.n	80056ec <_strtod_l+0x8e4>
 8005600:	9905      	ldr	r1, [sp, #20]
 8005602:	464b      	mov	r3, r9
 8005604:	4a22      	ldr	r2, [pc, #136]	; (8005690 <_strtod_l+0x888>)
 8005606:	2900      	cmp	r1, #0
 8005608:	f000 8091 	beq.w	800572e <_strtod_l+0x926>
 800560c:	ea02 0109 	and.w	r1, r2, r9
 8005610:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005614:	f300 808b 	bgt.w	800572e <_strtod_l+0x926>
 8005618:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800561c:	f77f aea9 	ble.w	8005372 <_strtod_l+0x56a>
 8005620:	2300      	movs	r3, #0
 8005622:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <_strtod_l+0x88c>)
 8005624:	4640      	mov	r0, r8
 8005626:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800562a:	4649      	mov	r1, r9
 800562c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005630:	f7fa ff52 	bl	80004d8 <__aeabi_dmul>
 8005634:	460b      	mov	r3, r1
 8005636:	4303      	orrs	r3, r0
 8005638:	bf08      	it	eq
 800563a:	2322      	moveq	r3, #34	; 0x22
 800563c:	4680      	mov	r8, r0
 800563e:	4689      	mov	r9, r1
 8005640:	bf08      	it	eq
 8005642:	f8ca 3000 	streq.w	r3, [sl]
 8005646:	e62d      	b.n	80052a4 <_strtod_l+0x49c>
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	ea03 0808 	and.w	r8, r3, r8
 8005654:	e6db      	b.n	800540e <_strtod_l+0x606>
 8005656:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800565a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800565e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005662:	35e2      	adds	r5, #226	; 0xe2
 8005664:	fa07 f505 	lsl.w	r5, r7, r5
 8005668:	970f      	str	r7, [sp, #60]	; 0x3c
 800566a:	e742      	b.n	80054f2 <_strtod_l+0x6ea>
 800566c:	2301      	movs	r3, #1
 800566e:	2500      	movs	r5, #0
 8005670:	930f      	str	r3, [sp, #60]	; 0x3c
 8005672:	e73e      	b.n	80054f2 <_strtod_l+0x6ea>
 8005674:	463a      	mov	r2, r7
 8005676:	4650      	mov	r0, sl
 8005678:	991c      	ldr	r1, [sp, #112]	; 0x70
 800567a:	f001 febb 	bl	80073f4 <__lshift>
 800567e:	901c      	str	r0, [sp, #112]	; 0x70
 8005680:	2800      	cmp	r0, #0
 8005682:	f47f af64 	bne.w	800554e <_strtod_l+0x746>
 8005686:	e602      	b.n	800528e <_strtod_l+0x486>
 8005688:	080089d0 	.word	0x080089d0
 800568c:	fffffc02 	.word	0xfffffc02
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	39500000 	.word	0x39500000
 8005698:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800569c:	d166      	bne.n	800576c <_strtod_l+0x964>
 800569e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056a4:	b35a      	cbz	r2, 80056fe <_strtod_l+0x8f6>
 80056a6:	4a9c      	ldr	r2, [pc, #624]	; (8005918 <_strtod_l+0xb10>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d12c      	bne.n	8005706 <_strtod_l+0x8fe>
 80056ac:	9b05      	ldr	r3, [sp, #20]
 80056ae:	4640      	mov	r0, r8
 80056b0:	b303      	cbz	r3, 80056f4 <_strtod_l+0x8ec>
 80056b2:	464b      	mov	r3, r9
 80056b4:	4a99      	ldr	r2, [pc, #612]	; (800591c <_strtod_l+0xb14>)
 80056b6:	f04f 31ff 	mov.w	r1, #4294967295
 80056ba:	401a      	ands	r2, r3
 80056bc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80056c0:	d81b      	bhi.n	80056fa <_strtod_l+0x8f2>
 80056c2:	0d12      	lsrs	r2, r2, #20
 80056c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	4298      	cmp	r0, r3
 80056ce:	d11a      	bne.n	8005706 <_strtod_l+0x8fe>
 80056d0:	4b93      	ldr	r3, [pc, #588]	; (8005920 <_strtod_l+0xb18>)
 80056d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d102      	bne.n	80056de <_strtod_l+0x8d6>
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f add8 	beq.w	800528e <_strtod_l+0x486>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	4b8e      	ldr	r3, [pc, #568]	; (800591c <_strtod_l+0xb14>)
 80056e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e6:	401a      	ands	r2, r3
 80056e8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80056ec:	9b05      	ldr	r3, [sp, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d196      	bne.n	8005620 <_strtod_l+0x818>
 80056f2:	e5d7      	b.n	80052a4 <_strtod_l+0x49c>
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e7e8      	b.n	80056cc <_strtod_l+0x8c4>
 80056fa:	460b      	mov	r3, r1
 80056fc:	e7e6      	b.n	80056cc <_strtod_l+0x8c4>
 80056fe:	ea53 0308 	orrs.w	r3, r3, r8
 8005702:	f43f af7d 	beq.w	8005600 <_strtod_l+0x7f8>
 8005706:	b1e5      	cbz	r5, 8005742 <_strtod_l+0x93a>
 8005708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570a:	421d      	tst	r5, r3
 800570c:	d0ee      	beq.n	80056ec <_strtod_l+0x8e4>
 800570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005710:	4640      	mov	r0, r8
 8005712:	4649      	mov	r1, r9
 8005714:	9a05      	ldr	r2, [sp, #20]
 8005716:	b1c3      	cbz	r3, 800574a <_strtod_l+0x942>
 8005718:	f7ff fb52 	bl	8004dc0 <sulp>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005724:	f7fa fd22 	bl	800016c <__adddf3>
 8005728:	4680      	mov	r8, r0
 800572a:	4689      	mov	r9, r1
 800572c:	e7de      	b.n	80056ec <_strtod_l+0x8e4>
 800572e:	4013      	ands	r3, r2
 8005730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005734:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005738:	f04f 38ff 	mov.w	r8, #4294967295
 800573c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005740:	e7d4      	b.n	80056ec <_strtod_l+0x8e4>
 8005742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005744:	ea13 0f08 	tst.w	r3, r8
 8005748:	e7e0      	b.n	800570c <_strtod_l+0x904>
 800574a:	f7ff fb39 	bl	8004dc0 <sulp>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005756:	f7fa fd07 	bl	8000168 <__aeabi_dsub>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4680      	mov	r8, r0
 8005760:	4689      	mov	r9, r1
 8005762:	f7fb f921 	bl	80009a8 <__aeabi_dcmpeq>
 8005766:	2800      	cmp	r0, #0
 8005768:	d0c0      	beq.n	80056ec <_strtod_l+0x8e4>
 800576a:	e602      	b.n	8005372 <_strtod_l+0x56a>
 800576c:	4658      	mov	r0, fp
 800576e:	9904      	ldr	r1, [sp, #16]
 8005770:	f002 f82e 	bl	80077d0 <__ratio>
 8005774:	2200      	movs	r2, #0
 8005776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800577a:	4606      	mov	r6, r0
 800577c:	460f      	mov	r7, r1
 800577e:	f7fb f927 	bl	80009d0 <__aeabi_dcmple>
 8005782:	2800      	cmp	r0, #0
 8005784:	d075      	beq.n	8005872 <_strtod_l+0xa6a>
 8005786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d047      	beq.n	800581c <_strtod_l+0xa14>
 800578c:	2600      	movs	r6, #0
 800578e:	4f65      	ldr	r7, [pc, #404]	; (8005924 <_strtod_l+0xb1c>)
 8005790:	4d64      	ldr	r5, [pc, #400]	; (8005924 <_strtod_l+0xb1c>)
 8005792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005798:	0d1b      	lsrs	r3, r3, #20
 800579a:	051b      	lsls	r3, r3, #20
 800579c:	930f      	str	r3, [sp, #60]	; 0x3c
 800579e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057a0:	4b61      	ldr	r3, [pc, #388]	; (8005928 <_strtod_l+0xb20>)
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f040 80c8 	bne.w	8005938 <_strtod_l+0xb30>
 80057a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80057b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b2:	4640      	mov	r0, r8
 80057b4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80057b8:	4649      	mov	r1, r9
 80057ba:	f001 ff33 	bl	8007624 <__ulp>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	f7fa fe87 	bl	80004d8 <__aeabi_dmul>
 80057ca:	4642      	mov	r2, r8
 80057cc:	464b      	mov	r3, r9
 80057ce:	f7fa fccd 	bl	800016c <__adddf3>
 80057d2:	460b      	mov	r3, r1
 80057d4:	4951      	ldr	r1, [pc, #324]	; (800591c <_strtod_l+0xb14>)
 80057d6:	4a55      	ldr	r2, [pc, #340]	; (800592c <_strtod_l+0xb24>)
 80057d8:	4019      	ands	r1, r3
 80057da:	4291      	cmp	r1, r2
 80057dc:	4680      	mov	r8, r0
 80057de:	d95e      	bls.n	800589e <_strtod_l+0xa96>
 80057e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d103      	bne.n	80057f2 <_strtod_l+0x9ea>
 80057ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ec:	3301      	adds	r3, #1
 80057ee:	f43f ad4e 	beq.w	800528e <_strtod_l+0x486>
 80057f2:	f04f 38ff 	mov.w	r8, #4294967295
 80057f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005920 <_strtod_l+0xb18>
 80057fa:	4650      	mov	r0, sl
 80057fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057fe:	f001 fbe1 	bl	8006fc4 <_Bfree>
 8005802:	4650      	mov	r0, sl
 8005804:	9906      	ldr	r1, [sp, #24]
 8005806:	f001 fbdd 	bl	8006fc4 <_Bfree>
 800580a:	4650      	mov	r0, sl
 800580c:	9904      	ldr	r1, [sp, #16]
 800580e:	f001 fbd9 	bl	8006fc4 <_Bfree>
 8005812:	4659      	mov	r1, fp
 8005814:	4650      	mov	r0, sl
 8005816:	f001 fbd5 	bl	8006fc4 <_Bfree>
 800581a:	e61c      	b.n	8005456 <_strtod_l+0x64e>
 800581c:	f1b8 0f00 	cmp.w	r8, #0
 8005820:	d119      	bne.n	8005856 <_strtod_l+0xa4e>
 8005822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005828:	b9e3      	cbnz	r3, 8005864 <_strtod_l+0xa5c>
 800582a:	2200      	movs	r2, #0
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	4b3c      	ldr	r3, [pc, #240]	; (8005924 <_strtod_l+0xb1c>)
 8005832:	f7fb f8c3 	bl	80009bc <__aeabi_dcmplt>
 8005836:	b9c8      	cbnz	r0, 800586c <_strtod_l+0xa64>
 8005838:	2200      	movs	r2, #0
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	4b3c      	ldr	r3, [pc, #240]	; (8005930 <_strtod_l+0xb28>)
 8005840:	f7fa fe4a 	bl	80004d8 <__aeabi_dmul>
 8005844:	4604      	mov	r4, r0
 8005846:	460d      	mov	r5, r1
 8005848:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800584c:	9418      	str	r4, [sp, #96]	; 0x60
 800584e:	9319      	str	r3, [sp, #100]	; 0x64
 8005850:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005854:	e79d      	b.n	8005792 <_strtod_l+0x98a>
 8005856:	f1b8 0f01 	cmp.w	r8, #1
 800585a:	d103      	bne.n	8005864 <_strtod_l+0xa5c>
 800585c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	f43f ad87 	beq.w	8005372 <_strtod_l+0x56a>
 8005864:	2600      	movs	r6, #0
 8005866:	2400      	movs	r4, #0
 8005868:	4f32      	ldr	r7, [pc, #200]	; (8005934 <_strtod_l+0xb2c>)
 800586a:	e791      	b.n	8005790 <_strtod_l+0x988>
 800586c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800586e:	4d30      	ldr	r5, [pc, #192]	; (8005930 <_strtod_l+0xb28>)
 8005870:	e7ea      	b.n	8005848 <_strtod_l+0xa40>
 8005872:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <_strtod_l+0xb28>)
 8005874:	2200      	movs	r2, #0
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fa fe2d 	bl	80004d8 <__aeabi_dmul>
 800587e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005880:	4604      	mov	r4, r0
 8005882:	460d      	mov	r5, r1
 8005884:	b933      	cbnz	r3, 8005894 <_strtod_l+0xa8c>
 8005886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800588a:	9010      	str	r0, [sp, #64]	; 0x40
 800588c:	9311      	str	r3, [sp, #68]	; 0x44
 800588e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005892:	e77e      	b.n	8005792 <_strtod_l+0x98a>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800589c:	e7f7      	b.n	800588e <_strtod_l+0xa86>
 800589e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1a8      	bne.n	80057fa <_strtod_l+0x9f2>
 80058a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058ae:	0d1b      	lsrs	r3, r3, #20
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d1a1      	bne.n	80057fa <_strtod_l+0x9f2>
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb fbd9 	bl	8001070 <__aeabi_d2lz>
 80058be:	f7fa fddd 	bl	800047c <__aeabi_l2d>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4620      	mov	r0, r4
 80058c8:	4629      	mov	r1, r5
 80058ca:	f7fa fc4d 	bl	8000168 <__aeabi_dsub>
 80058ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058d4:	ea43 0308 	orr.w	r3, r3, r8
 80058d8:	4313      	orrs	r3, r2
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	d066      	beq.n	80059ae <_strtod_l+0xba6>
 80058e0:	a309      	add	r3, pc, #36	; (adr r3, 8005908 <_strtod_l+0xb00>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fb f869 	bl	80009bc <__aeabi_dcmplt>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f47f acda 	bne.w	80052a4 <_strtod_l+0x49c>
 80058f0:	a307      	add	r3, pc, #28	; (adr r3, 8005910 <_strtod_l+0xb08>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fb f87d 	bl	80009f8 <__aeabi_dcmpgt>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f43f af7b 	beq.w	80057fa <_strtod_l+0x9f2>
 8005904:	e4ce      	b.n	80052a4 <_strtod_l+0x49c>
 8005906:	bf00      	nop
 8005908:	94a03595 	.word	0x94a03595
 800590c:	3fdfffff 	.word	0x3fdfffff
 8005910:	35afe535 	.word	0x35afe535
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	000fffff 	.word	0x000fffff
 800591c:	7ff00000 	.word	0x7ff00000
 8005920:	7fefffff 	.word	0x7fefffff
 8005924:	3ff00000 	.word	0x3ff00000
 8005928:	7fe00000 	.word	0x7fe00000
 800592c:	7c9fffff 	.word	0x7c9fffff
 8005930:	3fe00000 	.word	0x3fe00000
 8005934:	bff00000 	.word	0xbff00000
 8005938:	9b05      	ldr	r3, [sp, #20]
 800593a:	b313      	cbz	r3, 8005982 <_strtod_l+0xb7a>
 800593c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800593e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005942:	d81e      	bhi.n	8005982 <_strtod_l+0xb7a>
 8005944:	a326      	add	r3, pc, #152	; (adr r3, 80059e0 <_strtod_l+0xbd8>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fb f83f 	bl	80009d0 <__aeabi_dcmple>
 8005952:	b190      	cbz	r0, 800597a <_strtod_l+0xb72>
 8005954:	4629      	mov	r1, r5
 8005956:	4620      	mov	r0, r4
 8005958:	f7fb f896 	bl	8000a88 <__aeabi_d2uiz>
 800595c:	2801      	cmp	r0, #1
 800595e:	bf38      	it	cc
 8005960:	2001      	movcc	r0, #1
 8005962:	f7fa fd3f 	bl	80003e4 <__aeabi_ui2d>
 8005966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005968:	4604      	mov	r4, r0
 800596a:	460d      	mov	r5, r1
 800596c:	b9d3      	cbnz	r3, 80059a4 <_strtod_l+0xb9c>
 800596e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005972:	9012      	str	r0, [sp, #72]	; 0x48
 8005974:	9313      	str	r3, [sp, #76]	; 0x4c
 8005976:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800597a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800597c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005980:	1a9f      	subs	r7, r3, r2
 8005982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005986:	f001 fe4d 	bl	8007624 <__ulp>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4630      	mov	r0, r6
 8005990:	4639      	mov	r1, r7
 8005992:	f7fa fda1 	bl	80004d8 <__aeabi_dmul>
 8005996:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800599a:	f7fa fbe7 	bl	800016c <__adddf3>
 800599e:	4680      	mov	r8, r0
 80059a0:	4689      	mov	r9, r1
 80059a2:	e77e      	b.n	80058a2 <_strtod_l+0xa9a>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80059ac:	e7e3      	b.n	8005976 <_strtod_l+0xb6e>
 80059ae:	a30e      	add	r3, pc, #56	; (adr r3, 80059e8 <_strtod_l+0xbe0>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fb f802 	bl	80009bc <__aeabi_dcmplt>
 80059b8:	e7a1      	b.n	80058fe <_strtod_l+0xaf6>
 80059ba:	2300      	movs	r3, #0
 80059bc:	930c      	str	r3, [sp, #48]	; 0x30
 80059be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	f7ff ba65 	b.w	8004e92 <_strtod_l+0x8a>
 80059c8:	2b65      	cmp	r3, #101	; 0x65
 80059ca:	f43f ab5c 	beq.w	8005086 <_strtod_l+0x27e>
 80059ce:	2b45      	cmp	r3, #69	; 0x45
 80059d0:	f43f ab59 	beq.w	8005086 <_strtod_l+0x27e>
 80059d4:	2201      	movs	r2, #1
 80059d6:	f7ff bb8d 	b.w	80050f4 <_strtod_l+0x2ec>
 80059da:	bf00      	nop
 80059dc:	f3af 8000 	nop.w
 80059e0:	ffc00000 	.word	0xffc00000
 80059e4:	41dfffff 	.word	0x41dfffff
 80059e8:	94a03595 	.word	0x94a03595
 80059ec:	3fcfffff 	.word	0x3fcfffff

080059f0 <_strtod_r>:
 80059f0:	4b01      	ldr	r3, [pc, #4]	; (80059f8 <_strtod_r+0x8>)
 80059f2:	f7ff ba09 	b.w	8004e08 <_strtod_l>
 80059f6:	bf00      	nop
 80059f8:	20000074 	.word	0x20000074

080059fc <_strtol_l.isra.0>:
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a02:	4686      	mov	lr, r0
 8005a04:	d001      	beq.n	8005a0a <_strtol_l.isra.0+0xe>
 8005a06:	2b24      	cmp	r3, #36	; 0x24
 8005a08:	d906      	bls.n	8005a18 <_strtol_l.isra.0+0x1c>
 8005a0a:	f7fe fb11 	bl	8004030 <__errno>
 8005a0e:	2316      	movs	r3, #22
 8005a10:	6003      	str	r3, [r0, #0]
 8005a12:	2000      	movs	r0, #0
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	468c      	mov	ip, r1
 8005a1a:	4e3a      	ldr	r6, [pc, #232]	; (8005b04 <_strtol_l.isra.0+0x108>)
 8005a1c:	4660      	mov	r0, ip
 8005a1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005a22:	5da5      	ldrb	r5, [r4, r6]
 8005a24:	f015 0508 	ands.w	r5, r5, #8
 8005a28:	d1f8      	bne.n	8005a1c <_strtol_l.isra.0+0x20>
 8005a2a:	2c2d      	cmp	r4, #45	; 0x2d
 8005a2c:	d133      	bne.n	8005a96 <_strtol_l.isra.0+0x9a>
 8005a2e:	f04f 0801 	mov.w	r8, #1
 8005a32:	f89c 4000 	ldrb.w	r4, [ip]
 8005a36:	f100 0c02 	add.w	ip, r0, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d05d      	beq.n	8005afa <_strtol_l.isra.0+0xfe>
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d10c      	bne.n	8005a5c <_strtol_l.isra.0+0x60>
 8005a42:	2c30      	cmp	r4, #48	; 0x30
 8005a44:	d10a      	bne.n	8005a5c <_strtol_l.isra.0+0x60>
 8005a46:	f89c 0000 	ldrb.w	r0, [ip]
 8005a4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005a4e:	2858      	cmp	r0, #88	; 0x58
 8005a50:	d14e      	bne.n	8005af0 <_strtol_l.isra.0+0xf4>
 8005a52:	2310      	movs	r3, #16
 8005a54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005a58:	f10c 0c02 	add.w	ip, ip, #2
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005a62:	3f01      	subs	r7, #1
 8005a64:	fbb7 f9f3 	udiv	r9, r7, r3
 8005a68:	4628      	mov	r0, r5
 8005a6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8005a6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005a72:	2e09      	cmp	r6, #9
 8005a74:	d818      	bhi.n	8005aa8 <_strtol_l.isra.0+0xac>
 8005a76:	4634      	mov	r4, r6
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	dd24      	ble.n	8005ac6 <_strtol_l.isra.0+0xca>
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	db1f      	blt.n	8005ac0 <_strtol_l.isra.0+0xc4>
 8005a80:	4581      	cmp	r9, r0
 8005a82:	d31d      	bcc.n	8005ac0 <_strtol_l.isra.0+0xc4>
 8005a84:	d101      	bne.n	8005a8a <_strtol_l.isra.0+0x8e>
 8005a86:	45a2      	cmp	sl, r4
 8005a88:	db1a      	blt.n	8005ac0 <_strtol_l.isra.0+0xc4>
 8005a8a:	2501      	movs	r5, #1
 8005a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8005a90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005a94:	e7eb      	b.n	8005a6e <_strtol_l.isra.0+0x72>
 8005a96:	2c2b      	cmp	r4, #43	; 0x2b
 8005a98:	bf08      	it	eq
 8005a9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005a9e:	46a8      	mov	r8, r5
 8005aa0:	bf08      	it	eq
 8005aa2:	f100 0c02 	addeq.w	ip, r0, #2
 8005aa6:	e7c8      	b.n	8005a3a <_strtol_l.isra.0+0x3e>
 8005aa8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005aac:	2e19      	cmp	r6, #25
 8005aae:	d801      	bhi.n	8005ab4 <_strtol_l.isra.0+0xb8>
 8005ab0:	3c37      	subs	r4, #55	; 0x37
 8005ab2:	e7e1      	b.n	8005a78 <_strtol_l.isra.0+0x7c>
 8005ab4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005ab8:	2e19      	cmp	r6, #25
 8005aba:	d804      	bhi.n	8005ac6 <_strtol_l.isra.0+0xca>
 8005abc:	3c57      	subs	r4, #87	; 0x57
 8005abe:	e7db      	b.n	8005a78 <_strtol_l.isra.0+0x7c>
 8005ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ac4:	e7e4      	b.n	8005a90 <_strtol_l.isra.0+0x94>
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	da08      	bge.n	8005adc <_strtol_l.isra.0+0xe0>
 8005aca:	2322      	movs	r3, #34	; 0x22
 8005acc:	4638      	mov	r0, r7
 8005ace:	f8ce 3000 	str.w	r3, [lr]
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d09e      	beq.n	8005a14 <_strtol_l.isra.0+0x18>
 8005ad6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005ada:	e007      	b.n	8005aec <_strtol_l.isra.0+0xf0>
 8005adc:	f1b8 0f00 	cmp.w	r8, #0
 8005ae0:	d000      	beq.n	8005ae4 <_strtol_l.isra.0+0xe8>
 8005ae2:	4240      	negs	r0, r0
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d095      	beq.n	8005a14 <_strtol_l.isra.0+0x18>
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	d1f4      	bne.n	8005ad6 <_strtol_l.isra.0+0xda>
 8005aec:	6011      	str	r1, [r2, #0]
 8005aee:	e791      	b.n	8005a14 <_strtol_l.isra.0+0x18>
 8005af0:	2430      	movs	r4, #48	; 0x30
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1b2      	bne.n	8005a5c <_strtol_l.isra.0+0x60>
 8005af6:	2308      	movs	r3, #8
 8005af8:	e7b0      	b.n	8005a5c <_strtol_l.isra.0+0x60>
 8005afa:	2c30      	cmp	r4, #48	; 0x30
 8005afc:	d0a3      	beq.n	8005a46 <_strtol_l.isra.0+0x4a>
 8005afe:	230a      	movs	r3, #10
 8005b00:	e7ac      	b.n	8005a5c <_strtol_l.isra.0+0x60>
 8005b02:	bf00      	nop
 8005b04:	080089f9 	.word	0x080089f9

08005b08 <_strtol_r>:
 8005b08:	f7ff bf78 	b.w	80059fc <_strtol_l.isra.0>

08005b0c <quorem>:
 8005b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	6903      	ldr	r3, [r0, #16]
 8005b12:	690c      	ldr	r4, [r1, #16]
 8005b14:	4607      	mov	r7, r0
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	f2c0 8083 	blt.w	8005c22 <quorem+0x116>
 8005b1c:	3c01      	subs	r4, #1
 8005b1e:	f100 0514 	add.w	r5, r0, #20
 8005b22:	f101 0814 	add.w	r8, r1, #20
 8005b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b34:	3301      	adds	r3, #1
 8005b36:	429a      	cmp	r2, r3
 8005b38:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b44:	d332      	bcc.n	8005bac <quorem+0xa0>
 8005b46:	f04f 0e00 	mov.w	lr, #0
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	46ac      	mov	ip, r5
 8005b4e:	46f2      	mov	sl, lr
 8005b50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b54:	b293      	uxth	r3, r2
 8005b56:	fb06 e303 	mla	r3, r6, r3, lr
 8005b5a:	0c12      	lsrs	r2, r2, #16
 8005b5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b60:	fb06 e202 	mla	r2, r6, r2, lr
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ebaa 0303 	sub.w	r3, sl, r3
 8005b6a:	f8dc a000 	ldr.w	sl, [ip]
 8005b6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b72:	fa1f fa8a 	uxth.w	sl, sl
 8005b76:	4453      	add	r3, sl
 8005b78:	fa1f fa82 	uxth.w	sl, r2
 8005b7c:	f8dc 2000 	ldr.w	r2, [ip]
 8005b80:	4581      	cmp	r9, r0
 8005b82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005b86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b94:	f84c 3b04 	str.w	r3, [ip], #4
 8005b98:	d2da      	bcs.n	8005b50 <quorem+0x44>
 8005b9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b9e:	b92b      	cbnz	r3, 8005bac <quorem+0xa0>
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	429d      	cmp	r5, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	d32f      	bcc.n	8005c0a <quorem+0xfe>
 8005baa:	613c      	str	r4, [r7, #16]
 8005bac:	4638      	mov	r0, r7
 8005bae:	f001 fc8d 	bl	80074cc <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	db25      	blt.n	8005c02 <quorem+0xf6>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f04f 0c00 	mov.w	ip, #0
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	f858 1b04 	ldr.w	r1, [r8], #4
 8005bc2:	f8d0 e000 	ldr.w	lr, [r0]
 8005bc6:	b28b      	uxth	r3, r1
 8005bc8:	ebac 0303 	sub.w	r3, ip, r3
 8005bcc:	fa1f f28e 	uxth.w	r2, lr
 8005bd0:	4413      	add	r3, r2
 8005bd2:	0c0a      	lsrs	r2, r1, #16
 8005bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be2:	45c1      	cmp	r9, r8
 8005be4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005be8:	f840 3b04 	str.w	r3, [r0], #4
 8005bec:	d2e7      	bcs.n	8005bbe <quorem+0xb2>
 8005bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf6:	b922      	cbnz	r2, 8005c02 <quorem+0xf6>
 8005bf8:	3b04      	subs	r3, #4
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	d30a      	bcc.n	8005c16 <quorem+0x10a>
 8005c00:	613c      	str	r4, [r7, #16]
 8005c02:	4630      	mov	r0, r6
 8005c04:	b003      	add	sp, #12
 8005c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	d1cb      	bne.n	8005baa <quorem+0x9e>
 8005c12:	3c01      	subs	r4, #1
 8005c14:	e7c6      	b.n	8005ba4 <quorem+0x98>
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d1f0      	bne.n	8005c00 <quorem+0xf4>
 8005c1e:	3c01      	subs	r4, #1
 8005c20:	e7eb      	b.n	8005bfa <quorem+0xee>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e7ee      	b.n	8005c04 <quorem+0xf8>
	...

08005c28 <_dtoa_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	461f      	mov	r7, r3
 8005c30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c32:	b099      	sub	sp, #100	; 0x64
 8005c34:	4605      	mov	r5, r0
 8005c36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005c3e:	b974      	cbnz	r4, 8005c5e <_dtoa_r+0x36>
 8005c40:	2010      	movs	r0, #16
 8005c42:	f001 f949 	bl	8006ed8 <malloc>
 8005c46:	4602      	mov	r2, r0
 8005c48:	6268      	str	r0, [r5, #36]	; 0x24
 8005c4a:	b920      	cbnz	r0, 8005c56 <_dtoa_r+0x2e>
 8005c4c:	21ea      	movs	r1, #234	; 0xea
 8005c4e:	4bae      	ldr	r3, [pc, #696]	; (8005f08 <_dtoa_r+0x2e0>)
 8005c50:	48ae      	ldr	r0, [pc, #696]	; (8005f0c <_dtoa_r+0x2e4>)
 8005c52:	f002 f875 	bl	8007d40 <__assert_func>
 8005c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c5a:	6004      	str	r4, [r0, #0]
 8005c5c:	60c4      	str	r4, [r0, #12]
 8005c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	b151      	cbz	r1, 8005c7a <_dtoa_r+0x52>
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	2301      	movs	r3, #1
 8005c68:	4093      	lsls	r3, r2
 8005c6a:	604a      	str	r2, [r1, #4]
 8005c6c:	608b      	str	r3, [r1, #8]
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f001 f9a8 	bl	8006fc4 <_Bfree>
 8005c74:	2200      	movs	r2, #0
 8005c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	1e3b      	subs	r3, r7, #0
 8005c7c:	bfaf      	iteee	ge
 8005c7e:	2300      	movge	r3, #0
 8005c80:	2201      	movlt	r2, #1
 8005c82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c86:	9305      	strlt	r3, [sp, #20]
 8005c88:	bfa8      	it	ge
 8005c8a:	f8c8 3000 	strge.w	r3, [r8]
 8005c8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c92:	4b9f      	ldr	r3, [pc, #636]	; (8005f10 <_dtoa_r+0x2e8>)
 8005c94:	bfb8      	it	lt
 8005c96:	f8c8 2000 	strlt.w	r2, [r8]
 8005c9a:	ea33 0309 	bics.w	r3, r3, r9
 8005c9e:	d119      	bne.n	8005cd4 <_dtoa_r+0xac>
 8005ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ca4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cac:	4333      	orrs	r3, r6
 8005cae:	f000 8580 	beq.w	80067b2 <_dtoa_r+0xb8a>
 8005cb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cb4:	b953      	cbnz	r3, 8005ccc <_dtoa_r+0xa4>
 8005cb6:	4b97      	ldr	r3, [pc, #604]	; (8005f14 <_dtoa_r+0x2ec>)
 8005cb8:	e022      	b.n	8005d00 <_dtoa_r+0xd8>
 8005cba:	4b97      	ldr	r3, [pc, #604]	; (8005f18 <_dtoa_r+0x2f0>)
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	9808      	ldr	r0, [sp, #32]
 8005cc6:	b019      	add	sp, #100	; 0x64
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	4b91      	ldr	r3, [pc, #580]	; (8005f14 <_dtoa_r+0x2ec>)
 8005cce:	9308      	str	r3, [sp, #32]
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	e7f5      	b.n	8005cc0 <_dtoa_r+0x98>
 8005cd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f7fa fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce8:	4680      	mov	r8, r0
 8005cea:	b158      	cbz	r0, 8005d04 <_dtoa_r+0xdc>
 8005cec:	2301      	movs	r3, #1
 8005cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8559 	beq.w	80067ac <_dtoa_r+0xb84>
 8005cfa:	4888      	ldr	r0, [pc, #544]	; (8005f1c <_dtoa_r+0x2f4>)
 8005cfc:	6018      	str	r0, [r3, #0]
 8005cfe:	1e43      	subs	r3, r0, #1
 8005d00:	9308      	str	r3, [sp, #32]
 8005d02:	e7df      	b.n	8005cc4 <_dtoa_r+0x9c>
 8005d04:	ab16      	add	r3, sp, #88	; 0x58
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	ab17      	add	r3, sp, #92	; 0x5c
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d12:	f001 fd01 	bl	8007718 <__d2b>
 8005d16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d1a:	4682      	mov	sl, r0
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	d07e      	beq.n	8005e1e <_dtoa_r+0x1f6>
 8005d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005d32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4b78      	ldr	r3, [pc, #480]	; (8005f20 <_dtoa_r+0x2f8>)
 8005d3e:	f7fa fa13 	bl	8000168 <__aeabi_dsub>
 8005d42:	a36b      	add	r3, pc, #428	; (adr r3, 8005ef0 <_dtoa_r+0x2c8>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f7fa fbc6 	bl	80004d8 <__aeabi_dmul>
 8005d4c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ef8 <_dtoa_r+0x2d0>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fa0b 	bl	800016c <__adddf3>
 8005d56:	4606      	mov	r6, r0
 8005d58:	4620      	mov	r0, r4
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	f7fa fb52 	bl	8000404 <__aeabi_i2d>
 8005d60:	a367      	add	r3, pc, #412	; (adr r3, 8005f00 <_dtoa_r+0x2d8>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fbb7 	bl	80004d8 <__aeabi_dmul>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa f9fb 	bl	800016c <__adddf3>
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	f7fa fe5d 	bl	8000a38 <__aeabi_d2iz>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	4681      	mov	r9, r0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fe18 	bl	80009bc <__aeabi_dcmplt>
 8005d8c:	b148      	cbz	r0, 8005da2 <_dtoa_r+0x17a>
 8005d8e:	4648      	mov	r0, r9
 8005d90:	f7fa fb38 	bl	8000404 <__aeabi_i2d>
 8005d94:	4632      	mov	r2, r6
 8005d96:	463b      	mov	r3, r7
 8005d98:	f7fa fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9c:	b908      	cbnz	r0, 8005da2 <_dtoa_r+0x17a>
 8005d9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005da2:	f1b9 0f16 	cmp.w	r9, #22
 8005da6:	d857      	bhi.n	8005e58 <_dtoa_r+0x230>
 8005da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dac:	4b5d      	ldr	r3, [pc, #372]	; (8005f24 <_dtoa_r+0x2fc>)
 8005dae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fe01 	bl	80009bc <__aeabi_dcmplt>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d04e      	beq.n	8005e5c <_dtoa_r+0x234>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dc8:	1b1c      	subs	r4, r3, r4
 8005dca:	1e63      	subs	r3, r4, #1
 8005dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dce:	bf49      	itett	mi
 8005dd0:	f1c4 0301 	rsbmi	r3, r4, #1
 8005dd4:	2300      	movpl	r3, #0
 8005dd6:	9306      	strmi	r3, [sp, #24]
 8005dd8:	2300      	movmi	r3, #0
 8005dda:	bf54      	ite	pl
 8005ddc:	9306      	strpl	r3, [sp, #24]
 8005dde:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005de0:	f1b9 0f00 	cmp.w	r9, #0
 8005de4:	db3c      	blt.n	8005e60 <_dtoa_r+0x238>
 8005de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dec:	444b      	add	r3, r9
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	2300      	movs	r3, #0
 8005df2:	930a      	str	r3, [sp, #40]	; 0x28
 8005df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005df6:	2b09      	cmp	r3, #9
 8005df8:	d86c      	bhi.n	8005ed4 <_dtoa_r+0x2ac>
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	bfc4      	itt	gt
 8005dfe:	3b04      	subgt	r3, #4
 8005e00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e04:	bfc8      	it	gt
 8005e06:	2400      	movgt	r4, #0
 8005e08:	f1a3 0302 	sub.w	r3, r3, #2
 8005e0c:	bfd8      	it	le
 8005e0e:	2401      	movle	r4, #1
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	f200 808b 	bhi.w	8005f2c <_dtoa_r+0x304>
 8005e16:	e8df f003 	tbb	[pc, r3]
 8005e1a:	4f2d      	.short	0x4f2d
 8005e1c:	5b4d      	.short	0x5b4d
 8005e1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e22:	441c      	add	r4, r3
 8005e24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	bfc3      	ittte	gt
 8005e2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005e34:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e38:	f1c3 0320 	rsble	r3, r3, #32
 8005e3c:	bfc6      	itte	gt
 8005e3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e42:	4318      	orrgt	r0, r3
 8005e44:	fa06 f003 	lslle.w	r0, r6, r3
 8005e48:	f7fa facc 	bl	80003e4 <__aeabi_ui2d>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e52:	3c01      	subs	r4, #1
 8005e54:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e56:	e770      	b.n	8005d3a <_dtoa_r+0x112>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e7b3      	b.n	8005dc4 <_dtoa_r+0x19c>
 8005e5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e5e:	e7b2      	b.n	8005dc6 <_dtoa_r+0x19e>
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	eba3 0309 	sub.w	r3, r3, r9
 8005e66:	9306      	str	r3, [sp, #24]
 8005e68:	f1c9 0300 	rsb	r3, r9, #0
 8005e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e6e:	2300      	movs	r3, #0
 8005e70:	930e      	str	r3, [sp, #56]	; 0x38
 8005e72:	e7bf      	b.n	8005df4 <_dtoa_r+0x1cc>
 8005e74:	2300      	movs	r3, #0
 8005e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dc59      	bgt.n	8005f32 <_dtoa_r+0x30a>
 8005e7e:	f04f 0b01 	mov.w	fp, #1
 8005e82:	465b      	mov	r3, fp
 8005e84:	f8cd b008 	str.w	fp, [sp, #8]
 8005e88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005e90:	6042      	str	r2, [r0, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f102 0614 	add.w	r6, r2, #20
 8005e98:	429e      	cmp	r6, r3
 8005e9a:	6841      	ldr	r1, [r0, #4]
 8005e9c:	d94f      	bls.n	8005f3e <_dtoa_r+0x316>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f001 f850 	bl	8006f44 <_Balloc>
 8005ea4:	9008      	str	r0, [sp, #32]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d14d      	bne.n	8005f46 <_dtoa_r+0x31e>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <_dtoa_r+0x300>)
 8005eb2:	e6cd      	b.n	8005c50 <_dtoa_r+0x28>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e7de      	b.n	8005e76 <_dtoa_r+0x24e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ebc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ebe:	eb09 0b03 	add.w	fp, r9, r3
 8005ec2:	f10b 0301 	add.w	r3, fp, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	bfb8      	it	lt
 8005ecc:	2301      	movlt	r3, #1
 8005ece:	e7dd      	b.n	8005e8c <_dtoa_r+0x264>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7f2      	b.n	8005eba <_dtoa_r+0x292>
 8005ed4:	2401      	movs	r4, #1
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005eda:	9322      	str	r3, [sp, #136]	; 0x88
 8005edc:	f04f 3bff 	mov.w	fp, #4294967295
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2312      	movs	r3, #18
 8005ee4:	f8cd b008 	str.w	fp, [sp, #8]
 8005ee8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005eea:	e7cf      	b.n	8005e8c <_dtoa_r+0x264>
 8005eec:	f3af 8000 	nop.w
 8005ef0:	636f4361 	.word	0x636f4361
 8005ef4:	3fd287a7 	.word	0x3fd287a7
 8005ef8:	8b60c8b3 	.word	0x8b60c8b3
 8005efc:	3fc68a28 	.word	0x3fc68a28
 8005f00:	509f79fb 	.word	0x509f79fb
 8005f04:	3fd34413 	.word	0x3fd34413
 8005f08:	08008b06 	.word	0x08008b06
 8005f0c:	08008b1d 	.word	0x08008b1d
 8005f10:	7ff00000 	.word	0x7ff00000
 8005f14:	08008b02 	.word	0x08008b02
 8005f18:	08008af9 	.word	0x08008af9
 8005f1c:	08008979 	.word	0x08008979
 8005f20:	3ff80000 	.word	0x3ff80000
 8005f24:	08008c98 	.word	0x08008c98
 8005f28:	08008b7c 	.word	0x08008b7c
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f30:	e7d4      	b.n	8005edc <_dtoa_r+0x2b4>
 8005f32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005f36:	465b      	mov	r3, fp
 8005f38:	f8cd b008 	str.w	fp, [sp, #8]
 8005f3c:	e7a6      	b.n	8005e8c <_dtoa_r+0x264>
 8005f3e:	3101      	adds	r1, #1
 8005f40:	6041      	str	r1, [r0, #4]
 8005f42:	0052      	lsls	r2, r2, #1
 8005f44:	e7a6      	b.n	8005e94 <_dtoa_r+0x26c>
 8005f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f48:	9a08      	ldr	r2, [sp, #32]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	9b02      	ldr	r3, [sp, #8]
 8005f4e:	2b0e      	cmp	r3, #14
 8005f50:	f200 80a8 	bhi.w	80060a4 <_dtoa_r+0x47c>
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f000 80a5 	beq.w	80060a4 <_dtoa_r+0x47c>
 8005f5a:	f1b9 0f00 	cmp.w	r9, #0
 8005f5e:	dd34      	ble.n	8005fca <_dtoa_r+0x3a2>
 8005f60:	4a9a      	ldr	r2, [pc, #616]	; (80061cc <_dtoa_r+0x5a4>)
 8005f62:	f009 030f 	and.w	r3, r9, #15
 8005f66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005f7a:	d016      	beq.n	8005faa <_dtoa_r+0x382>
 8005f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f80:	4b93      	ldr	r3, [pc, #588]	; (80061d0 <_dtoa_r+0x5a8>)
 8005f82:	2703      	movs	r7, #3
 8005f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f88:	f7fa fbd0 	bl	800072c <__aeabi_ddiv>
 8005f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f90:	f004 040f 	and.w	r4, r4, #15
 8005f94:	4e8e      	ldr	r6, [pc, #568]	; (80061d0 <_dtoa_r+0x5a8>)
 8005f96:	b954      	cbnz	r4, 8005fae <_dtoa_r+0x386>
 8005f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa0:	f7fa fbc4 	bl	800072c <__aeabi_ddiv>
 8005fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa8:	e029      	b.n	8005ffe <_dtoa_r+0x3d6>
 8005faa:	2702      	movs	r7, #2
 8005fac:	e7f2      	b.n	8005f94 <_dtoa_r+0x36c>
 8005fae:	07e1      	lsls	r1, r4, #31
 8005fb0:	d508      	bpl.n	8005fc4 <_dtoa_r+0x39c>
 8005fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fba:	f7fa fa8d 	bl	80004d8 <__aeabi_dmul>
 8005fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fc2:	3701      	adds	r7, #1
 8005fc4:	1064      	asrs	r4, r4, #1
 8005fc6:	3608      	adds	r6, #8
 8005fc8:	e7e5      	b.n	8005f96 <_dtoa_r+0x36e>
 8005fca:	f000 80a5 	beq.w	8006118 <_dtoa_r+0x4f0>
 8005fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fd2:	f1c9 0400 	rsb	r4, r9, #0
 8005fd6:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <_dtoa_r+0x5a4>)
 8005fd8:	f004 020f 	and.w	r2, r4, #15
 8005fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fa78 	bl	80004d8 <__aeabi_dmul>
 8005fe8:	2702      	movs	r7, #2
 8005fea:	2300      	movs	r3, #0
 8005fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff0:	4e77      	ldr	r6, [pc, #476]	; (80061d0 <_dtoa_r+0x5a8>)
 8005ff2:	1124      	asrs	r4, r4, #4
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	f040 8084 	bne.w	8006102 <_dtoa_r+0x4da>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1d2      	bne.n	8005fa4 <_dtoa_r+0x37c>
 8005ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 808b 	beq.w	800611c <_dtoa_r+0x4f4>
 8006006:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800600a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800600e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006012:	2200      	movs	r2, #0
 8006014:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <_dtoa_r+0x5ac>)
 8006016:	f7fa fcd1 	bl	80009bc <__aeabi_dcmplt>
 800601a:	2800      	cmp	r0, #0
 800601c:	d07e      	beq.n	800611c <_dtoa_r+0x4f4>
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d07b      	beq.n	800611c <_dtoa_r+0x4f4>
 8006024:	f1bb 0f00 	cmp.w	fp, #0
 8006028:	dd38      	ble.n	800609c <_dtoa_r+0x474>
 800602a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800602e:	2200      	movs	r2, #0
 8006030:	4b69      	ldr	r3, [pc, #420]	; (80061d8 <_dtoa_r+0x5b0>)
 8006032:	f7fa fa51 	bl	80004d8 <__aeabi_dmul>
 8006036:	465c      	mov	r4, fp
 8006038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800603c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006040:	3701      	adds	r7, #1
 8006042:	4638      	mov	r0, r7
 8006044:	f7fa f9de 	bl	8000404 <__aeabi_i2d>
 8006048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604c:	f7fa fa44 	bl	80004d8 <__aeabi_dmul>
 8006050:	2200      	movs	r2, #0
 8006052:	4b62      	ldr	r3, [pc, #392]	; (80061dc <_dtoa_r+0x5b4>)
 8006054:	f7fa f88a 	bl	800016c <__adddf3>
 8006058:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800605c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006060:	9611      	str	r6, [sp, #68]	; 0x44
 8006062:	2c00      	cmp	r4, #0
 8006064:	d15d      	bne.n	8006122 <_dtoa_r+0x4fa>
 8006066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606a:	2200      	movs	r2, #0
 800606c:	4b5c      	ldr	r3, [pc, #368]	; (80061e0 <_dtoa_r+0x5b8>)
 800606e:	f7fa f87b 	bl	8000168 <__aeabi_dsub>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800607a:	4633      	mov	r3, r6
 800607c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800607e:	f7fa fcbb 	bl	80009f8 <__aeabi_dcmpgt>
 8006082:	2800      	cmp	r0, #0
 8006084:	f040 829e 	bne.w	80065c4 <_dtoa_r+0x99c>
 8006088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800608c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800608e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006092:	f7fa fc93 	bl	80009bc <__aeabi_dcmplt>
 8006096:	2800      	cmp	r0, #0
 8006098:	f040 8292 	bne.w	80065c0 <_dtoa_r+0x998>
 800609c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80060a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f2c0 8153 	blt.w	8006352 <_dtoa_r+0x72a>
 80060ac:	f1b9 0f0e 	cmp.w	r9, #14
 80060b0:	f300 814f 	bgt.w	8006352 <_dtoa_r+0x72a>
 80060b4:	4b45      	ldr	r3, [pc, #276]	; (80061cc <_dtoa_r+0x5a4>)
 80060b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80060ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80060c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f280 80db 	bge.w	8006280 <_dtoa_r+0x658>
 80060ca:	9b02      	ldr	r3, [sp, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f300 80d7 	bgt.w	8006280 <_dtoa_r+0x658>
 80060d2:	f040 8274 	bne.w	80065be <_dtoa_r+0x996>
 80060d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060da:	2200      	movs	r2, #0
 80060dc:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <_dtoa_r+0x5b8>)
 80060de:	f7fa f9fb 	bl	80004d8 <__aeabi_dmul>
 80060e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e6:	f7fa fc7d 	bl	80009e4 <__aeabi_dcmpge>
 80060ea:	9c02      	ldr	r4, [sp, #8]
 80060ec:	4626      	mov	r6, r4
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 824a 	bne.w	8006588 <_dtoa_r+0x960>
 80060f4:	2331      	movs	r3, #49	; 0x31
 80060f6:	9f08      	ldr	r7, [sp, #32]
 80060f8:	f109 0901 	add.w	r9, r9, #1
 80060fc:	f807 3b01 	strb.w	r3, [r7], #1
 8006100:	e246      	b.n	8006590 <_dtoa_r+0x968>
 8006102:	07e2      	lsls	r2, r4, #31
 8006104:	d505      	bpl.n	8006112 <_dtoa_r+0x4ea>
 8006106:	e9d6 2300 	ldrd	r2, r3, [r6]
 800610a:	f7fa f9e5 	bl	80004d8 <__aeabi_dmul>
 800610e:	2301      	movs	r3, #1
 8006110:	3701      	adds	r7, #1
 8006112:	1064      	asrs	r4, r4, #1
 8006114:	3608      	adds	r6, #8
 8006116:	e76d      	b.n	8005ff4 <_dtoa_r+0x3cc>
 8006118:	2702      	movs	r7, #2
 800611a:	e770      	b.n	8005ffe <_dtoa_r+0x3d6>
 800611c:	46c8      	mov	r8, r9
 800611e:	9c02      	ldr	r4, [sp, #8]
 8006120:	e78f      	b.n	8006042 <_dtoa_r+0x41a>
 8006122:	9908      	ldr	r1, [sp, #32]
 8006124:	4b29      	ldr	r3, [pc, #164]	; (80061cc <_dtoa_r+0x5a4>)
 8006126:	4421      	add	r1, r4
 8006128:	9112      	str	r1, [sp, #72]	; 0x48
 800612a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800612c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006130:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006134:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006138:	2900      	cmp	r1, #0
 800613a:	d055      	beq.n	80061e8 <_dtoa_r+0x5c0>
 800613c:	2000      	movs	r0, #0
 800613e:	4929      	ldr	r1, [pc, #164]	; (80061e4 <_dtoa_r+0x5bc>)
 8006140:	f7fa faf4 	bl	800072c <__aeabi_ddiv>
 8006144:	463b      	mov	r3, r7
 8006146:	4632      	mov	r2, r6
 8006148:	f7fa f80e 	bl	8000168 <__aeabi_dsub>
 800614c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006150:	9f08      	ldr	r7, [sp, #32]
 8006152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006156:	f7fa fc6f 	bl	8000a38 <__aeabi_d2iz>
 800615a:	4604      	mov	r4, r0
 800615c:	f7fa f952 	bl	8000404 <__aeabi_i2d>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006168:	f7f9 fffe 	bl	8000168 <__aeabi_dsub>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	3430      	adds	r4, #48	; 0x30
 8006172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800617a:	f807 4b01 	strb.w	r4, [r7], #1
 800617e:	f7fa fc1d 	bl	80009bc <__aeabi_dcmplt>
 8006182:	2800      	cmp	r0, #0
 8006184:	d174      	bne.n	8006270 <_dtoa_r+0x648>
 8006186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618a:	2000      	movs	r0, #0
 800618c:	4911      	ldr	r1, [pc, #68]	; (80061d4 <_dtoa_r+0x5ac>)
 800618e:	f7f9 ffeb 	bl	8000168 <__aeabi_dsub>
 8006192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006196:	f7fa fc11 	bl	80009bc <__aeabi_dcmplt>
 800619a:	2800      	cmp	r0, #0
 800619c:	f040 80b6 	bne.w	800630c <_dtoa_r+0x6e4>
 80061a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061a2:	429f      	cmp	r7, r3
 80061a4:	f43f af7a 	beq.w	800609c <_dtoa_r+0x474>
 80061a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ac:	2200      	movs	r2, #0
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <_dtoa_r+0x5b0>)
 80061b0:	f7fa f992 	bl	80004d8 <__aeabi_dmul>
 80061b4:	2200      	movs	r2, #0
 80061b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <_dtoa_r+0x5b0>)
 80061c0:	f7fa f98a 	bl	80004d8 <__aeabi_dmul>
 80061c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c8:	e7c3      	b.n	8006152 <_dtoa_r+0x52a>
 80061ca:	bf00      	nop
 80061cc:	08008c98 	.word	0x08008c98
 80061d0:	08008c70 	.word	0x08008c70
 80061d4:	3ff00000 	.word	0x3ff00000
 80061d8:	40240000 	.word	0x40240000
 80061dc:	401c0000 	.word	0x401c0000
 80061e0:	40140000 	.word	0x40140000
 80061e4:	3fe00000 	.word	0x3fe00000
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7fa f974 	bl	80004d8 <__aeabi_dmul>
 80061f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061f6:	9c08      	ldr	r4, [sp, #32]
 80061f8:	9314      	str	r3, [sp, #80]	; 0x50
 80061fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061fe:	f7fa fc1b 	bl	8000a38 <__aeabi_d2iz>
 8006202:	9015      	str	r0, [sp, #84]	; 0x54
 8006204:	f7fa f8fe 	bl	8000404 <__aeabi_i2d>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006210:	f7f9 ffaa 	bl	8000168 <__aeabi_dsub>
 8006214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006216:	4606      	mov	r6, r0
 8006218:	3330      	adds	r3, #48	; 0x30
 800621a:	f804 3b01 	strb.w	r3, [r4], #1
 800621e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006220:	460f      	mov	r7, r1
 8006222:	429c      	cmp	r4, r3
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	d124      	bne.n	8006274 <_dtoa_r+0x64c>
 800622a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800622e:	4bb3      	ldr	r3, [pc, #716]	; (80064fc <_dtoa_r+0x8d4>)
 8006230:	f7f9 ff9c 	bl	800016c <__adddf3>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4630      	mov	r0, r6
 800623a:	4639      	mov	r1, r7
 800623c:	f7fa fbdc 	bl	80009f8 <__aeabi_dcmpgt>
 8006240:	2800      	cmp	r0, #0
 8006242:	d162      	bne.n	800630a <_dtoa_r+0x6e2>
 8006244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006248:	2000      	movs	r0, #0
 800624a:	49ac      	ldr	r1, [pc, #688]	; (80064fc <_dtoa_r+0x8d4>)
 800624c:	f7f9 ff8c 	bl	8000168 <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fbb0 	bl	80009bc <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	f43f af1d 	beq.w	800609c <_dtoa_r+0x474>
 8006262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006264:	1e7b      	subs	r3, r7, #1
 8006266:	9314      	str	r3, [sp, #80]	; 0x50
 8006268:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d0f8      	beq.n	8006262 <_dtoa_r+0x63a>
 8006270:	46c1      	mov	r9, r8
 8006272:	e03a      	b.n	80062ea <_dtoa_r+0x6c2>
 8006274:	4ba2      	ldr	r3, [pc, #648]	; (8006500 <_dtoa_r+0x8d8>)
 8006276:	f7fa f92f 	bl	80004d8 <__aeabi_dmul>
 800627a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800627e:	e7bc      	b.n	80061fa <_dtoa_r+0x5d2>
 8006280:	9f08      	ldr	r7, [sp, #32]
 8006282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800628a:	f7fa fa4f 	bl	800072c <__aeabi_ddiv>
 800628e:	f7fa fbd3 	bl	8000a38 <__aeabi_d2iz>
 8006292:	4604      	mov	r4, r0
 8006294:	f7fa f8b6 	bl	8000404 <__aeabi_i2d>
 8006298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800629c:	f7fa f91c 	bl	80004d8 <__aeabi_dmul>
 80062a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80062a4:	460b      	mov	r3, r1
 80062a6:	4602      	mov	r2, r0
 80062a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ac:	f7f9 ff5c 	bl	8000168 <__aeabi_dsub>
 80062b0:	f807 6b01 	strb.w	r6, [r7], #1
 80062b4:	9e08      	ldr	r6, [sp, #32]
 80062b6:	9b02      	ldr	r3, [sp, #8]
 80062b8:	1bbe      	subs	r6, r7, r6
 80062ba:	42b3      	cmp	r3, r6
 80062bc:	d13a      	bne.n	8006334 <_dtoa_r+0x70c>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	f7f9 ff53 	bl	800016c <__adddf3>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062d2:	f7fa fb91 	bl	80009f8 <__aeabi_dcmpgt>
 80062d6:	bb58      	cbnz	r0, 8006330 <_dtoa_r+0x708>
 80062d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e0:	f7fa fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80062e4:	b108      	cbz	r0, 80062ea <_dtoa_r+0x6c2>
 80062e6:	07e1      	lsls	r1, r4, #31
 80062e8:	d422      	bmi.n	8006330 <_dtoa_r+0x708>
 80062ea:	4628      	mov	r0, r5
 80062ec:	4651      	mov	r1, sl
 80062ee:	f000 fe69 	bl	8006fc4 <_Bfree>
 80062f2:	2300      	movs	r3, #0
 80062f4:	703b      	strb	r3, [r7, #0]
 80062f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80062f8:	f109 0001 	add.w	r0, r9, #1
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006300:	2b00      	cmp	r3, #0
 8006302:	f43f acdf 	beq.w	8005cc4 <_dtoa_r+0x9c>
 8006306:	601f      	str	r7, [r3, #0]
 8006308:	e4dc      	b.n	8005cc4 <_dtoa_r+0x9c>
 800630a:	4627      	mov	r7, r4
 800630c:	463b      	mov	r3, r7
 800630e:	461f      	mov	r7, r3
 8006310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006314:	2a39      	cmp	r2, #57	; 0x39
 8006316:	d107      	bne.n	8006328 <_dtoa_r+0x700>
 8006318:	9a08      	ldr	r2, [sp, #32]
 800631a:	429a      	cmp	r2, r3
 800631c:	d1f7      	bne.n	800630e <_dtoa_r+0x6e6>
 800631e:	2230      	movs	r2, #48	; 0x30
 8006320:	9908      	ldr	r1, [sp, #32]
 8006322:	f108 0801 	add.w	r8, r8, #1
 8006326:	700a      	strb	r2, [r1, #0]
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	3201      	adds	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e79f      	b.n	8006270 <_dtoa_r+0x648>
 8006330:	46c8      	mov	r8, r9
 8006332:	e7eb      	b.n	800630c <_dtoa_r+0x6e4>
 8006334:	2200      	movs	r2, #0
 8006336:	4b72      	ldr	r3, [pc, #456]	; (8006500 <_dtoa_r+0x8d8>)
 8006338:	f7fa f8ce 	bl	80004d8 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	f7fa fb2e 	bl	80009a8 <__aeabi_dcmpeq>
 800634c:	2800      	cmp	r0, #0
 800634e:	d098      	beq.n	8006282 <_dtoa_r+0x65a>
 8006350:	e7cb      	b.n	80062ea <_dtoa_r+0x6c2>
 8006352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006354:	2a00      	cmp	r2, #0
 8006356:	f000 80cd 	beq.w	80064f4 <_dtoa_r+0x8cc>
 800635a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800635c:	2a01      	cmp	r2, #1
 800635e:	f300 80af 	bgt.w	80064c0 <_dtoa_r+0x898>
 8006362:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006364:	2a00      	cmp	r2, #0
 8006366:	f000 80a7 	beq.w	80064b8 <_dtoa_r+0x890>
 800636a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800636e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006370:	9f06      	ldr	r7, [sp, #24]
 8006372:	9a06      	ldr	r2, [sp, #24]
 8006374:	2101      	movs	r1, #1
 8006376:	441a      	add	r2, r3
 8006378:	9206      	str	r2, [sp, #24]
 800637a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637c:	4628      	mov	r0, r5
 800637e:	441a      	add	r2, r3
 8006380:	9209      	str	r2, [sp, #36]	; 0x24
 8006382:	f000 ff23 	bl	80071cc <__i2b>
 8006386:	4606      	mov	r6, r0
 8006388:	2f00      	cmp	r7, #0
 800638a:	dd0c      	ble.n	80063a6 <_dtoa_r+0x77e>
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	dd09      	ble.n	80063a6 <_dtoa_r+0x77e>
 8006392:	42bb      	cmp	r3, r7
 8006394:	bfa8      	it	ge
 8006396:	463b      	movge	r3, r7
 8006398:	9a06      	ldr	r2, [sp, #24]
 800639a:	1aff      	subs	r7, r7, r3
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	9206      	str	r2, [sp, #24]
 80063a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	9309      	str	r3, [sp, #36]	; 0x24
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	b1f3      	cbz	r3, 80063e8 <_dtoa_r+0x7c0>
 80063aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a9 	beq.w	8006504 <_dtoa_r+0x8dc>
 80063b2:	2c00      	cmp	r4, #0
 80063b4:	dd10      	ble.n	80063d8 <_dtoa_r+0x7b0>
 80063b6:	4631      	mov	r1, r6
 80063b8:	4622      	mov	r2, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	f000 ffc0 	bl	8007340 <__pow5mult>
 80063c0:	4652      	mov	r2, sl
 80063c2:	4601      	mov	r1, r0
 80063c4:	4606      	mov	r6, r0
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 ff16 	bl	80071f8 <__multiply>
 80063cc:	4680      	mov	r8, r0
 80063ce:	4651      	mov	r1, sl
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 fdf7 	bl	8006fc4 <_Bfree>
 80063d6:	46c2      	mov	sl, r8
 80063d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063da:	1b1a      	subs	r2, r3, r4
 80063dc:	d004      	beq.n	80063e8 <_dtoa_r+0x7c0>
 80063de:	4651      	mov	r1, sl
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 ffad 	bl	8007340 <__pow5mult>
 80063e6:	4682      	mov	sl, r0
 80063e8:	2101      	movs	r1, #1
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 feee 	bl	80071cc <__i2b>
 80063f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f2:	4604      	mov	r4, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f340 8087 	ble.w	8006508 <_dtoa_r+0x8e0>
 80063fa:	461a      	mov	r2, r3
 80063fc:	4601      	mov	r1, r0
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 ff9e 	bl	8007340 <__pow5mult>
 8006404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006406:	4604      	mov	r4, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	f340 8080 	ble.w	800650e <_dtoa_r+0x8e6>
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006418:	6918      	ldr	r0, [r3, #16]
 800641a:	f000 fe89 	bl	8007130 <__hi0bits>
 800641e:	f1c0 0020 	rsb	r0, r0, #32
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	4418      	add	r0, r3
 8006426:	f010 001f 	ands.w	r0, r0, #31
 800642a:	f000 8092 	beq.w	8006552 <_dtoa_r+0x92a>
 800642e:	f1c0 0320 	rsb	r3, r0, #32
 8006432:	2b04      	cmp	r3, #4
 8006434:	f340 808a 	ble.w	800654c <_dtoa_r+0x924>
 8006438:	f1c0 001c 	rsb	r0, r0, #28
 800643c:	9b06      	ldr	r3, [sp, #24]
 800643e:	4407      	add	r7, r0
 8006440:	4403      	add	r3, r0
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006446:	4403      	add	r3, r0
 8006448:	9309      	str	r3, [sp, #36]	; 0x24
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dd05      	ble.n	800645c <_dtoa_r+0x834>
 8006450:	4651      	mov	r1, sl
 8006452:	461a      	mov	r2, r3
 8006454:	4628      	mov	r0, r5
 8006456:	f000 ffcd 	bl	80073f4 <__lshift>
 800645a:	4682      	mov	sl, r0
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd05      	ble.n	800646e <_dtoa_r+0x846>
 8006462:	4621      	mov	r1, r4
 8006464:	461a      	mov	r2, r3
 8006466:	4628      	mov	r0, r5
 8006468:	f000 ffc4 	bl	80073f4 <__lshift>
 800646c:	4604      	mov	r4, r0
 800646e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d070      	beq.n	8006556 <_dtoa_r+0x92e>
 8006474:	4621      	mov	r1, r4
 8006476:	4650      	mov	r0, sl
 8006478:	f001 f828 	bl	80074cc <__mcmp>
 800647c:	2800      	cmp	r0, #0
 800647e:	da6a      	bge.n	8006556 <_dtoa_r+0x92e>
 8006480:	2300      	movs	r3, #0
 8006482:	4651      	mov	r1, sl
 8006484:	220a      	movs	r2, #10
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fdbe 	bl	8007008 <__multadd>
 800648c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648e:	4682      	mov	sl, r0
 8006490:	f109 39ff 	add.w	r9, r9, #4294967295
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8193 	beq.w	80067c0 <_dtoa_r+0xb98>
 800649a:	4631      	mov	r1, r6
 800649c:	2300      	movs	r3, #0
 800649e:	220a      	movs	r2, #10
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 fdb1 	bl	8007008 <__multadd>
 80064a6:	f1bb 0f00 	cmp.w	fp, #0
 80064aa:	4606      	mov	r6, r0
 80064ac:	f300 8093 	bgt.w	80065d6 <_dtoa_r+0x9ae>
 80064b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	dc57      	bgt.n	8006566 <_dtoa_r+0x93e>
 80064b6:	e08e      	b.n	80065d6 <_dtoa_r+0x9ae>
 80064b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064be:	e756      	b.n	800636e <_dtoa_r+0x746>
 80064c0:	9b02      	ldr	r3, [sp, #8]
 80064c2:	1e5c      	subs	r4, r3, #1
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	bfb7      	itett	lt
 80064ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064cc:	1b1c      	subge	r4, r3, r4
 80064ce:	1ae2      	sublt	r2, r4, r3
 80064d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80064d2:	bfbe      	ittt	lt
 80064d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80064d6:	189b      	addlt	r3, r3, r2
 80064d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80064da:	9b02      	ldr	r3, [sp, #8]
 80064dc:	bfb8      	it	lt
 80064de:	2400      	movlt	r4, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bfbb      	ittet	lt
 80064e4:	9b06      	ldrlt	r3, [sp, #24]
 80064e6:	9a02      	ldrlt	r2, [sp, #8]
 80064e8:	9f06      	ldrge	r7, [sp, #24]
 80064ea:	1a9f      	sublt	r7, r3, r2
 80064ec:	bfac      	ite	ge
 80064ee:	9b02      	ldrge	r3, [sp, #8]
 80064f0:	2300      	movlt	r3, #0
 80064f2:	e73e      	b.n	8006372 <_dtoa_r+0x74a>
 80064f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064f6:	9f06      	ldr	r7, [sp, #24]
 80064f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064fa:	e745      	b.n	8006388 <_dtoa_r+0x760>
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	40240000 	.word	0x40240000
 8006504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006506:	e76a      	b.n	80063de <_dtoa_r+0x7b6>
 8006508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800650a:	2b01      	cmp	r3, #1
 800650c:	dc19      	bgt.n	8006542 <_dtoa_r+0x91a>
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	b9bb      	cbnz	r3, 8006542 <_dtoa_r+0x91a>
 8006512:	9b05      	ldr	r3, [sp, #20]
 8006514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006518:	b99b      	cbnz	r3, 8006542 <_dtoa_r+0x91a>
 800651a:	9b05      	ldr	r3, [sp, #20]
 800651c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006520:	0d1b      	lsrs	r3, r3, #20
 8006522:	051b      	lsls	r3, r3, #20
 8006524:	b183      	cbz	r3, 8006548 <_dtoa_r+0x920>
 8006526:	f04f 0801 	mov.w	r8, #1
 800652a:	9b06      	ldr	r3, [sp, #24]
 800652c:	3301      	adds	r3, #1
 800652e:	9306      	str	r3, [sp, #24]
 8006530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006532:	3301      	adds	r3, #1
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f af6a 	bne.w	8006412 <_dtoa_r+0x7ea>
 800653e:	2001      	movs	r0, #1
 8006540:	e76f      	b.n	8006422 <_dtoa_r+0x7fa>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	e7f6      	b.n	8006536 <_dtoa_r+0x90e>
 8006548:	4698      	mov	r8, r3
 800654a:	e7f4      	b.n	8006536 <_dtoa_r+0x90e>
 800654c:	f43f af7d 	beq.w	800644a <_dtoa_r+0x822>
 8006550:	4618      	mov	r0, r3
 8006552:	301c      	adds	r0, #28
 8006554:	e772      	b.n	800643c <_dtoa_r+0x814>
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc36      	bgt.n	80065ca <_dtoa_r+0x9a2>
 800655c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655e:	2b02      	cmp	r3, #2
 8006560:	dd33      	ble.n	80065ca <_dtoa_r+0x9a2>
 8006562:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	d10d      	bne.n	8006588 <_dtoa_r+0x960>
 800656c:	4621      	mov	r1, r4
 800656e:	465b      	mov	r3, fp
 8006570:	2205      	movs	r2, #5
 8006572:	4628      	mov	r0, r5
 8006574:	f000 fd48 	bl	8007008 <__multadd>
 8006578:	4601      	mov	r1, r0
 800657a:	4604      	mov	r4, r0
 800657c:	4650      	mov	r0, sl
 800657e:	f000 ffa5 	bl	80074cc <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	f73f adb6 	bgt.w	80060f4 <_dtoa_r+0x4cc>
 8006588:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800658a:	9f08      	ldr	r7, [sp, #32]
 800658c:	ea6f 0903 	mvn.w	r9, r3
 8006590:	f04f 0800 	mov.w	r8, #0
 8006594:	4621      	mov	r1, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fd14 	bl	8006fc4 <_Bfree>
 800659c:	2e00      	cmp	r6, #0
 800659e:	f43f aea4 	beq.w	80062ea <_dtoa_r+0x6c2>
 80065a2:	f1b8 0f00 	cmp.w	r8, #0
 80065a6:	d005      	beq.n	80065b4 <_dtoa_r+0x98c>
 80065a8:	45b0      	cmp	r8, r6
 80065aa:	d003      	beq.n	80065b4 <_dtoa_r+0x98c>
 80065ac:	4641      	mov	r1, r8
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 fd08 	bl	8006fc4 <_Bfree>
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fd04 	bl	8006fc4 <_Bfree>
 80065bc:	e695      	b.n	80062ea <_dtoa_r+0x6c2>
 80065be:	2400      	movs	r4, #0
 80065c0:	4626      	mov	r6, r4
 80065c2:	e7e1      	b.n	8006588 <_dtoa_r+0x960>
 80065c4:	46c1      	mov	r9, r8
 80065c6:	4626      	mov	r6, r4
 80065c8:	e594      	b.n	80060f4 <_dtoa_r+0x4cc>
 80065ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80fc 	beq.w	80067ce <_dtoa_r+0xba6>
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	dd05      	ble.n	80065e6 <_dtoa_r+0x9be>
 80065da:	4631      	mov	r1, r6
 80065dc:	463a      	mov	r2, r7
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 ff08 	bl	80073f4 <__lshift>
 80065e4:	4606      	mov	r6, r0
 80065e6:	f1b8 0f00 	cmp.w	r8, #0
 80065ea:	d05c      	beq.n	80066a6 <_dtoa_r+0xa7e>
 80065ec:	4628      	mov	r0, r5
 80065ee:	6871      	ldr	r1, [r6, #4]
 80065f0:	f000 fca8 	bl	8006f44 <_Balloc>
 80065f4:	4607      	mov	r7, r0
 80065f6:	b928      	cbnz	r0, 8006604 <_dtoa_r+0x9dc>
 80065f8:	4602      	mov	r2, r0
 80065fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80065fe:	4b7e      	ldr	r3, [pc, #504]	; (80067f8 <_dtoa_r+0xbd0>)
 8006600:	f7ff bb26 	b.w	8005c50 <_dtoa_r+0x28>
 8006604:	6932      	ldr	r2, [r6, #16]
 8006606:	f106 010c 	add.w	r1, r6, #12
 800660a:	3202      	adds	r2, #2
 800660c:	0092      	lsls	r2, r2, #2
 800660e:	300c      	adds	r0, #12
 8006610:	f000 fc8a 	bl	8006f28 <memcpy>
 8006614:	2201      	movs	r2, #1
 8006616:	4639      	mov	r1, r7
 8006618:	4628      	mov	r0, r5
 800661a:	f000 feeb 	bl	80073f4 <__lshift>
 800661e:	46b0      	mov	r8, r6
 8006620:	4606      	mov	r6, r0
 8006622:	9b08      	ldr	r3, [sp, #32]
 8006624:	3301      	adds	r3, #1
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	445b      	add	r3, fp
 800662c:	930a      	str	r3, [sp, #40]	; 0x28
 800662e:	9b04      	ldr	r3, [sp, #16]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	9309      	str	r3, [sp, #36]	; 0x24
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	4621      	mov	r1, r4
 800663a:	4650      	mov	r0, sl
 800663c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006640:	f7ff fa64 	bl	8005b0c <quorem>
 8006644:	4603      	mov	r3, r0
 8006646:	4641      	mov	r1, r8
 8006648:	3330      	adds	r3, #48	; 0x30
 800664a:	9004      	str	r0, [sp, #16]
 800664c:	4650      	mov	r0, sl
 800664e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006650:	f000 ff3c 	bl	80074cc <__mcmp>
 8006654:	4632      	mov	r2, r6
 8006656:	9006      	str	r0, [sp, #24]
 8006658:	4621      	mov	r1, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 ff52 	bl	8007504 <__mdiff>
 8006660:	68c2      	ldr	r2, [r0, #12]
 8006662:	4607      	mov	r7, r0
 8006664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006666:	bb02      	cbnz	r2, 80066aa <_dtoa_r+0xa82>
 8006668:	4601      	mov	r1, r0
 800666a:	4650      	mov	r0, sl
 800666c:	f000 ff2e 	bl	80074cc <__mcmp>
 8006670:	4602      	mov	r2, r0
 8006672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006674:	4639      	mov	r1, r7
 8006676:	4628      	mov	r0, r5
 8006678:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800667c:	f000 fca2 	bl	8006fc4 <_Bfree>
 8006680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006684:	9f02      	ldr	r7, [sp, #8]
 8006686:	ea43 0102 	orr.w	r1, r3, r2
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	430b      	orrs	r3, r1
 800668e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006690:	d10d      	bne.n	80066ae <_dtoa_r+0xa86>
 8006692:	2b39      	cmp	r3, #57	; 0x39
 8006694:	d027      	beq.n	80066e6 <_dtoa_r+0xabe>
 8006696:	9a06      	ldr	r2, [sp, #24]
 8006698:	2a00      	cmp	r2, #0
 800669a:	dd01      	ble.n	80066a0 <_dtoa_r+0xa78>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	3331      	adds	r3, #49	; 0x31
 80066a0:	f88b 3000 	strb.w	r3, [fp]
 80066a4:	e776      	b.n	8006594 <_dtoa_r+0x96c>
 80066a6:	4630      	mov	r0, r6
 80066a8:	e7b9      	b.n	800661e <_dtoa_r+0x9f6>
 80066aa:	2201      	movs	r2, #1
 80066ac:	e7e2      	b.n	8006674 <_dtoa_r+0xa4c>
 80066ae:	9906      	ldr	r1, [sp, #24]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	db04      	blt.n	80066be <_dtoa_r+0xa96>
 80066b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80066b6:	4301      	orrs	r1, r0
 80066b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ba:	4301      	orrs	r1, r0
 80066bc:	d120      	bne.n	8006700 <_dtoa_r+0xad8>
 80066be:	2a00      	cmp	r2, #0
 80066c0:	ddee      	ble.n	80066a0 <_dtoa_r+0xa78>
 80066c2:	4651      	mov	r1, sl
 80066c4:	2201      	movs	r2, #1
 80066c6:	4628      	mov	r0, r5
 80066c8:	9302      	str	r3, [sp, #8]
 80066ca:	f000 fe93 	bl	80073f4 <__lshift>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4682      	mov	sl, r0
 80066d2:	f000 fefb 	bl	80074cc <__mcmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	9b02      	ldr	r3, [sp, #8]
 80066da:	dc02      	bgt.n	80066e2 <_dtoa_r+0xaba>
 80066dc:	d1e0      	bne.n	80066a0 <_dtoa_r+0xa78>
 80066de:	07da      	lsls	r2, r3, #31
 80066e0:	d5de      	bpl.n	80066a0 <_dtoa_r+0xa78>
 80066e2:	2b39      	cmp	r3, #57	; 0x39
 80066e4:	d1da      	bne.n	800669c <_dtoa_r+0xa74>
 80066e6:	2339      	movs	r3, #57	; 0x39
 80066e8:	f88b 3000 	strb.w	r3, [fp]
 80066ec:	463b      	mov	r3, r7
 80066ee:	461f      	mov	r7, r3
 80066f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	2a39      	cmp	r2, #57	; 0x39
 80066f8:	d050      	beq.n	800679c <_dtoa_r+0xb74>
 80066fa:	3201      	adds	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e749      	b.n	8006594 <_dtoa_r+0x96c>
 8006700:	2a00      	cmp	r2, #0
 8006702:	dd03      	ble.n	800670c <_dtoa_r+0xae4>
 8006704:	2b39      	cmp	r3, #57	; 0x39
 8006706:	d0ee      	beq.n	80066e6 <_dtoa_r+0xabe>
 8006708:	3301      	adds	r3, #1
 800670a:	e7c9      	b.n	80066a0 <_dtoa_r+0xa78>
 800670c:	9a02      	ldr	r2, [sp, #8]
 800670e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006710:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006714:	428a      	cmp	r2, r1
 8006716:	d02a      	beq.n	800676e <_dtoa_r+0xb46>
 8006718:	4651      	mov	r1, sl
 800671a:	2300      	movs	r3, #0
 800671c:	220a      	movs	r2, #10
 800671e:	4628      	mov	r0, r5
 8006720:	f000 fc72 	bl	8007008 <__multadd>
 8006724:	45b0      	cmp	r8, r6
 8006726:	4682      	mov	sl, r0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	f04f 020a 	mov.w	r2, #10
 8006730:	4641      	mov	r1, r8
 8006732:	4628      	mov	r0, r5
 8006734:	d107      	bne.n	8006746 <_dtoa_r+0xb1e>
 8006736:	f000 fc67 	bl	8007008 <__multadd>
 800673a:	4680      	mov	r8, r0
 800673c:	4606      	mov	r6, r0
 800673e:	9b02      	ldr	r3, [sp, #8]
 8006740:	3301      	adds	r3, #1
 8006742:	9302      	str	r3, [sp, #8]
 8006744:	e777      	b.n	8006636 <_dtoa_r+0xa0e>
 8006746:	f000 fc5f 	bl	8007008 <__multadd>
 800674a:	4631      	mov	r1, r6
 800674c:	4680      	mov	r8, r0
 800674e:	2300      	movs	r3, #0
 8006750:	220a      	movs	r2, #10
 8006752:	4628      	mov	r0, r5
 8006754:	f000 fc58 	bl	8007008 <__multadd>
 8006758:	4606      	mov	r6, r0
 800675a:	e7f0      	b.n	800673e <_dtoa_r+0xb16>
 800675c:	f1bb 0f00 	cmp.w	fp, #0
 8006760:	bfcc      	ite	gt
 8006762:	465f      	movgt	r7, fp
 8006764:	2701      	movle	r7, #1
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	9a08      	ldr	r2, [sp, #32]
 800676c:	4417      	add	r7, r2
 800676e:	4651      	mov	r1, sl
 8006770:	2201      	movs	r2, #1
 8006772:	4628      	mov	r0, r5
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	f000 fe3d 	bl	80073f4 <__lshift>
 800677a:	4621      	mov	r1, r4
 800677c:	4682      	mov	sl, r0
 800677e:	f000 fea5 	bl	80074cc <__mcmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	dcb2      	bgt.n	80066ec <_dtoa_r+0xac4>
 8006786:	d102      	bne.n	800678e <_dtoa_r+0xb66>
 8006788:	9b02      	ldr	r3, [sp, #8]
 800678a:	07db      	lsls	r3, r3, #31
 800678c:	d4ae      	bmi.n	80066ec <_dtoa_r+0xac4>
 800678e:	463b      	mov	r3, r7
 8006790:	461f      	mov	r7, r3
 8006792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006796:	2a30      	cmp	r2, #48	; 0x30
 8006798:	d0fa      	beq.n	8006790 <_dtoa_r+0xb68>
 800679a:	e6fb      	b.n	8006594 <_dtoa_r+0x96c>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d1a5      	bne.n	80066ee <_dtoa_r+0xac6>
 80067a2:	2331      	movs	r3, #49	; 0x31
 80067a4:	f109 0901 	add.w	r9, r9, #1
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	e6f3      	b.n	8006594 <_dtoa_r+0x96c>
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <_dtoa_r+0xbd4>)
 80067ae:	f7ff baa7 	b.w	8005d00 <_dtoa_r+0xd8>
 80067b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f47f aa80 	bne.w	8005cba <_dtoa_r+0x92>
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <_dtoa_r+0xbd8>)
 80067bc:	f7ff baa0 	b.w	8005d00 <_dtoa_r+0xd8>
 80067c0:	f1bb 0f00 	cmp.w	fp, #0
 80067c4:	dc03      	bgt.n	80067ce <_dtoa_r+0xba6>
 80067c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	f73f aecc 	bgt.w	8006566 <_dtoa_r+0x93e>
 80067ce:	9f08      	ldr	r7, [sp, #32]
 80067d0:	4621      	mov	r1, r4
 80067d2:	4650      	mov	r0, sl
 80067d4:	f7ff f99a 	bl	8005b0c <quorem>
 80067d8:	9a08      	ldr	r2, [sp, #32]
 80067da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80067de:	f807 3b01 	strb.w	r3, [r7], #1
 80067e2:	1aba      	subs	r2, r7, r2
 80067e4:	4593      	cmp	fp, r2
 80067e6:	ddb9      	ble.n	800675c <_dtoa_r+0xb34>
 80067e8:	4651      	mov	r1, sl
 80067ea:	2300      	movs	r3, #0
 80067ec:	220a      	movs	r2, #10
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 fc0a 	bl	8007008 <__multadd>
 80067f4:	4682      	mov	sl, r0
 80067f6:	e7eb      	b.n	80067d0 <_dtoa_r+0xba8>
 80067f8:	08008b7c 	.word	0x08008b7c
 80067fc:	08008978 	.word	0x08008978
 8006800:	08008af9 	.word	0x08008af9

08006804 <rshift>:
 8006804:	6903      	ldr	r3, [r0, #16]
 8006806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800680a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800680e:	f100 0414 	add.w	r4, r0, #20
 8006812:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006816:	dd46      	ble.n	80068a6 <rshift+0xa2>
 8006818:	f011 011f 	ands.w	r1, r1, #31
 800681c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006824:	d10c      	bne.n	8006840 <rshift+0x3c>
 8006826:	4629      	mov	r1, r5
 8006828:	f100 0710 	add.w	r7, r0, #16
 800682c:	42b1      	cmp	r1, r6
 800682e:	d335      	bcc.n	800689c <rshift+0x98>
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	1eea      	subs	r2, r5, #3
 8006836:	4296      	cmp	r6, r2
 8006838:	bf38      	it	cc
 800683a:	2300      	movcc	r3, #0
 800683c:	4423      	add	r3, r4
 800683e:	e015      	b.n	800686c <rshift+0x68>
 8006840:	46a1      	mov	r9, r4
 8006842:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006846:	f1c1 0820 	rsb	r8, r1, #32
 800684a:	40cf      	lsrs	r7, r1
 800684c:	f105 0e04 	add.w	lr, r5, #4
 8006850:	4576      	cmp	r6, lr
 8006852:	46f4      	mov	ip, lr
 8006854:	d816      	bhi.n	8006884 <rshift+0x80>
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009a      	lsls	r2, r3, #2
 800685a:	3a04      	subs	r2, #4
 800685c:	3501      	adds	r5, #1
 800685e:	42ae      	cmp	r6, r5
 8006860:	bf38      	it	cc
 8006862:	2200      	movcc	r2, #0
 8006864:	18a3      	adds	r3, r4, r2
 8006866:	50a7      	str	r7, [r4, r2]
 8006868:	b107      	cbz	r7, 800686c <rshift+0x68>
 800686a:	3304      	adds	r3, #4
 800686c:	42a3      	cmp	r3, r4
 800686e:	eba3 0204 	sub.w	r2, r3, r4
 8006872:	bf08      	it	eq
 8006874:	2300      	moveq	r3, #0
 8006876:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800687a:	6102      	str	r2, [r0, #16]
 800687c:	bf08      	it	eq
 800687e:	6143      	streq	r3, [r0, #20]
 8006880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006884:	f8dc c000 	ldr.w	ip, [ip]
 8006888:	fa0c fc08 	lsl.w	ip, ip, r8
 800688c:	ea4c 0707 	orr.w	r7, ip, r7
 8006890:	f849 7b04 	str.w	r7, [r9], #4
 8006894:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006898:	40cf      	lsrs	r7, r1
 800689a:	e7d9      	b.n	8006850 <rshift+0x4c>
 800689c:	f851 cb04 	ldr.w	ip, [r1], #4
 80068a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80068a4:	e7c2      	b.n	800682c <rshift+0x28>
 80068a6:	4623      	mov	r3, r4
 80068a8:	e7e0      	b.n	800686c <rshift+0x68>

080068aa <__hexdig_fun>:
 80068aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d802      	bhi.n	80068b8 <__hexdig_fun+0xe>
 80068b2:	3820      	subs	r0, #32
 80068b4:	b2c0      	uxtb	r0, r0
 80068b6:	4770      	bx	lr
 80068b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80068bc:	2b05      	cmp	r3, #5
 80068be:	d801      	bhi.n	80068c4 <__hexdig_fun+0x1a>
 80068c0:	3847      	subs	r0, #71	; 0x47
 80068c2:	e7f7      	b.n	80068b4 <__hexdig_fun+0xa>
 80068c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	d801      	bhi.n	80068d0 <__hexdig_fun+0x26>
 80068cc:	3827      	subs	r0, #39	; 0x27
 80068ce:	e7f1      	b.n	80068b4 <__hexdig_fun+0xa>
 80068d0:	2000      	movs	r0, #0
 80068d2:	4770      	bx	lr

080068d4 <__gethex>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	b08b      	sub	sp, #44	; 0x2c
 80068da:	9306      	str	r3, [sp, #24]
 80068dc:	4bb9      	ldr	r3, [pc, #740]	; (8006bc4 <__gethex+0x2f0>)
 80068de:	9002      	str	r0, [sp, #8]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	468b      	mov	fp, r1
 80068e4:	4618      	mov	r0, r3
 80068e6:	4690      	mov	r8, r2
 80068e8:	9303      	str	r3, [sp, #12]
 80068ea:	f7f9 fc31 	bl	8000150 <strlen>
 80068ee:	4682      	mov	sl, r0
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	f8db 2000 	ldr.w	r2, [fp]
 80068f6:	4403      	add	r3, r0
 80068f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80068fc:	9307      	str	r3, [sp, #28]
 80068fe:	1c93      	adds	r3, r2, #2
 8006900:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006904:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006908:	32fe      	adds	r2, #254	; 0xfe
 800690a:	18d1      	adds	r1, r2, r3
 800690c:	461f      	mov	r7, r3
 800690e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006912:	9101      	str	r1, [sp, #4]
 8006914:	2830      	cmp	r0, #48	; 0x30
 8006916:	d0f8      	beq.n	800690a <__gethex+0x36>
 8006918:	f7ff ffc7 	bl	80068aa <__hexdig_fun>
 800691c:	4604      	mov	r4, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d13a      	bne.n	8006998 <__gethex+0xc4>
 8006922:	4652      	mov	r2, sl
 8006924:	4638      	mov	r0, r7
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	f001 f9ea 	bl	8007d00 <strncmp>
 800692c:	4605      	mov	r5, r0
 800692e:	2800      	cmp	r0, #0
 8006930:	d166      	bne.n	8006a00 <__gethex+0x12c>
 8006932:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006936:	eb07 060a 	add.w	r6, r7, sl
 800693a:	f7ff ffb6 	bl	80068aa <__hexdig_fun>
 800693e:	2800      	cmp	r0, #0
 8006940:	d060      	beq.n	8006a04 <__gethex+0x130>
 8006942:	4633      	mov	r3, r6
 8006944:	7818      	ldrb	r0, [r3, #0]
 8006946:	461f      	mov	r7, r3
 8006948:	2830      	cmp	r0, #48	; 0x30
 800694a:	f103 0301 	add.w	r3, r3, #1
 800694e:	d0f9      	beq.n	8006944 <__gethex+0x70>
 8006950:	f7ff ffab 	bl	80068aa <__hexdig_fun>
 8006954:	2301      	movs	r3, #1
 8006956:	fab0 f480 	clz	r4, r0
 800695a:	4635      	mov	r5, r6
 800695c:	0964      	lsrs	r4, r4, #5
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	463a      	mov	r2, r7
 8006962:	4616      	mov	r6, r2
 8006964:	7830      	ldrb	r0, [r6, #0]
 8006966:	3201      	adds	r2, #1
 8006968:	f7ff ff9f 	bl	80068aa <__hexdig_fun>
 800696c:	2800      	cmp	r0, #0
 800696e:	d1f8      	bne.n	8006962 <__gethex+0x8e>
 8006970:	4652      	mov	r2, sl
 8006972:	4630      	mov	r0, r6
 8006974:	9903      	ldr	r1, [sp, #12]
 8006976:	f001 f9c3 	bl	8007d00 <strncmp>
 800697a:	b980      	cbnz	r0, 800699e <__gethex+0xca>
 800697c:	b94d      	cbnz	r5, 8006992 <__gethex+0xbe>
 800697e:	eb06 050a 	add.w	r5, r6, sl
 8006982:	462a      	mov	r2, r5
 8006984:	4616      	mov	r6, r2
 8006986:	7830      	ldrb	r0, [r6, #0]
 8006988:	3201      	adds	r2, #1
 800698a:	f7ff ff8e 	bl	80068aa <__hexdig_fun>
 800698e:	2800      	cmp	r0, #0
 8006990:	d1f8      	bne.n	8006984 <__gethex+0xb0>
 8006992:	1bad      	subs	r5, r5, r6
 8006994:	00ad      	lsls	r5, r5, #2
 8006996:	e004      	b.n	80069a2 <__gethex+0xce>
 8006998:	2400      	movs	r4, #0
 800699a:	4625      	mov	r5, r4
 800699c:	e7e0      	b.n	8006960 <__gethex+0x8c>
 800699e:	2d00      	cmp	r5, #0
 80069a0:	d1f7      	bne.n	8006992 <__gethex+0xbe>
 80069a2:	7833      	ldrb	r3, [r6, #0]
 80069a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d139      	bne.n	8006a20 <__gethex+0x14c>
 80069ac:	7873      	ldrb	r3, [r6, #1]
 80069ae:	2b2b      	cmp	r3, #43	; 0x2b
 80069b0:	d02a      	beq.n	8006a08 <__gethex+0x134>
 80069b2:	2b2d      	cmp	r3, #45	; 0x2d
 80069b4:	d02c      	beq.n	8006a10 <__gethex+0x13c>
 80069b6:	f04f 0900 	mov.w	r9, #0
 80069ba:	1c71      	adds	r1, r6, #1
 80069bc:	7808      	ldrb	r0, [r1, #0]
 80069be:	f7ff ff74 	bl	80068aa <__hexdig_fun>
 80069c2:	1e43      	subs	r3, r0, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b18      	cmp	r3, #24
 80069c8:	d82a      	bhi.n	8006a20 <__gethex+0x14c>
 80069ca:	f1a0 0210 	sub.w	r2, r0, #16
 80069ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80069d2:	f7ff ff6a 	bl	80068aa <__hexdig_fun>
 80069d6:	1e43      	subs	r3, r0, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b18      	cmp	r3, #24
 80069dc:	d91b      	bls.n	8006a16 <__gethex+0x142>
 80069de:	f1b9 0f00 	cmp.w	r9, #0
 80069e2:	d000      	beq.n	80069e6 <__gethex+0x112>
 80069e4:	4252      	negs	r2, r2
 80069e6:	4415      	add	r5, r2
 80069e8:	f8cb 1000 	str.w	r1, [fp]
 80069ec:	b1d4      	cbz	r4, 8006a24 <__gethex+0x150>
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2700      	movne	r7, #0
 80069f6:	2706      	moveq	r7, #6
 80069f8:	4638      	mov	r0, r7
 80069fa:	b00b      	add	sp, #44	; 0x2c
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	463e      	mov	r6, r7
 8006a02:	4625      	mov	r5, r4
 8006a04:	2401      	movs	r4, #1
 8006a06:	e7cc      	b.n	80069a2 <__gethex+0xce>
 8006a08:	f04f 0900 	mov.w	r9, #0
 8006a0c:	1cb1      	adds	r1, r6, #2
 8006a0e:	e7d5      	b.n	80069bc <__gethex+0xe8>
 8006a10:	f04f 0901 	mov.w	r9, #1
 8006a14:	e7fa      	b.n	8006a0c <__gethex+0x138>
 8006a16:	230a      	movs	r3, #10
 8006a18:	fb03 0202 	mla	r2, r3, r2, r0
 8006a1c:	3a10      	subs	r2, #16
 8006a1e:	e7d6      	b.n	80069ce <__gethex+0xfa>
 8006a20:	4631      	mov	r1, r6
 8006a22:	e7e1      	b.n	80069e8 <__gethex+0x114>
 8006a24:	4621      	mov	r1, r4
 8006a26:	1bf3      	subs	r3, r6, r7
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	dc0a      	bgt.n	8006a44 <__gethex+0x170>
 8006a2e:	9802      	ldr	r0, [sp, #8]
 8006a30:	f000 fa88 	bl	8006f44 <_Balloc>
 8006a34:	4604      	mov	r4, r0
 8006a36:	b940      	cbnz	r0, 8006a4a <__gethex+0x176>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	21de      	movs	r1, #222	; 0xde
 8006a3c:	4b62      	ldr	r3, [pc, #392]	; (8006bc8 <__gethex+0x2f4>)
 8006a3e:	4863      	ldr	r0, [pc, #396]	; (8006bcc <__gethex+0x2f8>)
 8006a40:	f001 f97e 	bl	8007d40 <__assert_func>
 8006a44:	3101      	adds	r1, #1
 8006a46:	105b      	asrs	r3, r3, #1
 8006a48:	e7ef      	b.n	8006a2a <__gethex+0x156>
 8006a4a:	f04f 0b00 	mov.w	fp, #0
 8006a4e:	f100 0914 	add.w	r9, r0, #20
 8006a52:	f1ca 0301 	rsb	r3, sl, #1
 8006a56:	f8cd 9010 	str.w	r9, [sp, #16]
 8006a5a:	f8cd b004 	str.w	fp, [sp, #4]
 8006a5e:	9308      	str	r3, [sp, #32]
 8006a60:	42b7      	cmp	r7, r6
 8006a62:	d33f      	bcc.n	8006ae4 <__gethex+0x210>
 8006a64:	9f04      	ldr	r7, [sp, #16]
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	f847 3b04 	str.w	r3, [r7], #4
 8006a6c:	eba7 0709 	sub.w	r7, r7, r9
 8006a70:	10bf      	asrs	r7, r7, #2
 8006a72:	6127      	str	r7, [r4, #16]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fb5b 	bl	8007130 <__hi0bits>
 8006a7a:	017f      	lsls	r7, r7, #5
 8006a7c:	f8d8 6000 	ldr.w	r6, [r8]
 8006a80:	1a3f      	subs	r7, r7, r0
 8006a82:	42b7      	cmp	r7, r6
 8006a84:	dd62      	ble.n	8006b4c <__gethex+0x278>
 8006a86:	1bbf      	subs	r7, r7, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fef1 	bl	8007872 <__any_on>
 8006a90:	4682      	mov	sl, r0
 8006a92:	b1a8      	cbz	r0, 8006ac0 <__gethex+0x1ec>
 8006a94:	f04f 0a01 	mov.w	sl, #1
 8006a98:	1e7b      	subs	r3, r7, #1
 8006a9a:	1159      	asrs	r1, r3, #5
 8006a9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006aa0:	f003 021f 	and.w	r2, r3, #31
 8006aa4:	fa0a f202 	lsl.w	r2, sl, r2
 8006aa8:	420a      	tst	r2, r1
 8006aaa:	d009      	beq.n	8006ac0 <__gethex+0x1ec>
 8006aac:	4553      	cmp	r3, sl
 8006aae:	dd05      	ble.n	8006abc <__gethex+0x1e8>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	1eb9      	subs	r1, r7, #2
 8006ab4:	f000 fedd 	bl	8007872 <__any_on>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d144      	bne.n	8006b46 <__gethex+0x272>
 8006abc:	f04f 0a02 	mov.w	sl, #2
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff fe9e 	bl	8006804 <rshift>
 8006ac8:	443d      	add	r5, r7
 8006aca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	da4a      	bge.n	8006b68 <__gethex+0x294>
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	9802      	ldr	r0, [sp, #8]
 8006ad6:	f000 fa75 	bl	8006fc4 <_Bfree>
 8006ada:	2300      	movs	r3, #0
 8006adc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ade:	27a3      	movs	r7, #163	; 0xa3
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e789      	b.n	80069f8 <__gethex+0x124>
 8006ae4:	1e73      	subs	r3, r6, #1
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d019      	beq.n	8006b26 <__gethex+0x252>
 8006af2:	f1bb 0f20 	cmp.w	fp, #32
 8006af6:	d107      	bne.n	8006b08 <__gethex+0x234>
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	9a01      	ldr	r2, [sp, #4]
 8006afc:	f843 2b04 	str.w	r2, [r3], #4
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	469b      	mov	fp, r3
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b0c:	f7ff fecd 	bl	80068aa <__hexdig_fun>
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	f000 000f 	and.w	r0, r0, #15
 8006b16:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b1a:	4303      	orrs	r3, r0
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f10b 0b04 	add.w	fp, fp, #4
 8006b22:	9b05      	ldr	r3, [sp, #20]
 8006b24:	e00d      	b.n	8006b42 <__gethex+0x26e>
 8006b26:	9b05      	ldr	r3, [sp, #20]
 8006b28:	9a08      	ldr	r2, [sp, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	42bb      	cmp	r3, r7
 8006b2e:	d3e0      	bcc.n	8006af2 <__gethex+0x21e>
 8006b30:	4618      	mov	r0, r3
 8006b32:	4652      	mov	r2, sl
 8006b34:	9903      	ldr	r1, [sp, #12]
 8006b36:	9309      	str	r3, [sp, #36]	; 0x24
 8006b38:	f001 f8e2 	bl	8007d00 <strncmp>
 8006b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d1d7      	bne.n	8006af2 <__gethex+0x21e>
 8006b42:	461e      	mov	r6, r3
 8006b44:	e78c      	b.n	8006a60 <__gethex+0x18c>
 8006b46:	f04f 0a03 	mov.w	sl, #3
 8006b4a:	e7b9      	b.n	8006ac0 <__gethex+0x1ec>
 8006b4c:	da09      	bge.n	8006b62 <__gethex+0x28e>
 8006b4e:	1bf7      	subs	r7, r6, r7
 8006b50:	4621      	mov	r1, r4
 8006b52:	463a      	mov	r2, r7
 8006b54:	9802      	ldr	r0, [sp, #8]
 8006b56:	f000 fc4d 	bl	80073f4 <__lshift>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	1bed      	subs	r5, r5, r7
 8006b5e:	f100 0914 	add.w	r9, r0, #20
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	e7b0      	b.n	8006aca <__gethex+0x1f6>
 8006b68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006b6c:	42a8      	cmp	r0, r5
 8006b6e:	dd71      	ble.n	8006c54 <__gethex+0x380>
 8006b70:	1b45      	subs	r5, r0, r5
 8006b72:	42ae      	cmp	r6, r5
 8006b74:	dc34      	bgt.n	8006be0 <__gethex+0x30c>
 8006b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d028      	beq.n	8006bd0 <__gethex+0x2fc>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d02a      	beq.n	8006bd8 <__gethex+0x304>
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d115      	bne.n	8006bb2 <__gethex+0x2de>
 8006b86:	42ae      	cmp	r6, r5
 8006b88:	d113      	bne.n	8006bb2 <__gethex+0x2de>
 8006b8a:	2e01      	cmp	r6, #1
 8006b8c:	d10b      	bne.n	8006ba6 <__gethex+0x2d2>
 8006b8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	2762      	movs	r7, #98	; 0x62
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	f8c9 3000 	str.w	r3, [r9]
 8006ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ba2:	601c      	str	r4, [r3, #0]
 8006ba4:	e728      	b.n	80069f8 <__gethex+0x124>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	1e71      	subs	r1, r6, #1
 8006baa:	f000 fe62 	bl	8007872 <__any_on>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d1ed      	bne.n	8006b8e <__gethex+0x2ba>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	9802      	ldr	r0, [sp, #8]
 8006bb6:	f000 fa05 	bl	8006fc4 <_Bfree>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bbe:	2750      	movs	r7, #80	; 0x50
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e719      	b.n	80069f8 <__gethex+0x124>
 8006bc4:	08008bf8 	.word	0x08008bf8
 8006bc8:	08008b7c 	.word	0x08008b7c
 8006bcc:	08008b8d 	.word	0x08008b8d
 8006bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ed      	bne.n	8006bb2 <__gethex+0x2de>
 8006bd6:	e7da      	b.n	8006b8e <__gethex+0x2ba>
 8006bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d7      	bne.n	8006b8e <__gethex+0x2ba>
 8006bde:	e7e8      	b.n	8006bb2 <__gethex+0x2de>
 8006be0:	1e6f      	subs	r7, r5, #1
 8006be2:	f1ba 0f00 	cmp.w	sl, #0
 8006be6:	d132      	bne.n	8006c4e <__gethex+0x37a>
 8006be8:	b127      	cbz	r7, 8006bf4 <__gethex+0x320>
 8006bea:	4639      	mov	r1, r7
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 fe40 	bl	8007872 <__any_on>
 8006bf2:	4682      	mov	sl, r0
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	117b      	asrs	r3, r7, #5
 8006bf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006bfc:	f007 071f 	and.w	r7, r7, #31
 8006c00:	fa01 f707 	lsl.w	r7, r1, r7
 8006c04:	421f      	tst	r7, r3
 8006c06:	f04f 0702 	mov.w	r7, #2
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	bf18      	it	ne
 8006c10:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c14:	1b76      	subs	r6, r6, r5
 8006c16:	f7ff fdf5 	bl	8006804 <rshift>
 8006c1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c1e:	f1ba 0f00 	cmp.w	sl, #0
 8006c22:	d048      	beq.n	8006cb6 <__gethex+0x3e2>
 8006c24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d015      	beq.n	8006c58 <__gethex+0x384>
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d017      	beq.n	8006c60 <__gethex+0x38c>
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d109      	bne.n	8006c48 <__gethex+0x374>
 8006c34:	f01a 0f02 	tst.w	sl, #2
 8006c38:	d006      	beq.n	8006c48 <__gethex+0x374>
 8006c3a:	f8d9 0000 	ldr.w	r0, [r9]
 8006c3e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c42:	f01a 0f01 	tst.w	sl, #1
 8006c46:	d10e      	bne.n	8006c66 <__gethex+0x392>
 8006c48:	f047 0710 	orr.w	r7, r7, #16
 8006c4c:	e033      	b.n	8006cb6 <__gethex+0x3e2>
 8006c4e:	f04f 0a01 	mov.w	sl, #1
 8006c52:	e7cf      	b.n	8006bf4 <__gethex+0x320>
 8006c54:	2701      	movs	r7, #1
 8006c56:	e7e2      	b.n	8006c1e <__gethex+0x34a>
 8006c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5a:	f1c3 0301 	rsb	r3, r3, #1
 8006c5e:	9315      	str	r3, [sp, #84]	; 0x54
 8006c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <__gethex+0x374>
 8006c66:	f04f 0c00 	mov.w	ip, #0
 8006c6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006c6e:	f104 0314 	add.w	r3, r4, #20
 8006c72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006c76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006c84:	d01c      	beq.n	8006cc0 <__gethex+0x3ec>
 8006c86:	3201      	adds	r2, #1
 8006c88:	6002      	str	r2, [r0, #0]
 8006c8a:	2f02      	cmp	r7, #2
 8006c8c:	f104 0314 	add.w	r3, r4, #20
 8006c90:	d13d      	bne.n	8006d0e <__gethex+0x43a>
 8006c92:	f8d8 2000 	ldr.w	r2, [r8]
 8006c96:	3a01      	subs	r2, #1
 8006c98:	42b2      	cmp	r2, r6
 8006c9a:	d10a      	bne.n	8006cb2 <__gethex+0x3de>
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	1171      	asrs	r1, r6, #5
 8006ca0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ca4:	f006 061f 	and.w	r6, r6, #31
 8006ca8:	fa02 f606 	lsl.w	r6, r2, r6
 8006cac:	421e      	tst	r6, r3
 8006cae:	bf18      	it	ne
 8006cb0:	4617      	movne	r7, r2
 8006cb2:	f047 0720 	orr.w	r7, r7, #32
 8006cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cb8:	601c      	str	r4, [r3, #0]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	601d      	str	r5, [r3, #0]
 8006cbe:	e69b      	b.n	80069f8 <__gethex+0x124>
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	f843 cc04 	str.w	ip, [r3, #-4]
 8006cc6:	d8d8      	bhi.n	8006c7a <__gethex+0x3a6>
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	459b      	cmp	fp, r3
 8006ccc:	db17      	blt.n	8006cfe <__gethex+0x42a>
 8006cce:	6861      	ldr	r1, [r4, #4]
 8006cd0:	9802      	ldr	r0, [sp, #8]
 8006cd2:	3101      	adds	r1, #1
 8006cd4:	f000 f936 	bl	8006f44 <_Balloc>
 8006cd8:	4681      	mov	r9, r0
 8006cda:	b918      	cbnz	r0, 8006ce4 <__gethex+0x410>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	2184      	movs	r1, #132	; 0x84
 8006ce0:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <__gethex+0x474>)
 8006ce2:	e6ac      	b.n	8006a3e <__gethex+0x16a>
 8006ce4:	6922      	ldr	r2, [r4, #16]
 8006ce6:	f104 010c 	add.w	r1, r4, #12
 8006cea:	3202      	adds	r2, #2
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	300c      	adds	r0, #12
 8006cf0:	f000 f91a 	bl	8006f28 <memcpy>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	9802      	ldr	r0, [sp, #8]
 8006cf8:	f000 f964 	bl	8006fc4 <_Bfree>
 8006cfc:	464c      	mov	r4, r9
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	6122      	str	r2, [r4, #16]
 8006d04:	2201      	movs	r2, #1
 8006d06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d0a:	615a      	str	r2, [r3, #20]
 8006d0c:	e7bd      	b.n	8006c8a <__gethex+0x3b6>
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	455a      	cmp	r2, fp
 8006d12:	dd0b      	ble.n	8006d2c <__gethex+0x458>
 8006d14:	2101      	movs	r1, #1
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff fd74 	bl	8006804 <rshift>
 8006d1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d20:	3501      	adds	r5, #1
 8006d22:	42ab      	cmp	r3, r5
 8006d24:	f6ff aed5 	blt.w	8006ad2 <__gethex+0x1fe>
 8006d28:	2701      	movs	r7, #1
 8006d2a:	e7c2      	b.n	8006cb2 <__gethex+0x3de>
 8006d2c:	f016 061f 	ands.w	r6, r6, #31
 8006d30:	d0fa      	beq.n	8006d28 <__gethex+0x454>
 8006d32:	449a      	add	sl, r3
 8006d34:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006d38:	f000 f9fa 	bl	8007130 <__hi0bits>
 8006d3c:	f1c6 0620 	rsb	r6, r6, #32
 8006d40:	42b0      	cmp	r0, r6
 8006d42:	dbe7      	blt.n	8006d14 <__gethex+0x440>
 8006d44:	e7f0      	b.n	8006d28 <__gethex+0x454>
 8006d46:	bf00      	nop
 8006d48:	08008b7c 	.word	0x08008b7c

08006d4c <L_shift>:
 8006d4c:	f1c2 0208 	rsb	r2, r2, #8
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	f1c2 0620 	rsb	r6, r2, #32
 8006d58:	6843      	ldr	r3, [r0, #4]
 8006d5a:	6804      	ldr	r4, [r0, #0]
 8006d5c:	fa03 f506 	lsl.w	r5, r3, r6
 8006d60:	432c      	orrs	r4, r5
 8006d62:	40d3      	lsrs	r3, r2
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	f840 3f04 	str.w	r3, [r0, #4]!
 8006d6a:	4288      	cmp	r0, r1
 8006d6c:	d3f4      	bcc.n	8006d58 <L_shift+0xc>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}

08006d70 <__match>:
 8006d70:	b530      	push	{r4, r5, lr}
 8006d72:	6803      	ldr	r3, [r0, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	b914      	cbnz	r4, 8006d82 <__match+0x12>
 8006d7c:	6003      	str	r3, [r0, #0]
 8006d7e:	2001      	movs	r0, #1
 8006d80:	bd30      	pop	{r4, r5, pc}
 8006d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006d8a:	2d19      	cmp	r5, #25
 8006d8c:	bf98      	it	ls
 8006d8e:	3220      	addls	r2, #32
 8006d90:	42a2      	cmp	r2, r4
 8006d92:	d0f0      	beq.n	8006d76 <__match+0x6>
 8006d94:	2000      	movs	r0, #0
 8006d96:	e7f3      	b.n	8006d80 <__match+0x10>

08006d98 <__hexnan>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	680b      	ldr	r3, [r1, #0]
 8006da0:	4682      	mov	sl, r0
 8006da2:	115e      	asrs	r6, r3, #5
 8006da4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006da8:	f013 031f 	ands.w	r3, r3, #31
 8006dac:	bf18      	it	ne
 8006dae:	3604      	addne	r6, #4
 8006db0:	1f37      	subs	r7, r6, #4
 8006db2:	4690      	mov	r8, r2
 8006db4:	46b9      	mov	r9, r7
 8006db6:	463c      	mov	r4, r7
 8006db8:	46ab      	mov	fp, r5
 8006dba:	b087      	sub	sp, #28
 8006dbc:	6801      	ldr	r1, [r0, #0]
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	f846 5c04 	str.w	r5, [r6, #-4]
 8006dc4:	9502      	str	r5, [sp, #8]
 8006dc6:	784a      	ldrb	r2, [r1, #1]
 8006dc8:	1c4b      	adds	r3, r1, #1
 8006dca:	9303      	str	r3, [sp, #12]
 8006dcc:	b342      	cbz	r2, 8006e20 <__hexnan+0x88>
 8006dce:	4610      	mov	r0, r2
 8006dd0:	9105      	str	r1, [sp, #20]
 8006dd2:	9204      	str	r2, [sp, #16]
 8006dd4:	f7ff fd69 	bl	80068aa <__hexdig_fun>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d14f      	bne.n	8006e7c <__hexnan+0xe4>
 8006ddc:	9a04      	ldr	r2, [sp, #16]
 8006dde:	9905      	ldr	r1, [sp, #20]
 8006de0:	2a20      	cmp	r2, #32
 8006de2:	d818      	bhi.n	8006e16 <__hexnan+0x7e>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	459b      	cmp	fp, r3
 8006de8:	dd13      	ble.n	8006e12 <__hexnan+0x7a>
 8006dea:	454c      	cmp	r4, r9
 8006dec:	d206      	bcs.n	8006dfc <__hexnan+0x64>
 8006dee:	2d07      	cmp	r5, #7
 8006df0:	dc04      	bgt.n	8006dfc <__hexnan+0x64>
 8006df2:	462a      	mov	r2, r5
 8006df4:	4649      	mov	r1, r9
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff ffa8 	bl	8006d4c <L_shift>
 8006dfc:	4544      	cmp	r4, r8
 8006dfe:	d950      	bls.n	8006ea2 <__hexnan+0x10a>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f1a4 0904 	sub.w	r9, r4, #4
 8006e06:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	464c      	mov	r4, r9
 8006e0e:	f8cd b008 	str.w	fp, [sp, #8]
 8006e12:	9903      	ldr	r1, [sp, #12]
 8006e14:	e7d7      	b.n	8006dc6 <__hexnan+0x2e>
 8006e16:	2a29      	cmp	r2, #41	; 0x29
 8006e18:	d156      	bne.n	8006ec8 <__hexnan+0x130>
 8006e1a:	3102      	adds	r1, #2
 8006e1c:	f8ca 1000 	str.w	r1, [sl]
 8006e20:	f1bb 0f00 	cmp.w	fp, #0
 8006e24:	d050      	beq.n	8006ec8 <__hexnan+0x130>
 8006e26:	454c      	cmp	r4, r9
 8006e28:	d206      	bcs.n	8006e38 <__hexnan+0xa0>
 8006e2a:	2d07      	cmp	r5, #7
 8006e2c:	dc04      	bgt.n	8006e38 <__hexnan+0xa0>
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4649      	mov	r1, r9
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff ff8a 	bl	8006d4c <L_shift>
 8006e38:	4544      	cmp	r4, r8
 8006e3a:	d934      	bls.n	8006ea6 <__hexnan+0x10e>
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	f1a8 0204 	sub.w	r2, r8, #4
 8006e42:	f853 1b04 	ldr.w	r1, [r3], #4
 8006e46:	429f      	cmp	r7, r3
 8006e48:	f842 1f04 	str.w	r1, [r2, #4]!
 8006e4c:	d2f9      	bcs.n	8006e42 <__hexnan+0xaa>
 8006e4e:	1b3b      	subs	r3, r7, r4
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	3304      	adds	r3, #4
 8006e56:	3401      	adds	r4, #1
 8006e58:	3e03      	subs	r6, #3
 8006e5a:	42b4      	cmp	r4, r6
 8006e5c:	bf88      	it	hi
 8006e5e:	2304      	movhi	r3, #4
 8006e60:	2200      	movs	r2, #0
 8006e62:	4443      	add	r3, r8
 8006e64:	f843 2b04 	str.w	r2, [r3], #4
 8006e68:	429f      	cmp	r7, r3
 8006e6a:	d2fb      	bcs.n	8006e64 <__hexnan+0xcc>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	b91b      	cbnz	r3, 8006e78 <__hexnan+0xe0>
 8006e70:	4547      	cmp	r7, r8
 8006e72:	d127      	bne.n	8006ec4 <__hexnan+0x12c>
 8006e74:	2301      	movs	r3, #1
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	2005      	movs	r0, #5
 8006e7a:	e026      	b.n	8006eca <__hexnan+0x132>
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	2d08      	cmp	r5, #8
 8006e80:	f10b 0b01 	add.w	fp, fp, #1
 8006e84:	dd06      	ble.n	8006e94 <__hexnan+0xfc>
 8006e86:	4544      	cmp	r4, r8
 8006e88:	d9c3      	bls.n	8006e12 <__hexnan+0x7a>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2501      	movs	r5, #1
 8006e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e92:	3c04      	subs	r4, #4
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	f000 000f 	and.w	r0, r0, #15
 8006e9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006e9e:	6022      	str	r2, [r4, #0]
 8006ea0:	e7b7      	b.n	8006e12 <__hexnan+0x7a>
 8006ea2:	2508      	movs	r5, #8
 8006ea4:	e7b5      	b.n	8006e12 <__hexnan+0x7a>
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0df      	beq.n	8006e6c <__hexnan+0xd4>
 8006eac:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb0:	f1c3 0320 	rsb	r3, r3, #32
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ebc:	401a      	ands	r2, r3
 8006ebe:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ec2:	e7d3      	b.n	8006e6c <__hexnan+0xd4>
 8006ec4:	3f04      	subs	r7, #4
 8006ec6:	e7d1      	b.n	8006e6c <__hexnan+0xd4>
 8006ec8:	2004      	movs	r0, #4
 8006eca:	b007      	add	sp, #28
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ed0 <_localeconv_r>:
 8006ed0:	4800      	ldr	r0, [pc, #0]	; (8006ed4 <_localeconv_r+0x4>)
 8006ed2:	4770      	bx	lr
 8006ed4:	20000164 	.word	0x20000164

08006ed8 <malloc>:
 8006ed8:	4b02      	ldr	r3, [pc, #8]	; (8006ee4 <malloc+0xc>)
 8006eda:	4601      	mov	r1, r0
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	f000 bd43 	b.w	8007968 <_malloc_r>
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <__ascii_mbtowc>:
 8006ee8:	b082      	sub	sp, #8
 8006eea:	b901      	cbnz	r1, 8006eee <__ascii_mbtowc+0x6>
 8006eec:	a901      	add	r1, sp, #4
 8006eee:	b142      	cbz	r2, 8006f02 <__ascii_mbtowc+0x1a>
 8006ef0:	b14b      	cbz	r3, 8006f06 <__ascii_mbtowc+0x1e>
 8006ef2:	7813      	ldrb	r3, [r2, #0]
 8006ef4:	600b      	str	r3, [r1, #0]
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	1e10      	subs	r0, r2, #0
 8006efa:	bf18      	it	ne
 8006efc:	2001      	movne	r0, #1
 8006efe:	b002      	add	sp, #8
 8006f00:	4770      	bx	lr
 8006f02:	4610      	mov	r0, r2
 8006f04:	e7fb      	b.n	8006efe <__ascii_mbtowc+0x16>
 8006f06:	f06f 0001 	mvn.w	r0, #1
 8006f0a:	e7f8      	b.n	8006efe <__ascii_mbtowc+0x16>

08006f0c <memchr>:
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	b2c9      	uxtb	r1, r1
 8006f12:	4402      	add	r2, r0
 8006f14:	4293      	cmp	r3, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	d101      	bne.n	8006f1e <memchr+0x12>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e003      	b.n	8006f26 <memchr+0x1a>
 8006f1e:	7804      	ldrb	r4, [r0, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	428c      	cmp	r4, r1
 8006f24:	d1f6      	bne.n	8006f14 <memchr+0x8>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <memcpy>:
 8006f28:	440a      	add	r2, r1
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f30:	d100      	bne.n	8006f34 <memcpy+0xc>
 8006f32:	4770      	bx	lr
 8006f34:	b510      	push	{r4, lr}
 8006f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f40:	d1f9      	bne.n	8006f36 <memcpy+0xe>
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <_Balloc>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	b976      	cbnz	r6, 8006f6c <_Balloc+0x28>
 8006f4e:	2010      	movs	r0, #16
 8006f50:	f7ff ffc2 	bl	8006ed8 <malloc>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6260      	str	r0, [r4, #36]	; 0x24
 8006f58:	b920      	cbnz	r0, 8006f64 <_Balloc+0x20>
 8006f5a:	2166      	movs	r1, #102	; 0x66
 8006f5c:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <_Balloc+0x78>)
 8006f5e:	4818      	ldr	r0, [pc, #96]	; (8006fc0 <_Balloc+0x7c>)
 8006f60:	f000 feee 	bl	8007d40 <__assert_func>
 8006f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f68:	6006      	str	r6, [r0, #0]
 8006f6a:	60c6      	str	r6, [r0, #12]
 8006f6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f6e:	68f3      	ldr	r3, [r6, #12]
 8006f70:	b183      	cbz	r3, 8006f94 <_Balloc+0x50>
 8006f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f7a:	b9b8      	cbnz	r0, 8006fac <_Balloc+0x68>
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f82:	1d72      	adds	r2, r6, #5
 8006f84:	4620      	mov	r0, r4
 8006f86:	0092      	lsls	r2, r2, #2
 8006f88:	f000 fc94 	bl	80078b4 <_calloc_r>
 8006f8c:	b160      	cbz	r0, 8006fa8 <_Balloc+0x64>
 8006f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f92:	e00e      	b.n	8006fb2 <_Balloc+0x6e>
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	2104      	movs	r1, #4
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fc8b 	bl	80078b4 <_calloc_r>
 8006f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa0:	60f0      	str	r0, [r6, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e4      	bne.n	8006f72 <_Balloc+0x2e>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	6802      	ldr	r2, [r0, #0]
 8006fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fb8:	e7f7      	b.n	8006faa <_Balloc+0x66>
 8006fba:	bf00      	nop
 8006fbc:	08008b06 	.word	0x08008b06
 8006fc0:	08008c0c 	.word	0x08008c0c

08006fc4 <_Bfree>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b976      	cbnz	r6, 8006fec <_Bfree+0x28>
 8006fce:	2010      	movs	r0, #16
 8006fd0:	f7ff ff82 	bl	8006ed8 <malloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6268      	str	r0, [r5, #36]	; 0x24
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_Bfree+0x20>
 8006fda:	218a      	movs	r1, #138	; 0x8a
 8006fdc:	4b08      	ldr	r3, [pc, #32]	; (8007000 <_Bfree+0x3c>)
 8006fde:	4809      	ldr	r0, [pc, #36]	; (8007004 <_Bfree+0x40>)
 8006fe0:	f000 feae 	bl	8007d40 <__assert_func>
 8006fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe8:	6006      	str	r6, [r0, #0]
 8006fea:	60c6      	str	r6, [r0, #12]
 8006fec:	b13c      	cbz	r4, 8006ffe <_Bfree+0x3a>
 8006fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ff0:	6862      	ldr	r2, [r4, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ff8:	6021      	str	r1, [r4, #0]
 8006ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	08008b06 	.word	0x08008b06
 8007004:	08008c0c 	.word	0x08008c0c

08007008 <__multadd>:
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	4698      	mov	r8, r3
 800700e:	460c      	mov	r4, r1
 8007010:	2300      	movs	r3, #0
 8007012:	690e      	ldr	r6, [r1, #16]
 8007014:	4607      	mov	r7, r0
 8007016:	f101 0014 	add.w	r0, r1, #20
 800701a:	6805      	ldr	r5, [r0, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	b2a9      	uxth	r1, r5
 8007020:	fb02 8101 	mla	r1, r2, r1, r8
 8007024:	0c2d      	lsrs	r5, r5, #16
 8007026:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800702a:	fb02 c505 	mla	r5, r2, r5, ip
 800702e:	b289      	uxth	r1, r1
 8007030:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007034:	429e      	cmp	r6, r3
 8007036:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800703a:	f840 1b04 	str.w	r1, [r0], #4
 800703e:	dcec      	bgt.n	800701a <__multadd+0x12>
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d022      	beq.n	800708c <__multadd+0x84>
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	42b3      	cmp	r3, r6
 800704a:	dc19      	bgt.n	8007080 <__multadd+0x78>
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4638      	mov	r0, r7
 8007050:	3101      	adds	r1, #1
 8007052:	f7ff ff77 	bl	8006f44 <_Balloc>
 8007056:	4605      	mov	r5, r0
 8007058:	b928      	cbnz	r0, 8007066 <__multadd+0x5e>
 800705a:	4602      	mov	r2, r0
 800705c:	21b5      	movs	r1, #181	; 0xb5
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <__multadd+0x8c>)
 8007060:	480d      	ldr	r0, [pc, #52]	; (8007098 <__multadd+0x90>)
 8007062:	f000 fe6d 	bl	8007d40 <__assert_func>
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	f104 010c 	add.w	r1, r4, #12
 800706c:	3202      	adds	r2, #2
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	300c      	adds	r0, #12
 8007072:	f7ff ff59 	bl	8006f28 <memcpy>
 8007076:	4621      	mov	r1, r4
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ffa3 	bl	8006fc4 <_Bfree>
 800707e:	462c      	mov	r4, r5
 8007080:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007084:	3601      	adds	r6, #1
 8007086:	f8c3 8014 	str.w	r8, [r3, #20]
 800708a:	6126      	str	r6, [r4, #16]
 800708c:	4620      	mov	r0, r4
 800708e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007092:	bf00      	nop
 8007094:	08008b7c 	.word	0x08008b7c
 8007098:	08008c0c 	.word	0x08008c0c

0800709c <__s2b>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4615      	mov	r5, r2
 80070a2:	2209      	movs	r2, #9
 80070a4:	461f      	mov	r7, r3
 80070a6:	3308      	adds	r3, #8
 80070a8:	460c      	mov	r4, r1
 80070aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ae:	4606      	mov	r6, r0
 80070b0:	2201      	movs	r2, #1
 80070b2:	2100      	movs	r1, #0
 80070b4:	429a      	cmp	r2, r3
 80070b6:	db09      	blt.n	80070cc <__s2b+0x30>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ff43 	bl	8006f44 <_Balloc>
 80070be:	b940      	cbnz	r0, 80070d2 <__s2b+0x36>
 80070c0:	4602      	mov	r2, r0
 80070c2:	21ce      	movs	r1, #206	; 0xce
 80070c4:	4b18      	ldr	r3, [pc, #96]	; (8007128 <__s2b+0x8c>)
 80070c6:	4819      	ldr	r0, [pc, #100]	; (800712c <__s2b+0x90>)
 80070c8:	f000 fe3a 	bl	8007d40 <__assert_func>
 80070cc:	0052      	lsls	r2, r2, #1
 80070ce:	3101      	adds	r1, #1
 80070d0:	e7f0      	b.n	80070b4 <__s2b+0x18>
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	2d09      	cmp	r5, #9
 80070d6:	6143      	str	r3, [r0, #20]
 80070d8:	f04f 0301 	mov.w	r3, #1
 80070dc:	6103      	str	r3, [r0, #16]
 80070de:	dd16      	ble.n	800710e <__s2b+0x72>
 80070e0:	f104 0909 	add.w	r9, r4, #9
 80070e4:	46c8      	mov	r8, r9
 80070e6:	442c      	add	r4, r5
 80070e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070ec:	4601      	mov	r1, r0
 80070ee:	220a      	movs	r2, #10
 80070f0:	4630      	mov	r0, r6
 80070f2:	3b30      	subs	r3, #48	; 0x30
 80070f4:	f7ff ff88 	bl	8007008 <__multadd>
 80070f8:	45a0      	cmp	r8, r4
 80070fa:	d1f5      	bne.n	80070e8 <__s2b+0x4c>
 80070fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007100:	444c      	add	r4, r9
 8007102:	1b2d      	subs	r5, r5, r4
 8007104:	1963      	adds	r3, r4, r5
 8007106:	42bb      	cmp	r3, r7
 8007108:	db04      	blt.n	8007114 <__s2b+0x78>
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	2509      	movs	r5, #9
 8007110:	340a      	adds	r4, #10
 8007112:	e7f6      	b.n	8007102 <__s2b+0x66>
 8007114:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007118:	4601      	mov	r1, r0
 800711a:	220a      	movs	r2, #10
 800711c:	4630      	mov	r0, r6
 800711e:	3b30      	subs	r3, #48	; 0x30
 8007120:	f7ff ff72 	bl	8007008 <__multadd>
 8007124:	e7ee      	b.n	8007104 <__s2b+0x68>
 8007126:	bf00      	nop
 8007128:	08008b7c 	.word	0x08008b7c
 800712c:	08008c0c 	.word	0x08008c0c

08007130 <__hi0bits>:
 8007130:	0c02      	lsrs	r2, r0, #16
 8007132:	0412      	lsls	r2, r2, #16
 8007134:	4603      	mov	r3, r0
 8007136:	b9ca      	cbnz	r2, 800716c <__hi0bits+0x3c>
 8007138:	0403      	lsls	r3, r0, #16
 800713a:	2010      	movs	r0, #16
 800713c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007140:	bf04      	itt	eq
 8007142:	021b      	lsleq	r3, r3, #8
 8007144:	3008      	addeq	r0, #8
 8007146:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800714a:	bf04      	itt	eq
 800714c:	011b      	lsleq	r3, r3, #4
 800714e:	3004      	addeq	r0, #4
 8007150:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007154:	bf04      	itt	eq
 8007156:	009b      	lsleq	r3, r3, #2
 8007158:	3002      	addeq	r0, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	db05      	blt.n	800716a <__hi0bits+0x3a>
 800715e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007162:	f100 0001 	add.w	r0, r0, #1
 8007166:	bf08      	it	eq
 8007168:	2020      	moveq	r0, #32
 800716a:	4770      	bx	lr
 800716c:	2000      	movs	r0, #0
 800716e:	e7e5      	b.n	800713c <__hi0bits+0xc>

08007170 <__lo0bits>:
 8007170:	6803      	ldr	r3, [r0, #0]
 8007172:	4602      	mov	r2, r0
 8007174:	f013 0007 	ands.w	r0, r3, #7
 8007178:	d00b      	beq.n	8007192 <__lo0bits+0x22>
 800717a:	07d9      	lsls	r1, r3, #31
 800717c:	d422      	bmi.n	80071c4 <__lo0bits+0x54>
 800717e:	0798      	lsls	r0, r3, #30
 8007180:	bf49      	itett	mi
 8007182:	085b      	lsrmi	r3, r3, #1
 8007184:	089b      	lsrpl	r3, r3, #2
 8007186:	2001      	movmi	r0, #1
 8007188:	6013      	strmi	r3, [r2, #0]
 800718a:	bf5c      	itt	pl
 800718c:	2002      	movpl	r0, #2
 800718e:	6013      	strpl	r3, [r2, #0]
 8007190:	4770      	bx	lr
 8007192:	b299      	uxth	r1, r3
 8007194:	b909      	cbnz	r1, 800719a <__lo0bits+0x2a>
 8007196:	2010      	movs	r0, #16
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800719e:	bf04      	itt	eq
 80071a0:	0a1b      	lsreq	r3, r3, #8
 80071a2:	3008      	addeq	r0, #8
 80071a4:	0719      	lsls	r1, r3, #28
 80071a6:	bf04      	itt	eq
 80071a8:	091b      	lsreq	r3, r3, #4
 80071aa:	3004      	addeq	r0, #4
 80071ac:	0799      	lsls	r1, r3, #30
 80071ae:	bf04      	itt	eq
 80071b0:	089b      	lsreq	r3, r3, #2
 80071b2:	3002      	addeq	r0, #2
 80071b4:	07d9      	lsls	r1, r3, #31
 80071b6:	d403      	bmi.n	80071c0 <__lo0bits+0x50>
 80071b8:	085b      	lsrs	r3, r3, #1
 80071ba:	f100 0001 	add.w	r0, r0, #1
 80071be:	d003      	beq.n	80071c8 <__lo0bits+0x58>
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	4770      	bx	lr
 80071c4:	2000      	movs	r0, #0
 80071c6:	4770      	bx	lr
 80071c8:	2020      	movs	r0, #32
 80071ca:	4770      	bx	lr

080071cc <__i2b>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	460c      	mov	r4, r1
 80071d0:	2101      	movs	r1, #1
 80071d2:	f7ff feb7 	bl	8006f44 <_Balloc>
 80071d6:	4602      	mov	r2, r0
 80071d8:	b928      	cbnz	r0, 80071e6 <__i2b+0x1a>
 80071da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071de:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <__i2b+0x24>)
 80071e0:	4804      	ldr	r0, [pc, #16]	; (80071f4 <__i2b+0x28>)
 80071e2:	f000 fdad 	bl	8007d40 <__assert_func>
 80071e6:	2301      	movs	r3, #1
 80071e8:	6144      	str	r4, [r0, #20]
 80071ea:	6103      	str	r3, [r0, #16]
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	08008b7c 	.word	0x08008b7c
 80071f4:	08008c0c 	.word	0x08008c0c

080071f8 <__multiply>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	4614      	mov	r4, r2
 80071fe:	690a      	ldr	r2, [r1, #16]
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	460d      	mov	r5, r1
 8007204:	429a      	cmp	r2, r3
 8007206:	bfbe      	ittt	lt
 8007208:	460b      	movlt	r3, r1
 800720a:	4625      	movlt	r5, r4
 800720c:	461c      	movlt	r4, r3
 800720e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007212:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007216:	68ab      	ldr	r3, [r5, #8]
 8007218:	6869      	ldr	r1, [r5, #4]
 800721a:	eb0a 0709 	add.w	r7, sl, r9
 800721e:	42bb      	cmp	r3, r7
 8007220:	b085      	sub	sp, #20
 8007222:	bfb8      	it	lt
 8007224:	3101      	addlt	r1, #1
 8007226:	f7ff fe8d 	bl	8006f44 <_Balloc>
 800722a:	b930      	cbnz	r0, 800723a <__multiply+0x42>
 800722c:	4602      	mov	r2, r0
 800722e:	f240 115d 	movw	r1, #349	; 0x15d
 8007232:	4b41      	ldr	r3, [pc, #260]	; (8007338 <__multiply+0x140>)
 8007234:	4841      	ldr	r0, [pc, #260]	; (800733c <__multiply+0x144>)
 8007236:	f000 fd83 	bl	8007d40 <__assert_func>
 800723a:	f100 0614 	add.w	r6, r0, #20
 800723e:	4633      	mov	r3, r6
 8007240:	2200      	movs	r2, #0
 8007242:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007246:	4543      	cmp	r3, r8
 8007248:	d31e      	bcc.n	8007288 <__multiply+0x90>
 800724a:	f105 0c14 	add.w	ip, r5, #20
 800724e:	f104 0314 	add.w	r3, r4, #20
 8007252:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007256:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800725a:	9202      	str	r2, [sp, #8]
 800725c:	ebac 0205 	sub.w	r2, ip, r5
 8007260:	3a15      	subs	r2, #21
 8007262:	f022 0203 	bic.w	r2, r2, #3
 8007266:	3204      	adds	r2, #4
 8007268:	f105 0115 	add.w	r1, r5, #21
 800726c:	458c      	cmp	ip, r1
 800726e:	bf38      	it	cc
 8007270:	2204      	movcc	r2, #4
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9a02      	ldr	r2, [sp, #8]
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	d808      	bhi.n	800728e <__multiply+0x96>
 800727c:	2f00      	cmp	r7, #0
 800727e:	dc55      	bgt.n	800732c <__multiply+0x134>
 8007280:	6107      	str	r7, [r0, #16]
 8007282:	b005      	add	sp, #20
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	f843 2b04 	str.w	r2, [r3], #4
 800728c:	e7db      	b.n	8007246 <__multiply+0x4e>
 800728e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007292:	f1ba 0f00 	cmp.w	sl, #0
 8007296:	d020      	beq.n	80072da <__multiply+0xe2>
 8007298:	46b1      	mov	r9, r6
 800729a:	2200      	movs	r2, #0
 800729c:	f105 0e14 	add.w	lr, r5, #20
 80072a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80072a4:	f8d9 b000 	ldr.w	fp, [r9]
 80072a8:	b2a1      	uxth	r1, r4
 80072aa:	fa1f fb8b 	uxth.w	fp, fp
 80072ae:	fb0a b101 	mla	r1, sl, r1, fp
 80072b2:	4411      	add	r1, r2
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	0c24      	lsrs	r4, r4, #16
 80072ba:	0c12      	lsrs	r2, r2, #16
 80072bc:	fb0a 2404 	mla	r4, sl, r4, r2
 80072c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80072c4:	b289      	uxth	r1, r1
 80072c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072ca:	45f4      	cmp	ip, lr
 80072cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80072d0:	f849 1b04 	str.w	r1, [r9], #4
 80072d4:	d8e4      	bhi.n	80072a0 <__multiply+0xa8>
 80072d6:	9901      	ldr	r1, [sp, #4]
 80072d8:	5072      	str	r2, [r6, r1]
 80072da:	9a03      	ldr	r2, [sp, #12]
 80072dc:	3304      	adds	r3, #4
 80072de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e2:	f1b9 0f00 	cmp.w	r9, #0
 80072e6:	d01f      	beq.n	8007328 <__multiply+0x130>
 80072e8:	46b6      	mov	lr, r6
 80072ea:	f04f 0a00 	mov.w	sl, #0
 80072ee:	6834      	ldr	r4, [r6, #0]
 80072f0:	f105 0114 	add.w	r1, r5, #20
 80072f4:	880a      	ldrh	r2, [r1, #0]
 80072f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80072fa:	b2a4      	uxth	r4, r4
 80072fc:	fb09 b202 	mla	r2, r9, r2, fp
 8007300:	4492      	add	sl, r2
 8007302:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007306:	f84e 4b04 	str.w	r4, [lr], #4
 800730a:	f851 4b04 	ldr.w	r4, [r1], #4
 800730e:	f8be 2000 	ldrh.w	r2, [lr]
 8007312:	0c24      	lsrs	r4, r4, #16
 8007314:	fb09 2404 	mla	r4, r9, r4, r2
 8007318:	458c      	cmp	ip, r1
 800731a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800731e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007322:	d8e7      	bhi.n	80072f4 <__multiply+0xfc>
 8007324:	9a01      	ldr	r2, [sp, #4]
 8007326:	50b4      	str	r4, [r6, r2]
 8007328:	3604      	adds	r6, #4
 800732a:	e7a3      	b.n	8007274 <__multiply+0x7c>
 800732c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1a5      	bne.n	8007280 <__multiply+0x88>
 8007334:	3f01      	subs	r7, #1
 8007336:	e7a1      	b.n	800727c <__multiply+0x84>
 8007338:	08008b7c 	.word	0x08008b7c
 800733c:	08008c0c 	.word	0x08008c0c

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	; (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe55 	bl	8007008 <__multadd>
 800735e:	4607      	mov	r7, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fdb5 	bl	8006ed8 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	6270      	str	r0, [r6, #36]	; 0x24
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <__pow5mult+0xac>)
 800737a:	481d      	ldr	r0, [pc, #116]	; (80073f0 <__pow5mult+0xb0>)
 800737c:	f000 fce0 	bl	8007d40 <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	; 0x271
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff18 	bl	80071cc <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff20 	bl	80071f8 <__multiply>
 80073b8:	4680      	mov	r8, r0
 80073ba:	4639      	mov	r1, r7
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fe01 	bl	8006fc4 <_Bfree>
 80073c2:	4647      	mov	r7, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff ff11 	bl	80071f8 <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	08008d60 	.word	0x08008d60
 80073ec:	08008b06 	.word	0x08008b06
 80073f0:	08008c0c 	.word	0x08008c0c

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	4607      	mov	r7, r0
 80073fc:	4691      	mov	r9, r2
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6849      	ldr	r1, [r1, #4]
 8007402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fd95 	bl	8006f44 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <__lshift+0xd0>)
 8007426:	4828      	ldr	r0, [pc, #160]	; (80074c8 <__lshift+0xd4>)
 8007428:	f000 fc8a 	bl	8007d40 <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db33      	blt.n	80074aa <__lshift+0xb6>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007458:	d02b      	beq.n	80074b2 <__lshift+0xbe>
 800745a:	468a      	mov	sl, r1
 800745c:	2200      	movs	r2, #0
 800745e:	f1c9 0e20 	rsb	lr, r9, #32
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	fa00 f009 	lsl.w	r0, r0, r9
 8007468:	4302      	orrs	r2, r0
 800746a:	f84a 2b04 	str.w	r2, [sl], #4
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	459c      	cmp	ip, r3
 8007474:	fa22 f20e 	lsr.w	r2, r2, lr
 8007478:	d8f3      	bhi.n	8007462 <__lshift+0x6e>
 800747a:	ebac 0304 	sub.w	r3, ip, r4
 800747e:	3b15      	subs	r3, #21
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	3304      	adds	r3, #4
 8007486:	f104 0015 	add.w	r0, r4, #21
 800748a:	4584      	cmp	ip, r0
 800748c:	bf38      	it	cc
 800748e:	2304      	movcc	r3, #4
 8007490:	50ca      	str	r2, [r1, r3]
 8007492:	b10a      	cbz	r2, 8007498 <__lshift+0xa4>
 8007494:	f108 0602 	add.w	r6, r8, #2
 8007498:	3e01      	subs	r6, #1
 800749a:	4638      	mov	r0, r7
 800749c:	4621      	mov	r1, r4
 800749e:	612e      	str	r6, [r5, #16]
 80074a0:	f7ff fd90 	bl	8006fc4 <_Bfree>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7c5      	b.n	800743e <__lshift+0x4a>
 80074b2:	3904      	subs	r1, #4
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	459c      	cmp	ip, r3
 80074ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80074be:	d8f9      	bhi.n	80074b4 <__lshift+0xc0>
 80074c0:	e7ea      	b.n	8007498 <__lshift+0xa4>
 80074c2:	bf00      	nop
 80074c4:	08008b7c 	.word	0x08008b7c
 80074c8:	08008c0c 	.word	0x08008c0c

080074cc <__mcmp>:
 80074cc:	4603      	mov	r3, r0
 80074ce:	690a      	ldr	r2, [r1, #16]
 80074d0:	6900      	ldr	r0, [r0, #16]
 80074d2:	b530      	push	{r4, r5, lr}
 80074d4:	1a80      	subs	r0, r0, r2
 80074d6:	d10d      	bne.n	80074f4 <__mcmp+0x28>
 80074d8:	3314      	adds	r3, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074ec:	4295      	cmp	r5, r2
 80074ee:	d002      	beq.n	80074f6 <__mcmp+0x2a>
 80074f0:	d304      	bcc.n	80074fc <__mcmp+0x30>
 80074f2:	2001      	movs	r0, #1
 80074f4:	bd30      	pop	{r4, r5, pc}
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	d3f4      	bcc.n	80074e4 <__mcmp+0x18>
 80074fa:	e7fb      	b.n	80074f4 <__mcmp+0x28>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	e7f8      	b.n	80074f4 <__mcmp+0x28>
	...

08007504 <__mdiff>:
 8007504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	4606      	mov	r6, r0
 800750c:	4611      	mov	r1, r2
 800750e:	4620      	mov	r0, r4
 8007510:	4692      	mov	sl, r2
 8007512:	f7ff ffdb 	bl	80074cc <__mcmp>
 8007516:	1e05      	subs	r5, r0, #0
 8007518:	d111      	bne.n	800753e <__mdiff+0x3a>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fd11 	bl	8006f44 <_Balloc>
 8007522:	4602      	mov	r2, r0
 8007524:	b928      	cbnz	r0, 8007532 <__mdiff+0x2e>
 8007526:	f240 2132 	movw	r1, #562	; 0x232
 800752a:	4b3c      	ldr	r3, [pc, #240]	; (800761c <__mdiff+0x118>)
 800752c:	483c      	ldr	r0, [pc, #240]	; (8007620 <__mdiff+0x11c>)
 800752e:	f000 fc07 	bl	8007d40 <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007538:	4610      	mov	r0, r2
 800753a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	bfa4      	itt	ge
 8007540:	4653      	movge	r3, sl
 8007542:	46a2      	movge	sl, r4
 8007544:	4630      	mov	r0, r6
 8007546:	f8da 1004 	ldr.w	r1, [sl, #4]
 800754a:	bfa6      	itte	ge
 800754c:	461c      	movge	r4, r3
 800754e:	2500      	movge	r5, #0
 8007550:	2501      	movlt	r5, #1
 8007552:	f7ff fcf7 	bl	8006f44 <_Balloc>
 8007556:	4602      	mov	r2, r0
 8007558:	b918      	cbnz	r0, 8007562 <__mdiff+0x5e>
 800755a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800755e:	4b2f      	ldr	r3, [pc, #188]	; (800761c <__mdiff+0x118>)
 8007560:	e7e4      	b.n	800752c <__mdiff+0x28>
 8007562:	f100 0814 	add.w	r8, r0, #20
 8007566:	f8da 7010 	ldr.w	r7, [sl, #16]
 800756a:	60c5      	str	r5, [r0, #12]
 800756c:	f04f 0c00 	mov.w	ip, #0
 8007570:	f10a 0514 	add.w	r5, sl, #20
 8007574:	f10a 0010 	add.w	r0, sl, #16
 8007578:	46c2      	mov	sl, r8
 800757a:	6926      	ldr	r6, [r4, #16]
 800757c:	f104 0914 	add.w	r9, r4, #20
 8007580:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007588:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800758c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007590:	fa1f f18b 	uxth.w	r1, fp
 8007594:	4461      	add	r1, ip
 8007596:	fa1f fc83 	uxth.w	ip, r3
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	eba1 010c 	sub.w	r1, r1, ip
 80075a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80075a8:	b289      	uxth	r1, r1
 80075aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80075ae:	454e      	cmp	r6, r9
 80075b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80075b4:	f84a 3b04 	str.w	r3, [sl], #4
 80075b8:	d8e6      	bhi.n	8007588 <__mdiff+0x84>
 80075ba:	1b33      	subs	r3, r6, r4
 80075bc:	3b15      	subs	r3, #21
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	3415      	adds	r4, #21
 80075c4:	3304      	adds	r3, #4
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	bf38      	it	cc
 80075ca:	2304      	movcc	r3, #4
 80075cc:	441d      	add	r5, r3
 80075ce:	4443      	add	r3, r8
 80075d0:	461e      	mov	r6, r3
 80075d2:	462c      	mov	r4, r5
 80075d4:	4574      	cmp	r4, lr
 80075d6:	d30e      	bcc.n	80075f6 <__mdiff+0xf2>
 80075d8:	f10e 0103 	add.w	r1, lr, #3
 80075dc:	1b49      	subs	r1, r1, r5
 80075de:	f021 0103 	bic.w	r1, r1, #3
 80075e2:	3d03      	subs	r5, #3
 80075e4:	45ae      	cmp	lr, r5
 80075e6:	bf38      	it	cc
 80075e8:	2100      	movcc	r1, #0
 80075ea:	4419      	add	r1, r3
 80075ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80075f0:	b18b      	cbz	r3, 8007616 <__mdiff+0x112>
 80075f2:	6117      	str	r7, [r2, #16]
 80075f4:	e7a0      	b.n	8007538 <__mdiff+0x34>
 80075f6:	f854 8b04 	ldr.w	r8, [r4], #4
 80075fa:	fa1f f188 	uxth.w	r1, r8
 80075fe:	4461      	add	r1, ip
 8007600:	1408      	asrs	r0, r1, #16
 8007602:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007606:	b289      	uxth	r1, r1
 8007608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800760c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007610:	f846 1b04 	str.w	r1, [r6], #4
 8007614:	e7de      	b.n	80075d4 <__mdiff+0xd0>
 8007616:	3f01      	subs	r7, #1
 8007618:	e7e8      	b.n	80075ec <__mdiff+0xe8>
 800761a:	bf00      	nop
 800761c:	08008b7c 	.word	0x08008b7c
 8007620:	08008c0c 	.word	0x08008c0c

08007624 <__ulp>:
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <__ulp+0x48>)
 8007626:	400b      	ands	r3, r1
 8007628:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd02      	ble.n	8007636 <__ulp+0x12>
 8007630:	2000      	movs	r0, #0
 8007632:	4619      	mov	r1, r3
 8007634:	4770      	bx	lr
 8007636:	425b      	negs	r3, r3
 8007638:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800763c:	f04f 0000 	mov.w	r0, #0
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007648:	da04      	bge.n	8007654 <__ulp+0x30>
 800764a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800764e:	fa43 f102 	asr.w	r1, r3, r2
 8007652:	4770      	bx	lr
 8007654:	f1a2 0314 	sub.w	r3, r2, #20
 8007658:	2b1e      	cmp	r3, #30
 800765a:	bfd6      	itet	le
 800765c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007660:	2301      	movgt	r3, #1
 8007662:	fa22 f303 	lsrle.w	r3, r2, r3
 8007666:	4618      	mov	r0, r3
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	7ff00000 	.word	0x7ff00000

08007670 <__b2d>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	6907      	ldr	r7, [r0, #16]
 8007676:	f100 0914 	add.w	r9, r0, #20
 800767a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800767e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007682:	f1a7 0804 	sub.w	r8, r7, #4
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff fd52 	bl	8007130 <__hi0bits>
 800768c:	f1c0 0320 	rsb	r3, r0, #32
 8007690:	280a      	cmp	r0, #10
 8007692:	600b      	str	r3, [r1, #0]
 8007694:	491f      	ldr	r1, [pc, #124]	; (8007714 <__b2d+0xa4>)
 8007696:	dc17      	bgt.n	80076c8 <__b2d+0x58>
 8007698:	45c1      	cmp	r9, r8
 800769a:	bf28      	it	cs
 800769c:	2200      	movcs	r2, #0
 800769e:	f1c0 0c0b 	rsb	ip, r0, #11
 80076a2:	fa26 f30c 	lsr.w	r3, r6, ip
 80076a6:	bf38      	it	cc
 80076a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076ac:	ea43 0501 	orr.w	r5, r3, r1
 80076b0:	f100 0315 	add.w	r3, r0, #21
 80076b4:	fa06 f303 	lsl.w	r3, r6, r3
 80076b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80076bc:	ea43 0402 	orr.w	r4, r3, r2
 80076c0:	4620      	mov	r0, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c8:	45c1      	cmp	r9, r8
 80076ca:	bf2e      	itee	cs
 80076cc:	2200      	movcs	r2, #0
 80076ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076d2:	f1a7 0808 	subcc.w	r8, r7, #8
 80076d6:	f1b0 030b 	subs.w	r3, r0, #11
 80076da:	d016      	beq.n	800770a <__b2d+0x9a>
 80076dc:	f1c3 0720 	rsb	r7, r3, #32
 80076e0:	fa22 f107 	lsr.w	r1, r2, r7
 80076e4:	45c8      	cmp	r8, r9
 80076e6:	fa06 f603 	lsl.w	r6, r6, r3
 80076ea:	ea46 0601 	orr.w	r6, r6, r1
 80076ee:	bf94      	ite	ls
 80076f0:	2100      	movls	r1, #0
 80076f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80076f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80076fa:	fa02 f003 	lsl.w	r0, r2, r3
 80076fe:	40f9      	lsrs	r1, r7
 8007700:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007704:	ea40 0401 	orr.w	r4, r0, r1
 8007708:	e7da      	b.n	80076c0 <__b2d+0x50>
 800770a:	4614      	mov	r4, r2
 800770c:	ea46 0501 	orr.w	r5, r6, r1
 8007710:	e7d6      	b.n	80076c0 <__b2d+0x50>
 8007712:	bf00      	nop
 8007714:	3ff00000 	.word	0x3ff00000

08007718 <__d2b>:
 8007718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800771c:	2101      	movs	r1, #1
 800771e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007722:	4690      	mov	r8, r2
 8007724:	461d      	mov	r5, r3
 8007726:	f7ff fc0d 	bl	8006f44 <_Balloc>
 800772a:	4604      	mov	r4, r0
 800772c:	b930      	cbnz	r0, 800773c <__d2b+0x24>
 800772e:	4602      	mov	r2, r0
 8007730:	f240 310a 	movw	r1, #778	; 0x30a
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <__d2b+0xb0>)
 8007736:	4825      	ldr	r0, [pc, #148]	; (80077cc <__d2b+0xb4>)
 8007738:	f000 fb02 	bl	8007d40 <__assert_func>
 800773c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007740:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007744:	bb2d      	cbnz	r5, 8007792 <__d2b+0x7a>
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	f1b8 0300 	subs.w	r3, r8, #0
 800774c:	d026      	beq.n	800779c <__d2b+0x84>
 800774e:	4668      	mov	r0, sp
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	f7ff fd0d 	bl	8007170 <__lo0bits>
 8007756:	9900      	ldr	r1, [sp, #0]
 8007758:	b1f0      	cbz	r0, 8007798 <__d2b+0x80>
 800775a:	9a01      	ldr	r2, [sp, #4]
 800775c:	f1c0 0320 	rsb	r3, r0, #32
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	430b      	orrs	r3, r1
 8007766:	40c2      	lsrs	r2, r0
 8007768:	6163      	str	r3, [r4, #20]
 800776a:	9201      	str	r2, [sp, #4]
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf14      	ite	ne
 8007772:	2102      	movne	r1, #2
 8007774:	2101      	moveq	r1, #1
 8007776:	61a3      	str	r3, [r4, #24]
 8007778:	6121      	str	r1, [r4, #16]
 800777a:	b1c5      	cbz	r5, 80077ae <__d2b+0x96>
 800777c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007780:	4405      	add	r5, r0
 8007782:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007786:	603d      	str	r5, [r7, #0]
 8007788:	6030      	str	r0, [r6, #0]
 800778a:	4620      	mov	r0, r4
 800778c:	b002      	add	sp, #8
 800778e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007796:	e7d6      	b.n	8007746 <__d2b+0x2e>
 8007798:	6161      	str	r1, [r4, #20]
 800779a:	e7e7      	b.n	800776c <__d2b+0x54>
 800779c:	a801      	add	r0, sp, #4
 800779e:	f7ff fce7 	bl	8007170 <__lo0bits>
 80077a2:	2101      	movs	r1, #1
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	6121      	str	r1, [r4, #16]
 80077a8:	6163      	str	r3, [r4, #20]
 80077aa:	3020      	adds	r0, #32
 80077ac:	e7e5      	b.n	800777a <__d2b+0x62>
 80077ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80077b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077b6:	6038      	str	r0, [r7, #0]
 80077b8:	6918      	ldr	r0, [r3, #16]
 80077ba:	f7ff fcb9 	bl	8007130 <__hi0bits>
 80077be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80077c2:	6031      	str	r1, [r6, #0]
 80077c4:	e7e1      	b.n	800778a <__d2b+0x72>
 80077c6:	bf00      	nop
 80077c8:	08008b7c 	.word	0x08008b7c
 80077cc:	08008c0c 	.word	0x08008c0c

080077d0 <__ratio>:
 80077d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	4688      	mov	r8, r1
 80077d6:	4669      	mov	r1, sp
 80077d8:	4681      	mov	r9, r0
 80077da:	f7ff ff49 	bl	8007670 <__b2d>
 80077de:	460f      	mov	r7, r1
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	4640      	mov	r0, r8
 80077e6:	a901      	add	r1, sp, #4
 80077e8:	f7ff ff42 	bl	8007670 <__b2d>
 80077ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077f4:	468b      	mov	fp, r1
 80077f6:	eba3 0c02 	sub.w	ip, r3, r2
 80077fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfd5      	itete	le
 8007808:	460a      	movle	r2, r1
 800780a:	462a      	movgt	r2, r5
 800780c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007810:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007814:	bfd8      	it	le
 8007816:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800781a:	465b      	mov	r3, fp
 800781c:	4602      	mov	r2, r0
 800781e:	4639      	mov	r1, r7
 8007820:	4620      	mov	r0, r4
 8007822:	f7f8 ff83 	bl	800072c <__aeabi_ddiv>
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800782c <__copybits>:
 800782c:	3901      	subs	r1, #1
 800782e:	b570      	push	{r4, r5, r6, lr}
 8007830:	1149      	asrs	r1, r1, #5
 8007832:	6914      	ldr	r4, [r2, #16]
 8007834:	3101      	adds	r1, #1
 8007836:	f102 0314 	add.w	r3, r2, #20
 800783a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800783e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007842:	1f05      	subs	r5, r0, #4
 8007844:	42a3      	cmp	r3, r4
 8007846:	d30c      	bcc.n	8007862 <__copybits+0x36>
 8007848:	1aa3      	subs	r3, r4, r2
 800784a:	3b11      	subs	r3, #17
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	3211      	adds	r2, #17
 8007852:	42a2      	cmp	r2, r4
 8007854:	bf88      	it	hi
 8007856:	2300      	movhi	r3, #0
 8007858:	4418      	add	r0, r3
 800785a:	2300      	movs	r3, #0
 800785c:	4288      	cmp	r0, r1
 800785e:	d305      	bcc.n	800786c <__copybits+0x40>
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	f853 6b04 	ldr.w	r6, [r3], #4
 8007866:	f845 6f04 	str.w	r6, [r5, #4]!
 800786a:	e7eb      	b.n	8007844 <__copybits+0x18>
 800786c:	f840 3b04 	str.w	r3, [r0], #4
 8007870:	e7f4      	b.n	800785c <__copybits+0x30>

08007872 <__any_on>:
 8007872:	f100 0214 	add.w	r2, r0, #20
 8007876:	6900      	ldr	r0, [r0, #16]
 8007878:	114b      	asrs	r3, r1, #5
 800787a:	4298      	cmp	r0, r3
 800787c:	b510      	push	{r4, lr}
 800787e:	db11      	blt.n	80078a4 <__any_on+0x32>
 8007880:	dd0a      	ble.n	8007898 <__any_on+0x26>
 8007882:	f011 011f 	ands.w	r1, r1, #31
 8007886:	d007      	beq.n	8007898 <__any_on+0x26>
 8007888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800788c:	fa24 f001 	lsr.w	r0, r4, r1
 8007890:	fa00 f101 	lsl.w	r1, r0, r1
 8007894:	428c      	cmp	r4, r1
 8007896:	d10b      	bne.n	80078b0 <__any_on+0x3e>
 8007898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800789c:	4293      	cmp	r3, r2
 800789e:	d803      	bhi.n	80078a8 <__any_on+0x36>
 80078a0:	2000      	movs	r0, #0
 80078a2:	bd10      	pop	{r4, pc}
 80078a4:	4603      	mov	r3, r0
 80078a6:	e7f7      	b.n	8007898 <__any_on+0x26>
 80078a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d0f5      	beq.n	800789c <__any_on+0x2a>
 80078b0:	2001      	movs	r0, #1
 80078b2:	e7f6      	b.n	80078a2 <__any_on+0x30>

080078b4 <_calloc_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	fb02 f501 	mul.w	r5, r2, r1
 80078ba:	4629      	mov	r1, r5
 80078bc:	f000 f854 	bl	8007968 <_malloc_r>
 80078c0:	4604      	mov	r4, r0
 80078c2:	b118      	cbz	r0, 80078cc <_calloc_r+0x18>
 80078c4:	462a      	mov	r2, r5
 80078c6:	2100      	movs	r1, #0
 80078c8:	f7fc fbdc 	bl	8004084 <memset>
 80078cc:	4620      	mov	r0, r4
 80078ce:	bd38      	pop	{r3, r4, r5, pc}

080078d0 <_free_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4605      	mov	r5, r0
 80078d4:	2900      	cmp	r1, #0
 80078d6:	d043      	beq.n	8007960 <_free_r+0x90>
 80078d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078dc:	1f0c      	subs	r4, r1, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfb8      	it	lt
 80078e2:	18e4      	addlt	r4, r4, r3
 80078e4:	f000 fa76 	bl	8007dd4 <__malloc_lock>
 80078e8:	4a1e      	ldr	r2, [pc, #120]	; (8007964 <_free_r+0x94>)
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	4610      	mov	r0, r2
 80078ee:	b933      	cbnz	r3, 80078fe <_free_r+0x2e>
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	6014      	str	r4, [r2, #0]
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078fa:	f000 ba71 	b.w	8007de0 <__malloc_unlock>
 80078fe:	42a3      	cmp	r3, r4
 8007900:	d90a      	bls.n	8007918 <_free_r+0x48>
 8007902:	6821      	ldr	r1, [r4, #0]
 8007904:	1862      	adds	r2, r4, r1
 8007906:	4293      	cmp	r3, r2
 8007908:	bf01      	itttt	eq
 800790a:	681a      	ldreq	r2, [r3, #0]
 800790c:	685b      	ldreq	r3, [r3, #4]
 800790e:	1852      	addeq	r2, r2, r1
 8007910:	6022      	streq	r2, [r4, #0]
 8007912:	6063      	str	r3, [r4, #4]
 8007914:	6004      	str	r4, [r0, #0]
 8007916:	e7ed      	b.n	80078f4 <_free_r+0x24>
 8007918:	461a      	mov	r2, r3
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	b10b      	cbz	r3, 8007922 <_free_r+0x52>
 800791e:	42a3      	cmp	r3, r4
 8007920:	d9fa      	bls.n	8007918 <_free_r+0x48>
 8007922:	6811      	ldr	r1, [r2, #0]
 8007924:	1850      	adds	r0, r2, r1
 8007926:	42a0      	cmp	r0, r4
 8007928:	d10b      	bne.n	8007942 <_free_r+0x72>
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	4401      	add	r1, r0
 800792e:	1850      	adds	r0, r2, r1
 8007930:	4283      	cmp	r3, r0
 8007932:	6011      	str	r1, [r2, #0]
 8007934:	d1de      	bne.n	80078f4 <_free_r+0x24>
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4401      	add	r1, r0
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	6053      	str	r3, [r2, #4]
 8007940:	e7d8      	b.n	80078f4 <_free_r+0x24>
 8007942:	d902      	bls.n	800794a <_free_r+0x7a>
 8007944:	230c      	movs	r3, #12
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	e7d4      	b.n	80078f4 <_free_r+0x24>
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	1821      	adds	r1, r4, r0
 800794e:	428b      	cmp	r3, r1
 8007950:	bf01      	itttt	eq
 8007952:	6819      	ldreq	r1, [r3, #0]
 8007954:	685b      	ldreq	r3, [r3, #4]
 8007956:	1809      	addeq	r1, r1, r0
 8007958:	6021      	streq	r1, [r4, #0]
 800795a:	6063      	str	r3, [r4, #4]
 800795c:	6054      	str	r4, [r2, #4]
 800795e:	e7c9      	b.n	80078f4 <_free_r+0x24>
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	bf00      	nop
 8007964:	20000210 	.word	0x20000210

08007968 <_malloc_r>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	1ccd      	adds	r5, r1, #3
 800796c:	f025 0503 	bic.w	r5, r5, #3
 8007970:	3508      	adds	r5, #8
 8007972:	2d0c      	cmp	r5, #12
 8007974:	bf38      	it	cc
 8007976:	250c      	movcc	r5, #12
 8007978:	2d00      	cmp	r5, #0
 800797a:	4606      	mov	r6, r0
 800797c:	db01      	blt.n	8007982 <_malloc_r+0x1a>
 800797e:	42a9      	cmp	r1, r5
 8007980:	d903      	bls.n	800798a <_malloc_r+0x22>
 8007982:	230c      	movs	r3, #12
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	2000      	movs	r0, #0
 8007988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798a:	f000 fa23 	bl	8007dd4 <__malloc_lock>
 800798e:	4921      	ldr	r1, [pc, #132]	; (8007a14 <_malloc_r+0xac>)
 8007990:	680a      	ldr	r2, [r1, #0]
 8007992:	4614      	mov	r4, r2
 8007994:	b99c      	cbnz	r4, 80079be <_malloc_r+0x56>
 8007996:	4f20      	ldr	r7, [pc, #128]	; (8007a18 <_malloc_r+0xb0>)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	b923      	cbnz	r3, 80079a6 <_malloc_r+0x3e>
 800799c:	4621      	mov	r1, r4
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 f99e 	bl	8007ce0 <_sbrk_r>
 80079a4:	6038      	str	r0, [r7, #0]
 80079a6:	4629      	mov	r1, r5
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f999 	bl	8007ce0 <_sbrk_r>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	d123      	bne.n	80079fa <_malloc_r+0x92>
 80079b2:	230c      	movs	r3, #12
 80079b4:	4630      	mov	r0, r6
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	f000 fa12 	bl	8007de0 <__malloc_unlock>
 80079bc:	e7e3      	b.n	8007986 <_malloc_r+0x1e>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	1b5b      	subs	r3, r3, r5
 80079c2:	d417      	bmi.n	80079f4 <_malloc_r+0x8c>
 80079c4:	2b0b      	cmp	r3, #11
 80079c6:	d903      	bls.n	80079d0 <_malloc_r+0x68>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	441c      	add	r4, r3
 80079cc:	6025      	str	r5, [r4, #0]
 80079ce:	e004      	b.n	80079da <_malloc_r+0x72>
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	42a2      	cmp	r2, r4
 80079d4:	bf0c      	ite	eq
 80079d6:	600b      	streq	r3, [r1, #0]
 80079d8:	6053      	strne	r3, [r2, #4]
 80079da:	4630      	mov	r0, r6
 80079dc:	f000 fa00 	bl	8007de0 <__malloc_unlock>
 80079e0:	f104 000b 	add.w	r0, r4, #11
 80079e4:	1d23      	adds	r3, r4, #4
 80079e6:	f020 0007 	bic.w	r0, r0, #7
 80079ea:	1ac2      	subs	r2, r0, r3
 80079ec:	d0cc      	beq.n	8007988 <_malloc_r+0x20>
 80079ee:	1a1b      	subs	r3, r3, r0
 80079f0:	50a3      	str	r3, [r4, r2]
 80079f2:	e7c9      	b.n	8007988 <_malloc_r+0x20>
 80079f4:	4622      	mov	r2, r4
 80079f6:	6864      	ldr	r4, [r4, #4]
 80079f8:	e7cc      	b.n	8007994 <_malloc_r+0x2c>
 80079fa:	1cc4      	adds	r4, r0, #3
 80079fc:	f024 0403 	bic.w	r4, r4, #3
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d0e3      	beq.n	80079cc <_malloc_r+0x64>
 8007a04:	1a21      	subs	r1, r4, r0
 8007a06:	4630      	mov	r0, r6
 8007a08:	f000 f96a 	bl	8007ce0 <_sbrk_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d1dd      	bne.n	80079cc <_malloc_r+0x64>
 8007a10:	e7cf      	b.n	80079b2 <_malloc_r+0x4a>
 8007a12:	bf00      	nop
 8007a14:	20000210 	.word	0x20000210
 8007a18:	20000214 	.word	0x20000214

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	4682      	mov	sl, r0
 8007a24:	429e      	cmp	r6, r3
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	d838      	bhi.n	8007aa0 <__ssputs_r+0x84>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d032      	beq.n	8007a9c <__ssputs_r+0x80>
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	6909      	ldr	r1, [r1, #16]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	eba5 0901 	sub.w	r9, r5, r1
 8007a40:	6965      	ldr	r5, [r4, #20]
 8007a42:	444b      	add	r3, r9
 8007a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d531      	bpl.n	8007abc <__ssputs_r+0xa0>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7ff ff85 	bl	8007968 <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	f8ca 3000 	str.w	r3, [sl]
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	464a      	mov	r2, r9
 8007a7a:	6921      	ldr	r1, [r4, #16]
 8007a7c:	f7ff fa54 	bl	8006f28 <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	444e      	add	r6, r9
 8007a90:	6026      	str	r6, [r4, #0]
 8007a92:	463e      	mov	r6, r7
 8007a94:	6165      	str	r5, [r4, #20]
 8007a96:	eba5 0509 	sub.w	r5, r5, r9
 8007a9a:	60a5      	str	r5, [r4, #8]
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x86>
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	4632      	mov	r2, r6
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	6820      	ldr	r0, [r4, #0]
 8007aa8:	f000 f97a 	bl	8007da0 <memmove>
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	1b9b      	subs	r3, r3, r6
 8007ab2:	4432      	add	r2, r6
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	6022      	str	r2, [r4, #0]
 8007aba:	e7db      	b.n	8007a74 <__ssputs_r+0x58>
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 f995 	bl	8007dec <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e1      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac8:	4650      	mov	r0, sl
 8007aca:	6921      	ldr	r1, [r4, #16]
 8007acc:	f7ff ff00 	bl	80078d0 <_free_r>
 8007ad0:	e7c7      	b.n	8007a62 <__ssputs_r+0x46>
	...

08007ad4 <_svfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4698      	mov	r8, r3
 8007ada:	898b      	ldrh	r3, [r1, #12]
 8007adc:	4607      	mov	r7, r0
 8007ade:	061b      	lsls	r3, r3, #24
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	4614      	mov	r4, r2
 8007ae4:	b09d      	sub	sp, #116	; 0x74
 8007ae6:	d50e      	bpl.n	8007b06 <_svfiprintf_r+0x32>
 8007ae8:	690b      	ldr	r3, [r1, #16]
 8007aea:	b963      	cbnz	r3, 8007b06 <_svfiprintf_r+0x32>
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	f7ff ff3b 	bl	8007968 <_malloc_r>
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6128      	str	r0, [r5, #16]
 8007af6:	b920      	cbnz	r0, 8007b02 <_svfiprintf_r+0x2e>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e0d1      	b.n	8007ca6 <_svfiprintf_r+0x1d2>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	616b      	str	r3, [r5, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b10:	2330      	movs	r3, #48	; 0x30
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cc0 <_svfiprintf_r+0x1ec>
 8007b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b22:	4623      	mov	r3, r4
 8007b24:	469a      	mov	sl, r3
 8007b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2a:	b10a      	cbz	r2, 8007b30 <_svfiprintf_r+0x5c>
 8007b2c:	2a25      	cmp	r2, #37	; 0x25
 8007b2e:	d1f9      	bne.n	8007b24 <_svfiprintf_r+0x50>
 8007b30:	ebba 0b04 	subs.w	fp, sl, r4
 8007b34:	d00b      	beq.n	8007b4e <_svfiprintf_r+0x7a>
 8007b36:	465b      	mov	r3, fp
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ff6d 	bl	8007a1c <__ssputs_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	f000 80aa 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4a:	445a      	add	r2, fp
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80a2 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b62:	f10a 0a01 	add.w	sl, sl, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b70:	4654      	mov	r4, sl
 8007b72:	2205      	movs	r2, #5
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4851      	ldr	r0, [pc, #324]	; (8007cc0 <_svfiprintf_r+0x1ec>)
 8007b7a:	f7ff f9c7 	bl	8006f0c <memchr>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	b9d8      	cbnz	r0, 8007bba <_svfiprintf_r+0xe6>
 8007b82:	06d0      	lsls	r0, r2, #27
 8007b84:	bf44      	itt	mi
 8007b86:	2320      	movmi	r3, #32
 8007b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8c:	0711      	lsls	r1, r2, #28
 8007b8e:	bf44      	itt	mi
 8007b90:	232b      	movmi	r3, #43	; 0x2b
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d015      	beq.n	8007bca <_svfiprintf_r+0xf6>
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	9a07      	ldr	r2, [sp, #28]
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d94e      	bls.n	8007c52 <_svfiprintf_r+0x17e>
 8007bb4:	b1b0      	cbz	r0, 8007be4 <_svfiprintf_r+0x110>
 8007bb6:	9207      	str	r2, [sp, #28]
 8007bb8:	e014      	b.n	8007be4 <_svfiprintf_r+0x110>
 8007bba:	eba0 0308 	sub.w	r3, r0, r8
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	46a2      	mov	sl, r4
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	e7d2      	b.n	8007b70 <_svfiprintf_r+0x9c>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	425b      	neglt	r3, r3
 8007bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bdc:	9307      	strge	r3, [sp, #28]
 8007bde:	9307      	strlt	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	9204      	strlt	r2, [sp, #16]
 8007be4:	7823      	ldrb	r3, [r4, #0]
 8007be6:	2b2e      	cmp	r3, #46	; 0x2e
 8007be8:	d10c      	bne.n	8007c04 <_svfiprintf_r+0x130>
 8007bea:	7863      	ldrb	r3, [r4, #1]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d135      	bne.n	8007c5c <_svfiprintf_r+0x188>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	3402      	adds	r4, #2
 8007bf4:	1d1a      	adds	r2, r3, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	9203      	str	r2, [sp, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfb8      	it	lt
 8007bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd0 <_svfiprintf_r+0x1fc>
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	7821      	ldrb	r1, [r4, #0]
 8007c0e:	f7ff f97d 	bl	8006f0c <memchr>
 8007c12:	b140      	cbz	r0, 8007c26 <_svfiprintf_r+0x152>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	eba0 000a 	sub.w	r0, r0, sl
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	3401      	adds	r4, #1
 8007c22:	4303      	orrs	r3, r0
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	2206      	movs	r2, #6
 8007c2c:	4825      	ldr	r0, [pc, #148]	; (8007cc4 <_svfiprintf_r+0x1f0>)
 8007c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c32:	f7ff f96b 	bl	8006f0c <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d038      	beq.n	8007cac <_svfiprintf_r+0x1d8>
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_svfiprintf_r+0x1f4>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_svfiprintf_r+0x1b2>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	4433      	add	r3, r6
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	e767      	b.n	8007b22 <_svfiprintf_r+0x4e>
 8007c52:	460c      	mov	r4, r1
 8007c54:	2001      	movs	r0, #1
 8007c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c5a:	e7a5      	b.n	8007ba8 <_svfiprintf_r+0xd4>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f04f 0c0a 	mov.w	ip, #10
 8007c62:	4619      	mov	r1, r3
 8007c64:	3401      	adds	r4, #1
 8007c66:	9305      	str	r3, [sp, #20]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	; 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_svfiprintf_r+0x1a8>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c5      	beq.n	8007c04 <_svfiprintf_r+0x130>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c3      	b.n	8007c04 <_svfiprintf_r+0x130>
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	2301      	movs	r3, #1
 8007c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c84:	e7f0      	b.n	8007c68 <_svfiprintf_r+0x194>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007c90:	a904      	add	r1, sp, #16
 8007c92:	f7fc fa9d 	bl	80041d0 <_printf_float>
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	d1d6      	bne.n	8007c4a <_svfiprintf_r+0x176>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af2c 	bmi.w	8007afc <_svfiprintf_r+0x28>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	b01d      	add	sp, #116	; 0x74
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007cb6:	a904      	add	r1, sp, #16
 8007cb8:	f7fc fd26 	bl	8004708 <_printf_i>
 8007cbc:	e7eb      	b.n	8007c96 <_svfiprintf_r+0x1c2>
 8007cbe:	bf00      	nop
 8007cc0:	08008d6c 	.word	0x08008d6c
 8007cc4:	08008d76 	.word	0x08008d76
 8007cc8:	080041d1 	.word	0x080041d1
 8007ccc:	08007a1d 	.word	0x08007a1d
 8007cd0:	08008d72 	.word	0x08008d72

08007cd4 <nan>:
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4901      	ldr	r1, [pc, #4]	; (8007cdc <nan+0x8>)
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	7ff80000 	.word	0x7ff80000

08007ce0 <_sbrk_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4d05      	ldr	r5, [pc, #20]	; (8007cfc <_sbrk_r+0x1c>)
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7f9 ff26 	bl	8001b3c <_sbrk>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_sbrk_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_sbrk_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	20000350 	.word	0x20000350

08007d00 <strncmp>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	b16a      	cbz	r2, 8007d20 <strncmp+0x20>
 8007d04:	3901      	subs	r1, #1
 8007d06:	1884      	adds	r4, r0, r2
 8007d08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007d0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d103      	bne.n	8007d1c <strncmp+0x1c>
 8007d14:	42a0      	cmp	r0, r4
 8007d16:	d001      	beq.n	8007d1c <strncmp+0x1c>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f5      	bne.n	8007d08 <strncmp+0x8>
 8007d1c:	1a98      	subs	r0, r3, r2
 8007d1e:	bd10      	pop	{r4, pc}
 8007d20:	4610      	mov	r0, r2
 8007d22:	e7fc      	b.n	8007d1e <strncmp+0x1e>

08007d24 <__ascii_wctomb>:
 8007d24:	4603      	mov	r3, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	b141      	cbz	r1, 8007d3c <__ascii_wctomb+0x18>
 8007d2a:	2aff      	cmp	r2, #255	; 0xff
 8007d2c:	d904      	bls.n	8007d38 <__ascii_wctomb+0x14>
 8007d2e:	228a      	movs	r2, #138	; 0x8a
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	4770      	bx	lr
 8007d38:	2001      	movs	r0, #1
 8007d3a:	700a      	strb	r2, [r1, #0]
 8007d3c:	4770      	bx	lr
	...

08007d40 <__assert_func>:
 8007d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d42:	4614      	mov	r4, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <__assert_func+0x2c>)
 8007d48:	4605      	mov	r5, r0
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68d8      	ldr	r0, [r3, #12]
 8007d4e:	b14c      	cbz	r4, 8007d64 <__assert_func+0x24>
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <__assert_func+0x30>)
 8007d52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d56:	9100      	str	r1, [sp, #0]
 8007d58:	462b      	mov	r3, r5
 8007d5a:	4906      	ldr	r1, [pc, #24]	; (8007d74 <__assert_func+0x34>)
 8007d5c:	f000 f80e 	bl	8007d7c <fiprintf>
 8007d60:	f000 fa82 	bl	8008268 <abort>
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <__assert_func+0x38>)
 8007d66:	461c      	mov	r4, r3
 8007d68:	e7f3      	b.n	8007d52 <__assert_func+0x12>
 8007d6a:	bf00      	nop
 8007d6c:	2000000c 	.word	0x2000000c
 8007d70:	08008d7d 	.word	0x08008d7d
 8007d74:	08008d8a 	.word	0x08008d8a
 8007d78:	08008db8 	.word	0x08008db8

08007d7c <fiprintf>:
 8007d7c:	b40e      	push	{r1, r2, r3}
 8007d7e:	b503      	push	{r0, r1, lr}
 8007d80:	4601      	mov	r1, r0
 8007d82:	ab03      	add	r3, sp, #12
 8007d84:	4805      	ldr	r0, [pc, #20]	; (8007d9c <fiprintf+0x20>)
 8007d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8a:	6800      	ldr	r0, [r0, #0]
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	f000 f87b 	bl	8007e88 <_vfiprintf_r>
 8007d92:	b002      	add	sp, #8
 8007d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d98:	b003      	add	sp, #12
 8007d9a:	4770      	bx	lr
 8007d9c:	2000000c 	.word	0x2000000c

08007da0 <memmove>:
 8007da0:	4288      	cmp	r0, r1
 8007da2:	b510      	push	{r4, lr}
 8007da4:	eb01 0402 	add.w	r4, r1, r2
 8007da8:	d902      	bls.n	8007db0 <memmove+0x10>
 8007daa:	4284      	cmp	r4, r0
 8007dac:	4623      	mov	r3, r4
 8007dae:	d807      	bhi.n	8007dc0 <memmove+0x20>
 8007db0:	1e43      	subs	r3, r0, #1
 8007db2:	42a1      	cmp	r1, r4
 8007db4:	d008      	beq.n	8007dc8 <memmove+0x28>
 8007db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dbe:	e7f8      	b.n	8007db2 <memmove+0x12>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4402      	add	r2, r0
 8007dc4:	428a      	cmp	r2, r1
 8007dc6:	d100      	bne.n	8007dca <memmove+0x2a>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dd2:	e7f7      	b.n	8007dc4 <memmove+0x24>

08007dd4 <__malloc_lock>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__malloc_lock+0x8>)
 8007dd6:	f000 bc07 	b.w	80085e8 <__retarget_lock_acquire_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20000358 	.word	0x20000358

08007de0 <__malloc_unlock>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__malloc_unlock+0x8>)
 8007de2:	f000 bc02 	b.w	80085ea <__retarget_lock_release_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000358 	.word	0x20000358

08007dec <_realloc_r>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	4607      	mov	r7, r0
 8007df0:	4614      	mov	r4, r2
 8007df2:	460e      	mov	r6, r1
 8007df4:	b921      	cbnz	r1, 8007e00 <_realloc_r+0x14>
 8007df6:	4611      	mov	r1, r2
 8007df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007dfc:	f7ff bdb4 	b.w	8007968 <_malloc_r>
 8007e00:	b922      	cbnz	r2, 8007e0c <_realloc_r+0x20>
 8007e02:	f7ff fd65 	bl	80078d0 <_free_r>
 8007e06:	4625      	mov	r5, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0c:	f000 fc52 	bl	80086b4 <_malloc_usable_size_r>
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d20f      	bcs.n	8007e34 <_realloc_r+0x48>
 8007e14:	4621      	mov	r1, r4
 8007e16:	4638      	mov	r0, r7
 8007e18:	f7ff fda6 	bl	8007968 <_malloc_r>
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0f2      	beq.n	8007e08 <_realloc_r+0x1c>
 8007e22:	4631      	mov	r1, r6
 8007e24:	4622      	mov	r2, r4
 8007e26:	f7ff f87f 	bl	8006f28 <memcpy>
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7ff fd4f 	bl	80078d0 <_free_r>
 8007e32:	e7e9      	b.n	8007e08 <_realloc_r+0x1c>
 8007e34:	4635      	mov	r5, r6
 8007e36:	e7e7      	b.n	8007e08 <_realloc_r+0x1c>

08007e38 <__sfputc_r>:
 8007e38:	6893      	ldr	r3, [r2, #8]
 8007e3a:	b410      	push	{r4}
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	6093      	str	r3, [r2, #8]
 8007e42:	da07      	bge.n	8007e54 <__sfputc_r+0x1c>
 8007e44:	6994      	ldr	r4, [r2, #24]
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	db01      	blt.n	8007e4e <__sfputc_r+0x16>
 8007e4a:	290a      	cmp	r1, #10
 8007e4c:	d102      	bne.n	8007e54 <__sfputc_r+0x1c>
 8007e4e:	bc10      	pop	{r4}
 8007e50:	f000 b94a 	b.w	80080e8 <__swbuf_r>
 8007e54:	6813      	ldr	r3, [r2, #0]
 8007e56:	1c58      	adds	r0, r3, #1
 8007e58:	6010      	str	r0, [r2, #0]
 8007e5a:	7019      	strb	r1, [r3, #0]
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	bc10      	pop	{r4}
 8007e60:	4770      	bx	lr

08007e62 <__sfputs_r>:
 8007e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	4614      	mov	r4, r2
 8007e6a:	18d5      	adds	r5, r2, r3
 8007e6c:	42ac      	cmp	r4, r5
 8007e6e:	d101      	bne.n	8007e74 <__sfputs_r+0x12>
 8007e70:	2000      	movs	r0, #0
 8007e72:	e007      	b.n	8007e84 <__sfputs_r+0x22>
 8007e74:	463a      	mov	r2, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7c:	f7ff ffdc 	bl	8007e38 <__sfputc_r>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d1f3      	bne.n	8007e6c <__sfputs_r+0xa>
 8007e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e88 <_vfiprintf_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	460d      	mov	r5, r1
 8007e8e:	4614      	mov	r4, r2
 8007e90:	4698      	mov	r8, r3
 8007e92:	4606      	mov	r6, r0
 8007e94:	b09d      	sub	sp, #116	; 0x74
 8007e96:	b118      	cbz	r0, 8007ea0 <_vfiprintf_r+0x18>
 8007e98:	6983      	ldr	r3, [r0, #24]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <_vfiprintf_r+0x18>
 8007e9c:	f000 fb06 	bl	80084ac <__sinit>
 8007ea0:	4b89      	ldr	r3, [pc, #548]	; (80080c8 <_vfiprintf_r+0x240>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	d11b      	bne.n	8007ede <_vfiprintf_r+0x56>
 8007ea6:	6875      	ldr	r5, [r6, #4]
 8007ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eaa:	07d9      	lsls	r1, r3, #31
 8007eac:	d405      	bmi.n	8007eba <_vfiprintf_r+0x32>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	059a      	lsls	r2, r3, #22
 8007eb2:	d402      	bmi.n	8007eba <_vfiprintf_r+0x32>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb6:	f000 fb97 	bl	80085e8 <__retarget_lock_acquire_recursive>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	071b      	lsls	r3, r3, #28
 8007ebe:	d501      	bpl.n	8007ec4 <_vfiprintf_r+0x3c>
 8007ec0:	692b      	ldr	r3, [r5, #16]
 8007ec2:	b9eb      	cbnz	r3, 8007f00 <_vfiprintf_r+0x78>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f960 	bl	800818c <__swsetup_r>
 8007ecc:	b1c0      	cbz	r0, 8007f00 <_vfiprintf_r+0x78>
 8007ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed0:	07dc      	lsls	r4, r3, #31
 8007ed2:	d50e      	bpl.n	8007ef2 <_vfiprintf_r+0x6a>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	b01d      	add	sp, #116	; 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	4b7b      	ldr	r3, [pc, #492]	; (80080cc <_vfiprintf_r+0x244>)
 8007ee0:	429d      	cmp	r5, r3
 8007ee2:	d101      	bne.n	8007ee8 <_vfiprintf_r+0x60>
 8007ee4:	68b5      	ldr	r5, [r6, #8]
 8007ee6:	e7df      	b.n	8007ea8 <_vfiprintf_r+0x20>
 8007ee8:	4b79      	ldr	r3, [pc, #484]	; (80080d0 <_vfiprintf_r+0x248>)
 8007eea:	429d      	cmp	r5, r3
 8007eec:	bf08      	it	eq
 8007eee:	68f5      	ldreq	r5, [r6, #12]
 8007ef0:	e7da      	b.n	8007ea8 <_vfiprintf_r+0x20>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	0598      	lsls	r0, r3, #22
 8007ef6:	d4ed      	bmi.n	8007ed4 <_vfiprintf_r+0x4c>
 8007ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007efa:	f000 fb76 	bl	80085ea <__retarget_lock_release_recursive>
 8007efe:	e7e9      	b.n	8007ed4 <_vfiprintf_r+0x4c>
 8007f00:	2300      	movs	r3, #0
 8007f02:	9309      	str	r3, [sp, #36]	; 0x24
 8007f04:	2320      	movs	r3, #32
 8007f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f0a:	2330      	movs	r3, #48	; 0x30
 8007f0c:	f04f 0901 	mov.w	r9, #1
 8007f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80080d4 <_vfiprintf_r+0x24c>
 8007f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f1c:	4623      	mov	r3, r4
 8007f1e:	469a      	mov	sl, r3
 8007f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f24:	b10a      	cbz	r2, 8007f2a <_vfiprintf_r+0xa2>
 8007f26:	2a25      	cmp	r2, #37	; 0x25
 8007f28:	d1f9      	bne.n	8007f1e <_vfiprintf_r+0x96>
 8007f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f2e:	d00b      	beq.n	8007f48 <_vfiprintf_r+0xc0>
 8007f30:	465b      	mov	r3, fp
 8007f32:	4622      	mov	r2, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	4630      	mov	r0, r6
 8007f38:	f7ff ff93 	bl	8007e62 <__sfputs_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f000 80aa 	beq.w	8008096 <_vfiprintf_r+0x20e>
 8007f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f44:	445a      	add	r2, fp
 8007f46:	9209      	str	r2, [sp, #36]	; 0x24
 8007f48:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80a2 	beq.w	8008096 <_vfiprintf_r+0x20e>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f5c:	f10a 0a01 	add.w	sl, sl, #1
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	9307      	str	r3, [sp, #28]
 8007f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f68:	931a      	str	r3, [sp, #104]	; 0x68
 8007f6a:	4654      	mov	r4, sl
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f72:	4858      	ldr	r0, [pc, #352]	; (80080d4 <_vfiprintf_r+0x24c>)
 8007f74:	f7fe ffca 	bl	8006f0c <memchr>
 8007f78:	9a04      	ldr	r2, [sp, #16]
 8007f7a:	b9d8      	cbnz	r0, 8007fb4 <_vfiprintf_r+0x12c>
 8007f7c:	06d1      	lsls	r1, r2, #27
 8007f7e:	bf44      	itt	mi
 8007f80:	2320      	movmi	r3, #32
 8007f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f86:	0713      	lsls	r3, r2, #28
 8007f88:	bf44      	itt	mi
 8007f8a:	232b      	movmi	r3, #43	; 0x2b
 8007f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f90:	f89a 3000 	ldrb.w	r3, [sl]
 8007f94:	2b2a      	cmp	r3, #42	; 0x2a
 8007f96:	d015      	beq.n	8007fc4 <_vfiprintf_r+0x13c>
 8007f98:	4654      	mov	r4, sl
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	9a07      	ldr	r2, [sp, #28]
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa8:	3b30      	subs	r3, #48	; 0x30
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d94e      	bls.n	800804c <_vfiprintf_r+0x1c4>
 8007fae:	b1b0      	cbz	r0, 8007fde <_vfiprintf_r+0x156>
 8007fb0:	9207      	str	r2, [sp, #28]
 8007fb2:	e014      	b.n	8007fde <_vfiprintf_r+0x156>
 8007fb4:	eba0 0308 	sub.w	r3, r0, r8
 8007fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	46a2      	mov	sl, r4
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	e7d2      	b.n	8007f6a <_vfiprintf_r+0xe2>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	1d19      	adds	r1, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	9103      	str	r1, [sp, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bfbb      	ittet	lt
 8007fd0:	425b      	neglt	r3, r3
 8007fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd6:	9307      	strge	r3, [sp, #28]
 8007fd8:	9307      	strlt	r3, [sp, #28]
 8007fda:	bfb8      	it	lt
 8007fdc:	9204      	strlt	r2, [sp, #16]
 8007fde:	7823      	ldrb	r3, [r4, #0]
 8007fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe2:	d10c      	bne.n	8007ffe <_vfiprintf_r+0x176>
 8007fe4:	7863      	ldrb	r3, [r4, #1]
 8007fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe8:	d135      	bne.n	8008056 <_vfiprintf_r+0x1ce>
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	3402      	adds	r4, #2
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	9203      	str	r2, [sp, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfb8      	it	lt
 8007ff8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080e4 <_vfiprintf_r+0x25c>
 8008002:	2203      	movs	r2, #3
 8008004:	4650      	mov	r0, sl
 8008006:	7821      	ldrb	r1, [r4, #0]
 8008008:	f7fe ff80 	bl	8006f0c <memchr>
 800800c:	b140      	cbz	r0, 8008020 <_vfiprintf_r+0x198>
 800800e:	2340      	movs	r3, #64	; 0x40
 8008010:	eba0 000a 	sub.w	r0, r0, sl
 8008014:	fa03 f000 	lsl.w	r0, r3, r0
 8008018:	9b04      	ldr	r3, [sp, #16]
 800801a:	3401      	adds	r4, #1
 800801c:	4303      	orrs	r3, r0
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008024:	2206      	movs	r2, #6
 8008026:	482c      	ldr	r0, [pc, #176]	; (80080d8 <_vfiprintf_r+0x250>)
 8008028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800802c:	f7fe ff6e 	bl	8006f0c <memchr>
 8008030:	2800      	cmp	r0, #0
 8008032:	d03f      	beq.n	80080b4 <_vfiprintf_r+0x22c>
 8008034:	4b29      	ldr	r3, [pc, #164]	; (80080dc <_vfiprintf_r+0x254>)
 8008036:	bb1b      	cbnz	r3, 8008080 <_vfiprintf_r+0x1f8>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	3307      	adds	r3, #7
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	3308      	adds	r3, #8
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008046:	443b      	add	r3, r7
 8008048:	9309      	str	r3, [sp, #36]	; 0x24
 800804a:	e767      	b.n	8007f1c <_vfiprintf_r+0x94>
 800804c:	460c      	mov	r4, r1
 800804e:	2001      	movs	r0, #1
 8008050:	fb0c 3202 	mla	r2, ip, r2, r3
 8008054:	e7a5      	b.n	8007fa2 <_vfiprintf_r+0x11a>
 8008056:	2300      	movs	r3, #0
 8008058:	f04f 0c0a 	mov.w	ip, #10
 800805c:	4619      	mov	r1, r3
 800805e:	3401      	adds	r4, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	4620      	mov	r0, r4
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_vfiprintf_r+0x1ee>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c5      	beq.n	8007ffe <_vfiprintf_r+0x176>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c3      	b.n	8007ffe <_vfiprintf_r+0x176>
 8008076:	4604      	mov	r4, r0
 8008078:	2301      	movs	r3, #1
 800807a:	fb0c 2101 	mla	r1, ip, r1, r2
 800807e:	e7f0      	b.n	8008062 <_vfiprintf_r+0x1da>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	462a      	mov	r2, r5
 8008086:	4630      	mov	r0, r6
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <_vfiprintf_r+0x258>)
 800808a:	a904      	add	r1, sp, #16
 800808c:	f7fc f8a0 	bl	80041d0 <_printf_float>
 8008090:	4607      	mov	r7, r0
 8008092:	1c78      	adds	r0, r7, #1
 8008094:	d1d6      	bne.n	8008044 <_vfiprintf_r+0x1bc>
 8008096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008098:	07d9      	lsls	r1, r3, #31
 800809a:	d405      	bmi.n	80080a8 <_vfiprintf_r+0x220>
 800809c:	89ab      	ldrh	r3, [r5, #12]
 800809e:	059a      	lsls	r2, r3, #22
 80080a0:	d402      	bmi.n	80080a8 <_vfiprintf_r+0x220>
 80080a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a4:	f000 faa1 	bl	80085ea <__retarget_lock_release_recursive>
 80080a8:	89ab      	ldrh	r3, [r5, #12]
 80080aa:	065b      	lsls	r3, r3, #25
 80080ac:	f53f af12 	bmi.w	8007ed4 <_vfiprintf_r+0x4c>
 80080b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b2:	e711      	b.n	8007ed8 <_vfiprintf_r+0x50>
 80080b4:	ab03      	add	r3, sp, #12
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	462a      	mov	r2, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <_vfiprintf_r+0x258>)
 80080be:	a904      	add	r1, sp, #16
 80080c0:	f7fc fb22 	bl	8004708 <_printf_i>
 80080c4:	e7e4      	b.n	8008090 <_vfiprintf_r+0x208>
 80080c6:	bf00      	nop
 80080c8:	08008ddc 	.word	0x08008ddc
 80080cc:	08008dfc 	.word	0x08008dfc
 80080d0:	08008dbc 	.word	0x08008dbc
 80080d4:	08008d6c 	.word	0x08008d6c
 80080d8:	08008d76 	.word	0x08008d76
 80080dc:	080041d1 	.word	0x080041d1
 80080e0:	08007e63 	.word	0x08007e63
 80080e4:	08008d72 	.word	0x08008d72

080080e8 <__swbuf_r>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	460e      	mov	r6, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	4605      	mov	r5, r0
 80080f0:	b118      	cbz	r0, 80080fa <__swbuf_r+0x12>
 80080f2:	6983      	ldr	r3, [r0, #24]
 80080f4:	b90b      	cbnz	r3, 80080fa <__swbuf_r+0x12>
 80080f6:	f000 f9d9 	bl	80084ac <__sinit>
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <__swbuf_r+0x98>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	d12b      	bne.n	8008158 <__swbuf_r+0x70>
 8008100:	686c      	ldr	r4, [r5, #4]
 8008102:	69a3      	ldr	r3, [r4, #24]
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	071a      	lsls	r2, r3, #28
 800810a:	d52f      	bpl.n	800816c <__swbuf_r+0x84>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	b36b      	cbz	r3, 800816c <__swbuf_r+0x84>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	b2f6      	uxtb	r6, r6
 8008116:	1ac0      	subs	r0, r0, r3
 8008118:	6963      	ldr	r3, [r4, #20]
 800811a:	4637      	mov	r7, r6
 800811c:	4283      	cmp	r3, r0
 800811e:	dc04      	bgt.n	800812a <__swbuf_r+0x42>
 8008120:	4621      	mov	r1, r4
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f92e 	bl	8008384 <_fflush_r>
 8008128:	bb30      	cbnz	r0, 8008178 <__swbuf_r+0x90>
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	3001      	adds	r0, #1
 800812e:	3b01      	subs	r3, #1
 8008130:	60a3      	str	r3, [r4, #8]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	701e      	strb	r6, [r3, #0]
 800813a:	6963      	ldr	r3, [r4, #20]
 800813c:	4283      	cmp	r3, r0
 800813e:	d004      	beq.n	800814a <__swbuf_r+0x62>
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d506      	bpl.n	8008154 <__swbuf_r+0x6c>
 8008146:	2e0a      	cmp	r6, #10
 8008148:	d104      	bne.n	8008154 <__swbuf_r+0x6c>
 800814a:	4621      	mov	r1, r4
 800814c:	4628      	mov	r0, r5
 800814e:	f000 f919 	bl	8008384 <_fflush_r>
 8008152:	b988      	cbnz	r0, 8008178 <__swbuf_r+0x90>
 8008154:	4638      	mov	r0, r7
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <__swbuf_r+0x9c>)
 800815a:	429c      	cmp	r4, r3
 800815c:	d101      	bne.n	8008162 <__swbuf_r+0x7a>
 800815e:	68ac      	ldr	r4, [r5, #8]
 8008160:	e7cf      	b.n	8008102 <__swbuf_r+0x1a>
 8008162:	4b09      	ldr	r3, [pc, #36]	; (8008188 <__swbuf_r+0xa0>)
 8008164:	429c      	cmp	r4, r3
 8008166:	bf08      	it	eq
 8008168:	68ec      	ldreq	r4, [r5, #12]
 800816a:	e7ca      	b.n	8008102 <__swbuf_r+0x1a>
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f80c 	bl	800818c <__swsetup_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	d0cb      	beq.n	8008110 <__swbuf_r+0x28>
 8008178:	f04f 37ff 	mov.w	r7, #4294967295
 800817c:	e7ea      	b.n	8008154 <__swbuf_r+0x6c>
 800817e:	bf00      	nop
 8008180:	08008ddc 	.word	0x08008ddc
 8008184:	08008dfc 	.word	0x08008dfc
 8008188:	08008dbc 	.word	0x08008dbc

0800818c <__swsetup_r>:
 800818c:	4b32      	ldr	r3, [pc, #200]	; (8008258 <__swsetup_r+0xcc>)
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	681d      	ldr	r5, [r3, #0]
 8008192:	4606      	mov	r6, r0
 8008194:	460c      	mov	r4, r1
 8008196:	b125      	cbz	r5, 80081a2 <__swsetup_r+0x16>
 8008198:	69ab      	ldr	r3, [r5, #24]
 800819a:	b913      	cbnz	r3, 80081a2 <__swsetup_r+0x16>
 800819c:	4628      	mov	r0, r5
 800819e:	f000 f985 	bl	80084ac <__sinit>
 80081a2:	4b2e      	ldr	r3, [pc, #184]	; (800825c <__swsetup_r+0xd0>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d10f      	bne.n	80081c8 <__swsetup_r+0x3c>
 80081a8:	686c      	ldr	r4, [r5, #4]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081b0:	0719      	lsls	r1, r3, #28
 80081b2:	d42c      	bmi.n	800820e <__swsetup_r+0x82>
 80081b4:	06dd      	lsls	r5, r3, #27
 80081b6:	d411      	bmi.n	80081dc <__swsetup_r+0x50>
 80081b8:	2309      	movs	r3, #9
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	e03e      	b.n	8008246 <__swsetup_r+0xba>
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <__swsetup_r+0xd4>)
 80081ca:	429c      	cmp	r4, r3
 80081cc:	d101      	bne.n	80081d2 <__swsetup_r+0x46>
 80081ce:	68ac      	ldr	r4, [r5, #8]
 80081d0:	e7eb      	b.n	80081aa <__swsetup_r+0x1e>
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <__swsetup_r+0xd8>)
 80081d4:	429c      	cmp	r4, r3
 80081d6:	bf08      	it	eq
 80081d8:	68ec      	ldreq	r4, [r5, #12]
 80081da:	e7e6      	b.n	80081aa <__swsetup_r+0x1e>
 80081dc:	0758      	lsls	r0, r3, #29
 80081de:	d512      	bpl.n	8008206 <__swsetup_r+0x7a>
 80081e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081e2:	b141      	cbz	r1, 80081f6 <__swsetup_r+0x6a>
 80081e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e8:	4299      	cmp	r1, r3
 80081ea:	d002      	beq.n	80081f2 <__swsetup_r+0x66>
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff fb6f 	bl	80078d0 <_free_r>
 80081f2:	2300      	movs	r3, #0
 80081f4:	6363      	str	r3, [r4, #52]	; 0x34
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	2300      	movs	r3, #0
 8008200:	6063      	str	r3, [r4, #4]
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f043 0308 	orr.w	r3, r3, #8
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	b94b      	cbnz	r3, 8008226 <__swsetup_r+0x9a>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821c:	d003      	beq.n	8008226 <__swsetup_r+0x9a>
 800821e:	4621      	mov	r1, r4
 8008220:	4630      	mov	r0, r6
 8008222:	f000 fa07 	bl	8008634 <__smakebuf_r>
 8008226:	89a0      	ldrh	r0, [r4, #12]
 8008228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800822c:	f010 0301 	ands.w	r3, r0, #1
 8008230:	d00a      	beq.n	8008248 <__swsetup_r+0xbc>
 8008232:	2300      	movs	r3, #0
 8008234:	60a3      	str	r3, [r4, #8]
 8008236:	6963      	ldr	r3, [r4, #20]
 8008238:	425b      	negs	r3, r3
 800823a:	61a3      	str	r3, [r4, #24]
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	b943      	cbnz	r3, 8008252 <__swsetup_r+0xc6>
 8008240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008244:	d1ba      	bne.n	80081bc <__swsetup_r+0x30>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	0781      	lsls	r1, r0, #30
 800824a:	bf58      	it	pl
 800824c:	6963      	ldrpl	r3, [r4, #20]
 800824e:	60a3      	str	r3, [r4, #8]
 8008250:	e7f4      	b.n	800823c <__swsetup_r+0xb0>
 8008252:	2000      	movs	r0, #0
 8008254:	e7f7      	b.n	8008246 <__swsetup_r+0xba>
 8008256:	bf00      	nop
 8008258:	2000000c 	.word	0x2000000c
 800825c:	08008ddc 	.word	0x08008ddc
 8008260:	08008dfc 	.word	0x08008dfc
 8008264:	08008dbc 	.word	0x08008dbc

08008268 <abort>:
 8008268:	2006      	movs	r0, #6
 800826a:	b508      	push	{r3, lr}
 800826c:	f000 fa52 	bl	8008714 <raise>
 8008270:	2001      	movs	r0, #1
 8008272:	f7f9 fbef 	bl	8001a54 <_exit>
	...

08008278 <__sflush_r>:
 8008278:	898a      	ldrh	r2, [r1, #12]
 800827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827e:	4605      	mov	r5, r0
 8008280:	0710      	lsls	r0, r2, #28
 8008282:	460c      	mov	r4, r1
 8008284:	d458      	bmi.n	8008338 <__sflush_r+0xc0>
 8008286:	684b      	ldr	r3, [r1, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	dc05      	bgt.n	8008298 <__sflush_r+0x20>
 800828c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800828e:	2b00      	cmp	r3, #0
 8008290:	dc02      	bgt.n	8008298 <__sflush_r+0x20>
 8008292:	2000      	movs	r0, #0
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800829a:	2e00      	cmp	r6, #0
 800829c:	d0f9      	beq.n	8008292 <__sflush_r+0x1a>
 800829e:	2300      	movs	r3, #0
 80082a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082a4:	682f      	ldr	r7, [r5, #0]
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	d032      	beq.n	8008310 <__sflush_r+0x98>
 80082aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	075a      	lsls	r2, r3, #29
 80082b0:	d505      	bpl.n	80082be <__sflush_r+0x46>
 80082b2:	6863      	ldr	r3, [r4, #4]
 80082b4:	1ac0      	subs	r0, r0, r3
 80082b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082b8:	b10b      	cbz	r3, 80082be <__sflush_r+0x46>
 80082ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082bc:	1ac0      	subs	r0, r0, r3
 80082be:	2300      	movs	r3, #0
 80082c0:	4602      	mov	r2, r0
 80082c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082c4:	4628      	mov	r0, r5
 80082c6:	6a21      	ldr	r1, [r4, #32]
 80082c8:	47b0      	blx	r6
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	d106      	bne.n	80082de <__sflush_r+0x66>
 80082d0:	6829      	ldr	r1, [r5, #0]
 80082d2:	291d      	cmp	r1, #29
 80082d4:	d82c      	bhi.n	8008330 <__sflush_r+0xb8>
 80082d6:	4a2a      	ldr	r2, [pc, #168]	; (8008380 <__sflush_r+0x108>)
 80082d8:	40ca      	lsrs	r2, r1
 80082da:	07d6      	lsls	r6, r2, #31
 80082dc:	d528      	bpl.n	8008330 <__sflush_r+0xb8>
 80082de:	2200      	movs	r2, #0
 80082e0:	6062      	str	r2, [r4, #4]
 80082e2:	6922      	ldr	r2, [r4, #16]
 80082e4:	04d9      	lsls	r1, r3, #19
 80082e6:	6022      	str	r2, [r4, #0]
 80082e8:	d504      	bpl.n	80082f4 <__sflush_r+0x7c>
 80082ea:	1c42      	adds	r2, r0, #1
 80082ec:	d101      	bne.n	80082f2 <__sflush_r+0x7a>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	b903      	cbnz	r3, 80082f4 <__sflush_r+0x7c>
 80082f2:	6560      	str	r0, [r4, #84]	; 0x54
 80082f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f6:	602f      	str	r7, [r5, #0]
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d0ca      	beq.n	8008292 <__sflush_r+0x1a>
 80082fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008300:	4299      	cmp	r1, r3
 8008302:	d002      	beq.n	800830a <__sflush_r+0x92>
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fae3 	bl	80078d0 <_free_r>
 800830a:	2000      	movs	r0, #0
 800830c:	6360      	str	r0, [r4, #52]	; 0x34
 800830e:	e7c1      	b.n	8008294 <__sflush_r+0x1c>
 8008310:	6a21      	ldr	r1, [r4, #32]
 8008312:	2301      	movs	r3, #1
 8008314:	4628      	mov	r0, r5
 8008316:	47b0      	blx	r6
 8008318:	1c41      	adds	r1, r0, #1
 800831a:	d1c7      	bne.n	80082ac <__sflush_r+0x34>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0c4      	beq.n	80082ac <__sflush_r+0x34>
 8008322:	2b1d      	cmp	r3, #29
 8008324:	d001      	beq.n	800832a <__sflush_r+0xb2>
 8008326:	2b16      	cmp	r3, #22
 8008328:	d101      	bne.n	800832e <__sflush_r+0xb6>
 800832a:	602f      	str	r7, [r5, #0]
 800832c:	e7b1      	b.n	8008292 <__sflush_r+0x1a>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	e7ad      	b.n	8008294 <__sflush_r+0x1c>
 8008338:	690f      	ldr	r7, [r1, #16]
 800833a:	2f00      	cmp	r7, #0
 800833c:	d0a9      	beq.n	8008292 <__sflush_r+0x1a>
 800833e:	0793      	lsls	r3, r2, #30
 8008340:	bf18      	it	ne
 8008342:	2300      	movne	r3, #0
 8008344:	680e      	ldr	r6, [r1, #0]
 8008346:	bf08      	it	eq
 8008348:	694b      	ldreq	r3, [r1, #20]
 800834a:	eba6 0807 	sub.w	r8, r6, r7
 800834e:	600f      	str	r7, [r1, #0]
 8008350:	608b      	str	r3, [r1, #8]
 8008352:	f1b8 0f00 	cmp.w	r8, #0
 8008356:	dd9c      	ble.n	8008292 <__sflush_r+0x1a>
 8008358:	4643      	mov	r3, r8
 800835a:	463a      	mov	r2, r7
 800835c:	4628      	mov	r0, r5
 800835e:	6a21      	ldr	r1, [r4, #32]
 8008360:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008362:	47b0      	blx	r6
 8008364:	2800      	cmp	r0, #0
 8008366:	dc06      	bgt.n	8008376 <__sflush_r+0xfe>
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	e78e      	b.n	8008294 <__sflush_r+0x1c>
 8008376:	4407      	add	r7, r0
 8008378:	eba8 0800 	sub.w	r8, r8, r0
 800837c:	e7e9      	b.n	8008352 <__sflush_r+0xda>
 800837e:	bf00      	nop
 8008380:	20400001 	.word	0x20400001

08008384 <_fflush_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	690b      	ldr	r3, [r1, #16]
 8008388:	4605      	mov	r5, r0
 800838a:	460c      	mov	r4, r1
 800838c:	b913      	cbnz	r3, 8008394 <_fflush_r+0x10>
 800838e:	2500      	movs	r5, #0
 8008390:	4628      	mov	r0, r5
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	b118      	cbz	r0, 800839e <_fflush_r+0x1a>
 8008396:	6983      	ldr	r3, [r0, #24]
 8008398:	b90b      	cbnz	r3, 800839e <_fflush_r+0x1a>
 800839a:	f000 f887 	bl	80084ac <__sinit>
 800839e:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <_fflush_r+0x6c>)
 80083a0:	429c      	cmp	r4, r3
 80083a2:	d11b      	bne.n	80083dc <_fflush_r+0x58>
 80083a4:	686c      	ldr	r4, [r5, #4]
 80083a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0ef      	beq.n	800838e <_fflush_r+0xa>
 80083ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083b0:	07d0      	lsls	r0, r2, #31
 80083b2:	d404      	bmi.n	80083be <_fflush_r+0x3a>
 80083b4:	0599      	lsls	r1, r3, #22
 80083b6:	d402      	bmi.n	80083be <_fflush_r+0x3a>
 80083b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ba:	f000 f915 	bl	80085e8 <__retarget_lock_acquire_recursive>
 80083be:	4628      	mov	r0, r5
 80083c0:	4621      	mov	r1, r4
 80083c2:	f7ff ff59 	bl	8008278 <__sflush_r>
 80083c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c8:	4605      	mov	r5, r0
 80083ca:	07da      	lsls	r2, r3, #31
 80083cc:	d4e0      	bmi.n	8008390 <_fflush_r+0xc>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	059b      	lsls	r3, r3, #22
 80083d2:	d4dd      	bmi.n	8008390 <_fflush_r+0xc>
 80083d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d6:	f000 f908 	bl	80085ea <__retarget_lock_release_recursive>
 80083da:	e7d9      	b.n	8008390 <_fflush_r+0xc>
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <_fflush_r+0x70>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <_fflush_r+0x62>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7df      	b.n	80083a6 <_fflush_r+0x22>
 80083e6:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <_fflush_r+0x74>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7da      	b.n	80083a6 <_fflush_r+0x22>
 80083f0:	08008ddc 	.word	0x08008ddc
 80083f4:	08008dfc 	.word	0x08008dfc
 80083f8:	08008dbc 	.word	0x08008dbc

080083fc <std>:
 80083fc:	2300      	movs	r3, #0
 80083fe:	b510      	push	{r4, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	e9c0 3300 	strd	r3, r3, [r0]
 8008406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800840a:	6083      	str	r3, [r0, #8]
 800840c:	8181      	strh	r1, [r0, #12]
 800840e:	6643      	str	r3, [r0, #100]	; 0x64
 8008410:	81c2      	strh	r2, [r0, #14]
 8008412:	6183      	str	r3, [r0, #24]
 8008414:	4619      	mov	r1, r3
 8008416:	2208      	movs	r2, #8
 8008418:	305c      	adds	r0, #92	; 0x5c
 800841a:	f7fb fe33 	bl	8004084 <memset>
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <std+0x38>)
 8008420:	6224      	str	r4, [r4, #32]
 8008422:	6263      	str	r3, [r4, #36]	; 0x24
 8008424:	4b04      	ldr	r3, [pc, #16]	; (8008438 <std+0x3c>)
 8008426:	62a3      	str	r3, [r4, #40]	; 0x28
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <std+0x40>)
 800842a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <std+0x44>)
 800842e:	6323      	str	r3, [r4, #48]	; 0x30
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop
 8008434:	0800874d 	.word	0x0800874d
 8008438:	0800876f 	.word	0x0800876f
 800843c:	080087a7 	.word	0x080087a7
 8008440:	080087cb 	.word	0x080087cb

08008444 <_cleanup_r>:
 8008444:	4901      	ldr	r1, [pc, #4]	; (800844c <_cleanup_r+0x8>)
 8008446:	f000 b8af 	b.w	80085a8 <_fwalk_reent>
 800844a:	bf00      	nop
 800844c:	08008385 	.word	0x08008385

08008450 <__sfmoreglue>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	2568      	movs	r5, #104	; 0x68
 8008454:	1e4a      	subs	r2, r1, #1
 8008456:	4355      	muls	r5, r2
 8008458:	460e      	mov	r6, r1
 800845a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800845e:	f7ff fa83 	bl	8007968 <_malloc_r>
 8008462:	4604      	mov	r4, r0
 8008464:	b140      	cbz	r0, 8008478 <__sfmoreglue+0x28>
 8008466:	2100      	movs	r1, #0
 8008468:	e9c0 1600 	strd	r1, r6, [r0]
 800846c:	300c      	adds	r0, #12
 800846e:	60a0      	str	r0, [r4, #8]
 8008470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008474:	f7fb fe06 	bl	8004084 <memset>
 8008478:	4620      	mov	r0, r4
 800847a:	bd70      	pop	{r4, r5, r6, pc}

0800847c <__sfp_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sfp_lock_acquire+0x8>)
 800847e:	f000 b8b3 	b.w	80085e8 <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	2000035c 	.word	0x2000035c

08008488 <__sfp_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sfp_lock_release+0x8>)
 800848a:	f000 b8ae 	b.w	80085ea <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	2000035c 	.word	0x2000035c

08008494 <__sinit_lock_acquire>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sinit_lock_acquire+0x8>)
 8008496:	f000 b8a7 	b.w	80085e8 <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20000357 	.word	0x20000357

080084a0 <__sinit_lock_release>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sinit_lock_release+0x8>)
 80084a2:	f000 b8a2 	b.w	80085ea <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20000357 	.word	0x20000357

080084ac <__sinit>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	f7ff fff0 	bl	8008494 <__sinit_lock_acquire>
 80084b4:	69a3      	ldr	r3, [r4, #24]
 80084b6:	b11b      	cbz	r3, 80084c0 <__sinit+0x14>
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084bc:	f7ff bff0 	b.w	80084a0 <__sinit_lock_release>
 80084c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084c4:	6523      	str	r3, [r4, #80]	; 0x50
 80084c6:	4b13      	ldr	r3, [pc, #76]	; (8008514 <__sinit+0x68>)
 80084c8:	4a13      	ldr	r2, [pc, #76]	; (8008518 <__sinit+0x6c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	bf08      	it	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	4620      	mov	r0, r4
 80084d6:	bf08      	it	eq
 80084d8:	61a3      	streq	r3, [r4, #24]
 80084da:	f000 f81f 	bl	800851c <__sfp>
 80084de:	6060      	str	r0, [r4, #4]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f81b 	bl	800851c <__sfp>
 80084e6:	60a0      	str	r0, [r4, #8]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 f817 	bl	800851c <__sfp>
 80084ee:	2200      	movs	r2, #0
 80084f0:	2104      	movs	r1, #4
 80084f2:	60e0      	str	r0, [r4, #12]
 80084f4:	6860      	ldr	r0, [r4, #4]
 80084f6:	f7ff ff81 	bl	80083fc <std>
 80084fa:	2201      	movs	r2, #1
 80084fc:	2109      	movs	r1, #9
 80084fe:	68a0      	ldr	r0, [r4, #8]
 8008500:	f7ff ff7c 	bl	80083fc <std>
 8008504:	2202      	movs	r2, #2
 8008506:	2112      	movs	r1, #18
 8008508:	68e0      	ldr	r0, [r4, #12]
 800850a:	f7ff ff77 	bl	80083fc <std>
 800850e:	2301      	movs	r3, #1
 8008510:	61a3      	str	r3, [r4, #24]
 8008512:	e7d1      	b.n	80084b8 <__sinit+0xc>
 8008514:	08008964 	.word	0x08008964
 8008518:	08008445 	.word	0x08008445

0800851c <__sfp>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	4607      	mov	r7, r0
 8008520:	f7ff ffac 	bl	800847c <__sfp_lock_acquire>
 8008524:	4b1e      	ldr	r3, [pc, #120]	; (80085a0 <__sfp+0x84>)
 8008526:	681e      	ldr	r6, [r3, #0]
 8008528:	69b3      	ldr	r3, [r6, #24]
 800852a:	b913      	cbnz	r3, 8008532 <__sfp+0x16>
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ffbd 	bl	80084ac <__sinit>
 8008532:	3648      	adds	r6, #72	; 0x48
 8008534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008538:	3b01      	subs	r3, #1
 800853a:	d503      	bpl.n	8008544 <__sfp+0x28>
 800853c:	6833      	ldr	r3, [r6, #0]
 800853e:	b30b      	cbz	r3, 8008584 <__sfp+0x68>
 8008540:	6836      	ldr	r6, [r6, #0]
 8008542:	e7f7      	b.n	8008534 <__sfp+0x18>
 8008544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008548:	b9d5      	cbnz	r5, 8008580 <__sfp+0x64>
 800854a:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <__sfp+0x88>)
 800854c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008550:	60e3      	str	r3, [r4, #12]
 8008552:	6665      	str	r5, [r4, #100]	; 0x64
 8008554:	f000 f847 	bl	80085e6 <__retarget_lock_init_recursive>
 8008558:	f7ff ff96 	bl	8008488 <__sfp_lock_release>
 800855c:	2208      	movs	r2, #8
 800855e:	4629      	mov	r1, r5
 8008560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008568:	6025      	str	r5, [r4, #0]
 800856a:	61a5      	str	r5, [r4, #24]
 800856c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008570:	f7fb fd88 	bl	8004084 <memset>
 8008574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800857c:	4620      	mov	r0, r4
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008580:	3468      	adds	r4, #104	; 0x68
 8008582:	e7d9      	b.n	8008538 <__sfp+0x1c>
 8008584:	2104      	movs	r1, #4
 8008586:	4638      	mov	r0, r7
 8008588:	f7ff ff62 	bl	8008450 <__sfmoreglue>
 800858c:	4604      	mov	r4, r0
 800858e:	6030      	str	r0, [r6, #0]
 8008590:	2800      	cmp	r0, #0
 8008592:	d1d5      	bne.n	8008540 <__sfp+0x24>
 8008594:	f7ff ff78 	bl	8008488 <__sfp_lock_release>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	e7ee      	b.n	800857c <__sfp+0x60>
 800859e:	bf00      	nop
 80085a0:	08008964 	.word	0x08008964
 80085a4:	ffff0001 	.word	0xffff0001

080085a8 <_fwalk_reent>:
 80085a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ac:	4606      	mov	r6, r0
 80085ae:	4688      	mov	r8, r1
 80085b0:	2700      	movs	r7, #0
 80085b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ba:	f1b9 0901 	subs.w	r9, r9, #1
 80085be:	d505      	bpl.n	80085cc <_fwalk_reent+0x24>
 80085c0:	6824      	ldr	r4, [r4, #0]
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	d1f7      	bne.n	80085b6 <_fwalk_reent+0xe>
 80085c6:	4638      	mov	r0, r7
 80085c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085cc:	89ab      	ldrh	r3, [r5, #12]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d907      	bls.n	80085e2 <_fwalk_reent+0x3a>
 80085d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085d6:	3301      	adds	r3, #1
 80085d8:	d003      	beq.n	80085e2 <_fwalk_reent+0x3a>
 80085da:	4629      	mov	r1, r5
 80085dc:	4630      	mov	r0, r6
 80085de:	47c0      	blx	r8
 80085e0:	4307      	orrs	r7, r0
 80085e2:	3568      	adds	r5, #104	; 0x68
 80085e4:	e7e9      	b.n	80085ba <_fwalk_reent+0x12>

080085e6 <__retarget_lock_init_recursive>:
 80085e6:	4770      	bx	lr

080085e8 <__retarget_lock_acquire_recursive>:
 80085e8:	4770      	bx	lr

080085ea <__retarget_lock_release_recursive>:
 80085ea:	4770      	bx	lr

080085ec <__swhatbuf_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	460e      	mov	r6, r1
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	4614      	mov	r4, r2
 80085f6:	2900      	cmp	r1, #0
 80085f8:	461d      	mov	r5, r3
 80085fa:	b096      	sub	sp, #88	; 0x58
 80085fc:	da07      	bge.n	800860e <__swhatbuf_r+0x22>
 80085fe:	2300      	movs	r3, #0
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	89b3      	ldrh	r3, [r6, #12]
 8008604:	061a      	lsls	r2, r3, #24
 8008606:	d410      	bmi.n	800862a <__swhatbuf_r+0x3e>
 8008608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860c:	e00e      	b.n	800862c <__swhatbuf_r+0x40>
 800860e:	466a      	mov	r2, sp
 8008610:	f000 f902 	bl	8008818 <_fstat_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	dbf2      	blt.n	80085fe <__swhatbuf_r+0x12>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800861e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008622:	425a      	negs	r2, r3
 8008624:	415a      	adcs	r2, r3
 8008626:	602a      	str	r2, [r5, #0]
 8008628:	e7ee      	b.n	8008608 <__swhatbuf_r+0x1c>
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	2000      	movs	r0, #0
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	b016      	add	sp, #88	; 0x58
 8008632:	bd70      	pop	{r4, r5, r6, pc}

08008634 <__smakebuf_r>:
 8008634:	898b      	ldrh	r3, [r1, #12]
 8008636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008638:	079d      	lsls	r5, r3, #30
 800863a:	4606      	mov	r6, r0
 800863c:	460c      	mov	r4, r1
 800863e:	d507      	bpl.n	8008650 <__smakebuf_r+0x1c>
 8008640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	2301      	movs	r3, #1
 800864a:	6163      	str	r3, [r4, #20]
 800864c:	b002      	add	sp, #8
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	466a      	mov	r2, sp
 8008652:	ab01      	add	r3, sp, #4
 8008654:	f7ff ffca 	bl	80085ec <__swhatbuf_r>
 8008658:	9900      	ldr	r1, [sp, #0]
 800865a:	4605      	mov	r5, r0
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff f983 	bl	8007968 <_malloc_r>
 8008662:	b948      	cbnz	r0, 8008678 <__smakebuf_r+0x44>
 8008664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008668:	059a      	lsls	r2, r3, #22
 800866a:	d4ef      	bmi.n	800864c <__smakebuf_r+0x18>
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	f043 0302 	orr.w	r3, r3, #2
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	e7e3      	b.n	8008640 <__smakebuf_r+0xc>
 8008678:	4b0d      	ldr	r3, [pc, #52]	; (80086b0 <__smakebuf_r+0x7c>)
 800867a:	62b3      	str	r3, [r6, #40]	; 0x28
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	6020      	str	r0, [r4, #0]
 8008680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	9b00      	ldr	r3, [sp, #0]
 8008688:	6120      	str	r0, [r4, #16]
 800868a:	6163      	str	r3, [r4, #20]
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	b15b      	cbz	r3, 80086a8 <__smakebuf_r+0x74>
 8008690:	4630      	mov	r0, r6
 8008692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008696:	f000 f8d1 	bl	800883c <_isatty_r>
 800869a:	b128      	cbz	r0, 80086a8 <__smakebuf_r+0x74>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	89a0      	ldrh	r0, [r4, #12]
 80086aa:	4305      	orrs	r5, r0
 80086ac:	81a5      	strh	r5, [r4, #12]
 80086ae:	e7cd      	b.n	800864c <__smakebuf_r+0x18>
 80086b0:	08008445 	.word	0x08008445

080086b4 <_malloc_usable_size_r>:
 80086b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b8:	1f18      	subs	r0, r3, #4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbc      	itt	lt
 80086be:	580b      	ldrlt	r3, [r1, r0]
 80086c0:	18c0      	addlt	r0, r0, r3
 80086c2:	4770      	bx	lr

080086c4 <_raise_r>:
 80086c4:	291f      	cmp	r1, #31
 80086c6:	b538      	push	{r3, r4, r5, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	d904      	bls.n	80086d8 <_raise_r+0x14>
 80086ce:	2316      	movs	r3, #22
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086da:	b112      	cbz	r2, 80086e2 <_raise_r+0x1e>
 80086dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e0:	b94b      	cbnz	r3, 80086f6 <_raise_r+0x32>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f830 	bl	8008748 <_getpid_r>
 80086e8:	462a      	mov	r2, r5
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f2:	f000 b817 	b.w	8008724 <_kill_r>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d00a      	beq.n	8008710 <_raise_r+0x4c>
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	d103      	bne.n	8008706 <_raise_r+0x42>
 80086fe:	2316      	movs	r3, #22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	e7e7      	b.n	80086d6 <_raise_r+0x12>
 8008706:	2400      	movs	r4, #0
 8008708:	4628      	mov	r0, r5
 800870a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800870e:	4798      	blx	r3
 8008710:	2000      	movs	r0, #0
 8008712:	e7e0      	b.n	80086d6 <_raise_r+0x12>

08008714 <raise>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <raise+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f7ff bfd3 	b.w	80086c4 <_raise_r>
 800871e:	bf00      	nop
 8008720:	2000000c 	.word	0x2000000c

08008724 <_kill_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	2300      	movs	r3, #0
 8008728:	4d06      	ldr	r5, [pc, #24]	; (8008744 <_kill_r+0x20>)
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	f7f9 f97f 	bl	8001a34 <_kill>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d102      	bne.n	8008740 <_kill_r+0x1c>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	b103      	cbz	r3, 8008740 <_kill_r+0x1c>
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	20000350 	.word	0x20000350

08008748 <_getpid_r>:
 8008748:	f7f9 b96d 	b.w	8001a26 <_getpid>

0800874c <__sread>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	f000 f894 	bl	8008880 <_read_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	bfab      	itete	ge
 800875c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875e:	89a3      	ldrhlt	r3, [r4, #12]
 8008760:	181b      	addge	r3, r3, r0
 8008762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008766:	bfac      	ite	ge
 8008768:	6563      	strge	r3, [r4, #84]	; 0x54
 800876a:	81a3      	strhlt	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__swrite>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	461f      	mov	r7, r3
 8008774:	898b      	ldrh	r3, [r1, #12]
 8008776:	4605      	mov	r5, r0
 8008778:	05db      	lsls	r3, r3, #23
 800877a:	460c      	mov	r4, r1
 800877c:	4616      	mov	r6, r2
 800877e:	d505      	bpl.n	800878c <__swrite+0x1e>
 8008780:	2302      	movs	r3, #2
 8008782:	2200      	movs	r2, #0
 8008784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008788:	f000 f868 	bl	800885c <_lseek_r>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	4632      	mov	r2, r6
 8008790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	4628      	mov	r0, r5
 8008798:	463b      	mov	r3, r7
 800879a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800879e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	f000 b817 	b.w	80087d4 <_write_r>

080087a6 <__sseek>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 f855 	bl	800885c <_lseek_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	bf15      	itete	ne
 80087b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strheq	r3, [r4, #12]
 80087c4:	bf18      	it	ne
 80087c6:	81a3      	strhne	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__sclose>:
 80087ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ce:	f000 b813 	b.w	80087f8 <_close_r>
	...

080087d4 <_write_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	4611      	mov	r1, r2
 80087dc:	2200      	movs	r2, #0
 80087de:	4d05      	ldr	r5, [pc, #20]	; (80087f4 <_write_r+0x20>)
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7f9 f95d 	bl	8001aa2 <_write>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_write_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_write_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000350 	.word	0x20000350

080087f8 <_close_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	2300      	movs	r3, #0
 80087fc:	4d05      	ldr	r5, [pc, #20]	; (8008814 <_close_r+0x1c>)
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	f7f9 f969 	bl	8001ada <_close>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_close_r+0x1a>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_close_r+0x1a>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	20000350 	.word	0x20000350

08008818 <_fstat_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	2300      	movs	r3, #0
 800881c:	4d06      	ldr	r5, [pc, #24]	; (8008838 <_fstat_r+0x20>)
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f7f9 f963 	bl	8001af0 <_fstat>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_fstat_r+0x1c>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b103      	cbz	r3, 8008834 <_fstat_r+0x1c>
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20000350 	.word	0x20000350

0800883c <_isatty_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	2300      	movs	r3, #0
 8008840:	4d05      	ldr	r5, [pc, #20]	; (8008858 <_isatty_r+0x1c>)
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f9 f961 	bl	8001b0e <_isatty>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_isatty_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_isatty_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000350 	.word	0x20000350

0800885c <_lseek_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	2200      	movs	r2, #0
 8008866:	4d05      	ldr	r5, [pc, #20]	; (800887c <_lseek_r+0x20>)
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7f9 f959 	bl	8001b22 <_lseek>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_lseek_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_lseek_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000350 	.word	0x20000350

08008880 <_read_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	2200      	movs	r2, #0
 800888a:	4d05      	ldr	r5, [pc, #20]	; (80088a0 <_read_r+0x20>)
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f9 f8ea 	bl	8001a68 <_read>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_read_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_read_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20000350 	.word	0x20000350

080088a4 <_init>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	bf00      	nop
 80088a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088aa:	bc08      	pop	{r3}
 80088ac:	469e      	mov	lr, r3
 80088ae:	4770      	bx	lr

080088b0 <_fini>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr
