
adc_ispagro_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08007b48  08007b48  00017b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800806c  0800806c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800806c  0800806c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800806c  0800806c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800806c  0800806c  0001806c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e0  08008254  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08008254  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6a  00000000  00000000  00028dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018471  00000000  00000000  0002b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ae5  00000000  00000000  00043be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008883e  00000000  00000000  0004c6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  000d4f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b2c 	.word	0x08007b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007b2c 	.word	0x08007b2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	460c      	mov	r4, r1
 8000c58:	4605      	mov	r5, r0
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	f7ff feab 	bl	80009bc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x20>
 8000c68:	4628      	mov	r0, r5
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4628      	mov	r0, r5
 8000c76:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fc21 	bl	80004d8 <__aeabi_dmul>
 8000c96:	f7ff fef7 	bl	8000a88 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fba2 	bl	80003e4 <__aeabi_ui2d>
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca4:	f7ff fc18 	bl	80004d8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fa5a 	bl	8000168 <__aeabi_dsub>
 8000cb4:	f7ff fee8 	bl	8000a88 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cce:	f000 fc9b 	bl	8001608 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cd2:	f000 f94f 	bl	8000f74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd6:	f000 fa4f 	bl	8001178 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000cda:	f000 f9a7 	bl	800102c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000cde:	f000 f9e3 	bl	80010a8 <MX_ADC2_Init>
	MX_USART1_UART_Init();
 8000ce2:	f000 fa1f 	bl	8001124 <MX_USART1_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_ADC_Start(&hadc1);
 8000ce6:	4890      	ldr	r0, [pc, #576]	; (8000f28 <main+0x260>)
 8000ce8:	f000 fdc8 	bl	800187c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	488d      	ldr	r0, [pc, #564]	; (8000f28 <main+0x260>)
 8000cf2:	f000 fe71 	bl	80019d8 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8000cf6:	488c      	ldr	r0, [pc, #560]	; (8000f28 <main+0x260>)
 8000cf8:	f000 ff74 	bl	8001be4 <HAL_ADC_GetValue>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <main+0x264>)
 8000d02:	801a      	strh	r2, [r3, #0]
		Main_volt = (raw * 3.3) / 4096.0;
 8000d04:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <main+0x264>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb7b 	bl	8000404 <__aeabi_i2d>
 8000d0e:	a380      	add	r3, pc, #512	; (adr r3, 8000f10 <main+0x248>)
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f7ff fbe0 	bl	80004d8 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b82      	ldr	r3, [pc, #520]	; (8000f30 <main+0x268>)
 8000d26:	f7ff fd01 	bl	800072c <__aeabi_ddiv>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff fec9 	bl	8000ac8 <__aeabi_d2f>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <main+0x26c>)
 8000d3a:	6013      	str	r3, [r2, #0]
		temp = Main_volt * 7.69;
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <main+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fb71 	bl	8000428 <__aeabi_f2d>
 8000d46:	a374      	add	r3, pc, #464	; (adr r3, 8000f18 <main+0x250>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fbc4 	bl	80004d8 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff feb6 	bl	8000ac8 <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a76      	ldr	r2, [pc, #472]	; (8000f38 <main+0x270>)
 8000d60:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc2);
 8000d62:	4876      	ldr	r0, [pc, #472]	; (8000f3c <main+0x274>)
 8000d64:	f000 fd8a 	bl	800187c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	4873      	ldr	r0, [pc, #460]	; (8000f3c <main+0x274>)
 8000d6e:	f000 fe33 	bl	80019d8 <HAL_ADC_PollForConversion>
		raw1 = HAL_ADC_GetValue(&hadc2);
 8000d72:	4872      	ldr	r0, [pc, #456]	; (8000f3c <main+0x274>)
 8000d74:	f000 ff36 	bl	8001be4 <HAL_ADC_GetValue>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b70      	ldr	r3, [pc, #448]	; (8000f40 <main+0x278>)
 8000d7e:	801a      	strh	r2, [r3, #0]
		Bat_val = (raw1 * 3.3) / 4096.0;
 8000d80:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <main+0x278>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb3d 	bl	8000404 <__aeabi_i2d>
 8000d8a:	a361      	add	r3, pc, #388	; (adr r3, 8000f10 <main+0x248>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fba2 	bl	80004d8 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <main+0x268>)
 8000da2:	f7ff fcc3 	bl	800072c <__aeabi_ddiv>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fe8b 	bl	8000ac8 <__aeabi_d2f>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a63      	ldr	r2, [pc, #396]	; (8000f44 <main+0x27c>)
 8000db6:	6013      	str	r3, [r2, #0]
		temp1 = (Bat_val * 7.98);
 8000db8:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <main+0x27c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb33 	bl	8000428 <__aeabi_f2d>
 8000dc2:	a357      	add	r3, pc, #348	; (adr r3, 8000f20 <main+0x258>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fb86 	bl	80004d8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff fe78 	bl	8000ac8 <__aeabi_d2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a5b      	ldr	r2, [pc, #364]	; (8000f48 <main+0x280>)
 8000ddc:	6013      	str	r3, [r2, #0]

		if ((temp > 20) && (temp1 > 21)) {
 8000dde:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <main+0x270>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	495a      	ldr	r1, [pc, #360]	; (8000f4c <main+0x284>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff2b 	bl	8000c40 <__aeabi_fcmpgt>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <main+0x14a>
 8000df0:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <main+0x280>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4956      	ldr	r1, [pc, #344]	; (8000f50 <main+0x288>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff22 	bl	8000c40 <__aeabi_fcmpgt>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <main+0x14a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2108      	movs	r1, #8
 8000e06:	4853      	ldr	r0, [pc, #332]	; (8000f54 <main+0x28c>)
 8000e08:	f001 faf4 	bl	80023f4 <HAL_GPIO_WritePin>
			both_are_on = 1;
 8000e0c:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <main+0x290>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]

		}
		 while ((temp < 17) && (both_are_on == 1)) {
 8000e12:	e06f      	b.n	8000ef4 <main+0x22c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2108      	movs	r1, #8
 8000e18:	484e      	ldr	r0, [pc, #312]	; (8000f54 <main+0x28c>)
 8000e1a:	f001 faeb 	bl	80023f4 <HAL_GPIO_WritePin>
			power_failure = 1;
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <main+0x294>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
			sprintf(msg,
 8000e24:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <main+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fafd 	bl	8000428 <__aeabi_f2d>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	460d      	mov	r5, r1
 8000e32:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <main+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff faf6 	bl	8000428 <__aeabi_f2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4945      	ldr	r1, [pc, #276]	; (8000f58 <main+0x290>)
 8000e42:	6809      	ldr	r1, [r1, #0]
 8000e44:	4845      	ldr	r0, [pc, #276]	; (8000f5c <main+0x294>)
 8000e46:	6800      	ldr	r0, [r0, #0]
 8000e48:	4e45      	ldr	r6, [pc, #276]	; (8000f60 <main+0x298>)
 8000e4a:	6836      	ldr	r6, [r6, #0]
 8000e4c:	9604      	str	r6, [sp, #16]
 8000e4e:	9003      	str	r0, [sp, #12]
 8000e50:	9102      	str	r1, [sp, #8]
 8000e52:	e9cd 2300 	strd	r2, r3, [sp]
 8000e56:	4622      	mov	r2, r4
 8000e58:	462b      	mov	r3, r5
 8000e5a:	4942      	ldr	r1, [pc, #264]	; (8000f64 <main+0x29c>)
 8000e5c:	4842      	ldr	r0, [pc, #264]	; (8000f68 <main+0x2a0>)
 8000e5e:	f003 f8d5 	bl	800400c <siprintf>
					"main=%f,bat= %f,both=%d,Powerfail=%d, changeover=%d\r\n",
					temp, temp1, both_are_on, power_failure, change_over);
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 100);
 8000e62:	4841      	ldr	r0, [pc, #260]	; (8000f68 <main+0x2a0>)
 8000e64:	f7ff f974 	bl	8000150 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	493e      	ldr	r1, [pc, #248]	; (8000f68 <main+0x2a0>)
 8000e70:	483e      	ldr	r0, [pc, #248]	; (8000f6c <main+0x2a4>)
 8000e72:	f002 f8b8 	bl	8002fe6 <HAL_UART_Transmit>

			while ((power_failure == 1)&& (temp1<21)) {
 8000e76:	e030      	b.n	8000eda <main+0x212>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4835      	ldr	r0, [pc, #212]	; (8000f54 <main+0x28c>)
 8000e7e:	f001 fab9 	bl	80023f4 <HAL_GPIO_WritePin>
				change_over = 1;
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <main+0x298>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
				sprintf(msg,
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <main+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff facb 	bl	8000428 <__aeabi_f2d>
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <main+0x280>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fac4 	bl	8000428 <__aeabi_f2d>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	492c      	ldr	r1, [pc, #176]	; (8000f58 <main+0x290>)
 8000ea6:	6809      	ldr	r1, [r1, #0]
 8000ea8:	482c      	ldr	r0, [pc, #176]	; (8000f5c <main+0x294>)
 8000eaa:	6800      	ldr	r0, [r0, #0]
 8000eac:	4e2c      	ldr	r6, [pc, #176]	; (8000f60 <main+0x298>)
 8000eae:	6836      	ldr	r6, [r6, #0]
 8000eb0:	9604      	str	r6, [sp, #16]
 8000eb2:	9003      	str	r0, [sp, #12]
 8000eb4:	9102      	str	r1, [sp, #8]
 8000eb6:	e9cd 2300 	strd	r2, r3, [sp]
 8000eba:	4622      	mov	r2, r4
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	4929      	ldr	r1, [pc, #164]	; (8000f64 <main+0x29c>)
 8000ec0:	4829      	ldr	r0, [pc, #164]	; (8000f68 <main+0x2a0>)
 8000ec2:	f003 f8a3 	bl	800400c <siprintf>
						"main=%f,bat= %f,both=%d,Powerfail=%d, changeover=%d\r\n",
						temp, temp1, both_are_on, power_failure, change_over);
				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 100);
 8000ec6:	4828      	ldr	r0, [pc, #160]	; (8000f68 <main+0x2a0>)
 8000ec8:	f7ff f942 	bl	8000150 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	4925      	ldr	r1, [pc, #148]	; (8000f68 <main+0x2a0>)
 8000ed4:	4825      	ldr	r0, [pc, #148]	; (8000f6c <main+0x2a4>)
 8000ed6:	f002 f886 	bl	8002fe6 <HAL_UART_Transmit>
			while ((power_failure == 1)&& (temp1<21)) {
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <main+0x294>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <main+0x22c>
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <main+0x280>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	491a      	ldr	r1, [pc, #104]	; (8000f50 <main+0x288>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe8b 	bl	8000c04 <__aeabi_fcmplt>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1c1      	bne.n	8000e78 <main+0x1b0>
		 while ((temp < 17) && (both_are_on == 1)) {
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <main+0x270>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	491d      	ldr	r1, [pc, #116]	; (8000f70 <main+0x2a8>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe82 	bl	8000c04 <__aeabi_fcmplt>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <main+0x246>
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <main+0x290>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d082      	beq.n	8000e14 <main+0x14c>
		HAL_ADC_Start(&hadc1);
 8000f0e:	e6ea      	b.n	8000ce6 <main+0x1e>
 8000f10:	66666666 	.word	0x66666666
 8000f14:	400a6666 	.word	0x400a6666
 8000f18:	5c28f5c3 	.word	0x5c28f5c3
 8000f1c:	401ec28f 	.word	0x401ec28f
 8000f20:	1eb851ec 	.word	0x1eb851ec
 8000f24:	401feb85 	.word	0x401feb85
 8000f28:	200002b4 	.word	0x200002b4
 8000f2c:	2000032e 	.word	0x2000032e
 8000f30:	40b00000 	.word	0x40b00000
 8000f34:	20000248 	.word	0x20000248
 8000f38:	200002b0 	.word	0x200002b0
 8000f3c:	20000218 	.word	0x20000218
 8000f40:	2000032c 	.word	0x2000032c
 8000f44:	20000214 	.word	0x20000214
 8000f48:	200002e4 	.word	0x200002e4
 8000f4c:	41a00000 	.word	0x41a00000
 8000f50:	41a80000 	.word	0x41a80000
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	200001fc 	.word	0x200001fc
 8000f5c:	20000200 	.word	0x20000200
 8000f60:	20000204 	.word	0x20000204
 8000f64:	08007b48 	.word	0x08007b48
 8000f68:	2000024c 	.word	0x2000024c
 8000f6c:	200002e8 	.word	0x200002e8
 8000f70:	41880000 	.word	0x41880000

08000f74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 f9c4 	bl	8003310 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fa2a 	bl	8002424 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x66>
		Error_Handler();
 8000fd6:	f000 f919 	bl	800120c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fc94 	bl	8002924 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x92>
		Error_Handler();
 8001002:	f000 f903 	bl	800120c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001006:	2302      	movs	r3, #2
 8001008:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800100a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe20 	bl	8002c58 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xae>
		Error_Handler();
 800101e:	f000 f8f5 	bl	800120c <Error_Handler>
	}
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_ADC1_Init+0x74>)
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_ADC1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_ADC1_Init+0x74>)
 800104a:	2201      	movs	r2, #1
 800104c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_ADC1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_ADC1_Init+0x74>)
 8001056:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800105a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_ADC1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_ADC1_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_ADC1_Init+0x74>)
 800106a:	f000 fb2f 	bl	80016cc <HAL_ADC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001074:	f000 f8ca 	bl	800120c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800107c:	2301      	movs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_ADC1_Init+0x74>)
 800108a:	f000 fdb7 	bl	8001bfc <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001094:	f000 f8ba 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002b4 	.word	0x200002b4
 80010a4:	40012400 	.word	0x40012400

080010a8 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_ADC2_Init+0x74>)
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_ADC2_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_ADC2_Init+0x74>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_ADC2_Init+0x74>)
 80010d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010d6:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_ADC2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC2_Init+0x74>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_ADC2_Init+0x74>)
 80010e6:	f000 faf1 	bl	80016cc <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC2_Init+0x4c>
		Error_Handler();
 80010f0:	f000 f88c 	bl	800120c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC2_Init+0x74>)
 8001106:	f000 fd79 	bl	8001bfc <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC2_Init+0x6c>
		Error_Handler();
 8001110:	f000 f87c 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000218 	.word	0x20000218
 8001120:	40012800 	.word	0x40012800

08001124 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART1_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800115c:	f001 fef6 	bl	8002f4c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001166:	f000 f851 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002e8 	.word	0x200002e8
 8001174:	40013800 	.word	0x40013800

08001178 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_GPIO_Init+0x8c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <MX_GPIO_Init+0x8c>)
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_GPIO_Init+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a10      	ldr	r2, [pc, #64]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0x8c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2108      	movs	r1, #8
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0x90>)
 80011da:	f001 f90b 	bl	80023f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011de:	2308      	movs	r3, #8
 80011e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0x90>)
 80011f6:	f000 ff79 	bl	80020ec <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010c00 	.word	0x40010c00

0800120c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_MspInit+0x5c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x5c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MspInit+0x60>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_MspInit+0x60>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_ADC_MspInit+0xbc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d122      	bne.n	80012e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_ADC_MspInit+0xc0>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012dc:	f000 ff06 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012e0:	e026      	b.n	8001330 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d121      	bne.n	8001330 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_ADC_MspInit+0xc0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_ADC_MspInit+0xc0>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_ADC_MspInit+0xc0>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_ADC_MspInit+0xc0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131c:	2304      	movs	r3, #4
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 800132c:	f000 fede 	bl	80020ec <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40012400 	.word	0x40012400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40012800 	.word	0x40012800

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_UART_MspInit+0x8c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d131      	bne.n	80013cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <HAL_UART_MspInit+0x94>)
 80013ae:	f000 fe9d 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_UART_MspInit+0x94>)
 80013c8:	f000 fe90 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 f935 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}

0800142e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
	return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <_kill>:

int _kill(int pid, int sig)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001446:	f001 ff39 	bl	80032bc <__errno>
 800144a:	4603      	mov	r3, r0
 800144c:	2216      	movs	r2, #22
 800144e:	601a      	str	r2, [r3, #0]
	return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_exit>:

void _exit (int status)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffe7 	bl	800143c <_kill>
	while (1) {}		/* Make sure we hang here */
 800146e:	e7fe      	b.n	800146e <_exit+0x12>

08001470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
	}
	return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001508:	605a      	str	r2, [r3, #4]
	return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f001 fea2 	bl	80032bc <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20005000 	.word	0x20005000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	20000208 	.word	0x20000208
 80015ac:	20000348 	.word	0x20000348

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff ffe5 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f001 fe6f 	bl	80032c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fb6d 	bl	8000cc8 <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80015f8:	08008074 	.word	0x08008074
  ldr r2, =_sbss
 80015fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001600:	20000344 	.word	0x20000344

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fd33 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fdf8 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd3d 	bl	80020d2 <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 fd13 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	20000008 	.word	0x20000008
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000330 	.word	0x20000330

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000330 	.word	0x20000330

080016cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0be      	b.n	800186c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fdb6 	bl	800127c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fbc5 	bl	8001ea0 <ADC_ConversionStop_Disable>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8099 	bne.w	800185a <HAL_ADC_Init+0x18e>
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 8095 	bne.w	800185a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001738:	f023 0302 	bic.w	r3, r3, #2
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7b1b      	ldrb	r3, [r3, #12]
 8001752:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001754:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4313      	orrs	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001764:	d003      	beq.n	800176e <HAL_ADC_Init+0xa2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HAL_ADC_Init+0xa8>
 800176e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001772:	e000      	b.n	8001776 <HAL_ADC_Init+0xaa>
 8001774:	2300      	movs	r3, #0
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7d1b      	ldrb	r3, [r3, #20]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d119      	bne.n	80017b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7b1b      	ldrb	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	3b01      	subs	r3, #1
 8001792:	035a      	lsls	r2, r3, #13
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00b      	b.n	80017b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_ADC_Init+0x1a8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e8:	d003      	beq.n	80017f2 <HAL_ADC_Init+0x126>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d104      	bne.n	80017fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_ADC_Init+0x1ac>)
 8001818:	4013      	ands	r3, r2
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	429a      	cmp	r2, r3
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001836:	e018      	b.n	800186a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f023 0312 	bic.w	r3, r3, #18
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001858:	e007      	b.n	800186a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	f043 0210 	orr.w	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	ffe1f7fd 	.word	0xffe1f7fd
 8001878:	ff1f0efe 	.word	0xff1f0efe

0800187c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Start+0x1a>
 8001892:	2302      	movs	r3, #2
 8001894:	e098      	b.n	80019c8 <HAL_ADC_Start+0x14c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 faa4 	bl	8001dec <ADC_Enable>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8087 	bne.w	80019be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a41      	ldr	r2, [pc, #260]	; (80019d0 <HAL_ADC_Start+0x154>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d105      	bne.n	80018da <HAL_ADC_Start+0x5e>
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_ADC_Start+0x158>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d026      	beq.n	8001942 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001904:	e01d      	b.n	8001942 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <HAL_ADC_Start+0x158>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_ADC_Start+0xaa>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <HAL_ADC_Start+0x154>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10d      	bne.n	8001942 <HAL_ADC_Start+0xc6>
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_ADC_Start+0x158>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f023 0206 	bic.w	r2, r3, #6
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
 800195a:	e002      	b.n	8001962 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0202 	mvn.w	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800197e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001982:	d113      	bne.n	80019ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_ADC_Start+0x154>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_ADC_Start+0x158>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	e00c      	b.n	80019c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e003      	b.n	80019c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40012800 	.word	0x40012800
 80019d4:	40012400 	.word	0x40012400

080019d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019ee:	f7ff fe63 	bl	80016b8 <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0d3      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d131      	bne.n	8001a8c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12a      	bne.n	8001a8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a36:	e021      	b.n	8001a7c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3e:	d01d      	beq.n	8001a7c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_ADC_PollForConversion+0x7e>
 8001a46:	f7ff fe37 	bl	80016b8 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d212      	bcs.n	8001a7c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10b      	bne.n	8001a7c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0a2      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0d6      	beq.n	8001a38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8a:	e070      	b.n	8001b6e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a8c:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <HAL_ADC_PollForConversion+0x1f4>)
 8001a8e:	681c      	ldr	r4, [r3, #0]
 8001a90:	2002      	movs	r0, #2
 8001a92:	f001 f997 	bl	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_ADC_PollForConversion+0x1f8>)
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_ADC_PollForConversion+0x104>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68d9      	ldr	r1, [r3, #12]
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <HAL_ADC_PollForConversion+0x1fc>)
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d111      	bne.n	8001adc <HAL_ADC_PollForConversion+0x104>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6919      	ldr	r1, [r3, #16]
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <HAL_ADC_PollForConversion+0x200>)
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0x100>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68d9      	ldr	r1, [r3, #12]
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_ADC_PollForConversion+0x204>)
 8001ace:	400b      	ands	r3, r1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0x100>
 8001ad4:	2314      	movs	r3, #20
 8001ad6:	e020      	b.n	8001b1a <HAL_ADC_PollForConversion+0x142>
 8001ad8:	2329      	movs	r3, #41	; 0x29
 8001ada:	e01e      	b.n	8001b1a <HAL_ADC_PollForConversion+0x142>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_ADC_PollForConversion+0x200>)
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_ADC_PollForConversion+0x120>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68d9      	ldr	r1, [r3, #12]
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_ADC_PollForConversion+0x204>)
 8001af2:	400b      	ands	r3, r1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <HAL_ADC_PollForConversion+0x13c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_ADC_PollForConversion+0x208>)
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x140>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_ADC_PollForConversion+0x208>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x140>
 8001b14:	2354      	movs	r3, #84	; 0x54
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_PollForConversion+0x142>
 8001b18:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b20:	e021      	b.n	8001b66 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d01a      	beq.n	8001b60 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_ADC_PollForConversion+0x168>
 8001b30:	f7ff fdc2 	bl	80016b8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d20f      	bcs.n	8001b60 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d90b      	bls.n	8001b60 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f043 0204 	orr.w	r2, r3, #4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e030      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8d9      	bhi.n	8001b22 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0212 	mvn.w	r2, #18
 8001b76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b92:	d115      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	24924924 	.word	0x24924924
 8001bd4:	00924924 	.word	0x00924924
 8001bd8:	12492492 	.word	0x12492492
 8001bdc:	00492492 	.word	0x00492492
 8001be0:	00249249 	.word	0x00249249

08001be4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x20>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0dc      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x1da>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d81c      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b05      	subs	r3, #5
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4019      	ands	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b05      	subs	r3, #5
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
 8001c64:	e03c      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d81c      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	; 0x23
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4019      	ands	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b23      	subs	r3, #35	; 0x23
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca6:	e01b      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b41      	subs	r3, #65	; 0x41
 8001cba:	221f      	movs	r2, #31
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b41      	subs	r3, #65	; 0x41
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d91c      	bls.n	8001d22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	3b1e      	subs	r3, #30
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	e019      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6919      	ldr	r1, [r3, #16]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	2207      	movs	r2, #7
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6898      	ldr	r0, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d003      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d132      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d125      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d126      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d11a      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9a      	lsrs	r2, r3, #18
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x1b2>
 8001dba:	e007      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012400 	.word	0x40012400
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d040      	beq.n	8001e8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <ADC_Enable+0xac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <ADC_Enable+0xb0>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	0c9b      	lsrs	r3, r3, #18
 8001e26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e28:	e002      	b.n	8001e30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f9      	bne.n	8001e2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e36:	f7ff fc3f 	bl	80016b8 <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e3c:	e01f      	b.n	8001e7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e3e:	f7ff fc3b 	bl	80016b8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d918      	bls.n	8001e7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d011      	beq.n	8001e7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d1d8      	bne.n	8001e3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	431bde83 	.word	0x431bde83

08001ea0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d12e      	bne.n	8001f18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eca:	f7ff fbf5 	bl	80016b8 <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	e01b      	b.n	8001f0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ed2:	f7ff fbf1 	bl	80016b8 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d914      	bls.n	8001f0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10d      	bne.n	8001f0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d0dc      	beq.n	8001ed2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff90 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff49 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff5e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff90 	bl	8001fdc <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5f 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffb0 	bl	8002040 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08b      	sub	sp, #44	; 0x2c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e169      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002100:	2201      	movs	r2, #1
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8158 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a9a      	ldr	r2, [pc, #616]	; (800238c <HAL_GPIO_Init+0x2a0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d05e      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002128:	4a98      	ldr	r2, [pc, #608]	; (800238c <HAL_GPIO_Init+0x2a0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d875      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800212e:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d058      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002134:	4a96      	ldr	r2, [pc, #600]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d86f      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800213a:	4a96      	ldr	r2, [pc, #600]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d052      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d869      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002146:	4a94      	ldr	r2, [pc, #592]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04c      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d863      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002152:	4a92      	ldr	r2, [pc, #584]	; (800239c <HAL_GPIO_Init+0x2b0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d046      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002158:	4a90      	ldr	r2, [pc, #576]	; (800239c <HAL_GPIO_Init+0x2b0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d85d      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d82a      	bhi.n	80021b8 <HAL_GPIO_Init+0xcc>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d859      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_GPIO_Init+0x80>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021d3 	.word	0x080021d3
 8002178:	08002215 	.word	0x08002215
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800221b 	.word	0x0800221b
 800218c:	0800221b 	.word	0x0800221b
 8002190:	0800221b 	.word	0x0800221b
 8002194:	0800221b 	.word	0x0800221b
 8002198:	0800221b 	.word	0x0800221b
 800219c:	0800221b 	.word	0x0800221b
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800221b 	.word	0x0800221b
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_GPIO_Init+0x2b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021be:	e02c      	b.n	800221a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e029      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e024      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	3308      	adds	r3, #8
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e01f      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	330c      	adds	r3, #12
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e01a      	b.n	800221c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ee:	2304      	movs	r3, #4
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e013      	b.n	800221c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021fc:	2308      	movs	r3, #8
 80021fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	611a      	str	r2, [r3, #16]
          break;
 8002206:	e009      	b.n	800221c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	615a      	str	r2, [r3, #20]
          break;
 8002212:	e003      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x130>
          break;
 800221a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2bff      	cmp	r3, #255	; 0xff
 8002220:	d801      	bhi.n	8002226 <HAL_GPIO_Init+0x13a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e001      	b.n	800222a <HAL_GPIO_Init+0x13e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d802      	bhi.n	8002238 <HAL_GPIO_Init+0x14c>
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x152>
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3b08      	subs	r3, #8
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	210f      	movs	r1, #15
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b1 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800226c:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_GPIO_Init+0x2c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_GPIO_Init+0x1ec>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_GPIO_Init+0x2c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00d      	beq.n	80022d4 <HAL_GPIO_Init+0x1e8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <HAL_GPIO_Init+0x2c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x2cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_GPIO_Init+0x1e0>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e004      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d8:	2300      	movs	r3, #0
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ea:	492f      	ldr	r1, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	492c      	ldr	r1, [pc, #176]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	4928      	ldr	r1, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4918      	ldr	r1, [pc, #96]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x2e2>
 800238a:	bf00      	nop
 800238c:	10320000 	.word	0x10320000
 8002390:	10310000 	.word	0x10310000
 8002394:	10220000 	.word	0x10220000
 8002398:	10210000 	.word	0x10210000
 800239c:	10120000 	.word	0x10120000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ae8e 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	372c      	adds	r7, #44	; 0x2c
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e26c      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00c      	beq.n	800246a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002450:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d112      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
 800245c:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06c      	beq.n	8002550 <HAL_RCC_OscConfig+0x12c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d168      	bne.n	8002550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e246      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x76>
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e02e      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xbc>
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a71      	ldr	r2, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f8da 	bl	80016b8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f8d6 	bl	80016b8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1fa      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xe4>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f8c6 	bl	80016b8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f8c2 	bl	80016b8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1e6      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x10c>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1ba      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4939      	ldr	r1, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff f87b 	bl	80016b8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f877 	bl	80016b8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e19b      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4927      	ldr	r1, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff f85a 	bl	80016b8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f856 	bl	80016b8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e17a      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03a      	beq.n	80026a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7ff f83a 	bl	80016b8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff f836 	bl	80016b8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e15a      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002666:	2001      	movs	r0, #1
 8002668:	f000 fad8 	bl	8002c1c <RCC_Delay>
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7ff f820 	bl	80016b8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267a:	e00f      	b.n	800269c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff f81c 	bl	80016b8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d908      	bls.n	800269c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e140      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	42420000 	.word	0x42420000
 8002698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b9e      	ldr	r3, [pc, #632]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e9      	bne.n	800267c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a6 	beq.w	8002802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b97      	ldr	r3, [pc, #604]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b91      	ldr	r3, [pc, #580]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8a      	ldr	r2, [pc, #552]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe ffdd 	bl	80016b8 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe ffd9 	bl	80016b8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0fd      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x312>
 8002728:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e02d      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x334>
 800273e:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a75      	ldr	r2, [pc, #468]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a72      	ldr	r2, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x356>
 8002760:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a6c      	ldr	r2, [pc, #432]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a66      	ldr	r2, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe ff8d 	bl	80016b8 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe ff89 	bl	80016b8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0ab      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x37e>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe ff77 	bl	80016b8 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe ff73 	bl	80016b8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e095      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b48      	ldr	r3, [pc, #288]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a47      	ldr	r2, [pc, #284]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8081 	beq.w	800290e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d061      	beq.n	80028dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d146      	bne.n	80028ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe ff47 	bl	80016b8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe ff43 	bl	80016b8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e067      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002856:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	492d      	ldr	r1, [pc, #180]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a19      	ldr	r1, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	430b      	orrs	r3, r1
 800287a:	4927      	ldr	r1, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe ff17 	bl	80016b8 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe ff13 	bl	80016b8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e037      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x46a>
 80028ac:	e02f      	b.n	800290e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe ff00 	bl	80016b8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fefc 	bl	80016b8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e020      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x498>
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e013      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	42420060 	.word	0x42420060

08002924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d0      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	4965      	ldr	r1, [pc, #404]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d040      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e073      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4936      	ldr	r1, [pc, #216]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fe50 	bl	80016b8 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fe4c 	bl	80016b8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e053      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d210      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fdae 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08007ba0 	.word	0x08007ba0
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b490      	push	{r4, r7}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b00:	1d3c      	adds	r4, r7, #4
 8002b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b08:	f240 2301 	movw	r3, #513	; 0x201
 8002b0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x40>
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x46>
 8002b36:	e02d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3a:	623b      	str	r3, [r7, #32]
      break;
 8002b3c:	e02d      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0c5b      	lsrs	r3, r3, #17
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	fb02 f203 	mul.w	r2, r2, r3
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e004      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	623b      	str	r3, [r7, #32]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b96:	623b      	str	r3, [r7, #32]
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc90      	pop	{r4, r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	08007b80 	.word	0x08007b80
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	003d0900 	.word	0x003d0900

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff2 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08007bb0 	.word	0x08007bb0

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	0adb      	lsrs	r3, r3, #11
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08007bb0 	.word	0x08007bb0

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000000 	.word	0x20000000
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d07d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	61d3      	str	r3, [r2, #28]
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d118      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fcfe 	bl	80016b8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe fcfa 	bl	80016b8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e06d      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02e      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d027      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe fcc9 	bl	80016b8 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fcc5 	bl	80016b8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e036      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4917      	ldr	r1, [pc, #92]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	490b      	ldr	r1, [pc, #44]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4904      	ldr	r1, [pc, #16]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	42420440 	.word	0x42420440

08002dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b08d      	sub	sp, #52	; 0x34
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002dce:	f107 040c 	add.w	r4, r7, #12
 8002dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dd8:	f240 2301 	movw	r3, #513	; 0x201
 8002ddc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	f200 8091 	bhi.w	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d04c      	beq.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d07c      	beq.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e0c:	e089      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002e0e:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8082 	beq.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e2e:	4413      	add	r3, r2
 8002e30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e34:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d018      	beq.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c5b      	lsrs	r3, r3, #17
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e4e:	4413      	add	r3, r2
 8002e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e60:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	e004      	b.n	8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d102      	bne.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e8e:	e04a      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e9e:	e042      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002ea0:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec2:	e01f      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002edc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eee:	d11c      	bne.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d016      	beq.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002efc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f02:	e012      	b.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002f04:	e011      	b.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f06:	f7ff fe75 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0b9b      	lsrs	r3, r3, #14
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f20:	e004      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f22:	bf00      	nop
 8002f24:	e002      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f2a:	bf00      	nop
    }
  }
  return (frequency);
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3734      	adds	r7, #52	; 0x34
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	08007b90 	.word	0x08007b90
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	003d0900 	.word	0x003d0900
 8002f48:	aaaaaaab 	.word	0xaaaaaaab

08002f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e03f      	b.n	8002fde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe f9e8 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f905 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b08a      	sub	sp, #40	; 0x28
 8002fea:	af02      	add	r7, sp, #8
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	d17c      	bne.n	8003100 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_UART_Transmit+0x2c>
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e075      	b.n	8003102 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit+0x3e>
 8003020:	2302      	movs	r3, #2
 8003022:	e06e      	b.n	8003102 <HAL_UART_Transmit+0x11c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2221      	movs	r2, #33	; 0x21
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800303a:	f7fe fb3d 	bl	80016b8 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d108      	bne.n	8003068 <HAL_UART_Transmit+0x82>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e003      	b.n	8003070 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003078:	e02a      	b.n	80030d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f840 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e036      	b.n	8003102 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3302      	adds	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e007      	b.n	80030c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1cf      	bne.n	800307a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2140      	movs	r1, #64	; 0x40
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f810 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311a:	e02c      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d028      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <UART_WaitOnFlagUntilTimeout+0x30>
 800312a:	f7fe fac5 	bl	80016b8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	429a      	cmp	r2, r3
 8003138:	d21d      	bcs.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003148:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d0c3      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031da:	f023 030c 	bic.w	r3, r3, #12
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	; (80032b4 <UART_SetConfig+0x114>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff fcf4 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff fcdc 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <UART_SetConfig+0x118>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	0119      	lsls	r1, r3, #4
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <UART_SetConfig+0x118>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2064      	movs	r0, #100	; 0x64
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	4419      	add	r1, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <UART_SetConfig+0x118>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	; 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	440a      	add	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40013800 	.word	0x40013800
 80032b8:	51eb851f 	.word	0x51eb851f

080032bc <__errno>:
 80032bc:	4b01      	ldr	r3, [pc, #4]	; (80032c4 <__errno+0x8>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	2000000c 	.word	0x2000000c

080032c8 <__libc_init_array>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	2600      	movs	r6, #0
 80032cc:	4d0c      	ldr	r5, [pc, #48]	; (8003300 <__libc_init_array+0x38>)
 80032ce:	4c0d      	ldr	r4, [pc, #52]	; (8003304 <__libc_init_array+0x3c>)
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	42a6      	cmp	r6, r4
 80032d6:	d109      	bne.n	80032ec <__libc_init_array+0x24>
 80032d8:	f004 fc28 	bl	8007b2c <_init>
 80032dc:	2600      	movs	r6, #0
 80032de:	4d0a      	ldr	r5, [pc, #40]	; (8003308 <__libc_init_array+0x40>)
 80032e0:	4c0a      	ldr	r4, [pc, #40]	; (800330c <__libc_init_array+0x44>)
 80032e2:	1b64      	subs	r4, r4, r5
 80032e4:	10a4      	asrs	r4, r4, #2
 80032e6:	42a6      	cmp	r6, r4
 80032e8:	d105      	bne.n	80032f6 <__libc_init_array+0x2e>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f0:	4798      	blx	r3
 80032f2:	3601      	adds	r6, #1
 80032f4:	e7ee      	b.n	80032d4 <__libc_init_array+0xc>
 80032f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fa:	4798      	blx	r3
 80032fc:	3601      	adds	r6, #1
 80032fe:	e7f2      	b.n	80032e6 <__libc_init_array+0x1e>
 8003300:	0800806c 	.word	0x0800806c
 8003304:	0800806c 	.word	0x0800806c
 8003308:	0800806c 	.word	0x0800806c
 800330c:	08008070 	.word	0x08008070

08003310 <memset>:
 8003310:	4603      	mov	r3, r0
 8003312:	4402      	add	r2, r0
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	f803 1b01 	strb.w	r1, [r3], #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <__cvt>:
 8003320:	2b00      	cmp	r3, #0
 8003322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003326:	461f      	mov	r7, r3
 8003328:	bfbb      	ittet	lt
 800332a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800332e:	461f      	movlt	r7, r3
 8003330:	2300      	movge	r3, #0
 8003332:	232d      	movlt	r3, #45	; 0x2d
 8003334:	b088      	sub	sp, #32
 8003336:	4614      	mov	r4, r2
 8003338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800333a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800333c:	7013      	strb	r3, [r2, #0]
 800333e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003340:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003344:	f023 0820 	bic.w	r8, r3, #32
 8003348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800334c:	d005      	beq.n	800335a <__cvt+0x3a>
 800334e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003352:	d100      	bne.n	8003356 <__cvt+0x36>
 8003354:	3501      	adds	r5, #1
 8003356:	2302      	movs	r3, #2
 8003358:	e000      	b.n	800335c <__cvt+0x3c>
 800335a:	2303      	movs	r3, #3
 800335c:	aa07      	add	r2, sp, #28
 800335e:	9204      	str	r2, [sp, #16]
 8003360:	aa06      	add	r2, sp, #24
 8003362:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003366:	e9cd 3500 	strd	r3, r5, [sp]
 800336a:	4622      	mov	r2, r4
 800336c:	463b      	mov	r3, r7
 800336e:	f001 fd9f 	bl	8004eb0 <_dtoa_r>
 8003372:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003376:	4606      	mov	r6, r0
 8003378:	d102      	bne.n	8003380 <__cvt+0x60>
 800337a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d522      	bpl.n	80033c6 <__cvt+0xa6>
 8003380:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003384:	eb06 0905 	add.w	r9, r6, r5
 8003388:	d110      	bne.n	80033ac <__cvt+0x8c>
 800338a:	7833      	ldrb	r3, [r6, #0]
 800338c:	2b30      	cmp	r3, #48	; 0x30
 800338e:	d10a      	bne.n	80033a6 <__cvt+0x86>
 8003390:	2200      	movs	r2, #0
 8003392:	2300      	movs	r3, #0
 8003394:	4620      	mov	r0, r4
 8003396:	4639      	mov	r1, r7
 8003398:	f7fd fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800339c:	b918      	cbnz	r0, 80033a6 <__cvt+0x86>
 800339e:	f1c5 0501 	rsb	r5, r5, #1
 80033a2:	f8ca 5000 	str.w	r5, [sl]
 80033a6:	f8da 3000 	ldr.w	r3, [sl]
 80033aa:	4499      	add	r9, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	2300      	movs	r3, #0
 80033b0:	4620      	mov	r0, r4
 80033b2:	4639      	mov	r1, r7
 80033b4:	f7fd faf8 	bl	80009a8 <__aeabi_dcmpeq>
 80033b8:	b108      	cbz	r0, 80033be <__cvt+0x9e>
 80033ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80033be:	2230      	movs	r2, #48	; 0x30
 80033c0:	9b07      	ldr	r3, [sp, #28]
 80033c2:	454b      	cmp	r3, r9
 80033c4:	d307      	bcc.n	80033d6 <__cvt+0xb6>
 80033c6:	4630      	mov	r0, r6
 80033c8:	9b07      	ldr	r3, [sp, #28]
 80033ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033cc:	1b9b      	subs	r3, r3, r6
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	b008      	add	sp, #32
 80033d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	9107      	str	r1, [sp, #28]
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e7f0      	b.n	80033c0 <__cvt+0xa0>

080033de <__exponent>:
 80033de:	4603      	mov	r3, r0
 80033e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e2:	2900      	cmp	r1, #0
 80033e4:	f803 2b02 	strb.w	r2, [r3], #2
 80033e8:	bfb6      	itet	lt
 80033ea:	222d      	movlt	r2, #45	; 0x2d
 80033ec:	222b      	movge	r2, #43	; 0x2b
 80033ee:	4249      	neglt	r1, r1
 80033f0:	2909      	cmp	r1, #9
 80033f2:	7042      	strb	r2, [r0, #1]
 80033f4:	dd2b      	ble.n	800344e <__exponent+0x70>
 80033f6:	f10d 0407 	add.w	r4, sp, #7
 80033fa:	46a4      	mov	ip, r4
 80033fc:	270a      	movs	r7, #10
 80033fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8003402:	460a      	mov	r2, r1
 8003404:	46a6      	mov	lr, r4
 8003406:	fb07 1516 	mls	r5, r7, r6, r1
 800340a:	2a63      	cmp	r2, #99	; 0x63
 800340c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003410:	4631      	mov	r1, r6
 8003412:	f104 34ff 	add.w	r4, r4, #4294967295
 8003416:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800341a:	dcf0      	bgt.n	80033fe <__exponent+0x20>
 800341c:	3130      	adds	r1, #48	; 0x30
 800341e:	f1ae 0502 	sub.w	r5, lr, #2
 8003422:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003426:	4629      	mov	r1, r5
 8003428:	1c44      	adds	r4, r0, #1
 800342a:	4561      	cmp	r1, ip
 800342c:	d30a      	bcc.n	8003444 <__exponent+0x66>
 800342e:	f10d 0209 	add.w	r2, sp, #9
 8003432:	eba2 020e 	sub.w	r2, r2, lr
 8003436:	4565      	cmp	r5, ip
 8003438:	bf88      	it	hi
 800343a:	2200      	movhi	r2, #0
 800343c:	4413      	add	r3, r2
 800343e:	1a18      	subs	r0, r3, r0
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003448:	f804 2f01 	strb.w	r2, [r4, #1]!
 800344c:	e7ed      	b.n	800342a <__exponent+0x4c>
 800344e:	2330      	movs	r3, #48	; 0x30
 8003450:	3130      	adds	r1, #48	; 0x30
 8003452:	7083      	strb	r3, [r0, #2]
 8003454:	70c1      	strb	r1, [r0, #3]
 8003456:	1d03      	adds	r3, r0, #4
 8003458:	e7f1      	b.n	800343e <__exponent+0x60>
	...

0800345c <_printf_float>:
 800345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003460:	b091      	sub	sp, #68	; 0x44
 8003462:	460c      	mov	r4, r1
 8003464:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003468:	4616      	mov	r6, r2
 800346a:	461f      	mov	r7, r3
 800346c:	4605      	mov	r5, r0
 800346e:	f002 fe73 	bl	8006158 <_localeconv_r>
 8003472:	6803      	ldr	r3, [r0, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	9309      	str	r3, [sp, #36]	; 0x24
 8003478:	f7fc fe6a 	bl	8000150 <strlen>
 800347c:	2300      	movs	r3, #0
 800347e:	930e      	str	r3, [sp, #56]	; 0x38
 8003480:	f8d8 3000 	ldr.w	r3, [r8]
 8003484:	900a      	str	r0, [sp, #40]	; 0x28
 8003486:	3307      	adds	r3, #7
 8003488:	f023 0307 	bic.w	r3, r3, #7
 800348c:	f103 0208 	add.w	r2, r3, #8
 8003490:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003494:	f8d4 b000 	ldr.w	fp, [r4]
 8003498:	f8c8 2000 	str.w	r2, [r8]
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80034a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80034ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ae:	f04f 32ff 	mov.w	r2, #4294967295
 80034b2:	4640      	mov	r0, r8
 80034b4:	4b9c      	ldr	r3, [pc, #624]	; (8003728 <_printf_float+0x2cc>)
 80034b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034b8:	f7fd faa8 	bl	8000a0c <__aeabi_dcmpun>
 80034bc:	bb70      	cbnz	r0, 800351c <_printf_float+0xc0>
 80034be:	f04f 32ff 	mov.w	r2, #4294967295
 80034c2:	4640      	mov	r0, r8
 80034c4:	4b98      	ldr	r3, [pc, #608]	; (8003728 <_printf_float+0x2cc>)
 80034c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c8:	f7fd fa82 	bl	80009d0 <__aeabi_dcmple>
 80034cc:	bb30      	cbnz	r0, 800351c <_printf_float+0xc0>
 80034ce:	2200      	movs	r2, #0
 80034d0:	2300      	movs	r3, #0
 80034d2:	4640      	mov	r0, r8
 80034d4:	4651      	mov	r1, sl
 80034d6:	f7fd fa71 	bl	80009bc <__aeabi_dcmplt>
 80034da:	b110      	cbz	r0, 80034e2 <_printf_float+0x86>
 80034dc:	232d      	movs	r3, #45	; 0x2d
 80034de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e2:	4b92      	ldr	r3, [pc, #584]	; (800372c <_printf_float+0x2d0>)
 80034e4:	4892      	ldr	r0, [pc, #584]	; (8003730 <_printf_float+0x2d4>)
 80034e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034ea:	bf94      	ite	ls
 80034ec:	4698      	movls	r8, r3
 80034ee:	4680      	movhi	r8, r0
 80034f0:	2303      	movs	r3, #3
 80034f2:	f04f 0a00 	mov.w	sl, #0
 80034f6:	6123      	str	r3, [r4, #16]
 80034f8:	f02b 0304 	bic.w	r3, fp, #4
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	4633      	mov	r3, r6
 8003500:	4621      	mov	r1, r4
 8003502:	4628      	mov	r0, r5
 8003504:	9700      	str	r7, [sp, #0]
 8003506:	aa0f      	add	r2, sp, #60	; 0x3c
 8003508:	f000 f9d4 	bl	80038b4 <_printf_common>
 800350c:	3001      	adds	r0, #1
 800350e:	f040 8090 	bne.w	8003632 <_printf_float+0x1d6>
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	b011      	add	sp, #68	; 0x44
 8003518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351c:	4642      	mov	r2, r8
 800351e:	4653      	mov	r3, sl
 8003520:	4640      	mov	r0, r8
 8003522:	4651      	mov	r1, sl
 8003524:	f7fd fa72 	bl	8000a0c <__aeabi_dcmpun>
 8003528:	b148      	cbz	r0, 800353e <_printf_float+0xe2>
 800352a:	f1ba 0f00 	cmp.w	sl, #0
 800352e:	bfb8      	it	lt
 8003530:	232d      	movlt	r3, #45	; 0x2d
 8003532:	4880      	ldr	r0, [pc, #512]	; (8003734 <_printf_float+0x2d8>)
 8003534:	bfb8      	it	lt
 8003536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <_printf_float+0x2dc>)
 800353c:	e7d3      	b.n	80034e6 <_printf_float+0x8a>
 800353e:	6863      	ldr	r3, [r4, #4]
 8003540:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	d142      	bne.n	80035ce <_printf_float+0x172>
 8003548:	2306      	movs	r3, #6
 800354a:	6063      	str	r3, [r4, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	9206      	str	r2, [sp, #24]
 8003550:	aa0e      	add	r2, sp, #56	; 0x38
 8003552:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003556:	aa0d      	add	r2, sp, #52	; 0x34
 8003558:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800355c:	9203      	str	r2, [sp, #12]
 800355e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003562:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	4642      	mov	r2, r8
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4628      	mov	r0, r5
 8003570:	4653      	mov	r3, sl
 8003572:	910b      	str	r1, [sp, #44]	; 0x2c
 8003574:	f7ff fed4 	bl	8003320 <__cvt>
 8003578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800357a:	4680      	mov	r8, r0
 800357c:	2947      	cmp	r1, #71	; 0x47
 800357e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003580:	d108      	bne.n	8003594 <_printf_float+0x138>
 8003582:	1cc8      	adds	r0, r1, #3
 8003584:	db02      	blt.n	800358c <_printf_float+0x130>
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	4299      	cmp	r1, r3
 800358a:	dd40      	ble.n	800360e <_printf_float+0x1b2>
 800358c:	f1a9 0902 	sub.w	r9, r9, #2
 8003590:	fa5f f989 	uxtb.w	r9, r9
 8003594:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003598:	d81f      	bhi.n	80035da <_printf_float+0x17e>
 800359a:	464a      	mov	r2, r9
 800359c:	3901      	subs	r1, #1
 800359e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035a2:	910d      	str	r1, [sp, #52]	; 0x34
 80035a4:	f7ff ff1b 	bl	80033de <__exponent>
 80035a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035aa:	4682      	mov	sl, r0
 80035ac:	1813      	adds	r3, r2, r0
 80035ae:	2a01      	cmp	r2, #1
 80035b0:	6123      	str	r3, [r4, #16]
 80035b2:	dc02      	bgt.n	80035ba <_printf_float+0x15e>
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	07d2      	lsls	r2, r2, #31
 80035b8:	d501      	bpl.n	80035be <_printf_float+0x162>
 80035ba:	3301      	adds	r3, #1
 80035bc:	6123      	str	r3, [r4, #16]
 80035be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d09b      	beq.n	80034fe <_printf_float+0xa2>
 80035c6:	232d      	movs	r3, #45	; 0x2d
 80035c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035cc:	e797      	b.n	80034fe <_printf_float+0xa2>
 80035ce:	2947      	cmp	r1, #71	; 0x47
 80035d0:	d1bc      	bne.n	800354c <_printf_float+0xf0>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ba      	bne.n	800354c <_printf_float+0xf0>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e7b7      	b.n	800354a <_printf_float+0xee>
 80035da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035de:	d118      	bne.n	8003612 <_printf_float+0x1b6>
 80035e0:	2900      	cmp	r1, #0
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	dd0b      	ble.n	80035fe <_printf_float+0x1a2>
 80035e6:	6121      	str	r1, [r4, #16]
 80035e8:	b913      	cbnz	r3, 80035f0 <_printf_float+0x194>
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	07d0      	lsls	r0, r2, #31
 80035ee:	d502      	bpl.n	80035f6 <_printf_float+0x19a>
 80035f0:	3301      	adds	r3, #1
 80035f2:	440b      	add	r3, r1
 80035f4:	6123      	str	r3, [r4, #16]
 80035f6:	f04f 0a00 	mov.w	sl, #0
 80035fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80035fc:	e7df      	b.n	80035be <_printf_float+0x162>
 80035fe:	b913      	cbnz	r3, 8003606 <_printf_float+0x1aa>
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	07d2      	lsls	r2, r2, #31
 8003604:	d501      	bpl.n	800360a <_printf_float+0x1ae>
 8003606:	3302      	adds	r3, #2
 8003608:	e7f4      	b.n	80035f4 <_printf_float+0x198>
 800360a:	2301      	movs	r3, #1
 800360c:	e7f2      	b.n	80035f4 <_printf_float+0x198>
 800360e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003614:	4299      	cmp	r1, r3
 8003616:	db05      	blt.n	8003624 <_printf_float+0x1c8>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	6121      	str	r1, [r4, #16]
 800361c:	07d8      	lsls	r0, r3, #31
 800361e:	d5ea      	bpl.n	80035f6 <_printf_float+0x19a>
 8003620:	1c4b      	adds	r3, r1, #1
 8003622:	e7e7      	b.n	80035f4 <_printf_float+0x198>
 8003624:	2900      	cmp	r1, #0
 8003626:	bfcc      	ite	gt
 8003628:	2201      	movgt	r2, #1
 800362a:	f1c1 0202 	rsble	r2, r1, #2
 800362e:	4413      	add	r3, r2
 8003630:	e7e0      	b.n	80035f4 <_printf_float+0x198>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	055a      	lsls	r2, r3, #21
 8003636:	d407      	bmi.n	8003648 <_printf_float+0x1ec>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	4642      	mov	r2, r8
 800363c:	4631      	mov	r1, r6
 800363e:	4628      	mov	r0, r5
 8003640:	47b8      	blx	r7
 8003642:	3001      	adds	r0, #1
 8003644:	d12b      	bne.n	800369e <_printf_float+0x242>
 8003646:	e764      	b.n	8003512 <_printf_float+0xb6>
 8003648:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800364c:	f240 80dd 	bls.w	800380a <_printf_float+0x3ae>
 8003650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003654:	2200      	movs	r2, #0
 8003656:	2300      	movs	r3, #0
 8003658:	f7fd f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800365c:	2800      	cmp	r0, #0
 800365e:	d033      	beq.n	80036c8 <_printf_float+0x26c>
 8003660:	2301      	movs	r3, #1
 8003662:	4631      	mov	r1, r6
 8003664:	4628      	mov	r0, r5
 8003666:	4a35      	ldr	r2, [pc, #212]	; (800373c <_printf_float+0x2e0>)
 8003668:	47b8      	blx	r7
 800366a:	3001      	adds	r0, #1
 800366c:	f43f af51 	beq.w	8003512 <_printf_float+0xb6>
 8003670:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003674:	429a      	cmp	r2, r3
 8003676:	db02      	blt.n	800367e <_printf_float+0x222>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	07d8      	lsls	r0, r3, #31
 800367c:	d50f      	bpl.n	800369e <_printf_float+0x242>
 800367e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003682:	4631      	mov	r1, r6
 8003684:	4628      	mov	r0, r5
 8003686:	47b8      	blx	r7
 8003688:	3001      	adds	r0, #1
 800368a:	f43f af42 	beq.w	8003512 <_printf_float+0xb6>
 800368e:	f04f 0800 	mov.w	r8, #0
 8003692:	f104 091a 	add.w	r9, r4, #26
 8003696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003698:	3b01      	subs	r3, #1
 800369a:	4543      	cmp	r3, r8
 800369c:	dc09      	bgt.n	80036b2 <_printf_float+0x256>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	079b      	lsls	r3, r3, #30
 80036a2:	f100 8102 	bmi.w	80038aa <_printf_float+0x44e>
 80036a6:	68e0      	ldr	r0, [r4, #12]
 80036a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036aa:	4298      	cmp	r0, r3
 80036ac:	bfb8      	it	lt
 80036ae:	4618      	movlt	r0, r3
 80036b0:	e731      	b.n	8003516 <_printf_float+0xba>
 80036b2:	2301      	movs	r3, #1
 80036b4:	464a      	mov	r2, r9
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	f43f af28 	beq.w	8003512 <_printf_float+0xb6>
 80036c2:	f108 0801 	add.w	r8, r8, #1
 80036c6:	e7e6      	b.n	8003696 <_printf_float+0x23a>
 80036c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	dc38      	bgt.n	8003740 <_printf_float+0x2e4>
 80036ce:	2301      	movs	r3, #1
 80036d0:	4631      	mov	r1, r6
 80036d2:	4628      	mov	r0, r5
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <_printf_float+0x2e0>)
 80036d6:	47b8      	blx	r7
 80036d8:	3001      	adds	r0, #1
 80036da:	f43f af1a 	beq.w	8003512 <_printf_float+0xb6>
 80036de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d102      	bne.n	80036ec <_printf_float+0x290>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	07d9      	lsls	r1, r3, #31
 80036ea:	d5d8      	bpl.n	800369e <_printf_float+0x242>
 80036ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f0:	4631      	mov	r1, r6
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b8      	blx	r7
 80036f6:	3001      	adds	r0, #1
 80036f8:	f43f af0b 	beq.w	8003512 <_printf_float+0xb6>
 80036fc:	f04f 0900 	mov.w	r9, #0
 8003700:	f104 0a1a 	add.w	sl, r4, #26
 8003704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003706:	425b      	negs	r3, r3
 8003708:	454b      	cmp	r3, r9
 800370a:	dc01      	bgt.n	8003710 <_printf_float+0x2b4>
 800370c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800370e:	e794      	b.n	800363a <_printf_float+0x1de>
 8003710:	2301      	movs	r3, #1
 8003712:	4652      	mov	r2, sl
 8003714:	4631      	mov	r1, r6
 8003716:	4628      	mov	r0, r5
 8003718:	47b8      	blx	r7
 800371a:	3001      	adds	r0, #1
 800371c:	f43f aef9 	beq.w	8003512 <_printf_float+0xb6>
 8003720:	f109 0901 	add.w	r9, r9, #1
 8003724:	e7ee      	b.n	8003704 <_printf_float+0x2a8>
 8003726:	bf00      	nop
 8003728:	7fefffff 	.word	0x7fefffff
 800372c:	08007bbc 	.word	0x08007bbc
 8003730:	08007bc0 	.word	0x08007bc0
 8003734:	08007bc8 	.word	0x08007bc8
 8003738:	08007bc4 	.word	0x08007bc4
 800373c:	08007bcc 	.word	0x08007bcc
 8003740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003744:	429a      	cmp	r2, r3
 8003746:	bfa8      	it	ge
 8003748:	461a      	movge	r2, r3
 800374a:	2a00      	cmp	r2, #0
 800374c:	4691      	mov	r9, r2
 800374e:	dc37      	bgt.n	80037c0 <_printf_float+0x364>
 8003750:	f04f 0b00 	mov.w	fp, #0
 8003754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003758:	f104 021a 	add.w	r2, r4, #26
 800375c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003760:	ebaa 0309 	sub.w	r3, sl, r9
 8003764:	455b      	cmp	r3, fp
 8003766:	dc33      	bgt.n	80037d0 <_printf_float+0x374>
 8003768:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800376c:	429a      	cmp	r2, r3
 800376e:	db3b      	blt.n	80037e8 <_printf_float+0x38c>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	07da      	lsls	r2, r3, #31
 8003774:	d438      	bmi.n	80037e8 <_printf_float+0x38c>
 8003776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003778:	990d      	ldr	r1, [sp, #52]	; 0x34
 800377a:	eba2 030a 	sub.w	r3, r2, sl
 800377e:	eba2 0901 	sub.w	r9, r2, r1
 8003782:	4599      	cmp	r9, r3
 8003784:	bfa8      	it	ge
 8003786:	4699      	movge	r9, r3
 8003788:	f1b9 0f00 	cmp.w	r9, #0
 800378c:	dc34      	bgt.n	80037f8 <_printf_float+0x39c>
 800378e:	f04f 0800 	mov.w	r8, #0
 8003792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003796:	f104 0a1a 	add.w	sl, r4, #26
 800379a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	eba3 0309 	sub.w	r3, r3, r9
 80037a4:	4543      	cmp	r3, r8
 80037a6:	f77f af7a 	ble.w	800369e <_printf_float+0x242>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4652      	mov	r2, sl
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	f43f aeac 	beq.w	8003512 <_printf_float+0xb6>
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	e7ec      	b.n	800379a <_printf_float+0x33e>
 80037c0:	4613      	mov	r3, r2
 80037c2:	4631      	mov	r1, r6
 80037c4:	4642      	mov	r2, r8
 80037c6:	4628      	mov	r0, r5
 80037c8:	47b8      	blx	r7
 80037ca:	3001      	adds	r0, #1
 80037cc:	d1c0      	bne.n	8003750 <_printf_float+0x2f4>
 80037ce:	e6a0      	b.n	8003512 <_printf_float+0xb6>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	f43f ae99 	beq.w	8003512 <_printf_float+0xb6>
 80037e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037e2:	f10b 0b01 	add.w	fp, fp, #1
 80037e6:	e7b9      	b.n	800375c <_printf_float+0x300>
 80037e8:	4631      	mov	r1, r6
 80037ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	d1bf      	bne.n	8003776 <_printf_float+0x31a>
 80037f6:	e68c      	b.n	8003512 <_printf_float+0xb6>
 80037f8:	464b      	mov	r3, r9
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	eb08 020a 	add.w	r2, r8, sl
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	d1c2      	bne.n	800378e <_printf_float+0x332>
 8003808:	e683      	b.n	8003512 <_printf_float+0xb6>
 800380a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800380c:	2a01      	cmp	r2, #1
 800380e:	dc01      	bgt.n	8003814 <_printf_float+0x3b8>
 8003810:	07db      	lsls	r3, r3, #31
 8003812:	d537      	bpl.n	8003884 <_printf_float+0x428>
 8003814:	2301      	movs	r3, #1
 8003816:	4642      	mov	r2, r8
 8003818:	4631      	mov	r1, r6
 800381a:	4628      	mov	r0, r5
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	f43f ae77 	beq.w	8003512 <_printf_float+0xb6>
 8003824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003828:	4631      	mov	r1, r6
 800382a:	4628      	mov	r0, r5
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	f43f ae6f 	beq.w	8003512 <_printf_float+0xb6>
 8003834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003838:	2200      	movs	r2, #0
 800383a:	2300      	movs	r3, #0
 800383c:	f7fd f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8003840:	b9d8      	cbnz	r0, 800387a <_printf_float+0x41e>
 8003842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003844:	f108 0201 	add.w	r2, r8, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	d10e      	bne.n	8003872 <_printf_float+0x416>
 8003854:	e65d      	b.n	8003512 <_printf_float+0xb6>
 8003856:	2301      	movs	r3, #1
 8003858:	464a      	mov	r2, r9
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	47b8      	blx	r7
 8003860:	3001      	adds	r0, #1
 8003862:	f43f ae56 	beq.w	8003512 <_printf_float+0xb6>
 8003866:	f108 0801 	add.w	r8, r8, #1
 800386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800386c:	3b01      	subs	r3, #1
 800386e:	4543      	cmp	r3, r8
 8003870:	dcf1      	bgt.n	8003856 <_printf_float+0x3fa>
 8003872:	4653      	mov	r3, sl
 8003874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003878:	e6e0      	b.n	800363c <_printf_float+0x1e0>
 800387a:	f04f 0800 	mov.w	r8, #0
 800387e:	f104 091a 	add.w	r9, r4, #26
 8003882:	e7f2      	b.n	800386a <_printf_float+0x40e>
 8003884:	2301      	movs	r3, #1
 8003886:	4642      	mov	r2, r8
 8003888:	e7df      	b.n	800384a <_printf_float+0x3ee>
 800388a:	2301      	movs	r3, #1
 800388c:	464a      	mov	r2, r9
 800388e:	4631      	mov	r1, r6
 8003890:	4628      	mov	r0, r5
 8003892:	47b8      	blx	r7
 8003894:	3001      	adds	r0, #1
 8003896:	f43f ae3c 	beq.w	8003512 <_printf_float+0xb6>
 800389a:	f108 0801 	add.w	r8, r8, #1
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	4543      	cmp	r3, r8
 80038a6:	dcf0      	bgt.n	800388a <_printf_float+0x42e>
 80038a8:	e6fd      	b.n	80036a6 <_printf_float+0x24a>
 80038aa:	f04f 0800 	mov.w	r8, #0
 80038ae:	f104 0919 	add.w	r9, r4, #25
 80038b2:	e7f4      	b.n	800389e <_printf_float+0x442>

080038b4 <_printf_common>:
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	4616      	mov	r6, r2
 80038ba:	4699      	mov	r9, r3
 80038bc:	688a      	ldr	r2, [r1, #8]
 80038be:	690b      	ldr	r3, [r1, #16]
 80038c0:	4607      	mov	r7, r0
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bfb8      	it	lt
 80038c6:	4613      	movlt	r3, r2
 80038c8:	6033      	str	r3, [r6, #0]
 80038ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038ce:	460c      	mov	r4, r1
 80038d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038d4:	b10a      	cbz	r2, 80038da <_printf_common+0x26>
 80038d6:	3301      	adds	r3, #1
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	0699      	lsls	r1, r3, #26
 80038de:	bf42      	ittt	mi
 80038e0:	6833      	ldrmi	r3, [r6, #0]
 80038e2:	3302      	addmi	r3, #2
 80038e4:	6033      	strmi	r3, [r6, #0]
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	f015 0506 	ands.w	r5, r5, #6
 80038ec:	d106      	bne.n	80038fc <_printf_common+0x48>
 80038ee:	f104 0a19 	add.w	sl, r4, #25
 80038f2:	68e3      	ldr	r3, [r4, #12]
 80038f4:	6832      	ldr	r2, [r6, #0]
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	42ab      	cmp	r3, r5
 80038fa:	dc28      	bgt.n	800394e <_printf_common+0x9a>
 80038fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003900:	1e13      	subs	r3, r2, #0
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	bf18      	it	ne
 8003906:	2301      	movne	r3, #1
 8003908:	0692      	lsls	r2, r2, #26
 800390a:	d42d      	bmi.n	8003968 <_printf_common+0xb4>
 800390c:	4649      	mov	r1, r9
 800390e:	4638      	mov	r0, r7
 8003910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003914:	47c0      	blx	r8
 8003916:	3001      	adds	r0, #1
 8003918:	d020      	beq.n	800395c <_printf_common+0xa8>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	68e5      	ldr	r5, [r4, #12]
 800391e:	f003 0306 	and.w	r3, r3, #6
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf18      	it	ne
 8003926:	2500      	movne	r5, #0
 8003928:	6832      	ldr	r2, [r6, #0]
 800392a:	f04f 0600 	mov.w	r6, #0
 800392e:	68a3      	ldr	r3, [r4, #8]
 8003930:	bf08      	it	eq
 8003932:	1aad      	subeq	r5, r5, r2
 8003934:	6922      	ldr	r2, [r4, #16]
 8003936:	bf08      	it	eq
 8003938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800393c:	4293      	cmp	r3, r2
 800393e:	bfc4      	itt	gt
 8003940:	1a9b      	subgt	r3, r3, r2
 8003942:	18ed      	addgt	r5, r5, r3
 8003944:	341a      	adds	r4, #26
 8003946:	42b5      	cmp	r5, r6
 8003948:	d11a      	bne.n	8003980 <_printf_common+0xcc>
 800394a:	2000      	movs	r0, #0
 800394c:	e008      	b.n	8003960 <_printf_common+0xac>
 800394e:	2301      	movs	r3, #1
 8003950:	4652      	mov	r2, sl
 8003952:	4649      	mov	r1, r9
 8003954:	4638      	mov	r0, r7
 8003956:	47c0      	blx	r8
 8003958:	3001      	adds	r0, #1
 800395a:	d103      	bne.n	8003964 <_printf_common+0xb0>
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003964:	3501      	adds	r5, #1
 8003966:	e7c4      	b.n	80038f2 <_printf_common+0x3e>
 8003968:	2030      	movs	r0, #48	; 0x30
 800396a:	18e1      	adds	r1, r4, r3
 800396c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003976:	4422      	add	r2, r4
 8003978:	3302      	adds	r3, #2
 800397a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800397e:	e7c5      	b.n	800390c <_printf_common+0x58>
 8003980:	2301      	movs	r3, #1
 8003982:	4622      	mov	r2, r4
 8003984:	4649      	mov	r1, r9
 8003986:	4638      	mov	r0, r7
 8003988:	47c0      	blx	r8
 800398a:	3001      	adds	r0, #1
 800398c:	d0e6      	beq.n	800395c <_printf_common+0xa8>
 800398e:	3601      	adds	r6, #1
 8003990:	e7d9      	b.n	8003946 <_printf_common+0x92>
	...

08003994 <_printf_i>:
 8003994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	460c      	mov	r4, r1
 800399a:	7e27      	ldrb	r7, [r4, #24]
 800399c:	4691      	mov	r9, r2
 800399e:	2f78      	cmp	r7, #120	; 0x78
 80039a0:	4680      	mov	r8, r0
 80039a2:	469a      	mov	sl, r3
 80039a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039aa:	d807      	bhi.n	80039bc <_printf_i+0x28>
 80039ac:	2f62      	cmp	r7, #98	; 0x62
 80039ae:	d80a      	bhi.n	80039c6 <_printf_i+0x32>
 80039b0:	2f00      	cmp	r7, #0
 80039b2:	f000 80d9 	beq.w	8003b68 <_printf_i+0x1d4>
 80039b6:	2f58      	cmp	r7, #88	; 0x58
 80039b8:	f000 80a4 	beq.w	8003b04 <_printf_i+0x170>
 80039bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039c4:	e03a      	b.n	8003a3c <_printf_i+0xa8>
 80039c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ca:	2b15      	cmp	r3, #21
 80039cc:	d8f6      	bhi.n	80039bc <_printf_i+0x28>
 80039ce:	a001      	add	r0, pc, #4	; (adr r0, 80039d4 <_printf_i+0x40>)
 80039d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039d4:	08003a2d 	.word	0x08003a2d
 80039d8:	08003a41 	.word	0x08003a41
 80039dc:	080039bd 	.word	0x080039bd
 80039e0:	080039bd 	.word	0x080039bd
 80039e4:	080039bd 	.word	0x080039bd
 80039e8:	080039bd 	.word	0x080039bd
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	080039bd 	.word	0x080039bd
 80039f4:	080039bd 	.word	0x080039bd
 80039f8:	080039bd 	.word	0x080039bd
 80039fc:	080039bd 	.word	0x080039bd
 8003a00:	08003b4f 	.word	0x08003b4f
 8003a04:	08003a71 	.word	0x08003a71
 8003a08:	08003b31 	.word	0x08003b31
 8003a0c:	080039bd 	.word	0x080039bd
 8003a10:	080039bd 	.word	0x080039bd
 8003a14:	08003b71 	.word	0x08003b71
 8003a18:	080039bd 	.word	0x080039bd
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	080039bd 	.word	0x080039bd
 8003a24:	080039bd 	.word	0x080039bd
 8003a28:	08003b39 	.word	0x08003b39
 8003a2c:	680b      	ldr	r3, [r1, #0]
 8003a2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	600a      	str	r2, [r1, #0]
 8003a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0a4      	b.n	8003b8a <_printf_i+0x1f6>
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	6808      	ldr	r0, [r1, #0]
 8003a44:	062e      	lsls	r6, r5, #24
 8003a46:	f100 0304 	add.w	r3, r0, #4
 8003a4a:	d50a      	bpl.n	8003a62 <_printf_i+0xce>
 8003a4c:	6805      	ldr	r5, [r0, #0]
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	da03      	bge.n	8003a5c <_printf_i+0xc8>
 8003a54:	232d      	movs	r3, #45	; 0x2d
 8003a56:	426d      	negs	r5, r5
 8003a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5c:	230a      	movs	r3, #10
 8003a5e:	485e      	ldr	r0, [pc, #376]	; (8003bd8 <_printf_i+0x244>)
 8003a60:	e019      	b.n	8003a96 <_printf_i+0x102>
 8003a62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a66:	6805      	ldr	r5, [r0, #0]
 8003a68:	600b      	str	r3, [r1, #0]
 8003a6a:	bf18      	it	ne
 8003a6c:	b22d      	sxthne	r5, r5
 8003a6e:	e7ef      	b.n	8003a50 <_printf_i+0xbc>
 8003a70:	680b      	ldr	r3, [r1, #0]
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	1d18      	adds	r0, r3, #4
 8003a76:	6008      	str	r0, [r1, #0]
 8003a78:	0628      	lsls	r0, r5, #24
 8003a7a:	d501      	bpl.n	8003a80 <_printf_i+0xec>
 8003a7c:	681d      	ldr	r5, [r3, #0]
 8003a7e:	e002      	b.n	8003a86 <_printf_i+0xf2>
 8003a80:	0669      	lsls	r1, r5, #25
 8003a82:	d5fb      	bpl.n	8003a7c <_printf_i+0xe8>
 8003a84:	881d      	ldrh	r5, [r3, #0]
 8003a86:	2f6f      	cmp	r7, #111	; 0x6f
 8003a88:	bf0c      	ite	eq
 8003a8a:	2308      	moveq	r3, #8
 8003a8c:	230a      	movne	r3, #10
 8003a8e:	4852      	ldr	r0, [pc, #328]	; (8003bd8 <_printf_i+0x244>)
 8003a90:	2100      	movs	r1, #0
 8003a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a96:	6866      	ldr	r6, [r4, #4]
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	bfa8      	it	ge
 8003a9c:	6821      	ldrge	r1, [r4, #0]
 8003a9e:	60a6      	str	r6, [r4, #8]
 8003aa0:	bfa4      	itt	ge
 8003aa2:	f021 0104 	bicge.w	r1, r1, #4
 8003aa6:	6021      	strge	r1, [r4, #0]
 8003aa8:	b90d      	cbnz	r5, 8003aae <_printf_i+0x11a>
 8003aaa:	2e00      	cmp	r6, #0
 8003aac:	d04d      	beq.n	8003b4a <_printf_i+0x1b6>
 8003aae:	4616      	mov	r6, r2
 8003ab0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ab4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ab8:	5dc7      	ldrb	r7, [r0, r7]
 8003aba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003abe:	462f      	mov	r7, r5
 8003ac0:	42bb      	cmp	r3, r7
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	d9f4      	bls.n	8003ab0 <_printf_i+0x11c>
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d10b      	bne.n	8003ae2 <_printf_i+0x14e>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	07df      	lsls	r7, r3, #31
 8003ace:	d508      	bpl.n	8003ae2 <_printf_i+0x14e>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	6861      	ldr	r1, [r4, #4]
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	bfde      	ittt	le
 8003ad8:	2330      	movle	r3, #48	; 0x30
 8003ada:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ade:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ae2:	1b92      	subs	r2, r2, r6
 8003ae4:	6122      	str	r2, [r4, #16]
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4640      	mov	r0, r8
 8003aec:	f8cd a000 	str.w	sl, [sp]
 8003af0:	aa03      	add	r2, sp, #12
 8003af2:	f7ff fedf 	bl	80038b4 <_printf_common>
 8003af6:	3001      	adds	r0, #1
 8003af8:	d14c      	bne.n	8003b94 <_printf_i+0x200>
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295
 8003afe:	b004      	add	sp, #16
 8003b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b04:	4834      	ldr	r0, [pc, #208]	; (8003bd8 <_printf_i+0x244>)
 8003b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b0a:	680e      	ldr	r6, [r1, #0]
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b12:	061f      	lsls	r7, r3, #24
 8003b14:	600e      	str	r6, [r1, #0]
 8003b16:	d514      	bpl.n	8003b42 <_printf_i+0x1ae>
 8003b18:	07d9      	lsls	r1, r3, #31
 8003b1a:	bf44      	itt	mi
 8003b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b20:	6023      	strmi	r3, [r4, #0]
 8003b22:	b91d      	cbnz	r5, 8003b2c <_printf_i+0x198>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	f023 0320 	bic.w	r3, r3, #32
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	e7af      	b.n	8003a90 <_printf_i+0xfc>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f043 0320 	orr.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	2378      	movs	r3, #120	; 0x78
 8003b3a:	4828      	ldr	r0, [pc, #160]	; (8003bdc <_printf_i+0x248>)
 8003b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b40:	e7e3      	b.n	8003b0a <_printf_i+0x176>
 8003b42:	065e      	lsls	r6, r3, #25
 8003b44:	bf48      	it	mi
 8003b46:	b2ad      	uxthmi	r5, r5
 8003b48:	e7e6      	b.n	8003b18 <_printf_i+0x184>
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	e7bb      	b.n	8003ac6 <_printf_i+0x132>
 8003b4e:	680b      	ldr	r3, [r1, #0]
 8003b50:	6826      	ldr	r6, [r4, #0]
 8003b52:	1d1d      	adds	r5, r3, #4
 8003b54:	6960      	ldr	r0, [r4, #20]
 8003b56:	600d      	str	r5, [r1, #0]
 8003b58:	0635      	lsls	r5, r6, #24
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	d501      	bpl.n	8003b62 <_printf_i+0x1ce>
 8003b5e:	6018      	str	r0, [r3, #0]
 8003b60:	e002      	b.n	8003b68 <_printf_i+0x1d4>
 8003b62:	0671      	lsls	r1, r6, #25
 8003b64:	d5fb      	bpl.n	8003b5e <_printf_i+0x1ca>
 8003b66:	8018      	strh	r0, [r3, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4616      	mov	r6, r2
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	e7ba      	b.n	8003ae6 <_printf_i+0x152>
 8003b70:	680b      	ldr	r3, [r1, #0]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	600a      	str	r2, [r1, #0]
 8003b76:	681e      	ldr	r6, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	6862      	ldr	r2, [r4, #4]
 8003b7e:	f002 fb09 	bl	8006194 <memchr>
 8003b82:	b108      	cbz	r0, 8003b88 <_printf_i+0x1f4>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	6060      	str	r0, [r4, #4]
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b92:	e7a8      	b.n	8003ae6 <_printf_i+0x152>
 8003b94:	4632      	mov	r2, r6
 8003b96:	4649      	mov	r1, r9
 8003b98:	4640      	mov	r0, r8
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	47d0      	blx	sl
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d0ab      	beq.n	8003afa <_printf_i+0x166>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	079b      	lsls	r3, r3, #30
 8003ba6:	d413      	bmi.n	8003bd0 <_printf_i+0x23c>
 8003ba8:	68e0      	ldr	r0, [r4, #12]
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	4298      	cmp	r0, r3
 8003bae:	bfb8      	it	lt
 8003bb0:	4618      	movlt	r0, r3
 8003bb2:	e7a4      	b.n	8003afe <_printf_i+0x16a>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	4649      	mov	r1, r9
 8003bba:	4640      	mov	r0, r8
 8003bbc:	47d0      	blx	sl
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d09b      	beq.n	8003afa <_printf_i+0x166>
 8003bc2:	3501      	adds	r5, #1
 8003bc4:	68e3      	ldr	r3, [r4, #12]
 8003bc6:	9903      	ldr	r1, [sp, #12]
 8003bc8:	1a5b      	subs	r3, r3, r1
 8003bca:	42ab      	cmp	r3, r5
 8003bcc:	dcf2      	bgt.n	8003bb4 <_printf_i+0x220>
 8003bce:	e7eb      	b.n	8003ba8 <_printf_i+0x214>
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	f104 0619 	add.w	r6, r4, #25
 8003bd6:	e7f5      	b.n	8003bc4 <_printf_i+0x230>
 8003bd8:	08007bce 	.word	0x08007bce
 8003bdc:	08007bdf 	.word	0x08007bdf

08003be0 <_scanf_float>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	b087      	sub	sp, #28
 8003be6:	9303      	str	r3, [sp, #12]
 8003be8:	688b      	ldr	r3, [r1, #8]
 8003bea:	4617      	mov	r7, r2
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003bf2:	bf85      	ittet	hi
 8003bf4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003bf8:	195b      	addhi	r3, r3, r5
 8003bfa:	2300      	movls	r3, #0
 8003bfc:	9302      	strhi	r3, [sp, #8]
 8003bfe:	bf88      	it	hi
 8003c00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003c04:	468b      	mov	fp, r1
 8003c06:	f04f 0500 	mov.w	r5, #0
 8003c0a:	bf8c      	ite	hi
 8003c0c:	608b      	strhi	r3, [r1, #8]
 8003c0e:	9302      	strls	r3, [sp, #8]
 8003c10:	680b      	ldr	r3, [r1, #0]
 8003c12:	4680      	mov	r8, r0
 8003c14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003c18:	f84b 3b1c 	str.w	r3, [fp], #28
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	465e      	mov	r6, fp
 8003c20:	46aa      	mov	sl, r5
 8003c22:	46a9      	mov	r9, r5
 8003c24:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c28:	9501      	str	r5, [sp, #4]
 8003c2a:	68a2      	ldr	r2, [r4, #8]
 8003c2c:	b152      	cbz	r2, 8003c44 <_scanf_float+0x64>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b4e      	cmp	r3, #78	; 0x4e
 8003c34:	d864      	bhi.n	8003d00 <_scanf_float+0x120>
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d83c      	bhi.n	8003cb4 <_scanf_float+0xd4>
 8003c3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003c3e:	b2c8      	uxtb	r0, r1
 8003c40:	280e      	cmp	r0, #14
 8003c42:	d93a      	bls.n	8003cba <_scanf_float+0xda>
 8003c44:	f1b9 0f00 	cmp.w	r9, #0
 8003c48:	d003      	beq.n	8003c52 <_scanf_float+0x72>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c56:	f1ba 0f01 	cmp.w	sl, #1
 8003c5a:	f200 8113 	bhi.w	8003e84 <_scanf_float+0x2a4>
 8003c5e:	455e      	cmp	r6, fp
 8003c60:	f200 8105 	bhi.w	8003e6e <_scanf_float+0x28e>
 8003c64:	2501      	movs	r5, #1
 8003c66:	4628      	mov	r0, r5
 8003c68:	b007      	add	sp, #28
 8003c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003c72:	2a0d      	cmp	r2, #13
 8003c74:	d8e6      	bhi.n	8003c44 <_scanf_float+0x64>
 8003c76:	a101      	add	r1, pc, #4	; (adr r1, 8003c7c <_scanf_float+0x9c>)
 8003c78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c7c:	08003dbb 	.word	0x08003dbb
 8003c80:	08003c45 	.word	0x08003c45
 8003c84:	08003c45 	.word	0x08003c45
 8003c88:	08003c45 	.word	0x08003c45
 8003c8c:	08003e1b 	.word	0x08003e1b
 8003c90:	08003df3 	.word	0x08003df3
 8003c94:	08003c45 	.word	0x08003c45
 8003c98:	08003c45 	.word	0x08003c45
 8003c9c:	08003dc9 	.word	0x08003dc9
 8003ca0:	08003c45 	.word	0x08003c45
 8003ca4:	08003c45 	.word	0x08003c45
 8003ca8:	08003c45 	.word	0x08003c45
 8003cac:	08003c45 	.word	0x08003c45
 8003cb0:	08003d81 	.word	0x08003d81
 8003cb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003cb8:	e7db      	b.n	8003c72 <_scanf_float+0x92>
 8003cba:	290e      	cmp	r1, #14
 8003cbc:	d8c2      	bhi.n	8003c44 <_scanf_float+0x64>
 8003cbe:	a001      	add	r0, pc, #4	; (adr r0, 8003cc4 <_scanf_float+0xe4>)
 8003cc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003cc4:	08003d73 	.word	0x08003d73
 8003cc8:	08003c45 	.word	0x08003c45
 8003ccc:	08003d73 	.word	0x08003d73
 8003cd0:	08003e07 	.word	0x08003e07
 8003cd4:	08003c45 	.word	0x08003c45
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d5d 	.word	0x08003d5d
 8003ce0:	08003d5d 	.word	0x08003d5d
 8003ce4:	08003d5d 	.word	0x08003d5d
 8003ce8:	08003d5d 	.word	0x08003d5d
 8003cec:	08003d5d 	.word	0x08003d5d
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	2b6e      	cmp	r3, #110	; 0x6e
 8003d02:	d809      	bhi.n	8003d18 <_scanf_float+0x138>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d8b2      	bhi.n	8003c6e <_scanf_float+0x8e>
 8003d08:	2b54      	cmp	r3, #84	; 0x54
 8003d0a:	d077      	beq.n	8003dfc <_scanf_float+0x21c>
 8003d0c:	2b59      	cmp	r3, #89	; 0x59
 8003d0e:	d199      	bne.n	8003c44 <_scanf_float+0x64>
 8003d10:	2d07      	cmp	r5, #7
 8003d12:	d197      	bne.n	8003c44 <_scanf_float+0x64>
 8003d14:	2508      	movs	r5, #8
 8003d16:	e029      	b.n	8003d6c <_scanf_float+0x18c>
 8003d18:	2b74      	cmp	r3, #116	; 0x74
 8003d1a:	d06f      	beq.n	8003dfc <_scanf_float+0x21c>
 8003d1c:	2b79      	cmp	r3, #121	; 0x79
 8003d1e:	e7f6      	b.n	8003d0e <_scanf_float+0x12e>
 8003d20:	6821      	ldr	r1, [r4, #0]
 8003d22:	05c8      	lsls	r0, r1, #23
 8003d24:	d51a      	bpl.n	8003d5c <_scanf_float+0x17c>
 8003d26:	9b02      	ldr	r3, [sp, #8]
 8003d28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003d2c:	6021      	str	r1, [r4, #0]
 8003d2e:	f109 0901 	add.w	r9, r9, #1
 8003d32:	b11b      	cbz	r3, 8003d3c <_scanf_float+0x15c>
 8003d34:	3b01      	subs	r3, #1
 8003d36:	3201      	adds	r2, #1
 8003d38:	9302      	str	r3, [sp, #8]
 8003d3a:	60a2      	str	r2, [r4, #8]
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60a3      	str	r3, [r4, #8]
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	3301      	adds	r3, #1
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	f340 8084 	ble.w	8003e5c <_scanf_float+0x27c>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	e766      	b.n	8003c2a <_scanf_float+0x4a>
 8003d5c:	eb1a 0f05 	cmn.w	sl, r5
 8003d60:	f47f af70 	bne.w	8003c44 <_scanf_float+0x64>
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003d6a:	6022      	str	r2, [r4, #0]
 8003d6c:	f806 3b01 	strb.w	r3, [r6], #1
 8003d70:	e7e4      	b.n	8003d3c <_scanf_float+0x15c>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	0610      	lsls	r0, r2, #24
 8003d76:	f57f af65 	bpl.w	8003c44 <_scanf_float+0x64>
 8003d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d7e:	e7f4      	b.n	8003d6a <_scanf_float+0x18a>
 8003d80:	f1ba 0f00 	cmp.w	sl, #0
 8003d84:	d10e      	bne.n	8003da4 <_scanf_float+0x1c4>
 8003d86:	f1b9 0f00 	cmp.w	r9, #0
 8003d8a:	d10e      	bne.n	8003daa <_scanf_float+0x1ca>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d96:	d108      	bne.n	8003daa <_scanf_float+0x1ca>
 8003d98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d9c:	f04f 0a01 	mov.w	sl, #1
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	e7e3      	b.n	8003d6c <_scanf_float+0x18c>
 8003da4:	f1ba 0f02 	cmp.w	sl, #2
 8003da8:	d055      	beq.n	8003e56 <_scanf_float+0x276>
 8003daa:	2d01      	cmp	r5, #1
 8003dac:	d002      	beq.n	8003db4 <_scanf_float+0x1d4>
 8003dae:	2d04      	cmp	r5, #4
 8003db0:	f47f af48 	bne.w	8003c44 <_scanf_float+0x64>
 8003db4:	3501      	adds	r5, #1
 8003db6:	b2ed      	uxtb	r5, r5
 8003db8:	e7d8      	b.n	8003d6c <_scanf_float+0x18c>
 8003dba:	f1ba 0f01 	cmp.w	sl, #1
 8003dbe:	f47f af41 	bne.w	8003c44 <_scanf_float+0x64>
 8003dc2:	f04f 0a02 	mov.w	sl, #2
 8003dc6:	e7d1      	b.n	8003d6c <_scanf_float+0x18c>
 8003dc8:	b97d      	cbnz	r5, 8003dea <_scanf_float+0x20a>
 8003dca:	f1b9 0f00 	cmp.w	r9, #0
 8003dce:	f47f af3c 	bne.w	8003c4a <_scanf_float+0x6a>
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003dd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ddc:	f47f af39 	bne.w	8003c52 <_scanf_float+0x72>
 8003de0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003de4:	2501      	movs	r5, #1
 8003de6:	6022      	str	r2, [r4, #0]
 8003de8:	e7c0      	b.n	8003d6c <_scanf_float+0x18c>
 8003dea:	2d03      	cmp	r5, #3
 8003dec:	d0e2      	beq.n	8003db4 <_scanf_float+0x1d4>
 8003dee:	2d05      	cmp	r5, #5
 8003df0:	e7de      	b.n	8003db0 <_scanf_float+0x1d0>
 8003df2:	2d02      	cmp	r5, #2
 8003df4:	f47f af26 	bne.w	8003c44 <_scanf_float+0x64>
 8003df8:	2503      	movs	r5, #3
 8003dfa:	e7b7      	b.n	8003d6c <_scanf_float+0x18c>
 8003dfc:	2d06      	cmp	r5, #6
 8003dfe:	f47f af21 	bne.w	8003c44 <_scanf_float+0x64>
 8003e02:	2507      	movs	r5, #7
 8003e04:	e7b2      	b.n	8003d6c <_scanf_float+0x18c>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	0591      	lsls	r1, r2, #22
 8003e0a:	f57f af1b 	bpl.w	8003c44 <_scanf_float+0x64>
 8003e0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e18:	e7a8      	b.n	8003d6c <_scanf_float+0x18c>
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003e20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e24:	d006      	beq.n	8003e34 <_scanf_float+0x254>
 8003e26:	0550      	lsls	r0, r2, #21
 8003e28:	f57f af0c 	bpl.w	8003c44 <_scanf_float+0x64>
 8003e2c:	f1b9 0f00 	cmp.w	r9, #0
 8003e30:	f43f af0f 	beq.w	8003c52 <_scanf_float+0x72>
 8003e34:	0591      	lsls	r1, r2, #22
 8003e36:	bf58      	it	pl
 8003e38:	9901      	ldrpl	r1, [sp, #4]
 8003e3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e3e:	bf58      	it	pl
 8003e40:	eba9 0101 	subpl.w	r1, r9, r1
 8003e44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003e48:	f04f 0900 	mov.w	r9, #0
 8003e4c:	bf58      	it	pl
 8003e4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003e52:	6022      	str	r2, [r4, #0]
 8003e54:	e78a      	b.n	8003d6c <_scanf_float+0x18c>
 8003e56:	f04f 0a03 	mov.w	sl, #3
 8003e5a:	e787      	b.n	8003d6c <_scanf_float+0x18c>
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e64:	4798      	blx	r3
 8003e66:	2800      	cmp	r0, #0
 8003e68:	f43f aedf 	beq.w	8003c2a <_scanf_float+0x4a>
 8003e6c:	e6ea      	b.n	8003c44 <_scanf_float+0x64>
 8003e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e72:	463a      	mov	r2, r7
 8003e74:	4640      	mov	r0, r8
 8003e76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e7a:	4798      	blx	r3
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	e6ec      	b.n	8003c5e <_scanf_float+0x7e>
 8003e84:	1e6b      	subs	r3, r5, #1
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d825      	bhi.n	8003ed6 <_scanf_float+0x2f6>
 8003e8a:	2d02      	cmp	r5, #2
 8003e8c:	d836      	bhi.n	8003efc <_scanf_float+0x31c>
 8003e8e:	455e      	cmp	r6, fp
 8003e90:	f67f aee8 	bls.w	8003c64 <_scanf_float+0x84>
 8003e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e98:	463a      	mov	r2, r7
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ea0:	4798      	blx	r3
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	e7f1      	b.n	8003e8e <_scanf_float+0x2ae>
 8003eaa:	9802      	ldr	r0, [sp, #8]
 8003eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003eb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003eb4:	463a      	mov	r2, r7
 8003eb6:	9002      	str	r0, [sp, #8]
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4798      	blx	r3
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ec6:	fa5f fa8a 	uxtb.w	sl, sl
 8003eca:	f1ba 0f02 	cmp.w	sl, #2
 8003ece:	d1ec      	bne.n	8003eaa <_scanf_float+0x2ca>
 8003ed0:	3d03      	subs	r5, #3
 8003ed2:	b2ed      	uxtb	r5, r5
 8003ed4:	1b76      	subs	r6, r6, r5
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	05da      	lsls	r2, r3, #23
 8003eda:	d52f      	bpl.n	8003f3c <_scanf_float+0x35c>
 8003edc:	055b      	lsls	r3, r3, #21
 8003ede:	d510      	bpl.n	8003f02 <_scanf_float+0x322>
 8003ee0:	455e      	cmp	r6, fp
 8003ee2:	f67f aebf 	bls.w	8003c64 <_scanf_float+0x84>
 8003ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003eea:	463a      	mov	r2, r7
 8003eec:	4640      	mov	r0, r8
 8003eee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ef2:	4798      	blx	r3
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	e7f1      	b.n	8003ee0 <_scanf_float+0x300>
 8003efc:	46aa      	mov	sl, r5
 8003efe:	9602      	str	r6, [sp, #8]
 8003f00:	e7df      	b.n	8003ec2 <_scanf_float+0x2e2>
 8003f02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	2965      	cmp	r1, #101	; 0x65
 8003f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003f12:	6123      	str	r3, [r4, #16]
 8003f14:	d00c      	beq.n	8003f30 <_scanf_float+0x350>
 8003f16:	2945      	cmp	r1, #69	; 0x45
 8003f18:	d00a      	beq.n	8003f30 <_scanf_float+0x350>
 8003f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f1e:	463a      	mov	r2, r7
 8003f20:	4640      	mov	r0, r8
 8003f22:	4798      	blx	r3
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	1eb5      	subs	r5, r6, #2
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	463a      	mov	r2, r7
 8003f32:	4640      	mov	r0, r8
 8003f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f38:	4798      	blx	r3
 8003f3a:	462e      	mov	r6, r5
 8003f3c:	6825      	ldr	r5, [r4, #0]
 8003f3e:	f015 0510 	ands.w	r5, r5, #16
 8003f42:	d159      	bne.n	8003ff8 <_scanf_float+0x418>
 8003f44:	7035      	strb	r5, [r6, #0]
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	d11c      	bne.n	8003f8c <_scanf_float+0x3ac>
 8003f52:	9b01      	ldr	r3, [sp, #4]
 8003f54:	454b      	cmp	r3, r9
 8003f56:	eba3 0209 	sub.w	r2, r3, r9
 8003f5a:	d124      	bne.n	8003fa6 <_scanf_float+0x3c6>
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4659      	mov	r1, fp
 8003f60:	4640      	mov	r0, r8
 8003f62:	f000 fe89 	bl	8004c78 <_strtod_r>
 8003f66:	f8d4 c000 	ldr.w	ip, [r4]
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	f01c 0f02 	tst.w	ip, #2
 8003f70:	4606      	mov	r6, r0
 8003f72:	460f      	mov	r7, r1
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	d021      	beq.n	8003fbc <_scanf_float+0x3dc>
 8003f78:	9903      	ldr	r1, [sp, #12]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	600a      	str	r2, [r1, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	e9c3 6700 	strd	r6, r7, [r3]
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	3301      	adds	r3, #1
 8003f88:	60e3      	str	r3, [r4, #12]
 8003f8a:	e66c      	b.n	8003c66 <_scanf_float+0x86>
 8003f8c:	9b04      	ldr	r3, [sp, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0e4      	beq.n	8003f5c <_scanf_float+0x37c>
 8003f92:	9905      	ldr	r1, [sp, #20]
 8003f94:	230a      	movs	r3, #10
 8003f96:	462a      	mov	r2, r5
 8003f98:	4640      	mov	r0, r8
 8003f9a:	3101      	adds	r1, #1
 8003f9c:	f000 fef8 	bl	8004d90 <_strtol_r>
 8003fa0:	9b04      	ldr	r3, [sp, #16]
 8003fa2:	9e05      	ldr	r6, [sp, #20]
 8003fa4:	1ac2      	subs	r2, r0, r3
 8003fa6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003faa:	429e      	cmp	r6, r3
 8003fac:	bf28      	it	cs
 8003fae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4911      	ldr	r1, [pc, #68]	; (8003ffc <_scanf_float+0x41c>)
 8003fb6:	f000 f829 	bl	800400c <siprintf>
 8003fba:	e7cf      	b.n	8003f5c <_scanf_float+0x37c>
 8003fbc:	f01c 0f04 	tst.w	ip, #4
 8003fc0:	f103 0e04 	add.w	lr, r3, #4
 8003fc4:	d003      	beq.n	8003fce <_scanf_float+0x3ee>
 8003fc6:	9903      	ldr	r1, [sp, #12]
 8003fc8:	f8c1 e000 	str.w	lr, [r1]
 8003fcc:	e7d7      	b.n	8003f7e <_scanf_float+0x39e>
 8003fce:	9a03      	ldr	r2, [sp, #12]
 8003fd0:	f8c2 e000 	str.w	lr, [r2]
 8003fd4:	f8d3 8000 	ldr.w	r8, [r3]
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	f7fc fd16 	bl	8000a0c <__aeabi_dcmpun>
 8003fe0:	b128      	cbz	r0, 8003fee <_scanf_float+0x40e>
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <_scanf_float+0x420>)
 8003fe4:	f000 f80e 	bl	8004004 <nanf>
 8003fe8:	f8c8 0000 	str.w	r0, [r8]
 8003fec:	e7ca      	b.n	8003f84 <_scanf_float+0x3a4>
 8003fee:	4630      	mov	r0, r6
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	f7fc fd69 	bl	8000ac8 <__aeabi_d2f>
 8003ff6:	e7f7      	b.n	8003fe8 <_scanf_float+0x408>
 8003ff8:	2500      	movs	r5, #0
 8003ffa:	e634      	b.n	8003c66 <_scanf_float+0x86>
 8003ffc:	08007bf0 	.word	0x08007bf0
 8004000:	08008008 	.word	0x08008008

08004004 <nanf>:
 8004004:	4800      	ldr	r0, [pc, #0]	; (8004008 <nanf+0x4>)
 8004006:	4770      	bx	lr
 8004008:	7fc00000 	.word	0x7fc00000

0800400c <siprintf>:
 800400c:	b40e      	push	{r1, r2, r3}
 800400e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004012:	b500      	push	{lr}
 8004014:	b09c      	sub	sp, #112	; 0x70
 8004016:	ab1d      	add	r3, sp, #116	; 0x74
 8004018:	9002      	str	r0, [sp, #8]
 800401a:	9006      	str	r0, [sp, #24]
 800401c:	9107      	str	r1, [sp, #28]
 800401e:	9104      	str	r1, [sp, #16]
 8004020:	4808      	ldr	r0, [pc, #32]	; (8004044 <siprintf+0x38>)
 8004022:	4909      	ldr	r1, [pc, #36]	; (8004048 <siprintf+0x3c>)
 8004024:	f853 2b04 	ldr.w	r2, [r3], #4
 8004028:	9105      	str	r1, [sp, #20]
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	a902      	add	r1, sp, #8
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	f002 fe94 	bl	8006d5c <_svfiprintf_r>
 8004034:	2200      	movs	r2, #0
 8004036:	9b02      	ldr	r3, [sp, #8]
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	b01c      	add	sp, #112	; 0x70
 800403c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004040:	b003      	add	sp, #12
 8004042:	4770      	bx	lr
 8004044:	2000000c 	.word	0x2000000c
 8004048:	ffff0208 	.word	0xffff0208

0800404c <sulp>:
 800404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	460f      	mov	r7, r1
 8004052:	4690      	mov	r8, r2
 8004054:	f002 fc2a 	bl	80068ac <__ulp>
 8004058:	4604      	mov	r4, r0
 800405a:	460d      	mov	r5, r1
 800405c:	f1b8 0f00 	cmp.w	r8, #0
 8004060:	d011      	beq.n	8004086 <sulp+0x3a>
 8004062:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004066:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800406a:	2b00      	cmp	r3, #0
 800406c:	dd0b      	ble.n	8004086 <sulp+0x3a>
 800406e:	2400      	movs	r4, #0
 8004070:	051b      	lsls	r3, r3, #20
 8004072:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004076:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	f7fc fa2b 	bl	80004d8 <__aeabi_dmul>
 8004082:	4604      	mov	r4, r0
 8004084:	460d      	mov	r5, r1
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004090 <_strtod_l>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	469b      	mov	fp, r3
 8004096:	2300      	movs	r3, #0
 8004098:	b0a1      	sub	sp, #132	; 0x84
 800409a:	931c      	str	r3, [sp, #112]	; 0x70
 800409c:	4ba1      	ldr	r3, [pc, #644]	; (8004324 <_strtod_l+0x294>)
 800409e:	4682      	mov	sl, r0
 80040a0:	681f      	ldr	r7, [r3, #0]
 80040a2:	460e      	mov	r6, r1
 80040a4:	4638      	mov	r0, r7
 80040a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80040a8:	f7fc f852 	bl	8000150 <strlen>
 80040ac:	f04f 0800 	mov.w	r8, #0
 80040b0:	4604      	mov	r4, r0
 80040b2:	f04f 0900 	mov.w	r9, #0
 80040b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80040b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	2a2b      	cmp	r2, #43	; 0x2b
 80040be:	d04c      	beq.n	800415a <_strtod_l+0xca>
 80040c0:	d83a      	bhi.n	8004138 <_strtod_l+0xa8>
 80040c2:	2a0d      	cmp	r2, #13
 80040c4:	d833      	bhi.n	800412e <_strtod_l+0x9e>
 80040c6:	2a08      	cmp	r2, #8
 80040c8:	d833      	bhi.n	8004132 <_strtod_l+0xa2>
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	d03d      	beq.n	800414a <_strtod_l+0xba>
 80040ce:	2300      	movs	r3, #0
 80040d0:	930c      	str	r3, [sp, #48]	; 0x30
 80040d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80040d4:	782b      	ldrb	r3, [r5, #0]
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	f040 80af 	bne.w	800423a <_strtod_l+0x1aa>
 80040dc:	786b      	ldrb	r3, [r5, #1]
 80040de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80040e2:	2b58      	cmp	r3, #88	; 0x58
 80040e4:	d16c      	bne.n	80041c0 <_strtod_l+0x130>
 80040e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040e8:	4650      	mov	r0, sl
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	ab1c      	add	r3, sp, #112	; 0x70
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4a8d      	ldr	r2, [pc, #564]	; (8004328 <_strtod_l+0x298>)
 80040f2:	f8cd b008 	str.w	fp, [sp, #8]
 80040f6:	ab1d      	add	r3, sp, #116	; 0x74
 80040f8:	a91b      	add	r1, sp, #108	; 0x6c
 80040fa:	f001 fd2f 	bl	8005b5c <__gethex>
 80040fe:	f010 0607 	ands.w	r6, r0, #7
 8004102:	4604      	mov	r4, r0
 8004104:	d005      	beq.n	8004112 <_strtod_l+0x82>
 8004106:	2e06      	cmp	r6, #6
 8004108:	d129      	bne.n	800415e <_strtod_l+0xce>
 800410a:	2300      	movs	r3, #0
 800410c:	3501      	adds	r5, #1
 800410e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004110:	930c      	str	r3, [sp, #48]	; 0x30
 8004112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 8596 	bne.w	8004c46 <_strtod_l+0xbb6>
 800411a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800411c:	b1d3      	cbz	r3, 8004154 <_strtod_l+0xc4>
 800411e:	4642      	mov	r2, r8
 8004120:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	b021      	add	sp, #132	; 0x84
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412e:	2a20      	cmp	r2, #32
 8004130:	d1cd      	bne.n	80040ce <_strtod_l+0x3e>
 8004132:	3301      	adds	r3, #1
 8004134:	931b      	str	r3, [sp, #108]	; 0x6c
 8004136:	e7bf      	b.n	80040b8 <_strtod_l+0x28>
 8004138:	2a2d      	cmp	r2, #45	; 0x2d
 800413a:	d1c8      	bne.n	80040ce <_strtod_l+0x3e>
 800413c:	2201      	movs	r2, #1
 800413e:	920c      	str	r2, [sp, #48]	; 0x30
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	921b      	str	r2, [sp, #108]	; 0x6c
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1c3      	bne.n	80040d2 <_strtod_l+0x42>
 800414a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800414c:	961b      	str	r6, [sp, #108]	; 0x6c
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 8577 	bne.w	8004c42 <_strtod_l+0xbb2>
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	e7e4      	b.n	8004124 <_strtod_l+0x94>
 800415a:	2200      	movs	r2, #0
 800415c:	e7ef      	b.n	800413e <_strtod_l+0xae>
 800415e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004160:	b13a      	cbz	r2, 8004172 <_strtod_l+0xe2>
 8004162:	2135      	movs	r1, #53	; 0x35
 8004164:	a81e      	add	r0, sp, #120	; 0x78
 8004166:	f002 fca5 	bl	8006ab4 <__copybits>
 800416a:	4650      	mov	r0, sl
 800416c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800416e:	f002 f86d 	bl	800624c <_Bfree>
 8004172:	3e01      	subs	r6, #1
 8004174:	2e05      	cmp	r6, #5
 8004176:	d807      	bhi.n	8004188 <_strtod_l+0xf8>
 8004178:	e8df f006 	tbb	[pc, r6]
 800417c:	1d180b0e 	.word	0x1d180b0e
 8004180:	030e      	.short	0x030e
 8004182:	f04f 0900 	mov.w	r9, #0
 8004186:	46c8      	mov	r8, r9
 8004188:	0721      	lsls	r1, r4, #28
 800418a:	d5c2      	bpl.n	8004112 <_strtod_l+0x82>
 800418c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004190:	e7bf      	b.n	8004112 <_strtod_l+0x82>
 8004192:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004196:	e7f7      	b.n	8004188 <_strtod_l+0xf8>
 8004198:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800419a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800419e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80041a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80041a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80041aa:	e7ed      	b.n	8004188 <_strtod_l+0xf8>
 80041ac:	f04f 0800 	mov.w	r8, #0
 80041b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800432c <_strtod_l+0x29c>
 80041b4:	e7e8      	b.n	8004188 <_strtod_l+0xf8>
 80041b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80041ba:	f04f 38ff 	mov.w	r8, #4294967295
 80041be:	e7e3      	b.n	8004188 <_strtod_l+0xf8>
 80041c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d0f9      	beq.n	80041c0 <_strtod_l+0x130>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0a0      	beq.n	8004112 <_strtod_l+0x82>
 80041d0:	2301      	movs	r3, #1
 80041d2:	9307      	str	r3, [sp, #28]
 80041d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041d6:	220a      	movs	r2, #10
 80041d8:	9308      	str	r3, [sp, #32]
 80041da:	2300      	movs	r3, #0
 80041dc:	469b      	mov	fp, r3
 80041de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80041e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80041e4:	7805      	ldrb	r5, [r0, #0]
 80041e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80041ea:	b2d9      	uxtb	r1, r3
 80041ec:	2909      	cmp	r1, #9
 80041ee:	d926      	bls.n	800423e <_strtod_l+0x1ae>
 80041f0:	4622      	mov	r2, r4
 80041f2:	4639      	mov	r1, r7
 80041f4:	f002 fec8 	bl	8006f88 <strncmp>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d032      	beq.n	8004262 <_strtod_l+0x1d2>
 80041fc:	2000      	movs	r0, #0
 80041fe:	462b      	mov	r3, r5
 8004200:	465c      	mov	r4, fp
 8004202:	4602      	mov	r2, r0
 8004204:	9004      	str	r0, [sp, #16]
 8004206:	2b65      	cmp	r3, #101	; 0x65
 8004208:	d001      	beq.n	800420e <_strtod_l+0x17e>
 800420a:	2b45      	cmp	r3, #69	; 0x45
 800420c:	d113      	bne.n	8004236 <_strtod_l+0x1a6>
 800420e:	b91c      	cbnz	r4, 8004218 <_strtod_l+0x188>
 8004210:	9b07      	ldr	r3, [sp, #28]
 8004212:	4303      	orrs	r3, r0
 8004214:	d099      	beq.n	800414a <_strtod_l+0xba>
 8004216:	2400      	movs	r4, #0
 8004218:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800421a:	1c73      	adds	r3, r6, #1
 800421c:	931b      	str	r3, [sp, #108]	; 0x6c
 800421e:	7873      	ldrb	r3, [r6, #1]
 8004220:	2b2b      	cmp	r3, #43	; 0x2b
 8004222:	d078      	beq.n	8004316 <_strtod_l+0x286>
 8004224:	2b2d      	cmp	r3, #45	; 0x2d
 8004226:	d07b      	beq.n	8004320 <_strtod_l+0x290>
 8004228:	2700      	movs	r7, #0
 800422a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800422e:	2909      	cmp	r1, #9
 8004230:	f240 8082 	bls.w	8004338 <_strtod_l+0x2a8>
 8004234:	961b      	str	r6, [sp, #108]	; 0x6c
 8004236:	2500      	movs	r5, #0
 8004238:	e09e      	b.n	8004378 <_strtod_l+0x2e8>
 800423a:	2300      	movs	r3, #0
 800423c:	e7c9      	b.n	80041d2 <_strtod_l+0x142>
 800423e:	f1bb 0f08 	cmp.w	fp, #8
 8004242:	bfd5      	itete	le
 8004244:	9906      	ldrle	r1, [sp, #24]
 8004246:	9905      	ldrgt	r1, [sp, #20]
 8004248:	fb02 3301 	mlale	r3, r2, r1, r3
 800424c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004250:	f100 0001 	add.w	r0, r0, #1
 8004254:	bfd4      	ite	le
 8004256:	9306      	strle	r3, [sp, #24]
 8004258:	9305      	strgt	r3, [sp, #20]
 800425a:	f10b 0b01 	add.w	fp, fp, #1
 800425e:	901b      	str	r0, [sp, #108]	; 0x6c
 8004260:	e7bf      	b.n	80041e2 <_strtod_l+0x152>
 8004262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004264:	191a      	adds	r2, r3, r4
 8004266:	921b      	str	r2, [sp, #108]	; 0x6c
 8004268:	5d1b      	ldrb	r3, [r3, r4]
 800426a:	f1bb 0f00 	cmp.w	fp, #0
 800426e:	d036      	beq.n	80042de <_strtod_l+0x24e>
 8004270:	465c      	mov	r4, fp
 8004272:	9004      	str	r0, [sp, #16]
 8004274:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004278:	2a09      	cmp	r2, #9
 800427a:	d912      	bls.n	80042a2 <_strtod_l+0x212>
 800427c:	2201      	movs	r2, #1
 800427e:	e7c2      	b.n	8004206 <_strtod_l+0x176>
 8004280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004282:	3001      	adds	r0, #1
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	921b      	str	r2, [sp, #108]	; 0x6c
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b30      	cmp	r3, #48	; 0x30
 800428c:	d0f8      	beq.n	8004280 <_strtod_l+0x1f0>
 800428e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004292:	2a08      	cmp	r2, #8
 8004294:	f200 84dc 	bhi.w	8004c50 <_strtod_l+0xbc0>
 8004298:	9004      	str	r0, [sp, #16]
 800429a:	2000      	movs	r0, #0
 800429c:	4604      	mov	r4, r0
 800429e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80042a0:	9208      	str	r2, [sp, #32]
 80042a2:	3b30      	subs	r3, #48	; 0x30
 80042a4:	f100 0201 	add.w	r2, r0, #1
 80042a8:	d013      	beq.n	80042d2 <_strtod_l+0x242>
 80042aa:	9904      	ldr	r1, [sp, #16]
 80042ac:	1905      	adds	r5, r0, r4
 80042ae:	4411      	add	r1, r2
 80042b0:	9104      	str	r1, [sp, #16]
 80042b2:	4622      	mov	r2, r4
 80042b4:	210a      	movs	r1, #10
 80042b6:	42aa      	cmp	r2, r5
 80042b8:	d113      	bne.n	80042e2 <_strtod_l+0x252>
 80042ba:	1822      	adds	r2, r4, r0
 80042bc:	2a08      	cmp	r2, #8
 80042be:	f104 0401 	add.w	r4, r4, #1
 80042c2:	4404      	add	r4, r0
 80042c4:	dc1b      	bgt.n	80042fe <_strtod_l+0x26e>
 80042c6:	220a      	movs	r2, #10
 80042c8:	9906      	ldr	r1, [sp, #24]
 80042ca:	fb02 3301 	mla	r3, r2, r1, r3
 80042ce:	9306      	str	r3, [sp, #24]
 80042d0:	2200      	movs	r2, #0
 80042d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042d4:	4610      	mov	r0, r2
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	911b      	str	r1, [sp, #108]	; 0x6c
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	e7ca      	b.n	8004274 <_strtod_l+0x1e4>
 80042de:	4658      	mov	r0, fp
 80042e0:	e7d3      	b.n	800428a <_strtod_l+0x1fa>
 80042e2:	2a08      	cmp	r2, #8
 80042e4:	dc04      	bgt.n	80042f0 <_strtod_l+0x260>
 80042e6:	9f06      	ldr	r7, [sp, #24]
 80042e8:	434f      	muls	r7, r1
 80042ea:	9706      	str	r7, [sp, #24]
 80042ec:	3201      	adds	r2, #1
 80042ee:	e7e2      	b.n	80042b6 <_strtod_l+0x226>
 80042f0:	1c57      	adds	r7, r2, #1
 80042f2:	2f10      	cmp	r7, #16
 80042f4:	bfde      	ittt	le
 80042f6:	9f05      	ldrle	r7, [sp, #20]
 80042f8:	434f      	mulle	r7, r1
 80042fa:	9705      	strle	r7, [sp, #20]
 80042fc:	e7f6      	b.n	80042ec <_strtod_l+0x25c>
 80042fe:	2c10      	cmp	r4, #16
 8004300:	bfdf      	itttt	le
 8004302:	220a      	movle	r2, #10
 8004304:	9905      	ldrle	r1, [sp, #20]
 8004306:	fb02 3301 	mlale	r3, r2, r1, r3
 800430a:	9305      	strle	r3, [sp, #20]
 800430c:	e7e0      	b.n	80042d0 <_strtod_l+0x240>
 800430e:	2300      	movs	r3, #0
 8004310:	2201      	movs	r2, #1
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	e77c      	b.n	8004210 <_strtod_l+0x180>
 8004316:	2700      	movs	r7, #0
 8004318:	1cb3      	adds	r3, r6, #2
 800431a:	931b      	str	r3, [sp, #108]	; 0x6c
 800431c:	78b3      	ldrb	r3, [r6, #2]
 800431e:	e784      	b.n	800422a <_strtod_l+0x19a>
 8004320:	2701      	movs	r7, #1
 8004322:	e7f9      	b.n	8004318 <_strtod_l+0x288>
 8004324:	08007e48 	.word	0x08007e48
 8004328:	08007bf8 	.word	0x08007bf8
 800432c:	7ff00000 	.word	0x7ff00000
 8004330:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	911b      	str	r1, [sp, #108]	; 0x6c
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d0f9      	beq.n	8004330 <_strtod_l+0x2a0>
 800433c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004340:	2908      	cmp	r1, #8
 8004342:	f63f af78 	bhi.w	8004236 <_strtod_l+0x1a6>
 8004346:	f04f 0e0a 	mov.w	lr, #10
 800434a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800434e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004350:	9309      	str	r3, [sp, #36]	; 0x24
 8004352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	911b      	str	r1, [sp, #108]	; 0x6c
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800435e:	2d09      	cmp	r5, #9
 8004360:	d935      	bls.n	80043ce <_strtod_l+0x33e>
 8004362:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004364:	1b49      	subs	r1, r1, r5
 8004366:	2908      	cmp	r1, #8
 8004368:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800436c:	dc02      	bgt.n	8004374 <_strtod_l+0x2e4>
 800436e:	4565      	cmp	r5, ip
 8004370:	bfa8      	it	ge
 8004372:	4665      	movge	r5, ip
 8004374:	b107      	cbz	r7, 8004378 <_strtod_l+0x2e8>
 8004376:	426d      	negs	r5, r5
 8004378:	2c00      	cmp	r4, #0
 800437a:	d14c      	bne.n	8004416 <_strtod_l+0x386>
 800437c:	9907      	ldr	r1, [sp, #28]
 800437e:	4301      	orrs	r1, r0
 8004380:	f47f aec7 	bne.w	8004112 <_strtod_l+0x82>
 8004384:	2a00      	cmp	r2, #0
 8004386:	f47f aee0 	bne.w	800414a <_strtod_l+0xba>
 800438a:	2b69      	cmp	r3, #105	; 0x69
 800438c:	d026      	beq.n	80043dc <_strtod_l+0x34c>
 800438e:	dc23      	bgt.n	80043d8 <_strtod_l+0x348>
 8004390:	2b49      	cmp	r3, #73	; 0x49
 8004392:	d023      	beq.n	80043dc <_strtod_l+0x34c>
 8004394:	2b4e      	cmp	r3, #78	; 0x4e
 8004396:	f47f aed8 	bne.w	800414a <_strtod_l+0xba>
 800439a:	499c      	ldr	r1, [pc, #624]	; (800460c <_strtod_l+0x57c>)
 800439c:	a81b      	add	r0, sp, #108	; 0x6c
 800439e:	f001 fe2b 	bl	8005ff8 <__match>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	f43f aed1 	beq.w	800414a <_strtod_l+0xba>
 80043a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b28      	cmp	r3, #40	; 0x28
 80043ae:	d12c      	bne.n	800440a <_strtod_l+0x37a>
 80043b0:	4997      	ldr	r1, [pc, #604]	; (8004610 <_strtod_l+0x580>)
 80043b2:	aa1e      	add	r2, sp, #120	; 0x78
 80043b4:	a81b      	add	r0, sp, #108	; 0x6c
 80043b6:	f001 fe33 	bl	8006020 <__hexnan>
 80043ba:	2805      	cmp	r0, #5
 80043bc:	d125      	bne.n	800440a <_strtod_l+0x37a>
 80043be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043c0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80043c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80043c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80043cc:	e6a1      	b.n	8004112 <_strtod_l+0x82>
 80043ce:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80043d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80043d6:	e7bc      	b.n	8004352 <_strtod_l+0x2c2>
 80043d8:	2b6e      	cmp	r3, #110	; 0x6e
 80043da:	e7dc      	b.n	8004396 <_strtod_l+0x306>
 80043dc:	498d      	ldr	r1, [pc, #564]	; (8004614 <_strtod_l+0x584>)
 80043de:	a81b      	add	r0, sp, #108	; 0x6c
 80043e0:	f001 fe0a 	bl	8005ff8 <__match>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f43f aeb0 	beq.w	800414a <_strtod_l+0xba>
 80043ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043ec:	498a      	ldr	r1, [pc, #552]	; (8004618 <_strtod_l+0x588>)
 80043ee:	3b01      	subs	r3, #1
 80043f0:	a81b      	add	r0, sp, #108	; 0x6c
 80043f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80043f4:	f001 fe00 	bl	8005ff8 <__match>
 80043f8:	b910      	cbnz	r0, 8004400 <_strtod_l+0x370>
 80043fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043fc:	3301      	adds	r3, #1
 80043fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8004400:	f04f 0800 	mov.w	r8, #0
 8004404:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004628 <_strtod_l+0x598>
 8004408:	e683      	b.n	8004112 <_strtod_l+0x82>
 800440a:	4884      	ldr	r0, [pc, #528]	; (800461c <_strtod_l+0x58c>)
 800440c:	f002 fda6 	bl	8006f5c <nan>
 8004410:	4680      	mov	r8, r0
 8004412:	4689      	mov	r9, r1
 8004414:	e67d      	b.n	8004112 <_strtod_l+0x82>
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	f1bb 0f00 	cmp.w	fp, #0
 800441c:	bf08      	it	eq
 800441e:	46a3      	moveq	fp, r4
 8004420:	1aeb      	subs	r3, r5, r3
 8004422:	2c10      	cmp	r4, #16
 8004424:	9806      	ldr	r0, [sp, #24]
 8004426:	4626      	mov	r6, r4
 8004428:	9307      	str	r3, [sp, #28]
 800442a:	bfa8      	it	ge
 800442c:	2610      	movge	r6, #16
 800442e:	f7fb ffd9 	bl	80003e4 <__aeabi_ui2d>
 8004432:	2c09      	cmp	r4, #9
 8004434:	4680      	mov	r8, r0
 8004436:	4689      	mov	r9, r1
 8004438:	dd13      	ble.n	8004462 <_strtod_l+0x3d2>
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <_strtod_l+0x590>)
 800443c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004440:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004444:	f7fc f848 	bl	80004d8 <__aeabi_dmul>
 8004448:	4680      	mov	r8, r0
 800444a:	9805      	ldr	r0, [sp, #20]
 800444c:	4689      	mov	r9, r1
 800444e:	f7fb ffc9 	bl	80003e4 <__aeabi_ui2d>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4640      	mov	r0, r8
 8004458:	4649      	mov	r1, r9
 800445a:	f7fb fe87 	bl	800016c <__adddf3>
 800445e:	4680      	mov	r8, r0
 8004460:	4689      	mov	r9, r1
 8004462:	2c0f      	cmp	r4, #15
 8004464:	dc36      	bgt.n	80044d4 <_strtod_l+0x444>
 8004466:	9b07      	ldr	r3, [sp, #28]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f43f ae52 	beq.w	8004112 <_strtod_l+0x82>
 800446e:	dd22      	ble.n	80044b6 <_strtod_l+0x426>
 8004470:	2b16      	cmp	r3, #22
 8004472:	dc09      	bgt.n	8004488 <_strtod_l+0x3f8>
 8004474:	4c6a      	ldr	r4, [pc, #424]	; (8004620 <_strtod_l+0x590>)
 8004476:	4642      	mov	r2, r8
 8004478:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800447c:	464b      	mov	r3, r9
 800447e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004482:	f7fc f829 	bl	80004d8 <__aeabi_dmul>
 8004486:	e7c3      	b.n	8004410 <_strtod_l+0x380>
 8004488:	9a07      	ldr	r2, [sp, #28]
 800448a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800448e:	4293      	cmp	r3, r2
 8004490:	db20      	blt.n	80044d4 <_strtod_l+0x444>
 8004492:	4d63      	ldr	r5, [pc, #396]	; (8004620 <_strtod_l+0x590>)
 8004494:	f1c4 040f 	rsb	r4, r4, #15
 8004498:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800449c:	4642      	mov	r2, r8
 800449e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044a2:	464b      	mov	r3, r9
 80044a4:	f7fc f818 	bl	80004d8 <__aeabi_dmul>
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	1b1c      	subs	r4, r3, r4
 80044ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80044b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044b4:	e7e5      	b.n	8004482 <_strtod_l+0x3f2>
 80044b6:	9b07      	ldr	r3, [sp, #28]
 80044b8:	3316      	adds	r3, #22
 80044ba:	db0b      	blt.n	80044d4 <_strtod_l+0x444>
 80044bc:	9b04      	ldr	r3, [sp, #16]
 80044be:	4a58      	ldr	r2, [pc, #352]	; (8004620 <_strtod_l+0x590>)
 80044c0:	1b5d      	subs	r5, r3, r5
 80044c2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80044c6:	4640      	mov	r0, r8
 80044c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fc f92d 	bl	800072c <__aeabi_ddiv>
 80044d2:	e79d      	b.n	8004410 <_strtod_l+0x380>
 80044d4:	9b07      	ldr	r3, [sp, #28]
 80044d6:	1ba6      	subs	r6, r4, r6
 80044d8:	441e      	add	r6, r3
 80044da:	2e00      	cmp	r6, #0
 80044dc:	dd71      	ble.n	80045c2 <_strtod_l+0x532>
 80044de:	f016 030f 	ands.w	r3, r6, #15
 80044e2:	d00a      	beq.n	80044fa <_strtod_l+0x46a>
 80044e4:	494e      	ldr	r1, [pc, #312]	; (8004620 <_strtod_l+0x590>)
 80044e6:	4642      	mov	r2, r8
 80044e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80044ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044f0:	464b      	mov	r3, r9
 80044f2:	f7fb fff1 	bl	80004d8 <__aeabi_dmul>
 80044f6:	4680      	mov	r8, r0
 80044f8:	4689      	mov	r9, r1
 80044fa:	f036 060f 	bics.w	r6, r6, #15
 80044fe:	d050      	beq.n	80045a2 <_strtod_l+0x512>
 8004500:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004504:	dd27      	ble.n	8004556 <_strtod_l+0x4c6>
 8004506:	f04f 0b00 	mov.w	fp, #0
 800450a:	f8cd b010 	str.w	fp, [sp, #16]
 800450e:	f8cd b020 	str.w	fp, [sp, #32]
 8004512:	f8cd b018 	str.w	fp, [sp, #24]
 8004516:	2322      	movs	r3, #34	; 0x22
 8004518:	f04f 0800 	mov.w	r8, #0
 800451c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004628 <_strtod_l+0x598>
 8004520:	f8ca 3000 	str.w	r3, [sl]
 8004524:	9b08      	ldr	r3, [sp, #32]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f43f adf3 	beq.w	8004112 <_strtod_l+0x82>
 800452c:	4650      	mov	r0, sl
 800452e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004530:	f001 fe8c 	bl	800624c <_Bfree>
 8004534:	4650      	mov	r0, sl
 8004536:	9906      	ldr	r1, [sp, #24]
 8004538:	f001 fe88 	bl	800624c <_Bfree>
 800453c:	4650      	mov	r0, sl
 800453e:	9904      	ldr	r1, [sp, #16]
 8004540:	f001 fe84 	bl	800624c <_Bfree>
 8004544:	4650      	mov	r0, sl
 8004546:	9908      	ldr	r1, [sp, #32]
 8004548:	f001 fe80 	bl	800624c <_Bfree>
 800454c:	4659      	mov	r1, fp
 800454e:	4650      	mov	r0, sl
 8004550:	f001 fe7c 	bl	800624c <_Bfree>
 8004554:	e5dd      	b.n	8004112 <_strtod_l+0x82>
 8004556:	2300      	movs	r3, #0
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	461f      	mov	r7, r3
 800455e:	1136      	asrs	r6, r6, #4
 8004560:	2e01      	cmp	r6, #1
 8004562:	dc21      	bgt.n	80045a8 <_strtod_l+0x518>
 8004564:	b10b      	cbz	r3, 800456a <_strtod_l+0x4da>
 8004566:	4680      	mov	r8, r0
 8004568:	4689      	mov	r9, r1
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <_strtod_l+0x594>)
 800456c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004570:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004574:	4642      	mov	r2, r8
 8004576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800457a:	464b      	mov	r3, r9
 800457c:	f7fb ffac 	bl	80004d8 <__aeabi_dmul>
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <_strtod_l+0x598>)
 8004582:	460a      	mov	r2, r1
 8004584:	400b      	ands	r3, r1
 8004586:	4929      	ldr	r1, [pc, #164]	; (800462c <_strtod_l+0x59c>)
 8004588:	4680      	mov	r8, r0
 800458a:	428b      	cmp	r3, r1
 800458c:	d8bb      	bhi.n	8004506 <_strtod_l+0x476>
 800458e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004592:	428b      	cmp	r3, r1
 8004594:	bf86      	itte	hi
 8004596:	f04f 38ff 	movhi.w	r8, #4294967295
 800459a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004630 <_strtod_l+0x5a0>
 800459e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80045a2:	2300      	movs	r3, #0
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	e07e      	b.n	80046a6 <_strtod_l+0x616>
 80045a8:	07f2      	lsls	r2, r6, #31
 80045aa:	d507      	bpl.n	80045bc <_strtod_l+0x52c>
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <_strtod_l+0x594>)
 80045ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f7fb ff8f 	bl	80004d8 <__aeabi_dmul>
 80045ba:	2301      	movs	r3, #1
 80045bc:	3701      	adds	r7, #1
 80045be:	1076      	asrs	r6, r6, #1
 80045c0:	e7ce      	b.n	8004560 <_strtod_l+0x4d0>
 80045c2:	d0ee      	beq.n	80045a2 <_strtod_l+0x512>
 80045c4:	4276      	negs	r6, r6
 80045c6:	f016 020f 	ands.w	r2, r6, #15
 80045ca:	d00a      	beq.n	80045e2 <_strtod_l+0x552>
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <_strtod_l+0x590>)
 80045ce:	4640      	mov	r0, r8
 80045d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045d4:	4649      	mov	r1, r9
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f7fc f8a7 	bl	800072c <__aeabi_ddiv>
 80045de:	4680      	mov	r8, r0
 80045e0:	4689      	mov	r9, r1
 80045e2:	1136      	asrs	r6, r6, #4
 80045e4:	d0dd      	beq.n	80045a2 <_strtod_l+0x512>
 80045e6:	2e1f      	cmp	r6, #31
 80045e8:	dd24      	ble.n	8004634 <_strtod_l+0x5a4>
 80045ea:	f04f 0b00 	mov.w	fp, #0
 80045ee:	f8cd b010 	str.w	fp, [sp, #16]
 80045f2:	f8cd b020 	str.w	fp, [sp, #32]
 80045f6:	f8cd b018 	str.w	fp, [sp, #24]
 80045fa:	2322      	movs	r3, #34	; 0x22
 80045fc:	f04f 0800 	mov.w	r8, #0
 8004600:	f04f 0900 	mov.w	r9, #0
 8004604:	f8ca 3000 	str.w	r3, [sl]
 8004608:	e78c      	b.n	8004524 <_strtod_l+0x494>
 800460a:	bf00      	nop
 800460c:	08007bc9 	.word	0x08007bc9
 8004610:	08007c0c 	.word	0x08007c0c
 8004614:	08007bc1 	.word	0x08007bc1
 8004618:	08007d4c 	.word	0x08007d4c
 800461c:	08008008 	.word	0x08008008
 8004620:	08007ee8 	.word	0x08007ee8
 8004624:	08007ec0 	.word	0x08007ec0
 8004628:	7ff00000 	.word	0x7ff00000
 800462c:	7ca00000 	.word	0x7ca00000
 8004630:	7fefffff 	.word	0x7fefffff
 8004634:	f016 0310 	ands.w	r3, r6, #16
 8004638:	bf18      	it	ne
 800463a:	236a      	movne	r3, #106	; 0x6a
 800463c:	4640      	mov	r0, r8
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	4649      	mov	r1, r9
 8004642:	2300      	movs	r3, #0
 8004644:	4fb2      	ldr	r7, [pc, #712]	; (8004910 <_strtod_l+0x880>)
 8004646:	07f2      	lsls	r2, r6, #31
 8004648:	d504      	bpl.n	8004654 <_strtod_l+0x5c4>
 800464a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464e:	f7fb ff43 	bl	80004d8 <__aeabi_dmul>
 8004652:	2301      	movs	r3, #1
 8004654:	1076      	asrs	r6, r6, #1
 8004656:	f107 0708 	add.w	r7, r7, #8
 800465a:	d1f4      	bne.n	8004646 <_strtod_l+0x5b6>
 800465c:	b10b      	cbz	r3, 8004662 <_strtod_l+0x5d2>
 800465e:	4680      	mov	r8, r0
 8004660:	4689      	mov	r9, r1
 8004662:	9b05      	ldr	r3, [sp, #20]
 8004664:	b1bb      	cbz	r3, 8004696 <_strtod_l+0x606>
 8004666:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800466a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800466e:	2b00      	cmp	r3, #0
 8004670:	4649      	mov	r1, r9
 8004672:	dd10      	ble.n	8004696 <_strtod_l+0x606>
 8004674:	2b1f      	cmp	r3, #31
 8004676:	f340 812b 	ble.w	80048d0 <_strtod_l+0x840>
 800467a:	2b34      	cmp	r3, #52	; 0x34
 800467c:	bfd8      	it	le
 800467e:	f04f 32ff 	movle.w	r2, #4294967295
 8004682:	f04f 0800 	mov.w	r8, #0
 8004686:	bfcf      	iteee	gt
 8004688:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800468c:	3b20      	suble	r3, #32
 800468e:	fa02 f303 	lslle.w	r3, r2, r3
 8004692:	ea03 0901 	andle.w	r9, r3, r1
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fc f983 	bl	80009a8 <__aeabi_dcmpeq>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d1a1      	bne.n	80045ea <_strtod_l+0x55a>
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	465a      	mov	r2, fp
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4650      	mov	r0, sl
 80046ae:	4623      	mov	r3, r4
 80046b0:	9908      	ldr	r1, [sp, #32]
 80046b2:	f001 fe37 	bl	8006324 <__s2b>
 80046b6:	9008      	str	r0, [sp, #32]
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f43f af24 	beq.w	8004506 <_strtod_l+0x476>
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	f04f 0b00 	mov.w	fp, #0
 80046c4:	1b5d      	subs	r5, r3, r5
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	f8cd b010 	str.w	fp, [sp, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bfb4      	ite	lt
 80046d0:	462b      	movlt	r3, r5
 80046d2:	2300      	movge	r3, #0
 80046d4:	930e      	str	r3, [sp, #56]	; 0x38
 80046d6:	9b07      	ldr	r3, [sp, #28]
 80046d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80046dc:	9316      	str	r3, [sp, #88]	; 0x58
 80046de:	9b08      	ldr	r3, [sp, #32]
 80046e0:	4650      	mov	r0, sl
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	f001 fd72 	bl	80061cc <_Balloc>
 80046e8:	9006      	str	r0, [sp, #24]
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f43f af13 	beq.w	8004516 <_strtod_l+0x486>
 80046f0:	9b08      	ldr	r3, [sp, #32]
 80046f2:	300c      	adds	r0, #12
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	f103 010c 	add.w	r1, r3, #12
 80046fa:	3202      	adds	r2, #2
 80046fc:	0092      	lsls	r2, r2, #2
 80046fe:	f001 fd57 	bl	80061b0 <memcpy>
 8004702:	ab1e      	add	r3, sp, #120	; 0x78
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	ab1d      	add	r3, sp, #116	; 0x74
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4642      	mov	r2, r8
 800470c:	464b      	mov	r3, r9
 800470e:	4650      	mov	r0, sl
 8004710:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004714:	f002 f944 	bl	80069a0 <__d2b>
 8004718:	901c      	str	r0, [sp, #112]	; 0x70
 800471a:	2800      	cmp	r0, #0
 800471c:	f43f aefb 	beq.w	8004516 <_strtod_l+0x486>
 8004720:	2101      	movs	r1, #1
 8004722:	4650      	mov	r0, sl
 8004724:	f001 fe96 	bl	8006454 <__i2b>
 8004728:	4603      	mov	r3, r0
 800472a:	9004      	str	r0, [sp, #16]
 800472c:	2800      	cmp	r0, #0
 800472e:	f43f aef2 	beq.w	8004516 <_strtod_l+0x486>
 8004732:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004736:	2d00      	cmp	r5, #0
 8004738:	bfab      	itete	ge
 800473a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800473c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800473e:	18ee      	addge	r6, r5, r3
 8004740:	1b5c      	sublt	r4, r3, r5
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	bfa8      	it	ge
 8004746:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004748:	eba5 0503 	sub.w	r5, r5, r3
 800474c:	4415      	add	r5, r2
 800474e:	4b71      	ldr	r3, [pc, #452]	; (8004914 <_strtod_l+0x884>)
 8004750:	f105 35ff 	add.w	r5, r5, #4294967295
 8004754:	bfb8      	it	lt
 8004756:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004758:	429d      	cmp	r5, r3
 800475a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800475e:	f280 80c9 	bge.w	80048f4 <_strtod_l+0x864>
 8004762:	1b5b      	subs	r3, r3, r5
 8004764:	2b1f      	cmp	r3, #31
 8004766:	f04f 0701 	mov.w	r7, #1
 800476a:	eba2 0203 	sub.w	r2, r2, r3
 800476e:	f300 80b6 	bgt.w	80048de <_strtod_l+0x84e>
 8004772:	2500      	movs	r5, #0
 8004774:	fa07 f303 	lsl.w	r3, r7, r3
 8004778:	930f      	str	r3, [sp, #60]	; 0x3c
 800477a:	18b7      	adds	r7, r6, r2
 800477c:	9b05      	ldr	r3, [sp, #20]
 800477e:	42be      	cmp	r6, r7
 8004780:	4414      	add	r4, r2
 8004782:	441c      	add	r4, r3
 8004784:	4633      	mov	r3, r6
 8004786:	bfa8      	it	ge
 8004788:	463b      	movge	r3, r7
 800478a:	42a3      	cmp	r3, r4
 800478c:	bfa8      	it	ge
 800478e:	4623      	movge	r3, r4
 8004790:	2b00      	cmp	r3, #0
 8004792:	bfc2      	ittt	gt
 8004794:	1aff      	subgt	r7, r7, r3
 8004796:	1ae4      	subgt	r4, r4, r3
 8004798:	1af6      	subgt	r6, r6, r3
 800479a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	dd17      	ble.n	80047d0 <_strtod_l+0x740>
 80047a0:	461a      	mov	r2, r3
 80047a2:	4650      	mov	r0, sl
 80047a4:	9904      	ldr	r1, [sp, #16]
 80047a6:	f001 ff0f 	bl	80065c8 <__pow5mult>
 80047aa:	9004      	str	r0, [sp, #16]
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f43f aeb2 	beq.w	8004516 <_strtod_l+0x486>
 80047b2:	4601      	mov	r1, r0
 80047b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047b6:	4650      	mov	r0, sl
 80047b8:	f001 fe62 	bl	8006480 <__multiply>
 80047bc:	9009      	str	r0, [sp, #36]	; 0x24
 80047be:	2800      	cmp	r0, #0
 80047c0:	f43f aea9 	beq.w	8004516 <_strtod_l+0x486>
 80047c4:	4650      	mov	r0, sl
 80047c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80047c8:	f001 fd40 	bl	800624c <_Bfree>
 80047cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ce:	931c      	str	r3, [sp, #112]	; 0x70
 80047d0:	2f00      	cmp	r7, #0
 80047d2:	f300 8093 	bgt.w	80048fc <_strtod_l+0x86c>
 80047d6:	9b07      	ldr	r3, [sp, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dd08      	ble.n	80047ee <_strtod_l+0x75e>
 80047dc:	4650      	mov	r0, sl
 80047de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80047e0:	9906      	ldr	r1, [sp, #24]
 80047e2:	f001 fef1 	bl	80065c8 <__pow5mult>
 80047e6:	9006      	str	r0, [sp, #24]
 80047e8:	2800      	cmp	r0, #0
 80047ea:	f43f ae94 	beq.w	8004516 <_strtod_l+0x486>
 80047ee:	2c00      	cmp	r4, #0
 80047f0:	dd08      	ble.n	8004804 <_strtod_l+0x774>
 80047f2:	4622      	mov	r2, r4
 80047f4:	4650      	mov	r0, sl
 80047f6:	9906      	ldr	r1, [sp, #24]
 80047f8:	f001 ff40 	bl	800667c <__lshift>
 80047fc:	9006      	str	r0, [sp, #24]
 80047fe:	2800      	cmp	r0, #0
 8004800:	f43f ae89 	beq.w	8004516 <_strtod_l+0x486>
 8004804:	2e00      	cmp	r6, #0
 8004806:	dd08      	ble.n	800481a <_strtod_l+0x78a>
 8004808:	4632      	mov	r2, r6
 800480a:	4650      	mov	r0, sl
 800480c:	9904      	ldr	r1, [sp, #16]
 800480e:	f001 ff35 	bl	800667c <__lshift>
 8004812:	9004      	str	r0, [sp, #16]
 8004814:	2800      	cmp	r0, #0
 8004816:	f43f ae7e 	beq.w	8004516 <_strtod_l+0x486>
 800481a:	4650      	mov	r0, sl
 800481c:	9a06      	ldr	r2, [sp, #24]
 800481e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004820:	f001 ffb4 	bl	800678c <__mdiff>
 8004824:	4683      	mov	fp, r0
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f ae75 	beq.w	8004516 <_strtod_l+0x486>
 800482c:	2400      	movs	r4, #0
 800482e:	68c3      	ldr	r3, [r0, #12]
 8004830:	9904      	ldr	r1, [sp, #16]
 8004832:	60c4      	str	r4, [r0, #12]
 8004834:	930d      	str	r3, [sp, #52]	; 0x34
 8004836:	f001 ff8d 	bl	8006754 <__mcmp>
 800483a:	42a0      	cmp	r0, r4
 800483c:	da70      	bge.n	8004920 <_strtod_l+0x890>
 800483e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004840:	ea53 0308 	orrs.w	r3, r3, r8
 8004844:	f040 8096 	bne.w	8004974 <_strtod_l+0x8e4>
 8004848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8091 	bne.w	8004974 <_strtod_l+0x8e4>
 8004852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004856:	0d1b      	lsrs	r3, r3, #20
 8004858:	051b      	lsls	r3, r3, #20
 800485a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800485e:	f240 8089 	bls.w	8004974 <_strtod_l+0x8e4>
 8004862:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004866:	b923      	cbnz	r3, 8004872 <_strtod_l+0x7e2>
 8004868:	f8db 3010 	ldr.w	r3, [fp, #16]
 800486c:	2b01      	cmp	r3, #1
 800486e:	f340 8081 	ble.w	8004974 <_strtod_l+0x8e4>
 8004872:	4659      	mov	r1, fp
 8004874:	2201      	movs	r2, #1
 8004876:	4650      	mov	r0, sl
 8004878:	f001 ff00 	bl	800667c <__lshift>
 800487c:	9904      	ldr	r1, [sp, #16]
 800487e:	4683      	mov	fp, r0
 8004880:	f001 ff68 	bl	8006754 <__mcmp>
 8004884:	2800      	cmp	r0, #0
 8004886:	dd75      	ble.n	8004974 <_strtod_l+0x8e4>
 8004888:	9905      	ldr	r1, [sp, #20]
 800488a:	464b      	mov	r3, r9
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <_strtod_l+0x888>)
 800488e:	2900      	cmp	r1, #0
 8004890:	f000 8091 	beq.w	80049b6 <_strtod_l+0x926>
 8004894:	ea02 0109 	and.w	r1, r2, r9
 8004898:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800489c:	f300 808b 	bgt.w	80049b6 <_strtod_l+0x926>
 80048a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80048a4:	f77f aea9 	ble.w	80045fa <_strtod_l+0x56a>
 80048a8:	2300      	movs	r3, #0
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <_strtod_l+0x88c>)
 80048ac:	4640      	mov	r0, r8
 80048ae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80048b2:	4649      	mov	r1, r9
 80048b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	460b      	mov	r3, r1
 80048be:	4303      	orrs	r3, r0
 80048c0:	bf08      	it	eq
 80048c2:	2322      	moveq	r3, #34	; 0x22
 80048c4:	4680      	mov	r8, r0
 80048c6:	4689      	mov	r9, r1
 80048c8:	bf08      	it	eq
 80048ca:	f8ca 3000 	streq.w	r3, [sl]
 80048ce:	e62d      	b.n	800452c <_strtod_l+0x49c>
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	ea03 0808 	and.w	r8, r3, r8
 80048dc:	e6db      	b.n	8004696 <_strtod_l+0x606>
 80048de:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80048e2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80048e6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80048ea:	35e2      	adds	r5, #226	; 0xe2
 80048ec:	fa07 f505 	lsl.w	r5, r7, r5
 80048f0:	970f      	str	r7, [sp, #60]	; 0x3c
 80048f2:	e742      	b.n	800477a <_strtod_l+0x6ea>
 80048f4:	2301      	movs	r3, #1
 80048f6:	2500      	movs	r5, #0
 80048f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80048fa:	e73e      	b.n	800477a <_strtod_l+0x6ea>
 80048fc:	463a      	mov	r2, r7
 80048fe:	4650      	mov	r0, sl
 8004900:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004902:	f001 febb 	bl	800667c <__lshift>
 8004906:	901c      	str	r0, [sp, #112]	; 0x70
 8004908:	2800      	cmp	r0, #0
 800490a:	f47f af64 	bne.w	80047d6 <_strtod_l+0x746>
 800490e:	e602      	b.n	8004516 <_strtod_l+0x486>
 8004910:	08007c20 	.word	0x08007c20
 8004914:	fffffc02 	.word	0xfffffc02
 8004918:	7ff00000 	.word	0x7ff00000
 800491c:	39500000 	.word	0x39500000
 8004920:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004924:	d166      	bne.n	80049f4 <_strtod_l+0x964>
 8004926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800492c:	b35a      	cbz	r2, 8004986 <_strtod_l+0x8f6>
 800492e:	4a9c      	ldr	r2, [pc, #624]	; (8004ba0 <_strtod_l+0xb10>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d12c      	bne.n	800498e <_strtod_l+0x8fe>
 8004934:	9b05      	ldr	r3, [sp, #20]
 8004936:	4640      	mov	r0, r8
 8004938:	b303      	cbz	r3, 800497c <_strtod_l+0x8ec>
 800493a:	464b      	mov	r3, r9
 800493c:	4a99      	ldr	r2, [pc, #612]	; (8004ba4 <_strtod_l+0xb14>)
 800493e:	f04f 31ff 	mov.w	r1, #4294967295
 8004942:	401a      	ands	r2, r3
 8004944:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004948:	d81b      	bhi.n	8004982 <_strtod_l+0x8f2>
 800494a:	0d12      	lsrs	r2, r2, #20
 800494c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	4298      	cmp	r0, r3
 8004956:	d11a      	bne.n	800498e <_strtod_l+0x8fe>
 8004958:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <_strtod_l+0xb18>)
 800495a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800495c:	429a      	cmp	r2, r3
 800495e:	d102      	bne.n	8004966 <_strtod_l+0x8d6>
 8004960:	3001      	adds	r0, #1
 8004962:	f43f add8 	beq.w	8004516 <_strtod_l+0x486>
 8004966:	f04f 0800 	mov.w	r8, #0
 800496a:	4b8e      	ldr	r3, [pc, #568]	; (8004ba4 <_strtod_l+0xb14>)
 800496c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800496e:	401a      	ands	r2, r3
 8004970:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d196      	bne.n	80048a8 <_strtod_l+0x818>
 800497a:	e5d7      	b.n	800452c <_strtod_l+0x49c>
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	e7e8      	b.n	8004954 <_strtod_l+0x8c4>
 8004982:	460b      	mov	r3, r1
 8004984:	e7e6      	b.n	8004954 <_strtod_l+0x8c4>
 8004986:	ea53 0308 	orrs.w	r3, r3, r8
 800498a:	f43f af7d 	beq.w	8004888 <_strtod_l+0x7f8>
 800498e:	b1e5      	cbz	r5, 80049ca <_strtod_l+0x93a>
 8004990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004992:	421d      	tst	r5, r3
 8004994:	d0ee      	beq.n	8004974 <_strtod_l+0x8e4>
 8004996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	9a05      	ldr	r2, [sp, #20]
 800499e:	b1c3      	cbz	r3, 80049d2 <_strtod_l+0x942>
 80049a0:	f7ff fb54 	bl	800404c <sulp>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049ac:	f7fb fbde 	bl	800016c <__adddf3>
 80049b0:	4680      	mov	r8, r0
 80049b2:	4689      	mov	r9, r1
 80049b4:	e7de      	b.n	8004974 <_strtod_l+0x8e4>
 80049b6:	4013      	ands	r3, r2
 80049b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80049bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80049c0:	f04f 38ff 	mov.w	r8, #4294967295
 80049c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80049c8:	e7d4      	b.n	8004974 <_strtod_l+0x8e4>
 80049ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049cc:	ea13 0f08 	tst.w	r3, r8
 80049d0:	e7e0      	b.n	8004994 <_strtod_l+0x904>
 80049d2:	f7ff fb3b 	bl	800404c <sulp>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049de:	f7fb fbc3 	bl	8000168 <__aeabi_dsub>
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	4680      	mov	r8, r0
 80049e8:	4689      	mov	r9, r1
 80049ea:	f7fb ffdd 	bl	80009a8 <__aeabi_dcmpeq>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0c0      	beq.n	8004974 <_strtod_l+0x8e4>
 80049f2:	e602      	b.n	80045fa <_strtod_l+0x56a>
 80049f4:	4658      	mov	r0, fp
 80049f6:	9904      	ldr	r1, [sp, #16]
 80049f8:	f002 f82e 	bl	8006a58 <__ratio>
 80049fc:	2200      	movs	r2, #0
 80049fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a02:	4606      	mov	r6, r0
 8004a04:	460f      	mov	r7, r1
 8004a06:	f7fb ffe3 	bl	80009d0 <__aeabi_dcmple>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d075      	beq.n	8004afa <_strtod_l+0xa6a>
 8004a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d047      	beq.n	8004aa4 <_strtod_l+0xa14>
 8004a14:	2600      	movs	r6, #0
 8004a16:	4f65      	ldr	r7, [pc, #404]	; (8004bac <_strtod_l+0xb1c>)
 8004a18:	4d64      	ldr	r5, [pc, #400]	; (8004bac <_strtod_l+0xb1c>)
 8004a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a20:	0d1b      	lsrs	r3, r3, #20
 8004a22:	051b      	lsls	r3, r3, #20
 8004a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <_strtod_l+0xb20>)
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	f040 80c8 	bne.w	8004bc0 <_strtod_l+0xb30>
 8004a30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a34:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004a40:	4649      	mov	r1, r9
 8004a42:	f001 ff33 	bl	80068ac <__ulp>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	f7fb fd43 	bl	80004d8 <__aeabi_dmul>
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	f7fb fb89 	bl	800016c <__adddf3>
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4951      	ldr	r1, [pc, #324]	; (8004ba4 <_strtod_l+0xb14>)
 8004a5e:	4a55      	ldr	r2, [pc, #340]	; (8004bb4 <_strtod_l+0xb24>)
 8004a60:	4019      	ands	r1, r3
 8004a62:	4291      	cmp	r1, r2
 8004a64:	4680      	mov	r8, r0
 8004a66:	d95e      	bls.n	8004b26 <_strtod_l+0xa96>
 8004a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d103      	bne.n	8004a7a <_strtod_l+0x9ea>
 8004a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a74:	3301      	adds	r3, #1
 8004a76:	f43f ad4e 	beq.w	8004516 <_strtod_l+0x486>
 8004a7a:	f04f 38ff 	mov.w	r8, #4294967295
 8004a7e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004ba8 <_strtod_l+0xb18>
 8004a82:	4650      	mov	r0, sl
 8004a84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a86:	f001 fbe1 	bl	800624c <_Bfree>
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	9906      	ldr	r1, [sp, #24]
 8004a8e:	f001 fbdd 	bl	800624c <_Bfree>
 8004a92:	4650      	mov	r0, sl
 8004a94:	9904      	ldr	r1, [sp, #16]
 8004a96:	f001 fbd9 	bl	800624c <_Bfree>
 8004a9a:	4659      	mov	r1, fp
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	f001 fbd5 	bl	800624c <_Bfree>
 8004aa2:	e61c      	b.n	80046de <_strtod_l+0x64e>
 8004aa4:	f1b8 0f00 	cmp.w	r8, #0
 8004aa8:	d119      	bne.n	8004ade <_strtod_l+0xa4e>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab0:	b9e3      	cbnz	r3, 8004aec <_strtod_l+0xa5c>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <_strtod_l+0xb1c>)
 8004aba:	f7fb ff7f 	bl	80009bc <__aeabi_dcmplt>
 8004abe:	b9c8      	cbnz	r0, 8004af4 <_strtod_l+0xa64>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <_strtod_l+0xb28>)
 8004ac8:	f7fb fd06 	bl	80004d8 <__aeabi_dmul>
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ad4:	9418      	str	r4, [sp, #96]	; 0x60
 8004ad6:	9319      	str	r3, [sp, #100]	; 0x64
 8004ad8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004adc:	e79d      	b.n	8004a1a <_strtod_l+0x98a>
 8004ade:	f1b8 0f01 	cmp.w	r8, #1
 8004ae2:	d103      	bne.n	8004aec <_strtod_l+0xa5c>
 8004ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f43f ad87 	beq.w	80045fa <_strtod_l+0x56a>
 8004aec:	2600      	movs	r6, #0
 8004aee:	2400      	movs	r4, #0
 8004af0:	4f32      	ldr	r7, [pc, #200]	; (8004bbc <_strtod_l+0xb2c>)
 8004af2:	e791      	b.n	8004a18 <_strtod_l+0x988>
 8004af4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004af6:	4d30      	ldr	r5, [pc, #192]	; (8004bb8 <_strtod_l+0xb28>)
 8004af8:	e7ea      	b.n	8004ad0 <_strtod_l+0xa40>
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <_strtod_l+0xb28>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	4639      	mov	r1, r7
 8004b02:	f7fb fce9 	bl	80004d8 <__aeabi_dmul>
 8004b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	b933      	cbnz	r3, 8004b1c <_strtod_l+0xa8c>
 8004b0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b12:	9010      	str	r0, [sp, #64]	; 0x40
 8004b14:	9311      	str	r3, [sp, #68]	; 0x44
 8004b16:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004b1a:	e77e      	b.n	8004a1a <_strtod_l+0x98a>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004b24:	e7f7      	b.n	8004b16 <_strtod_l+0xa86>
 8004b26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004b2a:	9b05      	ldr	r3, [sp, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1a8      	bne.n	8004a82 <_strtod_l+0x9f2>
 8004b30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b36:	0d1b      	lsrs	r3, r3, #20
 8004b38:	051b      	lsls	r3, r3, #20
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d1a1      	bne.n	8004a82 <_strtod_l+0x9f2>
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fc f887 	bl	8000c54 <__aeabi_d2lz>
 8004b46:	f7fb fc99 	bl	800047c <__aeabi_l2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fb09 	bl	8000168 <__aeabi_dsub>
 8004b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b5c:	ea43 0308 	orr.w	r3, r3, r8
 8004b60:	4313      	orrs	r3, r2
 8004b62:	4604      	mov	r4, r0
 8004b64:	460d      	mov	r5, r1
 8004b66:	d066      	beq.n	8004c36 <_strtod_l+0xba6>
 8004b68:	a309      	add	r3, pc, #36	; (adr r3, 8004b90 <_strtod_l+0xb00>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb ff25 	bl	80009bc <__aeabi_dcmplt>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f47f acda 	bne.w	800452c <_strtod_l+0x49c>
 8004b78:	a307      	add	r3, pc, #28	; (adr r3, 8004b98 <_strtod_l+0xb08>)
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f43f af7b 	beq.w	8004a82 <_strtod_l+0x9f2>
 8004b8c:	e4ce      	b.n	800452c <_strtod_l+0x49c>
 8004b8e:	bf00      	nop
 8004b90:	94a03595 	.word	0x94a03595
 8004b94:	3fdfffff 	.word	0x3fdfffff
 8004b98:	35afe535 	.word	0x35afe535
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	000fffff 	.word	0x000fffff
 8004ba4:	7ff00000 	.word	0x7ff00000
 8004ba8:	7fefffff 	.word	0x7fefffff
 8004bac:	3ff00000 	.word	0x3ff00000
 8004bb0:	7fe00000 	.word	0x7fe00000
 8004bb4:	7c9fffff 	.word	0x7c9fffff
 8004bb8:	3fe00000 	.word	0x3fe00000
 8004bbc:	bff00000 	.word	0xbff00000
 8004bc0:	9b05      	ldr	r3, [sp, #20]
 8004bc2:	b313      	cbz	r3, 8004c0a <_strtod_l+0xb7a>
 8004bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004bca:	d81e      	bhi.n	8004c0a <_strtod_l+0xb7a>
 8004bcc:	a326      	add	r3, pc, #152	; (adr r3, 8004c68 <_strtod_l+0xbd8>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fefb 	bl	80009d0 <__aeabi_dcmple>
 8004bda:	b190      	cbz	r0, 8004c02 <_strtod_l+0xb72>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7fb ff52 	bl	8000a88 <__aeabi_d2uiz>
 8004be4:	2801      	cmp	r0, #1
 8004be6:	bf38      	it	cc
 8004be8:	2001      	movcc	r0, #1
 8004bea:	f7fb fbfb 	bl	80003e4 <__aeabi_ui2d>
 8004bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	b9d3      	cbnz	r3, 8004c2c <_strtod_l+0xb9c>
 8004bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bfa:	9012      	str	r0, [sp, #72]	; 0x48
 8004bfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bfe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004c08:	1a9f      	subs	r7, r3, r2
 8004c0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c0e:	f001 fe4d 	bl	80068ac <__ulp>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4630      	mov	r0, r6
 8004c18:	4639      	mov	r1, r7
 8004c1a:	f7fb fc5d 	bl	80004d8 <__aeabi_dmul>
 8004c1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c22:	f7fb faa3 	bl	800016c <__adddf3>
 8004c26:	4680      	mov	r8, r0
 8004c28:	4689      	mov	r9, r1
 8004c2a:	e77e      	b.n	8004b2a <_strtod_l+0xa9a>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004c34:	e7e3      	b.n	8004bfe <_strtod_l+0xb6e>
 8004c36:	a30e      	add	r3, pc, #56	; (adr r3, 8004c70 <_strtod_l+0xbe0>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb febe 	bl	80009bc <__aeabi_dcmplt>
 8004c40:	e7a1      	b.n	8004b86 <_strtod_l+0xaf6>
 8004c42:	2300      	movs	r3, #0
 8004c44:	930c      	str	r3, [sp, #48]	; 0x30
 8004c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	f7ff ba65 	b.w	800411a <_strtod_l+0x8a>
 8004c50:	2b65      	cmp	r3, #101	; 0x65
 8004c52:	f43f ab5c 	beq.w	800430e <_strtod_l+0x27e>
 8004c56:	2b45      	cmp	r3, #69	; 0x45
 8004c58:	f43f ab59 	beq.w	800430e <_strtod_l+0x27e>
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f7ff bb8d 	b.w	800437c <_strtod_l+0x2ec>
 8004c62:	bf00      	nop
 8004c64:	f3af 8000 	nop.w
 8004c68:	ffc00000 	.word	0xffc00000
 8004c6c:	41dfffff 	.word	0x41dfffff
 8004c70:	94a03595 	.word	0x94a03595
 8004c74:	3fcfffff 	.word	0x3fcfffff

08004c78 <_strtod_r>:
 8004c78:	4b01      	ldr	r3, [pc, #4]	; (8004c80 <_strtod_r+0x8>)
 8004c7a:	f7ff ba09 	b.w	8004090 <_strtod_l>
 8004c7e:	bf00      	nop
 8004c80:	20000074 	.word	0x20000074

08004c84 <_strtol_l.isra.0>:
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8a:	4686      	mov	lr, r0
 8004c8c:	d001      	beq.n	8004c92 <_strtol_l.isra.0+0xe>
 8004c8e:	2b24      	cmp	r3, #36	; 0x24
 8004c90:	d906      	bls.n	8004ca0 <_strtol_l.isra.0+0x1c>
 8004c92:	f7fe fb13 	bl	80032bc <__errno>
 8004c96:	2316      	movs	r3, #22
 8004c98:	6003      	str	r3, [r0, #0]
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	468c      	mov	ip, r1
 8004ca2:	4e3a      	ldr	r6, [pc, #232]	; (8004d8c <_strtol_l.isra.0+0x108>)
 8004ca4:	4660      	mov	r0, ip
 8004ca6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004caa:	5da5      	ldrb	r5, [r4, r6]
 8004cac:	f015 0508 	ands.w	r5, r5, #8
 8004cb0:	d1f8      	bne.n	8004ca4 <_strtol_l.isra.0+0x20>
 8004cb2:	2c2d      	cmp	r4, #45	; 0x2d
 8004cb4:	d133      	bne.n	8004d1e <_strtol_l.isra.0+0x9a>
 8004cb6:	f04f 0801 	mov.w	r8, #1
 8004cba:	f89c 4000 	ldrb.w	r4, [ip]
 8004cbe:	f100 0c02 	add.w	ip, r0, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d05d      	beq.n	8004d82 <_strtol_l.isra.0+0xfe>
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d10c      	bne.n	8004ce4 <_strtol_l.isra.0+0x60>
 8004cca:	2c30      	cmp	r4, #48	; 0x30
 8004ccc:	d10a      	bne.n	8004ce4 <_strtol_l.isra.0+0x60>
 8004cce:	f89c 0000 	ldrb.w	r0, [ip]
 8004cd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004cd6:	2858      	cmp	r0, #88	; 0x58
 8004cd8:	d14e      	bne.n	8004d78 <_strtol_l.isra.0+0xf4>
 8004cda:	2310      	movs	r3, #16
 8004cdc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004ce0:	f10c 0c02 	add.w	ip, ip, #2
 8004ce4:	2500      	movs	r5, #0
 8004ce6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004cea:	3f01      	subs	r7, #1
 8004cec:	fbb7 f9f3 	udiv	r9, r7, r3
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	fb03 7a19 	mls	sl, r3, r9, r7
 8004cf6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004cfa:	2e09      	cmp	r6, #9
 8004cfc:	d818      	bhi.n	8004d30 <_strtol_l.isra.0+0xac>
 8004cfe:	4634      	mov	r4, r6
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	dd24      	ble.n	8004d4e <_strtol_l.isra.0+0xca>
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	db1f      	blt.n	8004d48 <_strtol_l.isra.0+0xc4>
 8004d08:	4581      	cmp	r9, r0
 8004d0a:	d31d      	bcc.n	8004d48 <_strtol_l.isra.0+0xc4>
 8004d0c:	d101      	bne.n	8004d12 <_strtol_l.isra.0+0x8e>
 8004d0e:	45a2      	cmp	sl, r4
 8004d10:	db1a      	blt.n	8004d48 <_strtol_l.isra.0+0xc4>
 8004d12:	2501      	movs	r5, #1
 8004d14:	fb00 4003 	mla	r0, r0, r3, r4
 8004d18:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004d1c:	e7eb      	b.n	8004cf6 <_strtol_l.isra.0+0x72>
 8004d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8004d20:	bf08      	it	eq
 8004d22:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004d26:	46a8      	mov	r8, r5
 8004d28:	bf08      	it	eq
 8004d2a:	f100 0c02 	addeq.w	ip, r0, #2
 8004d2e:	e7c8      	b.n	8004cc2 <_strtol_l.isra.0+0x3e>
 8004d30:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004d34:	2e19      	cmp	r6, #25
 8004d36:	d801      	bhi.n	8004d3c <_strtol_l.isra.0+0xb8>
 8004d38:	3c37      	subs	r4, #55	; 0x37
 8004d3a:	e7e1      	b.n	8004d00 <_strtol_l.isra.0+0x7c>
 8004d3c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004d40:	2e19      	cmp	r6, #25
 8004d42:	d804      	bhi.n	8004d4e <_strtol_l.isra.0+0xca>
 8004d44:	3c57      	subs	r4, #87	; 0x57
 8004d46:	e7db      	b.n	8004d00 <_strtol_l.isra.0+0x7c>
 8004d48:	f04f 35ff 	mov.w	r5, #4294967295
 8004d4c:	e7e4      	b.n	8004d18 <_strtol_l.isra.0+0x94>
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	da08      	bge.n	8004d64 <_strtol_l.isra.0+0xe0>
 8004d52:	2322      	movs	r3, #34	; 0x22
 8004d54:	4638      	mov	r0, r7
 8004d56:	f8ce 3000 	str.w	r3, [lr]
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	d09e      	beq.n	8004c9c <_strtol_l.isra.0+0x18>
 8004d5e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004d62:	e007      	b.n	8004d74 <_strtol_l.isra.0+0xf0>
 8004d64:	f1b8 0f00 	cmp.w	r8, #0
 8004d68:	d000      	beq.n	8004d6c <_strtol_l.isra.0+0xe8>
 8004d6a:	4240      	negs	r0, r0
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	d095      	beq.n	8004c9c <_strtol_l.isra.0+0x18>
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	d1f4      	bne.n	8004d5e <_strtol_l.isra.0+0xda>
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	e791      	b.n	8004c9c <_strtol_l.isra.0+0x18>
 8004d78:	2430      	movs	r4, #48	; 0x30
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1b2      	bne.n	8004ce4 <_strtol_l.isra.0+0x60>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	e7b0      	b.n	8004ce4 <_strtol_l.isra.0+0x60>
 8004d82:	2c30      	cmp	r4, #48	; 0x30
 8004d84:	d0a3      	beq.n	8004cce <_strtol_l.isra.0+0x4a>
 8004d86:	230a      	movs	r3, #10
 8004d88:	e7ac      	b.n	8004ce4 <_strtol_l.isra.0+0x60>
 8004d8a:	bf00      	nop
 8004d8c:	08007c49 	.word	0x08007c49

08004d90 <_strtol_r>:
 8004d90:	f7ff bf78 	b.w	8004c84 <_strtol_l.isra.0>

08004d94 <quorem>:
 8004d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	6903      	ldr	r3, [r0, #16]
 8004d9a:	690c      	ldr	r4, [r1, #16]
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	f2c0 8083 	blt.w	8004eaa <quorem+0x116>
 8004da4:	3c01      	subs	r4, #1
 8004da6:	f100 0514 	add.w	r5, r0, #20
 8004daa:	f101 0814 	add.w	r8, r1, #20
 8004dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dcc:	d332      	bcc.n	8004e34 <quorem+0xa0>
 8004dce:	f04f 0e00 	mov.w	lr, #0
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	46ac      	mov	ip, r5
 8004dd6:	46f2      	mov	sl, lr
 8004dd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ddc:	b293      	uxth	r3, r2
 8004dde:	fb06 e303 	mla	r3, r6, r3, lr
 8004de2:	0c12      	lsrs	r2, r2, #16
 8004de4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004de8:	fb06 e202 	mla	r2, r6, r2, lr
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	ebaa 0303 	sub.w	r3, sl, r3
 8004df2:	f8dc a000 	ldr.w	sl, [ip]
 8004df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dfa:	fa1f fa8a 	uxth.w	sl, sl
 8004dfe:	4453      	add	r3, sl
 8004e00:	fa1f fa82 	uxth.w	sl, r2
 8004e04:	f8dc 2000 	ldr.w	r2, [ip]
 8004e08:	4581      	cmp	r9, r0
 8004e0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e18:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e1c:	f84c 3b04 	str.w	r3, [ip], #4
 8004e20:	d2da      	bcs.n	8004dd8 <quorem+0x44>
 8004e22:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e26:	b92b      	cbnz	r3, 8004e34 <quorem+0xa0>
 8004e28:	9b01      	ldr	r3, [sp, #4]
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	429d      	cmp	r5, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	d32f      	bcc.n	8004e92 <quorem+0xfe>
 8004e32:	613c      	str	r4, [r7, #16]
 8004e34:	4638      	mov	r0, r7
 8004e36:	f001 fc8d 	bl	8006754 <__mcmp>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	db25      	blt.n	8004e8a <quorem+0xf6>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f04f 0c00 	mov.w	ip, #0
 8004e44:	3601      	adds	r6, #1
 8004e46:	f858 1b04 	ldr.w	r1, [r8], #4
 8004e4a:	f8d0 e000 	ldr.w	lr, [r0]
 8004e4e:	b28b      	uxth	r3, r1
 8004e50:	ebac 0303 	sub.w	r3, ip, r3
 8004e54:	fa1f f28e 	uxth.w	r2, lr
 8004e58:	4413      	add	r3, r2
 8004e5a:	0c0a      	lsrs	r2, r1, #16
 8004e5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e6a:	45c1      	cmp	r9, r8
 8004e6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e70:	f840 3b04 	str.w	r3, [r0], #4
 8004e74:	d2e7      	bcs.n	8004e46 <quorem+0xb2>
 8004e76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e7e:	b922      	cbnz	r2, 8004e8a <quorem+0xf6>
 8004e80:	3b04      	subs	r3, #4
 8004e82:	429d      	cmp	r5, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	d30a      	bcc.n	8004e9e <quorem+0x10a>
 8004e88:	613c      	str	r4, [r7, #16]
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	b003      	add	sp, #12
 8004e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d1cb      	bne.n	8004e32 <quorem+0x9e>
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	e7c6      	b.n	8004e2c <quorem+0x98>
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	d1f0      	bne.n	8004e88 <quorem+0xf4>
 8004ea6:	3c01      	subs	r4, #1
 8004ea8:	e7eb      	b.n	8004e82 <quorem+0xee>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e7ee      	b.n	8004e8c <quorem+0xf8>
	...

08004eb0 <_dtoa_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	461f      	mov	r7, r3
 8004eb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004eba:	b099      	sub	sp, #100	; 0x64
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ec2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ec6:	b974      	cbnz	r4, 8004ee6 <_dtoa_r+0x36>
 8004ec8:	2010      	movs	r0, #16
 8004eca:	f001 f949 	bl	8006160 <malloc>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ed2:	b920      	cbnz	r0, 8004ede <_dtoa_r+0x2e>
 8004ed4:	21ea      	movs	r1, #234	; 0xea
 8004ed6:	4bae      	ldr	r3, [pc, #696]	; (8005190 <_dtoa_r+0x2e0>)
 8004ed8:	48ae      	ldr	r0, [pc, #696]	; (8005194 <_dtoa_r+0x2e4>)
 8004eda:	f002 f875 	bl	8006fc8 <__assert_func>
 8004ede:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ee2:	6004      	str	r4, [r0, #0]
 8004ee4:	60c4      	str	r4, [r0, #12]
 8004ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ee8:	6819      	ldr	r1, [r3, #0]
 8004eea:	b151      	cbz	r1, 8004f02 <_dtoa_r+0x52>
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4093      	lsls	r3, r2
 8004ef2:	604a      	str	r2, [r1, #4]
 8004ef4:	608b      	str	r3, [r1, #8]
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f001 f9a8 	bl	800624c <_Bfree>
 8004efc:	2200      	movs	r2, #0
 8004efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	1e3b      	subs	r3, r7, #0
 8004f04:	bfaf      	iteee	ge
 8004f06:	2300      	movge	r3, #0
 8004f08:	2201      	movlt	r2, #1
 8004f0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f0e:	9305      	strlt	r3, [sp, #20]
 8004f10:	bfa8      	it	ge
 8004f12:	f8c8 3000 	strge.w	r3, [r8]
 8004f16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f1a:	4b9f      	ldr	r3, [pc, #636]	; (8005198 <_dtoa_r+0x2e8>)
 8004f1c:	bfb8      	it	lt
 8004f1e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f22:	ea33 0309 	bics.w	r3, r3, r9
 8004f26:	d119      	bne.n	8004f5c <_dtoa_r+0xac>
 8004f28:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f34:	4333      	orrs	r3, r6
 8004f36:	f000 8580 	beq.w	8005a3a <_dtoa_r+0xb8a>
 8004f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f3c:	b953      	cbnz	r3, 8004f54 <_dtoa_r+0xa4>
 8004f3e:	4b97      	ldr	r3, [pc, #604]	; (800519c <_dtoa_r+0x2ec>)
 8004f40:	e022      	b.n	8004f88 <_dtoa_r+0xd8>
 8004f42:	4b97      	ldr	r3, [pc, #604]	; (80051a0 <_dtoa_r+0x2f0>)
 8004f44:	9308      	str	r3, [sp, #32]
 8004f46:	3308      	adds	r3, #8
 8004f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	9808      	ldr	r0, [sp, #32]
 8004f4e:	b019      	add	sp, #100	; 0x64
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	4b91      	ldr	r3, [pc, #580]	; (800519c <_dtoa_r+0x2ec>)
 8004f56:	9308      	str	r3, [sp, #32]
 8004f58:	3303      	adds	r3, #3
 8004f5a:	e7f5      	b.n	8004f48 <_dtoa_r+0x98>
 8004f5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f7fb fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004f70:	4680      	mov	r8, r0
 8004f72:	b158      	cbz	r0, 8004f8c <_dtoa_r+0xdc>
 8004f74:	2301      	movs	r3, #1
 8004f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8559 	beq.w	8005a34 <_dtoa_r+0xb84>
 8004f82:	4888      	ldr	r0, [pc, #544]	; (80051a4 <_dtoa_r+0x2f4>)
 8004f84:	6018      	str	r0, [r3, #0]
 8004f86:	1e43      	subs	r3, r0, #1
 8004f88:	9308      	str	r3, [sp, #32]
 8004f8a:	e7df      	b.n	8004f4c <_dtoa_r+0x9c>
 8004f8c:	ab16      	add	r3, sp, #88	; 0x58
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	ab17      	add	r3, sp, #92	; 0x5c
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4628      	mov	r0, r5
 8004f96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f9a:	f001 fd01 	bl	80069a0 <__d2b>
 8004f9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004fa2:	4682      	mov	sl, r0
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d07e      	beq.n	80050a6 <_dtoa_r+0x1f6>
 8004fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004fba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004fbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4b78      	ldr	r3, [pc, #480]	; (80051a8 <_dtoa_r+0x2f8>)
 8004fc6:	f7fb f8cf 	bl	8000168 <__aeabi_dsub>
 8004fca:	a36b      	add	r3, pc, #428	; (adr r3, 8005178 <_dtoa_r+0x2c8>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb fa82 	bl	80004d8 <__aeabi_dmul>
 8004fd4:	a36a      	add	r3, pc, #424	; (adr r3, 8005180 <_dtoa_r+0x2d0>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb f8c7 	bl	800016c <__adddf3>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	f7fb fa0e 	bl	8000404 <__aeabi_i2d>
 8004fe8:	a367      	add	r3, pc, #412	; (adr r3, 8005188 <_dtoa_r+0x2d8>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fa73 	bl	80004d8 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb f8b7 	bl	800016c <__adddf3>
 8004ffe:	4606      	mov	r6, r0
 8005000:	460f      	mov	r7, r1
 8005002:	f7fb fd19 	bl	8000a38 <__aeabi_d2iz>
 8005006:	2200      	movs	r2, #0
 8005008:	4681      	mov	r9, r0
 800500a:	2300      	movs	r3, #0
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb fcd4 	bl	80009bc <__aeabi_dcmplt>
 8005014:	b148      	cbz	r0, 800502a <_dtoa_r+0x17a>
 8005016:	4648      	mov	r0, r9
 8005018:	f7fb f9f4 	bl	8000404 <__aeabi_i2d>
 800501c:	4632      	mov	r2, r6
 800501e:	463b      	mov	r3, r7
 8005020:	f7fb fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8005024:	b908      	cbnz	r0, 800502a <_dtoa_r+0x17a>
 8005026:	f109 39ff 	add.w	r9, r9, #4294967295
 800502a:	f1b9 0f16 	cmp.w	r9, #22
 800502e:	d857      	bhi.n	80050e0 <_dtoa_r+0x230>
 8005030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005034:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <_dtoa_r+0x2fc>)
 8005036:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fcbd 	bl	80009bc <__aeabi_dcmplt>
 8005042:	2800      	cmp	r0, #0
 8005044:	d04e      	beq.n	80050e4 <_dtoa_r+0x234>
 8005046:	2300      	movs	r3, #0
 8005048:	f109 39ff 	add.w	r9, r9, #4294967295
 800504c:	930f      	str	r3, [sp, #60]	; 0x3c
 800504e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005050:	1b1c      	subs	r4, r3, r4
 8005052:	1e63      	subs	r3, r4, #1
 8005054:	9309      	str	r3, [sp, #36]	; 0x24
 8005056:	bf49      	itett	mi
 8005058:	f1c4 0301 	rsbmi	r3, r4, #1
 800505c:	2300      	movpl	r3, #0
 800505e:	9306      	strmi	r3, [sp, #24]
 8005060:	2300      	movmi	r3, #0
 8005062:	bf54      	ite	pl
 8005064:	9306      	strpl	r3, [sp, #24]
 8005066:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005068:	f1b9 0f00 	cmp.w	r9, #0
 800506c:	db3c      	blt.n	80050e8 <_dtoa_r+0x238>
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005074:	444b      	add	r3, r9
 8005076:	9309      	str	r3, [sp, #36]	; 0x24
 8005078:	2300      	movs	r3, #0
 800507a:	930a      	str	r3, [sp, #40]	; 0x28
 800507c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800507e:	2b09      	cmp	r3, #9
 8005080:	d86c      	bhi.n	800515c <_dtoa_r+0x2ac>
 8005082:	2b05      	cmp	r3, #5
 8005084:	bfc4      	itt	gt
 8005086:	3b04      	subgt	r3, #4
 8005088:	9322      	strgt	r3, [sp, #136]	; 0x88
 800508a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800508c:	bfc8      	it	gt
 800508e:	2400      	movgt	r4, #0
 8005090:	f1a3 0302 	sub.w	r3, r3, #2
 8005094:	bfd8      	it	le
 8005096:	2401      	movle	r4, #1
 8005098:	2b03      	cmp	r3, #3
 800509a:	f200 808b 	bhi.w	80051b4 <_dtoa_r+0x304>
 800509e:	e8df f003 	tbb	[pc, r3]
 80050a2:	4f2d      	.short	0x4f2d
 80050a4:	5b4d      	.short	0x5b4d
 80050a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80050aa:	441c      	add	r4, r3
 80050ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	bfc3      	ittte	gt
 80050b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80050bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80050c0:	f1c3 0320 	rsble	r3, r3, #32
 80050c4:	bfc6      	itte	gt
 80050c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80050ca:	4318      	orrgt	r0, r3
 80050cc:	fa06 f003 	lslle.w	r0, r6, r3
 80050d0:	f7fb f988 	bl	80003e4 <__aeabi_ui2d>
 80050d4:	2301      	movs	r3, #1
 80050d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80050da:	3c01      	subs	r4, #1
 80050dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80050de:	e770      	b.n	8004fc2 <_dtoa_r+0x112>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e7b3      	b.n	800504c <_dtoa_r+0x19c>
 80050e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80050e6:	e7b2      	b.n	800504e <_dtoa_r+0x19e>
 80050e8:	9b06      	ldr	r3, [sp, #24]
 80050ea:	eba3 0309 	sub.w	r3, r3, r9
 80050ee:	9306      	str	r3, [sp, #24]
 80050f0:	f1c9 0300 	rsb	r3, r9, #0
 80050f4:	930a      	str	r3, [sp, #40]	; 0x28
 80050f6:	2300      	movs	r3, #0
 80050f8:	930e      	str	r3, [sp, #56]	; 0x38
 80050fa:	e7bf      	b.n	800507c <_dtoa_r+0x1cc>
 80050fc:	2300      	movs	r3, #0
 80050fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005102:	2b00      	cmp	r3, #0
 8005104:	dc59      	bgt.n	80051ba <_dtoa_r+0x30a>
 8005106:	f04f 0b01 	mov.w	fp, #1
 800510a:	465b      	mov	r3, fp
 800510c:	f8cd b008 	str.w	fp, [sp, #8]
 8005110:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005114:	2200      	movs	r2, #0
 8005116:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005118:	6042      	str	r2, [r0, #4]
 800511a:	2204      	movs	r2, #4
 800511c:	f102 0614 	add.w	r6, r2, #20
 8005120:	429e      	cmp	r6, r3
 8005122:	6841      	ldr	r1, [r0, #4]
 8005124:	d94f      	bls.n	80051c6 <_dtoa_r+0x316>
 8005126:	4628      	mov	r0, r5
 8005128:	f001 f850 	bl	80061cc <_Balloc>
 800512c:	9008      	str	r0, [sp, #32]
 800512e:	2800      	cmp	r0, #0
 8005130:	d14d      	bne.n	80051ce <_dtoa_r+0x31e>
 8005132:	4602      	mov	r2, r0
 8005134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <_dtoa_r+0x300>)
 800513a:	e6cd      	b.n	8004ed8 <_dtoa_r+0x28>
 800513c:	2301      	movs	r3, #1
 800513e:	e7de      	b.n	80050fe <_dtoa_r+0x24e>
 8005140:	2300      	movs	r3, #0
 8005142:	930b      	str	r3, [sp, #44]	; 0x2c
 8005144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005146:	eb09 0b03 	add.w	fp, r9, r3
 800514a:	f10b 0301 	add.w	r3, fp, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	9302      	str	r3, [sp, #8]
 8005152:	bfb8      	it	lt
 8005154:	2301      	movlt	r3, #1
 8005156:	e7dd      	b.n	8005114 <_dtoa_r+0x264>
 8005158:	2301      	movs	r3, #1
 800515a:	e7f2      	b.n	8005142 <_dtoa_r+0x292>
 800515c:	2401      	movs	r4, #1
 800515e:	2300      	movs	r3, #0
 8005160:	940b      	str	r4, [sp, #44]	; 0x2c
 8005162:	9322      	str	r3, [sp, #136]	; 0x88
 8005164:	f04f 3bff 	mov.w	fp, #4294967295
 8005168:	2200      	movs	r2, #0
 800516a:	2312      	movs	r3, #18
 800516c:	f8cd b008 	str.w	fp, [sp, #8]
 8005170:	9223      	str	r2, [sp, #140]	; 0x8c
 8005172:	e7cf      	b.n	8005114 <_dtoa_r+0x264>
 8005174:	f3af 8000 	nop.w
 8005178:	636f4361 	.word	0x636f4361
 800517c:	3fd287a7 	.word	0x3fd287a7
 8005180:	8b60c8b3 	.word	0x8b60c8b3
 8005184:	3fc68a28 	.word	0x3fc68a28
 8005188:	509f79fb 	.word	0x509f79fb
 800518c:	3fd34413 	.word	0x3fd34413
 8005190:	08007d56 	.word	0x08007d56
 8005194:	08007d6d 	.word	0x08007d6d
 8005198:	7ff00000 	.word	0x7ff00000
 800519c:	08007d52 	.word	0x08007d52
 80051a0:	08007d49 	.word	0x08007d49
 80051a4:	08007bcd 	.word	0x08007bcd
 80051a8:	3ff80000 	.word	0x3ff80000
 80051ac:	08007ee8 	.word	0x08007ee8
 80051b0:	08007dcc 	.word	0x08007dcc
 80051b4:	2301      	movs	r3, #1
 80051b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051b8:	e7d4      	b.n	8005164 <_dtoa_r+0x2b4>
 80051ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80051be:	465b      	mov	r3, fp
 80051c0:	f8cd b008 	str.w	fp, [sp, #8]
 80051c4:	e7a6      	b.n	8005114 <_dtoa_r+0x264>
 80051c6:	3101      	adds	r1, #1
 80051c8:	6041      	str	r1, [r0, #4]
 80051ca:	0052      	lsls	r2, r2, #1
 80051cc:	e7a6      	b.n	800511c <_dtoa_r+0x26c>
 80051ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051d0:	9a08      	ldr	r2, [sp, #32]
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	2b0e      	cmp	r3, #14
 80051d8:	f200 80a8 	bhi.w	800532c <_dtoa_r+0x47c>
 80051dc:	2c00      	cmp	r4, #0
 80051de:	f000 80a5 	beq.w	800532c <_dtoa_r+0x47c>
 80051e2:	f1b9 0f00 	cmp.w	r9, #0
 80051e6:	dd34      	ble.n	8005252 <_dtoa_r+0x3a2>
 80051e8:	4a9a      	ldr	r2, [pc, #616]	; (8005454 <_dtoa_r+0x5a4>)
 80051ea:	f009 030f 	and.w	r3, r9, #15
 80051ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051f2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80051f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051fe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005202:	d016      	beq.n	8005232 <_dtoa_r+0x382>
 8005204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005208:	4b93      	ldr	r3, [pc, #588]	; (8005458 <_dtoa_r+0x5a8>)
 800520a:	2703      	movs	r7, #3
 800520c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005210:	f7fb fa8c 	bl	800072c <__aeabi_ddiv>
 8005214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005218:	f004 040f 	and.w	r4, r4, #15
 800521c:	4e8e      	ldr	r6, [pc, #568]	; (8005458 <_dtoa_r+0x5a8>)
 800521e:	b954      	cbnz	r4, 8005236 <_dtoa_r+0x386>
 8005220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005228:	f7fb fa80 	bl	800072c <__aeabi_ddiv>
 800522c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005230:	e029      	b.n	8005286 <_dtoa_r+0x3d6>
 8005232:	2702      	movs	r7, #2
 8005234:	e7f2      	b.n	800521c <_dtoa_r+0x36c>
 8005236:	07e1      	lsls	r1, r4, #31
 8005238:	d508      	bpl.n	800524c <_dtoa_r+0x39c>
 800523a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800523e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005242:	f7fb f949 	bl	80004d8 <__aeabi_dmul>
 8005246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800524a:	3701      	adds	r7, #1
 800524c:	1064      	asrs	r4, r4, #1
 800524e:	3608      	adds	r6, #8
 8005250:	e7e5      	b.n	800521e <_dtoa_r+0x36e>
 8005252:	f000 80a5 	beq.w	80053a0 <_dtoa_r+0x4f0>
 8005256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800525a:	f1c9 0400 	rsb	r4, r9, #0
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <_dtoa_r+0x5a4>)
 8005260:	f004 020f 	and.w	r2, r4, #15
 8005264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fb f934 	bl	80004d8 <__aeabi_dmul>
 8005270:	2702      	movs	r7, #2
 8005272:	2300      	movs	r3, #0
 8005274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005278:	4e77      	ldr	r6, [pc, #476]	; (8005458 <_dtoa_r+0x5a8>)
 800527a:	1124      	asrs	r4, r4, #4
 800527c:	2c00      	cmp	r4, #0
 800527e:	f040 8084 	bne.w	800538a <_dtoa_r+0x4da>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1d2      	bne.n	800522c <_dtoa_r+0x37c>
 8005286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 808b 	beq.w	80053a4 <_dtoa_r+0x4f4>
 800528e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800529a:	2200      	movs	r2, #0
 800529c:	4b6f      	ldr	r3, [pc, #444]	; (800545c <_dtoa_r+0x5ac>)
 800529e:	f7fb fb8d 	bl	80009bc <__aeabi_dcmplt>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d07e      	beq.n	80053a4 <_dtoa_r+0x4f4>
 80052a6:	9b02      	ldr	r3, [sp, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d07b      	beq.n	80053a4 <_dtoa_r+0x4f4>
 80052ac:	f1bb 0f00 	cmp.w	fp, #0
 80052b0:	dd38      	ble.n	8005324 <_dtoa_r+0x474>
 80052b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052b6:	2200      	movs	r2, #0
 80052b8:	4b69      	ldr	r3, [pc, #420]	; (8005460 <_dtoa_r+0x5b0>)
 80052ba:	f7fb f90d 	bl	80004d8 <__aeabi_dmul>
 80052be:	465c      	mov	r4, fp
 80052c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c4:	f109 38ff 	add.w	r8, r9, #4294967295
 80052c8:	3701      	adds	r7, #1
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7fb f89a 	bl	8000404 <__aeabi_i2d>
 80052d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	2200      	movs	r2, #0
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <_dtoa_r+0x5b4>)
 80052dc:	f7fa ff46 	bl	800016c <__adddf3>
 80052e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052e8:	9611      	str	r6, [sp, #68]	; 0x44
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	d15d      	bne.n	80053aa <_dtoa_r+0x4fa>
 80052ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f2:	2200      	movs	r2, #0
 80052f4:	4b5c      	ldr	r3, [pc, #368]	; (8005468 <_dtoa_r+0x5b8>)
 80052f6:	f7fa ff37 	bl	8000168 <__aeabi_dsub>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005302:	4633      	mov	r3, r6
 8005304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005306:	f7fb fb77 	bl	80009f8 <__aeabi_dcmpgt>
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 829e 	bne.w	800584c <_dtoa_r+0x99c>
 8005310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005316:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800531a:	f7fb fb4f 	bl	80009bc <__aeabi_dcmplt>
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 8292 	bne.w	8005848 <_dtoa_r+0x998>
 8005324:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005328:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800532c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800532e:	2b00      	cmp	r3, #0
 8005330:	f2c0 8153 	blt.w	80055da <_dtoa_r+0x72a>
 8005334:	f1b9 0f0e 	cmp.w	r9, #14
 8005338:	f300 814f 	bgt.w	80055da <_dtoa_r+0x72a>
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <_dtoa_r+0x5a4>)
 800533e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005342:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005346:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800534a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f280 80db 	bge.w	8005508 <_dtoa_r+0x658>
 8005352:	9b02      	ldr	r3, [sp, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f300 80d7 	bgt.w	8005508 <_dtoa_r+0x658>
 800535a:	f040 8274 	bne.w	8005846 <_dtoa_r+0x996>
 800535e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005362:	2200      	movs	r2, #0
 8005364:	4b40      	ldr	r3, [pc, #256]	; (8005468 <_dtoa_r+0x5b8>)
 8005366:	f7fb f8b7 	bl	80004d8 <__aeabi_dmul>
 800536a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800536e:	f7fb fb39 	bl	80009e4 <__aeabi_dcmpge>
 8005372:	9c02      	ldr	r4, [sp, #8]
 8005374:	4626      	mov	r6, r4
 8005376:	2800      	cmp	r0, #0
 8005378:	f040 824a 	bne.w	8005810 <_dtoa_r+0x960>
 800537c:	2331      	movs	r3, #49	; 0x31
 800537e:	9f08      	ldr	r7, [sp, #32]
 8005380:	f109 0901 	add.w	r9, r9, #1
 8005384:	f807 3b01 	strb.w	r3, [r7], #1
 8005388:	e246      	b.n	8005818 <_dtoa_r+0x968>
 800538a:	07e2      	lsls	r2, r4, #31
 800538c:	d505      	bpl.n	800539a <_dtoa_r+0x4ea>
 800538e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005392:	f7fb f8a1 	bl	80004d8 <__aeabi_dmul>
 8005396:	2301      	movs	r3, #1
 8005398:	3701      	adds	r7, #1
 800539a:	1064      	asrs	r4, r4, #1
 800539c:	3608      	adds	r6, #8
 800539e:	e76d      	b.n	800527c <_dtoa_r+0x3cc>
 80053a0:	2702      	movs	r7, #2
 80053a2:	e770      	b.n	8005286 <_dtoa_r+0x3d6>
 80053a4:	46c8      	mov	r8, r9
 80053a6:	9c02      	ldr	r4, [sp, #8]
 80053a8:	e78f      	b.n	80052ca <_dtoa_r+0x41a>
 80053aa:	9908      	ldr	r1, [sp, #32]
 80053ac:	4b29      	ldr	r3, [pc, #164]	; (8005454 <_dtoa_r+0x5a4>)
 80053ae:	4421      	add	r1, r4
 80053b0:	9112      	str	r1, [sp, #72]	; 0x48
 80053b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053c0:	2900      	cmp	r1, #0
 80053c2:	d055      	beq.n	8005470 <_dtoa_r+0x5c0>
 80053c4:	2000      	movs	r0, #0
 80053c6:	4929      	ldr	r1, [pc, #164]	; (800546c <_dtoa_r+0x5bc>)
 80053c8:	f7fb f9b0 	bl	800072c <__aeabi_ddiv>
 80053cc:	463b      	mov	r3, r7
 80053ce:	4632      	mov	r2, r6
 80053d0:	f7fa feca 	bl	8000168 <__aeabi_dsub>
 80053d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053d8:	9f08      	ldr	r7, [sp, #32]
 80053da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053de:	f7fb fb2b 	bl	8000a38 <__aeabi_d2iz>
 80053e2:	4604      	mov	r4, r0
 80053e4:	f7fb f80e 	bl	8000404 <__aeabi_i2d>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	f7fa feba 	bl	8000168 <__aeabi_dsub>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	3430      	adds	r4, #48	; 0x30
 80053fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005402:	f807 4b01 	strb.w	r4, [r7], #1
 8005406:	f7fb fad9 	bl	80009bc <__aeabi_dcmplt>
 800540a:	2800      	cmp	r0, #0
 800540c:	d174      	bne.n	80054f8 <_dtoa_r+0x648>
 800540e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005412:	2000      	movs	r0, #0
 8005414:	4911      	ldr	r1, [pc, #68]	; (800545c <_dtoa_r+0x5ac>)
 8005416:	f7fa fea7 	bl	8000168 <__aeabi_dsub>
 800541a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800541e:	f7fb facd 	bl	80009bc <__aeabi_dcmplt>
 8005422:	2800      	cmp	r0, #0
 8005424:	f040 80b6 	bne.w	8005594 <_dtoa_r+0x6e4>
 8005428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800542a:	429f      	cmp	r7, r3
 800542c:	f43f af7a 	beq.w	8005324 <_dtoa_r+0x474>
 8005430:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005434:	2200      	movs	r2, #0
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <_dtoa_r+0x5b0>)
 8005438:	f7fb f84e 	bl	80004d8 <__aeabi_dmul>
 800543c:	2200      	movs	r2, #0
 800543e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <_dtoa_r+0x5b0>)
 8005448:	f7fb f846 	bl	80004d8 <__aeabi_dmul>
 800544c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005450:	e7c3      	b.n	80053da <_dtoa_r+0x52a>
 8005452:	bf00      	nop
 8005454:	08007ee8 	.word	0x08007ee8
 8005458:	08007ec0 	.word	0x08007ec0
 800545c:	3ff00000 	.word	0x3ff00000
 8005460:	40240000 	.word	0x40240000
 8005464:	401c0000 	.word	0x401c0000
 8005468:	40140000 	.word	0x40140000
 800546c:	3fe00000 	.word	0x3fe00000
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb f830 	bl	80004d8 <__aeabi_dmul>
 8005478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800547a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800547e:	9c08      	ldr	r4, [sp, #32]
 8005480:	9314      	str	r3, [sp, #80]	; 0x50
 8005482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005486:	f7fb fad7 	bl	8000a38 <__aeabi_d2iz>
 800548a:	9015      	str	r0, [sp, #84]	; 0x54
 800548c:	f7fa ffba 	bl	8000404 <__aeabi_i2d>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005498:	f7fa fe66 	bl	8000168 <__aeabi_dsub>
 800549c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800549e:	4606      	mov	r6, r0
 80054a0:	3330      	adds	r3, #48	; 0x30
 80054a2:	f804 3b01 	strb.w	r3, [r4], #1
 80054a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054a8:	460f      	mov	r7, r1
 80054aa:	429c      	cmp	r4, r3
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	d124      	bne.n	80054fc <_dtoa_r+0x64c>
 80054b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054b6:	4bb3      	ldr	r3, [pc, #716]	; (8005784 <_dtoa_r+0x8d4>)
 80054b8:	f7fa fe58 	bl	800016c <__adddf3>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fb fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d162      	bne.n	8005592 <_dtoa_r+0x6e2>
 80054cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054d0:	2000      	movs	r0, #0
 80054d2:	49ac      	ldr	r1, [pc, #688]	; (8005784 <_dtoa_r+0x8d4>)
 80054d4:	f7fa fe48 	bl	8000168 <__aeabi_dsub>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f7fb fa6c 	bl	80009bc <__aeabi_dcmplt>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	f43f af1d 	beq.w	8005324 <_dtoa_r+0x474>
 80054ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054ec:	1e7b      	subs	r3, r7, #1
 80054ee:	9314      	str	r3, [sp, #80]	; 0x50
 80054f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d0f8      	beq.n	80054ea <_dtoa_r+0x63a>
 80054f8:	46c1      	mov	r9, r8
 80054fa:	e03a      	b.n	8005572 <_dtoa_r+0x6c2>
 80054fc:	4ba2      	ldr	r3, [pc, #648]	; (8005788 <_dtoa_r+0x8d8>)
 80054fe:	f7fa ffeb 	bl	80004d8 <__aeabi_dmul>
 8005502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005506:	e7bc      	b.n	8005482 <_dtoa_r+0x5d2>
 8005508:	9f08      	ldr	r7, [sp, #32]
 800550a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800550e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005512:	f7fb f90b 	bl	800072c <__aeabi_ddiv>
 8005516:	f7fb fa8f 	bl	8000a38 <__aeabi_d2iz>
 800551a:	4604      	mov	r4, r0
 800551c:	f7fa ff72 	bl	8000404 <__aeabi_i2d>
 8005520:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005524:	f7fa ffd8 	bl	80004d8 <__aeabi_dmul>
 8005528:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800552c:	460b      	mov	r3, r1
 800552e:	4602      	mov	r2, r0
 8005530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005534:	f7fa fe18 	bl	8000168 <__aeabi_dsub>
 8005538:	f807 6b01 	strb.w	r6, [r7], #1
 800553c:	9e08      	ldr	r6, [sp, #32]
 800553e:	9b02      	ldr	r3, [sp, #8]
 8005540:	1bbe      	subs	r6, r7, r6
 8005542:	42b3      	cmp	r3, r6
 8005544:	d13a      	bne.n	80055bc <_dtoa_r+0x70c>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	f7fa fe0f 	bl	800016c <__adddf3>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800555a:	f7fb fa4d 	bl	80009f8 <__aeabi_dcmpgt>
 800555e:	bb58      	cbnz	r0, 80055b8 <_dtoa_r+0x708>
 8005560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005568:	f7fb fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800556c:	b108      	cbz	r0, 8005572 <_dtoa_r+0x6c2>
 800556e:	07e1      	lsls	r1, r4, #31
 8005570:	d422      	bmi.n	80055b8 <_dtoa_r+0x708>
 8005572:	4628      	mov	r0, r5
 8005574:	4651      	mov	r1, sl
 8005576:	f000 fe69 	bl	800624c <_Bfree>
 800557a:	2300      	movs	r3, #0
 800557c:	703b      	strb	r3, [r7, #0]
 800557e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005580:	f109 0001 	add.w	r0, r9, #1
 8005584:	6018      	str	r0, [r3, #0]
 8005586:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005588:	2b00      	cmp	r3, #0
 800558a:	f43f acdf 	beq.w	8004f4c <_dtoa_r+0x9c>
 800558e:	601f      	str	r7, [r3, #0]
 8005590:	e4dc      	b.n	8004f4c <_dtoa_r+0x9c>
 8005592:	4627      	mov	r7, r4
 8005594:	463b      	mov	r3, r7
 8005596:	461f      	mov	r7, r3
 8005598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800559c:	2a39      	cmp	r2, #57	; 0x39
 800559e:	d107      	bne.n	80055b0 <_dtoa_r+0x700>
 80055a0:	9a08      	ldr	r2, [sp, #32]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d1f7      	bne.n	8005596 <_dtoa_r+0x6e6>
 80055a6:	2230      	movs	r2, #48	; 0x30
 80055a8:	9908      	ldr	r1, [sp, #32]
 80055aa:	f108 0801 	add.w	r8, r8, #1
 80055ae:	700a      	strb	r2, [r1, #0]
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	3201      	adds	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e79f      	b.n	80054f8 <_dtoa_r+0x648>
 80055b8:	46c8      	mov	r8, r9
 80055ba:	e7eb      	b.n	8005594 <_dtoa_r+0x6e4>
 80055bc:	2200      	movs	r2, #0
 80055be:	4b72      	ldr	r3, [pc, #456]	; (8005788 <_dtoa_r+0x8d8>)
 80055c0:	f7fa ff8a 	bl	80004d8 <__aeabi_dmul>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	f7fb f9ea 	bl	80009a8 <__aeabi_dcmpeq>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d098      	beq.n	800550a <_dtoa_r+0x65a>
 80055d8:	e7cb      	b.n	8005572 <_dtoa_r+0x6c2>
 80055da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055dc:	2a00      	cmp	r2, #0
 80055de:	f000 80cd 	beq.w	800577c <_dtoa_r+0x8cc>
 80055e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055e4:	2a01      	cmp	r2, #1
 80055e6:	f300 80af 	bgt.w	8005748 <_dtoa_r+0x898>
 80055ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	f000 80a7 	beq.w	8005740 <_dtoa_r+0x890>
 80055f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055f8:	9f06      	ldr	r7, [sp, #24]
 80055fa:	9a06      	ldr	r2, [sp, #24]
 80055fc:	2101      	movs	r1, #1
 80055fe:	441a      	add	r2, r3
 8005600:	9206      	str	r2, [sp, #24]
 8005602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005604:	4628      	mov	r0, r5
 8005606:	441a      	add	r2, r3
 8005608:	9209      	str	r2, [sp, #36]	; 0x24
 800560a:	f000 ff23 	bl	8006454 <__i2b>
 800560e:	4606      	mov	r6, r0
 8005610:	2f00      	cmp	r7, #0
 8005612:	dd0c      	ble.n	800562e <_dtoa_r+0x77e>
 8005614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	dd09      	ble.n	800562e <_dtoa_r+0x77e>
 800561a:	42bb      	cmp	r3, r7
 800561c:	bfa8      	it	ge
 800561e:	463b      	movge	r3, r7
 8005620:	9a06      	ldr	r2, [sp, #24]
 8005622:	1aff      	subs	r7, r7, r3
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	9206      	str	r2, [sp, #24]
 8005628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005630:	b1f3      	cbz	r3, 8005670 <_dtoa_r+0x7c0>
 8005632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a9 	beq.w	800578c <_dtoa_r+0x8dc>
 800563a:	2c00      	cmp	r4, #0
 800563c:	dd10      	ble.n	8005660 <_dtoa_r+0x7b0>
 800563e:	4631      	mov	r1, r6
 8005640:	4622      	mov	r2, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 ffc0 	bl	80065c8 <__pow5mult>
 8005648:	4652      	mov	r2, sl
 800564a:	4601      	mov	r1, r0
 800564c:	4606      	mov	r6, r0
 800564e:	4628      	mov	r0, r5
 8005650:	f000 ff16 	bl	8006480 <__multiply>
 8005654:	4680      	mov	r8, r0
 8005656:	4651      	mov	r1, sl
 8005658:	4628      	mov	r0, r5
 800565a:	f000 fdf7 	bl	800624c <_Bfree>
 800565e:	46c2      	mov	sl, r8
 8005660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005662:	1b1a      	subs	r2, r3, r4
 8005664:	d004      	beq.n	8005670 <_dtoa_r+0x7c0>
 8005666:	4651      	mov	r1, sl
 8005668:	4628      	mov	r0, r5
 800566a:	f000 ffad 	bl	80065c8 <__pow5mult>
 800566e:	4682      	mov	sl, r0
 8005670:	2101      	movs	r1, #1
 8005672:	4628      	mov	r0, r5
 8005674:	f000 feee 	bl	8006454 <__i2b>
 8005678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800567a:	4604      	mov	r4, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	f340 8087 	ble.w	8005790 <_dtoa_r+0x8e0>
 8005682:	461a      	mov	r2, r3
 8005684:	4601      	mov	r1, r0
 8005686:	4628      	mov	r0, r5
 8005688:	f000 ff9e 	bl	80065c8 <__pow5mult>
 800568c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800568e:	4604      	mov	r4, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	f340 8080 	ble.w	8005796 <_dtoa_r+0x8e6>
 8005696:	f04f 0800 	mov.w	r8, #0
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056a0:	6918      	ldr	r0, [r3, #16]
 80056a2:	f000 fe89 	bl	80063b8 <__hi0bits>
 80056a6:	f1c0 0020 	rsb	r0, r0, #32
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	4418      	add	r0, r3
 80056ae:	f010 001f 	ands.w	r0, r0, #31
 80056b2:	f000 8092 	beq.w	80057da <_dtoa_r+0x92a>
 80056b6:	f1c0 0320 	rsb	r3, r0, #32
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	f340 808a 	ble.w	80057d4 <_dtoa_r+0x924>
 80056c0:	f1c0 001c 	rsb	r0, r0, #28
 80056c4:	9b06      	ldr	r3, [sp, #24]
 80056c6:	4407      	add	r7, r0
 80056c8:	4403      	add	r3, r0
 80056ca:	9306      	str	r3, [sp, #24]
 80056cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ce:	4403      	add	r3, r0
 80056d0:	9309      	str	r3, [sp, #36]	; 0x24
 80056d2:	9b06      	ldr	r3, [sp, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dd05      	ble.n	80056e4 <_dtoa_r+0x834>
 80056d8:	4651      	mov	r1, sl
 80056da:	461a      	mov	r2, r3
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 ffcd 	bl	800667c <__lshift>
 80056e2:	4682      	mov	sl, r0
 80056e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dd05      	ble.n	80056f6 <_dtoa_r+0x846>
 80056ea:	4621      	mov	r1, r4
 80056ec:	461a      	mov	r2, r3
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 ffc4 	bl	800667c <__lshift>
 80056f4:	4604      	mov	r4, r0
 80056f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d070      	beq.n	80057de <_dtoa_r+0x92e>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4650      	mov	r0, sl
 8005700:	f001 f828 	bl	8006754 <__mcmp>
 8005704:	2800      	cmp	r0, #0
 8005706:	da6a      	bge.n	80057de <_dtoa_r+0x92e>
 8005708:	2300      	movs	r3, #0
 800570a:	4651      	mov	r1, sl
 800570c:	220a      	movs	r2, #10
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fdbe 	bl	8006290 <__multadd>
 8005714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005716:	4682      	mov	sl, r0
 8005718:	f109 39ff 	add.w	r9, r9, #4294967295
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8193 	beq.w	8005a48 <_dtoa_r+0xb98>
 8005722:	4631      	mov	r1, r6
 8005724:	2300      	movs	r3, #0
 8005726:	220a      	movs	r2, #10
 8005728:	4628      	mov	r0, r5
 800572a:	f000 fdb1 	bl	8006290 <__multadd>
 800572e:	f1bb 0f00 	cmp.w	fp, #0
 8005732:	4606      	mov	r6, r0
 8005734:	f300 8093 	bgt.w	800585e <_dtoa_r+0x9ae>
 8005738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800573a:	2b02      	cmp	r3, #2
 800573c:	dc57      	bgt.n	80057ee <_dtoa_r+0x93e>
 800573e:	e08e      	b.n	800585e <_dtoa_r+0x9ae>
 8005740:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005742:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005746:	e756      	b.n	80055f6 <_dtoa_r+0x746>
 8005748:	9b02      	ldr	r3, [sp, #8]
 800574a:	1e5c      	subs	r4, r3, #1
 800574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574e:	42a3      	cmp	r3, r4
 8005750:	bfb7      	itett	lt
 8005752:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005754:	1b1c      	subge	r4, r3, r4
 8005756:	1ae2      	sublt	r2, r4, r3
 8005758:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800575a:	bfbe      	ittt	lt
 800575c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800575e:	189b      	addlt	r3, r3, r2
 8005760:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005762:	9b02      	ldr	r3, [sp, #8]
 8005764:	bfb8      	it	lt
 8005766:	2400      	movlt	r4, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfbb      	ittet	lt
 800576c:	9b06      	ldrlt	r3, [sp, #24]
 800576e:	9a02      	ldrlt	r2, [sp, #8]
 8005770:	9f06      	ldrge	r7, [sp, #24]
 8005772:	1a9f      	sublt	r7, r3, r2
 8005774:	bfac      	ite	ge
 8005776:	9b02      	ldrge	r3, [sp, #8]
 8005778:	2300      	movlt	r3, #0
 800577a:	e73e      	b.n	80055fa <_dtoa_r+0x74a>
 800577c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800577e:	9f06      	ldr	r7, [sp, #24]
 8005780:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005782:	e745      	b.n	8005610 <_dtoa_r+0x760>
 8005784:	3fe00000 	.word	0x3fe00000
 8005788:	40240000 	.word	0x40240000
 800578c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800578e:	e76a      	b.n	8005666 <_dtoa_r+0x7b6>
 8005790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005792:	2b01      	cmp	r3, #1
 8005794:	dc19      	bgt.n	80057ca <_dtoa_r+0x91a>
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	b9bb      	cbnz	r3, 80057ca <_dtoa_r+0x91a>
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a0:	b99b      	cbnz	r3, 80057ca <_dtoa_r+0x91a>
 80057a2:	9b05      	ldr	r3, [sp, #20]
 80057a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	0d1b      	lsrs	r3, r3, #20
 80057aa:	051b      	lsls	r3, r3, #20
 80057ac:	b183      	cbz	r3, 80057d0 <_dtoa_r+0x920>
 80057ae:	f04f 0801 	mov.w	r8, #1
 80057b2:	9b06      	ldr	r3, [sp, #24]
 80057b4:	3301      	adds	r3, #1
 80057b6:	9306      	str	r3, [sp, #24]
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	3301      	adds	r3, #1
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f47f af6a 	bne.w	800569a <_dtoa_r+0x7ea>
 80057c6:	2001      	movs	r0, #1
 80057c8:	e76f      	b.n	80056aa <_dtoa_r+0x7fa>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	e7f6      	b.n	80057be <_dtoa_r+0x90e>
 80057d0:	4698      	mov	r8, r3
 80057d2:	e7f4      	b.n	80057be <_dtoa_r+0x90e>
 80057d4:	f43f af7d 	beq.w	80056d2 <_dtoa_r+0x822>
 80057d8:	4618      	mov	r0, r3
 80057da:	301c      	adds	r0, #28
 80057dc:	e772      	b.n	80056c4 <_dtoa_r+0x814>
 80057de:	9b02      	ldr	r3, [sp, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc36      	bgt.n	8005852 <_dtoa_r+0x9a2>
 80057e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	dd33      	ble.n	8005852 <_dtoa_r+0x9a2>
 80057ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80057ee:	f1bb 0f00 	cmp.w	fp, #0
 80057f2:	d10d      	bne.n	8005810 <_dtoa_r+0x960>
 80057f4:	4621      	mov	r1, r4
 80057f6:	465b      	mov	r3, fp
 80057f8:	2205      	movs	r2, #5
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 fd48 	bl	8006290 <__multadd>
 8005800:	4601      	mov	r1, r0
 8005802:	4604      	mov	r4, r0
 8005804:	4650      	mov	r0, sl
 8005806:	f000 ffa5 	bl	8006754 <__mcmp>
 800580a:	2800      	cmp	r0, #0
 800580c:	f73f adb6 	bgt.w	800537c <_dtoa_r+0x4cc>
 8005810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005812:	9f08      	ldr	r7, [sp, #32]
 8005814:	ea6f 0903 	mvn.w	r9, r3
 8005818:	f04f 0800 	mov.w	r8, #0
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 fd14 	bl	800624c <_Bfree>
 8005824:	2e00      	cmp	r6, #0
 8005826:	f43f aea4 	beq.w	8005572 <_dtoa_r+0x6c2>
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	d005      	beq.n	800583c <_dtoa_r+0x98c>
 8005830:	45b0      	cmp	r8, r6
 8005832:	d003      	beq.n	800583c <_dtoa_r+0x98c>
 8005834:	4641      	mov	r1, r8
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fd08 	bl	800624c <_Bfree>
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fd04 	bl	800624c <_Bfree>
 8005844:	e695      	b.n	8005572 <_dtoa_r+0x6c2>
 8005846:	2400      	movs	r4, #0
 8005848:	4626      	mov	r6, r4
 800584a:	e7e1      	b.n	8005810 <_dtoa_r+0x960>
 800584c:	46c1      	mov	r9, r8
 800584e:	4626      	mov	r6, r4
 8005850:	e594      	b.n	800537c <_dtoa_r+0x4cc>
 8005852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005854:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80fc 	beq.w	8005a56 <_dtoa_r+0xba6>
 800585e:	2f00      	cmp	r7, #0
 8005860:	dd05      	ble.n	800586e <_dtoa_r+0x9be>
 8005862:	4631      	mov	r1, r6
 8005864:	463a      	mov	r2, r7
 8005866:	4628      	mov	r0, r5
 8005868:	f000 ff08 	bl	800667c <__lshift>
 800586c:	4606      	mov	r6, r0
 800586e:	f1b8 0f00 	cmp.w	r8, #0
 8005872:	d05c      	beq.n	800592e <_dtoa_r+0xa7e>
 8005874:	4628      	mov	r0, r5
 8005876:	6871      	ldr	r1, [r6, #4]
 8005878:	f000 fca8 	bl	80061cc <_Balloc>
 800587c:	4607      	mov	r7, r0
 800587e:	b928      	cbnz	r0, 800588c <_dtoa_r+0x9dc>
 8005880:	4602      	mov	r2, r0
 8005882:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005886:	4b7e      	ldr	r3, [pc, #504]	; (8005a80 <_dtoa_r+0xbd0>)
 8005888:	f7ff bb26 	b.w	8004ed8 <_dtoa_r+0x28>
 800588c:	6932      	ldr	r2, [r6, #16]
 800588e:	f106 010c 	add.w	r1, r6, #12
 8005892:	3202      	adds	r2, #2
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	300c      	adds	r0, #12
 8005898:	f000 fc8a 	bl	80061b0 <memcpy>
 800589c:	2201      	movs	r2, #1
 800589e:	4639      	mov	r1, r7
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 feeb 	bl	800667c <__lshift>
 80058a6:	46b0      	mov	r8, r6
 80058a8:	4606      	mov	r6, r0
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	3301      	adds	r3, #1
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	9b08      	ldr	r3, [sp, #32]
 80058b2:	445b      	add	r3, fp
 80058b4:	930a      	str	r3, [sp, #40]	; 0x28
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	9309      	str	r3, [sp, #36]	; 0x24
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	4621      	mov	r1, r4
 80058c2:	4650      	mov	r0, sl
 80058c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80058c8:	f7ff fa64 	bl	8004d94 <quorem>
 80058cc:	4603      	mov	r3, r0
 80058ce:	4641      	mov	r1, r8
 80058d0:	3330      	adds	r3, #48	; 0x30
 80058d2:	9004      	str	r0, [sp, #16]
 80058d4:	4650      	mov	r0, sl
 80058d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d8:	f000 ff3c 	bl	8006754 <__mcmp>
 80058dc:	4632      	mov	r2, r6
 80058de:	9006      	str	r0, [sp, #24]
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 ff52 	bl	800678c <__mdiff>
 80058e8:	68c2      	ldr	r2, [r0, #12]
 80058ea:	4607      	mov	r7, r0
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	bb02      	cbnz	r2, 8005932 <_dtoa_r+0xa82>
 80058f0:	4601      	mov	r1, r0
 80058f2:	4650      	mov	r0, sl
 80058f4:	f000 ff2e 	bl	8006754 <__mcmp>
 80058f8:	4602      	mov	r2, r0
 80058fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058fc:	4639      	mov	r1, r7
 80058fe:	4628      	mov	r0, r5
 8005900:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005904:	f000 fca2 	bl	800624c <_Bfree>
 8005908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800590a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800590c:	9f02      	ldr	r7, [sp, #8]
 800590e:	ea43 0102 	orr.w	r1, r3, r2
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	430b      	orrs	r3, r1
 8005916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005918:	d10d      	bne.n	8005936 <_dtoa_r+0xa86>
 800591a:	2b39      	cmp	r3, #57	; 0x39
 800591c:	d027      	beq.n	800596e <_dtoa_r+0xabe>
 800591e:	9a06      	ldr	r2, [sp, #24]
 8005920:	2a00      	cmp	r2, #0
 8005922:	dd01      	ble.n	8005928 <_dtoa_r+0xa78>
 8005924:	9b04      	ldr	r3, [sp, #16]
 8005926:	3331      	adds	r3, #49	; 0x31
 8005928:	f88b 3000 	strb.w	r3, [fp]
 800592c:	e776      	b.n	800581c <_dtoa_r+0x96c>
 800592e:	4630      	mov	r0, r6
 8005930:	e7b9      	b.n	80058a6 <_dtoa_r+0x9f6>
 8005932:	2201      	movs	r2, #1
 8005934:	e7e2      	b.n	80058fc <_dtoa_r+0xa4c>
 8005936:	9906      	ldr	r1, [sp, #24]
 8005938:	2900      	cmp	r1, #0
 800593a:	db04      	blt.n	8005946 <_dtoa_r+0xa96>
 800593c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800593e:	4301      	orrs	r1, r0
 8005940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005942:	4301      	orrs	r1, r0
 8005944:	d120      	bne.n	8005988 <_dtoa_r+0xad8>
 8005946:	2a00      	cmp	r2, #0
 8005948:	ddee      	ble.n	8005928 <_dtoa_r+0xa78>
 800594a:	4651      	mov	r1, sl
 800594c:	2201      	movs	r2, #1
 800594e:	4628      	mov	r0, r5
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	f000 fe93 	bl	800667c <__lshift>
 8005956:	4621      	mov	r1, r4
 8005958:	4682      	mov	sl, r0
 800595a:	f000 fefb 	bl	8006754 <__mcmp>
 800595e:	2800      	cmp	r0, #0
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	dc02      	bgt.n	800596a <_dtoa_r+0xaba>
 8005964:	d1e0      	bne.n	8005928 <_dtoa_r+0xa78>
 8005966:	07da      	lsls	r2, r3, #31
 8005968:	d5de      	bpl.n	8005928 <_dtoa_r+0xa78>
 800596a:	2b39      	cmp	r3, #57	; 0x39
 800596c:	d1da      	bne.n	8005924 <_dtoa_r+0xa74>
 800596e:	2339      	movs	r3, #57	; 0x39
 8005970:	f88b 3000 	strb.w	r3, [fp]
 8005974:	463b      	mov	r3, r7
 8005976:	461f      	mov	r7, r3
 8005978:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800597c:	3b01      	subs	r3, #1
 800597e:	2a39      	cmp	r2, #57	; 0x39
 8005980:	d050      	beq.n	8005a24 <_dtoa_r+0xb74>
 8005982:	3201      	adds	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e749      	b.n	800581c <_dtoa_r+0x96c>
 8005988:	2a00      	cmp	r2, #0
 800598a:	dd03      	ble.n	8005994 <_dtoa_r+0xae4>
 800598c:	2b39      	cmp	r3, #57	; 0x39
 800598e:	d0ee      	beq.n	800596e <_dtoa_r+0xabe>
 8005990:	3301      	adds	r3, #1
 8005992:	e7c9      	b.n	8005928 <_dtoa_r+0xa78>
 8005994:	9a02      	ldr	r2, [sp, #8]
 8005996:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005998:	f802 3c01 	strb.w	r3, [r2, #-1]
 800599c:	428a      	cmp	r2, r1
 800599e:	d02a      	beq.n	80059f6 <_dtoa_r+0xb46>
 80059a0:	4651      	mov	r1, sl
 80059a2:	2300      	movs	r3, #0
 80059a4:	220a      	movs	r2, #10
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fc72 	bl	8006290 <__multadd>
 80059ac:	45b0      	cmp	r8, r6
 80059ae:	4682      	mov	sl, r0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	f04f 020a 	mov.w	r2, #10
 80059b8:	4641      	mov	r1, r8
 80059ba:	4628      	mov	r0, r5
 80059bc:	d107      	bne.n	80059ce <_dtoa_r+0xb1e>
 80059be:	f000 fc67 	bl	8006290 <__multadd>
 80059c2:	4680      	mov	r8, r0
 80059c4:	4606      	mov	r6, r0
 80059c6:	9b02      	ldr	r3, [sp, #8]
 80059c8:	3301      	adds	r3, #1
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	e777      	b.n	80058be <_dtoa_r+0xa0e>
 80059ce:	f000 fc5f 	bl	8006290 <__multadd>
 80059d2:	4631      	mov	r1, r6
 80059d4:	4680      	mov	r8, r0
 80059d6:	2300      	movs	r3, #0
 80059d8:	220a      	movs	r2, #10
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 fc58 	bl	8006290 <__multadd>
 80059e0:	4606      	mov	r6, r0
 80059e2:	e7f0      	b.n	80059c6 <_dtoa_r+0xb16>
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	bfcc      	ite	gt
 80059ea:	465f      	movgt	r7, fp
 80059ec:	2701      	movle	r7, #1
 80059ee:	f04f 0800 	mov.w	r8, #0
 80059f2:	9a08      	ldr	r2, [sp, #32]
 80059f4:	4417      	add	r7, r2
 80059f6:	4651      	mov	r1, sl
 80059f8:	2201      	movs	r2, #1
 80059fa:	4628      	mov	r0, r5
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	f000 fe3d 	bl	800667c <__lshift>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4682      	mov	sl, r0
 8005a06:	f000 fea5 	bl	8006754 <__mcmp>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	dcb2      	bgt.n	8005974 <_dtoa_r+0xac4>
 8005a0e:	d102      	bne.n	8005a16 <_dtoa_r+0xb66>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	07db      	lsls	r3, r3, #31
 8005a14:	d4ae      	bmi.n	8005974 <_dtoa_r+0xac4>
 8005a16:	463b      	mov	r3, r7
 8005a18:	461f      	mov	r7, r3
 8005a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a1e:	2a30      	cmp	r2, #48	; 0x30
 8005a20:	d0fa      	beq.n	8005a18 <_dtoa_r+0xb68>
 8005a22:	e6fb      	b.n	800581c <_dtoa_r+0x96c>
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d1a5      	bne.n	8005976 <_dtoa_r+0xac6>
 8005a2a:	2331      	movs	r3, #49	; 0x31
 8005a2c:	f109 0901 	add.w	r9, r9, #1
 8005a30:	7013      	strb	r3, [r2, #0]
 8005a32:	e6f3      	b.n	800581c <_dtoa_r+0x96c>
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <_dtoa_r+0xbd4>)
 8005a36:	f7ff baa7 	b.w	8004f88 <_dtoa_r+0xd8>
 8005a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f aa80 	bne.w	8004f42 <_dtoa_r+0x92>
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <_dtoa_r+0xbd8>)
 8005a44:	f7ff baa0 	b.w	8004f88 <_dtoa_r+0xd8>
 8005a48:	f1bb 0f00 	cmp.w	fp, #0
 8005a4c:	dc03      	bgt.n	8005a56 <_dtoa_r+0xba6>
 8005a4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	f73f aecc 	bgt.w	80057ee <_dtoa_r+0x93e>
 8005a56:	9f08      	ldr	r7, [sp, #32]
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	f7ff f99a 	bl	8004d94 <quorem>
 8005a60:	9a08      	ldr	r2, [sp, #32]
 8005a62:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a66:	f807 3b01 	strb.w	r3, [r7], #1
 8005a6a:	1aba      	subs	r2, r7, r2
 8005a6c:	4593      	cmp	fp, r2
 8005a6e:	ddb9      	ble.n	80059e4 <_dtoa_r+0xb34>
 8005a70:	4651      	mov	r1, sl
 8005a72:	2300      	movs	r3, #0
 8005a74:	220a      	movs	r2, #10
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 fc0a 	bl	8006290 <__multadd>
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	e7eb      	b.n	8005a58 <_dtoa_r+0xba8>
 8005a80:	08007dcc 	.word	0x08007dcc
 8005a84:	08007bcc 	.word	0x08007bcc
 8005a88:	08007d49 	.word	0x08007d49

08005a8c <rshift>:
 8005a8c:	6903      	ldr	r3, [r0, #16]
 8005a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005a96:	f100 0414 	add.w	r4, r0, #20
 8005a9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005a9e:	dd46      	ble.n	8005b2e <rshift+0xa2>
 8005aa0:	f011 011f 	ands.w	r1, r1, #31
 8005aa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005aa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005aac:	d10c      	bne.n	8005ac8 <rshift+0x3c>
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f100 0710 	add.w	r7, r0, #16
 8005ab4:	42b1      	cmp	r1, r6
 8005ab6:	d335      	bcc.n	8005b24 <rshift+0x98>
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	1eea      	subs	r2, r5, #3
 8005abe:	4296      	cmp	r6, r2
 8005ac0:	bf38      	it	cc
 8005ac2:	2300      	movcc	r3, #0
 8005ac4:	4423      	add	r3, r4
 8005ac6:	e015      	b.n	8005af4 <rshift+0x68>
 8005ac8:	46a1      	mov	r9, r4
 8005aca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005ace:	f1c1 0820 	rsb	r8, r1, #32
 8005ad2:	40cf      	lsrs	r7, r1
 8005ad4:	f105 0e04 	add.w	lr, r5, #4
 8005ad8:	4576      	cmp	r6, lr
 8005ada:	46f4      	mov	ip, lr
 8005adc:	d816      	bhi.n	8005b0c <rshift+0x80>
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009a      	lsls	r2, r3, #2
 8005ae2:	3a04      	subs	r2, #4
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	42ae      	cmp	r6, r5
 8005ae8:	bf38      	it	cc
 8005aea:	2200      	movcc	r2, #0
 8005aec:	18a3      	adds	r3, r4, r2
 8005aee:	50a7      	str	r7, [r4, r2]
 8005af0:	b107      	cbz	r7, 8005af4 <rshift+0x68>
 8005af2:	3304      	adds	r3, #4
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	eba3 0204 	sub.w	r2, r3, r4
 8005afa:	bf08      	it	eq
 8005afc:	2300      	moveq	r3, #0
 8005afe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005b02:	6102      	str	r2, [r0, #16]
 8005b04:	bf08      	it	eq
 8005b06:	6143      	streq	r3, [r0, #20]
 8005b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b0c:	f8dc c000 	ldr.w	ip, [ip]
 8005b10:	fa0c fc08 	lsl.w	ip, ip, r8
 8005b14:	ea4c 0707 	orr.w	r7, ip, r7
 8005b18:	f849 7b04 	str.w	r7, [r9], #4
 8005b1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b20:	40cf      	lsrs	r7, r1
 8005b22:	e7d9      	b.n	8005ad8 <rshift+0x4c>
 8005b24:	f851 cb04 	ldr.w	ip, [r1], #4
 8005b28:	f847 cf04 	str.w	ip, [r7, #4]!
 8005b2c:	e7c2      	b.n	8005ab4 <rshift+0x28>
 8005b2e:	4623      	mov	r3, r4
 8005b30:	e7e0      	b.n	8005af4 <rshift+0x68>

08005b32 <__hexdig_fun>:
 8005b32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d802      	bhi.n	8005b40 <__hexdig_fun+0xe>
 8005b3a:	3820      	subs	r0, #32
 8005b3c:	b2c0      	uxtb	r0, r0
 8005b3e:	4770      	bx	lr
 8005b40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005b44:	2b05      	cmp	r3, #5
 8005b46:	d801      	bhi.n	8005b4c <__hexdig_fun+0x1a>
 8005b48:	3847      	subs	r0, #71	; 0x47
 8005b4a:	e7f7      	b.n	8005b3c <__hexdig_fun+0xa>
 8005b4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	d801      	bhi.n	8005b58 <__hexdig_fun+0x26>
 8005b54:	3827      	subs	r0, #39	; 0x27
 8005b56:	e7f1      	b.n	8005b3c <__hexdig_fun+0xa>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	4770      	bx	lr

08005b5c <__gethex>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	b08b      	sub	sp, #44	; 0x2c
 8005b62:	9306      	str	r3, [sp, #24]
 8005b64:	4bb9      	ldr	r3, [pc, #740]	; (8005e4c <__gethex+0x2f0>)
 8005b66:	9002      	str	r0, [sp, #8]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	468b      	mov	fp, r1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4690      	mov	r8, r2
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	f7fa faed 	bl	8000150 <strlen>
 8005b76:	4682      	mov	sl, r0
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	f8db 2000 	ldr.w	r2, [fp]
 8005b7e:	4403      	add	r3, r0
 8005b80:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	1c93      	adds	r3, r2, #2
 8005b88:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005b8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005b90:	32fe      	adds	r2, #254	; 0xfe
 8005b92:	18d1      	adds	r1, r2, r3
 8005b94:	461f      	mov	r7, r3
 8005b96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b9a:	9101      	str	r1, [sp, #4]
 8005b9c:	2830      	cmp	r0, #48	; 0x30
 8005b9e:	d0f8      	beq.n	8005b92 <__gethex+0x36>
 8005ba0:	f7ff ffc7 	bl	8005b32 <__hexdig_fun>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d13a      	bne.n	8005c20 <__gethex+0xc4>
 8005baa:	4652      	mov	r2, sl
 8005bac:	4638      	mov	r0, r7
 8005bae:	9903      	ldr	r1, [sp, #12]
 8005bb0:	f001 f9ea 	bl	8006f88 <strncmp>
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d166      	bne.n	8005c88 <__gethex+0x12c>
 8005bba:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005bbe:	eb07 060a 	add.w	r6, r7, sl
 8005bc2:	f7ff ffb6 	bl	8005b32 <__hexdig_fun>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d060      	beq.n	8005c8c <__gethex+0x130>
 8005bca:	4633      	mov	r3, r6
 8005bcc:	7818      	ldrb	r0, [r3, #0]
 8005bce:	461f      	mov	r7, r3
 8005bd0:	2830      	cmp	r0, #48	; 0x30
 8005bd2:	f103 0301 	add.w	r3, r3, #1
 8005bd6:	d0f9      	beq.n	8005bcc <__gethex+0x70>
 8005bd8:	f7ff ffab 	bl	8005b32 <__hexdig_fun>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	fab0 f480 	clz	r4, r0
 8005be2:	4635      	mov	r5, r6
 8005be4:	0964      	lsrs	r4, r4, #5
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	463a      	mov	r2, r7
 8005bea:	4616      	mov	r6, r2
 8005bec:	7830      	ldrb	r0, [r6, #0]
 8005bee:	3201      	adds	r2, #1
 8005bf0:	f7ff ff9f 	bl	8005b32 <__hexdig_fun>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1f8      	bne.n	8005bea <__gethex+0x8e>
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	9903      	ldr	r1, [sp, #12]
 8005bfe:	f001 f9c3 	bl	8006f88 <strncmp>
 8005c02:	b980      	cbnz	r0, 8005c26 <__gethex+0xca>
 8005c04:	b94d      	cbnz	r5, 8005c1a <__gethex+0xbe>
 8005c06:	eb06 050a 	add.w	r5, r6, sl
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	7830      	ldrb	r0, [r6, #0]
 8005c10:	3201      	adds	r2, #1
 8005c12:	f7ff ff8e 	bl	8005b32 <__hexdig_fun>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d1f8      	bne.n	8005c0c <__gethex+0xb0>
 8005c1a:	1bad      	subs	r5, r5, r6
 8005c1c:	00ad      	lsls	r5, r5, #2
 8005c1e:	e004      	b.n	8005c2a <__gethex+0xce>
 8005c20:	2400      	movs	r4, #0
 8005c22:	4625      	mov	r5, r4
 8005c24:	e7e0      	b.n	8005be8 <__gethex+0x8c>
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	d1f7      	bne.n	8005c1a <__gethex+0xbe>
 8005c2a:	7833      	ldrb	r3, [r6, #0]
 8005c2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c30:	2b50      	cmp	r3, #80	; 0x50
 8005c32:	d139      	bne.n	8005ca8 <__gethex+0x14c>
 8005c34:	7873      	ldrb	r3, [r6, #1]
 8005c36:	2b2b      	cmp	r3, #43	; 0x2b
 8005c38:	d02a      	beq.n	8005c90 <__gethex+0x134>
 8005c3a:	2b2d      	cmp	r3, #45	; 0x2d
 8005c3c:	d02c      	beq.n	8005c98 <__gethex+0x13c>
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	1c71      	adds	r1, r6, #1
 8005c44:	7808      	ldrb	r0, [r1, #0]
 8005c46:	f7ff ff74 	bl	8005b32 <__hexdig_fun>
 8005c4a:	1e43      	subs	r3, r0, #1
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b18      	cmp	r3, #24
 8005c50:	d82a      	bhi.n	8005ca8 <__gethex+0x14c>
 8005c52:	f1a0 0210 	sub.w	r2, r0, #16
 8005c56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005c5a:	f7ff ff6a 	bl	8005b32 <__hexdig_fun>
 8005c5e:	1e43      	subs	r3, r0, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b18      	cmp	r3, #24
 8005c64:	d91b      	bls.n	8005c9e <__gethex+0x142>
 8005c66:	f1b9 0f00 	cmp.w	r9, #0
 8005c6a:	d000      	beq.n	8005c6e <__gethex+0x112>
 8005c6c:	4252      	negs	r2, r2
 8005c6e:	4415      	add	r5, r2
 8005c70:	f8cb 1000 	str.w	r1, [fp]
 8005c74:	b1d4      	cbz	r4, 8005cac <__gethex+0x150>
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf14      	ite	ne
 8005c7c:	2700      	movne	r7, #0
 8005c7e:	2706      	moveq	r7, #6
 8005c80:	4638      	mov	r0, r7
 8005c82:	b00b      	add	sp, #44	; 0x2c
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	463e      	mov	r6, r7
 8005c8a:	4625      	mov	r5, r4
 8005c8c:	2401      	movs	r4, #1
 8005c8e:	e7cc      	b.n	8005c2a <__gethex+0xce>
 8005c90:	f04f 0900 	mov.w	r9, #0
 8005c94:	1cb1      	adds	r1, r6, #2
 8005c96:	e7d5      	b.n	8005c44 <__gethex+0xe8>
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	e7fa      	b.n	8005c94 <__gethex+0x138>
 8005c9e:	230a      	movs	r3, #10
 8005ca0:	fb03 0202 	mla	r2, r3, r2, r0
 8005ca4:	3a10      	subs	r2, #16
 8005ca6:	e7d6      	b.n	8005c56 <__gethex+0xfa>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	e7e1      	b.n	8005c70 <__gethex+0x114>
 8005cac:	4621      	mov	r1, r4
 8005cae:	1bf3      	subs	r3, r6, r7
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	dc0a      	bgt.n	8005ccc <__gethex+0x170>
 8005cb6:	9802      	ldr	r0, [sp, #8]
 8005cb8:	f000 fa88 	bl	80061cc <_Balloc>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	b940      	cbnz	r0, 8005cd2 <__gethex+0x176>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	21de      	movs	r1, #222	; 0xde
 8005cc4:	4b62      	ldr	r3, [pc, #392]	; (8005e50 <__gethex+0x2f4>)
 8005cc6:	4863      	ldr	r0, [pc, #396]	; (8005e54 <__gethex+0x2f8>)
 8005cc8:	f001 f97e 	bl	8006fc8 <__assert_func>
 8005ccc:	3101      	adds	r1, #1
 8005cce:	105b      	asrs	r3, r3, #1
 8005cd0:	e7ef      	b.n	8005cb2 <__gethex+0x156>
 8005cd2:	f04f 0b00 	mov.w	fp, #0
 8005cd6:	f100 0914 	add.w	r9, r0, #20
 8005cda:	f1ca 0301 	rsb	r3, sl, #1
 8005cde:	f8cd 9010 	str.w	r9, [sp, #16]
 8005ce2:	f8cd b004 	str.w	fp, [sp, #4]
 8005ce6:	9308      	str	r3, [sp, #32]
 8005ce8:	42b7      	cmp	r7, r6
 8005cea:	d33f      	bcc.n	8005d6c <__gethex+0x210>
 8005cec:	9f04      	ldr	r7, [sp, #16]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	f847 3b04 	str.w	r3, [r7], #4
 8005cf4:	eba7 0709 	sub.w	r7, r7, r9
 8005cf8:	10bf      	asrs	r7, r7, #2
 8005cfa:	6127      	str	r7, [r4, #16]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fb5b 	bl	80063b8 <__hi0bits>
 8005d02:	017f      	lsls	r7, r7, #5
 8005d04:	f8d8 6000 	ldr.w	r6, [r8]
 8005d08:	1a3f      	subs	r7, r7, r0
 8005d0a:	42b7      	cmp	r7, r6
 8005d0c:	dd62      	ble.n	8005dd4 <__gethex+0x278>
 8005d0e:	1bbf      	subs	r7, r7, r6
 8005d10:	4639      	mov	r1, r7
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fef1 	bl	8006afa <__any_on>
 8005d18:	4682      	mov	sl, r0
 8005d1a:	b1a8      	cbz	r0, 8005d48 <__gethex+0x1ec>
 8005d1c:	f04f 0a01 	mov.w	sl, #1
 8005d20:	1e7b      	subs	r3, r7, #1
 8005d22:	1159      	asrs	r1, r3, #5
 8005d24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	fa0a f202 	lsl.w	r2, sl, r2
 8005d30:	420a      	tst	r2, r1
 8005d32:	d009      	beq.n	8005d48 <__gethex+0x1ec>
 8005d34:	4553      	cmp	r3, sl
 8005d36:	dd05      	ble.n	8005d44 <__gethex+0x1e8>
 8005d38:	4620      	mov	r0, r4
 8005d3a:	1eb9      	subs	r1, r7, #2
 8005d3c:	f000 fedd 	bl	8006afa <__any_on>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d144      	bne.n	8005dce <__gethex+0x272>
 8005d44:	f04f 0a02 	mov.w	sl, #2
 8005d48:	4639      	mov	r1, r7
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff fe9e 	bl	8005a8c <rshift>
 8005d50:	443d      	add	r5, r7
 8005d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d56:	42ab      	cmp	r3, r5
 8005d58:	da4a      	bge.n	8005df0 <__gethex+0x294>
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	9802      	ldr	r0, [sp, #8]
 8005d5e:	f000 fa75 	bl	800624c <_Bfree>
 8005d62:	2300      	movs	r3, #0
 8005d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d66:	27a3      	movs	r7, #163	; 0xa3
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e789      	b.n	8005c80 <__gethex+0x124>
 8005d6c:	1e73      	subs	r3, r6, #1
 8005d6e:	9a07      	ldr	r2, [sp, #28]
 8005d70:	9305      	str	r3, [sp, #20]
 8005d72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d019      	beq.n	8005dae <__gethex+0x252>
 8005d7a:	f1bb 0f20 	cmp.w	fp, #32
 8005d7e:	d107      	bne.n	8005d90 <__gethex+0x234>
 8005d80:	9b04      	ldr	r3, [sp, #16]
 8005d82:	9a01      	ldr	r2, [sp, #4]
 8005d84:	f843 2b04 	str.w	r2, [r3], #4
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	469b      	mov	fp, r3
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005d94:	f7ff fecd 	bl	8005b32 <__hexdig_fun>
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	f000 000f 	and.w	r0, r0, #15
 8005d9e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005da2:	4303      	orrs	r3, r0
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	f10b 0b04 	add.w	fp, fp, #4
 8005daa:	9b05      	ldr	r3, [sp, #20]
 8005dac:	e00d      	b.n	8005dca <__gethex+0x26e>
 8005dae:	9b05      	ldr	r3, [sp, #20]
 8005db0:	9a08      	ldr	r2, [sp, #32]
 8005db2:	4413      	add	r3, r2
 8005db4:	42bb      	cmp	r3, r7
 8005db6:	d3e0      	bcc.n	8005d7a <__gethex+0x21e>
 8005db8:	4618      	mov	r0, r3
 8005dba:	4652      	mov	r2, sl
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	f001 f8e2 	bl	8006f88 <strncmp>
 8005dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d1d7      	bne.n	8005d7a <__gethex+0x21e>
 8005dca:	461e      	mov	r6, r3
 8005dcc:	e78c      	b.n	8005ce8 <__gethex+0x18c>
 8005dce:	f04f 0a03 	mov.w	sl, #3
 8005dd2:	e7b9      	b.n	8005d48 <__gethex+0x1ec>
 8005dd4:	da09      	bge.n	8005dea <__gethex+0x28e>
 8005dd6:	1bf7      	subs	r7, r6, r7
 8005dd8:	4621      	mov	r1, r4
 8005dda:	463a      	mov	r2, r7
 8005ddc:	9802      	ldr	r0, [sp, #8]
 8005dde:	f000 fc4d 	bl	800667c <__lshift>
 8005de2:	4604      	mov	r4, r0
 8005de4:	1bed      	subs	r5, r5, r7
 8005de6:	f100 0914 	add.w	r9, r0, #20
 8005dea:	f04f 0a00 	mov.w	sl, #0
 8005dee:	e7b0      	b.n	8005d52 <__gethex+0x1f6>
 8005df0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005df4:	42a8      	cmp	r0, r5
 8005df6:	dd71      	ble.n	8005edc <__gethex+0x380>
 8005df8:	1b45      	subs	r5, r0, r5
 8005dfa:	42ae      	cmp	r6, r5
 8005dfc:	dc34      	bgt.n	8005e68 <__gethex+0x30c>
 8005dfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d028      	beq.n	8005e58 <__gethex+0x2fc>
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d02a      	beq.n	8005e60 <__gethex+0x304>
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d115      	bne.n	8005e3a <__gethex+0x2de>
 8005e0e:	42ae      	cmp	r6, r5
 8005e10:	d113      	bne.n	8005e3a <__gethex+0x2de>
 8005e12:	2e01      	cmp	r6, #1
 8005e14:	d10b      	bne.n	8005e2e <__gethex+0x2d2>
 8005e16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e1a:	9a06      	ldr	r2, [sp, #24]
 8005e1c:	2762      	movs	r7, #98	; 0x62
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	f8c9 3000 	str.w	r3, [r9]
 8005e28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e2a:	601c      	str	r4, [r3, #0]
 8005e2c:	e728      	b.n	8005c80 <__gethex+0x124>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	1e71      	subs	r1, r6, #1
 8005e32:	f000 fe62 	bl	8006afa <__any_on>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d1ed      	bne.n	8005e16 <__gethex+0x2ba>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	9802      	ldr	r0, [sp, #8]
 8005e3e:	f000 fa05 	bl	800624c <_Bfree>
 8005e42:	2300      	movs	r3, #0
 8005e44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e46:	2750      	movs	r7, #80	; 0x50
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e719      	b.n	8005c80 <__gethex+0x124>
 8005e4c:	08007e48 	.word	0x08007e48
 8005e50:	08007dcc 	.word	0x08007dcc
 8005e54:	08007ddd 	.word	0x08007ddd
 8005e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1ed      	bne.n	8005e3a <__gethex+0x2de>
 8005e5e:	e7da      	b.n	8005e16 <__gethex+0x2ba>
 8005e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1d7      	bne.n	8005e16 <__gethex+0x2ba>
 8005e66:	e7e8      	b.n	8005e3a <__gethex+0x2de>
 8005e68:	1e6f      	subs	r7, r5, #1
 8005e6a:	f1ba 0f00 	cmp.w	sl, #0
 8005e6e:	d132      	bne.n	8005ed6 <__gethex+0x37a>
 8005e70:	b127      	cbz	r7, 8005e7c <__gethex+0x320>
 8005e72:	4639      	mov	r1, r7
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fe40 	bl	8006afa <__any_on>
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	117b      	asrs	r3, r7, #5
 8005e80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005e84:	f007 071f 	and.w	r7, r7, #31
 8005e88:	fa01 f707 	lsl.w	r7, r1, r7
 8005e8c:	421f      	tst	r7, r3
 8005e8e:	f04f 0702 	mov.w	r7, #2
 8005e92:	4629      	mov	r1, r5
 8005e94:	4620      	mov	r0, r4
 8005e96:	bf18      	it	ne
 8005e98:	f04a 0a02 	orrne.w	sl, sl, #2
 8005e9c:	1b76      	subs	r6, r6, r5
 8005e9e:	f7ff fdf5 	bl	8005a8c <rshift>
 8005ea2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	d048      	beq.n	8005f3e <__gethex+0x3e2>
 8005eac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d015      	beq.n	8005ee0 <__gethex+0x384>
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d017      	beq.n	8005ee8 <__gethex+0x38c>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d109      	bne.n	8005ed0 <__gethex+0x374>
 8005ebc:	f01a 0f02 	tst.w	sl, #2
 8005ec0:	d006      	beq.n	8005ed0 <__gethex+0x374>
 8005ec2:	f8d9 0000 	ldr.w	r0, [r9]
 8005ec6:	ea4a 0a00 	orr.w	sl, sl, r0
 8005eca:	f01a 0f01 	tst.w	sl, #1
 8005ece:	d10e      	bne.n	8005eee <__gethex+0x392>
 8005ed0:	f047 0710 	orr.w	r7, r7, #16
 8005ed4:	e033      	b.n	8005f3e <__gethex+0x3e2>
 8005ed6:	f04f 0a01 	mov.w	sl, #1
 8005eda:	e7cf      	b.n	8005e7c <__gethex+0x320>
 8005edc:	2701      	movs	r7, #1
 8005ede:	e7e2      	b.n	8005ea6 <__gethex+0x34a>
 8005ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ee2:	f1c3 0301 	rsb	r3, r3, #1
 8005ee6:	9315      	str	r3, [sp, #84]	; 0x54
 8005ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <__gethex+0x374>
 8005eee:	f04f 0c00 	mov.w	ip, #0
 8005ef2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005ef6:	f104 0314 	add.w	r3, r4, #20
 8005efa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005efe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005f0c:	d01c      	beq.n	8005f48 <__gethex+0x3ec>
 8005f0e:	3201      	adds	r2, #1
 8005f10:	6002      	str	r2, [r0, #0]
 8005f12:	2f02      	cmp	r7, #2
 8005f14:	f104 0314 	add.w	r3, r4, #20
 8005f18:	d13d      	bne.n	8005f96 <__gethex+0x43a>
 8005f1a:	f8d8 2000 	ldr.w	r2, [r8]
 8005f1e:	3a01      	subs	r2, #1
 8005f20:	42b2      	cmp	r2, r6
 8005f22:	d10a      	bne.n	8005f3a <__gethex+0x3de>
 8005f24:	2201      	movs	r2, #1
 8005f26:	1171      	asrs	r1, r6, #5
 8005f28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f2c:	f006 061f 	and.w	r6, r6, #31
 8005f30:	fa02 f606 	lsl.w	r6, r2, r6
 8005f34:	421e      	tst	r6, r3
 8005f36:	bf18      	it	ne
 8005f38:	4617      	movne	r7, r2
 8005f3a:	f047 0720 	orr.w	r7, r7, #32
 8005f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f40:	601c      	str	r4, [r3, #0]
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	601d      	str	r5, [r3, #0]
 8005f46:	e69b      	b.n	8005c80 <__gethex+0x124>
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005f4e:	d8d8      	bhi.n	8005f02 <__gethex+0x3a6>
 8005f50:	68a3      	ldr	r3, [r4, #8]
 8005f52:	459b      	cmp	fp, r3
 8005f54:	db17      	blt.n	8005f86 <__gethex+0x42a>
 8005f56:	6861      	ldr	r1, [r4, #4]
 8005f58:	9802      	ldr	r0, [sp, #8]
 8005f5a:	3101      	adds	r1, #1
 8005f5c:	f000 f936 	bl	80061cc <_Balloc>
 8005f60:	4681      	mov	r9, r0
 8005f62:	b918      	cbnz	r0, 8005f6c <__gethex+0x410>
 8005f64:	4602      	mov	r2, r0
 8005f66:	2184      	movs	r1, #132	; 0x84
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <__gethex+0x474>)
 8005f6a:	e6ac      	b.n	8005cc6 <__gethex+0x16a>
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f104 010c 	add.w	r1, r4, #12
 8005f72:	3202      	adds	r2, #2
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	300c      	adds	r0, #12
 8005f78:	f000 f91a 	bl	80061b0 <memcpy>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	9802      	ldr	r0, [sp, #8]
 8005f80:	f000 f964 	bl	800624c <_Bfree>
 8005f84:	464c      	mov	r4, r9
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	6122      	str	r2, [r4, #16]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f92:	615a      	str	r2, [r3, #20]
 8005f94:	e7bd      	b.n	8005f12 <__gethex+0x3b6>
 8005f96:	6922      	ldr	r2, [r4, #16]
 8005f98:	455a      	cmp	r2, fp
 8005f9a:	dd0b      	ble.n	8005fb4 <__gethex+0x458>
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7ff fd74 	bl	8005a8c <rshift>
 8005fa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fa8:	3501      	adds	r5, #1
 8005faa:	42ab      	cmp	r3, r5
 8005fac:	f6ff aed5 	blt.w	8005d5a <__gethex+0x1fe>
 8005fb0:	2701      	movs	r7, #1
 8005fb2:	e7c2      	b.n	8005f3a <__gethex+0x3de>
 8005fb4:	f016 061f 	ands.w	r6, r6, #31
 8005fb8:	d0fa      	beq.n	8005fb0 <__gethex+0x454>
 8005fba:	449a      	add	sl, r3
 8005fbc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005fc0:	f000 f9fa 	bl	80063b8 <__hi0bits>
 8005fc4:	f1c6 0620 	rsb	r6, r6, #32
 8005fc8:	42b0      	cmp	r0, r6
 8005fca:	dbe7      	blt.n	8005f9c <__gethex+0x440>
 8005fcc:	e7f0      	b.n	8005fb0 <__gethex+0x454>
 8005fce:	bf00      	nop
 8005fd0:	08007dcc 	.word	0x08007dcc

08005fd4 <L_shift>:
 8005fd4:	f1c2 0208 	rsb	r2, r2, #8
 8005fd8:	0092      	lsls	r2, r2, #2
 8005fda:	b570      	push	{r4, r5, r6, lr}
 8005fdc:	f1c2 0620 	rsb	r6, r2, #32
 8005fe0:	6843      	ldr	r3, [r0, #4]
 8005fe2:	6804      	ldr	r4, [r0, #0]
 8005fe4:	fa03 f506 	lsl.w	r5, r3, r6
 8005fe8:	432c      	orrs	r4, r5
 8005fea:	40d3      	lsrs	r3, r2
 8005fec:	6004      	str	r4, [r0, #0]
 8005fee:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ff2:	4288      	cmp	r0, r1
 8005ff4:	d3f4      	bcc.n	8005fe0 <L_shift+0xc>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}

08005ff8 <__match>:
 8005ff8:	b530      	push	{r4, r5, lr}
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006002:	b914      	cbnz	r4, 800600a <__match+0x12>
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	2001      	movs	r0, #1
 8006008:	bd30      	pop	{r4, r5, pc}
 800600a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800600e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006012:	2d19      	cmp	r5, #25
 8006014:	bf98      	it	ls
 8006016:	3220      	addls	r2, #32
 8006018:	42a2      	cmp	r2, r4
 800601a:	d0f0      	beq.n	8005ffe <__match+0x6>
 800601c:	2000      	movs	r0, #0
 800601e:	e7f3      	b.n	8006008 <__match+0x10>

08006020 <__hexnan>:
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	2500      	movs	r5, #0
 8006026:	680b      	ldr	r3, [r1, #0]
 8006028:	4682      	mov	sl, r0
 800602a:	115e      	asrs	r6, r3, #5
 800602c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006030:	f013 031f 	ands.w	r3, r3, #31
 8006034:	bf18      	it	ne
 8006036:	3604      	addne	r6, #4
 8006038:	1f37      	subs	r7, r6, #4
 800603a:	4690      	mov	r8, r2
 800603c:	46b9      	mov	r9, r7
 800603e:	463c      	mov	r4, r7
 8006040:	46ab      	mov	fp, r5
 8006042:	b087      	sub	sp, #28
 8006044:	6801      	ldr	r1, [r0, #0]
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f846 5c04 	str.w	r5, [r6, #-4]
 800604c:	9502      	str	r5, [sp, #8]
 800604e:	784a      	ldrb	r2, [r1, #1]
 8006050:	1c4b      	adds	r3, r1, #1
 8006052:	9303      	str	r3, [sp, #12]
 8006054:	b342      	cbz	r2, 80060a8 <__hexnan+0x88>
 8006056:	4610      	mov	r0, r2
 8006058:	9105      	str	r1, [sp, #20]
 800605a:	9204      	str	r2, [sp, #16]
 800605c:	f7ff fd69 	bl	8005b32 <__hexdig_fun>
 8006060:	2800      	cmp	r0, #0
 8006062:	d14f      	bne.n	8006104 <__hexnan+0xe4>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	9905      	ldr	r1, [sp, #20]
 8006068:	2a20      	cmp	r2, #32
 800606a:	d818      	bhi.n	800609e <__hexnan+0x7e>
 800606c:	9b02      	ldr	r3, [sp, #8]
 800606e:	459b      	cmp	fp, r3
 8006070:	dd13      	ble.n	800609a <__hexnan+0x7a>
 8006072:	454c      	cmp	r4, r9
 8006074:	d206      	bcs.n	8006084 <__hexnan+0x64>
 8006076:	2d07      	cmp	r5, #7
 8006078:	dc04      	bgt.n	8006084 <__hexnan+0x64>
 800607a:	462a      	mov	r2, r5
 800607c:	4649      	mov	r1, r9
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff ffa8 	bl	8005fd4 <L_shift>
 8006084:	4544      	cmp	r4, r8
 8006086:	d950      	bls.n	800612a <__hexnan+0x10a>
 8006088:	2300      	movs	r3, #0
 800608a:	f1a4 0904 	sub.w	r9, r4, #4
 800608e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006092:	461d      	mov	r5, r3
 8006094:	464c      	mov	r4, r9
 8006096:	f8cd b008 	str.w	fp, [sp, #8]
 800609a:	9903      	ldr	r1, [sp, #12]
 800609c:	e7d7      	b.n	800604e <__hexnan+0x2e>
 800609e:	2a29      	cmp	r2, #41	; 0x29
 80060a0:	d156      	bne.n	8006150 <__hexnan+0x130>
 80060a2:	3102      	adds	r1, #2
 80060a4:	f8ca 1000 	str.w	r1, [sl]
 80060a8:	f1bb 0f00 	cmp.w	fp, #0
 80060ac:	d050      	beq.n	8006150 <__hexnan+0x130>
 80060ae:	454c      	cmp	r4, r9
 80060b0:	d206      	bcs.n	80060c0 <__hexnan+0xa0>
 80060b2:	2d07      	cmp	r5, #7
 80060b4:	dc04      	bgt.n	80060c0 <__hexnan+0xa0>
 80060b6:	462a      	mov	r2, r5
 80060b8:	4649      	mov	r1, r9
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff ff8a 	bl	8005fd4 <L_shift>
 80060c0:	4544      	cmp	r4, r8
 80060c2:	d934      	bls.n	800612e <__hexnan+0x10e>
 80060c4:	4623      	mov	r3, r4
 80060c6:	f1a8 0204 	sub.w	r2, r8, #4
 80060ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80060ce:	429f      	cmp	r7, r3
 80060d0:	f842 1f04 	str.w	r1, [r2, #4]!
 80060d4:	d2f9      	bcs.n	80060ca <__hexnan+0xaa>
 80060d6:	1b3b      	subs	r3, r7, r4
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	3304      	adds	r3, #4
 80060de:	3401      	adds	r4, #1
 80060e0:	3e03      	subs	r6, #3
 80060e2:	42b4      	cmp	r4, r6
 80060e4:	bf88      	it	hi
 80060e6:	2304      	movhi	r3, #4
 80060e8:	2200      	movs	r2, #0
 80060ea:	4443      	add	r3, r8
 80060ec:	f843 2b04 	str.w	r2, [r3], #4
 80060f0:	429f      	cmp	r7, r3
 80060f2:	d2fb      	bcs.n	80060ec <__hexnan+0xcc>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	b91b      	cbnz	r3, 8006100 <__hexnan+0xe0>
 80060f8:	4547      	cmp	r7, r8
 80060fa:	d127      	bne.n	800614c <__hexnan+0x12c>
 80060fc:	2301      	movs	r3, #1
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	2005      	movs	r0, #5
 8006102:	e026      	b.n	8006152 <__hexnan+0x132>
 8006104:	3501      	adds	r5, #1
 8006106:	2d08      	cmp	r5, #8
 8006108:	f10b 0b01 	add.w	fp, fp, #1
 800610c:	dd06      	ble.n	800611c <__hexnan+0xfc>
 800610e:	4544      	cmp	r4, r8
 8006110:	d9c3      	bls.n	800609a <__hexnan+0x7a>
 8006112:	2300      	movs	r3, #0
 8006114:	2501      	movs	r5, #1
 8006116:	f844 3c04 	str.w	r3, [r4, #-4]
 800611a:	3c04      	subs	r4, #4
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	f000 000f 	and.w	r0, r0, #15
 8006122:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	e7b7      	b.n	800609a <__hexnan+0x7a>
 800612a:	2508      	movs	r5, #8
 800612c:	e7b5      	b.n	800609a <__hexnan+0x7a>
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0df      	beq.n	80060f4 <__hexnan+0xd4>
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	f1c3 0320 	rsb	r3, r3, #32
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
 8006140:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006144:	401a      	ands	r2, r3
 8006146:	f846 2c04 	str.w	r2, [r6, #-4]
 800614a:	e7d3      	b.n	80060f4 <__hexnan+0xd4>
 800614c:	3f04      	subs	r7, #4
 800614e:	e7d1      	b.n	80060f4 <__hexnan+0xd4>
 8006150:	2004      	movs	r0, #4
 8006152:	b007      	add	sp, #28
 8006154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006158 <_localeconv_r>:
 8006158:	4800      	ldr	r0, [pc, #0]	; (800615c <_localeconv_r+0x4>)
 800615a:	4770      	bx	lr
 800615c:	20000164 	.word	0x20000164

08006160 <malloc>:
 8006160:	4b02      	ldr	r3, [pc, #8]	; (800616c <malloc+0xc>)
 8006162:	4601      	mov	r1, r0
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f000 bd43 	b.w	8006bf0 <_malloc_r>
 800616a:	bf00      	nop
 800616c:	2000000c 	.word	0x2000000c

08006170 <__ascii_mbtowc>:
 8006170:	b082      	sub	sp, #8
 8006172:	b901      	cbnz	r1, 8006176 <__ascii_mbtowc+0x6>
 8006174:	a901      	add	r1, sp, #4
 8006176:	b142      	cbz	r2, 800618a <__ascii_mbtowc+0x1a>
 8006178:	b14b      	cbz	r3, 800618e <__ascii_mbtowc+0x1e>
 800617a:	7813      	ldrb	r3, [r2, #0]
 800617c:	600b      	str	r3, [r1, #0]
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	1e10      	subs	r0, r2, #0
 8006182:	bf18      	it	ne
 8006184:	2001      	movne	r0, #1
 8006186:	b002      	add	sp, #8
 8006188:	4770      	bx	lr
 800618a:	4610      	mov	r0, r2
 800618c:	e7fb      	b.n	8006186 <__ascii_mbtowc+0x16>
 800618e:	f06f 0001 	mvn.w	r0, #1
 8006192:	e7f8      	b.n	8006186 <__ascii_mbtowc+0x16>

08006194 <memchr>:
 8006194:	4603      	mov	r3, r0
 8006196:	b510      	push	{r4, lr}
 8006198:	b2c9      	uxtb	r1, r1
 800619a:	4402      	add	r2, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	d101      	bne.n	80061a6 <memchr+0x12>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e003      	b.n	80061ae <memchr+0x1a>
 80061a6:	7804      	ldrb	r4, [r0, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	428c      	cmp	r4, r1
 80061ac:	d1f6      	bne.n	800619c <memchr+0x8>
 80061ae:	bd10      	pop	{r4, pc}

080061b0 <memcpy>:
 80061b0:	440a      	add	r2, r1
 80061b2:	4291      	cmp	r1, r2
 80061b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b8:	d100      	bne.n	80061bc <memcpy+0xc>
 80061ba:	4770      	bx	lr
 80061bc:	b510      	push	{r4, lr}
 80061be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c2:	4291      	cmp	r1, r2
 80061c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c8:	d1f9      	bne.n	80061be <memcpy+0xe>
 80061ca:	bd10      	pop	{r4, pc}

080061cc <_Balloc>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	b976      	cbnz	r6, 80061f4 <_Balloc+0x28>
 80061d6:	2010      	movs	r0, #16
 80061d8:	f7ff ffc2 	bl	8006160 <malloc>
 80061dc:	4602      	mov	r2, r0
 80061de:	6260      	str	r0, [r4, #36]	; 0x24
 80061e0:	b920      	cbnz	r0, 80061ec <_Balloc+0x20>
 80061e2:	2166      	movs	r1, #102	; 0x66
 80061e4:	4b17      	ldr	r3, [pc, #92]	; (8006244 <_Balloc+0x78>)
 80061e6:	4818      	ldr	r0, [pc, #96]	; (8006248 <_Balloc+0x7c>)
 80061e8:	f000 feee 	bl	8006fc8 <__assert_func>
 80061ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061f0:	6006      	str	r6, [r0, #0]
 80061f2:	60c6      	str	r6, [r0, #12]
 80061f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061f6:	68f3      	ldr	r3, [r6, #12]
 80061f8:	b183      	cbz	r3, 800621c <_Balloc+0x50>
 80061fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006202:	b9b8      	cbnz	r0, 8006234 <_Balloc+0x68>
 8006204:	2101      	movs	r1, #1
 8006206:	fa01 f605 	lsl.w	r6, r1, r5
 800620a:	1d72      	adds	r2, r6, #5
 800620c:	4620      	mov	r0, r4
 800620e:	0092      	lsls	r2, r2, #2
 8006210:	f000 fc94 	bl	8006b3c <_calloc_r>
 8006214:	b160      	cbz	r0, 8006230 <_Balloc+0x64>
 8006216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800621a:	e00e      	b.n	800623a <_Balloc+0x6e>
 800621c:	2221      	movs	r2, #33	; 0x21
 800621e:	2104      	movs	r1, #4
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fc8b 	bl	8006b3c <_calloc_r>
 8006226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006228:	60f0      	str	r0, [r6, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e4      	bne.n	80061fa <_Balloc+0x2e>
 8006230:	2000      	movs	r0, #0
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	6802      	ldr	r2, [r0, #0]
 8006236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800623a:	2300      	movs	r3, #0
 800623c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006240:	e7f7      	b.n	8006232 <_Balloc+0x66>
 8006242:	bf00      	nop
 8006244:	08007d56 	.word	0x08007d56
 8006248:	08007e5c 	.word	0x08007e5c

0800624c <_Bfree>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006250:	4605      	mov	r5, r0
 8006252:	460c      	mov	r4, r1
 8006254:	b976      	cbnz	r6, 8006274 <_Bfree+0x28>
 8006256:	2010      	movs	r0, #16
 8006258:	f7ff ff82 	bl	8006160 <malloc>
 800625c:	4602      	mov	r2, r0
 800625e:	6268      	str	r0, [r5, #36]	; 0x24
 8006260:	b920      	cbnz	r0, 800626c <_Bfree+0x20>
 8006262:	218a      	movs	r1, #138	; 0x8a
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <_Bfree+0x3c>)
 8006266:	4809      	ldr	r0, [pc, #36]	; (800628c <_Bfree+0x40>)
 8006268:	f000 feae 	bl	8006fc8 <__assert_func>
 800626c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006270:	6006      	str	r6, [r0, #0]
 8006272:	60c6      	str	r6, [r0, #12]
 8006274:	b13c      	cbz	r4, 8006286 <_Bfree+0x3a>
 8006276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006278:	6862      	ldr	r2, [r4, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006280:	6021      	str	r1, [r4, #0]
 8006282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	08007d56 	.word	0x08007d56
 800628c:	08007e5c 	.word	0x08007e5c

08006290 <__multadd>:
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	4698      	mov	r8, r3
 8006296:	460c      	mov	r4, r1
 8006298:	2300      	movs	r3, #0
 800629a:	690e      	ldr	r6, [r1, #16]
 800629c:	4607      	mov	r7, r0
 800629e:	f101 0014 	add.w	r0, r1, #20
 80062a2:	6805      	ldr	r5, [r0, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	b2a9      	uxth	r1, r5
 80062a8:	fb02 8101 	mla	r1, r2, r1, r8
 80062ac:	0c2d      	lsrs	r5, r5, #16
 80062ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80062b2:	fb02 c505 	mla	r5, r2, r5, ip
 80062b6:	b289      	uxth	r1, r1
 80062b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80062bc:	429e      	cmp	r6, r3
 80062be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80062c2:	f840 1b04 	str.w	r1, [r0], #4
 80062c6:	dcec      	bgt.n	80062a2 <__multadd+0x12>
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	d022      	beq.n	8006314 <__multadd+0x84>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	42b3      	cmp	r3, r6
 80062d2:	dc19      	bgt.n	8006308 <__multadd+0x78>
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4638      	mov	r0, r7
 80062d8:	3101      	adds	r1, #1
 80062da:	f7ff ff77 	bl	80061cc <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b928      	cbnz	r0, 80062ee <__multadd+0x5e>
 80062e2:	4602      	mov	r2, r0
 80062e4:	21b5      	movs	r1, #181	; 0xb5
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <__multadd+0x8c>)
 80062e8:	480d      	ldr	r0, [pc, #52]	; (8006320 <__multadd+0x90>)
 80062ea:	f000 fe6d 	bl	8006fc8 <__assert_func>
 80062ee:	6922      	ldr	r2, [r4, #16]
 80062f0:	f104 010c 	add.w	r1, r4, #12
 80062f4:	3202      	adds	r2, #2
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	300c      	adds	r0, #12
 80062fa:	f7ff ff59 	bl	80061b0 <memcpy>
 80062fe:	4621      	mov	r1, r4
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ffa3 	bl	800624c <_Bfree>
 8006306:	462c      	mov	r4, r5
 8006308:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800630c:	3601      	adds	r6, #1
 800630e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006312:	6126      	str	r6, [r4, #16]
 8006314:	4620      	mov	r0, r4
 8006316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800631a:	bf00      	nop
 800631c:	08007dcc 	.word	0x08007dcc
 8006320:	08007e5c 	.word	0x08007e5c

08006324 <__s2b>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4615      	mov	r5, r2
 800632a:	2209      	movs	r2, #9
 800632c:	461f      	mov	r7, r3
 800632e:	3308      	adds	r3, #8
 8006330:	460c      	mov	r4, r1
 8006332:	fb93 f3f2 	sdiv	r3, r3, r2
 8006336:	4606      	mov	r6, r0
 8006338:	2201      	movs	r2, #1
 800633a:	2100      	movs	r1, #0
 800633c:	429a      	cmp	r2, r3
 800633e:	db09      	blt.n	8006354 <__s2b+0x30>
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff ff43 	bl	80061cc <_Balloc>
 8006346:	b940      	cbnz	r0, 800635a <__s2b+0x36>
 8006348:	4602      	mov	r2, r0
 800634a:	21ce      	movs	r1, #206	; 0xce
 800634c:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <__s2b+0x8c>)
 800634e:	4819      	ldr	r0, [pc, #100]	; (80063b4 <__s2b+0x90>)
 8006350:	f000 fe3a 	bl	8006fc8 <__assert_func>
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	3101      	adds	r1, #1
 8006358:	e7f0      	b.n	800633c <__s2b+0x18>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	2d09      	cmp	r5, #9
 800635e:	6143      	str	r3, [r0, #20]
 8006360:	f04f 0301 	mov.w	r3, #1
 8006364:	6103      	str	r3, [r0, #16]
 8006366:	dd16      	ble.n	8006396 <__s2b+0x72>
 8006368:	f104 0909 	add.w	r9, r4, #9
 800636c:	46c8      	mov	r8, r9
 800636e:	442c      	add	r4, r5
 8006370:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006374:	4601      	mov	r1, r0
 8006376:	220a      	movs	r2, #10
 8006378:	4630      	mov	r0, r6
 800637a:	3b30      	subs	r3, #48	; 0x30
 800637c:	f7ff ff88 	bl	8006290 <__multadd>
 8006380:	45a0      	cmp	r8, r4
 8006382:	d1f5      	bne.n	8006370 <__s2b+0x4c>
 8006384:	f1a5 0408 	sub.w	r4, r5, #8
 8006388:	444c      	add	r4, r9
 800638a:	1b2d      	subs	r5, r5, r4
 800638c:	1963      	adds	r3, r4, r5
 800638e:	42bb      	cmp	r3, r7
 8006390:	db04      	blt.n	800639c <__s2b+0x78>
 8006392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006396:	2509      	movs	r5, #9
 8006398:	340a      	adds	r4, #10
 800639a:	e7f6      	b.n	800638a <__s2b+0x66>
 800639c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063a0:	4601      	mov	r1, r0
 80063a2:	220a      	movs	r2, #10
 80063a4:	4630      	mov	r0, r6
 80063a6:	3b30      	subs	r3, #48	; 0x30
 80063a8:	f7ff ff72 	bl	8006290 <__multadd>
 80063ac:	e7ee      	b.n	800638c <__s2b+0x68>
 80063ae:	bf00      	nop
 80063b0:	08007dcc 	.word	0x08007dcc
 80063b4:	08007e5c 	.word	0x08007e5c

080063b8 <__hi0bits>:
 80063b8:	0c02      	lsrs	r2, r0, #16
 80063ba:	0412      	lsls	r2, r2, #16
 80063bc:	4603      	mov	r3, r0
 80063be:	b9ca      	cbnz	r2, 80063f4 <__hi0bits+0x3c>
 80063c0:	0403      	lsls	r3, r0, #16
 80063c2:	2010      	movs	r0, #16
 80063c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063c8:	bf04      	itt	eq
 80063ca:	021b      	lsleq	r3, r3, #8
 80063cc:	3008      	addeq	r0, #8
 80063ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063d2:	bf04      	itt	eq
 80063d4:	011b      	lsleq	r3, r3, #4
 80063d6:	3004      	addeq	r0, #4
 80063d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063dc:	bf04      	itt	eq
 80063de:	009b      	lsleq	r3, r3, #2
 80063e0:	3002      	addeq	r0, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	db05      	blt.n	80063f2 <__hi0bits+0x3a>
 80063e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80063ea:	f100 0001 	add.w	r0, r0, #1
 80063ee:	bf08      	it	eq
 80063f0:	2020      	moveq	r0, #32
 80063f2:	4770      	bx	lr
 80063f4:	2000      	movs	r0, #0
 80063f6:	e7e5      	b.n	80063c4 <__hi0bits+0xc>

080063f8 <__lo0bits>:
 80063f8:	6803      	ldr	r3, [r0, #0]
 80063fa:	4602      	mov	r2, r0
 80063fc:	f013 0007 	ands.w	r0, r3, #7
 8006400:	d00b      	beq.n	800641a <__lo0bits+0x22>
 8006402:	07d9      	lsls	r1, r3, #31
 8006404:	d422      	bmi.n	800644c <__lo0bits+0x54>
 8006406:	0798      	lsls	r0, r3, #30
 8006408:	bf49      	itett	mi
 800640a:	085b      	lsrmi	r3, r3, #1
 800640c:	089b      	lsrpl	r3, r3, #2
 800640e:	2001      	movmi	r0, #1
 8006410:	6013      	strmi	r3, [r2, #0]
 8006412:	bf5c      	itt	pl
 8006414:	2002      	movpl	r0, #2
 8006416:	6013      	strpl	r3, [r2, #0]
 8006418:	4770      	bx	lr
 800641a:	b299      	uxth	r1, r3
 800641c:	b909      	cbnz	r1, 8006422 <__lo0bits+0x2a>
 800641e:	2010      	movs	r0, #16
 8006420:	0c1b      	lsrs	r3, r3, #16
 8006422:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006426:	bf04      	itt	eq
 8006428:	0a1b      	lsreq	r3, r3, #8
 800642a:	3008      	addeq	r0, #8
 800642c:	0719      	lsls	r1, r3, #28
 800642e:	bf04      	itt	eq
 8006430:	091b      	lsreq	r3, r3, #4
 8006432:	3004      	addeq	r0, #4
 8006434:	0799      	lsls	r1, r3, #30
 8006436:	bf04      	itt	eq
 8006438:	089b      	lsreq	r3, r3, #2
 800643a:	3002      	addeq	r0, #2
 800643c:	07d9      	lsls	r1, r3, #31
 800643e:	d403      	bmi.n	8006448 <__lo0bits+0x50>
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	f100 0001 	add.w	r0, r0, #1
 8006446:	d003      	beq.n	8006450 <__lo0bits+0x58>
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4770      	bx	lr
 800644c:	2000      	movs	r0, #0
 800644e:	4770      	bx	lr
 8006450:	2020      	movs	r0, #32
 8006452:	4770      	bx	lr

08006454 <__i2b>:
 8006454:	b510      	push	{r4, lr}
 8006456:	460c      	mov	r4, r1
 8006458:	2101      	movs	r1, #1
 800645a:	f7ff feb7 	bl	80061cc <_Balloc>
 800645e:	4602      	mov	r2, r0
 8006460:	b928      	cbnz	r0, 800646e <__i2b+0x1a>
 8006462:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <__i2b+0x24>)
 8006468:	4804      	ldr	r0, [pc, #16]	; (800647c <__i2b+0x28>)
 800646a:	f000 fdad 	bl	8006fc8 <__assert_func>
 800646e:	2301      	movs	r3, #1
 8006470:	6144      	str	r4, [r0, #20]
 8006472:	6103      	str	r3, [r0, #16]
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	08007dcc 	.word	0x08007dcc
 800647c:	08007e5c 	.word	0x08007e5c

08006480 <__multiply>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	4614      	mov	r4, r2
 8006486:	690a      	ldr	r2, [r1, #16]
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	460d      	mov	r5, r1
 800648c:	429a      	cmp	r2, r3
 800648e:	bfbe      	ittt	lt
 8006490:	460b      	movlt	r3, r1
 8006492:	4625      	movlt	r5, r4
 8006494:	461c      	movlt	r4, r3
 8006496:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800649a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800649e:	68ab      	ldr	r3, [r5, #8]
 80064a0:	6869      	ldr	r1, [r5, #4]
 80064a2:	eb0a 0709 	add.w	r7, sl, r9
 80064a6:	42bb      	cmp	r3, r7
 80064a8:	b085      	sub	sp, #20
 80064aa:	bfb8      	it	lt
 80064ac:	3101      	addlt	r1, #1
 80064ae:	f7ff fe8d 	bl	80061cc <_Balloc>
 80064b2:	b930      	cbnz	r0, 80064c2 <__multiply+0x42>
 80064b4:	4602      	mov	r2, r0
 80064b6:	f240 115d 	movw	r1, #349	; 0x15d
 80064ba:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <__multiply+0x140>)
 80064bc:	4841      	ldr	r0, [pc, #260]	; (80065c4 <__multiply+0x144>)
 80064be:	f000 fd83 	bl	8006fc8 <__assert_func>
 80064c2:	f100 0614 	add.w	r6, r0, #20
 80064c6:	4633      	mov	r3, r6
 80064c8:	2200      	movs	r2, #0
 80064ca:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80064ce:	4543      	cmp	r3, r8
 80064d0:	d31e      	bcc.n	8006510 <__multiply+0x90>
 80064d2:	f105 0c14 	add.w	ip, r5, #20
 80064d6:	f104 0314 	add.w	r3, r4, #20
 80064da:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80064de:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80064e2:	9202      	str	r2, [sp, #8]
 80064e4:	ebac 0205 	sub.w	r2, ip, r5
 80064e8:	3a15      	subs	r2, #21
 80064ea:	f022 0203 	bic.w	r2, r2, #3
 80064ee:	3204      	adds	r2, #4
 80064f0:	f105 0115 	add.w	r1, r5, #21
 80064f4:	458c      	cmp	ip, r1
 80064f6:	bf38      	it	cc
 80064f8:	2204      	movcc	r2, #4
 80064fa:	9201      	str	r2, [sp, #4]
 80064fc:	9a02      	ldr	r2, [sp, #8]
 80064fe:	9303      	str	r3, [sp, #12]
 8006500:	429a      	cmp	r2, r3
 8006502:	d808      	bhi.n	8006516 <__multiply+0x96>
 8006504:	2f00      	cmp	r7, #0
 8006506:	dc55      	bgt.n	80065b4 <__multiply+0x134>
 8006508:	6107      	str	r7, [r0, #16]
 800650a:	b005      	add	sp, #20
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	f843 2b04 	str.w	r2, [r3], #4
 8006514:	e7db      	b.n	80064ce <__multiply+0x4e>
 8006516:	f8b3 a000 	ldrh.w	sl, [r3]
 800651a:	f1ba 0f00 	cmp.w	sl, #0
 800651e:	d020      	beq.n	8006562 <__multiply+0xe2>
 8006520:	46b1      	mov	r9, r6
 8006522:	2200      	movs	r2, #0
 8006524:	f105 0e14 	add.w	lr, r5, #20
 8006528:	f85e 4b04 	ldr.w	r4, [lr], #4
 800652c:	f8d9 b000 	ldr.w	fp, [r9]
 8006530:	b2a1      	uxth	r1, r4
 8006532:	fa1f fb8b 	uxth.w	fp, fp
 8006536:	fb0a b101 	mla	r1, sl, r1, fp
 800653a:	4411      	add	r1, r2
 800653c:	f8d9 2000 	ldr.w	r2, [r9]
 8006540:	0c24      	lsrs	r4, r4, #16
 8006542:	0c12      	lsrs	r2, r2, #16
 8006544:	fb0a 2404 	mla	r4, sl, r4, r2
 8006548:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800654c:	b289      	uxth	r1, r1
 800654e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006552:	45f4      	cmp	ip, lr
 8006554:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006558:	f849 1b04 	str.w	r1, [r9], #4
 800655c:	d8e4      	bhi.n	8006528 <__multiply+0xa8>
 800655e:	9901      	ldr	r1, [sp, #4]
 8006560:	5072      	str	r2, [r6, r1]
 8006562:	9a03      	ldr	r2, [sp, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	d01f      	beq.n	80065b0 <__multiply+0x130>
 8006570:	46b6      	mov	lr, r6
 8006572:	f04f 0a00 	mov.w	sl, #0
 8006576:	6834      	ldr	r4, [r6, #0]
 8006578:	f105 0114 	add.w	r1, r5, #20
 800657c:	880a      	ldrh	r2, [r1, #0]
 800657e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006582:	b2a4      	uxth	r4, r4
 8006584:	fb09 b202 	mla	r2, r9, r2, fp
 8006588:	4492      	add	sl, r2
 800658a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800658e:	f84e 4b04 	str.w	r4, [lr], #4
 8006592:	f851 4b04 	ldr.w	r4, [r1], #4
 8006596:	f8be 2000 	ldrh.w	r2, [lr]
 800659a:	0c24      	lsrs	r4, r4, #16
 800659c:	fb09 2404 	mla	r4, r9, r4, r2
 80065a0:	458c      	cmp	ip, r1
 80065a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80065a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065aa:	d8e7      	bhi.n	800657c <__multiply+0xfc>
 80065ac:	9a01      	ldr	r2, [sp, #4]
 80065ae:	50b4      	str	r4, [r6, r2]
 80065b0:	3604      	adds	r6, #4
 80065b2:	e7a3      	b.n	80064fc <__multiply+0x7c>
 80065b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1a5      	bne.n	8006508 <__multiply+0x88>
 80065bc:	3f01      	subs	r7, #1
 80065be:	e7a1      	b.n	8006504 <__multiply+0x84>
 80065c0:	08007dcc 	.word	0x08007dcc
 80065c4:	08007e5c 	.word	0x08007e5c

080065c8 <__pow5mult>:
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	4615      	mov	r5, r2
 80065ce:	f012 0203 	ands.w	r2, r2, #3
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	d007      	beq.n	80065e8 <__pow5mult+0x20>
 80065d8:	4c25      	ldr	r4, [pc, #148]	; (8006670 <__pow5mult+0xa8>)
 80065da:	3a01      	subs	r2, #1
 80065dc:	2300      	movs	r3, #0
 80065de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065e2:	f7ff fe55 	bl	8006290 <__multadd>
 80065e6:	4607      	mov	r7, r0
 80065e8:	10ad      	asrs	r5, r5, #2
 80065ea:	d03d      	beq.n	8006668 <__pow5mult+0xa0>
 80065ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065ee:	b97c      	cbnz	r4, 8006610 <__pow5mult+0x48>
 80065f0:	2010      	movs	r0, #16
 80065f2:	f7ff fdb5 	bl	8006160 <malloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6270      	str	r0, [r6, #36]	; 0x24
 80065fa:	b928      	cbnz	r0, 8006608 <__pow5mult+0x40>
 80065fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <__pow5mult+0xac>)
 8006602:	481d      	ldr	r0, [pc, #116]	; (8006678 <__pow5mult+0xb0>)
 8006604:	f000 fce0 	bl	8006fc8 <__assert_func>
 8006608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800660c:	6004      	str	r4, [r0, #0]
 800660e:	60c4      	str	r4, [r0, #12]
 8006610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006618:	b94c      	cbnz	r4, 800662e <__pow5mult+0x66>
 800661a:	f240 2171 	movw	r1, #625	; 0x271
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ff18 	bl	8006454 <__i2b>
 8006624:	2300      	movs	r3, #0
 8006626:	4604      	mov	r4, r0
 8006628:	f8c8 0008 	str.w	r0, [r8, #8]
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	f04f 0900 	mov.w	r9, #0
 8006632:	07eb      	lsls	r3, r5, #31
 8006634:	d50a      	bpl.n	800664c <__pow5mult+0x84>
 8006636:	4639      	mov	r1, r7
 8006638:	4622      	mov	r2, r4
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ff20 	bl	8006480 <__multiply>
 8006640:	4680      	mov	r8, r0
 8006642:	4639      	mov	r1, r7
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff fe01 	bl	800624c <_Bfree>
 800664a:	4647      	mov	r7, r8
 800664c:	106d      	asrs	r5, r5, #1
 800664e:	d00b      	beq.n	8006668 <__pow5mult+0xa0>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	b938      	cbnz	r0, 8006664 <__pow5mult+0x9c>
 8006654:	4622      	mov	r2, r4
 8006656:	4621      	mov	r1, r4
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff ff11 	bl	8006480 <__multiply>
 800665e:	6020      	str	r0, [r4, #0]
 8006660:	f8c0 9000 	str.w	r9, [r0]
 8006664:	4604      	mov	r4, r0
 8006666:	e7e4      	b.n	8006632 <__pow5mult+0x6a>
 8006668:	4638      	mov	r0, r7
 800666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666e:	bf00      	nop
 8006670:	08007fb0 	.word	0x08007fb0
 8006674:	08007d56 	.word	0x08007d56
 8006678:	08007e5c 	.word	0x08007e5c

0800667c <__lshift>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	4607      	mov	r7, r0
 8006684:	4691      	mov	r9, r2
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6849      	ldr	r1, [r1, #4]
 800668a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006694:	f108 0601 	add.w	r6, r8, #1
 8006698:	42b3      	cmp	r3, r6
 800669a:	db0b      	blt.n	80066b4 <__lshift+0x38>
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff fd95 	bl	80061cc <_Balloc>
 80066a2:	4605      	mov	r5, r0
 80066a4:	b948      	cbnz	r0, 80066ba <__lshift+0x3e>
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066ac:	4b27      	ldr	r3, [pc, #156]	; (800674c <__lshift+0xd0>)
 80066ae:	4828      	ldr	r0, [pc, #160]	; (8006750 <__lshift+0xd4>)
 80066b0:	f000 fc8a 	bl	8006fc8 <__assert_func>
 80066b4:	3101      	adds	r1, #1
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	e7ee      	b.n	8006698 <__lshift+0x1c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	f100 0114 	add.w	r1, r0, #20
 80066c0:	f100 0210 	add.w	r2, r0, #16
 80066c4:	4618      	mov	r0, r3
 80066c6:	4553      	cmp	r3, sl
 80066c8:	db33      	blt.n	8006732 <__lshift+0xb6>
 80066ca:	6920      	ldr	r0, [r4, #16]
 80066cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066d0:	f104 0314 	add.w	r3, r4, #20
 80066d4:	f019 091f 	ands.w	r9, r9, #31
 80066d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066e0:	d02b      	beq.n	800673a <__lshift+0xbe>
 80066e2:	468a      	mov	sl, r1
 80066e4:	2200      	movs	r2, #0
 80066e6:	f1c9 0e20 	rsb	lr, r9, #32
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	fa00 f009 	lsl.w	r0, r0, r9
 80066f0:	4302      	orrs	r2, r0
 80066f2:	f84a 2b04 	str.w	r2, [sl], #4
 80066f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fa:	459c      	cmp	ip, r3
 80066fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006700:	d8f3      	bhi.n	80066ea <__lshift+0x6e>
 8006702:	ebac 0304 	sub.w	r3, ip, r4
 8006706:	3b15      	subs	r3, #21
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	3304      	adds	r3, #4
 800670e:	f104 0015 	add.w	r0, r4, #21
 8006712:	4584      	cmp	ip, r0
 8006714:	bf38      	it	cc
 8006716:	2304      	movcc	r3, #4
 8006718:	50ca      	str	r2, [r1, r3]
 800671a:	b10a      	cbz	r2, 8006720 <__lshift+0xa4>
 800671c:	f108 0602 	add.w	r6, r8, #2
 8006720:	3e01      	subs	r6, #1
 8006722:	4638      	mov	r0, r7
 8006724:	4621      	mov	r1, r4
 8006726:	612e      	str	r6, [r5, #16]
 8006728:	f7ff fd90 	bl	800624c <_Bfree>
 800672c:	4628      	mov	r0, r5
 800672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006732:	f842 0f04 	str.w	r0, [r2, #4]!
 8006736:	3301      	adds	r3, #1
 8006738:	e7c5      	b.n	80066c6 <__lshift+0x4a>
 800673a:	3904      	subs	r1, #4
 800673c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006740:	459c      	cmp	ip, r3
 8006742:	f841 2f04 	str.w	r2, [r1, #4]!
 8006746:	d8f9      	bhi.n	800673c <__lshift+0xc0>
 8006748:	e7ea      	b.n	8006720 <__lshift+0xa4>
 800674a:	bf00      	nop
 800674c:	08007dcc 	.word	0x08007dcc
 8006750:	08007e5c 	.word	0x08007e5c

08006754 <__mcmp>:
 8006754:	4603      	mov	r3, r0
 8006756:	690a      	ldr	r2, [r1, #16]
 8006758:	6900      	ldr	r0, [r0, #16]
 800675a:	b530      	push	{r4, r5, lr}
 800675c:	1a80      	subs	r0, r0, r2
 800675e:	d10d      	bne.n	800677c <__mcmp+0x28>
 8006760:	3314      	adds	r3, #20
 8006762:	3114      	adds	r1, #20
 8006764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800676c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006774:	4295      	cmp	r5, r2
 8006776:	d002      	beq.n	800677e <__mcmp+0x2a>
 8006778:	d304      	bcc.n	8006784 <__mcmp+0x30>
 800677a:	2001      	movs	r0, #1
 800677c:	bd30      	pop	{r4, r5, pc}
 800677e:	42a3      	cmp	r3, r4
 8006780:	d3f4      	bcc.n	800676c <__mcmp+0x18>
 8006782:	e7fb      	b.n	800677c <__mcmp+0x28>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e7f8      	b.n	800677c <__mcmp+0x28>
	...

0800678c <__mdiff>:
 800678c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	4606      	mov	r6, r0
 8006794:	4611      	mov	r1, r2
 8006796:	4620      	mov	r0, r4
 8006798:	4692      	mov	sl, r2
 800679a:	f7ff ffdb 	bl	8006754 <__mcmp>
 800679e:	1e05      	subs	r5, r0, #0
 80067a0:	d111      	bne.n	80067c6 <__mdiff+0x3a>
 80067a2:	4629      	mov	r1, r5
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff fd11 	bl	80061cc <_Balloc>
 80067aa:	4602      	mov	r2, r0
 80067ac:	b928      	cbnz	r0, 80067ba <__mdiff+0x2e>
 80067ae:	f240 2132 	movw	r1, #562	; 0x232
 80067b2:	4b3c      	ldr	r3, [pc, #240]	; (80068a4 <__mdiff+0x118>)
 80067b4:	483c      	ldr	r0, [pc, #240]	; (80068a8 <__mdiff+0x11c>)
 80067b6:	f000 fc07 	bl	8006fc8 <__assert_func>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067c0:	4610      	mov	r0, r2
 80067c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	bfa4      	itt	ge
 80067c8:	4653      	movge	r3, sl
 80067ca:	46a2      	movge	sl, r4
 80067cc:	4630      	mov	r0, r6
 80067ce:	f8da 1004 	ldr.w	r1, [sl, #4]
 80067d2:	bfa6      	itte	ge
 80067d4:	461c      	movge	r4, r3
 80067d6:	2500      	movge	r5, #0
 80067d8:	2501      	movlt	r5, #1
 80067da:	f7ff fcf7 	bl	80061cc <_Balloc>
 80067de:	4602      	mov	r2, r0
 80067e0:	b918      	cbnz	r0, 80067ea <__mdiff+0x5e>
 80067e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <__mdiff+0x118>)
 80067e8:	e7e4      	b.n	80067b4 <__mdiff+0x28>
 80067ea:	f100 0814 	add.w	r8, r0, #20
 80067ee:	f8da 7010 	ldr.w	r7, [sl, #16]
 80067f2:	60c5      	str	r5, [r0, #12]
 80067f4:	f04f 0c00 	mov.w	ip, #0
 80067f8:	f10a 0514 	add.w	r5, sl, #20
 80067fc:	f10a 0010 	add.w	r0, sl, #16
 8006800:	46c2      	mov	sl, r8
 8006802:	6926      	ldr	r6, [r4, #16]
 8006804:	f104 0914 	add.w	r9, r4, #20
 8006808:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800680c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006810:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006814:	f859 3b04 	ldr.w	r3, [r9], #4
 8006818:	fa1f f18b 	uxth.w	r1, fp
 800681c:	4461      	add	r1, ip
 800681e:	fa1f fc83 	uxth.w	ip, r3
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	eba1 010c 	sub.w	r1, r1, ip
 8006828:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800682c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006830:	b289      	uxth	r1, r1
 8006832:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006836:	454e      	cmp	r6, r9
 8006838:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800683c:	f84a 3b04 	str.w	r3, [sl], #4
 8006840:	d8e6      	bhi.n	8006810 <__mdiff+0x84>
 8006842:	1b33      	subs	r3, r6, r4
 8006844:	3b15      	subs	r3, #21
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	3415      	adds	r4, #21
 800684c:	3304      	adds	r3, #4
 800684e:	42a6      	cmp	r6, r4
 8006850:	bf38      	it	cc
 8006852:	2304      	movcc	r3, #4
 8006854:	441d      	add	r5, r3
 8006856:	4443      	add	r3, r8
 8006858:	461e      	mov	r6, r3
 800685a:	462c      	mov	r4, r5
 800685c:	4574      	cmp	r4, lr
 800685e:	d30e      	bcc.n	800687e <__mdiff+0xf2>
 8006860:	f10e 0103 	add.w	r1, lr, #3
 8006864:	1b49      	subs	r1, r1, r5
 8006866:	f021 0103 	bic.w	r1, r1, #3
 800686a:	3d03      	subs	r5, #3
 800686c:	45ae      	cmp	lr, r5
 800686e:	bf38      	it	cc
 8006870:	2100      	movcc	r1, #0
 8006872:	4419      	add	r1, r3
 8006874:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006878:	b18b      	cbz	r3, 800689e <__mdiff+0x112>
 800687a:	6117      	str	r7, [r2, #16]
 800687c:	e7a0      	b.n	80067c0 <__mdiff+0x34>
 800687e:	f854 8b04 	ldr.w	r8, [r4], #4
 8006882:	fa1f f188 	uxth.w	r1, r8
 8006886:	4461      	add	r1, ip
 8006888:	1408      	asrs	r0, r1, #16
 800688a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800688e:	b289      	uxth	r1, r1
 8006890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006894:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006898:	f846 1b04 	str.w	r1, [r6], #4
 800689c:	e7de      	b.n	800685c <__mdiff+0xd0>
 800689e:	3f01      	subs	r7, #1
 80068a0:	e7e8      	b.n	8006874 <__mdiff+0xe8>
 80068a2:	bf00      	nop
 80068a4:	08007dcc 	.word	0x08007dcc
 80068a8:	08007e5c 	.word	0x08007e5c

080068ac <__ulp>:
 80068ac:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <__ulp+0x48>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd02      	ble.n	80068be <__ulp+0x12>
 80068b8:	2000      	movs	r0, #0
 80068ba:	4619      	mov	r1, r3
 80068bc:	4770      	bx	lr
 80068be:	425b      	negs	r3, r3
 80068c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80068c4:	f04f 0000 	mov.w	r0, #0
 80068c8:	f04f 0100 	mov.w	r1, #0
 80068cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068d0:	da04      	bge.n	80068dc <__ulp+0x30>
 80068d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068d6:	fa43 f102 	asr.w	r1, r3, r2
 80068da:	4770      	bx	lr
 80068dc:	f1a2 0314 	sub.w	r3, r2, #20
 80068e0:	2b1e      	cmp	r3, #30
 80068e2:	bfd6      	itet	le
 80068e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80068e8:	2301      	movgt	r3, #1
 80068ea:	fa22 f303 	lsrle.w	r3, r2, r3
 80068ee:	4618      	mov	r0, r3
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	7ff00000 	.word	0x7ff00000

080068f8 <__b2d>:
 80068f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068fc:	6907      	ldr	r7, [r0, #16]
 80068fe:	f100 0914 	add.w	r9, r0, #20
 8006902:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006906:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800690a:	f1a7 0804 	sub.w	r8, r7, #4
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff fd52 	bl	80063b8 <__hi0bits>
 8006914:	f1c0 0320 	rsb	r3, r0, #32
 8006918:	280a      	cmp	r0, #10
 800691a:	600b      	str	r3, [r1, #0]
 800691c:	491f      	ldr	r1, [pc, #124]	; (800699c <__b2d+0xa4>)
 800691e:	dc17      	bgt.n	8006950 <__b2d+0x58>
 8006920:	45c1      	cmp	r9, r8
 8006922:	bf28      	it	cs
 8006924:	2200      	movcs	r2, #0
 8006926:	f1c0 0c0b 	rsb	ip, r0, #11
 800692a:	fa26 f30c 	lsr.w	r3, r6, ip
 800692e:	bf38      	it	cc
 8006930:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006934:	ea43 0501 	orr.w	r5, r3, r1
 8006938:	f100 0315 	add.w	r3, r0, #21
 800693c:	fa06 f303 	lsl.w	r3, r6, r3
 8006940:	fa22 f20c 	lsr.w	r2, r2, ip
 8006944:	ea43 0402 	orr.w	r4, r3, r2
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006950:	45c1      	cmp	r9, r8
 8006952:	bf2e      	itee	cs
 8006954:	2200      	movcs	r2, #0
 8006956:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800695a:	f1a7 0808 	subcc.w	r8, r7, #8
 800695e:	f1b0 030b 	subs.w	r3, r0, #11
 8006962:	d016      	beq.n	8006992 <__b2d+0x9a>
 8006964:	f1c3 0720 	rsb	r7, r3, #32
 8006968:	fa22 f107 	lsr.w	r1, r2, r7
 800696c:	45c8      	cmp	r8, r9
 800696e:	fa06 f603 	lsl.w	r6, r6, r3
 8006972:	ea46 0601 	orr.w	r6, r6, r1
 8006976:	bf94      	ite	ls
 8006978:	2100      	movls	r1, #0
 800697a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800697e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006982:	fa02 f003 	lsl.w	r0, r2, r3
 8006986:	40f9      	lsrs	r1, r7
 8006988:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800698c:	ea40 0401 	orr.w	r4, r0, r1
 8006990:	e7da      	b.n	8006948 <__b2d+0x50>
 8006992:	4614      	mov	r4, r2
 8006994:	ea46 0501 	orr.w	r5, r6, r1
 8006998:	e7d6      	b.n	8006948 <__b2d+0x50>
 800699a:	bf00      	nop
 800699c:	3ff00000 	.word	0x3ff00000

080069a0 <__d2b>:
 80069a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069a4:	2101      	movs	r1, #1
 80069a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80069aa:	4690      	mov	r8, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	f7ff fc0d 	bl	80061cc <_Balloc>
 80069b2:	4604      	mov	r4, r0
 80069b4:	b930      	cbnz	r0, 80069c4 <__d2b+0x24>
 80069b6:	4602      	mov	r2, r0
 80069b8:	f240 310a 	movw	r1, #778	; 0x30a
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <__d2b+0xb0>)
 80069be:	4825      	ldr	r0, [pc, #148]	; (8006a54 <__d2b+0xb4>)
 80069c0:	f000 fb02 	bl	8006fc8 <__assert_func>
 80069c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069cc:	bb2d      	cbnz	r5, 8006a1a <__d2b+0x7a>
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f1b8 0300 	subs.w	r3, r8, #0
 80069d4:	d026      	beq.n	8006a24 <__d2b+0x84>
 80069d6:	4668      	mov	r0, sp
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f7ff fd0d 	bl	80063f8 <__lo0bits>
 80069de:	9900      	ldr	r1, [sp, #0]
 80069e0:	b1f0      	cbz	r0, 8006a20 <__d2b+0x80>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	f1c0 0320 	rsb	r3, r0, #32
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	430b      	orrs	r3, r1
 80069ee:	40c2      	lsrs	r2, r0
 80069f0:	6163      	str	r3, [r4, #20]
 80069f2:	9201      	str	r2, [sp, #4]
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2102      	movne	r1, #2
 80069fc:	2101      	moveq	r1, #1
 80069fe:	61a3      	str	r3, [r4, #24]
 8006a00:	6121      	str	r1, [r4, #16]
 8006a02:	b1c5      	cbz	r5, 8006a36 <__d2b+0x96>
 8006a04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a08:	4405      	add	r5, r0
 8006a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a0e:	603d      	str	r5, [r7, #0]
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4620      	mov	r0, r4
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a1e:	e7d6      	b.n	80069ce <__d2b+0x2e>
 8006a20:	6161      	str	r1, [r4, #20]
 8006a22:	e7e7      	b.n	80069f4 <__d2b+0x54>
 8006a24:	a801      	add	r0, sp, #4
 8006a26:	f7ff fce7 	bl	80063f8 <__lo0bits>
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	6121      	str	r1, [r4, #16]
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	3020      	adds	r0, #32
 8006a34:	e7e5      	b.n	8006a02 <__d2b+0x62>
 8006a36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a3e:	6038      	str	r0, [r7, #0]
 8006a40:	6918      	ldr	r0, [r3, #16]
 8006a42:	f7ff fcb9 	bl	80063b8 <__hi0bits>
 8006a46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a4a:	6031      	str	r1, [r6, #0]
 8006a4c:	e7e1      	b.n	8006a12 <__d2b+0x72>
 8006a4e:	bf00      	nop
 8006a50:	08007dcc 	.word	0x08007dcc
 8006a54:	08007e5c 	.word	0x08007e5c

08006a58 <__ratio>:
 8006a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	4688      	mov	r8, r1
 8006a5e:	4669      	mov	r1, sp
 8006a60:	4681      	mov	r9, r0
 8006a62:	f7ff ff49 	bl	80068f8 <__b2d>
 8006a66:	460f      	mov	r7, r1
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	a901      	add	r1, sp, #4
 8006a70:	f7ff ff42 	bl	80068f8 <__b2d>
 8006a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a7c:	468b      	mov	fp, r1
 8006a7e:	eba3 0c02 	sub.w	ip, r3, r2
 8006a82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bfd5      	itete	le
 8006a90:	460a      	movle	r2, r1
 8006a92:	462a      	movgt	r2, r5
 8006a94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a98:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a9c:	bfd8      	it	le
 8006a9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006aa2:	465b      	mov	r3, fp
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7f9 fe3f 	bl	800072c <__aeabi_ddiv>
 8006aae:	b003      	add	sp, #12
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ab4 <__copybits>:
 8006ab4:	3901      	subs	r1, #1
 8006ab6:	b570      	push	{r4, r5, r6, lr}
 8006ab8:	1149      	asrs	r1, r1, #5
 8006aba:	6914      	ldr	r4, [r2, #16]
 8006abc:	3101      	adds	r1, #1
 8006abe:	f102 0314 	add.w	r3, r2, #20
 8006ac2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ac6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006aca:	1f05      	subs	r5, r0, #4
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	d30c      	bcc.n	8006aea <__copybits+0x36>
 8006ad0:	1aa3      	subs	r3, r4, r2
 8006ad2:	3b11      	subs	r3, #17
 8006ad4:	f023 0303 	bic.w	r3, r3, #3
 8006ad8:	3211      	adds	r2, #17
 8006ada:	42a2      	cmp	r2, r4
 8006adc:	bf88      	it	hi
 8006ade:	2300      	movhi	r3, #0
 8006ae0:	4418      	add	r0, r3
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4288      	cmp	r0, r1
 8006ae6:	d305      	bcc.n	8006af4 <__copybits+0x40>
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	f853 6b04 	ldr.w	r6, [r3], #4
 8006aee:	f845 6f04 	str.w	r6, [r5, #4]!
 8006af2:	e7eb      	b.n	8006acc <__copybits+0x18>
 8006af4:	f840 3b04 	str.w	r3, [r0], #4
 8006af8:	e7f4      	b.n	8006ae4 <__copybits+0x30>

08006afa <__any_on>:
 8006afa:	f100 0214 	add.w	r2, r0, #20
 8006afe:	6900      	ldr	r0, [r0, #16]
 8006b00:	114b      	asrs	r3, r1, #5
 8006b02:	4298      	cmp	r0, r3
 8006b04:	b510      	push	{r4, lr}
 8006b06:	db11      	blt.n	8006b2c <__any_on+0x32>
 8006b08:	dd0a      	ble.n	8006b20 <__any_on+0x26>
 8006b0a:	f011 011f 	ands.w	r1, r1, #31
 8006b0e:	d007      	beq.n	8006b20 <__any_on+0x26>
 8006b10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b14:	fa24 f001 	lsr.w	r0, r4, r1
 8006b18:	fa00 f101 	lsl.w	r1, r0, r1
 8006b1c:	428c      	cmp	r4, r1
 8006b1e:	d10b      	bne.n	8006b38 <__any_on+0x3e>
 8006b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d803      	bhi.n	8006b30 <__any_on+0x36>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	bd10      	pop	{r4, pc}
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	e7f7      	b.n	8006b20 <__any_on+0x26>
 8006b30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d0f5      	beq.n	8006b24 <__any_on+0x2a>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e7f6      	b.n	8006b2a <__any_on+0x30>

08006b3c <_calloc_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	fb02 f501 	mul.w	r5, r2, r1
 8006b42:	4629      	mov	r1, r5
 8006b44:	f000 f854 	bl	8006bf0 <_malloc_r>
 8006b48:	4604      	mov	r4, r0
 8006b4a:	b118      	cbz	r0, 8006b54 <_calloc_r+0x18>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	2100      	movs	r1, #0
 8006b50:	f7fc fbde 	bl	8003310 <memset>
 8006b54:	4620      	mov	r0, r4
 8006b56:	bd38      	pop	{r3, r4, r5, pc}

08006b58 <_free_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d043      	beq.n	8006be8 <_free_r+0x90>
 8006b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b64:	1f0c      	subs	r4, r1, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfb8      	it	lt
 8006b6a:	18e4      	addlt	r4, r4, r3
 8006b6c:	f000 fa76 	bl	800705c <__malloc_lock>
 8006b70:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <_free_r+0x94>)
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	4610      	mov	r0, r2
 8006b76:	b933      	cbnz	r3, 8006b86 <_free_r+0x2e>
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	6014      	str	r4, [r2, #0]
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b82:	f000 ba71 	b.w	8007068 <__malloc_unlock>
 8006b86:	42a3      	cmp	r3, r4
 8006b88:	d90a      	bls.n	8006ba0 <_free_r+0x48>
 8006b8a:	6821      	ldr	r1, [r4, #0]
 8006b8c:	1862      	adds	r2, r4, r1
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bf01      	itttt	eq
 8006b92:	681a      	ldreq	r2, [r3, #0]
 8006b94:	685b      	ldreq	r3, [r3, #4]
 8006b96:	1852      	addeq	r2, r2, r1
 8006b98:	6022      	streq	r2, [r4, #0]
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	6004      	str	r4, [r0, #0]
 8006b9e:	e7ed      	b.n	8006b7c <_free_r+0x24>
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	b10b      	cbz	r3, 8006baa <_free_r+0x52>
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d9fa      	bls.n	8006ba0 <_free_r+0x48>
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	1850      	adds	r0, r2, r1
 8006bae:	42a0      	cmp	r0, r4
 8006bb0:	d10b      	bne.n	8006bca <_free_r+0x72>
 8006bb2:	6820      	ldr	r0, [r4, #0]
 8006bb4:	4401      	add	r1, r0
 8006bb6:	1850      	adds	r0, r2, r1
 8006bb8:	4283      	cmp	r3, r0
 8006bba:	6011      	str	r1, [r2, #0]
 8006bbc:	d1de      	bne.n	8006b7c <_free_r+0x24>
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4401      	add	r1, r0
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	6053      	str	r3, [r2, #4]
 8006bc8:	e7d8      	b.n	8006b7c <_free_r+0x24>
 8006bca:	d902      	bls.n	8006bd2 <_free_r+0x7a>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	e7d4      	b.n	8006b7c <_free_r+0x24>
 8006bd2:	6820      	ldr	r0, [r4, #0]
 8006bd4:	1821      	adds	r1, r4, r0
 8006bd6:	428b      	cmp	r3, r1
 8006bd8:	bf01      	itttt	eq
 8006bda:	6819      	ldreq	r1, [r3, #0]
 8006bdc:	685b      	ldreq	r3, [r3, #4]
 8006bde:	1809      	addeq	r1, r1, r0
 8006be0:	6021      	streq	r1, [r4, #0]
 8006be2:	6063      	str	r3, [r4, #4]
 8006be4:	6054      	str	r4, [r2, #4]
 8006be6:	e7c9      	b.n	8006b7c <_free_r+0x24>
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	2000020c 	.word	0x2000020c

08006bf0 <_malloc_r>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	1ccd      	adds	r5, r1, #3
 8006bf4:	f025 0503 	bic.w	r5, r5, #3
 8006bf8:	3508      	adds	r5, #8
 8006bfa:	2d0c      	cmp	r5, #12
 8006bfc:	bf38      	it	cc
 8006bfe:	250c      	movcc	r5, #12
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	4606      	mov	r6, r0
 8006c04:	db01      	blt.n	8006c0a <_malloc_r+0x1a>
 8006c06:	42a9      	cmp	r1, r5
 8006c08:	d903      	bls.n	8006c12 <_malloc_r+0x22>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	6033      	str	r3, [r6, #0]
 8006c0e:	2000      	movs	r0, #0
 8006c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c12:	f000 fa23 	bl	800705c <__malloc_lock>
 8006c16:	4921      	ldr	r1, [pc, #132]	; (8006c9c <_malloc_r+0xac>)
 8006c18:	680a      	ldr	r2, [r1, #0]
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	b99c      	cbnz	r4, 8006c46 <_malloc_r+0x56>
 8006c1e:	4f20      	ldr	r7, [pc, #128]	; (8006ca0 <_malloc_r+0xb0>)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	b923      	cbnz	r3, 8006c2e <_malloc_r+0x3e>
 8006c24:	4621      	mov	r1, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f99e 	bl	8006f68 <_sbrk_r>
 8006c2c:	6038      	str	r0, [r7, #0]
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f999 	bl	8006f68 <_sbrk_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d123      	bne.n	8006c82 <_malloc_r+0x92>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	f000 fa12 	bl	8007068 <__malloc_unlock>
 8006c44:	e7e3      	b.n	8006c0e <_malloc_r+0x1e>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	1b5b      	subs	r3, r3, r5
 8006c4a:	d417      	bmi.n	8006c7c <_malloc_r+0x8c>
 8006c4c:	2b0b      	cmp	r3, #11
 8006c4e:	d903      	bls.n	8006c58 <_malloc_r+0x68>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	441c      	add	r4, r3
 8006c54:	6025      	str	r5, [r4, #0]
 8006c56:	e004      	b.n	8006c62 <_malloc_r+0x72>
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	42a2      	cmp	r2, r4
 8006c5c:	bf0c      	ite	eq
 8006c5e:	600b      	streq	r3, [r1, #0]
 8006c60:	6053      	strne	r3, [r2, #4]
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 fa00 	bl	8007068 <__malloc_unlock>
 8006c68:	f104 000b 	add.w	r0, r4, #11
 8006c6c:	1d23      	adds	r3, r4, #4
 8006c6e:	f020 0007 	bic.w	r0, r0, #7
 8006c72:	1ac2      	subs	r2, r0, r3
 8006c74:	d0cc      	beq.n	8006c10 <_malloc_r+0x20>
 8006c76:	1a1b      	subs	r3, r3, r0
 8006c78:	50a3      	str	r3, [r4, r2]
 8006c7a:	e7c9      	b.n	8006c10 <_malloc_r+0x20>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	6864      	ldr	r4, [r4, #4]
 8006c80:	e7cc      	b.n	8006c1c <_malloc_r+0x2c>
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d0e3      	beq.n	8006c54 <_malloc_r+0x64>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f000 f96a 	bl	8006f68 <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d1dd      	bne.n	8006c54 <_malloc_r+0x64>
 8006c98:	e7cf      	b.n	8006c3a <_malloc_r+0x4a>
 8006c9a:	bf00      	nop
 8006c9c:	2000020c 	.word	0x2000020c
 8006ca0:	20000210 	.word	0x20000210

08006ca4 <__ssputs_r>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	688e      	ldr	r6, [r1, #8]
 8006caa:	4682      	mov	sl, r0
 8006cac:	429e      	cmp	r6, r3
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4690      	mov	r8, r2
 8006cb2:	461f      	mov	r7, r3
 8006cb4:	d838      	bhi.n	8006d28 <__ssputs_r+0x84>
 8006cb6:	898a      	ldrh	r2, [r1, #12]
 8006cb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cbc:	d032      	beq.n	8006d24 <__ssputs_r+0x80>
 8006cbe:	6825      	ldr	r5, [r4, #0]
 8006cc0:	6909      	ldr	r1, [r1, #16]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	eba5 0901 	sub.w	r9, r5, r1
 8006cc8:	6965      	ldr	r5, [r4, #20]
 8006cca:	444b      	add	r3, r9
 8006ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cd4:	106d      	asrs	r5, r5, #1
 8006cd6:	429d      	cmp	r5, r3
 8006cd8:	bf38      	it	cc
 8006cda:	461d      	movcc	r5, r3
 8006cdc:	0553      	lsls	r3, r2, #21
 8006cde:	d531      	bpl.n	8006d44 <__ssputs_r+0xa0>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7ff ff85 	bl	8006bf0 <_malloc_r>
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	b950      	cbnz	r0, 8006d00 <__ssputs_r+0x5c>
 8006cea:	230c      	movs	r3, #12
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	f8ca 3000 	str.w	r3, [sl]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d00:	464a      	mov	r2, r9
 8006d02:	6921      	ldr	r1, [r4, #16]
 8006d04:	f7ff fa54 	bl	80061b0 <memcpy>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	6126      	str	r6, [r4, #16]
 8006d16:	444e      	add	r6, r9
 8006d18:	6026      	str	r6, [r4, #0]
 8006d1a:	463e      	mov	r6, r7
 8006d1c:	6165      	str	r5, [r4, #20]
 8006d1e:	eba5 0509 	sub.w	r5, r5, r9
 8006d22:	60a5      	str	r5, [r4, #8]
 8006d24:	42be      	cmp	r6, r7
 8006d26:	d900      	bls.n	8006d2a <__ssputs_r+0x86>
 8006d28:	463e      	mov	r6, r7
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	f000 f97a 	bl	8007028 <memmove>
 8006d34:	68a3      	ldr	r3, [r4, #8]
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	1b9b      	subs	r3, r3, r6
 8006d3a:	4432      	add	r2, r6
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	60a3      	str	r3, [r4, #8]
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	e7db      	b.n	8006cfc <__ssputs_r+0x58>
 8006d44:	462a      	mov	r2, r5
 8006d46:	f000 f995 	bl	8007074 <_realloc_r>
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d1e1      	bne.n	8006d14 <__ssputs_r+0x70>
 8006d50:	4650      	mov	r0, sl
 8006d52:	6921      	ldr	r1, [r4, #16]
 8006d54:	f7ff ff00 	bl	8006b58 <_free_r>
 8006d58:	e7c7      	b.n	8006cea <__ssputs_r+0x46>
	...

08006d5c <_svfiprintf_r>:
 8006d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d60:	4698      	mov	r8, r3
 8006d62:	898b      	ldrh	r3, [r1, #12]
 8006d64:	4607      	mov	r7, r0
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	460d      	mov	r5, r1
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	b09d      	sub	sp, #116	; 0x74
 8006d6e:	d50e      	bpl.n	8006d8e <_svfiprintf_r+0x32>
 8006d70:	690b      	ldr	r3, [r1, #16]
 8006d72:	b963      	cbnz	r3, 8006d8e <_svfiprintf_r+0x32>
 8006d74:	2140      	movs	r1, #64	; 0x40
 8006d76:	f7ff ff3b 	bl	8006bf0 <_malloc_r>
 8006d7a:	6028      	str	r0, [r5, #0]
 8006d7c:	6128      	str	r0, [r5, #16]
 8006d7e:	b920      	cbnz	r0, 8006d8a <_svfiprintf_r+0x2e>
 8006d80:	230c      	movs	r3, #12
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	e0d1      	b.n	8006f2e <_svfiprintf_r+0x1d2>
 8006d8a:	2340      	movs	r3, #64	; 0x40
 8006d8c:	616b      	str	r3, [r5, #20]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9309      	str	r3, [sp, #36]	; 0x24
 8006d92:	2320      	movs	r3, #32
 8006d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d98:	2330      	movs	r3, #48	; 0x30
 8006d9a:	f04f 0901 	mov.w	r9, #1
 8006d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f48 <_svfiprintf_r+0x1ec>
 8006da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006daa:	4623      	mov	r3, r4
 8006dac:	469a      	mov	sl, r3
 8006dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db2:	b10a      	cbz	r2, 8006db8 <_svfiprintf_r+0x5c>
 8006db4:	2a25      	cmp	r2, #37	; 0x25
 8006db6:	d1f9      	bne.n	8006dac <_svfiprintf_r+0x50>
 8006db8:	ebba 0b04 	subs.w	fp, sl, r4
 8006dbc:	d00b      	beq.n	8006dd6 <_svfiprintf_r+0x7a>
 8006dbe:	465b      	mov	r3, fp
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7ff ff6d 	bl	8006ca4 <__ssputs_r>
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f000 80aa 	beq.w	8006f24 <_svfiprintf_r+0x1c8>
 8006dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd2:	445a      	add	r2, fp
 8006dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80a2 	beq.w	8006f24 <_svfiprintf_r+0x1c8>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dea:	f10a 0a01 	add.w	sl, sl, #1
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	9307      	str	r3, [sp, #28]
 8006df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006df6:	931a      	str	r3, [sp, #104]	; 0x68
 8006df8:	4654      	mov	r4, sl
 8006dfa:	2205      	movs	r2, #5
 8006dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e00:	4851      	ldr	r0, [pc, #324]	; (8006f48 <_svfiprintf_r+0x1ec>)
 8006e02:	f7ff f9c7 	bl	8006194 <memchr>
 8006e06:	9a04      	ldr	r2, [sp, #16]
 8006e08:	b9d8      	cbnz	r0, 8006e42 <_svfiprintf_r+0xe6>
 8006e0a:	06d0      	lsls	r0, r2, #27
 8006e0c:	bf44      	itt	mi
 8006e0e:	2320      	movmi	r3, #32
 8006e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e14:	0711      	lsls	r1, r2, #28
 8006e16:	bf44      	itt	mi
 8006e18:	232b      	movmi	r3, #43	; 0x2b
 8006e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e22:	2b2a      	cmp	r3, #42	; 0x2a
 8006e24:	d015      	beq.n	8006e52 <_svfiprintf_r+0xf6>
 8006e26:	4654      	mov	r4, sl
 8006e28:	2000      	movs	r0, #0
 8006e2a:	f04f 0c0a 	mov.w	ip, #10
 8006e2e:	9a07      	ldr	r2, [sp, #28]
 8006e30:	4621      	mov	r1, r4
 8006e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e36:	3b30      	subs	r3, #48	; 0x30
 8006e38:	2b09      	cmp	r3, #9
 8006e3a:	d94e      	bls.n	8006eda <_svfiprintf_r+0x17e>
 8006e3c:	b1b0      	cbz	r0, 8006e6c <_svfiprintf_r+0x110>
 8006e3e:	9207      	str	r2, [sp, #28]
 8006e40:	e014      	b.n	8006e6c <_svfiprintf_r+0x110>
 8006e42:	eba0 0308 	sub.w	r3, r0, r8
 8006e46:	fa09 f303 	lsl.w	r3, r9, r3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	46a2      	mov	sl, r4
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	e7d2      	b.n	8006df8 <_svfiprintf_r+0x9c>
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	1d19      	adds	r1, r3, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	9103      	str	r1, [sp, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfbb      	ittet	lt
 8006e5e:	425b      	neglt	r3, r3
 8006e60:	f042 0202 	orrlt.w	r2, r2, #2
 8006e64:	9307      	strge	r3, [sp, #28]
 8006e66:	9307      	strlt	r3, [sp, #28]
 8006e68:	bfb8      	it	lt
 8006e6a:	9204      	strlt	r2, [sp, #16]
 8006e6c:	7823      	ldrb	r3, [r4, #0]
 8006e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e70:	d10c      	bne.n	8006e8c <_svfiprintf_r+0x130>
 8006e72:	7863      	ldrb	r3, [r4, #1]
 8006e74:	2b2a      	cmp	r3, #42	; 0x2a
 8006e76:	d135      	bne.n	8006ee4 <_svfiprintf_r+0x188>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	3402      	adds	r4, #2
 8006e7c:	1d1a      	adds	r2, r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	9203      	str	r2, [sp, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfb8      	it	lt
 8006e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f58 <_svfiprintf_r+0x1fc>
 8006e90:	2203      	movs	r2, #3
 8006e92:	4650      	mov	r0, sl
 8006e94:	7821      	ldrb	r1, [r4, #0]
 8006e96:	f7ff f97d 	bl	8006194 <memchr>
 8006e9a:	b140      	cbz	r0, 8006eae <_svfiprintf_r+0x152>
 8006e9c:	2340      	movs	r3, #64	; 0x40
 8006e9e:	eba0 000a 	sub.w	r0, r0, sl
 8006ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	4303      	orrs	r3, r0
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb2:	2206      	movs	r2, #6
 8006eb4:	4825      	ldr	r0, [pc, #148]	; (8006f4c <_svfiprintf_r+0x1f0>)
 8006eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eba:	f7ff f96b 	bl	8006194 <memchr>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d038      	beq.n	8006f34 <_svfiprintf_r+0x1d8>
 8006ec2:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <_svfiprintf_r+0x1f4>)
 8006ec4:	bb1b      	cbnz	r3, 8006f0e <_svfiprintf_r+0x1b2>
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	3307      	adds	r3, #7
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	3308      	adds	r3, #8
 8006ed0:	9303      	str	r3, [sp, #12]
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	4433      	add	r3, r6
 8006ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed8:	e767      	b.n	8006daa <_svfiprintf_r+0x4e>
 8006eda:	460c      	mov	r4, r1
 8006edc:	2001      	movs	r0, #1
 8006ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee2:	e7a5      	b.n	8006e30 <_svfiprintf_r+0xd4>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f04f 0c0a 	mov.w	ip, #10
 8006eea:	4619      	mov	r1, r3
 8006eec:	3401      	adds	r4, #1
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef6:	3a30      	subs	r2, #48	; 0x30
 8006ef8:	2a09      	cmp	r2, #9
 8006efa:	d903      	bls.n	8006f04 <_svfiprintf_r+0x1a8>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0c5      	beq.n	8006e8c <_svfiprintf_r+0x130>
 8006f00:	9105      	str	r1, [sp, #20]
 8006f02:	e7c3      	b.n	8006e8c <_svfiprintf_r+0x130>
 8006f04:	4604      	mov	r4, r0
 8006f06:	2301      	movs	r3, #1
 8006f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f0c:	e7f0      	b.n	8006ef0 <_svfiprintf_r+0x194>
 8006f0e:	ab03      	add	r3, sp, #12
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	462a      	mov	r2, r5
 8006f14:	4638      	mov	r0, r7
 8006f16:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <_svfiprintf_r+0x1f8>)
 8006f18:	a904      	add	r1, sp, #16
 8006f1a:	f7fc fa9f 	bl	800345c <_printf_float>
 8006f1e:	1c42      	adds	r2, r0, #1
 8006f20:	4606      	mov	r6, r0
 8006f22:	d1d6      	bne.n	8006ed2 <_svfiprintf_r+0x176>
 8006f24:	89ab      	ldrh	r3, [r5, #12]
 8006f26:	065b      	lsls	r3, r3, #25
 8006f28:	f53f af2c 	bmi.w	8006d84 <_svfiprintf_r+0x28>
 8006f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f2e:	b01d      	add	sp, #116	; 0x74
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	ab03      	add	r3, sp, #12
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	462a      	mov	r2, r5
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <_svfiprintf_r+0x1f8>)
 8006f3e:	a904      	add	r1, sp, #16
 8006f40:	f7fc fd28 	bl	8003994 <_printf_i>
 8006f44:	e7eb      	b.n	8006f1e <_svfiprintf_r+0x1c2>
 8006f46:	bf00      	nop
 8006f48:	08007fbc 	.word	0x08007fbc
 8006f4c:	08007fc6 	.word	0x08007fc6
 8006f50:	0800345d 	.word	0x0800345d
 8006f54:	08006ca5 	.word	0x08006ca5
 8006f58:	08007fc2 	.word	0x08007fc2

08006f5c <nan>:
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4901      	ldr	r1, [pc, #4]	; (8006f64 <nan+0x8>)
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	7ff80000 	.word	0x7ff80000

08006f68 <_sbrk_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4d05      	ldr	r5, [pc, #20]	; (8006f84 <_sbrk_r+0x1c>)
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fa fae6 	bl	8001544 <_sbrk>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_sbrk_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_sbrk_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	20000334 	.word	0x20000334

08006f88 <strncmp>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	b16a      	cbz	r2, 8006fa8 <strncmp+0x20>
 8006f8c:	3901      	subs	r1, #1
 8006f8e:	1884      	adds	r4, r0, r2
 8006f90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d103      	bne.n	8006fa4 <strncmp+0x1c>
 8006f9c:	42a0      	cmp	r0, r4
 8006f9e:	d001      	beq.n	8006fa4 <strncmp+0x1c>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f5      	bne.n	8006f90 <strncmp+0x8>
 8006fa4:	1a98      	subs	r0, r3, r2
 8006fa6:	bd10      	pop	{r4, pc}
 8006fa8:	4610      	mov	r0, r2
 8006faa:	e7fc      	b.n	8006fa6 <strncmp+0x1e>

08006fac <__ascii_wctomb>:
 8006fac:	4603      	mov	r3, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	b141      	cbz	r1, 8006fc4 <__ascii_wctomb+0x18>
 8006fb2:	2aff      	cmp	r2, #255	; 0xff
 8006fb4:	d904      	bls.n	8006fc0 <__ascii_wctomb+0x14>
 8006fb6:	228a      	movs	r2, #138	; 0x8a
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	4770      	bx	lr
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	700a      	strb	r2, [r1, #0]
 8006fc4:	4770      	bx	lr
	...

08006fc8 <__assert_func>:
 8006fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fca:	4614      	mov	r4, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <__assert_func+0x2c>)
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68d8      	ldr	r0, [r3, #12]
 8006fd6:	b14c      	cbz	r4, 8006fec <__assert_func+0x24>
 8006fd8:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <__assert_func+0x30>)
 8006fda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fde:	9100      	str	r1, [sp, #0]
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	4906      	ldr	r1, [pc, #24]	; (8006ffc <__assert_func+0x34>)
 8006fe4:	f000 f80e 	bl	8007004 <fiprintf>
 8006fe8:	f000 fa82 	bl	80074f0 <abort>
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <__assert_func+0x38>)
 8006fee:	461c      	mov	r4, r3
 8006ff0:	e7f3      	b.n	8006fda <__assert_func+0x12>
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
 8006ff8:	08007fcd 	.word	0x08007fcd
 8006ffc:	08007fda 	.word	0x08007fda
 8007000:	08008008 	.word	0x08008008

08007004 <fiprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b503      	push	{r0, r1, lr}
 8007008:	4601      	mov	r1, r0
 800700a:	ab03      	add	r3, sp, #12
 800700c:	4805      	ldr	r0, [pc, #20]	; (8007024 <fiprintf+0x20>)
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 f87b 	bl	8007110 <_vfiprintf_r>
 800701a:	b002      	add	sp, #8
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b003      	add	sp, #12
 8007022:	4770      	bx	lr
 8007024:	2000000c 	.word	0x2000000c

08007028 <memmove>:
 8007028:	4288      	cmp	r0, r1
 800702a:	b510      	push	{r4, lr}
 800702c:	eb01 0402 	add.w	r4, r1, r2
 8007030:	d902      	bls.n	8007038 <memmove+0x10>
 8007032:	4284      	cmp	r4, r0
 8007034:	4623      	mov	r3, r4
 8007036:	d807      	bhi.n	8007048 <memmove+0x20>
 8007038:	1e43      	subs	r3, r0, #1
 800703a:	42a1      	cmp	r1, r4
 800703c:	d008      	beq.n	8007050 <memmove+0x28>
 800703e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007046:	e7f8      	b.n	800703a <memmove+0x12>
 8007048:	4601      	mov	r1, r0
 800704a:	4402      	add	r2, r0
 800704c:	428a      	cmp	r2, r1
 800704e:	d100      	bne.n	8007052 <memmove+0x2a>
 8007050:	bd10      	pop	{r4, pc}
 8007052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800705a:	e7f7      	b.n	800704c <memmove+0x24>

0800705c <__malloc_lock>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__malloc_lock+0x8>)
 800705e:	f000 bc07 	b.w	8007870 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	2000033c 	.word	0x2000033c

08007068 <__malloc_unlock>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__malloc_unlock+0x8>)
 800706a:	f000 bc02 	b.w	8007872 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	2000033c 	.word	0x2000033c

08007074 <_realloc_r>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	4607      	mov	r7, r0
 8007078:	4614      	mov	r4, r2
 800707a:	460e      	mov	r6, r1
 800707c:	b921      	cbnz	r1, 8007088 <_realloc_r+0x14>
 800707e:	4611      	mov	r1, r2
 8007080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007084:	f7ff bdb4 	b.w	8006bf0 <_malloc_r>
 8007088:	b922      	cbnz	r2, 8007094 <_realloc_r+0x20>
 800708a:	f7ff fd65 	bl	8006b58 <_free_r>
 800708e:	4625      	mov	r5, r4
 8007090:	4628      	mov	r0, r5
 8007092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007094:	f000 fc52 	bl	800793c <_malloc_usable_size_r>
 8007098:	42a0      	cmp	r0, r4
 800709a:	d20f      	bcs.n	80070bc <_realloc_r+0x48>
 800709c:	4621      	mov	r1, r4
 800709e:	4638      	mov	r0, r7
 80070a0:	f7ff fda6 	bl	8006bf0 <_malloc_r>
 80070a4:	4605      	mov	r5, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d0f2      	beq.n	8007090 <_realloc_r+0x1c>
 80070aa:	4631      	mov	r1, r6
 80070ac:	4622      	mov	r2, r4
 80070ae:	f7ff f87f 	bl	80061b0 <memcpy>
 80070b2:	4631      	mov	r1, r6
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff fd4f 	bl	8006b58 <_free_r>
 80070ba:	e7e9      	b.n	8007090 <_realloc_r+0x1c>
 80070bc:	4635      	mov	r5, r6
 80070be:	e7e7      	b.n	8007090 <_realloc_r+0x1c>

080070c0 <__sfputc_r>:
 80070c0:	6893      	ldr	r3, [r2, #8]
 80070c2:	b410      	push	{r4}
 80070c4:	3b01      	subs	r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	6093      	str	r3, [r2, #8]
 80070ca:	da07      	bge.n	80070dc <__sfputc_r+0x1c>
 80070cc:	6994      	ldr	r4, [r2, #24]
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	db01      	blt.n	80070d6 <__sfputc_r+0x16>
 80070d2:	290a      	cmp	r1, #10
 80070d4:	d102      	bne.n	80070dc <__sfputc_r+0x1c>
 80070d6:	bc10      	pop	{r4}
 80070d8:	f000 b94a 	b.w	8007370 <__swbuf_r>
 80070dc:	6813      	ldr	r3, [r2, #0]
 80070de:	1c58      	adds	r0, r3, #1
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	7019      	strb	r1, [r3, #0]
 80070e4:	4608      	mov	r0, r1
 80070e6:	bc10      	pop	{r4}
 80070e8:	4770      	bx	lr

080070ea <__sfputs_r>:
 80070ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	18d5      	adds	r5, r2, r3
 80070f4:	42ac      	cmp	r4, r5
 80070f6:	d101      	bne.n	80070fc <__sfputs_r+0x12>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e007      	b.n	800710c <__sfputs_r+0x22>
 80070fc:	463a      	mov	r2, r7
 80070fe:	4630      	mov	r0, r6
 8007100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007104:	f7ff ffdc 	bl	80070c0 <__sfputc_r>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d1f3      	bne.n	80070f4 <__sfputs_r+0xa>
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007110 <_vfiprintf_r>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	460d      	mov	r5, r1
 8007116:	4614      	mov	r4, r2
 8007118:	4698      	mov	r8, r3
 800711a:	4606      	mov	r6, r0
 800711c:	b09d      	sub	sp, #116	; 0x74
 800711e:	b118      	cbz	r0, 8007128 <_vfiprintf_r+0x18>
 8007120:	6983      	ldr	r3, [r0, #24]
 8007122:	b90b      	cbnz	r3, 8007128 <_vfiprintf_r+0x18>
 8007124:	f000 fb06 	bl	8007734 <__sinit>
 8007128:	4b89      	ldr	r3, [pc, #548]	; (8007350 <_vfiprintf_r+0x240>)
 800712a:	429d      	cmp	r5, r3
 800712c:	d11b      	bne.n	8007166 <_vfiprintf_r+0x56>
 800712e:	6875      	ldr	r5, [r6, #4]
 8007130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007132:	07d9      	lsls	r1, r3, #31
 8007134:	d405      	bmi.n	8007142 <_vfiprintf_r+0x32>
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	059a      	lsls	r2, r3, #22
 800713a:	d402      	bmi.n	8007142 <_vfiprintf_r+0x32>
 800713c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713e:	f000 fb97 	bl	8007870 <__retarget_lock_acquire_recursive>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	071b      	lsls	r3, r3, #28
 8007146:	d501      	bpl.n	800714c <_vfiprintf_r+0x3c>
 8007148:	692b      	ldr	r3, [r5, #16]
 800714a:	b9eb      	cbnz	r3, 8007188 <_vfiprintf_r+0x78>
 800714c:	4629      	mov	r1, r5
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f960 	bl	8007414 <__swsetup_r>
 8007154:	b1c0      	cbz	r0, 8007188 <_vfiprintf_r+0x78>
 8007156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007158:	07dc      	lsls	r4, r3, #31
 800715a:	d50e      	bpl.n	800717a <_vfiprintf_r+0x6a>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	b01d      	add	sp, #116	; 0x74
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	4b7b      	ldr	r3, [pc, #492]	; (8007354 <_vfiprintf_r+0x244>)
 8007168:	429d      	cmp	r5, r3
 800716a:	d101      	bne.n	8007170 <_vfiprintf_r+0x60>
 800716c:	68b5      	ldr	r5, [r6, #8]
 800716e:	e7df      	b.n	8007130 <_vfiprintf_r+0x20>
 8007170:	4b79      	ldr	r3, [pc, #484]	; (8007358 <_vfiprintf_r+0x248>)
 8007172:	429d      	cmp	r5, r3
 8007174:	bf08      	it	eq
 8007176:	68f5      	ldreq	r5, [r6, #12]
 8007178:	e7da      	b.n	8007130 <_vfiprintf_r+0x20>
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	0598      	lsls	r0, r3, #22
 800717e:	d4ed      	bmi.n	800715c <_vfiprintf_r+0x4c>
 8007180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007182:	f000 fb76 	bl	8007872 <__retarget_lock_release_recursive>
 8007186:	e7e9      	b.n	800715c <_vfiprintf_r+0x4c>
 8007188:	2300      	movs	r3, #0
 800718a:	9309      	str	r3, [sp, #36]	; 0x24
 800718c:	2320      	movs	r3, #32
 800718e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007192:	2330      	movs	r3, #48	; 0x30
 8007194:	f04f 0901 	mov.w	r9, #1
 8007198:	f8cd 800c 	str.w	r8, [sp, #12]
 800719c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800735c <_vfiprintf_r+0x24c>
 80071a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a4:	4623      	mov	r3, r4
 80071a6:	469a      	mov	sl, r3
 80071a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ac:	b10a      	cbz	r2, 80071b2 <_vfiprintf_r+0xa2>
 80071ae:	2a25      	cmp	r2, #37	; 0x25
 80071b0:	d1f9      	bne.n	80071a6 <_vfiprintf_r+0x96>
 80071b2:	ebba 0b04 	subs.w	fp, sl, r4
 80071b6:	d00b      	beq.n	80071d0 <_vfiprintf_r+0xc0>
 80071b8:	465b      	mov	r3, fp
 80071ba:	4622      	mov	r2, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff ff93 	bl	80070ea <__sfputs_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	f000 80aa 	beq.w	800731e <_vfiprintf_r+0x20e>
 80071ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071cc:	445a      	add	r2, fp
 80071ce:	9209      	str	r2, [sp, #36]	; 0x24
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a2 	beq.w	800731e <_vfiprintf_r+0x20e>
 80071da:	2300      	movs	r3, #0
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e4:	f10a 0a01 	add.w	sl, sl, #1
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071f0:	931a      	str	r3, [sp, #104]	; 0x68
 80071f2:	4654      	mov	r4, sl
 80071f4:	2205      	movs	r2, #5
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	4858      	ldr	r0, [pc, #352]	; (800735c <_vfiprintf_r+0x24c>)
 80071fc:	f7fe ffca 	bl	8006194 <memchr>
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	b9d8      	cbnz	r0, 800723c <_vfiprintf_r+0x12c>
 8007204:	06d1      	lsls	r1, r2, #27
 8007206:	bf44      	itt	mi
 8007208:	2320      	movmi	r3, #32
 800720a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720e:	0713      	lsls	r3, r2, #28
 8007210:	bf44      	itt	mi
 8007212:	232b      	movmi	r3, #43	; 0x2b
 8007214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007218:	f89a 3000 	ldrb.w	r3, [sl]
 800721c:	2b2a      	cmp	r3, #42	; 0x2a
 800721e:	d015      	beq.n	800724c <_vfiprintf_r+0x13c>
 8007220:	4654      	mov	r4, sl
 8007222:	2000      	movs	r0, #0
 8007224:	f04f 0c0a 	mov.w	ip, #10
 8007228:	9a07      	ldr	r2, [sp, #28]
 800722a:	4621      	mov	r1, r4
 800722c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007230:	3b30      	subs	r3, #48	; 0x30
 8007232:	2b09      	cmp	r3, #9
 8007234:	d94e      	bls.n	80072d4 <_vfiprintf_r+0x1c4>
 8007236:	b1b0      	cbz	r0, 8007266 <_vfiprintf_r+0x156>
 8007238:	9207      	str	r2, [sp, #28]
 800723a:	e014      	b.n	8007266 <_vfiprintf_r+0x156>
 800723c:	eba0 0308 	sub.w	r3, r0, r8
 8007240:	fa09 f303 	lsl.w	r3, r9, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	46a2      	mov	sl, r4
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	e7d2      	b.n	80071f2 <_vfiprintf_r+0xe2>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	1d19      	adds	r1, r3, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	9103      	str	r1, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfbb      	ittet	lt
 8007258:	425b      	neglt	r3, r3
 800725a:	f042 0202 	orrlt.w	r2, r2, #2
 800725e:	9307      	strge	r3, [sp, #28]
 8007260:	9307      	strlt	r3, [sp, #28]
 8007262:	bfb8      	it	lt
 8007264:	9204      	strlt	r2, [sp, #16]
 8007266:	7823      	ldrb	r3, [r4, #0]
 8007268:	2b2e      	cmp	r3, #46	; 0x2e
 800726a:	d10c      	bne.n	8007286 <_vfiprintf_r+0x176>
 800726c:	7863      	ldrb	r3, [r4, #1]
 800726e:	2b2a      	cmp	r3, #42	; 0x2a
 8007270:	d135      	bne.n	80072de <_vfiprintf_r+0x1ce>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3402      	adds	r4, #2
 8007276:	1d1a      	adds	r2, r3, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	9203      	str	r2, [sp, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	bfb8      	it	lt
 8007280:	f04f 33ff 	movlt.w	r3, #4294967295
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800736c <_vfiprintf_r+0x25c>
 800728a:	2203      	movs	r2, #3
 800728c:	4650      	mov	r0, sl
 800728e:	7821      	ldrb	r1, [r4, #0]
 8007290:	f7fe ff80 	bl	8006194 <memchr>
 8007294:	b140      	cbz	r0, 80072a8 <_vfiprintf_r+0x198>
 8007296:	2340      	movs	r3, #64	; 0x40
 8007298:	eba0 000a 	sub.w	r0, r0, sl
 800729c:	fa03 f000 	lsl.w	r0, r3, r0
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	3401      	adds	r4, #1
 80072a4:	4303      	orrs	r3, r0
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ac:	2206      	movs	r2, #6
 80072ae:	482c      	ldr	r0, [pc, #176]	; (8007360 <_vfiprintf_r+0x250>)
 80072b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b4:	f7fe ff6e 	bl	8006194 <memchr>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d03f      	beq.n	800733c <_vfiprintf_r+0x22c>
 80072bc:	4b29      	ldr	r3, [pc, #164]	; (8007364 <_vfiprintf_r+0x254>)
 80072be:	bb1b      	cbnz	r3, 8007308 <_vfiprintf_r+0x1f8>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	3307      	adds	r3, #7
 80072c4:	f023 0307 	bic.w	r3, r3, #7
 80072c8:	3308      	adds	r3, #8
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ce:	443b      	add	r3, r7
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	e767      	b.n	80071a4 <_vfiprintf_r+0x94>
 80072d4:	460c      	mov	r4, r1
 80072d6:	2001      	movs	r0, #1
 80072d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072dc:	e7a5      	b.n	800722a <_vfiprintf_r+0x11a>
 80072de:	2300      	movs	r3, #0
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4619      	mov	r1, r3
 80072e6:	3401      	adds	r4, #1
 80072e8:	9305      	str	r3, [sp, #20]
 80072ea:	4620      	mov	r0, r4
 80072ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f0:	3a30      	subs	r2, #48	; 0x30
 80072f2:	2a09      	cmp	r2, #9
 80072f4:	d903      	bls.n	80072fe <_vfiprintf_r+0x1ee>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0c5      	beq.n	8007286 <_vfiprintf_r+0x176>
 80072fa:	9105      	str	r1, [sp, #20]
 80072fc:	e7c3      	b.n	8007286 <_vfiprintf_r+0x176>
 80072fe:	4604      	mov	r4, r0
 8007300:	2301      	movs	r3, #1
 8007302:	fb0c 2101 	mla	r1, ip, r1, r2
 8007306:	e7f0      	b.n	80072ea <_vfiprintf_r+0x1da>
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	462a      	mov	r2, r5
 800730e:	4630      	mov	r0, r6
 8007310:	4b15      	ldr	r3, [pc, #84]	; (8007368 <_vfiprintf_r+0x258>)
 8007312:	a904      	add	r1, sp, #16
 8007314:	f7fc f8a2 	bl	800345c <_printf_float>
 8007318:	4607      	mov	r7, r0
 800731a:	1c78      	adds	r0, r7, #1
 800731c:	d1d6      	bne.n	80072cc <_vfiprintf_r+0x1bc>
 800731e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007320:	07d9      	lsls	r1, r3, #31
 8007322:	d405      	bmi.n	8007330 <_vfiprintf_r+0x220>
 8007324:	89ab      	ldrh	r3, [r5, #12]
 8007326:	059a      	lsls	r2, r3, #22
 8007328:	d402      	bmi.n	8007330 <_vfiprintf_r+0x220>
 800732a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800732c:	f000 faa1 	bl	8007872 <__retarget_lock_release_recursive>
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	065b      	lsls	r3, r3, #25
 8007334:	f53f af12 	bmi.w	800715c <_vfiprintf_r+0x4c>
 8007338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733a:	e711      	b.n	8007160 <_vfiprintf_r+0x50>
 800733c:	ab03      	add	r3, sp, #12
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	462a      	mov	r2, r5
 8007342:	4630      	mov	r0, r6
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <_vfiprintf_r+0x258>)
 8007346:	a904      	add	r1, sp, #16
 8007348:	f7fc fb24 	bl	8003994 <_printf_i>
 800734c:	e7e4      	b.n	8007318 <_vfiprintf_r+0x208>
 800734e:	bf00      	nop
 8007350:	0800802c 	.word	0x0800802c
 8007354:	0800804c 	.word	0x0800804c
 8007358:	0800800c 	.word	0x0800800c
 800735c:	08007fbc 	.word	0x08007fbc
 8007360:	08007fc6 	.word	0x08007fc6
 8007364:	0800345d 	.word	0x0800345d
 8007368:	080070eb 	.word	0x080070eb
 800736c:	08007fc2 	.word	0x08007fc2

08007370 <__swbuf_r>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	460e      	mov	r6, r1
 8007374:	4614      	mov	r4, r2
 8007376:	4605      	mov	r5, r0
 8007378:	b118      	cbz	r0, 8007382 <__swbuf_r+0x12>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <__swbuf_r+0x12>
 800737e:	f000 f9d9 	bl	8007734 <__sinit>
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <__swbuf_r+0x98>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d12b      	bne.n	80073e0 <__swbuf_r+0x70>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	071a      	lsls	r2, r3, #28
 8007392:	d52f      	bpl.n	80073f4 <__swbuf_r+0x84>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b36b      	cbz	r3, 80073f4 <__swbuf_r+0x84>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	b2f6      	uxtb	r6, r6
 800739e:	1ac0      	subs	r0, r0, r3
 80073a0:	6963      	ldr	r3, [r4, #20]
 80073a2:	4637      	mov	r7, r6
 80073a4:	4283      	cmp	r3, r0
 80073a6:	dc04      	bgt.n	80073b2 <__swbuf_r+0x42>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f92e 	bl	800760c <_fflush_r>
 80073b0:	bb30      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	3001      	adds	r0, #1
 80073b6:	3b01      	subs	r3, #1
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	701e      	strb	r6, [r3, #0]
 80073c2:	6963      	ldr	r3, [r4, #20]
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d004      	beq.n	80073d2 <__swbuf_r+0x62>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d506      	bpl.n	80073dc <__swbuf_r+0x6c>
 80073ce:	2e0a      	cmp	r6, #10
 80073d0:	d104      	bne.n	80073dc <__swbuf_r+0x6c>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f919 	bl	800760c <_fflush_r>
 80073da:	b988      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073dc:	4638      	mov	r0, r7
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <__swbuf_r+0x9c>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d101      	bne.n	80073ea <__swbuf_r+0x7a>
 80073e6:	68ac      	ldr	r4, [r5, #8]
 80073e8:	e7cf      	b.n	800738a <__swbuf_r+0x1a>
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <__swbuf_r+0xa0>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	bf08      	it	eq
 80073f0:	68ec      	ldreq	r4, [r5, #12]
 80073f2:	e7ca      	b.n	800738a <__swbuf_r+0x1a>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f80c 	bl	8007414 <__swsetup_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0cb      	beq.n	8007398 <__swbuf_r+0x28>
 8007400:	f04f 37ff 	mov.w	r7, #4294967295
 8007404:	e7ea      	b.n	80073dc <__swbuf_r+0x6c>
 8007406:	bf00      	nop
 8007408:	0800802c 	.word	0x0800802c
 800740c:	0800804c 	.word	0x0800804c
 8007410:	0800800c 	.word	0x0800800c

08007414 <__swsetup_r>:
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <__swsetup_r+0xcc>)
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	4606      	mov	r6, r0
 800741c:	460c      	mov	r4, r1
 800741e:	b125      	cbz	r5, 800742a <__swsetup_r+0x16>
 8007420:	69ab      	ldr	r3, [r5, #24]
 8007422:	b913      	cbnz	r3, 800742a <__swsetup_r+0x16>
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f985 	bl	8007734 <__sinit>
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <__swsetup_r+0xd0>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d10f      	bne.n	8007450 <__swsetup_r+0x3c>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	d42c      	bmi.n	8007496 <__swsetup_r+0x82>
 800743c:	06dd      	lsls	r5, r3, #27
 800743e:	d411      	bmi.n	8007464 <__swsetup_r+0x50>
 8007440:	2309      	movs	r3, #9
 8007442:	6033      	str	r3, [r6, #0]
 8007444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	e03e      	b.n	80074ce <__swsetup_r+0xba>
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <__swsetup_r+0xd4>)
 8007452:	429c      	cmp	r4, r3
 8007454:	d101      	bne.n	800745a <__swsetup_r+0x46>
 8007456:	68ac      	ldr	r4, [r5, #8]
 8007458:	e7eb      	b.n	8007432 <__swsetup_r+0x1e>
 800745a:	4b24      	ldr	r3, [pc, #144]	; (80074ec <__swsetup_r+0xd8>)
 800745c:	429c      	cmp	r4, r3
 800745e:	bf08      	it	eq
 8007460:	68ec      	ldreq	r4, [r5, #12]
 8007462:	e7e6      	b.n	8007432 <__swsetup_r+0x1e>
 8007464:	0758      	lsls	r0, r3, #29
 8007466:	d512      	bpl.n	800748e <__swsetup_r+0x7a>
 8007468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746a:	b141      	cbz	r1, 800747e <__swsetup_r+0x6a>
 800746c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <__swsetup_r+0x66>
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fb6f 	bl	8006b58 <_free_r>
 800747a:	2300      	movs	r3, #0
 800747c:	6363      	str	r3, [r4, #52]	; 0x34
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	2300      	movs	r3, #0
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	b94b      	cbnz	r3, 80074ae <__swsetup_r+0x9a>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d003      	beq.n	80074ae <__swsetup_r+0x9a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f000 fa07 	bl	80078bc <__smakebuf_r>
 80074ae:	89a0      	ldrh	r0, [r4, #12]
 80074b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b4:	f010 0301 	ands.w	r3, r0, #1
 80074b8:	d00a      	beq.n	80074d0 <__swsetup_r+0xbc>
 80074ba:	2300      	movs	r3, #0
 80074bc:	60a3      	str	r3, [r4, #8]
 80074be:	6963      	ldr	r3, [r4, #20]
 80074c0:	425b      	negs	r3, r3
 80074c2:	61a3      	str	r3, [r4, #24]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	b943      	cbnz	r3, 80074da <__swsetup_r+0xc6>
 80074c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074cc:	d1ba      	bne.n	8007444 <__swsetup_r+0x30>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	0781      	lsls	r1, r0, #30
 80074d2:	bf58      	it	pl
 80074d4:	6963      	ldrpl	r3, [r4, #20]
 80074d6:	60a3      	str	r3, [r4, #8]
 80074d8:	e7f4      	b.n	80074c4 <__swsetup_r+0xb0>
 80074da:	2000      	movs	r0, #0
 80074dc:	e7f7      	b.n	80074ce <__swsetup_r+0xba>
 80074de:	bf00      	nop
 80074e0:	2000000c 	.word	0x2000000c
 80074e4:	0800802c 	.word	0x0800802c
 80074e8:	0800804c 	.word	0x0800804c
 80074ec:	0800800c 	.word	0x0800800c

080074f0 <abort>:
 80074f0:	2006      	movs	r0, #6
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f000 fa52 	bl	800799c <raise>
 80074f8:	2001      	movs	r0, #1
 80074fa:	f7f9 ffaf 	bl	800145c <_exit>
	...

08007500 <__sflush_r>:
 8007500:	898a      	ldrh	r2, [r1, #12]
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	4605      	mov	r5, r0
 8007508:	0710      	lsls	r0, r2, #28
 800750a:	460c      	mov	r4, r1
 800750c:	d458      	bmi.n	80075c0 <__sflush_r+0xc0>
 800750e:	684b      	ldr	r3, [r1, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc05      	bgt.n	8007520 <__sflush_r+0x20>
 8007514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	dc02      	bgt.n	8007520 <__sflush_r+0x20>
 800751a:	2000      	movs	r0, #0
 800751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007522:	2e00      	cmp	r6, #0
 8007524:	d0f9      	beq.n	800751a <__sflush_r+0x1a>
 8007526:	2300      	movs	r3, #0
 8007528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800752c:	682f      	ldr	r7, [r5, #0]
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	d032      	beq.n	8007598 <__sflush_r+0x98>
 8007532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	075a      	lsls	r2, r3, #29
 8007538:	d505      	bpl.n	8007546 <__sflush_r+0x46>
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	1ac0      	subs	r0, r0, r3
 800753e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007540:	b10b      	cbz	r3, 8007546 <__sflush_r+0x46>
 8007542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007544:	1ac0      	subs	r0, r0, r3
 8007546:	2300      	movs	r3, #0
 8007548:	4602      	mov	r2, r0
 800754a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800754c:	4628      	mov	r0, r5
 800754e:	6a21      	ldr	r1, [r4, #32]
 8007550:	47b0      	blx	r6
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	d106      	bne.n	8007566 <__sflush_r+0x66>
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	291d      	cmp	r1, #29
 800755c:	d82c      	bhi.n	80075b8 <__sflush_r+0xb8>
 800755e:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <__sflush_r+0x108>)
 8007560:	40ca      	lsrs	r2, r1
 8007562:	07d6      	lsls	r6, r2, #31
 8007564:	d528      	bpl.n	80075b8 <__sflush_r+0xb8>
 8007566:	2200      	movs	r2, #0
 8007568:	6062      	str	r2, [r4, #4]
 800756a:	6922      	ldr	r2, [r4, #16]
 800756c:	04d9      	lsls	r1, r3, #19
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	d504      	bpl.n	800757c <__sflush_r+0x7c>
 8007572:	1c42      	adds	r2, r0, #1
 8007574:	d101      	bne.n	800757a <__sflush_r+0x7a>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b903      	cbnz	r3, 800757c <__sflush_r+0x7c>
 800757a:	6560      	str	r0, [r4, #84]	; 0x54
 800757c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800757e:	602f      	str	r7, [r5, #0]
 8007580:	2900      	cmp	r1, #0
 8007582:	d0ca      	beq.n	800751a <__sflush_r+0x1a>
 8007584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007588:	4299      	cmp	r1, r3
 800758a:	d002      	beq.n	8007592 <__sflush_r+0x92>
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff fae3 	bl	8006b58 <_free_r>
 8007592:	2000      	movs	r0, #0
 8007594:	6360      	str	r0, [r4, #52]	; 0x34
 8007596:	e7c1      	b.n	800751c <__sflush_r+0x1c>
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	2301      	movs	r3, #1
 800759c:	4628      	mov	r0, r5
 800759e:	47b0      	blx	r6
 80075a0:	1c41      	adds	r1, r0, #1
 80075a2:	d1c7      	bne.n	8007534 <__sflush_r+0x34>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0c4      	beq.n	8007534 <__sflush_r+0x34>
 80075aa:	2b1d      	cmp	r3, #29
 80075ac:	d001      	beq.n	80075b2 <__sflush_r+0xb2>
 80075ae:	2b16      	cmp	r3, #22
 80075b0:	d101      	bne.n	80075b6 <__sflush_r+0xb6>
 80075b2:	602f      	str	r7, [r5, #0]
 80075b4:	e7b1      	b.n	800751a <__sflush_r+0x1a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	e7ad      	b.n	800751c <__sflush_r+0x1c>
 80075c0:	690f      	ldr	r7, [r1, #16]
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	d0a9      	beq.n	800751a <__sflush_r+0x1a>
 80075c6:	0793      	lsls	r3, r2, #30
 80075c8:	bf18      	it	ne
 80075ca:	2300      	movne	r3, #0
 80075cc:	680e      	ldr	r6, [r1, #0]
 80075ce:	bf08      	it	eq
 80075d0:	694b      	ldreq	r3, [r1, #20]
 80075d2:	eba6 0807 	sub.w	r8, r6, r7
 80075d6:	600f      	str	r7, [r1, #0]
 80075d8:	608b      	str	r3, [r1, #8]
 80075da:	f1b8 0f00 	cmp.w	r8, #0
 80075de:	dd9c      	ble.n	800751a <__sflush_r+0x1a>
 80075e0:	4643      	mov	r3, r8
 80075e2:	463a      	mov	r2, r7
 80075e4:	4628      	mov	r0, r5
 80075e6:	6a21      	ldr	r1, [r4, #32]
 80075e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075ea:	47b0      	blx	r6
 80075ec:	2800      	cmp	r0, #0
 80075ee:	dc06      	bgt.n	80075fe <__sflush_r+0xfe>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f04f 30ff 	mov.w	r0, #4294967295
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	e78e      	b.n	800751c <__sflush_r+0x1c>
 80075fe:	4407      	add	r7, r0
 8007600:	eba8 0800 	sub.w	r8, r8, r0
 8007604:	e7e9      	b.n	80075da <__sflush_r+0xda>
 8007606:	bf00      	nop
 8007608:	20400001 	.word	0x20400001

0800760c <_fflush_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	690b      	ldr	r3, [r1, #16]
 8007610:	4605      	mov	r5, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b913      	cbnz	r3, 800761c <_fflush_r+0x10>
 8007616:	2500      	movs	r5, #0
 8007618:	4628      	mov	r0, r5
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	b118      	cbz	r0, 8007626 <_fflush_r+0x1a>
 800761e:	6983      	ldr	r3, [r0, #24]
 8007620:	b90b      	cbnz	r3, 8007626 <_fflush_r+0x1a>
 8007622:	f000 f887 	bl	8007734 <__sinit>
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <_fflush_r+0x6c>)
 8007628:	429c      	cmp	r4, r3
 800762a:	d11b      	bne.n	8007664 <_fflush_r+0x58>
 800762c:	686c      	ldr	r4, [r5, #4]
 800762e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ef      	beq.n	8007616 <_fflush_r+0xa>
 8007636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007638:	07d0      	lsls	r0, r2, #31
 800763a:	d404      	bmi.n	8007646 <_fflush_r+0x3a>
 800763c:	0599      	lsls	r1, r3, #22
 800763e:	d402      	bmi.n	8007646 <_fflush_r+0x3a>
 8007640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007642:	f000 f915 	bl	8007870 <__retarget_lock_acquire_recursive>
 8007646:	4628      	mov	r0, r5
 8007648:	4621      	mov	r1, r4
 800764a:	f7ff ff59 	bl	8007500 <__sflush_r>
 800764e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007650:	4605      	mov	r5, r0
 8007652:	07da      	lsls	r2, r3, #31
 8007654:	d4e0      	bmi.n	8007618 <_fflush_r+0xc>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	059b      	lsls	r3, r3, #22
 800765a:	d4dd      	bmi.n	8007618 <_fflush_r+0xc>
 800765c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800765e:	f000 f908 	bl	8007872 <__retarget_lock_release_recursive>
 8007662:	e7d9      	b.n	8007618 <_fflush_r+0xc>
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <_fflush_r+0x70>)
 8007666:	429c      	cmp	r4, r3
 8007668:	d101      	bne.n	800766e <_fflush_r+0x62>
 800766a:	68ac      	ldr	r4, [r5, #8]
 800766c:	e7df      	b.n	800762e <_fflush_r+0x22>
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <_fflush_r+0x74>)
 8007670:	429c      	cmp	r4, r3
 8007672:	bf08      	it	eq
 8007674:	68ec      	ldreq	r4, [r5, #12]
 8007676:	e7da      	b.n	800762e <_fflush_r+0x22>
 8007678:	0800802c 	.word	0x0800802c
 800767c:	0800804c 	.word	0x0800804c
 8007680:	0800800c 	.word	0x0800800c

08007684 <std>:
 8007684:	2300      	movs	r3, #0
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	e9c0 3300 	strd	r3, r3, [r0]
 800768e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007692:	6083      	str	r3, [r0, #8]
 8007694:	8181      	strh	r1, [r0, #12]
 8007696:	6643      	str	r3, [r0, #100]	; 0x64
 8007698:	81c2      	strh	r2, [r0, #14]
 800769a:	6183      	str	r3, [r0, #24]
 800769c:	4619      	mov	r1, r3
 800769e:	2208      	movs	r2, #8
 80076a0:	305c      	adds	r0, #92	; 0x5c
 80076a2:	f7fb fe35 	bl	8003310 <memset>
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <std+0x38>)
 80076a8:	6224      	str	r4, [r4, #32]
 80076aa:	6263      	str	r3, [r4, #36]	; 0x24
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <std+0x3c>)
 80076ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80076b0:	4b04      	ldr	r3, [pc, #16]	; (80076c4 <std+0x40>)
 80076b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076b4:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <std+0x44>)
 80076b6:	6323      	str	r3, [r4, #48]	; 0x30
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	bf00      	nop
 80076bc:	080079d5 	.word	0x080079d5
 80076c0:	080079f7 	.word	0x080079f7
 80076c4:	08007a2f 	.word	0x08007a2f
 80076c8:	08007a53 	.word	0x08007a53

080076cc <_cleanup_r>:
 80076cc:	4901      	ldr	r1, [pc, #4]	; (80076d4 <_cleanup_r+0x8>)
 80076ce:	f000 b8af 	b.w	8007830 <_fwalk_reent>
 80076d2:	bf00      	nop
 80076d4:	0800760d 	.word	0x0800760d

080076d8 <__sfmoreglue>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	2568      	movs	r5, #104	; 0x68
 80076dc:	1e4a      	subs	r2, r1, #1
 80076de:	4355      	muls	r5, r2
 80076e0:	460e      	mov	r6, r1
 80076e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076e6:	f7ff fa83 	bl	8006bf0 <_malloc_r>
 80076ea:	4604      	mov	r4, r0
 80076ec:	b140      	cbz	r0, 8007700 <__sfmoreglue+0x28>
 80076ee:	2100      	movs	r1, #0
 80076f0:	e9c0 1600 	strd	r1, r6, [r0]
 80076f4:	300c      	adds	r0, #12
 80076f6:	60a0      	str	r0, [r4, #8]
 80076f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076fc:	f7fb fe08 	bl	8003310 <memset>
 8007700:	4620      	mov	r0, r4
 8007702:	bd70      	pop	{r4, r5, r6, pc}

08007704 <__sfp_lock_acquire>:
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__sfp_lock_acquire+0x8>)
 8007706:	f000 b8b3 	b.w	8007870 <__retarget_lock_acquire_recursive>
 800770a:	bf00      	nop
 800770c:	20000340 	.word	0x20000340

08007710 <__sfp_lock_release>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__sfp_lock_release+0x8>)
 8007712:	f000 b8ae 	b.w	8007872 <__retarget_lock_release_recursive>
 8007716:	bf00      	nop
 8007718:	20000340 	.word	0x20000340

0800771c <__sinit_lock_acquire>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sinit_lock_acquire+0x8>)
 800771e:	f000 b8a7 	b.w	8007870 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	2000033b 	.word	0x2000033b

08007728 <__sinit_lock_release>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__sinit_lock_release+0x8>)
 800772a:	f000 b8a2 	b.w	8007872 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	2000033b 	.word	0x2000033b

08007734 <__sinit>:
 8007734:	b510      	push	{r4, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	f7ff fff0 	bl	800771c <__sinit_lock_acquire>
 800773c:	69a3      	ldr	r3, [r4, #24]
 800773e:	b11b      	cbz	r3, 8007748 <__sinit+0x14>
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f7ff bff0 	b.w	8007728 <__sinit_lock_release>
 8007748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800774c:	6523      	str	r3, [r4, #80]	; 0x50
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <__sinit+0x68>)
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <__sinit+0x6c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	62a2      	str	r2, [r4, #40]	; 0x28
 8007756:	42a3      	cmp	r3, r4
 8007758:	bf08      	it	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	4620      	mov	r0, r4
 800775e:	bf08      	it	eq
 8007760:	61a3      	streq	r3, [r4, #24]
 8007762:	f000 f81f 	bl	80077a4 <__sfp>
 8007766:	6060      	str	r0, [r4, #4]
 8007768:	4620      	mov	r0, r4
 800776a:	f000 f81b 	bl	80077a4 <__sfp>
 800776e:	60a0      	str	r0, [r4, #8]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f817 	bl	80077a4 <__sfp>
 8007776:	2200      	movs	r2, #0
 8007778:	2104      	movs	r1, #4
 800777a:	60e0      	str	r0, [r4, #12]
 800777c:	6860      	ldr	r0, [r4, #4]
 800777e:	f7ff ff81 	bl	8007684 <std>
 8007782:	2201      	movs	r2, #1
 8007784:	2109      	movs	r1, #9
 8007786:	68a0      	ldr	r0, [r4, #8]
 8007788:	f7ff ff7c 	bl	8007684 <std>
 800778c:	2202      	movs	r2, #2
 800778e:	2112      	movs	r1, #18
 8007790:	68e0      	ldr	r0, [r4, #12]
 8007792:	f7ff ff77 	bl	8007684 <std>
 8007796:	2301      	movs	r3, #1
 8007798:	61a3      	str	r3, [r4, #24]
 800779a:	e7d1      	b.n	8007740 <__sinit+0xc>
 800779c:	08007bb8 	.word	0x08007bb8
 80077a0:	080076cd 	.word	0x080076cd

080077a4 <__sfp>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	4607      	mov	r7, r0
 80077a8:	f7ff ffac 	bl	8007704 <__sfp_lock_acquire>
 80077ac:	4b1e      	ldr	r3, [pc, #120]	; (8007828 <__sfp+0x84>)
 80077ae:	681e      	ldr	r6, [r3, #0]
 80077b0:	69b3      	ldr	r3, [r6, #24]
 80077b2:	b913      	cbnz	r3, 80077ba <__sfp+0x16>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff ffbd 	bl	8007734 <__sinit>
 80077ba:	3648      	adds	r6, #72	; 0x48
 80077bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	d503      	bpl.n	80077cc <__sfp+0x28>
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	b30b      	cbz	r3, 800780c <__sfp+0x68>
 80077c8:	6836      	ldr	r6, [r6, #0]
 80077ca:	e7f7      	b.n	80077bc <__sfp+0x18>
 80077cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077d0:	b9d5      	cbnz	r5, 8007808 <__sfp+0x64>
 80077d2:	4b16      	ldr	r3, [pc, #88]	; (800782c <__sfp+0x88>)
 80077d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077d8:	60e3      	str	r3, [r4, #12]
 80077da:	6665      	str	r5, [r4, #100]	; 0x64
 80077dc:	f000 f847 	bl	800786e <__retarget_lock_init_recursive>
 80077e0:	f7ff ff96 	bl	8007710 <__sfp_lock_release>
 80077e4:	2208      	movs	r2, #8
 80077e6:	4629      	mov	r1, r5
 80077e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077f0:	6025      	str	r5, [r4, #0]
 80077f2:	61a5      	str	r5, [r4, #24]
 80077f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077f8:	f7fb fd8a 	bl	8003310 <memset>
 80077fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007804:	4620      	mov	r0, r4
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	3468      	adds	r4, #104	; 0x68
 800780a:	e7d9      	b.n	80077c0 <__sfp+0x1c>
 800780c:	2104      	movs	r1, #4
 800780e:	4638      	mov	r0, r7
 8007810:	f7ff ff62 	bl	80076d8 <__sfmoreglue>
 8007814:	4604      	mov	r4, r0
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	2800      	cmp	r0, #0
 800781a:	d1d5      	bne.n	80077c8 <__sfp+0x24>
 800781c:	f7ff ff78 	bl	8007710 <__sfp_lock_release>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	e7ee      	b.n	8007804 <__sfp+0x60>
 8007826:	bf00      	nop
 8007828:	08007bb8 	.word	0x08007bb8
 800782c:	ffff0001 	.word	0xffff0001

08007830 <_fwalk_reent>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4606      	mov	r6, r0
 8007836:	4688      	mov	r8, r1
 8007838:	2700      	movs	r7, #0
 800783a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800783e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007842:	f1b9 0901 	subs.w	r9, r9, #1
 8007846:	d505      	bpl.n	8007854 <_fwalk_reent+0x24>
 8007848:	6824      	ldr	r4, [r4, #0]
 800784a:	2c00      	cmp	r4, #0
 800784c:	d1f7      	bne.n	800783e <_fwalk_reent+0xe>
 800784e:	4638      	mov	r0, r7
 8007850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007854:	89ab      	ldrh	r3, [r5, #12]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d907      	bls.n	800786a <_fwalk_reent+0x3a>
 800785a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800785e:	3301      	adds	r3, #1
 8007860:	d003      	beq.n	800786a <_fwalk_reent+0x3a>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	47c0      	blx	r8
 8007868:	4307      	orrs	r7, r0
 800786a:	3568      	adds	r5, #104	; 0x68
 800786c:	e7e9      	b.n	8007842 <_fwalk_reent+0x12>

0800786e <__retarget_lock_init_recursive>:
 800786e:	4770      	bx	lr

08007870 <__retarget_lock_acquire_recursive>:
 8007870:	4770      	bx	lr

08007872 <__retarget_lock_release_recursive>:
 8007872:	4770      	bx	lr

08007874 <__swhatbuf_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	460e      	mov	r6, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	4614      	mov	r4, r2
 800787e:	2900      	cmp	r1, #0
 8007880:	461d      	mov	r5, r3
 8007882:	b096      	sub	sp, #88	; 0x58
 8007884:	da07      	bge.n	8007896 <__swhatbuf_r+0x22>
 8007886:	2300      	movs	r3, #0
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	89b3      	ldrh	r3, [r6, #12]
 800788c:	061a      	lsls	r2, r3, #24
 800788e:	d410      	bmi.n	80078b2 <__swhatbuf_r+0x3e>
 8007890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007894:	e00e      	b.n	80078b4 <__swhatbuf_r+0x40>
 8007896:	466a      	mov	r2, sp
 8007898:	f000 f902 	bl	8007aa0 <_fstat_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	dbf2      	blt.n	8007886 <__swhatbuf_r+0x12>
 80078a0:	9a01      	ldr	r2, [sp, #4]
 80078a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078aa:	425a      	negs	r2, r3
 80078ac:	415a      	adcs	r2, r3
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	e7ee      	b.n	8007890 <__swhatbuf_r+0x1c>
 80078b2:	2340      	movs	r3, #64	; 0x40
 80078b4:	2000      	movs	r0, #0
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	b016      	add	sp, #88	; 0x58
 80078ba:	bd70      	pop	{r4, r5, r6, pc}

080078bc <__smakebuf_r>:
 80078bc:	898b      	ldrh	r3, [r1, #12]
 80078be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078c0:	079d      	lsls	r5, r3, #30
 80078c2:	4606      	mov	r6, r0
 80078c4:	460c      	mov	r4, r1
 80078c6:	d507      	bpl.n	80078d8 <__smakebuf_r+0x1c>
 80078c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	2301      	movs	r3, #1
 80078d2:	6163      	str	r3, [r4, #20]
 80078d4:	b002      	add	sp, #8
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	466a      	mov	r2, sp
 80078da:	ab01      	add	r3, sp, #4
 80078dc:	f7ff ffca 	bl	8007874 <__swhatbuf_r>
 80078e0:	9900      	ldr	r1, [sp, #0]
 80078e2:	4605      	mov	r5, r0
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff f983 	bl	8006bf0 <_malloc_r>
 80078ea:	b948      	cbnz	r0, 8007900 <__smakebuf_r+0x44>
 80078ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f0:	059a      	lsls	r2, r3, #22
 80078f2:	d4ef      	bmi.n	80078d4 <__smakebuf_r+0x18>
 80078f4:	f023 0303 	bic.w	r3, r3, #3
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	e7e3      	b.n	80078c8 <__smakebuf_r+0xc>
 8007900:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <__smakebuf_r+0x7c>)
 8007902:	62b3      	str	r3, [r6, #40]	; 0x28
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	6020      	str	r0, [r4, #0]
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	6120      	str	r0, [r4, #16]
 8007912:	6163      	str	r3, [r4, #20]
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	b15b      	cbz	r3, 8007930 <__smakebuf_r+0x74>
 8007918:	4630      	mov	r0, r6
 800791a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800791e:	f000 f8d1 	bl	8007ac4 <_isatty_r>
 8007922:	b128      	cbz	r0, 8007930 <__smakebuf_r+0x74>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	89a0      	ldrh	r0, [r4, #12]
 8007932:	4305      	orrs	r5, r0
 8007934:	81a5      	strh	r5, [r4, #12]
 8007936:	e7cd      	b.n	80078d4 <__smakebuf_r+0x18>
 8007938:	080076cd 	.word	0x080076cd

0800793c <_malloc_usable_size_r>:
 800793c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007940:	1f18      	subs	r0, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfbc      	itt	lt
 8007946:	580b      	ldrlt	r3, [r1, r0]
 8007948:	18c0      	addlt	r0, r0, r3
 800794a:	4770      	bx	lr

0800794c <_raise_r>:
 800794c:	291f      	cmp	r1, #31
 800794e:	b538      	push	{r3, r4, r5, lr}
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	d904      	bls.n	8007960 <_raise_r+0x14>
 8007956:	2316      	movs	r3, #22
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007962:	b112      	cbz	r2, 800796a <_raise_r+0x1e>
 8007964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007968:	b94b      	cbnz	r3, 800797e <_raise_r+0x32>
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f830 	bl	80079d0 <_getpid_r>
 8007970:	462a      	mov	r2, r5
 8007972:	4601      	mov	r1, r0
 8007974:	4620      	mov	r0, r4
 8007976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800797a:	f000 b817 	b.w	80079ac <_kill_r>
 800797e:	2b01      	cmp	r3, #1
 8007980:	d00a      	beq.n	8007998 <_raise_r+0x4c>
 8007982:	1c59      	adds	r1, r3, #1
 8007984:	d103      	bne.n	800798e <_raise_r+0x42>
 8007986:	2316      	movs	r3, #22
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	2001      	movs	r0, #1
 800798c:	e7e7      	b.n	800795e <_raise_r+0x12>
 800798e:	2400      	movs	r4, #0
 8007990:	4628      	mov	r0, r5
 8007992:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007996:	4798      	blx	r3
 8007998:	2000      	movs	r0, #0
 800799a:	e7e0      	b.n	800795e <_raise_r+0x12>

0800799c <raise>:
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <raise+0xc>)
 800799e:	4601      	mov	r1, r0
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f7ff bfd3 	b.w	800794c <_raise_r>
 80079a6:	bf00      	nop
 80079a8:	2000000c 	.word	0x2000000c

080079ac <_kill_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	2300      	movs	r3, #0
 80079b0:	4d06      	ldr	r5, [pc, #24]	; (80079cc <_kill_r+0x20>)
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	4611      	mov	r1, r2
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	f7f9 fd3f 	bl	800143c <_kill>
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	d102      	bne.n	80079c8 <_kill_r+0x1c>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	b103      	cbz	r3, 80079c8 <_kill_r+0x1c>
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	bd38      	pop	{r3, r4, r5, pc}
 80079ca:	bf00      	nop
 80079cc:	20000334 	.word	0x20000334

080079d0 <_getpid_r>:
 80079d0:	f7f9 bd2d 	b.w	800142e <_getpid>

080079d4 <__sread>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f894 	bl	8007b08 <_read_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	bfab      	itete	ge
 80079e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e6:	89a3      	ldrhlt	r3, [r4, #12]
 80079e8:	181b      	addge	r3, r3, r0
 80079ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ee:	bfac      	ite	ge
 80079f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f2:	81a3      	strhlt	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__swrite>:
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	461f      	mov	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	4605      	mov	r5, r0
 8007a00:	05db      	lsls	r3, r3, #23
 8007a02:	460c      	mov	r4, r1
 8007a04:	4616      	mov	r6, r2
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1e>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	f000 f868 	bl	8007ae4 <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	4632      	mov	r2, r6
 8007a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	4628      	mov	r0, r5
 8007a20:	463b      	mov	r3, r7
 8007a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	f000 b817 	b.w	8007a5c <_write_r>

08007a2e <__sseek>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 f855 	bl	8007ae4 <_lseek_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	bf15      	itete	ne
 8007a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4a:	81a3      	strheq	r3, [r4, #12]
 8007a4c:	bf18      	it	ne
 8007a4e:	81a3      	strhne	r3, [r4, #12]
 8007a50:	bd10      	pop	{r4, pc}

08007a52 <__sclose>:
 8007a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a56:	f000 b813 	b.w	8007a80 <_close_r>
	...

08007a5c <_write_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	4611      	mov	r1, r2
 8007a64:	2200      	movs	r2, #0
 8007a66:	4d05      	ldr	r5, [pc, #20]	; (8007a7c <_write_r+0x20>)
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 fd1d 	bl	80014aa <_write>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_write_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_write_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20000334 	.word	0x20000334

08007a80 <_close_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	2300      	movs	r3, #0
 8007a84:	4d05      	ldr	r5, [pc, #20]	; (8007a9c <_close_r+0x1c>)
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7f9 fd29 	bl	80014e2 <_close>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_close_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_close_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000334 	.word	0x20000334

08007aa0 <_fstat_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4d06      	ldr	r5, [pc, #24]	; (8007ac0 <_fstat_r+0x20>)
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	f7f9 fd23 	bl	80014f8 <_fstat>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d102      	bne.n	8007abc <_fstat_r+0x1c>
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	b103      	cbz	r3, 8007abc <_fstat_r+0x1c>
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000334 	.word	0x20000334

08007ac4 <_isatty_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4d05      	ldr	r5, [pc, #20]	; (8007ae0 <_isatty_r+0x1c>)
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	f7f9 fd21 	bl	8001516 <_isatty>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_isatty_r+0x1a>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_isatty_r+0x1a>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000334 	.word	0x20000334

08007ae4 <_lseek_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	2200      	movs	r2, #0
 8007aee:	4d05      	ldr	r5, [pc, #20]	; (8007b04 <_lseek_r+0x20>)
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 fd19 	bl	800152a <_lseek>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_lseek_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_lseek_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000334 	.word	0x20000334

08007b08 <_read_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	2200      	movs	r2, #0
 8007b12:	4d05      	ldr	r5, [pc, #20]	; (8007b28 <_read_r+0x20>)
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 fcaa 	bl	8001470 <_read>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_read_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_read_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20000334 	.word	0x20000334

08007b2c <_init>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr

08007b38 <_fini>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr
