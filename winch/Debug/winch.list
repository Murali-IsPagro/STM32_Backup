
winch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008ef8  08008ef8  00018ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093fc  080093fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080093fc  080093fc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093fc  080093fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e0  080095e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080095e4  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7a1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228b  00000000  00000000  0002d9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00030a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e23  00000000  00000000  00031760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e59f  00000000  00000000  0004a583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cd7  00000000  00000000  00058b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e97f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  000e984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008edc 	.word	0x08008edc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008edc 	.word	0x08008edc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <map>:

/* USER CODE END PFP */


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	69b9      	ldr	r1, [r7, #24]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	1a8a      	subs	r2, r1, r2
 8000e0e:	fb02 f203 	mul.w	r2, r2, r3
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	4413      	add	r3, r2
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f000 fd69 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f8f1 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3a:	f000 faab 	bl	8001394 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e3e:	f000 f949 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e42:	f000 f995 	bl	8001170 <MX_TIM2_Init>
  MX_DMA_Init();
 8000e46:	f000 fa87 	bl	8001358 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e4a:	f000 fa5b 	bl	8001304 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e4e:	f000 f9e3 	bl	8001218 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000e52:	213c      	movs	r1, #60	; 0x3c
 8000e54:	4819      	ldr	r0, [pc, #100]	; (8000ebc <main+0x90>)
 8000e56:	f002 fd3d 	bl	80038d4 <HAL_TIM_Encoder_Start>
	//HAL_ADC_Start_DMA(&hadc1, &buffer, 1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <main+0x94>)
 8000e5e:	f002 fbf5 	bl	800364c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE  ((TIM2->CNT)>>2)*/
	while (1) {
    /* USER CODE END WHILE */
//		tim1_cnt = __HAL_TIM_GET_COUNTER(&htim2);
		HAL_TIM_PeriodElapsedCallback(&htim2);
 8000e62:	4816      	ldr	r0, [pc, #88]	; (8000ebc <main+0x90>)
 8000e64:	f000 f83a 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
			direction = !(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2));
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <main+0x90>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	bf14      	ite	ne
 8000e76:	2301      	movne	r3, #1
 8000e78:	2300      	moveq	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <main+0x98>)
 8000e80:	601a      	str	r2, [r3, #0]
			sprintf(MSG, "	Ticks = %d, adc=%d ,Current=%f\n", ((TIM2->CNT)>>2),(int)val,current);
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	089c      	lsrs	r4, r3, #2
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <main+0x9c>)
 8000e8c:	681d      	ldr	r5, [r3, #0]
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <main+0xa0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fac8 	bl	8000428 <__aeabi_f2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8000ea0:	462b      	mov	r3, r5
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	490a      	ldr	r1, [pc, #40]	; (8000ed0 <main+0xa4>)
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <main+0xa8>)
 8000ea8:	f004 fa86 	bl	80053b8 <siprintf>
			            HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 10);
 8000eac:	230a      	movs	r3, #10
 8000eae:	2232      	movs	r2, #50	; 0x32
 8000eb0:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <main+0xa8>)
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <main+0xac>)
 8000eb4:	f003 fa6d 	bl	8004392 <HAL_UART_Transmit>
	while (1) {
 8000eb8:	e7d3      	b.n	8000e62 <main+0x36>
 8000eba:	bf00      	nop
 8000ebc:	20000354 	.word	0x20000354
 8000ec0:	20000240 	.word	0x20000240
 8000ec4:	20000288 	.word	0x20000288
 8000ec8:	200002bc 	.word	0x200002bc
 8000ecc:	20000308 	.word	0x20000308
 8000ed0:	08008ef8 	.word	0x08008ef8
 8000ed4:	20000200 	.word	0x20000200
 8000ed8:	200002c0 	.word	0x200002c0

08000edc <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	//tim1_cnt = __HAL_TIM_GET_COUNTER(&htim2);

   if (htim -> Instance == TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d104      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1c>

   {

   HAL_ADC_Start_DMA(&hadc1, &buffer, 10);
 8000eee:	220a      	movs	r2, #10
 8000ef0:	4903      	ldr	r1, [pc, #12]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ef4:	f000 fe42 	bl	8001b7c <HAL_ADC_Start_DMA>

   }

}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000304 	.word	0x20000304
 8000f04:	2000028c 	.word	0x2000028c

08000f08 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]
   adc_val = buffer;
 8000f10:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3b      	ldr	r2, [pc, #236]	; (8001004 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000f16:	6013      	str	r3, [r2, #0]
   val=map(adc_val, 0, 255,0 , 4095);
 8000f18:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	22ff      	movs	r2, #255	; 0xff
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f7ff ff63 	bl	8000df4 <map>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a35      	ldr	r2, [pc, #212]	; (8001008 <HAL_ADC_ConvCpltCallback+0x100>)
 8000f32:	6013      	str	r3, [r2, #0]
   rawVoltage = (float) val * 3.3 * 2 / 4095;
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_ADC_ConvCpltCallback+0x100>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fecf 	bl	8000cdc <__aeabi_i2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa71 	bl	8000428 <__aeabi_f2d>
 8000f46:	a326      	add	r3, pc, #152	; (adr r3, 8000fe0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fac4 	bl	80004d8 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	f7ff f906 	bl	800016c <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	a31f      	add	r3, pc, #124	; (adr r3, 8000fe8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fbdd 	bl	800072c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fda5 	bl	8000ac8 <__aeabi_d2f>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_ADC_ConvCpltCallback+0x104>)
 8000f82:	6013      	str	r3, [r2, #0]
       // If rawVoltage is not 2.5Volt, multiply by a factor.In my case it is 1.035
       // This is due to tolerance in voltage divider resister & ADC accuracy
       current =((rawVoltage - 2.503)/0.185)*1000;
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_ADC_ConvCpltCallback+0x104>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa4d 	bl	8000428 <__aeabi_f2d>
 8000f8e:	a318      	add	r3, pc, #96	; (adr r3, 8000ff0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff f8e8 	bl	8000168 <__aeabi_dsub>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a315      	add	r3, pc, #84	; (adr r3, 8000ff8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fbc1 	bl	800072c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_ADC_ConvCpltCallback+0x108>)
 8000fb8:	f7ff fa8e 	bl	80004d8 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fd80 	bl	8000ac8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000fcc:	6013      	str	r3, [r2, #0]
   HAL_ADC_Stop_DMA(&hadc1);
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <HAL_ADC_ConvCpltCallback+0x110>)
 8000fd0:	f000 feb2 	bl	8001d38 <HAL_ADC_Stop_DMA>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40affe00 	.word	0x40affe00
 8000ff0:	dd2f1aa0 	.word	0xdd2f1aa0
 8000ff4:	40040624 	.word	0x40040624
 8000ff8:	7ae147ae 	.word	0x7ae147ae
 8000ffc:	3fc7ae14 	.word	0x3fc7ae14
 8001000:	20000304 	.word	0x20000304
 8001004:	200001fc 	.word	0x200001fc
 8001008:	200002bc 	.word	0x200002bc
 800100c:	2000030c 	.word	0x2000030c
 8001010:	408f4000 	.word	0x408f4000
 8001014:	20000308 	.word	0x20000308
 8001018:	2000028c 	.word	0x2000028c

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2228      	movs	r2, #40	; 0x28
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fb46 	bl	80046bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001068:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fd72 	bl	8002b5c <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107e:	f000 f9ab 	bl	80013d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001092:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 ffdc 	bl	800305c <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010aa:	f000 f995 	bl	80013d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ae:	2302      	movs	r3, #2
 80010b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f968 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010c6:	f000 f987 	bl	80013d8 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	; 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_ADC1_Init+0x94>)
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_ADC1_Init+0x98>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ADC1_Init+0x94>)
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC1_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC1_Init+0x94>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ADC1_Init+0x94>)
 8001100:	2201      	movs	r2, #1
 8001102:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC1_Init+0x94>)
 8001106:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_ADC1_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC1_Init+0x94>)
 8001114:	2202      	movs	r2, #2
 8001116:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_ADC1_Init+0x94>)
 800111a:	f000 fc57 	bl	80019cc <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8001124:	f000 f958 	bl	80013d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC1_Init+0x94>)
 800113a:	f000 fe5b 	bl	8001df4 <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001144:	f000 f948 	bl	80013d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001148:	2302      	movs	r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x94>)
 8001152:	f000 fe4f 	bl	8001df4 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800115c:	f000 f93c 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000028c 	.word	0x2000028c
 800116c:	40012400 	.word	0x40012400

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa9c 	bl	80046bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_TIM2_Init+0xa4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_TIM2_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_TIM2_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011c4:	230a      	movs	r3, #10
 80011c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011d4:	230a      	movs	r3, #10
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011e0:	f002 fad6 	bl	8003790 <HAL_TIM_Encoder_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ea:	f000 f8f5 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011fc:	f003 f81e 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001206:	f000 f8e7 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000354 	.word	0x20000354

08001218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <MX_TIM3_Init+0xe4>)
 800124a:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <MX_TIM3_Init+0xe8>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_TIM3_Init+0xe4>)
 800125c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_TIM3_Init+0xe4>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001270:	f002 f944 	bl	80034fc <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800127a:	f000 f8ad 	bl	80013d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001288:	4619      	mov	r1, r3
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_TIM3_Init+0xe4>)
 800128c:	f002 fc6e 	bl	8003b6c <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001296:	f000 f89f 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <MX_TIM3_Init+0xe4>)
 800129c:	f002 f97d 	bl	800359a <HAL_TIM_PWM_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012a6:	f000 f897 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	4619      	mov	r1, r3
 80012b8:	4810      	ldr	r0, [pc, #64]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012ba:	f002 ffbf 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012c4:	f000 f888 	bl	80013d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c8:	2360      	movs	r3, #96	; 0x60
 80012ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012e0:	f002 fb86 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ea:	f000 f875 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ee:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012f0:	f000 f96e 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 80012f4:	bf00      	nop
 80012f6:	3738      	adds	r7, #56	; 0x38
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000240 	.word	0x20000240
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f002 ffdc 	bl	80042f8 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f847 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002c0 	.word	0x200002c0
 8001354:	40013800 	.word	0x40013800

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_DMA_Init+0x38>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <MX_DMA_Init+0x38>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6153      	str	r3, [r2, #20]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_DMA_Init+0x38>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	200b      	movs	r0, #11
 800137c:	f001 f80b 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001380:	200b      	movs	r0, #11
 8001382:	f001 f824 	bl	80023ce <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_GPIO_Init+0x40>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <MX_GPIO_Init+0x40>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_GPIO_Init+0x40>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_GPIO_Init+0x40>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <MX_GPIO_Init+0x40>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <MX_GPIO_Init+0x40>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013e0:	e7fe      	b.n	80013e0 <Error_Handler+0x8>
	...

080013e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_MspInit+0x5c>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4a14      	ldr	r2, [pc, #80]	; (8001440 <HAL_MspInit+0x5c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6193      	str	r3, [r2, #24]
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_MspInit+0x5c>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_MspInit+0x5c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_MspInit+0x60>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_MspInit+0x60>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000

08001448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a29      	ldr	r2, [pc, #164]	; (8001508 <HAL_ADC_MspInit+0xc0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d14a      	bne.n	80014fe <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_ADC_MspInit+0xc4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_ADC_MspInit+0xc4>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_ADC_MspInit+0xc4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_ADC_MspInit+0xc4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <HAL_ADC_MspInit+0xc4>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_ADC_MspInit+0xc4>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001498:	2318      	movs	r3, #24
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	481a      	ldr	r0, [pc, #104]	; (8001510 <HAL_ADC_MspInit+0xc8>)
 80014a8:	f001 f9d4 	bl	8002854 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_ADC_MspInit+0xd0>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014d6:	2220      	movs	r2, #32
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80014e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014e4:	f000 ff8e 	bl	8002404 <HAL_DMA_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80014ee:	f7ff ff73 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014f6:	621a      	str	r2, [r3, #32]
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_ADC_MspInit+0xcc>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40012400 	.word	0x40012400
 800150c:	40021000 	.word	0x40021000
 8001510:	40010800 	.word	0x40010800
 8001514:	20000310 	.word	0x20000310
 8001518:	40020008 	.word	0x40020008

0800151c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153a:	d123      	bne.n	8001584 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	61d3      	str	r3, [r2, #28]
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_TIM_Encoder_MspInit+0x70>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156c:	2303      	movs	r3, #3
 800156e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	4804      	ldr	r0, [pc, #16]	; (8001590 <HAL_TIM_Encoder_MspInit+0x74>)
 8001580:	f001 f968 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x34>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10b      	bne.n	80015be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_TIM_MspPostInit+0x58>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d117      	bne.n	8001620 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_TIM_MspPostInit+0x5c>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_TIM_MspPostInit+0x5c>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_TIM_MspPostInit+0x5c>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001608:	2340      	movs	r3, #64	; 0x40
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2302      	movs	r3, #2
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_TIM_MspPostInit+0x60>)
 800161c:	f001 f91a 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40000400 	.word	0x40000400
 800162c:	40021000 	.word	0x40021000
 8001630:	40010800 	.word	0x40010800

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d131      	bne.n	80016b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_UART_MspInit+0x90>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_UART_MspInit+0x90>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x90>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x90>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_UART_MspInit+0x90>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_UART_MspInit+0x90>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_UART_MspInit+0x94>)
 800169a:	f001 f8db 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x94>)
 80016b4:	f001 f8ce 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010800 	.word	0x40010800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001712:	f000 f93f 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Channel1_IRQHandler+0x10>)
 8001722:	f000 ff63 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000310 	.word	0x20000310

08001730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <_kill>:

int _kill(int pid, int sig)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001748:	f002 ff8e 	bl	8004668 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	2216      	movs	r2, #22
 8001750:	601a      	str	r2, [r3, #0]
	return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_exit>:

void _exit (int status)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001766:	f04f 31ff 	mov.w	r1, #4294967295
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffe7 	bl	800173e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001770:	e7fe      	b.n	8001770 <_exit+0x12>

08001772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00a      	b.n	800179a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001784:	f3af 8000 	nop.w
 8001788:	4601      	mov	r1, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbf0      	blt.n	8001784 <_read+0x12>
	}

return len;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e009      	b.n	80017d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbf1      	blt.n	80017be <_write+0x12>
	}
	return len;
 80017da:	687b      	ldr	r3, [r7, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_close>:

int _close(int file)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	return -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180a:	605a      	str	r2, [r3, #4]
	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <_isatty>:

int _isatty(int file)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f002 fef8 	bl	8004668 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20005000 	.word	0x20005000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000234 	.word	0x20000234
 80018ac:	200003b0 	.word	0x200003b0

080018b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018be:	490d      	ldr	r1, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d4:	4c0a      	ldr	r4, [pc, #40]	; (8001900 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff ffe5 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f002 fec5 	bl	8004674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fa9f 	bl	8000e2c <main>
  bx lr
 80018ee:	4770      	bx	lr
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018f8:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 80018fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001900:	200003b0 	.word	0x200003b0

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x28>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x28>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 fd31 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fd5e 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fd49 	bl	80023ea <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 fd11 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_IncTick+0x1c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_IncTick+0x20>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_IncTick+0x20>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000008 	.word	0x20000008
 80019b4:	2000039c 	.word	0x2000039c

080019b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <HAL_GetTick+0x10>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	2000039c 	.word	0x2000039c

080019cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0be      	b.n	8001b6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fd1c 	bl	8001448 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb41 	bl	8002098 <ADC_ConversionStop_Disable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8099 	bne.w	8001b5a <HAL_ADC_Init+0x18e>
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 8095 	bne.w	8001b5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a38:	f023 0302 	bic.w	r3, r3, #2
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7b1b      	ldrb	r3, [r3, #12]
 8001a52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_Init+0xa2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_ADC_Init+0xa8>
 8001a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a72:	e000      	b.n	8001a76 <HAL_ADC_Init+0xaa>
 8001a74:	2300      	movs	r3, #0
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7d1b      	ldrb	r3, [r3, #20]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d119      	bne.n	8001ab8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	035a      	lsls	r2, r3, #13
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_ADC_Init+0x1a8>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae8:	d003      	beq.n	8001af2 <HAL_ADC_Init+0x126>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d104      	bne.n	8001afc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	051b      	lsls	r3, r3, #20
 8001afa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_ADC_Init+0x1ac>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10b      	bne.n	8001b38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b36:	e018      	b.n	8001b6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f023 0312 	bic.w	r3, r3, #18
 8001b40:	f043 0210 	orr.w	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b58:	e007      	b.n	8001b6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	ffe1f7fd 	.word	0xffe1f7fd
 8001b78:	ff1f0efe 	.word	0xff1f0efe

08001b7c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a64      	ldr	r2, [pc, #400]	; (8001d24 <HAL_ADC_Start_DMA+0x1a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_Start_DMA+0x24>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_ADC_Start_DMA+0x1ac>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d106      	bne.n	8001bae <HAL_ADC_Start_DMA+0x32>
 8001ba0:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_ADC_Start_DMA+0x1a8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 80b3 	bne.w	8001d14 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_Start_DMA+0x40>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e0ae      	b.n	8001d1a <HAL_ADC_Start_DMA+0x19e>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fa0d 	bl	8001fe4 <ADC_Enable>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 809a 	bne.w	8001d0a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_ADC_Start_DMA+0x1ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x84>
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_ADC_Start_DMA+0x1a8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d115      	bne.n	8001c2c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d026      	beq.n	8001c68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c2a:	e01d      	b.n	8001c68 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_ADC_Start_DMA+0x1a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_Start_DMA+0xd0>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_ADC_Start_DMA+0x1ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d10d      	bne.n	8001c68 <HAL_ADC_Start_DMA+0xec>
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_ADC_Start_DMA+0x1a8>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	f023 0206 	bic.w	r2, r3, #6
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a25      	ldr	r2, [pc, #148]	; (8001d2c <HAL_ADC_Start_DMA+0x1b0>)
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <HAL_ADC_Start_DMA+0x1b4>)
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_ADC_Start_DMA+0x1b8>)
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a18      	ldr	r0, [r3, #32]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f000 fbf1 	bl	80024b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ce0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cf4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cf6:	e00f      	b.n	8001d18 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d06:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d08:	e006      	b.n	8001d18 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012400 	.word	0x40012400
 8001d28:	40012800 	.word	0x40012800
 8001d2c:	0800211b 	.word	0x0800211b
 8001d30:	08002197 	.word	0x08002197
 8001d34:	080021b3 	.word	0x080021b3

08001d38 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Stop_DMA+0x1a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e039      	b.n	8001dc6 <HAL_ADC_Stop_DMA+0x8e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f99c 	bl	8002098 <ADC_ConversionStop_Disable>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d128      	bne.n	8001dbc <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d11a      	bne.n	8001dbc <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fbf3 	bl	8002576 <HAL_DMA_Abort>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
 8001dae:	e005      	b.n	8001dbc <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x20>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0dc      	b.n	8001fce <HAL_ADC_ConfigChannel+0x1da>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d81c      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b05      	subs	r3, #5
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4019      	ands	r1, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b05      	subs	r3, #5
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5c:	e03c      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d81c      	bhi.n	8001ea0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b23      	subs	r3, #35	; 0x23
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4019      	ands	r1, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b23      	subs	r3, #35	; 0x23
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	e01b      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b41      	subs	r3, #65	; 0x41
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d91c      	bls.n	8001f1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b1e      	subs	r3, #30
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4019      	ands	r1, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6898      	ldr	r0, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b1e      	subs	r3, #30
 8001f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	e019      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d003      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f5a:	2b11      	cmp	r3, #17
 8001f5c:	d132      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d125      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d126      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9a      	lsrs	r2, r3, #18
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fa4:	e002      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1b2>
 8001fb2:	e007      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40012400 	.word	0x40012400
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d040      	beq.n	8002084 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <ADC_Enable+0xac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <ADC_Enable+0xb0>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002020:	e002      	b.n	8002028 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800202e:	f7ff fcc3 	bl	80019b8 <HAL_GetTick>
 8002032:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002034:	e01f      	b.n	8002076 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002036:	f7ff fcbf 	bl	80019b8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d918      	bls.n	8002076 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d011      	beq.n	8002076 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e007      	b.n	8002086 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d1d8      	bne.n	8002036 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12e      	bne.n	8002110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020c2:	f7ff fc79 	bl	80019b8 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020c8:	e01b      	b.n	8002102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ca:	f7ff fc75 	bl	80019b8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d914      	bls.n	8002102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e007      	b.n	8002112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d0dc      	beq.n	80020ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002130:	2b00      	cmp	r3, #0
 8002132:	d127      	bne.n	8002184 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800214a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800214e:	d115      	bne.n	800217c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fe fec3 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002182:	e004      	b.n	800218e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fe12 	bl	8001dce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff fe01 	bl	8001de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4906      	ldr	r1, [pc, #24]	; (8002280 <__NVIC_EnableIRQ+0x34>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff90 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff2d 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff42 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff90 	bl	80022d8 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5f 	bl	8002284 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff35 	bl	800224c <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e043      	b.n	80024a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_DMA_Init+0xa8>)
 8002422:	4413      	add	r3, r2
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_DMA_Init+0xac>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	009a      	lsls	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_DMA_Init+0xb0>)
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800244e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800245c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	bffdfff8 	.word	0xbffdfff8
 80024b0:	cccccccd 	.word	0xcccccccd
 80024b4:	40020000 	.word	0x40020000

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_DMA_Start_IT+0x20>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e04a      	b.n	800256e <HAL_DMA_Start_IT+0xb6>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d13a      	bne.n	8002560 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f972 	bl	80027f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 020e 	orr.w	r2, r2, #14
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e00f      	b.n	800254e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 020a 	orr.w	r2, r2, #10
 800254c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e005      	b.n	800256c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002588:	2b02      	cmp	r3, #2
 800258a:	d008      	beq.n	800259e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2204      	movs	r2, #4
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e020      	b.n	80025e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 020e 	bic.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2204      	movs	r2, #4
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d04f      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xc8>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d04a      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a66      	ldr	r2, [pc, #408]	; (80027dc <HAL_DMA_IRQHandler+0x1f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d029      	beq.n	800269a <HAL_DMA_IRQHandler+0xae>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a65      	ldr	r2, [pc, #404]	; (80027e0 <HAL_DMA_IRQHandler+0x1f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d022      	beq.n	8002696 <HAL_DMA_IRQHandler+0xaa>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0xa4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a62      	ldr	r2, [pc, #392]	; (80027e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d012      	beq.n	800268a <HAL_DMA_IRQHandler+0x9e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_DMA_IRQHandler+0x200>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x98>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_DMA_IRQHandler+0x204>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d102      	bne.n	800267e <HAL_DMA_IRQHandler+0x92>
 8002678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267c:	e00e      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 800267e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002682:	e00b      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 8002684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002688:	e008      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 800268a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268e:	e005      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	e002      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0xb0>
 800269a:	2304      	movs	r3, #4
 800269c:	4a55      	ldr	r2, [pc, #340]	; (80027f4 <HAL_DMA_IRQHandler+0x208>)
 800269e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8094 	beq.w	80027d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026b2:	e08e      	b.n	80027d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2202      	movs	r2, #2
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d056      	beq.n	8002772 <HAL_DMA_IRQHandler+0x186>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d051      	beq.n	8002772 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020a 	bic.w	r2, r2, #10
 80026ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HAL_DMA_IRQHandler+0x1f0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d029      	beq.n	8002752 <HAL_DMA_IRQHandler+0x166>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMA_IRQHandler+0x162>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a35      	ldr	r2, [pc, #212]	; (80027e4 <HAL_DMA_IRQHandler+0x1f8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x15c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d012      	beq.n	8002742 <HAL_DMA_IRQHandler+0x156>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_DMA_IRQHandler+0x200>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_DMA_IRQHandler+0x150>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_DMA_IRQHandler+0x204>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <HAL_DMA_IRQHandler+0x14a>
 8002730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002734:	e00e      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 8002736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273a:	e00b      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	e008      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 8002742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002746:	e005      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 8002748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800274c:	e002      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 800274e:	2320      	movs	r3, #32
 8002750:	e000      	b.n	8002754 <HAL_DMA_IRQHandler+0x168>
 8002752:	2302      	movs	r3, #2
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_DMA_IRQHandler+0x208>)
 8002756:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d034      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002770:	e02f      	b.n	80027d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2208      	movs	r2, #8
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d028      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e8>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d023      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 020e 	bic.w	r2, r2, #14
 800279a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
    }
  }
  return;
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
}
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40020008 	.word	0x40020008
 80027e0:	4002001c 	.word	0x4002001c
 80027e4:	40020030 	.word	0x40020030
 80027e8:	40020044 	.word	0x40020044
 80027ec:	40020058 	.word	0x40020058
 80027f0:	4002006c 	.word	0x4002006c
 80027f4:	40020000 	.word	0x40020000

080027f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d108      	bne.n	8002838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002836:	e007      	b.n	8002848 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002866:	e169      	b.n	8002b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002868:	2201      	movs	r2, #1
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8158 	bne.w	8002b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a9a      	ldr	r2, [pc, #616]	; (8002af4 <HAL_GPIO_Init+0x2a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d05e      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 8002890:	4a98      	ldr	r2, [pc, #608]	; (8002af4 <HAL_GPIO_Init+0x2a0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d875      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 8002896:	4a98      	ldr	r2, [pc, #608]	; (8002af8 <HAL_GPIO_Init+0x2a4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d058      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 800289c:	4a96      	ldr	r2, [pc, #600]	; (8002af8 <HAL_GPIO_Init+0x2a4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d86f      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028a2:	4a96      	ldr	r2, [pc, #600]	; (8002afc <HAL_GPIO_Init+0x2a8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d052      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028a8:	4a94      	ldr	r2, [pc, #592]	; (8002afc <HAL_GPIO_Init+0x2a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d869      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ae:	4a94      	ldr	r2, [pc, #592]	; (8002b00 <HAL_GPIO_Init+0x2ac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d04c      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028b4:	4a92      	ldr	r2, [pc, #584]	; (8002b00 <HAL_GPIO_Init+0x2ac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d863      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ba:	4a92      	ldr	r2, [pc, #584]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d046      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028c0:	4a90      	ldr	r2, [pc, #576]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d85d      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d82a      	bhi.n	8002920 <HAL_GPIO_Init+0xcc>
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d859      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <HAL_GPIO_Init+0x80>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	0800294f 	.word	0x0800294f
 80028d8:	08002929 	.word	0x08002929
 80028dc:	0800293b 	.word	0x0800293b
 80028e0:	0800297d 	.word	0x0800297d
 80028e4:	08002983 	.word	0x08002983
 80028e8:	08002983 	.word	0x08002983
 80028ec:	08002983 	.word	0x08002983
 80028f0:	08002983 	.word	0x08002983
 80028f4:	08002983 	.word	0x08002983
 80028f8:	08002983 	.word	0x08002983
 80028fc:	08002983 	.word	0x08002983
 8002900:	08002983 	.word	0x08002983
 8002904:	08002983 	.word	0x08002983
 8002908:	08002983 	.word	0x08002983
 800290c:	08002983 	.word	0x08002983
 8002910:	08002983 	.word	0x08002983
 8002914:	08002983 	.word	0x08002983
 8002918:	08002931 	.word	0x08002931
 800291c:	08002945 	.word	0x08002945
 8002920:	4a79      	ldr	r2, [pc, #484]	; (8002b08 <HAL_GPIO_Init+0x2b4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002926:	e02c      	b.n	8002982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e029      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e024      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	3308      	adds	r3, #8
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e01f      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	330c      	adds	r3, #12
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e01a      	b.n	8002984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002956:	2304      	movs	r3, #4
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e013      	b.n	8002984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002964:	2308      	movs	r3, #8
 8002966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	611a      	str	r2, [r3, #16]
          break;
 800296e:	e009      	b.n	8002984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002970:	2308      	movs	r3, #8
 8002972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	615a      	str	r2, [r3, #20]
          break;
 800297a:	e003      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
          break;
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x130>
          break;
 8002982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2bff      	cmp	r3, #255	; 0xff
 8002988:	d801      	bhi.n	800298e <HAL_GPIO_Init+0x13a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	e001      	b.n	8002992 <HAL_GPIO_Init+0x13e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2bff      	cmp	r3, #255	; 0xff
 8002998:	d802      	bhi.n	80029a0 <HAL_GPIO_Init+0x14c>
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x152>
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	3b08      	subs	r3, #8
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	210f      	movs	r1, #15
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80b1 	beq.w	8002b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	; (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029ec:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2bc>)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a40      	ldr	r2, [pc, #256]	; (8002b14 <HAL_GPIO_Init+0x2c0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_GPIO_Init+0x1ec>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_GPIO_Init+0x2c4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_GPIO_Init+0x1e8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3e      	ldr	r2, [pc, #248]	; (8002b1c <HAL_GPIO_Init+0x2c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_GPIO_Init+0x1e4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_GPIO_Init+0x2cc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_GPIO_Init+0x1e0>
 8002a30:	2303      	movs	r3, #3
 8002a32:	e006      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e004      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a40:	2300      	movs	r3, #0
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	f002 0203 	and.w	r2, r2, #3
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4093      	lsls	r3, r2
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a52:	492f      	ldr	r1, [pc, #188]	; (8002b10 <HAL_GPIO_Init+0x2bc>)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	492c      	ldr	r1, [pc, #176]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4928      	ldr	r1, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4922      	ldr	r1, [pc, #136]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	491e      	ldr	r1, [pc, #120]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4918      	ldr	r1, [pc, #96]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4914      	ldr	r1, [pc, #80]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d021      	beq.n	8002b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	490e      	ldr	r1, [pc, #56]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
 8002af0:	e021      	b.n	8002b36 <HAL_GPIO_Init+0x2e2>
 8002af2:	bf00      	nop
 8002af4:	10320000 	.word	0x10320000
 8002af8:	10310000 	.word	0x10310000
 8002afc:	10220000 	.word	0x10220000
 8002b00:	10210000 	.word	0x10210000
 8002b04:	10120000 	.word	0x10120000
 8002b08:	10110000 	.word	0x10110000
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	40011000 	.word	0x40011000
 8002b20:	40011400 	.word	0x40011400
 8002b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	4909      	ldr	r1, [pc, #36]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f ae8e 	bne.w	8002868 <HAL_GPIO_Init+0x14>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	372c      	adds	r7, #44	; 0x2c
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40010400 	.word	0x40010400

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e26c      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b92      	ldr	r3, [pc, #584]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
 8002b94:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x12c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e246      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x76>
 8002bc4:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7a      	ldr	r2, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a77      	ldr	r2, [pc, #476]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xbc>
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a67      	ldr	r2, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe febe 	bl	80019b8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe feba 	bl	80019b8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1fa      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe4>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe feaa 	bl	80019b8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fea6 	bl	80019b8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1e6      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x10c>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1ba      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4939      	ldr	r1, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fe5f 	bl	80019b8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fe5b 	bl	80019b8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e19b      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fe3e 	bl	80019b8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fe3a 	bl	80019b8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e17a      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03a      	beq.n	8002de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fe fe1e 	bl	80019b8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe fe1a 	bl	80019b8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e15a      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 fad8 	bl	8003354 <RCC_Delay>
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fe04 	bl	80019b8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fe00 	bl	80019b8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e140      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	42420000 	.word	0x42420000
 8002dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b9e      	ldr	r3, [pc, #632]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a6 	beq.w	8002f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b97      	ldr	r3, [pc, #604]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b94      	ldr	r3, [pc, #592]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a93      	ldr	r2, [pc, #588]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
 8002e0a:	4b91      	ldr	r3, [pc, #580]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b8e      	ldr	r3, [pc, #568]	; (8003054 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x4f8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a8a      	ldr	r2, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7fe fdc1 	bl	80019b8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fe fdbd 	bl	80019b8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0fd      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x312>
 8002e60:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e02d      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a72      	ldr	r2, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x356>
 8002e98:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a6c      	ldr	r2, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a69      	ldr	r2, [pc, #420]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a66      	ldr	r2, [pc, #408]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b64      	ldr	r3, [pc, #400]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fd71 	bl	80019b8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fd6d 	bl	80019b8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0ab      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x37e>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe fd5b 	bl	80019b8 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fd57 	bl	80019b8 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e095      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b48      	ldr	r3, [pc, #288]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a47      	ldr	r2, [pc, #284]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8081 	beq.w	8003046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f44:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d061      	beq.n	8003014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d146      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x4fc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fd2b 	bl	80019b8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe fd27 	bl	80019b8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e067      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f8e:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	492d      	ldr	r1, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a19      	ldr	r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	4927      	ldr	r1, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x4fc>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fcfb 	bl	80019b8 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fcf7 	bl	80019b8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e037      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46a>
 8002fe4:	e02f      	b.n	8003046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_RCC_OscConfig+0x4fc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fce4 	bl	80019b8 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fce0 	bl	80019b8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e020      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x498>
 8003012:	e018      	b.n	8003046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e013      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	429a      	cmp	r2, r3
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	42420060 	.word	0x42420060

0800305c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0d0      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d910      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	4965      	ldr	r1, [pc, #404]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b8      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	494d      	ldr	r1, [pc, #308]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d040      	beq.n	800317c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e073      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06b      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4936      	ldr	r1, [pc, #216]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe fc34 	bl	80019b8 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fc30 	bl	80019b8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e053      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d210      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	4922      	ldr	r1, [pc, #136]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e032      	b.n	8003212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f821 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1cc>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1d0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fb92 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40022000 	.word	0x40022000
 8003220:	40021000 	.word	0x40021000
 8003224:	08008f2c 	.word	0x08008f2c
 8003228:	20000000 	.word	0x20000000
 800322c:	20000004 	.word	0x20000004

08003230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	b490      	push	{r4, r7}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003238:	1d3c      	adds	r4, r7, #4
 800323a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800323c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003240:	f240 2301 	movw	r3, #513	; 0x201
 8003244:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d002      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x40>
 800326a:	2b08      	cmp	r3, #8
 800326c:	d003      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x46>
 800326e:	e02d      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003272:	623b      	str	r3, [r7, #32]
      break;
 8003274:	e02d      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003282:	4413      	add	r3, r2
 8003284:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003288:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c5b      	lsrs	r3, r3, #17
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032a2:	4413      	add	r3, r2
 80032a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ae:	fb02 f203 	mul.w	r2, r2, r3
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e004      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	623b      	str	r3, [r7, #32]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ce:	623b      	str	r3, [r7, #32]
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	6a3b      	ldr	r3, [r7, #32]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc90      	pop	{r4, r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	08008f1c 	.word	0x08008f1c
 80032e4:	40021000 	.word	0x40021000
 80032e8:	007a1200 	.word	0x007a1200
 80032ec:	003d0900 	.word	0x003d0900

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <HAL_RCC_GetHCLKFreq+0x10>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003308:	f7ff fff2 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	08008f3c 	.word	0x08008f3c

0800332c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003330:	f7ff ffde 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0adb      	lsrs	r3, r3, #11
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08008f3c 	.word	0x08008f3c

08003354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <RCC_Delay+0x34>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <RCC_Delay+0x38>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003370:	bf00      	nop
  }
  while (Delay --);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f9      	bne.n	8003370 <RCC_Delay+0x1c>
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	20000000 	.word	0x20000000
 800338c:	10624dd3 	.word	0x10624dd3

08003390 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d07d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b0:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
 80033c8:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d118      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a42      	ldr	r2, [pc, #264]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f0:	f7fe fae2 	bl	80019b8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	e008      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fe fade 	bl	80019b8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e06d      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02e      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	429a      	cmp	r2, r3
 8003432:	d027      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003434:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003444:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800344a:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe faad 	bl	80019b8 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe faa9 	bl	80019b8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e036      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4917      	ldr	r1, [pc, #92]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	4313      	orrs	r3, r2
 8003494:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	490b      	ldr	r1, [pc, #44]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42420440 	.word	0x42420440

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f836 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 fbda 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e041      	b.n	8003630 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f839 	bl	8003638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f000 fb8b 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
	...

0800364c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_TIM_PWM_Start+0x24>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e022      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d109      	bne.n	800368a <HAL_TIM_PWM_Start+0x3e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e015      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d109      	bne.n	80036a4 <HAL_TIM_PWM_Start+0x58>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e008      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e05e      	b.n	800377c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x82>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036cc:	e013      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0x92>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	e003      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd78 	bl	80041f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_TIM_PWM_Start+0x138>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d107      	bne.n	800371e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIM_PWM_Start+0x138>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIM_PWM_Start+0xfa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d009      	beq.n	8003746 <HAL_TIM_PWM_Start+0xfa>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_TIM_PWM_Start+0x13c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_PWM_Start+0xfa>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a12      	ldr	r2, [pc, #72]	; (800378c <HAL_TIM_PWM_Start+0x140>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d111      	bne.n	800376a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d010      	beq.n	800377a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	e007      	b.n	800377a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800

08003790 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e093      	b.n	80038cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fd feaf 	bl	800151c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fa85 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	4313      	orrs	r3, r2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003830:	f023 030c 	bic.w	r3, r3, #12
 8003834:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800383c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	4313      	orrs	r3, r2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	011a      	lsls	r2, r3, #4
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	031b      	lsls	r3, r3, #12
 8003860:	4313      	orrs	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4313      	orrs	r3, r2
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d110      	bne.n	8003926 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d001      	beq.n	8003914 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e069      	b.n	80039e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003924:	e031      	b.n	800398a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d110      	bne.n	800394e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003932:	7b3b      	ldrb	r3, [r7, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e055      	b.n	80039e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394c:	e01d      	b.n	800398a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800395a:	7b7b      	ldrb	r3, [r7, #13]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d102      	bne.n	8003966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003960:	7b3b      	ldrb	r3, [r7, #12]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d001      	beq.n	800396a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e03e      	b.n	80039e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_TIM_Encoder_Start+0xc4>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d008      	beq.n	80039a8 <HAL_TIM_Encoder_Start+0xd4>
 8003996:	e00f      	b.n	80039b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fc27 	bl	80041f4 <TIM_CCxChannelCmd>
      break;
 80039a6:	e016      	b.n	80039d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2201      	movs	r2, #1
 80039ae:	2104      	movs	r1, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc1f 	bl	80041f4 <TIM_CCxChannelCmd>
      break;
 80039b6:	e00e      	b.n	80039d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fc17 	bl	80041f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	2104      	movs	r1, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fc10 	bl	80041f4 <TIM_CCxChannelCmd>
      break;
 80039d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0ac      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f200 809f 	bhi.w	8003b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003b59 	.word	0x08003b59
 8003a28:	08003b59 	.word	0x08003b59
 8003a2c:	08003b59 	.word	0x08003b59
 8003a30:	08003a95 	.word	0x08003a95
 8003a34:	08003b59 	.word	0x08003b59
 8003a38:	08003b59 	.word	0x08003b59
 8003a3c:	08003b59 	.word	0x08003b59
 8003a40:	08003ad7 	.word	0x08003ad7
 8003a44:	08003b59 	.word	0x08003b59
 8003a48:	08003b59 	.word	0x08003b59
 8003a4c:	08003b59 	.word	0x08003b59
 8003a50:	08003b17 	.word	0x08003b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f9ac 	bl	8003db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
      break;
 8003a92:	e062      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9f2 	bl	8003e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	619a      	str	r2, [r3, #24]
      break;
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa3b 	bl	8003f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0204 	bic.w	r2, r2, #4
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
      break;
 8003b14:	e021      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa85 	bl	800402c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	61da      	str	r2, [r3, #28]
      break;
 8003b56:	e000      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIM_ConfigClockSource+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0b3      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x180>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbc:	d03e      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0xd0>
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	f200 8087 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	f000 8085 	beq.w	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d87f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d01a      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xa2>
 8003bd8:	2b70      	cmp	r3, #112	; 0x70
 8003bda:	d87b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d050      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x116>
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d877      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d03c      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xf6>
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d873      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d058      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x136>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d86f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d064      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x156>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d86b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d060      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x156>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d867      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05c      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x156>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d05a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c0c:	e062      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f000 faca 	bl	80041b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	609a      	str	r2, [r3, #8]
      break;
 8003c3a:	e04e      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f000 fab3 	bl	80041b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5e:	609a      	str	r2, [r3, #8]
      break;
 8003c60:	e03b      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fa2a 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2150      	movs	r1, #80	; 0x50
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fa81 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e02b      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fa48 	bl	8004124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2160      	movs	r1, #96	; 0x60
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa71 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e01b      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 fa0a 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa61 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e00b      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 fa58 	bl	8004182 <TIM_ITRx_SetConfig>
        break;
 8003cd2:	e002      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <TIM_Base_SetConfig+0xbc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x30>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <TIM_Base_SetConfig+0xc0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <TIM_Base_SetConfig+0xbc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <TIM_Base_SetConfig+0xc0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <TIM_Base_SetConfig+0xb8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d103      	bne.n	8003d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	615a      	str	r2, [r3, #20]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800

08003db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0302 	bic.w	r3, r3, #2
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <TIM_OC1_SetConfig+0xc8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10c      	bne.n	8003e2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0308 	bic.w	r3, r3, #8
 8003e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <TIM_OC1_SetConfig+0xc8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d111      	bne.n	8003e5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00

08003e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0210 	bic.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0320 	bic.w	r3, r3, #32
 8003ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_OC2_SetConfig+0xd0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10d      	bne.n	8003f00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <TIM_OC2_SetConfig+0xd0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d113      	bne.n	8003f30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00

08003f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <TIM_OC3_SetConfig+0xd0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10d      	bne.n	8003fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC3_SetConfig+0xd0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40012c00 	.word	0x40012c00

0800402c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <TIM_OC4_SetConfig+0x98>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d109      	bne.n	80040a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40012c00 	.word	0x40012c00

080040c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 030a 	bic.w	r3, r3, #10
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f023 0210 	bic.w	r2, r3, #16
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800414e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	031b      	lsls	r3, r3, #12
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 0307 	orr.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	021a      	lsls	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	431a      	orrs	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	609a      	str	r2, [r3, #8]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2201      	movs	r2, #1
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1a      	ldr	r2, [r3, #32]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	43db      	mvns	r3, r3
 8004216:	401a      	ands	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e046      	b.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d009      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10c      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800

080042f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e03f      	b.n	800438a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd f988 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	; 0x24
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f905 	bl	800454c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b08a      	sub	sp, #40	; 0x28
 8004396:	af02      	add	r7, sp, #8
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d17c      	bne.n	80044ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_UART_Transmit+0x2c>
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e075      	b.n	80044ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x3e>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e06e      	b.n	80044ae <HAL_UART_Transmit+0x11c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2221      	movs	r2, #33	; 0x21
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fae7 	bl	80019b8 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d108      	bne.n	8004414 <HAL_UART_Transmit+0x82>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e003      	b.n	800441c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004424:	e02a      	b.n	800447c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f840 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e036      	b.n	80044ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	3302      	adds	r3, #2
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e007      	b.n	800446e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1cf      	bne.n	8004426 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2140      	movs	r1, #64	; 0x40
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f810 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c6:	e02c      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d028      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044d6:	f7fd fa6f 	bl	80019b8 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d21d      	bcs.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00f      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d0c3      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004586:	f023 030c 	bic.w	r3, r3, #12
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	430b      	orrs	r3, r1
 8004592:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <UART_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe feba 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	e002      	b.n	80045c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fea2 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 80045c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009a      	lsls	r2, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	4a22      	ldr	r2, [pc, #136]	; (8004664 <UART_SetConfig+0x118>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	0119      	lsls	r1, r3, #4
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009a      	lsls	r2, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <UART_SetConfig+0x118>)
 80045fa:	fba3 0302 	umull	r0, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	fb00 f303 	mul.w	r3, r0, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3332      	adds	r3, #50	; 0x32
 800460c:	4a15      	ldr	r2, [pc, #84]	; (8004664 <UART_SetConfig+0x118>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004618:	4419      	add	r1, r3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009a      	lsls	r2, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004630:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <UART_SetConfig+0x118>)
 8004632:	fba3 0302 	umull	r0, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2064      	movs	r0, #100	; 0x64
 800463a:	fb00 f303 	mul.w	r3, r0, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	3332      	adds	r3, #50	; 0x32
 8004644:	4a07      	ldr	r2, [pc, #28]	; (8004664 <UART_SetConfig+0x118>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	440a      	add	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40013800 	.word	0x40013800
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <__errno>:
 8004668:	4b01      	ldr	r3, [pc, #4]	; (8004670 <__errno+0x8>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	2000000c 	.word	0x2000000c

08004674 <__libc_init_array>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	2600      	movs	r6, #0
 8004678:	4d0c      	ldr	r5, [pc, #48]	; (80046ac <__libc_init_array+0x38>)
 800467a:	4c0d      	ldr	r4, [pc, #52]	; (80046b0 <__libc_init_array+0x3c>)
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	42a6      	cmp	r6, r4
 8004682:	d109      	bne.n	8004698 <__libc_init_array+0x24>
 8004684:	f004 fc2a 	bl	8008edc <_init>
 8004688:	2600      	movs	r6, #0
 800468a:	4d0a      	ldr	r5, [pc, #40]	; (80046b4 <__libc_init_array+0x40>)
 800468c:	4c0a      	ldr	r4, [pc, #40]	; (80046b8 <__libc_init_array+0x44>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	42a6      	cmp	r6, r4
 8004694:	d105      	bne.n	80046a2 <__libc_init_array+0x2e>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	f855 3b04 	ldr.w	r3, [r5], #4
 800469c:	4798      	blx	r3
 800469e:	3601      	adds	r6, #1
 80046a0:	e7ee      	b.n	8004680 <__libc_init_array+0xc>
 80046a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a6:	4798      	blx	r3
 80046a8:	3601      	adds	r6, #1
 80046aa:	e7f2      	b.n	8004692 <__libc_init_array+0x1e>
 80046ac:	080093fc 	.word	0x080093fc
 80046b0:	080093fc 	.word	0x080093fc
 80046b4:	080093fc 	.word	0x080093fc
 80046b8:	08009400 	.word	0x08009400

080046bc <memset>:
 80046bc:	4603      	mov	r3, r0
 80046be:	4402      	add	r2, r0
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <memset+0xa>
 80046c4:	4770      	bx	lr
 80046c6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ca:	e7f9      	b.n	80046c0 <memset+0x4>

080046cc <__cvt>:
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d2:	461f      	mov	r7, r3
 80046d4:	bfbb      	ittet	lt
 80046d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046da:	461f      	movlt	r7, r3
 80046dc:	2300      	movge	r3, #0
 80046de:	232d      	movlt	r3, #45	; 0x2d
 80046e0:	b088      	sub	sp, #32
 80046e2:	4614      	mov	r4, r2
 80046e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046e8:	7013      	strb	r3, [r2, #0]
 80046ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046f0:	f023 0820 	bic.w	r8, r3, #32
 80046f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046f8:	d005      	beq.n	8004706 <__cvt+0x3a>
 80046fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046fe:	d100      	bne.n	8004702 <__cvt+0x36>
 8004700:	3501      	adds	r5, #1
 8004702:	2302      	movs	r3, #2
 8004704:	e000      	b.n	8004708 <__cvt+0x3c>
 8004706:	2303      	movs	r3, #3
 8004708:	aa07      	add	r2, sp, #28
 800470a:	9204      	str	r2, [sp, #16]
 800470c:	aa06      	add	r2, sp, #24
 800470e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004712:	e9cd 3500 	strd	r3, r5, [sp]
 8004716:	4622      	mov	r2, r4
 8004718:	463b      	mov	r3, r7
 800471a:	f001 fda1 	bl	8006260 <_dtoa_r>
 800471e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004722:	4606      	mov	r6, r0
 8004724:	d102      	bne.n	800472c <__cvt+0x60>
 8004726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004728:	07db      	lsls	r3, r3, #31
 800472a:	d522      	bpl.n	8004772 <__cvt+0xa6>
 800472c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004730:	eb06 0905 	add.w	r9, r6, r5
 8004734:	d110      	bne.n	8004758 <__cvt+0x8c>
 8004736:	7833      	ldrb	r3, [r6, #0]
 8004738:	2b30      	cmp	r3, #48	; 0x30
 800473a:	d10a      	bne.n	8004752 <__cvt+0x86>
 800473c:	2200      	movs	r2, #0
 800473e:	2300      	movs	r3, #0
 8004740:	4620      	mov	r0, r4
 8004742:	4639      	mov	r1, r7
 8004744:	f7fc f930 	bl	80009a8 <__aeabi_dcmpeq>
 8004748:	b918      	cbnz	r0, 8004752 <__cvt+0x86>
 800474a:	f1c5 0501 	rsb	r5, r5, #1
 800474e:	f8ca 5000 	str.w	r5, [sl]
 8004752:	f8da 3000 	ldr.w	r3, [sl]
 8004756:	4499      	add	r9, r3
 8004758:	2200      	movs	r2, #0
 800475a:	2300      	movs	r3, #0
 800475c:	4620      	mov	r0, r4
 800475e:	4639      	mov	r1, r7
 8004760:	f7fc f922 	bl	80009a8 <__aeabi_dcmpeq>
 8004764:	b108      	cbz	r0, 800476a <__cvt+0x9e>
 8004766:	f8cd 901c 	str.w	r9, [sp, #28]
 800476a:	2230      	movs	r2, #48	; 0x30
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	454b      	cmp	r3, r9
 8004770:	d307      	bcc.n	8004782 <__cvt+0xb6>
 8004772:	4630      	mov	r0, r6
 8004774:	9b07      	ldr	r3, [sp, #28]
 8004776:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004778:	1b9b      	subs	r3, r3, r6
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	b008      	add	sp, #32
 800477e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	9107      	str	r1, [sp, #28]
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e7f0      	b.n	800476c <__cvt+0xa0>

0800478a <__exponent>:
 800478a:	4603      	mov	r3, r0
 800478c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478e:	2900      	cmp	r1, #0
 8004790:	f803 2b02 	strb.w	r2, [r3], #2
 8004794:	bfb6      	itet	lt
 8004796:	222d      	movlt	r2, #45	; 0x2d
 8004798:	222b      	movge	r2, #43	; 0x2b
 800479a:	4249      	neglt	r1, r1
 800479c:	2909      	cmp	r1, #9
 800479e:	7042      	strb	r2, [r0, #1]
 80047a0:	dd2b      	ble.n	80047fa <__exponent+0x70>
 80047a2:	f10d 0407 	add.w	r4, sp, #7
 80047a6:	46a4      	mov	ip, r4
 80047a8:	270a      	movs	r7, #10
 80047aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80047ae:	460a      	mov	r2, r1
 80047b0:	46a6      	mov	lr, r4
 80047b2:	fb07 1516 	mls	r5, r7, r6, r1
 80047b6:	2a63      	cmp	r2, #99	; 0x63
 80047b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047bc:	4631      	mov	r1, r6
 80047be:	f104 34ff 	add.w	r4, r4, #4294967295
 80047c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047c6:	dcf0      	bgt.n	80047aa <__exponent+0x20>
 80047c8:	3130      	adds	r1, #48	; 0x30
 80047ca:	f1ae 0502 	sub.w	r5, lr, #2
 80047ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047d2:	4629      	mov	r1, r5
 80047d4:	1c44      	adds	r4, r0, #1
 80047d6:	4561      	cmp	r1, ip
 80047d8:	d30a      	bcc.n	80047f0 <__exponent+0x66>
 80047da:	f10d 0209 	add.w	r2, sp, #9
 80047de:	eba2 020e 	sub.w	r2, r2, lr
 80047e2:	4565      	cmp	r5, ip
 80047e4:	bf88      	it	hi
 80047e6:	2200      	movhi	r2, #0
 80047e8:	4413      	add	r3, r2
 80047ea:	1a18      	subs	r0, r3, r0
 80047ec:	b003      	add	sp, #12
 80047ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047f8:	e7ed      	b.n	80047d6 <__exponent+0x4c>
 80047fa:	2330      	movs	r3, #48	; 0x30
 80047fc:	3130      	adds	r1, #48	; 0x30
 80047fe:	7083      	strb	r3, [r0, #2]
 8004800:	70c1      	strb	r1, [r0, #3]
 8004802:	1d03      	adds	r3, r0, #4
 8004804:	e7f1      	b.n	80047ea <__exponent+0x60>
	...

08004808 <_printf_float>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	b091      	sub	sp, #68	; 0x44
 800480e:	460c      	mov	r4, r1
 8004810:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004814:	4616      	mov	r6, r2
 8004816:	461f      	mov	r7, r3
 8004818:	4605      	mov	r5, r0
 800481a:	f002 fe75 	bl	8007508 <_localeconv_r>
 800481e:	6803      	ldr	r3, [r0, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	9309      	str	r3, [sp, #36]	; 0x24
 8004824:	f7fb fc94 	bl	8000150 <strlen>
 8004828:	2300      	movs	r3, #0
 800482a:	930e      	str	r3, [sp, #56]	; 0x38
 800482c:	f8d8 3000 	ldr.w	r3, [r8]
 8004830:	900a      	str	r0, [sp, #40]	; 0x28
 8004832:	3307      	adds	r3, #7
 8004834:	f023 0307 	bic.w	r3, r3, #7
 8004838:	f103 0208 	add.w	r2, r3, #8
 800483c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004840:	f8d4 b000 	ldr.w	fp, [r4]
 8004844:	f8c8 2000 	str.w	r2, [r8]
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004850:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004854:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004858:	930b      	str	r3, [sp, #44]	; 0x2c
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	4640      	mov	r0, r8
 8004860:	4b9c      	ldr	r3, [pc, #624]	; (8004ad4 <_printf_float+0x2cc>)
 8004862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004864:	f7fc f8d2 	bl	8000a0c <__aeabi_dcmpun>
 8004868:	bb70      	cbnz	r0, 80048c8 <_printf_float+0xc0>
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	4640      	mov	r0, r8
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <_printf_float+0x2cc>)
 8004872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004874:	f7fc f8ac 	bl	80009d0 <__aeabi_dcmple>
 8004878:	bb30      	cbnz	r0, 80048c8 <_printf_float+0xc0>
 800487a:	2200      	movs	r2, #0
 800487c:	2300      	movs	r3, #0
 800487e:	4640      	mov	r0, r8
 8004880:	4651      	mov	r1, sl
 8004882:	f7fc f89b 	bl	80009bc <__aeabi_dcmplt>
 8004886:	b110      	cbz	r0, 800488e <_printf_float+0x86>
 8004888:	232d      	movs	r3, #45	; 0x2d
 800488a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488e:	4b92      	ldr	r3, [pc, #584]	; (8004ad8 <_printf_float+0x2d0>)
 8004890:	4892      	ldr	r0, [pc, #584]	; (8004adc <_printf_float+0x2d4>)
 8004892:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004896:	bf94      	ite	ls
 8004898:	4698      	movls	r8, r3
 800489a:	4680      	movhi	r8, r0
 800489c:	2303      	movs	r3, #3
 800489e:	f04f 0a00 	mov.w	sl, #0
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	f02b 0304 	bic.w	r3, fp, #4
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	4633      	mov	r3, r6
 80048ac:	4621      	mov	r1, r4
 80048ae:	4628      	mov	r0, r5
 80048b0:	9700      	str	r7, [sp, #0]
 80048b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80048b4:	f000 f9d4 	bl	8004c60 <_printf_common>
 80048b8:	3001      	adds	r0, #1
 80048ba:	f040 8090 	bne.w	80049de <_printf_float+0x1d6>
 80048be:	f04f 30ff 	mov.w	r0, #4294967295
 80048c2:	b011      	add	sp, #68	; 0x44
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c8:	4642      	mov	r2, r8
 80048ca:	4653      	mov	r3, sl
 80048cc:	4640      	mov	r0, r8
 80048ce:	4651      	mov	r1, sl
 80048d0:	f7fc f89c 	bl	8000a0c <__aeabi_dcmpun>
 80048d4:	b148      	cbz	r0, 80048ea <_printf_float+0xe2>
 80048d6:	f1ba 0f00 	cmp.w	sl, #0
 80048da:	bfb8      	it	lt
 80048dc:	232d      	movlt	r3, #45	; 0x2d
 80048de:	4880      	ldr	r0, [pc, #512]	; (8004ae0 <_printf_float+0x2d8>)
 80048e0:	bfb8      	it	lt
 80048e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048e6:	4b7f      	ldr	r3, [pc, #508]	; (8004ae4 <_printf_float+0x2dc>)
 80048e8:	e7d3      	b.n	8004892 <_printf_float+0x8a>
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	d142      	bne.n	800497a <_printf_float+0x172>
 80048f4:	2306      	movs	r3, #6
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	9206      	str	r2, [sp, #24]
 80048fc:	aa0e      	add	r2, sp, #56	; 0x38
 80048fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004902:	aa0d      	add	r2, sp, #52	; 0x34
 8004904:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004908:	9203      	str	r2, [sp, #12]
 800490a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800490e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	4642      	mov	r2, r8
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	4628      	mov	r0, r5
 800491c:	4653      	mov	r3, sl
 800491e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004920:	f7ff fed4 	bl	80046cc <__cvt>
 8004924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004926:	4680      	mov	r8, r0
 8004928:	2947      	cmp	r1, #71	; 0x47
 800492a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800492c:	d108      	bne.n	8004940 <_printf_float+0x138>
 800492e:	1cc8      	adds	r0, r1, #3
 8004930:	db02      	blt.n	8004938 <_printf_float+0x130>
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	4299      	cmp	r1, r3
 8004936:	dd40      	ble.n	80049ba <_printf_float+0x1b2>
 8004938:	f1a9 0902 	sub.w	r9, r9, #2
 800493c:	fa5f f989 	uxtb.w	r9, r9
 8004940:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004944:	d81f      	bhi.n	8004986 <_printf_float+0x17e>
 8004946:	464a      	mov	r2, r9
 8004948:	3901      	subs	r1, #1
 800494a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800494e:	910d      	str	r1, [sp, #52]	; 0x34
 8004950:	f7ff ff1b 	bl	800478a <__exponent>
 8004954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004956:	4682      	mov	sl, r0
 8004958:	1813      	adds	r3, r2, r0
 800495a:	2a01      	cmp	r2, #1
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	dc02      	bgt.n	8004966 <_printf_float+0x15e>
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	07d2      	lsls	r2, r2, #31
 8004964:	d501      	bpl.n	800496a <_printf_float+0x162>
 8004966:	3301      	adds	r3, #1
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800496e:	2b00      	cmp	r3, #0
 8004970:	d09b      	beq.n	80048aa <_printf_float+0xa2>
 8004972:	232d      	movs	r3, #45	; 0x2d
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	e797      	b.n	80048aa <_printf_float+0xa2>
 800497a:	2947      	cmp	r1, #71	; 0x47
 800497c:	d1bc      	bne.n	80048f8 <_printf_float+0xf0>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ba      	bne.n	80048f8 <_printf_float+0xf0>
 8004982:	2301      	movs	r3, #1
 8004984:	e7b7      	b.n	80048f6 <_printf_float+0xee>
 8004986:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800498a:	d118      	bne.n	80049be <_printf_float+0x1b6>
 800498c:	2900      	cmp	r1, #0
 800498e:	6863      	ldr	r3, [r4, #4]
 8004990:	dd0b      	ble.n	80049aa <_printf_float+0x1a2>
 8004992:	6121      	str	r1, [r4, #16]
 8004994:	b913      	cbnz	r3, 800499c <_printf_float+0x194>
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	07d0      	lsls	r0, r2, #31
 800499a:	d502      	bpl.n	80049a2 <_printf_float+0x19a>
 800499c:	3301      	adds	r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	f04f 0a00 	mov.w	sl, #0
 80049a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80049a8:	e7df      	b.n	800496a <_printf_float+0x162>
 80049aa:	b913      	cbnz	r3, 80049b2 <_printf_float+0x1aa>
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	07d2      	lsls	r2, r2, #31
 80049b0:	d501      	bpl.n	80049b6 <_printf_float+0x1ae>
 80049b2:	3302      	adds	r3, #2
 80049b4:	e7f4      	b.n	80049a0 <_printf_float+0x198>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e7f2      	b.n	80049a0 <_printf_float+0x198>
 80049ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c0:	4299      	cmp	r1, r3
 80049c2:	db05      	blt.n	80049d0 <_printf_float+0x1c8>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	6121      	str	r1, [r4, #16]
 80049c8:	07d8      	lsls	r0, r3, #31
 80049ca:	d5ea      	bpl.n	80049a2 <_printf_float+0x19a>
 80049cc:	1c4b      	adds	r3, r1, #1
 80049ce:	e7e7      	b.n	80049a0 <_printf_float+0x198>
 80049d0:	2900      	cmp	r1, #0
 80049d2:	bfcc      	ite	gt
 80049d4:	2201      	movgt	r2, #1
 80049d6:	f1c1 0202 	rsble	r2, r1, #2
 80049da:	4413      	add	r3, r2
 80049dc:	e7e0      	b.n	80049a0 <_printf_float+0x198>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	055a      	lsls	r2, r3, #21
 80049e2:	d407      	bmi.n	80049f4 <_printf_float+0x1ec>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	4642      	mov	r2, r8
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	d12b      	bne.n	8004a4a <_printf_float+0x242>
 80049f2:	e764      	b.n	80048be <_printf_float+0xb6>
 80049f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049f8:	f240 80dd 	bls.w	8004bb6 <_printf_float+0x3ae>
 80049fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	f7fb ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d033      	beq.n	8004a74 <_printf_float+0x26c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	4a35      	ldr	r2, [pc, #212]	; (8004ae8 <_printf_float+0x2e0>)
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af51 	beq.w	80048be <_printf_float+0xb6>
 8004a1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a20:	429a      	cmp	r2, r3
 8004a22:	db02      	blt.n	8004a2a <_printf_float+0x222>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	07d8      	lsls	r0, r3, #31
 8004a28:	d50f      	bpl.n	8004a4a <_printf_float+0x242>
 8004a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f af42 	beq.w	80048be <_printf_float+0xb6>
 8004a3a:	f04f 0800 	mov.w	r8, #0
 8004a3e:	f104 091a 	add.w	r9, r4, #26
 8004a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4543      	cmp	r3, r8
 8004a48:	dc09      	bgt.n	8004a5e <_printf_float+0x256>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	079b      	lsls	r3, r3, #30
 8004a4e:	f100 8102 	bmi.w	8004c56 <_printf_float+0x44e>
 8004a52:	68e0      	ldr	r0, [r4, #12]
 8004a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a56:	4298      	cmp	r0, r3
 8004a58:	bfb8      	it	lt
 8004a5a:	4618      	movlt	r0, r3
 8004a5c:	e731      	b.n	80048c2 <_printf_float+0xba>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	464a      	mov	r2, r9
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f af28 	beq.w	80048be <_printf_float+0xb6>
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	e7e6      	b.n	8004a42 <_printf_float+0x23a>
 8004a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	dc38      	bgt.n	8004aec <_printf_float+0x2e4>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4628      	mov	r0, r5
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <_printf_float+0x2e0>)
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f af1a 	beq.w	80048be <_printf_float+0xb6>
 8004a8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d102      	bne.n	8004a98 <_printf_float+0x290>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	07d9      	lsls	r1, r3, #31
 8004a96:	d5d8      	bpl.n	8004a4a <_printf_float+0x242>
 8004a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f af0b 	beq.w	80048be <_printf_float+0xb6>
 8004aa8:	f04f 0900 	mov.w	r9, #0
 8004aac:	f104 0a1a 	add.w	sl, r4, #26
 8004ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab2:	425b      	negs	r3, r3
 8004ab4:	454b      	cmp	r3, r9
 8004ab6:	dc01      	bgt.n	8004abc <_printf_float+0x2b4>
 8004ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aba:	e794      	b.n	80049e6 <_printf_float+0x1de>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4652      	mov	r2, sl
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f aef9 	beq.w	80048be <_printf_float+0xb6>
 8004acc:	f109 0901 	add.w	r9, r9, #1
 8004ad0:	e7ee      	b.n	8004ab0 <_printf_float+0x2a8>
 8004ad2:	bf00      	nop
 8004ad4:	7fefffff 	.word	0x7fefffff
 8004ad8:	08008f48 	.word	0x08008f48
 8004adc:	08008f4c 	.word	0x08008f4c
 8004ae0:	08008f54 	.word	0x08008f54
 8004ae4:	08008f50 	.word	0x08008f50
 8004ae8:	08008f58 	.word	0x08008f58
 8004aec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bfa8      	it	ge
 8004af4:	461a      	movge	r2, r3
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	4691      	mov	r9, r2
 8004afa:	dc37      	bgt.n	8004b6c <_printf_float+0x364>
 8004afc:	f04f 0b00 	mov.w	fp, #0
 8004b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b04:	f104 021a 	add.w	r2, r4, #26
 8004b08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b0c:	ebaa 0309 	sub.w	r3, sl, r9
 8004b10:	455b      	cmp	r3, fp
 8004b12:	dc33      	bgt.n	8004b7c <_printf_float+0x374>
 8004b14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	db3b      	blt.n	8004b94 <_printf_float+0x38c>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07da      	lsls	r2, r3, #31
 8004b20:	d438      	bmi.n	8004b94 <_printf_float+0x38c>
 8004b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b26:	eba2 030a 	sub.w	r3, r2, sl
 8004b2a:	eba2 0901 	sub.w	r9, r2, r1
 8004b2e:	4599      	cmp	r9, r3
 8004b30:	bfa8      	it	ge
 8004b32:	4699      	movge	r9, r3
 8004b34:	f1b9 0f00 	cmp.w	r9, #0
 8004b38:	dc34      	bgt.n	8004ba4 <_printf_float+0x39c>
 8004b3a:	f04f 0800 	mov.w	r8, #0
 8004b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b42:	f104 0a1a 	add.w	sl, r4, #26
 8004b46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	eba3 0309 	sub.w	r3, r3, r9
 8004b50:	4543      	cmp	r3, r8
 8004b52:	f77f af7a 	ble.w	8004a4a <_printf_float+0x242>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f aeac 	beq.w	80048be <_printf_float+0xb6>
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	e7ec      	b.n	8004b46 <_printf_float+0x33e>
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4642      	mov	r2, r8
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	d1c0      	bne.n	8004afc <_printf_float+0x2f4>
 8004b7a:	e6a0      	b.n	80048be <_printf_float+0xb6>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	f43f ae99 	beq.w	80048be <_printf_float+0xb6>
 8004b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b8e:	f10b 0b01 	add.w	fp, fp, #1
 8004b92:	e7b9      	b.n	8004b08 <_printf_float+0x300>
 8004b94:	4631      	mov	r1, r6
 8004b96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d1bf      	bne.n	8004b22 <_printf_float+0x31a>
 8004ba2:	e68c      	b.n	80048be <_printf_float+0xb6>
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	eb08 020a 	add.w	r2, r8, sl
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d1c2      	bne.n	8004b3a <_printf_float+0x332>
 8004bb4:	e683      	b.n	80048be <_printf_float+0xb6>
 8004bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bb8:	2a01      	cmp	r2, #1
 8004bba:	dc01      	bgt.n	8004bc0 <_printf_float+0x3b8>
 8004bbc:	07db      	lsls	r3, r3, #31
 8004bbe:	d537      	bpl.n	8004c30 <_printf_float+0x428>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f43f ae77 	beq.w	80048be <_printf_float+0xb6>
 8004bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f ae6f 	beq.w	80048be <_printf_float+0xb6>
 8004be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004be4:	2200      	movs	r2, #0
 8004be6:	2300      	movs	r3, #0
 8004be8:	f7fb fede 	bl	80009a8 <__aeabi_dcmpeq>
 8004bec:	b9d8      	cbnz	r0, 8004c26 <_printf_float+0x41e>
 8004bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf0:	f108 0201 	add.w	r2, r8, #1
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d10e      	bne.n	8004c1e <_printf_float+0x416>
 8004c00:	e65d      	b.n	80048be <_printf_float+0xb6>
 8004c02:	2301      	movs	r3, #1
 8004c04:	464a      	mov	r2, r9
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f43f ae56 	beq.w	80048be <_printf_float+0xb6>
 8004c12:	f108 0801 	add.w	r8, r8, #1
 8004c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	4543      	cmp	r3, r8
 8004c1c:	dcf1      	bgt.n	8004c02 <_printf_float+0x3fa>
 8004c1e:	4653      	mov	r3, sl
 8004c20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c24:	e6e0      	b.n	80049e8 <_printf_float+0x1e0>
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	f104 091a 	add.w	r9, r4, #26
 8004c2e:	e7f2      	b.n	8004c16 <_printf_float+0x40e>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4642      	mov	r2, r8
 8004c34:	e7df      	b.n	8004bf6 <_printf_float+0x3ee>
 8004c36:	2301      	movs	r3, #1
 8004c38:	464a      	mov	r2, r9
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f ae3c 	beq.w	80048be <_printf_float+0xb6>
 8004c46:	f108 0801 	add.w	r8, r8, #1
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c4e:	1a5b      	subs	r3, r3, r1
 8004c50:	4543      	cmp	r3, r8
 8004c52:	dcf0      	bgt.n	8004c36 <_printf_float+0x42e>
 8004c54:	e6fd      	b.n	8004a52 <_printf_float+0x24a>
 8004c56:	f04f 0800 	mov.w	r8, #0
 8004c5a:	f104 0919 	add.w	r9, r4, #25
 8004c5e:	e7f4      	b.n	8004c4a <_printf_float+0x442>

08004c60 <_printf_common>:
 8004c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	4616      	mov	r6, r2
 8004c66:	4699      	mov	r9, r3
 8004c68:	688a      	ldr	r2, [r1, #8]
 8004c6a:	690b      	ldr	r3, [r1, #16]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bfb8      	it	lt
 8004c72:	4613      	movlt	r3, r2
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c80:	b10a      	cbz	r2, 8004c86 <_printf_common+0x26>
 8004c82:	3301      	adds	r3, #1
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	0699      	lsls	r1, r3, #26
 8004c8a:	bf42      	ittt	mi
 8004c8c:	6833      	ldrmi	r3, [r6, #0]
 8004c8e:	3302      	addmi	r3, #2
 8004c90:	6033      	strmi	r3, [r6, #0]
 8004c92:	6825      	ldr	r5, [r4, #0]
 8004c94:	f015 0506 	ands.w	r5, r5, #6
 8004c98:	d106      	bne.n	8004ca8 <_printf_common+0x48>
 8004c9a:	f104 0a19 	add.w	sl, r4, #25
 8004c9e:	68e3      	ldr	r3, [r4, #12]
 8004ca0:	6832      	ldr	r2, [r6, #0]
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	42ab      	cmp	r3, r5
 8004ca6:	dc28      	bgt.n	8004cfa <_printf_common+0x9a>
 8004ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cac:	1e13      	subs	r3, r2, #0
 8004cae:	6822      	ldr	r2, [r4, #0]
 8004cb0:	bf18      	it	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	0692      	lsls	r2, r2, #26
 8004cb6:	d42d      	bmi.n	8004d14 <_printf_common+0xb4>
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d020      	beq.n	8004d08 <_printf_common+0xa8>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	68e5      	ldr	r5, [r4, #12]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf18      	it	ne
 8004cd2:	2500      	movne	r5, #0
 8004cd4:	6832      	ldr	r2, [r6, #0]
 8004cd6:	f04f 0600 	mov.w	r6, #0
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	bf08      	it	eq
 8004cde:	1aad      	subeq	r5, r5, r2
 8004ce0:	6922      	ldr	r2, [r4, #16]
 8004ce2:	bf08      	it	eq
 8004ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bfc4      	itt	gt
 8004cec:	1a9b      	subgt	r3, r3, r2
 8004cee:	18ed      	addgt	r5, r5, r3
 8004cf0:	341a      	adds	r4, #26
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d11a      	bne.n	8004d2c <_printf_common+0xcc>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e008      	b.n	8004d0c <_printf_common+0xac>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4638      	mov	r0, r7
 8004d02:	47c0      	blx	r8
 8004d04:	3001      	adds	r0, #1
 8004d06:	d103      	bne.n	8004d10 <_printf_common+0xb0>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7c4      	b.n	8004c9e <_printf_common+0x3e>
 8004d14:	2030      	movs	r0, #48	; 0x30
 8004d16:	18e1      	adds	r1, r4, r3
 8004d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d22:	4422      	add	r2, r4
 8004d24:	3302      	adds	r3, #2
 8004d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d2a:	e7c5      	b.n	8004cb8 <_printf_common+0x58>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0e6      	beq.n	8004d08 <_printf_common+0xa8>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7d9      	b.n	8004cf2 <_printf_common+0x92>
	...

08004d40 <_printf_i>:
 8004d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	460c      	mov	r4, r1
 8004d46:	7e27      	ldrb	r7, [r4, #24]
 8004d48:	4691      	mov	r9, r2
 8004d4a:	2f78      	cmp	r7, #120	; 0x78
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	469a      	mov	sl, r3
 8004d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d56:	d807      	bhi.n	8004d68 <_printf_i+0x28>
 8004d58:	2f62      	cmp	r7, #98	; 0x62
 8004d5a:	d80a      	bhi.n	8004d72 <_printf_i+0x32>
 8004d5c:	2f00      	cmp	r7, #0
 8004d5e:	f000 80d9 	beq.w	8004f14 <_printf_i+0x1d4>
 8004d62:	2f58      	cmp	r7, #88	; 0x58
 8004d64:	f000 80a4 	beq.w	8004eb0 <_printf_i+0x170>
 8004d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d70:	e03a      	b.n	8004de8 <_printf_i+0xa8>
 8004d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d76:	2b15      	cmp	r3, #21
 8004d78:	d8f6      	bhi.n	8004d68 <_printf_i+0x28>
 8004d7a:	a001      	add	r0, pc, #4	; (adr r0, 8004d80 <_printf_i+0x40>)
 8004d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d80:	08004dd9 	.word	0x08004dd9
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004d69 	.word	0x08004d69
 8004d8c:	08004d69 	.word	0x08004d69
 8004d90:	08004d69 	.word	0x08004d69
 8004d94:	08004d69 	.word	0x08004d69
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004d69 	.word	0x08004d69
 8004da0:	08004d69 	.word	0x08004d69
 8004da4:	08004d69 	.word	0x08004d69
 8004da8:	08004d69 	.word	0x08004d69
 8004dac:	08004efb 	.word	0x08004efb
 8004db0:	08004e1d 	.word	0x08004e1d
 8004db4:	08004edd 	.word	0x08004edd
 8004db8:	08004d69 	.word	0x08004d69
 8004dbc:	08004d69 	.word	0x08004d69
 8004dc0:	08004f1d 	.word	0x08004f1d
 8004dc4:	08004d69 	.word	0x08004d69
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d69 	.word	0x08004d69
 8004dd0:	08004d69 	.word	0x08004d69
 8004dd4:	08004ee5 	.word	0x08004ee5
 8004dd8:	680b      	ldr	r3, [r1, #0]
 8004dda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	600a      	str	r2, [r1, #0]
 8004de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0a4      	b.n	8004f36 <_printf_i+0x1f6>
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	6808      	ldr	r0, [r1, #0]
 8004df0:	062e      	lsls	r6, r5, #24
 8004df2:	f100 0304 	add.w	r3, r0, #4
 8004df6:	d50a      	bpl.n	8004e0e <_printf_i+0xce>
 8004df8:	6805      	ldr	r5, [r0, #0]
 8004dfa:	600b      	str	r3, [r1, #0]
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	da03      	bge.n	8004e08 <_printf_i+0xc8>
 8004e00:	232d      	movs	r3, #45	; 0x2d
 8004e02:	426d      	negs	r5, r5
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	230a      	movs	r3, #10
 8004e0a:	485e      	ldr	r0, [pc, #376]	; (8004f84 <_printf_i+0x244>)
 8004e0c:	e019      	b.n	8004e42 <_printf_i+0x102>
 8004e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e12:	6805      	ldr	r5, [r0, #0]
 8004e14:	600b      	str	r3, [r1, #0]
 8004e16:	bf18      	it	ne
 8004e18:	b22d      	sxthne	r5, r5
 8004e1a:	e7ef      	b.n	8004dfc <_printf_i+0xbc>
 8004e1c:	680b      	ldr	r3, [r1, #0]
 8004e1e:	6825      	ldr	r5, [r4, #0]
 8004e20:	1d18      	adds	r0, r3, #4
 8004e22:	6008      	str	r0, [r1, #0]
 8004e24:	0628      	lsls	r0, r5, #24
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0xec>
 8004e28:	681d      	ldr	r5, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0xf2>
 8004e2c:	0669      	lsls	r1, r5, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0xe8>
 8004e30:	881d      	ldrh	r5, [r3, #0]
 8004e32:	2f6f      	cmp	r7, #111	; 0x6f
 8004e34:	bf0c      	ite	eq
 8004e36:	2308      	moveq	r3, #8
 8004e38:	230a      	movne	r3, #10
 8004e3a:	4852      	ldr	r0, [pc, #328]	; (8004f84 <_printf_i+0x244>)
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e42:	6866      	ldr	r6, [r4, #4]
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	bfa8      	it	ge
 8004e48:	6821      	ldrge	r1, [r4, #0]
 8004e4a:	60a6      	str	r6, [r4, #8]
 8004e4c:	bfa4      	itt	ge
 8004e4e:	f021 0104 	bicge.w	r1, r1, #4
 8004e52:	6021      	strge	r1, [r4, #0]
 8004e54:	b90d      	cbnz	r5, 8004e5a <_printf_i+0x11a>
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	d04d      	beq.n	8004ef6 <_printf_i+0x1b6>
 8004e5a:	4616      	mov	r6, r2
 8004e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e60:	fb03 5711 	mls	r7, r3, r1, r5
 8004e64:	5dc7      	ldrb	r7, [r0, r7]
 8004e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e6a:	462f      	mov	r7, r5
 8004e6c:	42bb      	cmp	r3, r7
 8004e6e:	460d      	mov	r5, r1
 8004e70:	d9f4      	bls.n	8004e5c <_printf_i+0x11c>
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d10b      	bne.n	8004e8e <_printf_i+0x14e>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	07df      	lsls	r7, r3, #31
 8004e7a:	d508      	bpl.n	8004e8e <_printf_i+0x14e>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	6861      	ldr	r1, [r4, #4]
 8004e80:	4299      	cmp	r1, r3
 8004e82:	bfde      	ittt	le
 8004e84:	2330      	movle	r3, #48	; 0x30
 8004e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e8e:	1b92      	subs	r2, r2, r6
 8004e90:	6122      	str	r2, [r4, #16]
 8004e92:	464b      	mov	r3, r9
 8004e94:	4621      	mov	r1, r4
 8004e96:	4640      	mov	r0, r8
 8004e98:	f8cd a000 	str.w	sl, [sp]
 8004e9c:	aa03      	add	r2, sp, #12
 8004e9e:	f7ff fedf 	bl	8004c60 <_printf_common>
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d14c      	bne.n	8004f40 <_printf_i+0x200>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	b004      	add	sp, #16
 8004eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb0:	4834      	ldr	r0, [pc, #208]	; (8004f84 <_printf_i+0x244>)
 8004eb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eb6:	680e      	ldr	r6, [r1, #0]
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ebe:	061f      	lsls	r7, r3, #24
 8004ec0:	600e      	str	r6, [r1, #0]
 8004ec2:	d514      	bpl.n	8004eee <_printf_i+0x1ae>
 8004ec4:	07d9      	lsls	r1, r3, #31
 8004ec6:	bf44      	itt	mi
 8004ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ecc:	6023      	strmi	r3, [r4, #0]
 8004ece:	b91d      	cbnz	r5, 8004ed8 <_printf_i+0x198>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f023 0320 	bic.w	r3, r3, #32
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	2310      	movs	r3, #16
 8004eda:	e7af      	b.n	8004e3c <_printf_i+0xfc>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	2378      	movs	r3, #120	; 0x78
 8004ee6:	4828      	ldr	r0, [pc, #160]	; (8004f88 <_printf_i+0x248>)
 8004ee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eec:	e7e3      	b.n	8004eb6 <_printf_i+0x176>
 8004eee:	065e      	lsls	r6, r3, #25
 8004ef0:	bf48      	it	mi
 8004ef2:	b2ad      	uxthmi	r5, r5
 8004ef4:	e7e6      	b.n	8004ec4 <_printf_i+0x184>
 8004ef6:	4616      	mov	r6, r2
 8004ef8:	e7bb      	b.n	8004e72 <_printf_i+0x132>
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6826      	ldr	r6, [r4, #0]
 8004efe:	1d1d      	adds	r5, r3, #4
 8004f00:	6960      	ldr	r0, [r4, #20]
 8004f02:	600d      	str	r5, [r1, #0]
 8004f04:	0635      	lsls	r5, r6, #24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	d501      	bpl.n	8004f0e <_printf_i+0x1ce>
 8004f0a:	6018      	str	r0, [r3, #0]
 8004f0c:	e002      	b.n	8004f14 <_printf_i+0x1d4>
 8004f0e:	0671      	lsls	r1, r6, #25
 8004f10:	d5fb      	bpl.n	8004f0a <_printf_i+0x1ca>
 8004f12:	8018      	strh	r0, [r3, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	4616      	mov	r6, r2
 8004f18:	6123      	str	r3, [r4, #16]
 8004f1a:	e7ba      	b.n	8004e92 <_printf_i+0x152>
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	600a      	str	r2, [r1, #0]
 8004f22:	681e      	ldr	r6, [r3, #0]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	6862      	ldr	r2, [r4, #4]
 8004f2a:	f002 fb0b 	bl	8007544 <memchr>
 8004f2e:	b108      	cbz	r0, 8004f34 <_printf_i+0x1f4>
 8004f30:	1b80      	subs	r0, r0, r6
 8004f32:	6060      	str	r0, [r4, #4]
 8004f34:	6863      	ldr	r3, [r4, #4]
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3e:	e7a8      	b.n	8004e92 <_printf_i+0x152>
 8004f40:	4632      	mov	r2, r6
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	6923      	ldr	r3, [r4, #16]
 8004f48:	47d0      	blx	sl
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d0ab      	beq.n	8004ea6 <_printf_i+0x166>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	079b      	lsls	r3, r3, #30
 8004f52:	d413      	bmi.n	8004f7c <_printf_i+0x23c>
 8004f54:	68e0      	ldr	r0, [r4, #12]
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	4298      	cmp	r0, r3
 8004f5a:	bfb8      	it	lt
 8004f5c:	4618      	movlt	r0, r3
 8004f5e:	e7a4      	b.n	8004eaa <_printf_i+0x16a>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4632      	mov	r2, r6
 8004f64:	4649      	mov	r1, r9
 8004f66:	4640      	mov	r0, r8
 8004f68:	47d0      	blx	sl
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d09b      	beq.n	8004ea6 <_printf_i+0x166>
 8004f6e:	3501      	adds	r5, #1
 8004f70:	68e3      	ldr	r3, [r4, #12]
 8004f72:	9903      	ldr	r1, [sp, #12]
 8004f74:	1a5b      	subs	r3, r3, r1
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	dcf2      	bgt.n	8004f60 <_printf_i+0x220>
 8004f7a:	e7eb      	b.n	8004f54 <_printf_i+0x214>
 8004f7c:	2500      	movs	r5, #0
 8004f7e:	f104 0619 	add.w	r6, r4, #25
 8004f82:	e7f5      	b.n	8004f70 <_printf_i+0x230>
 8004f84:	08008f5a 	.word	0x08008f5a
 8004f88:	08008f6b 	.word	0x08008f6b

08004f8c <_scanf_float>:
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	b087      	sub	sp, #28
 8004f92:	9303      	str	r3, [sp, #12]
 8004f94:	688b      	ldr	r3, [r1, #8]
 8004f96:	4617      	mov	r7, r2
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f9e:	bf85      	ittet	hi
 8004fa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fa4:	195b      	addhi	r3, r3, r5
 8004fa6:	2300      	movls	r3, #0
 8004fa8:	9302      	strhi	r3, [sp, #8]
 8004faa:	bf88      	it	hi
 8004fac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fb0:	468b      	mov	fp, r1
 8004fb2:	f04f 0500 	mov.w	r5, #0
 8004fb6:	bf8c      	ite	hi
 8004fb8:	608b      	strhi	r3, [r1, #8]
 8004fba:	9302      	strls	r3, [sp, #8]
 8004fbc:	680b      	ldr	r3, [r1, #0]
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fc4:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fc8:	460c      	mov	r4, r1
 8004fca:	465e      	mov	r6, fp
 8004fcc:	46aa      	mov	sl, r5
 8004fce:	46a9      	mov	r9, r5
 8004fd0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fd4:	9501      	str	r5, [sp, #4]
 8004fd6:	68a2      	ldr	r2, [r4, #8]
 8004fd8:	b152      	cbz	r2, 8004ff0 <_scanf_float+0x64>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b4e      	cmp	r3, #78	; 0x4e
 8004fe0:	d864      	bhi.n	80050ac <_scanf_float+0x120>
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d83c      	bhi.n	8005060 <_scanf_float+0xd4>
 8004fe6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004fea:	b2c8      	uxtb	r0, r1
 8004fec:	280e      	cmp	r0, #14
 8004fee:	d93a      	bls.n	8005066 <_scanf_float+0xda>
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	d003      	beq.n	8004ffe <_scanf_float+0x72>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005002:	f1ba 0f01 	cmp.w	sl, #1
 8005006:	f200 8113 	bhi.w	8005230 <_scanf_float+0x2a4>
 800500a:	455e      	cmp	r6, fp
 800500c:	f200 8105 	bhi.w	800521a <_scanf_float+0x28e>
 8005010:	2501      	movs	r5, #1
 8005012:	4628      	mov	r0, r5
 8005014:	b007      	add	sp, #28
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800501e:	2a0d      	cmp	r2, #13
 8005020:	d8e6      	bhi.n	8004ff0 <_scanf_float+0x64>
 8005022:	a101      	add	r1, pc, #4	; (adr r1, 8005028 <_scanf_float+0x9c>)
 8005024:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005028:	08005167 	.word	0x08005167
 800502c:	08004ff1 	.word	0x08004ff1
 8005030:	08004ff1 	.word	0x08004ff1
 8005034:	08004ff1 	.word	0x08004ff1
 8005038:	080051c7 	.word	0x080051c7
 800503c:	0800519f 	.word	0x0800519f
 8005040:	08004ff1 	.word	0x08004ff1
 8005044:	08004ff1 	.word	0x08004ff1
 8005048:	08005175 	.word	0x08005175
 800504c:	08004ff1 	.word	0x08004ff1
 8005050:	08004ff1 	.word	0x08004ff1
 8005054:	08004ff1 	.word	0x08004ff1
 8005058:	08004ff1 	.word	0x08004ff1
 800505c:	0800512d 	.word	0x0800512d
 8005060:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005064:	e7db      	b.n	800501e <_scanf_float+0x92>
 8005066:	290e      	cmp	r1, #14
 8005068:	d8c2      	bhi.n	8004ff0 <_scanf_float+0x64>
 800506a:	a001      	add	r0, pc, #4	; (adr r0, 8005070 <_scanf_float+0xe4>)
 800506c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005070:	0800511f 	.word	0x0800511f
 8005074:	08004ff1 	.word	0x08004ff1
 8005078:	0800511f 	.word	0x0800511f
 800507c:	080051b3 	.word	0x080051b3
 8005080:	08004ff1 	.word	0x08004ff1
 8005084:	080050cd 	.word	0x080050cd
 8005088:	08005109 	.word	0x08005109
 800508c:	08005109 	.word	0x08005109
 8005090:	08005109 	.word	0x08005109
 8005094:	08005109 	.word	0x08005109
 8005098:	08005109 	.word	0x08005109
 800509c:	08005109 	.word	0x08005109
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005109 	.word	0x08005109
 80050a8:	08005109 	.word	0x08005109
 80050ac:	2b6e      	cmp	r3, #110	; 0x6e
 80050ae:	d809      	bhi.n	80050c4 <_scanf_float+0x138>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d8b2      	bhi.n	800501a <_scanf_float+0x8e>
 80050b4:	2b54      	cmp	r3, #84	; 0x54
 80050b6:	d077      	beq.n	80051a8 <_scanf_float+0x21c>
 80050b8:	2b59      	cmp	r3, #89	; 0x59
 80050ba:	d199      	bne.n	8004ff0 <_scanf_float+0x64>
 80050bc:	2d07      	cmp	r5, #7
 80050be:	d197      	bne.n	8004ff0 <_scanf_float+0x64>
 80050c0:	2508      	movs	r5, #8
 80050c2:	e029      	b.n	8005118 <_scanf_float+0x18c>
 80050c4:	2b74      	cmp	r3, #116	; 0x74
 80050c6:	d06f      	beq.n	80051a8 <_scanf_float+0x21c>
 80050c8:	2b79      	cmp	r3, #121	; 0x79
 80050ca:	e7f6      	b.n	80050ba <_scanf_float+0x12e>
 80050cc:	6821      	ldr	r1, [r4, #0]
 80050ce:	05c8      	lsls	r0, r1, #23
 80050d0:	d51a      	bpl.n	8005108 <_scanf_float+0x17c>
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050d8:	6021      	str	r1, [r4, #0]
 80050da:	f109 0901 	add.w	r9, r9, #1
 80050de:	b11b      	cbz	r3, 80050e8 <_scanf_float+0x15c>
 80050e0:	3b01      	subs	r3, #1
 80050e2:	3201      	adds	r2, #1
 80050e4:	9302      	str	r3, [sp, #8]
 80050e6:	60a2      	str	r2, [r4, #8]
 80050e8:	68a3      	ldr	r3, [r4, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	3301      	adds	r3, #1
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	f340 8084 	ble.w	8005208 <_scanf_float+0x27c>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	e766      	b.n	8004fd6 <_scanf_float+0x4a>
 8005108:	eb1a 0f05 	cmn.w	sl, r5
 800510c:	f47f af70 	bne.w	8004ff0 <_scanf_float+0x64>
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005116:	6022      	str	r2, [r4, #0]
 8005118:	f806 3b01 	strb.w	r3, [r6], #1
 800511c:	e7e4      	b.n	80050e8 <_scanf_float+0x15c>
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	0610      	lsls	r0, r2, #24
 8005122:	f57f af65 	bpl.w	8004ff0 <_scanf_float+0x64>
 8005126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512a:	e7f4      	b.n	8005116 <_scanf_float+0x18a>
 800512c:	f1ba 0f00 	cmp.w	sl, #0
 8005130:	d10e      	bne.n	8005150 <_scanf_float+0x1c4>
 8005132:	f1b9 0f00 	cmp.w	r9, #0
 8005136:	d10e      	bne.n	8005156 <_scanf_float+0x1ca>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800513e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005142:	d108      	bne.n	8005156 <_scanf_float+0x1ca>
 8005144:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005148:	f04f 0a01 	mov.w	sl, #1
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	e7e3      	b.n	8005118 <_scanf_float+0x18c>
 8005150:	f1ba 0f02 	cmp.w	sl, #2
 8005154:	d055      	beq.n	8005202 <_scanf_float+0x276>
 8005156:	2d01      	cmp	r5, #1
 8005158:	d002      	beq.n	8005160 <_scanf_float+0x1d4>
 800515a:	2d04      	cmp	r5, #4
 800515c:	f47f af48 	bne.w	8004ff0 <_scanf_float+0x64>
 8005160:	3501      	adds	r5, #1
 8005162:	b2ed      	uxtb	r5, r5
 8005164:	e7d8      	b.n	8005118 <_scanf_float+0x18c>
 8005166:	f1ba 0f01 	cmp.w	sl, #1
 800516a:	f47f af41 	bne.w	8004ff0 <_scanf_float+0x64>
 800516e:	f04f 0a02 	mov.w	sl, #2
 8005172:	e7d1      	b.n	8005118 <_scanf_float+0x18c>
 8005174:	b97d      	cbnz	r5, 8005196 <_scanf_float+0x20a>
 8005176:	f1b9 0f00 	cmp.w	r9, #0
 800517a:	f47f af3c 	bne.w	8004ff6 <_scanf_float+0x6a>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005184:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005188:	f47f af39 	bne.w	8004ffe <_scanf_float+0x72>
 800518c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005190:	2501      	movs	r5, #1
 8005192:	6022      	str	r2, [r4, #0]
 8005194:	e7c0      	b.n	8005118 <_scanf_float+0x18c>
 8005196:	2d03      	cmp	r5, #3
 8005198:	d0e2      	beq.n	8005160 <_scanf_float+0x1d4>
 800519a:	2d05      	cmp	r5, #5
 800519c:	e7de      	b.n	800515c <_scanf_float+0x1d0>
 800519e:	2d02      	cmp	r5, #2
 80051a0:	f47f af26 	bne.w	8004ff0 <_scanf_float+0x64>
 80051a4:	2503      	movs	r5, #3
 80051a6:	e7b7      	b.n	8005118 <_scanf_float+0x18c>
 80051a8:	2d06      	cmp	r5, #6
 80051aa:	f47f af21 	bne.w	8004ff0 <_scanf_float+0x64>
 80051ae:	2507      	movs	r5, #7
 80051b0:	e7b2      	b.n	8005118 <_scanf_float+0x18c>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	0591      	lsls	r1, r2, #22
 80051b6:	f57f af1b 	bpl.w	8004ff0 <_scanf_float+0x64>
 80051ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051be:	6022      	str	r2, [r4, #0]
 80051c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80051c4:	e7a8      	b.n	8005118 <_scanf_float+0x18c>
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051d0:	d006      	beq.n	80051e0 <_scanf_float+0x254>
 80051d2:	0550      	lsls	r0, r2, #21
 80051d4:	f57f af0c 	bpl.w	8004ff0 <_scanf_float+0x64>
 80051d8:	f1b9 0f00 	cmp.w	r9, #0
 80051dc:	f43f af0f 	beq.w	8004ffe <_scanf_float+0x72>
 80051e0:	0591      	lsls	r1, r2, #22
 80051e2:	bf58      	it	pl
 80051e4:	9901      	ldrpl	r1, [sp, #4]
 80051e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051ea:	bf58      	it	pl
 80051ec:	eba9 0101 	subpl.w	r1, r9, r1
 80051f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051f4:	f04f 0900 	mov.w	r9, #0
 80051f8:	bf58      	it	pl
 80051fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	e78a      	b.n	8005118 <_scanf_float+0x18c>
 8005202:	f04f 0a03 	mov.w	sl, #3
 8005206:	e787      	b.n	8005118 <_scanf_float+0x18c>
 8005208:	4639      	mov	r1, r7
 800520a:	4640      	mov	r0, r8
 800520c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005210:	4798      	blx	r3
 8005212:	2800      	cmp	r0, #0
 8005214:	f43f aedf 	beq.w	8004fd6 <_scanf_float+0x4a>
 8005218:	e6ea      	b.n	8004ff0 <_scanf_float+0x64>
 800521a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800521e:	463a      	mov	r2, r7
 8005220:	4640      	mov	r0, r8
 8005222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005226:	4798      	blx	r3
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	3b01      	subs	r3, #1
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	e6ec      	b.n	800500a <_scanf_float+0x7e>
 8005230:	1e6b      	subs	r3, r5, #1
 8005232:	2b06      	cmp	r3, #6
 8005234:	d825      	bhi.n	8005282 <_scanf_float+0x2f6>
 8005236:	2d02      	cmp	r5, #2
 8005238:	d836      	bhi.n	80052a8 <_scanf_float+0x31c>
 800523a:	455e      	cmp	r6, fp
 800523c:	f67f aee8 	bls.w	8005010 <_scanf_float+0x84>
 8005240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005244:	463a      	mov	r2, r7
 8005246:	4640      	mov	r0, r8
 8005248:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800524c:	4798      	blx	r3
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	3b01      	subs	r3, #1
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	e7f1      	b.n	800523a <_scanf_float+0x2ae>
 8005256:	9802      	ldr	r0, [sp, #8]
 8005258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800525c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005260:	463a      	mov	r2, r7
 8005262:	9002      	str	r0, [sp, #8]
 8005264:	4640      	mov	r0, r8
 8005266:	4798      	blx	r3
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	3b01      	subs	r3, #1
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005272:	fa5f fa8a 	uxtb.w	sl, sl
 8005276:	f1ba 0f02 	cmp.w	sl, #2
 800527a:	d1ec      	bne.n	8005256 <_scanf_float+0x2ca>
 800527c:	3d03      	subs	r5, #3
 800527e:	b2ed      	uxtb	r5, r5
 8005280:	1b76      	subs	r6, r6, r5
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	05da      	lsls	r2, r3, #23
 8005286:	d52f      	bpl.n	80052e8 <_scanf_float+0x35c>
 8005288:	055b      	lsls	r3, r3, #21
 800528a:	d510      	bpl.n	80052ae <_scanf_float+0x322>
 800528c:	455e      	cmp	r6, fp
 800528e:	f67f aebf 	bls.w	8005010 <_scanf_float+0x84>
 8005292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005296:	463a      	mov	r2, r7
 8005298:	4640      	mov	r0, r8
 800529a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800529e:	4798      	blx	r3
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	e7f1      	b.n	800528c <_scanf_float+0x300>
 80052a8:	46aa      	mov	sl, r5
 80052aa:	9602      	str	r6, [sp, #8]
 80052ac:	e7df      	b.n	800526e <_scanf_float+0x2e2>
 80052ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	2965      	cmp	r1, #101	; 0x65
 80052b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	d00c      	beq.n	80052dc <_scanf_float+0x350>
 80052c2:	2945      	cmp	r1, #69	; 0x45
 80052c4:	d00a      	beq.n	80052dc <_scanf_float+0x350>
 80052c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ca:	463a      	mov	r2, r7
 80052cc:	4640      	mov	r0, r8
 80052ce:	4798      	blx	r3
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	1eb5      	subs	r5, r6, #2
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	463a      	mov	r2, r7
 80052de:	4640      	mov	r0, r8
 80052e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052e4:	4798      	blx	r3
 80052e6:	462e      	mov	r6, r5
 80052e8:	6825      	ldr	r5, [r4, #0]
 80052ea:	f015 0510 	ands.w	r5, r5, #16
 80052ee:	d159      	bne.n	80053a4 <_scanf_float+0x418>
 80052f0:	7035      	strb	r5, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fc:	d11c      	bne.n	8005338 <_scanf_float+0x3ac>
 80052fe:	9b01      	ldr	r3, [sp, #4]
 8005300:	454b      	cmp	r3, r9
 8005302:	eba3 0209 	sub.w	r2, r3, r9
 8005306:	d124      	bne.n	8005352 <_scanf_float+0x3c6>
 8005308:	2200      	movs	r2, #0
 800530a:	4659      	mov	r1, fp
 800530c:	4640      	mov	r0, r8
 800530e:	f000 fe8b 	bl	8006028 <_strtod_r>
 8005312:	f8d4 c000 	ldr.w	ip, [r4]
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	f01c 0f02 	tst.w	ip, #2
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	d021      	beq.n	8005368 <_scanf_float+0x3dc>
 8005324:	9903      	ldr	r1, [sp, #12]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	600a      	str	r2, [r1, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	e9c3 6700 	strd	r6, r7, [r3]
 8005330:	68e3      	ldr	r3, [r4, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60e3      	str	r3, [r4, #12]
 8005336:	e66c      	b.n	8005012 <_scanf_float+0x86>
 8005338:	9b04      	ldr	r3, [sp, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0e4      	beq.n	8005308 <_scanf_float+0x37c>
 800533e:	9905      	ldr	r1, [sp, #20]
 8005340:	230a      	movs	r3, #10
 8005342:	462a      	mov	r2, r5
 8005344:	4640      	mov	r0, r8
 8005346:	3101      	adds	r1, #1
 8005348:	f000 fefa 	bl	8006140 <_strtol_r>
 800534c:	9b04      	ldr	r3, [sp, #16]
 800534e:	9e05      	ldr	r6, [sp, #20]
 8005350:	1ac2      	subs	r2, r0, r3
 8005352:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005356:	429e      	cmp	r6, r3
 8005358:	bf28      	it	cs
 800535a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800535e:	4630      	mov	r0, r6
 8005360:	4911      	ldr	r1, [pc, #68]	; (80053a8 <_scanf_float+0x41c>)
 8005362:	f000 f829 	bl	80053b8 <siprintf>
 8005366:	e7cf      	b.n	8005308 <_scanf_float+0x37c>
 8005368:	f01c 0f04 	tst.w	ip, #4
 800536c:	f103 0e04 	add.w	lr, r3, #4
 8005370:	d003      	beq.n	800537a <_scanf_float+0x3ee>
 8005372:	9903      	ldr	r1, [sp, #12]
 8005374:	f8c1 e000 	str.w	lr, [r1]
 8005378:	e7d7      	b.n	800532a <_scanf_float+0x39e>
 800537a:	9a03      	ldr	r2, [sp, #12]
 800537c:	f8c2 e000 	str.w	lr, [r2]
 8005380:	f8d3 8000 	ldr.w	r8, [r3]
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	f7fb fb40 	bl	8000a0c <__aeabi_dcmpun>
 800538c:	b128      	cbz	r0, 800539a <_scanf_float+0x40e>
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <_scanf_float+0x420>)
 8005390:	f000 f80e 	bl	80053b0 <nanf>
 8005394:	f8c8 0000 	str.w	r0, [r8]
 8005398:	e7ca      	b.n	8005330 <_scanf_float+0x3a4>
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fb fb93 	bl	8000ac8 <__aeabi_d2f>
 80053a2:	e7f7      	b.n	8005394 <_scanf_float+0x408>
 80053a4:	2500      	movs	r5, #0
 80053a6:	e634      	b.n	8005012 <_scanf_float+0x86>
 80053a8:	08008f7c 	.word	0x08008f7c
 80053ac:	08009398 	.word	0x08009398

080053b0 <nanf>:
 80053b0:	4800      	ldr	r0, [pc, #0]	; (80053b4 <nanf+0x4>)
 80053b2:	4770      	bx	lr
 80053b4:	7fc00000 	.word	0x7fc00000

080053b8 <siprintf>:
 80053b8:	b40e      	push	{r1, r2, r3}
 80053ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053be:	b500      	push	{lr}
 80053c0:	b09c      	sub	sp, #112	; 0x70
 80053c2:	ab1d      	add	r3, sp, #116	; 0x74
 80053c4:	9002      	str	r0, [sp, #8]
 80053c6:	9006      	str	r0, [sp, #24]
 80053c8:	9107      	str	r1, [sp, #28]
 80053ca:	9104      	str	r1, [sp, #16]
 80053cc:	4808      	ldr	r0, [pc, #32]	; (80053f0 <siprintf+0x38>)
 80053ce:	4909      	ldr	r1, [pc, #36]	; (80053f4 <siprintf+0x3c>)
 80053d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d4:	9105      	str	r1, [sp, #20]
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	a902      	add	r1, sp, #8
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	f002 fe96 	bl	800810c <_svfiprintf_r>
 80053e0:	2200      	movs	r2, #0
 80053e2:	9b02      	ldr	r3, [sp, #8]
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	b01c      	add	sp, #112	; 0x70
 80053e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ec:	b003      	add	sp, #12
 80053ee:	4770      	bx	lr
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	ffff0208 	.word	0xffff0208

080053f8 <sulp>:
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	460f      	mov	r7, r1
 80053fe:	4690      	mov	r8, r2
 8005400:	f002 fc2c 	bl	8007c5c <__ulp>
 8005404:	4604      	mov	r4, r0
 8005406:	460d      	mov	r5, r1
 8005408:	f1b8 0f00 	cmp.w	r8, #0
 800540c:	d011      	beq.n	8005432 <sulp+0x3a>
 800540e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005416:	2b00      	cmp	r3, #0
 8005418:	dd0b      	ble.n	8005432 <sulp+0x3a>
 800541a:	2400      	movs	r4, #0
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005422:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005426:	4622      	mov	r2, r4
 8005428:	462b      	mov	r3, r5
 800542a:	f7fb f855 	bl	80004d8 <__aeabi_dmul>
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800543a:	0000      	movs	r0, r0
 800543c:	0000      	movs	r0, r0
	...

08005440 <_strtod_l>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	469b      	mov	fp, r3
 8005446:	2300      	movs	r3, #0
 8005448:	b0a1      	sub	sp, #132	; 0x84
 800544a:	931c      	str	r3, [sp, #112]	; 0x70
 800544c:	4ba1      	ldr	r3, [pc, #644]	; (80056d4 <_strtod_l+0x294>)
 800544e:	4682      	mov	sl, r0
 8005450:	681f      	ldr	r7, [r3, #0]
 8005452:	460e      	mov	r6, r1
 8005454:	4638      	mov	r0, r7
 8005456:	9217      	str	r2, [sp, #92]	; 0x5c
 8005458:	f7fa fe7a 	bl	8000150 <strlen>
 800545c:	f04f 0800 	mov.w	r8, #0
 8005460:	4604      	mov	r4, r0
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	961b      	str	r6, [sp, #108]	; 0x6c
 8005468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	2a2b      	cmp	r2, #43	; 0x2b
 800546e:	d04c      	beq.n	800550a <_strtod_l+0xca>
 8005470:	d83a      	bhi.n	80054e8 <_strtod_l+0xa8>
 8005472:	2a0d      	cmp	r2, #13
 8005474:	d833      	bhi.n	80054de <_strtod_l+0x9e>
 8005476:	2a08      	cmp	r2, #8
 8005478:	d833      	bhi.n	80054e2 <_strtod_l+0xa2>
 800547a:	2a00      	cmp	r2, #0
 800547c:	d03d      	beq.n	80054fa <_strtod_l+0xba>
 800547e:	2300      	movs	r3, #0
 8005480:	930c      	str	r3, [sp, #48]	; 0x30
 8005482:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005484:	782b      	ldrb	r3, [r5, #0]
 8005486:	2b30      	cmp	r3, #48	; 0x30
 8005488:	f040 80af 	bne.w	80055ea <_strtod_l+0x1aa>
 800548c:	786b      	ldrb	r3, [r5, #1]
 800548e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005492:	2b58      	cmp	r3, #88	; 0x58
 8005494:	d16c      	bne.n	8005570 <_strtod_l+0x130>
 8005496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005498:	4650      	mov	r0, sl
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	ab1c      	add	r3, sp, #112	; 0x70
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	4a8d      	ldr	r2, [pc, #564]	; (80056d8 <_strtod_l+0x298>)
 80054a2:	f8cd b008 	str.w	fp, [sp, #8]
 80054a6:	ab1d      	add	r3, sp, #116	; 0x74
 80054a8:	a91b      	add	r1, sp, #108	; 0x6c
 80054aa:	f001 fd2f 	bl	8006f0c <__gethex>
 80054ae:	f010 0607 	ands.w	r6, r0, #7
 80054b2:	4604      	mov	r4, r0
 80054b4:	d005      	beq.n	80054c2 <_strtod_l+0x82>
 80054b6:	2e06      	cmp	r6, #6
 80054b8:	d129      	bne.n	800550e <_strtod_l+0xce>
 80054ba:	2300      	movs	r3, #0
 80054bc:	3501      	adds	r5, #1
 80054be:	951b      	str	r5, [sp, #108]	; 0x6c
 80054c0:	930c      	str	r3, [sp, #48]	; 0x30
 80054c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8596 	bne.w	8005ff6 <_strtod_l+0xbb6>
 80054ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054cc:	b1d3      	cbz	r3, 8005504 <_strtod_l+0xc4>
 80054ce:	4642      	mov	r2, r8
 80054d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	b021      	add	sp, #132	; 0x84
 80054da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054de:	2a20      	cmp	r2, #32
 80054e0:	d1cd      	bne.n	800547e <_strtod_l+0x3e>
 80054e2:	3301      	adds	r3, #1
 80054e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80054e6:	e7bf      	b.n	8005468 <_strtod_l+0x28>
 80054e8:	2a2d      	cmp	r2, #45	; 0x2d
 80054ea:	d1c8      	bne.n	800547e <_strtod_l+0x3e>
 80054ec:	2201      	movs	r2, #1
 80054ee:	920c      	str	r2, [sp, #48]	; 0x30
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1c3      	bne.n	8005482 <_strtod_l+0x42>
 80054fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 8577 	bne.w	8005ff2 <_strtod_l+0xbb2>
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	e7e4      	b.n	80054d4 <_strtod_l+0x94>
 800550a:	2200      	movs	r2, #0
 800550c:	e7ef      	b.n	80054ee <_strtod_l+0xae>
 800550e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005510:	b13a      	cbz	r2, 8005522 <_strtod_l+0xe2>
 8005512:	2135      	movs	r1, #53	; 0x35
 8005514:	a81e      	add	r0, sp, #120	; 0x78
 8005516:	f002 fca5 	bl	8007e64 <__copybits>
 800551a:	4650      	mov	r0, sl
 800551c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800551e:	f002 f86d 	bl	80075fc <_Bfree>
 8005522:	3e01      	subs	r6, #1
 8005524:	2e05      	cmp	r6, #5
 8005526:	d807      	bhi.n	8005538 <_strtod_l+0xf8>
 8005528:	e8df f006 	tbb	[pc, r6]
 800552c:	1d180b0e 	.word	0x1d180b0e
 8005530:	030e      	.short	0x030e
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	46c8      	mov	r8, r9
 8005538:	0721      	lsls	r1, r4, #28
 800553a:	d5c2      	bpl.n	80054c2 <_strtod_l+0x82>
 800553c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005540:	e7bf      	b.n	80054c2 <_strtod_l+0x82>
 8005542:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005546:	e7f7      	b.n	8005538 <_strtod_l+0xf8>
 8005548:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800554a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800554e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005556:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800555a:	e7ed      	b.n	8005538 <_strtod_l+0xf8>
 800555c:	f04f 0800 	mov.w	r8, #0
 8005560:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80056dc <_strtod_l+0x29c>
 8005564:	e7e8      	b.n	8005538 <_strtod_l+0xf8>
 8005566:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800556a:	f04f 38ff 	mov.w	r8, #4294967295
 800556e:	e7e3      	b.n	8005538 <_strtod_l+0xf8>
 8005570:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	921b      	str	r2, [sp, #108]	; 0x6c
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	d0f9      	beq.n	8005570 <_strtod_l+0x130>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0a0      	beq.n	80054c2 <_strtod_l+0x82>
 8005580:	2301      	movs	r3, #1
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005586:	220a      	movs	r2, #10
 8005588:	9308      	str	r3, [sp, #32]
 800558a:	2300      	movs	r3, #0
 800558c:	469b      	mov	fp, r3
 800558e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005592:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005594:	7805      	ldrb	r5, [r0, #0]
 8005596:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800559a:	b2d9      	uxtb	r1, r3
 800559c:	2909      	cmp	r1, #9
 800559e:	d926      	bls.n	80055ee <_strtod_l+0x1ae>
 80055a0:	4622      	mov	r2, r4
 80055a2:	4639      	mov	r1, r7
 80055a4:	f002 fec8 	bl	8008338 <strncmp>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d032      	beq.n	8005612 <_strtod_l+0x1d2>
 80055ac:	2000      	movs	r0, #0
 80055ae:	462b      	mov	r3, r5
 80055b0:	465c      	mov	r4, fp
 80055b2:	4602      	mov	r2, r0
 80055b4:	9004      	str	r0, [sp, #16]
 80055b6:	2b65      	cmp	r3, #101	; 0x65
 80055b8:	d001      	beq.n	80055be <_strtod_l+0x17e>
 80055ba:	2b45      	cmp	r3, #69	; 0x45
 80055bc:	d113      	bne.n	80055e6 <_strtod_l+0x1a6>
 80055be:	b91c      	cbnz	r4, 80055c8 <_strtod_l+0x188>
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	4303      	orrs	r3, r0
 80055c4:	d099      	beq.n	80054fa <_strtod_l+0xba>
 80055c6:	2400      	movs	r4, #0
 80055c8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80055ca:	1c73      	adds	r3, r6, #1
 80055cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80055ce:	7873      	ldrb	r3, [r6, #1]
 80055d0:	2b2b      	cmp	r3, #43	; 0x2b
 80055d2:	d078      	beq.n	80056c6 <_strtod_l+0x286>
 80055d4:	2b2d      	cmp	r3, #45	; 0x2d
 80055d6:	d07b      	beq.n	80056d0 <_strtod_l+0x290>
 80055d8:	2700      	movs	r7, #0
 80055da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80055de:	2909      	cmp	r1, #9
 80055e0:	f240 8082 	bls.w	80056e8 <_strtod_l+0x2a8>
 80055e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80055e6:	2500      	movs	r5, #0
 80055e8:	e09e      	b.n	8005728 <_strtod_l+0x2e8>
 80055ea:	2300      	movs	r3, #0
 80055ec:	e7c9      	b.n	8005582 <_strtod_l+0x142>
 80055ee:	f1bb 0f08 	cmp.w	fp, #8
 80055f2:	bfd5      	itete	le
 80055f4:	9906      	ldrle	r1, [sp, #24]
 80055f6:	9905      	ldrgt	r1, [sp, #20]
 80055f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80055fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005600:	f100 0001 	add.w	r0, r0, #1
 8005604:	bfd4      	ite	le
 8005606:	9306      	strle	r3, [sp, #24]
 8005608:	9305      	strgt	r3, [sp, #20]
 800560a:	f10b 0b01 	add.w	fp, fp, #1
 800560e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005610:	e7bf      	b.n	8005592 <_strtod_l+0x152>
 8005612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005614:	191a      	adds	r2, r3, r4
 8005616:	921b      	str	r2, [sp, #108]	; 0x6c
 8005618:	5d1b      	ldrb	r3, [r3, r4]
 800561a:	f1bb 0f00 	cmp.w	fp, #0
 800561e:	d036      	beq.n	800568e <_strtod_l+0x24e>
 8005620:	465c      	mov	r4, fp
 8005622:	9004      	str	r0, [sp, #16]
 8005624:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005628:	2a09      	cmp	r2, #9
 800562a:	d912      	bls.n	8005652 <_strtod_l+0x212>
 800562c:	2201      	movs	r2, #1
 800562e:	e7c2      	b.n	80055b6 <_strtod_l+0x176>
 8005630:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005632:	3001      	adds	r0, #1
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	921b      	str	r2, [sp, #108]	; 0x6c
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b30      	cmp	r3, #48	; 0x30
 800563c:	d0f8      	beq.n	8005630 <_strtod_l+0x1f0>
 800563e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005642:	2a08      	cmp	r2, #8
 8005644:	f200 84dc 	bhi.w	8006000 <_strtod_l+0xbc0>
 8005648:	9004      	str	r0, [sp, #16]
 800564a:	2000      	movs	r0, #0
 800564c:	4604      	mov	r4, r0
 800564e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005650:	9208      	str	r2, [sp, #32]
 8005652:	3b30      	subs	r3, #48	; 0x30
 8005654:	f100 0201 	add.w	r2, r0, #1
 8005658:	d013      	beq.n	8005682 <_strtod_l+0x242>
 800565a:	9904      	ldr	r1, [sp, #16]
 800565c:	1905      	adds	r5, r0, r4
 800565e:	4411      	add	r1, r2
 8005660:	9104      	str	r1, [sp, #16]
 8005662:	4622      	mov	r2, r4
 8005664:	210a      	movs	r1, #10
 8005666:	42aa      	cmp	r2, r5
 8005668:	d113      	bne.n	8005692 <_strtod_l+0x252>
 800566a:	1822      	adds	r2, r4, r0
 800566c:	2a08      	cmp	r2, #8
 800566e:	f104 0401 	add.w	r4, r4, #1
 8005672:	4404      	add	r4, r0
 8005674:	dc1b      	bgt.n	80056ae <_strtod_l+0x26e>
 8005676:	220a      	movs	r2, #10
 8005678:	9906      	ldr	r1, [sp, #24]
 800567a:	fb02 3301 	mla	r3, r2, r1, r3
 800567e:	9306      	str	r3, [sp, #24]
 8005680:	2200      	movs	r2, #0
 8005682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005684:	4610      	mov	r0, r2
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	911b      	str	r1, [sp, #108]	; 0x6c
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	e7ca      	b.n	8005624 <_strtod_l+0x1e4>
 800568e:	4658      	mov	r0, fp
 8005690:	e7d3      	b.n	800563a <_strtod_l+0x1fa>
 8005692:	2a08      	cmp	r2, #8
 8005694:	dc04      	bgt.n	80056a0 <_strtod_l+0x260>
 8005696:	9f06      	ldr	r7, [sp, #24]
 8005698:	434f      	muls	r7, r1
 800569a:	9706      	str	r7, [sp, #24]
 800569c:	3201      	adds	r2, #1
 800569e:	e7e2      	b.n	8005666 <_strtod_l+0x226>
 80056a0:	1c57      	adds	r7, r2, #1
 80056a2:	2f10      	cmp	r7, #16
 80056a4:	bfde      	ittt	le
 80056a6:	9f05      	ldrle	r7, [sp, #20]
 80056a8:	434f      	mulle	r7, r1
 80056aa:	9705      	strle	r7, [sp, #20]
 80056ac:	e7f6      	b.n	800569c <_strtod_l+0x25c>
 80056ae:	2c10      	cmp	r4, #16
 80056b0:	bfdf      	itttt	le
 80056b2:	220a      	movle	r2, #10
 80056b4:	9905      	ldrle	r1, [sp, #20]
 80056b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80056ba:	9305      	strle	r3, [sp, #20]
 80056bc:	e7e0      	b.n	8005680 <_strtod_l+0x240>
 80056be:	2300      	movs	r3, #0
 80056c0:	2201      	movs	r2, #1
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	e77c      	b.n	80055c0 <_strtod_l+0x180>
 80056c6:	2700      	movs	r7, #0
 80056c8:	1cb3      	adds	r3, r6, #2
 80056ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80056cc:	78b3      	ldrb	r3, [r6, #2]
 80056ce:	e784      	b.n	80055da <_strtod_l+0x19a>
 80056d0:	2701      	movs	r7, #1
 80056d2:	e7f9      	b.n	80056c8 <_strtod_l+0x288>
 80056d4:	080091d8 	.word	0x080091d8
 80056d8:	08008f84 	.word	0x08008f84
 80056dc:	7ff00000 	.word	0x7ff00000
 80056e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	911b      	str	r1, [sp, #108]	; 0x6c
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d0f9      	beq.n	80056e0 <_strtod_l+0x2a0>
 80056ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80056f0:	2908      	cmp	r1, #8
 80056f2:	f63f af78 	bhi.w	80055e6 <_strtod_l+0x1a6>
 80056f6:	f04f 0e0a 	mov.w	lr, #10
 80056fa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80056fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005700:	9309      	str	r3, [sp, #36]	; 0x24
 8005702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	911b      	str	r1, [sp, #108]	; 0x6c
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800570e:	2d09      	cmp	r5, #9
 8005710:	d935      	bls.n	800577e <_strtod_l+0x33e>
 8005712:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005714:	1b49      	subs	r1, r1, r5
 8005716:	2908      	cmp	r1, #8
 8005718:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800571c:	dc02      	bgt.n	8005724 <_strtod_l+0x2e4>
 800571e:	4565      	cmp	r5, ip
 8005720:	bfa8      	it	ge
 8005722:	4665      	movge	r5, ip
 8005724:	b107      	cbz	r7, 8005728 <_strtod_l+0x2e8>
 8005726:	426d      	negs	r5, r5
 8005728:	2c00      	cmp	r4, #0
 800572a:	d14c      	bne.n	80057c6 <_strtod_l+0x386>
 800572c:	9907      	ldr	r1, [sp, #28]
 800572e:	4301      	orrs	r1, r0
 8005730:	f47f aec7 	bne.w	80054c2 <_strtod_l+0x82>
 8005734:	2a00      	cmp	r2, #0
 8005736:	f47f aee0 	bne.w	80054fa <_strtod_l+0xba>
 800573a:	2b69      	cmp	r3, #105	; 0x69
 800573c:	d026      	beq.n	800578c <_strtod_l+0x34c>
 800573e:	dc23      	bgt.n	8005788 <_strtod_l+0x348>
 8005740:	2b49      	cmp	r3, #73	; 0x49
 8005742:	d023      	beq.n	800578c <_strtod_l+0x34c>
 8005744:	2b4e      	cmp	r3, #78	; 0x4e
 8005746:	f47f aed8 	bne.w	80054fa <_strtod_l+0xba>
 800574a:	499c      	ldr	r1, [pc, #624]	; (80059bc <_strtod_l+0x57c>)
 800574c:	a81b      	add	r0, sp, #108	; 0x6c
 800574e:	f001 fe2b 	bl	80073a8 <__match>
 8005752:	2800      	cmp	r0, #0
 8005754:	f43f aed1 	beq.w	80054fa <_strtod_l+0xba>
 8005758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b28      	cmp	r3, #40	; 0x28
 800575e:	d12c      	bne.n	80057ba <_strtod_l+0x37a>
 8005760:	4997      	ldr	r1, [pc, #604]	; (80059c0 <_strtod_l+0x580>)
 8005762:	aa1e      	add	r2, sp, #120	; 0x78
 8005764:	a81b      	add	r0, sp, #108	; 0x6c
 8005766:	f001 fe33 	bl	80073d0 <__hexnan>
 800576a:	2805      	cmp	r0, #5
 800576c:	d125      	bne.n	80057ba <_strtod_l+0x37a>
 800576e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005770:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005774:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005778:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800577c:	e6a1      	b.n	80054c2 <_strtod_l+0x82>
 800577e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005782:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005786:	e7bc      	b.n	8005702 <_strtod_l+0x2c2>
 8005788:	2b6e      	cmp	r3, #110	; 0x6e
 800578a:	e7dc      	b.n	8005746 <_strtod_l+0x306>
 800578c:	498d      	ldr	r1, [pc, #564]	; (80059c4 <_strtod_l+0x584>)
 800578e:	a81b      	add	r0, sp, #108	; 0x6c
 8005790:	f001 fe0a 	bl	80073a8 <__match>
 8005794:	2800      	cmp	r0, #0
 8005796:	f43f aeb0 	beq.w	80054fa <_strtod_l+0xba>
 800579a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800579c:	498a      	ldr	r1, [pc, #552]	; (80059c8 <_strtod_l+0x588>)
 800579e:	3b01      	subs	r3, #1
 80057a0:	a81b      	add	r0, sp, #108	; 0x6c
 80057a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80057a4:	f001 fe00 	bl	80073a8 <__match>
 80057a8:	b910      	cbnz	r0, 80057b0 <_strtod_l+0x370>
 80057aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057ac:	3301      	adds	r3, #1
 80057ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80059d8 <_strtod_l+0x598>
 80057b8:	e683      	b.n	80054c2 <_strtod_l+0x82>
 80057ba:	4884      	ldr	r0, [pc, #528]	; (80059cc <_strtod_l+0x58c>)
 80057bc:	f002 fda6 	bl	800830c <nan>
 80057c0:	4680      	mov	r8, r0
 80057c2:	4689      	mov	r9, r1
 80057c4:	e67d      	b.n	80054c2 <_strtod_l+0x82>
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	f1bb 0f00 	cmp.w	fp, #0
 80057cc:	bf08      	it	eq
 80057ce:	46a3      	moveq	fp, r4
 80057d0:	1aeb      	subs	r3, r5, r3
 80057d2:	2c10      	cmp	r4, #16
 80057d4:	9806      	ldr	r0, [sp, #24]
 80057d6:	4626      	mov	r6, r4
 80057d8:	9307      	str	r3, [sp, #28]
 80057da:	bfa8      	it	ge
 80057dc:	2610      	movge	r6, #16
 80057de:	f7fa fe01 	bl	80003e4 <__aeabi_ui2d>
 80057e2:	2c09      	cmp	r4, #9
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	dd13      	ble.n	8005812 <_strtod_l+0x3d2>
 80057ea:	4b79      	ldr	r3, [pc, #484]	; (80059d0 <_strtod_l+0x590>)
 80057ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80057f4:	f7fa fe70 	bl	80004d8 <__aeabi_dmul>
 80057f8:	4680      	mov	r8, r0
 80057fa:	9805      	ldr	r0, [sp, #20]
 80057fc:	4689      	mov	r9, r1
 80057fe:	f7fa fdf1 	bl	80003e4 <__aeabi_ui2d>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4640      	mov	r0, r8
 8005808:	4649      	mov	r1, r9
 800580a:	f7fa fcaf 	bl	800016c <__adddf3>
 800580e:	4680      	mov	r8, r0
 8005810:	4689      	mov	r9, r1
 8005812:	2c0f      	cmp	r4, #15
 8005814:	dc36      	bgt.n	8005884 <_strtod_l+0x444>
 8005816:	9b07      	ldr	r3, [sp, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f43f ae52 	beq.w	80054c2 <_strtod_l+0x82>
 800581e:	dd22      	ble.n	8005866 <_strtod_l+0x426>
 8005820:	2b16      	cmp	r3, #22
 8005822:	dc09      	bgt.n	8005838 <_strtod_l+0x3f8>
 8005824:	4c6a      	ldr	r4, [pc, #424]	; (80059d0 <_strtod_l+0x590>)
 8005826:	4642      	mov	r2, r8
 8005828:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800582c:	464b      	mov	r3, r9
 800582e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005832:	f7fa fe51 	bl	80004d8 <__aeabi_dmul>
 8005836:	e7c3      	b.n	80057c0 <_strtod_l+0x380>
 8005838:	9a07      	ldr	r2, [sp, #28]
 800583a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800583e:	4293      	cmp	r3, r2
 8005840:	db20      	blt.n	8005884 <_strtod_l+0x444>
 8005842:	4d63      	ldr	r5, [pc, #396]	; (80059d0 <_strtod_l+0x590>)
 8005844:	f1c4 040f 	rsb	r4, r4, #15
 8005848:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800584c:	4642      	mov	r2, r8
 800584e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005852:	464b      	mov	r3, r9
 8005854:	f7fa fe40 	bl	80004d8 <__aeabi_dmul>
 8005858:	9b07      	ldr	r3, [sp, #28]
 800585a:	1b1c      	subs	r4, r3, r4
 800585c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005860:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005864:	e7e5      	b.n	8005832 <_strtod_l+0x3f2>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	3316      	adds	r3, #22
 800586a:	db0b      	blt.n	8005884 <_strtod_l+0x444>
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	4a58      	ldr	r2, [pc, #352]	; (80059d0 <_strtod_l+0x590>)
 8005870:	1b5d      	subs	r5, r3, r5
 8005872:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005876:	4640      	mov	r0, r8
 8005878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800587c:	4649      	mov	r1, r9
 800587e:	f7fa ff55 	bl	800072c <__aeabi_ddiv>
 8005882:	e79d      	b.n	80057c0 <_strtod_l+0x380>
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	1ba6      	subs	r6, r4, r6
 8005888:	441e      	add	r6, r3
 800588a:	2e00      	cmp	r6, #0
 800588c:	dd71      	ble.n	8005972 <_strtod_l+0x532>
 800588e:	f016 030f 	ands.w	r3, r6, #15
 8005892:	d00a      	beq.n	80058aa <_strtod_l+0x46a>
 8005894:	494e      	ldr	r1, [pc, #312]	; (80059d0 <_strtod_l+0x590>)
 8005896:	4642      	mov	r2, r8
 8005898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800589c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058a0:	464b      	mov	r3, r9
 80058a2:	f7fa fe19 	bl	80004d8 <__aeabi_dmul>
 80058a6:	4680      	mov	r8, r0
 80058a8:	4689      	mov	r9, r1
 80058aa:	f036 060f 	bics.w	r6, r6, #15
 80058ae:	d050      	beq.n	8005952 <_strtod_l+0x512>
 80058b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80058b4:	dd27      	ble.n	8005906 <_strtod_l+0x4c6>
 80058b6:	f04f 0b00 	mov.w	fp, #0
 80058ba:	f8cd b010 	str.w	fp, [sp, #16]
 80058be:	f8cd b020 	str.w	fp, [sp, #32]
 80058c2:	f8cd b018 	str.w	fp, [sp, #24]
 80058c6:	2322      	movs	r3, #34	; 0x22
 80058c8:	f04f 0800 	mov.w	r8, #0
 80058cc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80059d8 <_strtod_l+0x598>
 80058d0:	f8ca 3000 	str.w	r3, [sl]
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f43f adf3 	beq.w	80054c2 <_strtod_l+0x82>
 80058dc:	4650      	mov	r0, sl
 80058de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058e0:	f001 fe8c 	bl	80075fc <_Bfree>
 80058e4:	4650      	mov	r0, sl
 80058e6:	9906      	ldr	r1, [sp, #24]
 80058e8:	f001 fe88 	bl	80075fc <_Bfree>
 80058ec:	4650      	mov	r0, sl
 80058ee:	9904      	ldr	r1, [sp, #16]
 80058f0:	f001 fe84 	bl	80075fc <_Bfree>
 80058f4:	4650      	mov	r0, sl
 80058f6:	9908      	ldr	r1, [sp, #32]
 80058f8:	f001 fe80 	bl	80075fc <_Bfree>
 80058fc:	4659      	mov	r1, fp
 80058fe:	4650      	mov	r0, sl
 8005900:	f001 fe7c 	bl	80075fc <_Bfree>
 8005904:	e5dd      	b.n	80054c2 <_strtod_l+0x82>
 8005906:	2300      	movs	r3, #0
 8005908:	4640      	mov	r0, r8
 800590a:	4649      	mov	r1, r9
 800590c:	461f      	mov	r7, r3
 800590e:	1136      	asrs	r6, r6, #4
 8005910:	2e01      	cmp	r6, #1
 8005912:	dc21      	bgt.n	8005958 <_strtod_l+0x518>
 8005914:	b10b      	cbz	r3, 800591a <_strtod_l+0x4da>
 8005916:	4680      	mov	r8, r0
 8005918:	4689      	mov	r9, r1
 800591a:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <_strtod_l+0x594>)
 800591c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005920:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005924:	4642      	mov	r2, r8
 8005926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800592a:	464b      	mov	r3, r9
 800592c:	f7fa fdd4 	bl	80004d8 <__aeabi_dmul>
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <_strtod_l+0x598>)
 8005932:	460a      	mov	r2, r1
 8005934:	400b      	ands	r3, r1
 8005936:	4929      	ldr	r1, [pc, #164]	; (80059dc <_strtod_l+0x59c>)
 8005938:	4680      	mov	r8, r0
 800593a:	428b      	cmp	r3, r1
 800593c:	d8bb      	bhi.n	80058b6 <_strtod_l+0x476>
 800593e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005942:	428b      	cmp	r3, r1
 8005944:	bf86      	itte	hi
 8005946:	f04f 38ff 	movhi.w	r8, #4294967295
 800594a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80059e0 <_strtod_l+0x5a0>
 800594e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005952:	2300      	movs	r3, #0
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	e07e      	b.n	8005a56 <_strtod_l+0x616>
 8005958:	07f2      	lsls	r2, r6, #31
 800595a:	d507      	bpl.n	800596c <_strtod_l+0x52c>
 800595c:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <_strtod_l+0x594>)
 800595e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fdb7 	bl	80004d8 <__aeabi_dmul>
 800596a:	2301      	movs	r3, #1
 800596c:	3701      	adds	r7, #1
 800596e:	1076      	asrs	r6, r6, #1
 8005970:	e7ce      	b.n	8005910 <_strtod_l+0x4d0>
 8005972:	d0ee      	beq.n	8005952 <_strtod_l+0x512>
 8005974:	4276      	negs	r6, r6
 8005976:	f016 020f 	ands.w	r2, r6, #15
 800597a:	d00a      	beq.n	8005992 <_strtod_l+0x552>
 800597c:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <_strtod_l+0x590>)
 800597e:	4640      	mov	r0, r8
 8005980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005984:	4649      	mov	r1, r9
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fecf 	bl	800072c <__aeabi_ddiv>
 800598e:	4680      	mov	r8, r0
 8005990:	4689      	mov	r9, r1
 8005992:	1136      	asrs	r6, r6, #4
 8005994:	d0dd      	beq.n	8005952 <_strtod_l+0x512>
 8005996:	2e1f      	cmp	r6, #31
 8005998:	dd24      	ble.n	80059e4 <_strtod_l+0x5a4>
 800599a:	f04f 0b00 	mov.w	fp, #0
 800599e:	f8cd b010 	str.w	fp, [sp, #16]
 80059a2:	f8cd b020 	str.w	fp, [sp, #32]
 80059a6:	f8cd b018 	str.w	fp, [sp, #24]
 80059aa:	2322      	movs	r3, #34	; 0x22
 80059ac:	f04f 0800 	mov.w	r8, #0
 80059b0:	f04f 0900 	mov.w	r9, #0
 80059b4:	f8ca 3000 	str.w	r3, [sl]
 80059b8:	e78c      	b.n	80058d4 <_strtod_l+0x494>
 80059ba:	bf00      	nop
 80059bc:	08008f55 	.word	0x08008f55
 80059c0:	08008f98 	.word	0x08008f98
 80059c4:	08008f4d 	.word	0x08008f4d
 80059c8:	080090dc 	.word	0x080090dc
 80059cc:	08009398 	.word	0x08009398
 80059d0:	08009278 	.word	0x08009278
 80059d4:	08009250 	.word	0x08009250
 80059d8:	7ff00000 	.word	0x7ff00000
 80059dc:	7ca00000 	.word	0x7ca00000
 80059e0:	7fefffff 	.word	0x7fefffff
 80059e4:	f016 0310 	ands.w	r3, r6, #16
 80059e8:	bf18      	it	ne
 80059ea:	236a      	movne	r3, #106	; 0x6a
 80059ec:	4640      	mov	r0, r8
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	4649      	mov	r1, r9
 80059f2:	2300      	movs	r3, #0
 80059f4:	4fb2      	ldr	r7, [pc, #712]	; (8005cc0 <_strtod_l+0x880>)
 80059f6:	07f2      	lsls	r2, r6, #31
 80059f8:	d504      	bpl.n	8005a04 <_strtod_l+0x5c4>
 80059fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fe:	f7fa fd6b 	bl	80004d8 <__aeabi_dmul>
 8005a02:	2301      	movs	r3, #1
 8005a04:	1076      	asrs	r6, r6, #1
 8005a06:	f107 0708 	add.w	r7, r7, #8
 8005a0a:	d1f4      	bne.n	80059f6 <_strtod_l+0x5b6>
 8005a0c:	b10b      	cbz	r3, 8005a12 <_strtod_l+0x5d2>
 8005a0e:	4680      	mov	r8, r0
 8005a10:	4689      	mov	r9, r1
 8005a12:	9b05      	ldr	r3, [sp, #20]
 8005a14:	b1bb      	cbz	r3, 8005a46 <_strtod_l+0x606>
 8005a16:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005a1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	4649      	mov	r1, r9
 8005a22:	dd10      	ble.n	8005a46 <_strtod_l+0x606>
 8005a24:	2b1f      	cmp	r3, #31
 8005a26:	f340 812b 	ble.w	8005c80 <_strtod_l+0x840>
 8005a2a:	2b34      	cmp	r3, #52	; 0x34
 8005a2c:	bfd8      	it	le
 8005a2e:	f04f 32ff 	movle.w	r2, #4294967295
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	bfcf      	iteee	gt
 8005a38:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005a3c:	3b20      	suble	r3, #32
 8005a3e:	fa02 f303 	lslle.w	r3, r2, r3
 8005a42:	ea03 0901 	andle.w	r9, r3, r1
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	f7fa ffab 	bl	80009a8 <__aeabi_dcmpeq>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d1a1      	bne.n	800599a <_strtod_l+0x55a>
 8005a56:	9b06      	ldr	r3, [sp, #24]
 8005a58:	465a      	mov	r2, fp
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4623      	mov	r3, r4
 8005a60:	9908      	ldr	r1, [sp, #32]
 8005a62:	f001 fe37 	bl	80076d4 <__s2b>
 8005a66:	9008      	str	r0, [sp, #32]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f43f af24 	beq.w	80058b6 <_strtod_l+0x476>
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	f04f 0b00 	mov.w	fp, #0
 8005a74:	1b5d      	subs	r5, r3, r5
 8005a76:	9b07      	ldr	r3, [sp, #28]
 8005a78:	f8cd b010 	str.w	fp, [sp, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfb4      	ite	lt
 8005a80:	462b      	movlt	r3, r5
 8005a82:	2300      	movge	r3, #0
 8005a84:	930e      	str	r3, [sp, #56]	; 0x38
 8005a86:	9b07      	ldr	r3, [sp, #28]
 8005a88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a8c:	9316      	str	r3, [sp, #88]	; 0x58
 8005a8e:	9b08      	ldr	r3, [sp, #32]
 8005a90:	4650      	mov	r0, sl
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	f001 fd72 	bl	800757c <_Balloc>
 8005a98:	9006      	str	r0, [sp, #24]
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f43f af13 	beq.w	80058c6 <_strtod_l+0x486>
 8005aa0:	9b08      	ldr	r3, [sp, #32]
 8005aa2:	300c      	adds	r0, #12
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	f103 010c 	add.w	r1, r3, #12
 8005aaa:	3202      	adds	r2, #2
 8005aac:	0092      	lsls	r2, r2, #2
 8005aae:	f001 fd57 	bl	8007560 <memcpy>
 8005ab2:	ab1e      	add	r3, sp, #120	; 0x78
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4642      	mov	r2, r8
 8005abc:	464b      	mov	r3, r9
 8005abe:	4650      	mov	r0, sl
 8005ac0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005ac4:	f002 f944 	bl	8007d50 <__d2b>
 8005ac8:	901c      	str	r0, [sp, #112]	; 0x70
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f43f aefb 	beq.w	80058c6 <_strtod_l+0x486>
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	f001 fe96 	bl	8007804 <__i2b>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	9004      	str	r0, [sp, #16]
 8005adc:	2800      	cmp	r0, #0
 8005ade:	f43f aef2 	beq.w	80058c6 <_strtod_l+0x486>
 8005ae2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005ae4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	bfab      	itete	ge
 8005aea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005aec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005aee:	18ee      	addge	r6, r5, r3
 8005af0:	1b5c      	sublt	r4, r3, r5
 8005af2:	9b05      	ldr	r3, [sp, #20]
 8005af4:	bfa8      	it	ge
 8005af6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005af8:	eba5 0503 	sub.w	r5, r5, r3
 8005afc:	4415      	add	r5, r2
 8005afe:	4b71      	ldr	r3, [pc, #452]	; (8005cc4 <_strtod_l+0x884>)
 8005b00:	f105 35ff 	add.w	r5, r5, #4294967295
 8005b04:	bfb8      	it	lt
 8005b06:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005b08:	429d      	cmp	r5, r3
 8005b0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b0e:	f280 80c9 	bge.w	8005ca4 <_strtod_l+0x864>
 8005b12:	1b5b      	subs	r3, r3, r5
 8005b14:	2b1f      	cmp	r3, #31
 8005b16:	f04f 0701 	mov.w	r7, #1
 8005b1a:	eba2 0203 	sub.w	r2, r2, r3
 8005b1e:	f300 80b6 	bgt.w	8005c8e <_strtod_l+0x84e>
 8005b22:	2500      	movs	r5, #0
 8005b24:	fa07 f303 	lsl.w	r3, r7, r3
 8005b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b2a:	18b7      	adds	r7, r6, r2
 8005b2c:	9b05      	ldr	r3, [sp, #20]
 8005b2e:	42be      	cmp	r6, r7
 8005b30:	4414      	add	r4, r2
 8005b32:	441c      	add	r4, r3
 8005b34:	4633      	mov	r3, r6
 8005b36:	bfa8      	it	ge
 8005b38:	463b      	movge	r3, r7
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	bfa8      	it	ge
 8005b3e:	4623      	movge	r3, r4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bfc2      	ittt	gt
 8005b44:	1aff      	subgt	r7, r7, r3
 8005b46:	1ae4      	subgt	r4, r4, r3
 8005b48:	1af6      	subgt	r6, r6, r3
 8005b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dd17      	ble.n	8005b80 <_strtod_l+0x740>
 8005b50:	461a      	mov	r2, r3
 8005b52:	4650      	mov	r0, sl
 8005b54:	9904      	ldr	r1, [sp, #16]
 8005b56:	f001 ff0f 	bl	8007978 <__pow5mult>
 8005b5a:	9004      	str	r0, [sp, #16]
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f43f aeb2 	beq.w	80058c6 <_strtod_l+0x486>
 8005b62:	4601      	mov	r1, r0
 8005b64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b66:	4650      	mov	r0, sl
 8005b68:	f001 fe62 	bl	8007830 <__multiply>
 8005b6c:	9009      	str	r0, [sp, #36]	; 0x24
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f43f aea9 	beq.w	80058c6 <_strtod_l+0x486>
 8005b74:	4650      	mov	r0, sl
 8005b76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b78:	f001 fd40 	bl	80075fc <_Bfree>
 8005b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7e:	931c      	str	r3, [sp, #112]	; 0x70
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f300 8093 	bgt.w	8005cac <_strtod_l+0x86c>
 8005b86:	9b07      	ldr	r3, [sp, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd08      	ble.n	8005b9e <_strtod_l+0x75e>
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b90:	9906      	ldr	r1, [sp, #24]
 8005b92:	f001 fef1 	bl	8007978 <__pow5mult>
 8005b96:	9006      	str	r0, [sp, #24]
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f43f ae94 	beq.w	80058c6 <_strtod_l+0x486>
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	dd08      	ble.n	8005bb4 <_strtod_l+0x774>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	9906      	ldr	r1, [sp, #24]
 8005ba8:	f001 ff40 	bl	8007a2c <__lshift>
 8005bac:	9006      	str	r0, [sp, #24]
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	f43f ae89 	beq.w	80058c6 <_strtod_l+0x486>
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	dd08      	ble.n	8005bca <_strtod_l+0x78a>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4650      	mov	r0, sl
 8005bbc:	9904      	ldr	r1, [sp, #16]
 8005bbe:	f001 ff35 	bl	8007a2c <__lshift>
 8005bc2:	9004      	str	r0, [sp, #16]
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f43f ae7e 	beq.w	80058c6 <_strtod_l+0x486>
 8005bca:	4650      	mov	r0, sl
 8005bcc:	9a06      	ldr	r2, [sp, #24]
 8005bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bd0:	f001 ffb4 	bl	8007b3c <__mdiff>
 8005bd4:	4683      	mov	fp, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f43f ae75 	beq.w	80058c6 <_strtod_l+0x486>
 8005bdc:	2400      	movs	r4, #0
 8005bde:	68c3      	ldr	r3, [r0, #12]
 8005be0:	9904      	ldr	r1, [sp, #16]
 8005be2:	60c4      	str	r4, [r0, #12]
 8005be4:	930d      	str	r3, [sp, #52]	; 0x34
 8005be6:	f001 ff8d 	bl	8007b04 <__mcmp>
 8005bea:	42a0      	cmp	r0, r4
 8005bec:	da70      	bge.n	8005cd0 <_strtod_l+0x890>
 8005bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bf0:	ea53 0308 	orrs.w	r3, r3, r8
 8005bf4:	f040 8096 	bne.w	8005d24 <_strtod_l+0x8e4>
 8005bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8091 	bne.w	8005d24 <_strtod_l+0x8e4>
 8005c02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c06:	0d1b      	lsrs	r3, r3, #20
 8005c08:	051b      	lsls	r3, r3, #20
 8005c0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005c0e:	f240 8089 	bls.w	8005d24 <_strtod_l+0x8e4>
 8005c12:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005c16:	b923      	cbnz	r3, 8005c22 <_strtod_l+0x7e2>
 8005c18:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	f340 8081 	ble.w	8005d24 <_strtod_l+0x8e4>
 8005c22:	4659      	mov	r1, fp
 8005c24:	2201      	movs	r2, #1
 8005c26:	4650      	mov	r0, sl
 8005c28:	f001 ff00 	bl	8007a2c <__lshift>
 8005c2c:	9904      	ldr	r1, [sp, #16]
 8005c2e:	4683      	mov	fp, r0
 8005c30:	f001 ff68 	bl	8007b04 <__mcmp>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	dd75      	ble.n	8005d24 <_strtod_l+0x8e4>
 8005c38:	9905      	ldr	r1, [sp, #20]
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <_strtod_l+0x888>)
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	f000 8091 	beq.w	8005d66 <_strtod_l+0x926>
 8005c44:	ea02 0109 	and.w	r1, r2, r9
 8005c48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c4c:	f300 808b 	bgt.w	8005d66 <_strtod_l+0x926>
 8005c50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c54:	f77f aea9 	ble.w	80059aa <_strtod_l+0x56a>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <_strtod_l+0x88c>)
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c62:	4649      	mov	r1, r9
 8005c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c68:	f7fa fc36 	bl	80004d8 <__aeabi_dmul>
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4303      	orrs	r3, r0
 8005c70:	bf08      	it	eq
 8005c72:	2322      	moveq	r3, #34	; 0x22
 8005c74:	4680      	mov	r8, r0
 8005c76:	4689      	mov	r9, r1
 8005c78:	bf08      	it	eq
 8005c7a:	f8ca 3000 	streq.w	r3, [sl]
 8005c7e:	e62d      	b.n	80058dc <_strtod_l+0x49c>
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	ea03 0808 	and.w	r8, r3, r8
 8005c8c:	e6db      	b.n	8005a46 <_strtod_l+0x606>
 8005c8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005c92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005c96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005c9a:	35e2      	adds	r5, #226	; 0xe2
 8005c9c:	fa07 f505 	lsl.w	r5, r7, r5
 8005ca0:	970f      	str	r7, [sp, #60]	; 0x3c
 8005ca2:	e742      	b.n	8005b2a <_strtod_l+0x6ea>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005caa:	e73e      	b.n	8005b2a <_strtod_l+0x6ea>
 8005cac:	463a      	mov	r2, r7
 8005cae:	4650      	mov	r0, sl
 8005cb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cb2:	f001 febb 	bl	8007a2c <__lshift>
 8005cb6:	901c      	str	r0, [sp, #112]	; 0x70
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f47f af64 	bne.w	8005b86 <_strtod_l+0x746>
 8005cbe:	e602      	b.n	80058c6 <_strtod_l+0x486>
 8005cc0:	08008fb0 	.word	0x08008fb0
 8005cc4:	fffffc02 	.word	0xfffffc02
 8005cc8:	7ff00000 	.word	0x7ff00000
 8005ccc:	39500000 	.word	0x39500000
 8005cd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005cd4:	d166      	bne.n	8005da4 <_strtod_l+0x964>
 8005cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cdc:	b35a      	cbz	r2, 8005d36 <_strtod_l+0x8f6>
 8005cde:	4a9c      	ldr	r2, [pc, #624]	; (8005f50 <_strtod_l+0xb10>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d12c      	bne.n	8005d3e <_strtod_l+0x8fe>
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	b303      	cbz	r3, 8005d2c <_strtod_l+0x8ec>
 8005cea:	464b      	mov	r3, r9
 8005cec:	4a99      	ldr	r2, [pc, #612]	; (8005f54 <_strtod_l+0xb14>)
 8005cee:	f04f 31ff 	mov.w	r1, #4294967295
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005cf8:	d81b      	bhi.n	8005d32 <_strtod_l+0x8f2>
 8005cfa:	0d12      	lsrs	r2, r2, #20
 8005cfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	4298      	cmp	r0, r3
 8005d06:	d11a      	bne.n	8005d3e <_strtod_l+0x8fe>
 8005d08:	4b93      	ldr	r3, [pc, #588]	; (8005f58 <_strtod_l+0xb18>)
 8005d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d102      	bne.n	8005d16 <_strtod_l+0x8d6>
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f add8 	beq.w	80058c6 <_strtod_l+0x486>
 8005d16:	f04f 0800 	mov.w	r8, #0
 8005d1a:	4b8e      	ldr	r3, [pc, #568]	; (8005f54 <_strtod_l+0xb14>)
 8005d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d1e:	401a      	ands	r2, r3
 8005d20:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005d24:	9b05      	ldr	r3, [sp, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d196      	bne.n	8005c58 <_strtod_l+0x818>
 8005d2a:	e5d7      	b.n	80058dc <_strtod_l+0x49c>
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	e7e8      	b.n	8005d04 <_strtod_l+0x8c4>
 8005d32:	460b      	mov	r3, r1
 8005d34:	e7e6      	b.n	8005d04 <_strtod_l+0x8c4>
 8005d36:	ea53 0308 	orrs.w	r3, r3, r8
 8005d3a:	f43f af7d 	beq.w	8005c38 <_strtod_l+0x7f8>
 8005d3e:	b1e5      	cbz	r5, 8005d7a <_strtod_l+0x93a>
 8005d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d42:	421d      	tst	r5, r3
 8005d44:	d0ee      	beq.n	8005d24 <_strtod_l+0x8e4>
 8005d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	9a05      	ldr	r2, [sp, #20]
 8005d4e:	b1c3      	cbz	r3, 8005d82 <_strtod_l+0x942>
 8005d50:	f7ff fb52 	bl	80053f8 <sulp>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d5c:	f7fa fa06 	bl	800016c <__adddf3>
 8005d60:	4680      	mov	r8, r0
 8005d62:	4689      	mov	r9, r1
 8005d64:	e7de      	b.n	8005d24 <_strtod_l+0x8e4>
 8005d66:	4013      	ands	r3, r2
 8005d68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005d6c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005d70:	f04f 38ff 	mov.w	r8, #4294967295
 8005d74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005d78:	e7d4      	b.n	8005d24 <_strtod_l+0x8e4>
 8005d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d7c:	ea13 0f08 	tst.w	r3, r8
 8005d80:	e7e0      	b.n	8005d44 <_strtod_l+0x904>
 8005d82:	f7ff fb39 	bl	80053f8 <sulp>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d8e:	f7fa f9eb 	bl	8000168 <__aeabi_dsub>
 8005d92:	2200      	movs	r2, #0
 8005d94:	2300      	movs	r3, #0
 8005d96:	4680      	mov	r8, r0
 8005d98:	4689      	mov	r9, r1
 8005d9a:	f7fa fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d0c0      	beq.n	8005d24 <_strtod_l+0x8e4>
 8005da2:	e602      	b.n	80059aa <_strtod_l+0x56a>
 8005da4:	4658      	mov	r0, fp
 8005da6:	9904      	ldr	r1, [sp, #16]
 8005da8:	f002 f82e 	bl	8007e08 <__ratio>
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	f7fa fe0b 	bl	80009d0 <__aeabi_dcmple>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d075      	beq.n	8005eaa <_strtod_l+0xa6a>
 8005dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d047      	beq.n	8005e54 <_strtod_l+0xa14>
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	4f65      	ldr	r7, [pc, #404]	; (8005f5c <_strtod_l+0xb1c>)
 8005dc8:	4d64      	ldr	r5, [pc, #400]	; (8005f5c <_strtod_l+0xb1c>)
 8005dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd0:	0d1b      	lsrs	r3, r3, #20
 8005dd2:	051b      	lsls	r3, r3, #20
 8005dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dd8:	4b61      	ldr	r3, [pc, #388]	; (8005f60 <_strtod_l+0xb20>)
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	f040 80c8 	bne.w	8005f70 <_strtod_l+0xb30>
 8005de0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005de4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	4640      	mov	r0, r8
 8005dec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005df0:	4649      	mov	r1, r9
 8005df2:	f001 ff33 	bl	8007c5c <__ulp>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa fb6b 	bl	80004d8 <__aeabi_dmul>
 8005e02:	4642      	mov	r2, r8
 8005e04:	464b      	mov	r3, r9
 8005e06:	f7fa f9b1 	bl	800016c <__adddf3>
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4951      	ldr	r1, [pc, #324]	; (8005f54 <_strtod_l+0xb14>)
 8005e0e:	4a55      	ldr	r2, [pc, #340]	; (8005f64 <_strtod_l+0xb24>)
 8005e10:	4019      	ands	r1, r3
 8005e12:	4291      	cmp	r1, r2
 8005e14:	4680      	mov	r8, r0
 8005e16:	d95e      	bls.n	8005ed6 <_strtod_l+0xa96>
 8005e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d103      	bne.n	8005e2a <_strtod_l+0x9ea>
 8005e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e24:	3301      	adds	r3, #1
 8005e26:	f43f ad4e 	beq.w	80058c6 <_strtod_l+0x486>
 8005e2a:	f04f 38ff 	mov.w	r8, #4294967295
 8005e2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005f58 <_strtod_l+0xb18>
 8005e32:	4650      	mov	r0, sl
 8005e34:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e36:	f001 fbe1 	bl	80075fc <_Bfree>
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	9906      	ldr	r1, [sp, #24]
 8005e3e:	f001 fbdd 	bl	80075fc <_Bfree>
 8005e42:	4650      	mov	r0, sl
 8005e44:	9904      	ldr	r1, [sp, #16]
 8005e46:	f001 fbd9 	bl	80075fc <_Bfree>
 8005e4a:	4659      	mov	r1, fp
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	f001 fbd5 	bl	80075fc <_Bfree>
 8005e52:	e61c      	b.n	8005a8e <_strtod_l+0x64e>
 8005e54:	f1b8 0f00 	cmp.w	r8, #0
 8005e58:	d119      	bne.n	8005e8e <_strtod_l+0xa4e>
 8005e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	b9e3      	cbnz	r3, 8005e9c <_strtod_l+0xa5c>
 8005e62:	2200      	movs	r2, #0
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	4b3c      	ldr	r3, [pc, #240]	; (8005f5c <_strtod_l+0xb1c>)
 8005e6a:	f7fa fda7 	bl	80009bc <__aeabi_dcmplt>
 8005e6e:	b9c8      	cbnz	r0, 8005ea4 <_strtod_l+0xa64>
 8005e70:	2200      	movs	r2, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	4b3c      	ldr	r3, [pc, #240]	; (8005f68 <_strtod_l+0xb28>)
 8005e78:	f7fa fb2e 	bl	80004d8 <__aeabi_dmul>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005e84:	9418      	str	r4, [sp, #96]	; 0x60
 8005e86:	9319      	str	r3, [sp, #100]	; 0x64
 8005e88:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005e8c:	e79d      	b.n	8005dca <_strtod_l+0x98a>
 8005e8e:	f1b8 0f01 	cmp.w	r8, #1
 8005e92:	d103      	bne.n	8005e9c <_strtod_l+0xa5c>
 8005e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f43f ad87 	beq.w	80059aa <_strtod_l+0x56a>
 8005e9c:	2600      	movs	r6, #0
 8005e9e:	2400      	movs	r4, #0
 8005ea0:	4f32      	ldr	r7, [pc, #200]	; (8005f6c <_strtod_l+0xb2c>)
 8005ea2:	e791      	b.n	8005dc8 <_strtod_l+0x988>
 8005ea4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005ea6:	4d30      	ldr	r5, [pc, #192]	; (8005f68 <_strtod_l+0xb28>)
 8005ea8:	e7ea      	b.n	8005e80 <_strtod_l+0xa40>
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <_strtod_l+0xb28>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	b933      	cbnz	r3, 8005ecc <_strtod_l+0xa8c>
 8005ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ec2:	9010      	str	r0, [sp, #64]	; 0x40
 8005ec4:	9311      	str	r3, [sp, #68]	; 0x44
 8005ec6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005eca:	e77e      	b.n	8005dca <_strtod_l+0x98a>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ed4:	e7f7      	b.n	8005ec6 <_strtod_l+0xa86>
 8005ed6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005eda:	9b05      	ldr	r3, [sp, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1a8      	bne.n	8005e32 <_strtod_l+0x9f2>
 8005ee0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ee6:	0d1b      	lsrs	r3, r3, #20
 8005ee8:	051b      	lsls	r3, r3, #20
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d1a1      	bne.n	8005e32 <_strtod_l+0x9f2>
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa ff47 	bl	8000d84 <__aeabi_d2lz>
 8005ef6:	f7fa fac1 	bl	800047c <__aeabi_l2d>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa f931 	bl	8000168 <__aeabi_dsub>
 8005f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f0c:	ea43 0308 	orr.w	r3, r3, r8
 8005f10:	4313      	orrs	r3, r2
 8005f12:	4604      	mov	r4, r0
 8005f14:	460d      	mov	r5, r1
 8005f16:	d066      	beq.n	8005fe6 <_strtod_l+0xba6>
 8005f18:	a309      	add	r3, pc, #36	; (adr r3, 8005f40 <_strtod_l+0xb00>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fd4d 	bl	80009bc <__aeabi_dcmplt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f47f acda 	bne.w	80058dc <_strtod_l+0x49c>
 8005f28:	a307      	add	r3, pc, #28	; (adr r3, 8005f48 <_strtod_l+0xb08>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fd61 	bl	80009f8 <__aeabi_dcmpgt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f af7b 	beq.w	8005e32 <_strtod_l+0x9f2>
 8005f3c:	e4ce      	b.n	80058dc <_strtod_l+0x49c>
 8005f3e:	bf00      	nop
 8005f40:	94a03595 	.word	0x94a03595
 8005f44:	3fdfffff 	.word	0x3fdfffff
 8005f48:	35afe535 	.word	0x35afe535
 8005f4c:	3fe00000 	.word	0x3fe00000
 8005f50:	000fffff 	.word	0x000fffff
 8005f54:	7ff00000 	.word	0x7ff00000
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	3ff00000 	.word	0x3ff00000
 8005f60:	7fe00000 	.word	0x7fe00000
 8005f64:	7c9fffff 	.word	0x7c9fffff
 8005f68:	3fe00000 	.word	0x3fe00000
 8005f6c:	bff00000 	.word	0xbff00000
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	b313      	cbz	r3, 8005fba <_strtod_l+0xb7a>
 8005f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f7a:	d81e      	bhi.n	8005fba <_strtod_l+0xb7a>
 8005f7c:	a326      	add	r3, pc, #152	; (adr r3, 8006018 <_strtod_l+0xbd8>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	4620      	mov	r0, r4
 8005f84:	4629      	mov	r1, r5
 8005f86:	f7fa fd23 	bl	80009d0 <__aeabi_dcmple>
 8005f8a:	b190      	cbz	r0, 8005fb2 <_strtod_l+0xb72>
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f7fa fd7a 	bl	8000a88 <__aeabi_d2uiz>
 8005f94:	2801      	cmp	r0, #1
 8005f96:	bf38      	it	cc
 8005f98:	2001      	movcc	r0, #1
 8005f9a:	f7fa fa23 	bl	80003e4 <__aeabi_ui2d>
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	b9d3      	cbnz	r3, 8005fdc <_strtod_l+0xb9c>
 8005fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005faa:	9012      	str	r0, [sp, #72]	; 0x48
 8005fac:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fb4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005fb8:	1a9f      	subs	r7, r3, r2
 8005fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fbe:	f001 fe4d 	bl	8007c5c <__ulp>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	f7fa fa85 	bl	80004d8 <__aeabi_dmul>
 8005fce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fd2:	f7fa f8cb 	bl	800016c <__adddf3>
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4689      	mov	r9, r1
 8005fda:	e77e      	b.n	8005eda <_strtod_l+0xa9a>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005fe4:	e7e3      	b.n	8005fae <_strtod_l+0xb6e>
 8005fe6:	a30e      	add	r3, pc, #56	; (adr r3, 8006020 <_strtod_l+0xbe0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa fce6 	bl	80009bc <__aeabi_dcmplt>
 8005ff0:	e7a1      	b.n	8005f36 <_strtod_l+0xaf6>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ff8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	f7ff ba65 	b.w	80054ca <_strtod_l+0x8a>
 8006000:	2b65      	cmp	r3, #101	; 0x65
 8006002:	f43f ab5c 	beq.w	80056be <_strtod_l+0x27e>
 8006006:	2b45      	cmp	r3, #69	; 0x45
 8006008:	f43f ab59 	beq.w	80056be <_strtod_l+0x27e>
 800600c:	2201      	movs	r2, #1
 800600e:	f7ff bb8d 	b.w	800572c <_strtod_l+0x2ec>
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	ffc00000 	.word	0xffc00000
 800601c:	41dfffff 	.word	0x41dfffff
 8006020:	94a03595 	.word	0x94a03595
 8006024:	3fcfffff 	.word	0x3fcfffff

08006028 <_strtod_r>:
 8006028:	4b01      	ldr	r3, [pc, #4]	; (8006030 <_strtod_r+0x8>)
 800602a:	f7ff ba09 	b.w	8005440 <_strtod_l>
 800602e:	bf00      	nop
 8006030:	20000074 	.word	0x20000074

08006034 <_strtol_l.isra.0>:
 8006034:	2b01      	cmp	r3, #1
 8006036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603a:	4686      	mov	lr, r0
 800603c:	d001      	beq.n	8006042 <_strtol_l.isra.0+0xe>
 800603e:	2b24      	cmp	r3, #36	; 0x24
 8006040:	d906      	bls.n	8006050 <_strtol_l.isra.0+0x1c>
 8006042:	f7fe fb11 	bl	8004668 <__errno>
 8006046:	2316      	movs	r3, #22
 8006048:	6003      	str	r3, [r0, #0]
 800604a:	2000      	movs	r0, #0
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	468c      	mov	ip, r1
 8006052:	4e3a      	ldr	r6, [pc, #232]	; (800613c <_strtol_l.isra.0+0x108>)
 8006054:	4660      	mov	r0, ip
 8006056:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800605a:	5da5      	ldrb	r5, [r4, r6]
 800605c:	f015 0508 	ands.w	r5, r5, #8
 8006060:	d1f8      	bne.n	8006054 <_strtol_l.isra.0+0x20>
 8006062:	2c2d      	cmp	r4, #45	; 0x2d
 8006064:	d133      	bne.n	80060ce <_strtol_l.isra.0+0x9a>
 8006066:	f04f 0801 	mov.w	r8, #1
 800606a:	f89c 4000 	ldrb.w	r4, [ip]
 800606e:	f100 0c02 	add.w	ip, r0, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d05d      	beq.n	8006132 <_strtol_l.isra.0+0xfe>
 8006076:	2b10      	cmp	r3, #16
 8006078:	d10c      	bne.n	8006094 <_strtol_l.isra.0+0x60>
 800607a:	2c30      	cmp	r4, #48	; 0x30
 800607c:	d10a      	bne.n	8006094 <_strtol_l.isra.0+0x60>
 800607e:	f89c 0000 	ldrb.w	r0, [ip]
 8006082:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006086:	2858      	cmp	r0, #88	; 0x58
 8006088:	d14e      	bne.n	8006128 <_strtol_l.isra.0+0xf4>
 800608a:	2310      	movs	r3, #16
 800608c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006090:	f10c 0c02 	add.w	ip, ip, #2
 8006094:	2500      	movs	r5, #0
 8006096:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800609a:	3f01      	subs	r7, #1
 800609c:	fbb7 f9f3 	udiv	r9, r7, r3
 80060a0:	4628      	mov	r0, r5
 80060a2:	fb03 7a19 	mls	sl, r3, r9, r7
 80060a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80060aa:	2e09      	cmp	r6, #9
 80060ac:	d818      	bhi.n	80060e0 <_strtol_l.isra.0+0xac>
 80060ae:	4634      	mov	r4, r6
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	dd24      	ble.n	80060fe <_strtol_l.isra.0+0xca>
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	db1f      	blt.n	80060f8 <_strtol_l.isra.0+0xc4>
 80060b8:	4581      	cmp	r9, r0
 80060ba:	d31d      	bcc.n	80060f8 <_strtol_l.isra.0+0xc4>
 80060bc:	d101      	bne.n	80060c2 <_strtol_l.isra.0+0x8e>
 80060be:	45a2      	cmp	sl, r4
 80060c0:	db1a      	blt.n	80060f8 <_strtol_l.isra.0+0xc4>
 80060c2:	2501      	movs	r5, #1
 80060c4:	fb00 4003 	mla	r0, r0, r3, r4
 80060c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80060cc:	e7eb      	b.n	80060a6 <_strtol_l.isra.0+0x72>
 80060ce:	2c2b      	cmp	r4, #43	; 0x2b
 80060d0:	bf08      	it	eq
 80060d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80060d6:	46a8      	mov	r8, r5
 80060d8:	bf08      	it	eq
 80060da:	f100 0c02 	addeq.w	ip, r0, #2
 80060de:	e7c8      	b.n	8006072 <_strtol_l.isra.0+0x3e>
 80060e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80060e4:	2e19      	cmp	r6, #25
 80060e6:	d801      	bhi.n	80060ec <_strtol_l.isra.0+0xb8>
 80060e8:	3c37      	subs	r4, #55	; 0x37
 80060ea:	e7e1      	b.n	80060b0 <_strtol_l.isra.0+0x7c>
 80060ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80060f0:	2e19      	cmp	r6, #25
 80060f2:	d804      	bhi.n	80060fe <_strtol_l.isra.0+0xca>
 80060f4:	3c57      	subs	r4, #87	; 0x57
 80060f6:	e7db      	b.n	80060b0 <_strtol_l.isra.0+0x7c>
 80060f8:	f04f 35ff 	mov.w	r5, #4294967295
 80060fc:	e7e4      	b.n	80060c8 <_strtol_l.isra.0+0x94>
 80060fe:	2d00      	cmp	r5, #0
 8006100:	da08      	bge.n	8006114 <_strtol_l.isra.0+0xe0>
 8006102:	2322      	movs	r3, #34	; 0x22
 8006104:	4638      	mov	r0, r7
 8006106:	f8ce 3000 	str.w	r3, [lr]
 800610a:	2a00      	cmp	r2, #0
 800610c:	d09e      	beq.n	800604c <_strtol_l.isra.0+0x18>
 800610e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006112:	e007      	b.n	8006124 <_strtol_l.isra.0+0xf0>
 8006114:	f1b8 0f00 	cmp.w	r8, #0
 8006118:	d000      	beq.n	800611c <_strtol_l.isra.0+0xe8>
 800611a:	4240      	negs	r0, r0
 800611c:	2a00      	cmp	r2, #0
 800611e:	d095      	beq.n	800604c <_strtol_l.isra.0+0x18>
 8006120:	2d00      	cmp	r5, #0
 8006122:	d1f4      	bne.n	800610e <_strtol_l.isra.0+0xda>
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	e791      	b.n	800604c <_strtol_l.isra.0+0x18>
 8006128:	2430      	movs	r4, #48	; 0x30
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1b2      	bne.n	8006094 <_strtol_l.isra.0+0x60>
 800612e:	2308      	movs	r3, #8
 8006130:	e7b0      	b.n	8006094 <_strtol_l.isra.0+0x60>
 8006132:	2c30      	cmp	r4, #48	; 0x30
 8006134:	d0a3      	beq.n	800607e <_strtol_l.isra.0+0x4a>
 8006136:	230a      	movs	r3, #10
 8006138:	e7ac      	b.n	8006094 <_strtol_l.isra.0+0x60>
 800613a:	bf00      	nop
 800613c:	08008fd9 	.word	0x08008fd9

08006140 <_strtol_r>:
 8006140:	f7ff bf78 	b.w	8006034 <_strtol_l.isra.0>

08006144 <quorem>:
 8006144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	6903      	ldr	r3, [r0, #16]
 800614a:	690c      	ldr	r4, [r1, #16]
 800614c:	4607      	mov	r7, r0
 800614e:	42a3      	cmp	r3, r4
 8006150:	f2c0 8083 	blt.w	800625a <quorem+0x116>
 8006154:	3c01      	subs	r4, #1
 8006156:	f100 0514 	add.w	r5, r0, #20
 800615a:	f101 0814 	add.w	r8, r1, #20
 800615e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800616c:	3301      	adds	r3, #1
 800616e:	429a      	cmp	r2, r3
 8006170:	fbb2 f6f3 	udiv	r6, r2, r3
 8006174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800617c:	d332      	bcc.n	80061e4 <quorem+0xa0>
 800617e:	f04f 0e00 	mov.w	lr, #0
 8006182:	4640      	mov	r0, r8
 8006184:	46ac      	mov	ip, r5
 8006186:	46f2      	mov	sl, lr
 8006188:	f850 2b04 	ldr.w	r2, [r0], #4
 800618c:	b293      	uxth	r3, r2
 800618e:	fb06 e303 	mla	r3, r6, r3, lr
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006198:	fb06 e202 	mla	r2, r6, r2, lr
 800619c:	b29b      	uxth	r3, r3
 800619e:	ebaa 0303 	sub.w	r3, sl, r3
 80061a2:	f8dc a000 	ldr.w	sl, [ip]
 80061a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061aa:	fa1f fa8a 	uxth.w	sl, sl
 80061ae:	4453      	add	r3, sl
 80061b0:	fa1f fa82 	uxth.w	sl, r2
 80061b4:	f8dc 2000 	ldr.w	r2, [ip]
 80061b8:	4581      	cmp	r9, r0
 80061ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061cc:	f84c 3b04 	str.w	r3, [ip], #4
 80061d0:	d2da      	bcs.n	8006188 <quorem+0x44>
 80061d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d6:	b92b      	cbnz	r3, 80061e4 <quorem+0xa0>
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	3b04      	subs	r3, #4
 80061dc:	429d      	cmp	r5, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	d32f      	bcc.n	8006242 <quorem+0xfe>
 80061e2:	613c      	str	r4, [r7, #16]
 80061e4:	4638      	mov	r0, r7
 80061e6:	f001 fc8d 	bl	8007b04 <__mcmp>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	db25      	blt.n	800623a <quorem+0xf6>
 80061ee:	4628      	mov	r0, r5
 80061f0:	f04f 0c00 	mov.w	ip, #0
 80061f4:	3601      	adds	r6, #1
 80061f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80061fa:	f8d0 e000 	ldr.w	lr, [r0]
 80061fe:	b28b      	uxth	r3, r1
 8006200:	ebac 0303 	sub.w	r3, ip, r3
 8006204:	fa1f f28e 	uxth.w	r2, lr
 8006208:	4413      	add	r3, r2
 800620a:	0c0a      	lsrs	r2, r1, #16
 800620c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621a:	45c1      	cmp	r9, r8
 800621c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006220:	f840 3b04 	str.w	r3, [r0], #4
 8006224:	d2e7      	bcs.n	80061f6 <quorem+0xb2>
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	b922      	cbnz	r2, 800623a <quorem+0xf6>
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d30a      	bcc.n	800624e <quorem+0x10a>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4630      	mov	r0, r6
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	3b04      	subs	r3, #4
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1cb      	bne.n	80061e2 <quorem+0x9e>
 800624a:	3c01      	subs	r4, #1
 800624c:	e7c6      	b.n	80061dc <quorem+0x98>
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	3b04      	subs	r3, #4
 8006252:	2a00      	cmp	r2, #0
 8006254:	d1f0      	bne.n	8006238 <quorem+0xf4>
 8006256:	3c01      	subs	r4, #1
 8006258:	e7eb      	b.n	8006232 <quorem+0xee>
 800625a:	2000      	movs	r0, #0
 800625c:	e7ee      	b.n	800623c <quorem+0xf8>
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	461f      	mov	r7, r3
 8006268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800626a:	b099      	sub	sp, #100	; 0x64
 800626c:	4605      	mov	r5, r0
 800626e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006272:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006276:	b974      	cbnz	r4, 8006296 <_dtoa_r+0x36>
 8006278:	2010      	movs	r0, #16
 800627a:	f001 f949 	bl	8007510 <malloc>
 800627e:	4602      	mov	r2, r0
 8006280:	6268      	str	r0, [r5, #36]	; 0x24
 8006282:	b920      	cbnz	r0, 800628e <_dtoa_r+0x2e>
 8006284:	21ea      	movs	r1, #234	; 0xea
 8006286:	4bae      	ldr	r3, [pc, #696]	; (8006540 <_dtoa_r+0x2e0>)
 8006288:	48ae      	ldr	r0, [pc, #696]	; (8006544 <_dtoa_r+0x2e4>)
 800628a:	f002 f875 	bl	8008378 <__assert_func>
 800628e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006292:	6004      	str	r4, [r0, #0]
 8006294:	60c4      	str	r4, [r0, #12]
 8006296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	b151      	cbz	r1, 80062b2 <_dtoa_r+0x52>
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	2301      	movs	r3, #1
 80062a0:	4093      	lsls	r3, r2
 80062a2:	604a      	str	r2, [r1, #4]
 80062a4:	608b      	str	r3, [r1, #8]
 80062a6:	4628      	mov	r0, r5
 80062a8:	f001 f9a8 	bl	80075fc <_Bfree>
 80062ac:	2200      	movs	r2, #0
 80062ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	1e3b      	subs	r3, r7, #0
 80062b4:	bfaf      	iteee	ge
 80062b6:	2300      	movge	r3, #0
 80062b8:	2201      	movlt	r2, #1
 80062ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062be:	9305      	strlt	r3, [sp, #20]
 80062c0:	bfa8      	it	ge
 80062c2:	f8c8 3000 	strge.w	r3, [r8]
 80062c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062ca:	4b9f      	ldr	r3, [pc, #636]	; (8006548 <_dtoa_r+0x2e8>)
 80062cc:	bfb8      	it	lt
 80062ce:	f8c8 2000 	strlt.w	r2, [r8]
 80062d2:	ea33 0309 	bics.w	r3, r3, r9
 80062d6:	d119      	bne.n	800630c <_dtoa_r+0xac>
 80062d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80062dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062e4:	4333      	orrs	r3, r6
 80062e6:	f000 8580 	beq.w	8006dea <_dtoa_r+0xb8a>
 80062ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ec:	b953      	cbnz	r3, 8006304 <_dtoa_r+0xa4>
 80062ee:	4b97      	ldr	r3, [pc, #604]	; (800654c <_dtoa_r+0x2ec>)
 80062f0:	e022      	b.n	8006338 <_dtoa_r+0xd8>
 80062f2:	4b97      	ldr	r3, [pc, #604]	; (8006550 <_dtoa_r+0x2f0>)
 80062f4:	9308      	str	r3, [sp, #32]
 80062f6:	3308      	adds	r3, #8
 80062f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	9808      	ldr	r0, [sp, #32]
 80062fe:	b019      	add	sp, #100	; 0x64
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	4b91      	ldr	r3, [pc, #580]	; (800654c <_dtoa_r+0x2ec>)
 8006306:	9308      	str	r3, [sp, #32]
 8006308:	3303      	adds	r3, #3
 800630a:	e7f5      	b.n	80062f8 <_dtoa_r+0x98>
 800630c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006310:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	f7fa fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8006320:	4680      	mov	r8, r0
 8006322:	b158      	cbz	r0, 800633c <_dtoa_r+0xdc>
 8006324:	2301      	movs	r3, #1
 8006326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8559 	beq.w	8006de4 <_dtoa_r+0xb84>
 8006332:	4888      	ldr	r0, [pc, #544]	; (8006554 <_dtoa_r+0x2f4>)
 8006334:	6018      	str	r0, [r3, #0]
 8006336:	1e43      	subs	r3, r0, #1
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	e7df      	b.n	80062fc <_dtoa_r+0x9c>
 800633c:	ab16      	add	r3, sp, #88	; 0x58
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	ab17      	add	r3, sp, #92	; 0x5c
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4628      	mov	r0, r5
 8006346:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800634a:	f001 fd01 	bl	8007d50 <__d2b>
 800634e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006352:	4682      	mov	sl, r0
 8006354:	2c00      	cmp	r4, #0
 8006356:	d07e      	beq.n	8006456 <_dtoa_r+0x1f6>
 8006358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006366:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800636a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800636e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006372:	2200      	movs	r2, #0
 8006374:	4b78      	ldr	r3, [pc, #480]	; (8006558 <_dtoa_r+0x2f8>)
 8006376:	f7f9 fef7 	bl	8000168 <__aeabi_dsub>
 800637a:	a36b      	add	r3, pc, #428	; (adr r3, 8006528 <_dtoa_r+0x2c8>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f7fa f8aa 	bl	80004d8 <__aeabi_dmul>
 8006384:	a36a      	add	r3, pc, #424	; (adr r3, 8006530 <_dtoa_r+0x2d0>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 feef 	bl	800016c <__adddf3>
 800638e:	4606      	mov	r6, r0
 8006390:	4620      	mov	r0, r4
 8006392:	460f      	mov	r7, r1
 8006394:	f7fa f836 	bl	8000404 <__aeabi_i2d>
 8006398:	a367      	add	r3, pc, #412	; (adr r3, 8006538 <_dtoa_r+0x2d8>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7fa f89b 	bl	80004d8 <__aeabi_dmul>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4630      	mov	r0, r6
 80063a8:	4639      	mov	r1, r7
 80063aa:	f7f9 fedf 	bl	800016c <__adddf3>
 80063ae:	4606      	mov	r6, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	f7fa fb41 	bl	8000a38 <__aeabi_d2iz>
 80063b6:	2200      	movs	r2, #0
 80063b8:	4681      	mov	r9, r0
 80063ba:	2300      	movs	r3, #0
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7fa fafc 	bl	80009bc <__aeabi_dcmplt>
 80063c4:	b148      	cbz	r0, 80063da <_dtoa_r+0x17a>
 80063c6:	4648      	mov	r0, r9
 80063c8:	f7fa f81c 	bl	8000404 <__aeabi_i2d>
 80063cc:	4632      	mov	r2, r6
 80063ce:	463b      	mov	r3, r7
 80063d0:	f7fa faea 	bl	80009a8 <__aeabi_dcmpeq>
 80063d4:	b908      	cbnz	r0, 80063da <_dtoa_r+0x17a>
 80063d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80063da:	f1b9 0f16 	cmp.w	r9, #22
 80063de:	d857      	bhi.n	8006490 <_dtoa_r+0x230>
 80063e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063e4:	4b5d      	ldr	r3, [pc, #372]	; (800655c <_dtoa_r+0x2fc>)
 80063e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa fae5 	bl	80009bc <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d04e      	beq.n	8006494 <_dtoa_r+0x234>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80063fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006400:	1b1c      	subs	r4, r3, r4
 8006402:	1e63      	subs	r3, r4, #1
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	bf49      	itett	mi
 8006408:	f1c4 0301 	rsbmi	r3, r4, #1
 800640c:	2300      	movpl	r3, #0
 800640e:	9306      	strmi	r3, [sp, #24]
 8006410:	2300      	movmi	r3, #0
 8006412:	bf54      	ite	pl
 8006414:	9306      	strpl	r3, [sp, #24]
 8006416:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	db3c      	blt.n	8006498 <_dtoa_r+0x238>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006424:	444b      	add	r3, r9
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	2300      	movs	r3, #0
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	2b09      	cmp	r3, #9
 8006430:	d86c      	bhi.n	800650c <_dtoa_r+0x2ac>
 8006432:	2b05      	cmp	r3, #5
 8006434:	bfc4      	itt	gt
 8006436:	3b04      	subgt	r3, #4
 8006438:	9322      	strgt	r3, [sp, #136]	; 0x88
 800643a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800643c:	bfc8      	it	gt
 800643e:	2400      	movgt	r4, #0
 8006440:	f1a3 0302 	sub.w	r3, r3, #2
 8006444:	bfd8      	it	le
 8006446:	2401      	movle	r4, #1
 8006448:	2b03      	cmp	r3, #3
 800644a:	f200 808b 	bhi.w	8006564 <_dtoa_r+0x304>
 800644e:	e8df f003 	tbb	[pc, r3]
 8006452:	4f2d      	.short	0x4f2d
 8006454:	5b4d      	.short	0x5b4d
 8006456:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800645a:	441c      	add	r4, r3
 800645c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006460:	2b20      	cmp	r3, #32
 8006462:	bfc3      	ittte	gt
 8006464:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006468:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800646c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006470:	f1c3 0320 	rsble	r3, r3, #32
 8006474:	bfc6      	itte	gt
 8006476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800647a:	4318      	orrgt	r0, r3
 800647c:	fa06 f003 	lslle.w	r0, r6, r3
 8006480:	f7f9 ffb0 	bl	80003e4 <__aeabi_ui2d>
 8006484:	2301      	movs	r3, #1
 8006486:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800648a:	3c01      	subs	r4, #1
 800648c:	9313      	str	r3, [sp, #76]	; 0x4c
 800648e:	e770      	b.n	8006372 <_dtoa_r+0x112>
 8006490:	2301      	movs	r3, #1
 8006492:	e7b3      	b.n	80063fc <_dtoa_r+0x19c>
 8006494:	900f      	str	r0, [sp, #60]	; 0x3c
 8006496:	e7b2      	b.n	80063fe <_dtoa_r+0x19e>
 8006498:	9b06      	ldr	r3, [sp, #24]
 800649a:	eba3 0309 	sub.w	r3, r3, r9
 800649e:	9306      	str	r3, [sp, #24]
 80064a0:	f1c9 0300 	rsb	r3, r9, #0
 80064a4:	930a      	str	r3, [sp, #40]	; 0x28
 80064a6:	2300      	movs	r3, #0
 80064a8:	930e      	str	r3, [sp, #56]	; 0x38
 80064aa:	e7bf      	b.n	800642c <_dtoa_r+0x1cc>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc59      	bgt.n	800656a <_dtoa_r+0x30a>
 80064b6:	f04f 0b01 	mov.w	fp, #1
 80064ba:	465b      	mov	r3, fp
 80064bc:	f8cd b008 	str.w	fp, [sp, #8]
 80064c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80064c4:	2200      	movs	r2, #0
 80064c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80064c8:	6042      	str	r2, [r0, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f102 0614 	add.w	r6, r2, #20
 80064d0:	429e      	cmp	r6, r3
 80064d2:	6841      	ldr	r1, [r0, #4]
 80064d4:	d94f      	bls.n	8006576 <_dtoa_r+0x316>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f001 f850 	bl	800757c <_Balloc>
 80064dc:	9008      	str	r0, [sp, #32]
 80064de:	2800      	cmp	r0, #0
 80064e0:	d14d      	bne.n	800657e <_dtoa_r+0x31e>
 80064e2:	4602      	mov	r2, r0
 80064e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <_dtoa_r+0x300>)
 80064ea:	e6cd      	b.n	8006288 <_dtoa_r+0x28>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e7de      	b.n	80064ae <_dtoa_r+0x24e>
 80064f0:	2300      	movs	r3, #0
 80064f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064f6:	eb09 0b03 	add.w	fp, r9, r3
 80064fa:	f10b 0301 	add.w	r3, fp, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	bfb8      	it	lt
 8006504:	2301      	movlt	r3, #1
 8006506:	e7dd      	b.n	80064c4 <_dtoa_r+0x264>
 8006508:	2301      	movs	r3, #1
 800650a:	e7f2      	b.n	80064f2 <_dtoa_r+0x292>
 800650c:	2401      	movs	r4, #1
 800650e:	2300      	movs	r3, #0
 8006510:	940b      	str	r4, [sp, #44]	; 0x2c
 8006512:	9322      	str	r3, [sp, #136]	; 0x88
 8006514:	f04f 3bff 	mov.w	fp, #4294967295
 8006518:	2200      	movs	r2, #0
 800651a:	2312      	movs	r3, #18
 800651c:	f8cd b008 	str.w	fp, [sp, #8]
 8006520:	9223      	str	r2, [sp, #140]	; 0x8c
 8006522:	e7cf      	b.n	80064c4 <_dtoa_r+0x264>
 8006524:	f3af 8000 	nop.w
 8006528:	636f4361 	.word	0x636f4361
 800652c:	3fd287a7 	.word	0x3fd287a7
 8006530:	8b60c8b3 	.word	0x8b60c8b3
 8006534:	3fc68a28 	.word	0x3fc68a28
 8006538:	509f79fb 	.word	0x509f79fb
 800653c:	3fd34413 	.word	0x3fd34413
 8006540:	080090e6 	.word	0x080090e6
 8006544:	080090fd 	.word	0x080090fd
 8006548:	7ff00000 	.word	0x7ff00000
 800654c:	080090e2 	.word	0x080090e2
 8006550:	080090d9 	.word	0x080090d9
 8006554:	08008f59 	.word	0x08008f59
 8006558:	3ff80000 	.word	0x3ff80000
 800655c:	08009278 	.word	0x08009278
 8006560:	0800915c 	.word	0x0800915c
 8006564:	2301      	movs	r3, #1
 8006566:	930b      	str	r3, [sp, #44]	; 0x2c
 8006568:	e7d4      	b.n	8006514 <_dtoa_r+0x2b4>
 800656a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800656e:	465b      	mov	r3, fp
 8006570:	f8cd b008 	str.w	fp, [sp, #8]
 8006574:	e7a6      	b.n	80064c4 <_dtoa_r+0x264>
 8006576:	3101      	adds	r1, #1
 8006578:	6041      	str	r1, [r0, #4]
 800657a:	0052      	lsls	r2, r2, #1
 800657c:	e7a6      	b.n	80064cc <_dtoa_r+0x26c>
 800657e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006580:	9a08      	ldr	r2, [sp, #32]
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	2b0e      	cmp	r3, #14
 8006588:	f200 80a8 	bhi.w	80066dc <_dtoa_r+0x47c>
 800658c:	2c00      	cmp	r4, #0
 800658e:	f000 80a5 	beq.w	80066dc <_dtoa_r+0x47c>
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	dd34      	ble.n	8006602 <_dtoa_r+0x3a2>
 8006598:	4a9a      	ldr	r2, [pc, #616]	; (8006804 <_dtoa_r+0x5a4>)
 800659a:	f009 030f 	and.w	r3, r9, #15
 800659e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80065a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80065b2:	d016      	beq.n	80065e2 <_dtoa_r+0x382>
 80065b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <_dtoa_r+0x5a8>)
 80065ba:	2703      	movs	r7, #3
 80065bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065c0:	f7fa f8b4 	bl	800072c <__aeabi_ddiv>
 80065c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c8:	f004 040f 	and.w	r4, r4, #15
 80065cc:	4e8e      	ldr	r6, [pc, #568]	; (8006808 <_dtoa_r+0x5a8>)
 80065ce:	b954      	cbnz	r4, 80065e6 <_dtoa_r+0x386>
 80065d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d8:	f7fa f8a8 	bl	800072c <__aeabi_ddiv>
 80065dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e0:	e029      	b.n	8006636 <_dtoa_r+0x3d6>
 80065e2:	2702      	movs	r7, #2
 80065e4:	e7f2      	b.n	80065cc <_dtoa_r+0x36c>
 80065e6:	07e1      	lsls	r1, r4, #31
 80065e8:	d508      	bpl.n	80065fc <_dtoa_r+0x39c>
 80065ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065fa:	3701      	adds	r7, #1
 80065fc:	1064      	asrs	r4, r4, #1
 80065fe:	3608      	adds	r6, #8
 8006600:	e7e5      	b.n	80065ce <_dtoa_r+0x36e>
 8006602:	f000 80a5 	beq.w	8006750 <_dtoa_r+0x4f0>
 8006606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800660a:	f1c9 0400 	rsb	r4, r9, #0
 800660e:	4b7d      	ldr	r3, [pc, #500]	; (8006804 <_dtoa_r+0x5a4>)
 8006610:	f004 020f 	and.w	r2, r4, #15
 8006614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7f9 ff5c 	bl	80004d8 <__aeabi_dmul>
 8006620:	2702      	movs	r7, #2
 8006622:	2300      	movs	r3, #0
 8006624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006628:	4e77      	ldr	r6, [pc, #476]	; (8006808 <_dtoa_r+0x5a8>)
 800662a:	1124      	asrs	r4, r4, #4
 800662c:	2c00      	cmp	r4, #0
 800662e:	f040 8084 	bne.w	800673a <_dtoa_r+0x4da>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d2      	bne.n	80065dc <_dtoa_r+0x37c>
 8006636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 808b 	beq.w	8006754 <_dtoa_r+0x4f4>
 800663e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006642:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800664a:	2200      	movs	r2, #0
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <_dtoa_r+0x5ac>)
 800664e:	f7fa f9b5 	bl	80009bc <__aeabi_dcmplt>
 8006652:	2800      	cmp	r0, #0
 8006654:	d07e      	beq.n	8006754 <_dtoa_r+0x4f4>
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d07b      	beq.n	8006754 <_dtoa_r+0x4f4>
 800665c:	f1bb 0f00 	cmp.w	fp, #0
 8006660:	dd38      	ble.n	80066d4 <_dtoa_r+0x474>
 8006662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006666:	2200      	movs	r2, #0
 8006668:	4b69      	ldr	r3, [pc, #420]	; (8006810 <_dtoa_r+0x5b0>)
 800666a:	f7f9 ff35 	bl	80004d8 <__aeabi_dmul>
 800666e:	465c      	mov	r4, fp
 8006670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006674:	f109 38ff 	add.w	r8, r9, #4294967295
 8006678:	3701      	adds	r7, #1
 800667a:	4638      	mov	r0, r7
 800667c:	f7f9 fec2 	bl	8000404 <__aeabi_i2d>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	2200      	movs	r2, #0
 800668a:	4b62      	ldr	r3, [pc, #392]	; (8006814 <_dtoa_r+0x5b4>)
 800668c:	f7f9 fd6e 	bl	800016c <__adddf3>
 8006690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006694:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006698:	9611      	str	r6, [sp, #68]	; 0x44
 800669a:	2c00      	cmp	r4, #0
 800669c:	d15d      	bne.n	800675a <_dtoa_r+0x4fa>
 800669e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <_dtoa_r+0x5b8>)
 80066a6:	f7f9 fd5f 	bl	8000168 <__aeabi_dsub>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066b2:	4633      	mov	r3, r6
 80066b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066b6:	f7fa f99f 	bl	80009f8 <__aeabi_dcmpgt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f040 829e 	bne.w	8006bfc <_dtoa_r+0x99c>
 80066c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066ca:	f7fa f977 	bl	80009bc <__aeabi_dcmplt>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 8292 	bne.w	8006bf8 <_dtoa_r+0x998>
 80066d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80066d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f2c0 8153 	blt.w	800698a <_dtoa_r+0x72a>
 80066e4:	f1b9 0f0e 	cmp.w	r9, #14
 80066e8:	f300 814f 	bgt.w	800698a <_dtoa_r+0x72a>
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <_dtoa_r+0x5a4>)
 80066ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f280 80db 	bge.w	80068b8 <_dtoa_r+0x658>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f300 80d7 	bgt.w	80068b8 <_dtoa_r+0x658>
 800670a:	f040 8274 	bne.w	8006bf6 <_dtoa_r+0x996>
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	2200      	movs	r2, #0
 8006714:	4b40      	ldr	r3, [pc, #256]	; (8006818 <_dtoa_r+0x5b8>)
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671e:	f7fa f961 	bl	80009e4 <__aeabi_dcmpge>
 8006722:	9c02      	ldr	r4, [sp, #8]
 8006724:	4626      	mov	r6, r4
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 824a 	bne.w	8006bc0 <_dtoa_r+0x960>
 800672c:	2331      	movs	r3, #49	; 0x31
 800672e:	9f08      	ldr	r7, [sp, #32]
 8006730:	f109 0901 	add.w	r9, r9, #1
 8006734:	f807 3b01 	strb.w	r3, [r7], #1
 8006738:	e246      	b.n	8006bc8 <_dtoa_r+0x968>
 800673a:	07e2      	lsls	r2, r4, #31
 800673c:	d505      	bpl.n	800674a <_dtoa_r+0x4ea>
 800673e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	2301      	movs	r3, #1
 8006748:	3701      	adds	r7, #1
 800674a:	1064      	asrs	r4, r4, #1
 800674c:	3608      	adds	r6, #8
 800674e:	e76d      	b.n	800662c <_dtoa_r+0x3cc>
 8006750:	2702      	movs	r7, #2
 8006752:	e770      	b.n	8006636 <_dtoa_r+0x3d6>
 8006754:	46c8      	mov	r8, r9
 8006756:	9c02      	ldr	r4, [sp, #8]
 8006758:	e78f      	b.n	800667a <_dtoa_r+0x41a>
 800675a:	9908      	ldr	r1, [sp, #32]
 800675c:	4b29      	ldr	r3, [pc, #164]	; (8006804 <_dtoa_r+0x5a4>)
 800675e:	4421      	add	r1, r4
 8006760:	9112      	str	r1, [sp, #72]	; 0x48
 8006762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006764:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006768:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800676c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006770:	2900      	cmp	r1, #0
 8006772:	d055      	beq.n	8006820 <_dtoa_r+0x5c0>
 8006774:	2000      	movs	r0, #0
 8006776:	4929      	ldr	r1, [pc, #164]	; (800681c <_dtoa_r+0x5bc>)
 8006778:	f7f9 ffd8 	bl	800072c <__aeabi_ddiv>
 800677c:	463b      	mov	r3, r7
 800677e:	4632      	mov	r2, r6
 8006780:	f7f9 fcf2 	bl	8000168 <__aeabi_dsub>
 8006784:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006788:	9f08      	ldr	r7, [sp, #32]
 800678a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678e:	f7fa f953 	bl	8000a38 <__aeabi_d2iz>
 8006792:	4604      	mov	r4, r0
 8006794:	f7f9 fe36 	bl	8000404 <__aeabi_i2d>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a0:	f7f9 fce2 	bl	8000168 <__aeabi_dsub>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	3430      	adds	r4, #48	; 0x30
 80067aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067b2:	f807 4b01 	strb.w	r4, [r7], #1
 80067b6:	f7fa f901 	bl	80009bc <__aeabi_dcmplt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d174      	bne.n	80068a8 <_dtoa_r+0x648>
 80067be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c2:	2000      	movs	r0, #0
 80067c4:	4911      	ldr	r1, [pc, #68]	; (800680c <_dtoa_r+0x5ac>)
 80067c6:	f7f9 fccf 	bl	8000168 <__aeabi_dsub>
 80067ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067ce:	f7fa f8f5 	bl	80009bc <__aeabi_dcmplt>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f040 80b6 	bne.w	8006944 <_dtoa_r+0x6e4>
 80067d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067da:	429f      	cmp	r7, r3
 80067dc:	f43f af7a 	beq.w	80066d4 <_dtoa_r+0x474>
 80067e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067e4:	2200      	movs	r2, #0
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <_dtoa_r+0x5b0>)
 80067e8:	f7f9 fe76 	bl	80004d8 <__aeabi_dmul>
 80067ec:	2200      	movs	r2, #0
 80067ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <_dtoa_r+0x5b0>)
 80067f8:	f7f9 fe6e 	bl	80004d8 <__aeabi_dmul>
 80067fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006800:	e7c3      	b.n	800678a <_dtoa_r+0x52a>
 8006802:	bf00      	nop
 8006804:	08009278 	.word	0x08009278
 8006808:	08009250 	.word	0x08009250
 800680c:	3ff00000 	.word	0x3ff00000
 8006810:	40240000 	.word	0x40240000
 8006814:	401c0000 	.word	0x401c0000
 8006818:	40140000 	.word	0x40140000
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800682a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800682e:	9c08      	ldr	r4, [sp, #32]
 8006830:	9314      	str	r3, [sp, #80]	; 0x50
 8006832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006836:	f7fa f8ff 	bl	8000a38 <__aeabi_d2iz>
 800683a:	9015      	str	r0, [sp, #84]	; 0x54
 800683c:	f7f9 fde2 	bl	8000404 <__aeabi_i2d>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006848:	f7f9 fc8e 	bl	8000168 <__aeabi_dsub>
 800684c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800684e:	4606      	mov	r6, r0
 8006850:	3330      	adds	r3, #48	; 0x30
 8006852:	f804 3b01 	strb.w	r3, [r4], #1
 8006856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006858:	460f      	mov	r7, r1
 800685a:	429c      	cmp	r4, r3
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	d124      	bne.n	80068ac <_dtoa_r+0x64c>
 8006862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006866:	4bb3      	ldr	r3, [pc, #716]	; (8006b34 <_dtoa_r+0x8d4>)
 8006868:	f7f9 fc80 	bl	800016c <__adddf3>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7fa f8c0 	bl	80009f8 <__aeabi_dcmpgt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d162      	bne.n	8006942 <_dtoa_r+0x6e2>
 800687c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006880:	2000      	movs	r0, #0
 8006882:	49ac      	ldr	r1, [pc, #688]	; (8006b34 <_dtoa_r+0x8d4>)
 8006884:	f7f9 fc70 	bl	8000168 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4630      	mov	r0, r6
 800688e:	4639      	mov	r1, r7
 8006890:	f7fa f894 	bl	80009bc <__aeabi_dcmplt>
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f af1d 	beq.w	80066d4 <_dtoa_r+0x474>
 800689a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800689c:	1e7b      	subs	r3, r7, #1
 800689e:	9314      	str	r3, [sp, #80]	; 0x50
 80068a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d0f8      	beq.n	800689a <_dtoa_r+0x63a>
 80068a8:	46c1      	mov	r9, r8
 80068aa:	e03a      	b.n	8006922 <_dtoa_r+0x6c2>
 80068ac:	4ba2      	ldr	r3, [pc, #648]	; (8006b38 <_dtoa_r+0x8d8>)
 80068ae:	f7f9 fe13 	bl	80004d8 <__aeabi_dmul>
 80068b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b6:	e7bc      	b.n	8006832 <_dtoa_r+0x5d2>
 80068b8:	9f08      	ldr	r7, [sp, #32]
 80068ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c2:	f7f9 ff33 	bl	800072c <__aeabi_ddiv>
 80068c6:	f7fa f8b7 	bl	8000a38 <__aeabi_d2iz>
 80068ca:	4604      	mov	r4, r0
 80068cc:	f7f9 fd9a 	bl	8000404 <__aeabi_i2d>
 80068d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d4:	f7f9 fe00 	bl	80004d8 <__aeabi_dmul>
 80068d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80068dc:	460b      	mov	r3, r1
 80068de:	4602      	mov	r2, r0
 80068e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e4:	f7f9 fc40 	bl	8000168 <__aeabi_dsub>
 80068e8:	f807 6b01 	strb.w	r6, [r7], #1
 80068ec:	9e08      	ldr	r6, [sp, #32]
 80068ee:	9b02      	ldr	r3, [sp, #8]
 80068f0:	1bbe      	subs	r6, r7, r6
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	d13a      	bne.n	800696c <_dtoa_r+0x70c>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	f7f9 fc37 	bl	800016c <__adddf3>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800690a:	f7fa f875 	bl	80009f8 <__aeabi_dcmpgt>
 800690e:	bb58      	cbnz	r0, 8006968 <_dtoa_r+0x708>
 8006910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006918:	f7fa f846 	bl	80009a8 <__aeabi_dcmpeq>
 800691c:	b108      	cbz	r0, 8006922 <_dtoa_r+0x6c2>
 800691e:	07e1      	lsls	r1, r4, #31
 8006920:	d422      	bmi.n	8006968 <_dtoa_r+0x708>
 8006922:	4628      	mov	r0, r5
 8006924:	4651      	mov	r1, sl
 8006926:	f000 fe69 	bl	80075fc <_Bfree>
 800692a:	2300      	movs	r3, #0
 800692c:	703b      	strb	r3, [r7, #0]
 800692e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006930:	f109 0001 	add.w	r0, r9, #1
 8006934:	6018      	str	r0, [r3, #0]
 8006936:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006938:	2b00      	cmp	r3, #0
 800693a:	f43f acdf 	beq.w	80062fc <_dtoa_r+0x9c>
 800693e:	601f      	str	r7, [r3, #0]
 8006940:	e4dc      	b.n	80062fc <_dtoa_r+0x9c>
 8006942:	4627      	mov	r7, r4
 8006944:	463b      	mov	r3, r7
 8006946:	461f      	mov	r7, r3
 8006948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800694c:	2a39      	cmp	r2, #57	; 0x39
 800694e:	d107      	bne.n	8006960 <_dtoa_r+0x700>
 8006950:	9a08      	ldr	r2, [sp, #32]
 8006952:	429a      	cmp	r2, r3
 8006954:	d1f7      	bne.n	8006946 <_dtoa_r+0x6e6>
 8006956:	2230      	movs	r2, #48	; 0x30
 8006958:	9908      	ldr	r1, [sp, #32]
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	700a      	strb	r2, [r1, #0]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	3201      	adds	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e79f      	b.n	80068a8 <_dtoa_r+0x648>
 8006968:	46c8      	mov	r8, r9
 800696a:	e7eb      	b.n	8006944 <_dtoa_r+0x6e4>
 800696c:	2200      	movs	r2, #0
 800696e:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <_dtoa_r+0x8d8>)
 8006970:	f7f9 fdb2 	bl	80004d8 <__aeabi_dmul>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800697c:	2200      	movs	r2, #0
 800697e:	2300      	movs	r3, #0
 8006980:	f7fa f812 	bl	80009a8 <__aeabi_dcmpeq>
 8006984:	2800      	cmp	r0, #0
 8006986:	d098      	beq.n	80068ba <_dtoa_r+0x65a>
 8006988:	e7cb      	b.n	8006922 <_dtoa_r+0x6c2>
 800698a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800698c:	2a00      	cmp	r2, #0
 800698e:	f000 80cd 	beq.w	8006b2c <_dtoa_r+0x8cc>
 8006992:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006994:	2a01      	cmp	r2, #1
 8006996:	f300 80af 	bgt.w	8006af8 <_dtoa_r+0x898>
 800699a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800699c:	2a00      	cmp	r2, #0
 800699e:	f000 80a7 	beq.w	8006af0 <_dtoa_r+0x890>
 80069a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069a8:	9f06      	ldr	r7, [sp, #24]
 80069aa:	9a06      	ldr	r2, [sp, #24]
 80069ac:	2101      	movs	r1, #1
 80069ae:	441a      	add	r2, r3
 80069b0:	9206      	str	r2, [sp, #24]
 80069b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b4:	4628      	mov	r0, r5
 80069b6:	441a      	add	r2, r3
 80069b8:	9209      	str	r2, [sp, #36]	; 0x24
 80069ba:	f000 ff23 	bl	8007804 <__i2b>
 80069be:	4606      	mov	r6, r0
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	dd0c      	ble.n	80069de <_dtoa_r+0x77e>
 80069c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dd09      	ble.n	80069de <_dtoa_r+0x77e>
 80069ca:	42bb      	cmp	r3, r7
 80069cc:	bfa8      	it	ge
 80069ce:	463b      	movge	r3, r7
 80069d0:	9a06      	ldr	r2, [sp, #24]
 80069d2:	1aff      	subs	r7, r7, r3
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	9206      	str	r2, [sp, #24]
 80069d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	9309      	str	r3, [sp, #36]	; 0x24
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	b1f3      	cbz	r3, 8006a20 <_dtoa_r+0x7c0>
 80069e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80a9 	beq.w	8006b3c <_dtoa_r+0x8dc>
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	dd10      	ble.n	8006a10 <_dtoa_r+0x7b0>
 80069ee:	4631      	mov	r1, r6
 80069f0:	4622      	mov	r2, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 ffc0 	bl	8007978 <__pow5mult>
 80069f8:	4652      	mov	r2, sl
 80069fa:	4601      	mov	r1, r0
 80069fc:	4606      	mov	r6, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 ff16 	bl	8007830 <__multiply>
 8006a04:	4680      	mov	r8, r0
 8006a06:	4651      	mov	r1, sl
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 fdf7 	bl	80075fc <_Bfree>
 8006a0e:	46c2      	mov	sl, r8
 8006a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a12:	1b1a      	subs	r2, r3, r4
 8006a14:	d004      	beq.n	8006a20 <_dtoa_r+0x7c0>
 8006a16:	4651      	mov	r1, sl
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 ffad 	bl	8007978 <__pow5mult>
 8006a1e:	4682      	mov	sl, r0
 8006a20:	2101      	movs	r1, #1
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 feee 	bl	8007804 <__i2b>
 8006a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f340 8087 	ble.w	8006b40 <_dtoa_r+0x8e0>
 8006a32:	461a      	mov	r2, r3
 8006a34:	4601      	mov	r1, r0
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 ff9e 	bl	8007978 <__pow5mult>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	4604      	mov	r4, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f340 8080 	ble.w	8006b46 <_dtoa_r+0x8e6>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a50:	6918      	ldr	r0, [r3, #16]
 8006a52:	f000 fe89 	bl	8007768 <__hi0bits>
 8006a56:	f1c0 0020 	rsb	r0, r0, #32
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	4418      	add	r0, r3
 8006a5e:	f010 001f 	ands.w	r0, r0, #31
 8006a62:	f000 8092 	beq.w	8006b8a <_dtoa_r+0x92a>
 8006a66:	f1c0 0320 	rsb	r3, r0, #32
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	f340 808a 	ble.w	8006b84 <_dtoa_r+0x924>
 8006a70:	f1c0 001c 	rsb	r0, r0, #28
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	4407      	add	r7, r0
 8006a78:	4403      	add	r3, r0
 8006a7a:	9306      	str	r3, [sp, #24]
 8006a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7e:	4403      	add	r3, r0
 8006a80:	9309      	str	r3, [sp, #36]	; 0x24
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dd05      	ble.n	8006a94 <_dtoa_r+0x834>
 8006a88:	4651      	mov	r1, sl
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 ffcd 	bl	8007a2c <__lshift>
 8006a92:	4682      	mov	sl, r0
 8006a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd05      	ble.n	8006aa6 <_dtoa_r+0x846>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 ffc4 	bl	8007a2c <__lshift>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d070      	beq.n	8006b8e <_dtoa_r+0x92e>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f001 f828 	bl	8007b04 <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	da6a      	bge.n	8006b8e <_dtoa_r+0x92e>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4651      	mov	r1, sl
 8006abc:	220a      	movs	r2, #10
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fdbe 	bl	8007640 <__multadd>
 8006ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8193 	beq.w	8006df8 <_dtoa_r+0xb98>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 fdb1 	bl	8007640 <__multadd>
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	f300 8093 	bgt.w	8006c0e <_dtoa_r+0x9ae>
 8006ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dc57      	bgt.n	8006b9e <_dtoa_r+0x93e>
 8006aee:	e08e      	b.n	8006c0e <_dtoa_r+0x9ae>
 8006af0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006af2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006af6:	e756      	b.n	80069a6 <_dtoa_r+0x746>
 8006af8:	9b02      	ldr	r3, [sp, #8]
 8006afa:	1e5c      	subs	r4, r3, #1
 8006afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	bfb7      	itett	lt
 8006b02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b04:	1b1c      	subge	r4, r3, r4
 8006b06:	1ae2      	sublt	r2, r4, r3
 8006b08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b0a:	bfbe      	ittt	lt
 8006b0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b0e:	189b      	addlt	r3, r3, r2
 8006b10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b12:	9b02      	ldr	r3, [sp, #8]
 8006b14:	bfb8      	it	lt
 8006b16:	2400      	movlt	r4, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbb      	ittet	lt
 8006b1c:	9b06      	ldrlt	r3, [sp, #24]
 8006b1e:	9a02      	ldrlt	r2, [sp, #8]
 8006b20:	9f06      	ldrge	r7, [sp, #24]
 8006b22:	1a9f      	sublt	r7, r3, r2
 8006b24:	bfac      	ite	ge
 8006b26:	9b02      	ldrge	r3, [sp, #8]
 8006b28:	2300      	movlt	r3, #0
 8006b2a:	e73e      	b.n	80069aa <_dtoa_r+0x74a>
 8006b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b2e:	9f06      	ldr	r7, [sp, #24]
 8006b30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b32:	e745      	b.n	80069c0 <_dtoa_r+0x760>
 8006b34:	3fe00000 	.word	0x3fe00000
 8006b38:	40240000 	.word	0x40240000
 8006b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b3e:	e76a      	b.n	8006a16 <_dtoa_r+0x7b6>
 8006b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dc19      	bgt.n	8006b7a <_dtoa_r+0x91a>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	b9bb      	cbnz	r3, 8006b7a <_dtoa_r+0x91a>
 8006b4a:	9b05      	ldr	r3, [sp, #20]
 8006b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b50:	b99b      	cbnz	r3, 8006b7a <_dtoa_r+0x91a>
 8006b52:	9b05      	ldr	r3, [sp, #20]
 8006b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	0d1b      	lsrs	r3, r3, #20
 8006b5a:	051b      	lsls	r3, r3, #20
 8006b5c:	b183      	cbz	r3, 8006b80 <_dtoa_r+0x920>
 8006b5e:	f04f 0801 	mov.w	r8, #1
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	3301      	adds	r3, #1
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f af6a 	bne.w	8006a4a <_dtoa_r+0x7ea>
 8006b76:	2001      	movs	r0, #1
 8006b78:	e76f      	b.n	8006a5a <_dtoa_r+0x7fa>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	e7f6      	b.n	8006b6e <_dtoa_r+0x90e>
 8006b80:	4698      	mov	r8, r3
 8006b82:	e7f4      	b.n	8006b6e <_dtoa_r+0x90e>
 8006b84:	f43f af7d 	beq.w	8006a82 <_dtoa_r+0x822>
 8006b88:	4618      	mov	r0, r3
 8006b8a:	301c      	adds	r0, #28
 8006b8c:	e772      	b.n	8006a74 <_dtoa_r+0x814>
 8006b8e:	9b02      	ldr	r3, [sp, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dc36      	bgt.n	8006c02 <_dtoa_r+0x9a2>
 8006b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	dd33      	ble.n	8006c02 <_dtoa_r+0x9a2>
 8006b9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ba2:	d10d      	bne.n	8006bc0 <_dtoa_r+0x960>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	2205      	movs	r2, #5
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 fd48 	bl	8007640 <__multadd>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	f000 ffa5 	bl	8007b04 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f73f adb6 	bgt.w	800672c <_dtoa_r+0x4cc>
 8006bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bc2:	9f08      	ldr	r7, [sp, #32]
 8006bc4:	ea6f 0903 	mvn.w	r9, r3
 8006bc8:	f04f 0800 	mov.w	r8, #0
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fd14 	bl	80075fc <_Bfree>
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	f43f aea4 	beq.w	8006922 <_dtoa_r+0x6c2>
 8006bda:	f1b8 0f00 	cmp.w	r8, #0
 8006bde:	d005      	beq.n	8006bec <_dtoa_r+0x98c>
 8006be0:	45b0      	cmp	r8, r6
 8006be2:	d003      	beq.n	8006bec <_dtoa_r+0x98c>
 8006be4:	4641      	mov	r1, r8
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 fd08 	bl	80075fc <_Bfree>
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fd04 	bl	80075fc <_Bfree>
 8006bf4:	e695      	b.n	8006922 <_dtoa_r+0x6c2>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	4626      	mov	r6, r4
 8006bfa:	e7e1      	b.n	8006bc0 <_dtoa_r+0x960>
 8006bfc:	46c1      	mov	r9, r8
 8006bfe:	4626      	mov	r6, r4
 8006c00:	e594      	b.n	800672c <_dtoa_r+0x4cc>
 8006c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80fc 	beq.w	8006e06 <_dtoa_r+0xba6>
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	dd05      	ble.n	8006c1e <_dtoa_r+0x9be>
 8006c12:	4631      	mov	r1, r6
 8006c14:	463a      	mov	r2, r7
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 ff08 	bl	8007a2c <__lshift>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	d05c      	beq.n	8006cde <_dtoa_r+0xa7e>
 8006c24:	4628      	mov	r0, r5
 8006c26:	6871      	ldr	r1, [r6, #4]
 8006c28:	f000 fca8 	bl	800757c <_Balloc>
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	b928      	cbnz	r0, 8006c3c <_dtoa_r+0x9dc>
 8006c30:	4602      	mov	r2, r0
 8006c32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c36:	4b7e      	ldr	r3, [pc, #504]	; (8006e30 <_dtoa_r+0xbd0>)
 8006c38:	f7ff bb26 	b.w	8006288 <_dtoa_r+0x28>
 8006c3c:	6932      	ldr	r2, [r6, #16]
 8006c3e:	f106 010c 	add.w	r1, r6, #12
 8006c42:	3202      	adds	r2, #2
 8006c44:	0092      	lsls	r2, r2, #2
 8006c46:	300c      	adds	r0, #12
 8006c48:	f000 fc8a 	bl	8007560 <memcpy>
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 feeb 	bl	8007a2c <__lshift>
 8006c56:	46b0      	mov	r8, r6
 8006c58:	4606      	mov	r6, r0
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	9302      	str	r3, [sp, #8]
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	445b      	add	r3, fp
 8006c64:	930a      	str	r3, [sp, #40]	; 0x28
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	4621      	mov	r1, r4
 8006c72:	4650      	mov	r0, sl
 8006c74:	f103 3bff 	add.w	fp, r3, #4294967295
 8006c78:	f7ff fa64 	bl	8006144 <quorem>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4641      	mov	r1, r8
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	4650      	mov	r0, sl
 8006c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c88:	f000 ff3c 	bl	8007b04 <__mcmp>
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 ff52 	bl	8007b3c <__mdiff>
 8006c98:	68c2      	ldr	r2, [r0, #12]
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9e:	bb02      	cbnz	r2, 8006ce2 <_dtoa_r+0xa82>
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f000 ff2e 	bl	8007b04 <__mcmp>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cac:	4639      	mov	r1, r7
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006cb4:	f000 fca2 	bl	80075fc <_Bfree>
 8006cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cbc:	9f02      	ldr	r7, [sp, #8]
 8006cbe:	ea43 0102 	orr.w	r1, r3, r2
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc8:	d10d      	bne.n	8006ce6 <_dtoa_r+0xa86>
 8006cca:	2b39      	cmp	r3, #57	; 0x39
 8006ccc:	d027      	beq.n	8006d1e <_dtoa_r+0xabe>
 8006cce:	9a06      	ldr	r2, [sp, #24]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	dd01      	ble.n	8006cd8 <_dtoa_r+0xa78>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	3331      	adds	r3, #49	; 0x31
 8006cd8:	f88b 3000 	strb.w	r3, [fp]
 8006cdc:	e776      	b.n	8006bcc <_dtoa_r+0x96c>
 8006cde:	4630      	mov	r0, r6
 8006ce0:	e7b9      	b.n	8006c56 <_dtoa_r+0x9f6>
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	e7e2      	b.n	8006cac <_dtoa_r+0xa4c>
 8006ce6:	9906      	ldr	r1, [sp, #24]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	db04      	blt.n	8006cf6 <_dtoa_r+0xa96>
 8006cec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006cee:	4301      	orrs	r1, r0
 8006cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf2:	4301      	orrs	r1, r0
 8006cf4:	d120      	bne.n	8006d38 <_dtoa_r+0xad8>
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	ddee      	ble.n	8006cd8 <_dtoa_r+0xa78>
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4628      	mov	r0, r5
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	f000 fe93 	bl	8007a2c <__lshift>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4682      	mov	sl, r0
 8006d0a:	f000 fefb 	bl	8007b04 <__mcmp>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	dc02      	bgt.n	8006d1a <_dtoa_r+0xaba>
 8006d14:	d1e0      	bne.n	8006cd8 <_dtoa_r+0xa78>
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	d5de      	bpl.n	8006cd8 <_dtoa_r+0xa78>
 8006d1a:	2b39      	cmp	r3, #57	; 0x39
 8006d1c:	d1da      	bne.n	8006cd4 <_dtoa_r+0xa74>
 8006d1e:	2339      	movs	r3, #57	; 0x39
 8006d20:	f88b 3000 	strb.w	r3, [fp]
 8006d24:	463b      	mov	r3, r7
 8006d26:	461f      	mov	r7, r3
 8006d28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2a39      	cmp	r2, #57	; 0x39
 8006d30:	d050      	beq.n	8006dd4 <_dtoa_r+0xb74>
 8006d32:	3201      	adds	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e749      	b.n	8006bcc <_dtoa_r+0x96c>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	dd03      	ble.n	8006d44 <_dtoa_r+0xae4>
 8006d3c:	2b39      	cmp	r3, #57	; 0x39
 8006d3e:	d0ee      	beq.n	8006d1e <_dtoa_r+0xabe>
 8006d40:	3301      	adds	r3, #1
 8006d42:	e7c9      	b.n	8006cd8 <_dtoa_r+0xa78>
 8006d44:	9a02      	ldr	r2, [sp, #8]
 8006d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d4c:	428a      	cmp	r2, r1
 8006d4e:	d02a      	beq.n	8006da6 <_dtoa_r+0xb46>
 8006d50:	4651      	mov	r1, sl
 8006d52:	2300      	movs	r3, #0
 8006d54:	220a      	movs	r2, #10
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fc72 	bl	8007640 <__multadd>
 8006d5c:	45b0      	cmp	r8, r6
 8006d5e:	4682      	mov	sl, r0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	f04f 020a 	mov.w	r2, #10
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	d107      	bne.n	8006d7e <_dtoa_r+0xb1e>
 8006d6e:	f000 fc67 	bl	8007640 <__multadd>
 8006d72:	4680      	mov	r8, r0
 8006d74:	4606      	mov	r6, r0
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	e777      	b.n	8006c6e <_dtoa_r+0xa0e>
 8006d7e:	f000 fc5f 	bl	8007640 <__multadd>
 8006d82:	4631      	mov	r1, r6
 8006d84:	4680      	mov	r8, r0
 8006d86:	2300      	movs	r3, #0
 8006d88:	220a      	movs	r2, #10
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 fc58 	bl	8007640 <__multadd>
 8006d90:	4606      	mov	r6, r0
 8006d92:	e7f0      	b.n	8006d76 <_dtoa_r+0xb16>
 8006d94:	f1bb 0f00 	cmp.w	fp, #0
 8006d98:	bfcc      	ite	gt
 8006d9a:	465f      	movgt	r7, fp
 8006d9c:	2701      	movle	r7, #1
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	9a08      	ldr	r2, [sp, #32]
 8006da4:	4417      	add	r7, r2
 8006da6:	4651      	mov	r1, sl
 8006da8:	2201      	movs	r2, #1
 8006daa:	4628      	mov	r0, r5
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	f000 fe3d 	bl	8007a2c <__lshift>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4682      	mov	sl, r0
 8006db6:	f000 fea5 	bl	8007b04 <__mcmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	dcb2      	bgt.n	8006d24 <_dtoa_r+0xac4>
 8006dbe:	d102      	bne.n	8006dc6 <_dtoa_r+0xb66>
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	07db      	lsls	r3, r3, #31
 8006dc4:	d4ae      	bmi.n	8006d24 <_dtoa_r+0xac4>
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	461f      	mov	r7, r3
 8006dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dce:	2a30      	cmp	r2, #48	; 0x30
 8006dd0:	d0fa      	beq.n	8006dc8 <_dtoa_r+0xb68>
 8006dd2:	e6fb      	b.n	8006bcc <_dtoa_r+0x96c>
 8006dd4:	9a08      	ldr	r2, [sp, #32]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d1a5      	bne.n	8006d26 <_dtoa_r+0xac6>
 8006dda:	2331      	movs	r3, #49	; 0x31
 8006ddc:	f109 0901 	add.w	r9, r9, #1
 8006de0:	7013      	strb	r3, [r2, #0]
 8006de2:	e6f3      	b.n	8006bcc <_dtoa_r+0x96c>
 8006de4:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <_dtoa_r+0xbd4>)
 8006de6:	f7ff baa7 	b.w	8006338 <_dtoa_r+0xd8>
 8006dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f aa80 	bne.w	80062f2 <_dtoa_r+0x92>
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <_dtoa_r+0xbd8>)
 8006df4:	f7ff baa0 	b.w	8006338 <_dtoa_r+0xd8>
 8006df8:	f1bb 0f00 	cmp.w	fp, #0
 8006dfc:	dc03      	bgt.n	8006e06 <_dtoa_r+0xba6>
 8006dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f73f aecc 	bgt.w	8006b9e <_dtoa_r+0x93e>
 8006e06:	9f08      	ldr	r7, [sp, #32]
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	f7ff f99a 	bl	8006144 <quorem>
 8006e10:	9a08      	ldr	r2, [sp, #32]
 8006e12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e16:	f807 3b01 	strb.w	r3, [r7], #1
 8006e1a:	1aba      	subs	r2, r7, r2
 8006e1c:	4593      	cmp	fp, r2
 8006e1e:	ddb9      	ble.n	8006d94 <_dtoa_r+0xb34>
 8006e20:	4651      	mov	r1, sl
 8006e22:	2300      	movs	r3, #0
 8006e24:	220a      	movs	r2, #10
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fc0a 	bl	8007640 <__multadd>
 8006e2c:	4682      	mov	sl, r0
 8006e2e:	e7eb      	b.n	8006e08 <_dtoa_r+0xba8>
 8006e30:	0800915c 	.word	0x0800915c
 8006e34:	08008f58 	.word	0x08008f58
 8006e38:	080090d9 	.word	0x080090d9

08006e3c <rshift>:
 8006e3c:	6903      	ldr	r3, [r0, #16]
 8006e3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e46:	f100 0414 	add.w	r4, r0, #20
 8006e4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e4e:	dd46      	ble.n	8006ede <rshift+0xa2>
 8006e50:	f011 011f 	ands.w	r1, r1, #31
 8006e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e5c:	d10c      	bne.n	8006e78 <rshift+0x3c>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f100 0710 	add.w	r7, r0, #16
 8006e64:	42b1      	cmp	r1, r6
 8006e66:	d335      	bcc.n	8006ed4 <rshift+0x98>
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	1eea      	subs	r2, r5, #3
 8006e6e:	4296      	cmp	r6, r2
 8006e70:	bf38      	it	cc
 8006e72:	2300      	movcc	r3, #0
 8006e74:	4423      	add	r3, r4
 8006e76:	e015      	b.n	8006ea4 <rshift+0x68>
 8006e78:	46a1      	mov	r9, r4
 8006e7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e7e:	f1c1 0820 	rsb	r8, r1, #32
 8006e82:	40cf      	lsrs	r7, r1
 8006e84:	f105 0e04 	add.w	lr, r5, #4
 8006e88:	4576      	cmp	r6, lr
 8006e8a:	46f4      	mov	ip, lr
 8006e8c:	d816      	bhi.n	8006ebc <rshift+0x80>
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	009a      	lsls	r2, r3, #2
 8006e92:	3a04      	subs	r2, #4
 8006e94:	3501      	adds	r5, #1
 8006e96:	42ae      	cmp	r6, r5
 8006e98:	bf38      	it	cc
 8006e9a:	2200      	movcc	r2, #0
 8006e9c:	18a3      	adds	r3, r4, r2
 8006e9e:	50a7      	str	r7, [r4, r2]
 8006ea0:	b107      	cbz	r7, 8006ea4 <rshift+0x68>
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	eba3 0204 	sub.w	r2, r3, r4
 8006eaa:	bf08      	it	eq
 8006eac:	2300      	moveq	r3, #0
 8006eae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006eb2:	6102      	str	r2, [r0, #16]
 8006eb4:	bf08      	it	eq
 8006eb6:	6143      	streq	r3, [r0, #20]
 8006eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ebc:	f8dc c000 	ldr.w	ip, [ip]
 8006ec0:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ec4:	ea4c 0707 	orr.w	r7, ip, r7
 8006ec8:	f849 7b04 	str.w	r7, [r9], #4
 8006ecc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ed0:	40cf      	lsrs	r7, r1
 8006ed2:	e7d9      	b.n	8006e88 <rshift+0x4c>
 8006ed4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ed8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006edc:	e7c2      	b.n	8006e64 <rshift+0x28>
 8006ede:	4623      	mov	r3, r4
 8006ee0:	e7e0      	b.n	8006ea4 <rshift+0x68>

08006ee2 <__hexdig_fun>:
 8006ee2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	d802      	bhi.n	8006ef0 <__hexdig_fun+0xe>
 8006eea:	3820      	subs	r0, #32
 8006eec:	b2c0      	uxtb	r0, r0
 8006eee:	4770      	bx	lr
 8006ef0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d801      	bhi.n	8006efc <__hexdig_fun+0x1a>
 8006ef8:	3847      	subs	r0, #71	; 0x47
 8006efa:	e7f7      	b.n	8006eec <__hexdig_fun+0xa>
 8006efc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d801      	bhi.n	8006f08 <__hexdig_fun+0x26>
 8006f04:	3827      	subs	r0, #39	; 0x27
 8006f06:	e7f1      	b.n	8006eec <__hexdig_fun+0xa>
 8006f08:	2000      	movs	r0, #0
 8006f0a:	4770      	bx	lr

08006f0c <__gethex>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	b08b      	sub	sp, #44	; 0x2c
 8006f12:	9306      	str	r3, [sp, #24]
 8006f14:	4bb9      	ldr	r3, [pc, #740]	; (80071fc <__gethex+0x2f0>)
 8006f16:	9002      	str	r0, [sp, #8]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	468b      	mov	fp, r1
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	4690      	mov	r8, r2
 8006f20:	9303      	str	r3, [sp, #12]
 8006f22:	f7f9 f915 	bl	8000150 <strlen>
 8006f26:	4682      	mov	sl, r0
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	f8db 2000 	ldr.w	r2, [fp]
 8006f2e:	4403      	add	r3, r0
 8006f30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f34:	9307      	str	r3, [sp, #28]
 8006f36:	1c93      	adds	r3, r2, #2
 8006f38:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f40:	32fe      	adds	r2, #254	; 0xfe
 8006f42:	18d1      	adds	r1, r2, r3
 8006f44:	461f      	mov	r7, r3
 8006f46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f4a:	9101      	str	r1, [sp, #4]
 8006f4c:	2830      	cmp	r0, #48	; 0x30
 8006f4e:	d0f8      	beq.n	8006f42 <__gethex+0x36>
 8006f50:	f7ff ffc7 	bl	8006ee2 <__hexdig_fun>
 8006f54:	4604      	mov	r4, r0
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d13a      	bne.n	8006fd0 <__gethex+0xc4>
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	9903      	ldr	r1, [sp, #12]
 8006f60:	f001 f9ea 	bl	8008338 <strncmp>
 8006f64:	4605      	mov	r5, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d166      	bne.n	8007038 <__gethex+0x12c>
 8006f6a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006f6e:	eb07 060a 	add.w	r6, r7, sl
 8006f72:	f7ff ffb6 	bl	8006ee2 <__hexdig_fun>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d060      	beq.n	800703c <__gethex+0x130>
 8006f7a:	4633      	mov	r3, r6
 8006f7c:	7818      	ldrb	r0, [r3, #0]
 8006f7e:	461f      	mov	r7, r3
 8006f80:	2830      	cmp	r0, #48	; 0x30
 8006f82:	f103 0301 	add.w	r3, r3, #1
 8006f86:	d0f9      	beq.n	8006f7c <__gethex+0x70>
 8006f88:	f7ff ffab 	bl	8006ee2 <__hexdig_fun>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	fab0 f480 	clz	r4, r0
 8006f92:	4635      	mov	r5, r6
 8006f94:	0964      	lsrs	r4, r4, #5
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	463a      	mov	r2, r7
 8006f9a:	4616      	mov	r6, r2
 8006f9c:	7830      	ldrb	r0, [r6, #0]
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	f7ff ff9f 	bl	8006ee2 <__hexdig_fun>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1f8      	bne.n	8006f9a <__gethex+0x8e>
 8006fa8:	4652      	mov	r2, sl
 8006faa:	4630      	mov	r0, r6
 8006fac:	9903      	ldr	r1, [sp, #12]
 8006fae:	f001 f9c3 	bl	8008338 <strncmp>
 8006fb2:	b980      	cbnz	r0, 8006fd6 <__gethex+0xca>
 8006fb4:	b94d      	cbnz	r5, 8006fca <__gethex+0xbe>
 8006fb6:	eb06 050a 	add.w	r5, r6, sl
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	7830      	ldrb	r0, [r6, #0]
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	f7ff ff8e 	bl	8006ee2 <__hexdig_fun>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d1f8      	bne.n	8006fbc <__gethex+0xb0>
 8006fca:	1bad      	subs	r5, r5, r6
 8006fcc:	00ad      	lsls	r5, r5, #2
 8006fce:	e004      	b.n	8006fda <__gethex+0xce>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	4625      	mov	r5, r4
 8006fd4:	e7e0      	b.n	8006f98 <__gethex+0x8c>
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	d1f7      	bne.n	8006fca <__gethex+0xbe>
 8006fda:	7833      	ldrb	r3, [r6, #0]
 8006fdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d139      	bne.n	8007058 <__gethex+0x14c>
 8006fe4:	7873      	ldrb	r3, [r6, #1]
 8006fe6:	2b2b      	cmp	r3, #43	; 0x2b
 8006fe8:	d02a      	beq.n	8007040 <__gethex+0x134>
 8006fea:	2b2d      	cmp	r3, #45	; 0x2d
 8006fec:	d02c      	beq.n	8007048 <__gethex+0x13c>
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	1c71      	adds	r1, r6, #1
 8006ff4:	7808      	ldrb	r0, [r1, #0]
 8006ff6:	f7ff ff74 	bl	8006ee2 <__hexdig_fun>
 8006ffa:	1e43      	subs	r3, r0, #1
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d82a      	bhi.n	8007058 <__gethex+0x14c>
 8007002:	f1a0 0210 	sub.w	r2, r0, #16
 8007006:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800700a:	f7ff ff6a 	bl	8006ee2 <__hexdig_fun>
 800700e:	1e43      	subs	r3, r0, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b18      	cmp	r3, #24
 8007014:	d91b      	bls.n	800704e <__gethex+0x142>
 8007016:	f1b9 0f00 	cmp.w	r9, #0
 800701a:	d000      	beq.n	800701e <__gethex+0x112>
 800701c:	4252      	negs	r2, r2
 800701e:	4415      	add	r5, r2
 8007020:	f8cb 1000 	str.w	r1, [fp]
 8007024:	b1d4      	cbz	r4, 800705c <__gethex+0x150>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf14      	ite	ne
 800702c:	2700      	movne	r7, #0
 800702e:	2706      	moveq	r7, #6
 8007030:	4638      	mov	r0, r7
 8007032:	b00b      	add	sp, #44	; 0x2c
 8007034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007038:	463e      	mov	r6, r7
 800703a:	4625      	mov	r5, r4
 800703c:	2401      	movs	r4, #1
 800703e:	e7cc      	b.n	8006fda <__gethex+0xce>
 8007040:	f04f 0900 	mov.w	r9, #0
 8007044:	1cb1      	adds	r1, r6, #2
 8007046:	e7d5      	b.n	8006ff4 <__gethex+0xe8>
 8007048:	f04f 0901 	mov.w	r9, #1
 800704c:	e7fa      	b.n	8007044 <__gethex+0x138>
 800704e:	230a      	movs	r3, #10
 8007050:	fb03 0202 	mla	r2, r3, r2, r0
 8007054:	3a10      	subs	r2, #16
 8007056:	e7d6      	b.n	8007006 <__gethex+0xfa>
 8007058:	4631      	mov	r1, r6
 800705a:	e7e1      	b.n	8007020 <__gethex+0x114>
 800705c:	4621      	mov	r1, r4
 800705e:	1bf3      	subs	r3, r6, r7
 8007060:	3b01      	subs	r3, #1
 8007062:	2b07      	cmp	r3, #7
 8007064:	dc0a      	bgt.n	800707c <__gethex+0x170>
 8007066:	9802      	ldr	r0, [sp, #8]
 8007068:	f000 fa88 	bl	800757c <_Balloc>
 800706c:	4604      	mov	r4, r0
 800706e:	b940      	cbnz	r0, 8007082 <__gethex+0x176>
 8007070:	4602      	mov	r2, r0
 8007072:	21de      	movs	r1, #222	; 0xde
 8007074:	4b62      	ldr	r3, [pc, #392]	; (8007200 <__gethex+0x2f4>)
 8007076:	4863      	ldr	r0, [pc, #396]	; (8007204 <__gethex+0x2f8>)
 8007078:	f001 f97e 	bl	8008378 <__assert_func>
 800707c:	3101      	adds	r1, #1
 800707e:	105b      	asrs	r3, r3, #1
 8007080:	e7ef      	b.n	8007062 <__gethex+0x156>
 8007082:	f04f 0b00 	mov.w	fp, #0
 8007086:	f100 0914 	add.w	r9, r0, #20
 800708a:	f1ca 0301 	rsb	r3, sl, #1
 800708e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007092:	f8cd b004 	str.w	fp, [sp, #4]
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	42b7      	cmp	r7, r6
 800709a:	d33f      	bcc.n	800711c <__gethex+0x210>
 800709c:	9f04      	ldr	r7, [sp, #16]
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	f847 3b04 	str.w	r3, [r7], #4
 80070a4:	eba7 0709 	sub.w	r7, r7, r9
 80070a8:	10bf      	asrs	r7, r7, #2
 80070aa:	6127      	str	r7, [r4, #16]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb5b 	bl	8007768 <__hi0bits>
 80070b2:	017f      	lsls	r7, r7, #5
 80070b4:	f8d8 6000 	ldr.w	r6, [r8]
 80070b8:	1a3f      	subs	r7, r7, r0
 80070ba:	42b7      	cmp	r7, r6
 80070bc:	dd62      	ble.n	8007184 <__gethex+0x278>
 80070be:	1bbf      	subs	r7, r7, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fef1 	bl	8007eaa <__any_on>
 80070c8:	4682      	mov	sl, r0
 80070ca:	b1a8      	cbz	r0, 80070f8 <__gethex+0x1ec>
 80070cc:	f04f 0a01 	mov.w	sl, #1
 80070d0:	1e7b      	subs	r3, r7, #1
 80070d2:	1159      	asrs	r1, r3, #5
 80070d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80070d8:	f003 021f 	and.w	r2, r3, #31
 80070dc:	fa0a f202 	lsl.w	r2, sl, r2
 80070e0:	420a      	tst	r2, r1
 80070e2:	d009      	beq.n	80070f8 <__gethex+0x1ec>
 80070e4:	4553      	cmp	r3, sl
 80070e6:	dd05      	ble.n	80070f4 <__gethex+0x1e8>
 80070e8:	4620      	mov	r0, r4
 80070ea:	1eb9      	subs	r1, r7, #2
 80070ec:	f000 fedd 	bl	8007eaa <__any_on>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d144      	bne.n	800717e <__gethex+0x272>
 80070f4:	f04f 0a02 	mov.w	sl, #2
 80070f8:	4639      	mov	r1, r7
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff fe9e 	bl	8006e3c <rshift>
 8007100:	443d      	add	r5, r7
 8007102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007106:	42ab      	cmp	r3, r5
 8007108:	da4a      	bge.n	80071a0 <__gethex+0x294>
 800710a:	4621      	mov	r1, r4
 800710c:	9802      	ldr	r0, [sp, #8]
 800710e:	f000 fa75 	bl	80075fc <_Bfree>
 8007112:	2300      	movs	r3, #0
 8007114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007116:	27a3      	movs	r7, #163	; 0xa3
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	e789      	b.n	8007030 <__gethex+0x124>
 800711c:	1e73      	subs	r3, r6, #1
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007126:	4293      	cmp	r3, r2
 8007128:	d019      	beq.n	800715e <__gethex+0x252>
 800712a:	f1bb 0f20 	cmp.w	fp, #32
 800712e:	d107      	bne.n	8007140 <__gethex+0x234>
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	9a01      	ldr	r2, [sp, #4]
 8007134:	f843 2b04 	str.w	r2, [r3], #4
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	2300      	movs	r3, #0
 800713c:	469b      	mov	fp, r3
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007144:	f7ff fecd 	bl	8006ee2 <__hexdig_fun>
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	f000 000f 	and.w	r0, r0, #15
 800714e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007152:	4303      	orrs	r3, r0
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	f10b 0b04 	add.w	fp, fp, #4
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	e00d      	b.n	800717a <__gethex+0x26e>
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	9a08      	ldr	r2, [sp, #32]
 8007162:	4413      	add	r3, r2
 8007164:	42bb      	cmp	r3, r7
 8007166:	d3e0      	bcc.n	800712a <__gethex+0x21e>
 8007168:	4618      	mov	r0, r3
 800716a:	4652      	mov	r2, sl
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	9309      	str	r3, [sp, #36]	; 0x24
 8007170:	f001 f8e2 	bl	8008338 <strncmp>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	2800      	cmp	r0, #0
 8007178:	d1d7      	bne.n	800712a <__gethex+0x21e>
 800717a:	461e      	mov	r6, r3
 800717c:	e78c      	b.n	8007098 <__gethex+0x18c>
 800717e:	f04f 0a03 	mov.w	sl, #3
 8007182:	e7b9      	b.n	80070f8 <__gethex+0x1ec>
 8007184:	da09      	bge.n	800719a <__gethex+0x28e>
 8007186:	1bf7      	subs	r7, r6, r7
 8007188:	4621      	mov	r1, r4
 800718a:	463a      	mov	r2, r7
 800718c:	9802      	ldr	r0, [sp, #8]
 800718e:	f000 fc4d 	bl	8007a2c <__lshift>
 8007192:	4604      	mov	r4, r0
 8007194:	1bed      	subs	r5, r5, r7
 8007196:	f100 0914 	add.w	r9, r0, #20
 800719a:	f04f 0a00 	mov.w	sl, #0
 800719e:	e7b0      	b.n	8007102 <__gethex+0x1f6>
 80071a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071a4:	42a8      	cmp	r0, r5
 80071a6:	dd71      	ble.n	800728c <__gethex+0x380>
 80071a8:	1b45      	subs	r5, r0, r5
 80071aa:	42ae      	cmp	r6, r5
 80071ac:	dc34      	bgt.n	8007218 <__gethex+0x30c>
 80071ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d028      	beq.n	8007208 <__gethex+0x2fc>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d02a      	beq.n	8007210 <__gethex+0x304>
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d115      	bne.n	80071ea <__gethex+0x2de>
 80071be:	42ae      	cmp	r6, r5
 80071c0:	d113      	bne.n	80071ea <__gethex+0x2de>
 80071c2:	2e01      	cmp	r6, #1
 80071c4:	d10b      	bne.n	80071de <__gethex+0x2d2>
 80071c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80071ca:	9a06      	ldr	r2, [sp, #24]
 80071cc:	2762      	movs	r7, #98	; 0x62
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	2301      	movs	r3, #1
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	f8c9 3000 	str.w	r3, [r9]
 80071d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071da:	601c      	str	r4, [r3, #0]
 80071dc:	e728      	b.n	8007030 <__gethex+0x124>
 80071de:	4620      	mov	r0, r4
 80071e0:	1e71      	subs	r1, r6, #1
 80071e2:	f000 fe62 	bl	8007eaa <__any_on>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d1ed      	bne.n	80071c6 <__gethex+0x2ba>
 80071ea:	4621      	mov	r1, r4
 80071ec:	9802      	ldr	r0, [sp, #8]
 80071ee:	f000 fa05 	bl	80075fc <_Bfree>
 80071f2:	2300      	movs	r3, #0
 80071f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071f6:	2750      	movs	r7, #80	; 0x50
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e719      	b.n	8007030 <__gethex+0x124>
 80071fc:	080091d8 	.word	0x080091d8
 8007200:	0800915c 	.word	0x0800915c
 8007204:	0800916d 	.word	0x0800916d
 8007208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1ed      	bne.n	80071ea <__gethex+0x2de>
 800720e:	e7da      	b.n	80071c6 <__gethex+0x2ba>
 8007210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1d7      	bne.n	80071c6 <__gethex+0x2ba>
 8007216:	e7e8      	b.n	80071ea <__gethex+0x2de>
 8007218:	1e6f      	subs	r7, r5, #1
 800721a:	f1ba 0f00 	cmp.w	sl, #0
 800721e:	d132      	bne.n	8007286 <__gethex+0x37a>
 8007220:	b127      	cbz	r7, 800722c <__gethex+0x320>
 8007222:	4639      	mov	r1, r7
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fe40 	bl	8007eaa <__any_on>
 800722a:	4682      	mov	sl, r0
 800722c:	2101      	movs	r1, #1
 800722e:	117b      	asrs	r3, r7, #5
 8007230:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007234:	f007 071f 	and.w	r7, r7, #31
 8007238:	fa01 f707 	lsl.w	r7, r1, r7
 800723c:	421f      	tst	r7, r3
 800723e:	f04f 0702 	mov.w	r7, #2
 8007242:	4629      	mov	r1, r5
 8007244:	4620      	mov	r0, r4
 8007246:	bf18      	it	ne
 8007248:	f04a 0a02 	orrne.w	sl, sl, #2
 800724c:	1b76      	subs	r6, r6, r5
 800724e:	f7ff fdf5 	bl	8006e3c <rshift>
 8007252:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007256:	f1ba 0f00 	cmp.w	sl, #0
 800725a:	d048      	beq.n	80072ee <__gethex+0x3e2>
 800725c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d015      	beq.n	8007290 <__gethex+0x384>
 8007264:	2b03      	cmp	r3, #3
 8007266:	d017      	beq.n	8007298 <__gethex+0x38c>
 8007268:	2b01      	cmp	r3, #1
 800726a:	d109      	bne.n	8007280 <__gethex+0x374>
 800726c:	f01a 0f02 	tst.w	sl, #2
 8007270:	d006      	beq.n	8007280 <__gethex+0x374>
 8007272:	f8d9 0000 	ldr.w	r0, [r9]
 8007276:	ea4a 0a00 	orr.w	sl, sl, r0
 800727a:	f01a 0f01 	tst.w	sl, #1
 800727e:	d10e      	bne.n	800729e <__gethex+0x392>
 8007280:	f047 0710 	orr.w	r7, r7, #16
 8007284:	e033      	b.n	80072ee <__gethex+0x3e2>
 8007286:	f04f 0a01 	mov.w	sl, #1
 800728a:	e7cf      	b.n	800722c <__gethex+0x320>
 800728c:	2701      	movs	r7, #1
 800728e:	e7e2      	b.n	8007256 <__gethex+0x34a>
 8007290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007292:	f1c3 0301 	rsb	r3, r3, #1
 8007296:	9315      	str	r3, [sp, #84]	; 0x54
 8007298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <__gethex+0x374>
 800729e:	f04f 0c00 	mov.w	ip, #0
 80072a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80072a6:	f104 0314 	add.w	r3, r4, #20
 80072aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80072ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80072bc:	d01c      	beq.n	80072f8 <__gethex+0x3ec>
 80072be:	3201      	adds	r2, #1
 80072c0:	6002      	str	r2, [r0, #0]
 80072c2:	2f02      	cmp	r7, #2
 80072c4:	f104 0314 	add.w	r3, r4, #20
 80072c8:	d13d      	bne.n	8007346 <__gethex+0x43a>
 80072ca:	f8d8 2000 	ldr.w	r2, [r8]
 80072ce:	3a01      	subs	r2, #1
 80072d0:	42b2      	cmp	r2, r6
 80072d2:	d10a      	bne.n	80072ea <__gethex+0x3de>
 80072d4:	2201      	movs	r2, #1
 80072d6:	1171      	asrs	r1, r6, #5
 80072d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072dc:	f006 061f 	and.w	r6, r6, #31
 80072e0:	fa02 f606 	lsl.w	r6, r2, r6
 80072e4:	421e      	tst	r6, r3
 80072e6:	bf18      	it	ne
 80072e8:	4617      	movne	r7, r2
 80072ea:	f047 0720 	orr.w	r7, r7, #32
 80072ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f0:	601c      	str	r4, [r3, #0]
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	601d      	str	r5, [r3, #0]
 80072f6:	e69b      	b.n	8007030 <__gethex+0x124>
 80072f8:	4299      	cmp	r1, r3
 80072fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80072fe:	d8d8      	bhi.n	80072b2 <__gethex+0x3a6>
 8007300:	68a3      	ldr	r3, [r4, #8]
 8007302:	459b      	cmp	fp, r3
 8007304:	db17      	blt.n	8007336 <__gethex+0x42a>
 8007306:	6861      	ldr	r1, [r4, #4]
 8007308:	9802      	ldr	r0, [sp, #8]
 800730a:	3101      	adds	r1, #1
 800730c:	f000 f936 	bl	800757c <_Balloc>
 8007310:	4681      	mov	r9, r0
 8007312:	b918      	cbnz	r0, 800731c <__gethex+0x410>
 8007314:	4602      	mov	r2, r0
 8007316:	2184      	movs	r1, #132	; 0x84
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <__gethex+0x474>)
 800731a:	e6ac      	b.n	8007076 <__gethex+0x16a>
 800731c:	6922      	ldr	r2, [r4, #16]
 800731e:	f104 010c 	add.w	r1, r4, #12
 8007322:	3202      	adds	r2, #2
 8007324:	0092      	lsls	r2, r2, #2
 8007326:	300c      	adds	r0, #12
 8007328:	f000 f91a 	bl	8007560 <memcpy>
 800732c:	4621      	mov	r1, r4
 800732e:	9802      	ldr	r0, [sp, #8]
 8007330:	f000 f964 	bl	80075fc <_Bfree>
 8007334:	464c      	mov	r4, r9
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	6122      	str	r2, [r4, #16]
 800733c:	2201      	movs	r2, #1
 800733e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007342:	615a      	str	r2, [r3, #20]
 8007344:	e7bd      	b.n	80072c2 <__gethex+0x3b6>
 8007346:	6922      	ldr	r2, [r4, #16]
 8007348:	455a      	cmp	r2, fp
 800734a:	dd0b      	ble.n	8007364 <__gethex+0x458>
 800734c:	2101      	movs	r1, #1
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff fd74 	bl	8006e3c <rshift>
 8007354:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007358:	3501      	adds	r5, #1
 800735a:	42ab      	cmp	r3, r5
 800735c:	f6ff aed5 	blt.w	800710a <__gethex+0x1fe>
 8007360:	2701      	movs	r7, #1
 8007362:	e7c2      	b.n	80072ea <__gethex+0x3de>
 8007364:	f016 061f 	ands.w	r6, r6, #31
 8007368:	d0fa      	beq.n	8007360 <__gethex+0x454>
 800736a:	449a      	add	sl, r3
 800736c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007370:	f000 f9fa 	bl	8007768 <__hi0bits>
 8007374:	f1c6 0620 	rsb	r6, r6, #32
 8007378:	42b0      	cmp	r0, r6
 800737a:	dbe7      	blt.n	800734c <__gethex+0x440>
 800737c:	e7f0      	b.n	8007360 <__gethex+0x454>
 800737e:	bf00      	nop
 8007380:	0800915c 	.word	0x0800915c

08007384 <L_shift>:
 8007384:	f1c2 0208 	rsb	r2, r2, #8
 8007388:	0092      	lsls	r2, r2, #2
 800738a:	b570      	push	{r4, r5, r6, lr}
 800738c:	f1c2 0620 	rsb	r6, r2, #32
 8007390:	6843      	ldr	r3, [r0, #4]
 8007392:	6804      	ldr	r4, [r0, #0]
 8007394:	fa03 f506 	lsl.w	r5, r3, r6
 8007398:	432c      	orrs	r4, r5
 800739a:	40d3      	lsrs	r3, r2
 800739c:	6004      	str	r4, [r0, #0]
 800739e:	f840 3f04 	str.w	r3, [r0, #4]!
 80073a2:	4288      	cmp	r0, r1
 80073a4:	d3f4      	bcc.n	8007390 <L_shift+0xc>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}

080073a8 <__match>:
 80073a8:	b530      	push	{r4, r5, lr}
 80073aa:	6803      	ldr	r3, [r0, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b2:	b914      	cbnz	r4, 80073ba <__match+0x12>
 80073b4:	6003      	str	r3, [r0, #0]
 80073b6:	2001      	movs	r0, #1
 80073b8:	bd30      	pop	{r4, r5, pc}
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80073c2:	2d19      	cmp	r5, #25
 80073c4:	bf98      	it	ls
 80073c6:	3220      	addls	r2, #32
 80073c8:	42a2      	cmp	r2, r4
 80073ca:	d0f0      	beq.n	80073ae <__match+0x6>
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7f3      	b.n	80073b8 <__match+0x10>

080073d0 <__hexnan>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	2500      	movs	r5, #0
 80073d6:	680b      	ldr	r3, [r1, #0]
 80073d8:	4682      	mov	sl, r0
 80073da:	115e      	asrs	r6, r3, #5
 80073dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073e0:	f013 031f 	ands.w	r3, r3, #31
 80073e4:	bf18      	it	ne
 80073e6:	3604      	addne	r6, #4
 80073e8:	1f37      	subs	r7, r6, #4
 80073ea:	4690      	mov	r8, r2
 80073ec:	46b9      	mov	r9, r7
 80073ee:	463c      	mov	r4, r7
 80073f0:	46ab      	mov	fp, r5
 80073f2:	b087      	sub	sp, #28
 80073f4:	6801      	ldr	r1, [r0, #0]
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f846 5c04 	str.w	r5, [r6, #-4]
 80073fc:	9502      	str	r5, [sp, #8]
 80073fe:	784a      	ldrb	r2, [r1, #1]
 8007400:	1c4b      	adds	r3, r1, #1
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	b342      	cbz	r2, 8007458 <__hexnan+0x88>
 8007406:	4610      	mov	r0, r2
 8007408:	9105      	str	r1, [sp, #20]
 800740a:	9204      	str	r2, [sp, #16]
 800740c:	f7ff fd69 	bl	8006ee2 <__hexdig_fun>
 8007410:	2800      	cmp	r0, #0
 8007412:	d14f      	bne.n	80074b4 <__hexnan+0xe4>
 8007414:	9a04      	ldr	r2, [sp, #16]
 8007416:	9905      	ldr	r1, [sp, #20]
 8007418:	2a20      	cmp	r2, #32
 800741a:	d818      	bhi.n	800744e <__hexnan+0x7e>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	459b      	cmp	fp, r3
 8007420:	dd13      	ble.n	800744a <__hexnan+0x7a>
 8007422:	454c      	cmp	r4, r9
 8007424:	d206      	bcs.n	8007434 <__hexnan+0x64>
 8007426:	2d07      	cmp	r5, #7
 8007428:	dc04      	bgt.n	8007434 <__hexnan+0x64>
 800742a:	462a      	mov	r2, r5
 800742c:	4649      	mov	r1, r9
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff ffa8 	bl	8007384 <L_shift>
 8007434:	4544      	cmp	r4, r8
 8007436:	d950      	bls.n	80074da <__hexnan+0x10a>
 8007438:	2300      	movs	r3, #0
 800743a:	f1a4 0904 	sub.w	r9, r4, #4
 800743e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007442:	461d      	mov	r5, r3
 8007444:	464c      	mov	r4, r9
 8007446:	f8cd b008 	str.w	fp, [sp, #8]
 800744a:	9903      	ldr	r1, [sp, #12]
 800744c:	e7d7      	b.n	80073fe <__hexnan+0x2e>
 800744e:	2a29      	cmp	r2, #41	; 0x29
 8007450:	d156      	bne.n	8007500 <__hexnan+0x130>
 8007452:	3102      	adds	r1, #2
 8007454:	f8ca 1000 	str.w	r1, [sl]
 8007458:	f1bb 0f00 	cmp.w	fp, #0
 800745c:	d050      	beq.n	8007500 <__hexnan+0x130>
 800745e:	454c      	cmp	r4, r9
 8007460:	d206      	bcs.n	8007470 <__hexnan+0xa0>
 8007462:	2d07      	cmp	r5, #7
 8007464:	dc04      	bgt.n	8007470 <__hexnan+0xa0>
 8007466:	462a      	mov	r2, r5
 8007468:	4649      	mov	r1, r9
 800746a:	4620      	mov	r0, r4
 800746c:	f7ff ff8a 	bl	8007384 <L_shift>
 8007470:	4544      	cmp	r4, r8
 8007472:	d934      	bls.n	80074de <__hexnan+0x10e>
 8007474:	4623      	mov	r3, r4
 8007476:	f1a8 0204 	sub.w	r2, r8, #4
 800747a:	f853 1b04 	ldr.w	r1, [r3], #4
 800747e:	429f      	cmp	r7, r3
 8007480:	f842 1f04 	str.w	r1, [r2, #4]!
 8007484:	d2f9      	bcs.n	800747a <__hexnan+0xaa>
 8007486:	1b3b      	subs	r3, r7, r4
 8007488:	f023 0303 	bic.w	r3, r3, #3
 800748c:	3304      	adds	r3, #4
 800748e:	3401      	adds	r4, #1
 8007490:	3e03      	subs	r6, #3
 8007492:	42b4      	cmp	r4, r6
 8007494:	bf88      	it	hi
 8007496:	2304      	movhi	r3, #4
 8007498:	2200      	movs	r2, #0
 800749a:	4443      	add	r3, r8
 800749c:	f843 2b04 	str.w	r2, [r3], #4
 80074a0:	429f      	cmp	r7, r3
 80074a2:	d2fb      	bcs.n	800749c <__hexnan+0xcc>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	b91b      	cbnz	r3, 80074b0 <__hexnan+0xe0>
 80074a8:	4547      	cmp	r7, r8
 80074aa:	d127      	bne.n	80074fc <__hexnan+0x12c>
 80074ac:	2301      	movs	r3, #1
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	2005      	movs	r0, #5
 80074b2:	e026      	b.n	8007502 <__hexnan+0x132>
 80074b4:	3501      	adds	r5, #1
 80074b6:	2d08      	cmp	r5, #8
 80074b8:	f10b 0b01 	add.w	fp, fp, #1
 80074bc:	dd06      	ble.n	80074cc <__hexnan+0xfc>
 80074be:	4544      	cmp	r4, r8
 80074c0:	d9c3      	bls.n	800744a <__hexnan+0x7a>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2501      	movs	r5, #1
 80074c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80074ca:	3c04      	subs	r4, #4
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	f000 000f 	and.w	r0, r0, #15
 80074d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	e7b7      	b.n	800744a <__hexnan+0x7a>
 80074da:	2508      	movs	r5, #8
 80074dc:	e7b5      	b.n	800744a <__hexnan+0x7a>
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0df      	beq.n	80074a4 <__hexnan+0xd4>
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295
 80074e8:	f1c3 0320 	rsb	r3, r3, #32
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074f4:	401a      	ands	r2, r3
 80074f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80074fa:	e7d3      	b.n	80074a4 <__hexnan+0xd4>
 80074fc:	3f04      	subs	r7, #4
 80074fe:	e7d1      	b.n	80074a4 <__hexnan+0xd4>
 8007500:	2004      	movs	r0, #4
 8007502:	b007      	add	sp, #28
 8007504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007508 <_localeconv_r>:
 8007508:	4800      	ldr	r0, [pc, #0]	; (800750c <_localeconv_r+0x4>)
 800750a:	4770      	bx	lr
 800750c:	20000164 	.word	0x20000164

08007510 <malloc>:
 8007510:	4b02      	ldr	r3, [pc, #8]	; (800751c <malloc+0xc>)
 8007512:	4601      	mov	r1, r0
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f000 bd43 	b.w	8007fa0 <_malloc_r>
 800751a:	bf00      	nop
 800751c:	2000000c 	.word	0x2000000c

08007520 <__ascii_mbtowc>:
 8007520:	b082      	sub	sp, #8
 8007522:	b901      	cbnz	r1, 8007526 <__ascii_mbtowc+0x6>
 8007524:	a901      	add	r1, sp, #4
 8007526:	b142      	cbz	r2, 800753a <__ascii_mbtowc+0x1a>
 8007528:	b14b      	cbz	r3, 800753e <__ascii_mbtowc+0x1e>
 800752a:	7813      	ldrb	r3, [r2, #0]
 800752c:	600b      	str	r3, [r1, #0]
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	1e10      	subs	r0, r2, #0
 8007532:	bf18      	it	ne
 8007534:	2001      	movne	r0, #1
 8007536:	b002      	add	sp, #8
 8007538:	4770      	bx	lr
 800753a:	4610      	mov	r0, r2
 800753c:	e7fb      	b.n	8007536 <__ascii_mbtowc+0x16>
 800753e:	f06f 0001 	mvn.w	r0, #1
 8007542:	e7f8      	b.n	8007536 <__ascii_mbtowc+0x16>

08007544 <memchr>:
 8007544:	4603      	mov	r3, r0
 8007546:	b510      	push	{r4, lr}
 8007548:	b2c9      	uxtb	r1, r1
 800754a:	4402      	add	r2, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	4618      	mov	r0, r3
 8007550:	d101      	bne.n	8007556 <memchr+0x12>
 8007552:	2000      	movs	r0, #0
 8007554:	e003      	b.n	800755e <memchr+0x1a>
 8007556:	7804      	ldrb	r4, [r0, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	428c      	cmp	r4, r1
 800755c:	d1f6      	bne.n	800754c <memchr+0x8>
 800755e:	bd10      	pop	{r4, pc}

08007560 <memcpy>:
 8007560:	440a      	add	r2, r1
 8007562:	4291      	cmp	r1, r2
 8007564:	f100 33ff 	add.w	r3, r0, #4294967295
 8007568:	d100      	bne.n	800756c <memcpy+0xc>
 800756a:	4770      	bx	lr
 800756c:	b510      	push	{r4, lr}
 800756e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007572:	4291      	cmp	r1, r2
 8007574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007578:	d1f9      	bne.n	800756e <memcpy+0xe>
 800757a:	bd10      	pop	{r4, pc}

0800757c <_Balloc>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	b976      	cbnz	r6, 80075a4 <_Balloc+0x28>
 8007586:	2010      	movs	r0, #16
 8007588:	f7ff ffc2 	bl	8007510 <malloc>
 800758c:	4602      	mov	r2, r0
 800758e:	6260      	str	r0, [r4, #36]	; 0x24
 8007590:	b920      	cbnz	r0, 800759c <_Balloc+0x20>
 8007592:	2166      	movs	r1, #102	; 0x66
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <_Balloc+0x78>)
 8007596:	4818      	ldr	r0, [pc, #96]	; (80075f8 <_Balloc+0x7c>)
 8007598:	f000 feee 	bl	8008378 <__assert_func>
 800759c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075a0:	6006      	str	r6, [r0, #0]
 80075a2:	60c6      	str	r6, [r0, #12]
 80075a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075a6:	68f3      	ldr	r3, [r6, #12]
 80075a8:	b183      	cbz	r3, 80075cc <_Balloc+0x50>
 80075aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075b2:	b9b8      	cbnz	r0, 80075e4 <_Balloc+0x68>
 80075b4:	2101      	movs	r1, #1
 80075b6:	fa01 f605 	lsl.w	r6, r1, r5
 80075ba:	1d72      	adds	r2, r6, #5
 80075bc:	4620      	mov	r0, r4
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	f000 fc94 	bl	8007eec <_calloc_r>
 80075c4:	b160      	cbz	r0, 80075e0 <_Balloc+0x64>
 80075c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ca:	e00e      	b.n	80075ea <_Balloc+0x6e>
 80075cc:	2221      	movs	r2, #33	; 0x21
 80075ce:	2104      	movs	r1, #4
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fc8b 	bl	8007eec <_calloc_r>
 80075d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d8:	60f0      	str	r0, [r6, #12]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e4      	bne.n	80075aa <_Balloc+0x2e>
 80075e0:	2000      	movs	r0, #0
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	6802      	ldr	r2, [r0, #0]
 80075e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ea:	2300      	movs	r3, #0
 80075ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075f0:	e7f7      	b.n	80075e2 <_Balloc+0x66>
 80075f2:	bf00      	nop
 80075f4:	080090e6 	.word	0x080090e6
 80075f8:	080091ec 	.word	0x080091ec

080075fc <_Bfree>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007600:	4605      	mov	r5, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b976      	cbnz	r6, 8007624 <_Bfree+0x28>
 8007606:	2010      	movs	r0, #16
 8007608:	f7ff ff82 	bl	8007510 <malloc>
 800760c:	4602      	mov	r2, r0
 800760e:	6268      	str	r0, [r5, #36]	; 0x24
 8007610:	b920      	cbnz	r0, 800761c <_Bfree+0x20>
 8007612:	218a      	movs	r1, #138	; 0x8a
 8007614:	4b08      	ldr	r3, [pc, #32]	; (8007638 <_Bfree+0x3c>)
 8007616:	4809      	ldr	r0, [pc, #36]	; (800763c <_Bfree+0x40>)
 8007618:	f000 feae 	bl	8008378 <__assert_func>
 800761c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007620:	6006      	str	r6, [r0, #0]
 8007622:	60c6      	str	r6, [r0, #12]
 8007624:	b13c      	cbz	r4, 8007636 <_Bfree+0x3a>
 8007626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007628:	6862      	ldr	r2, [r4, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007630:	6021      	str	r1, [r4, #0]
 8007632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	080090e6 	.word	0x080090e6
 800763c:	080091ec 	.word	0x080091ec

08007640 <__multadd>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	4698      	mov	r8, r3
 8007646:	460c      	mov	r4, r1
 8007648:	2300      	movs	r3, #0
 800764a:	690e      	ldr	r6, [r1, #16]
 800764c:	4607      	mov	r7, r0
 800764e:	f101 0014 	add.w	r0, r1, #20
 8007652:	6805      	ldr	r5, [r0, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	b2a9      	uxth	r1, r5
 8007658:	fb02 8101 	mla	r1, r2, r1, r8
 800765c:	0c2d      	lsrs	r5, r5, #16
 800765e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007662:	fb02 c505 	mla	r5, r2, r5, ip
 8007666:	b289      	uxth	r1, r1
 8007668:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800766c:	429e      	cmp	r6, r3
 800766e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007672:	f840 1b04 	str.w	r1, [r0], #4
 8007676:	dcec      	bgt.n	8007652 <__multadd+0x12>
 8007678:	f1b8 0f00 	cmp.w	r8, #0
 800767c:	d022      	beq.n	80076c4 <__multadd+0x84>
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	42b3      	cmp	r3, r6
 8007682:	dc19      	bgt.n	80076b8 <__multadd+0x78>
 8007684:	6861      	ldr	r1, [r4, #4]
 8007686:	4638      	mov	r0, r7
 8007688:	3101      	adds	r1, #1
 800768a:	f7ff ff77 	bl	800757c <_Balloc>
 800768e:	4605      	mov	r5, r0
 8007690:	b928      	cbnz	r0, 800769e <__multadd+0x5e>
 8007692:	4602      	mov	r2, r0
 8007694:	21b5      	movs	r1, #181	; 0xb5
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <__multadd+0x8c>)
 8007698:	480d      	ldr	r0, [pc, #52]	; (80076d0 <__multadd+0x90>)
 800769a:	f000 fe6d 	bl	8008378 <__assert_func>
 800769e:	6922      	ldr	r2, [r4, #16]
 80076a0:	f104 010c 	add.w	r1, r4, #12
 80076a4:	3202      	adds	r2, #2
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	300c      	adds	r0, #12
 80076aa:	f7ff ff59 	bl	8007560 <memcpy>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7ff ffa3 	bl	80075fc <_Bfree>
 80076b6:	462c      	mov	r4, r5
 80076b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80076bc:	3601      	adds	r6, #1
 80076be:	f8c3 8014 	str.w	r8, [r3, #20]
 80076c2:	6126      	str	r6, [r4, #16]
 80076c4:	4620      	mov	r0, r4
 80076c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ca:	bf00      	nop
 80076cc:	0800915c 	.word	0x0800915c
 80076d0:	080091ec 	.word	0x080091ec

080076d4 <__s2b>:
 80076d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d8:	4615      	mov	r5, r2
 80076da:	2209      	movs	r2, #9
 80076dc:	461f      	mov	r7, r3
 80076de:	3308      	adds	r3, #8
 80076e0:	460c      	mov	r4, r1
 80076e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80076e6:	4606      	mov	r6, r0
 80076e8:	2201      	movs	r2, #1
 80076ea:	2100      	movs	r1, #0
 80076ec:	429a      	cmp	r2, r3
 80076ee:	db09      	blt.n	8007704 <__s2b+0x30>
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7ff ff43 	bl	800757c <_Balloc>
 80076f6:	b940      	cbnz	r0, 800770a <__s2b+0x36>
 80076f8:	4602      	mov	r2, r0
 80076fa:	21ce      	movs	r1, #206	; 0xce
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <__s2b+0x8c>)
 80076fe:	4819      	ldr	r0, [pc, #100]	; (8007764 <__s2b+0x90>)
 8007700:	f000 fe3a 	bl	8008378 <__assert_func>
 8007704:	0052      	lsls	r2, r2, #1
 8007706:	3101      	adds	r1, #1
 8007708:	e7f0      	b.n	80076ec <__s2b+0x18>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	2d09      	cmp	r5, #9
 800770e:	6143      	str	r3, [r0, #20]
 8007710:	f04f 0301 	mov.w	r3, #1
 8007714:	6103      	str	r3, [r0, #16]
 8007716:	dd16      	ble.n	8007746 <__s2b+0x72>
 8007718:	f104 0909 	add.w	r9, r4, #9
 800771c:	46c8      	mov	r8, r9
 800771e:	442c      	add	r4, r5
 8007720:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007724:	4601      	mov	r1, r0
 8007726:	220a      	movs	r2, #10
 8007728:	4630      	mov	r0, r6
 800772a:	3b30      	subs	r3, #48	; 0x30
 800772c:	f7ff ff88 	bl	8007640 <__multadd>
 8007730:	45a0      	cmp	r8, r4
 8007732:	d1f5      	bne.n	8007720 <__s2b+0x4c>
 8007734:	f1a5 0408 	sub.w	r4, r5, #8
 8007738:	444c      	add	r4, r9
 800773a:	1b2d      	subs	r5, r5, r4
 800773c:	1963      	adds	r3, r4, r5
 800773e:	42bb      	cmp	r3, r7
 8007740:	db04      	blt.n	800774c <__s2b+0x78>
 8007742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007746:	2509      	movs	r5, #9
 8007748:	340a      	adds	r4, #10
 800774a:	e7f6      	b.n	800773a <__s2b+0x66>
 800774c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007750:	4601      	mov	r1, r0
 8007752:	220a      	movs	r2, #10
 8007754:	4630      	mov	r0, r6
 8007756:	3b30      	subs	r3, #48	; 0x30
 8007758:	f7ff ff72 	bl	8007640 <__multadd>
 800775c:	e7ee      	b.n	800773c <__s2b+0x68>
 800775e:	bf00      	nop
 8007760:	0800915c 	.word	0x0800915c
 8007764:	080091ec 	.word	0x080091ec

08007768 <__hi0bits>:
 8007768:	0c02      	lsrs	r2, r0, #16
 800776a:	0412      	lsls	r2, r2, #16
 800776c:	4603      	mov	r3, r0
 800776e:	b9ca      	cbnz	r2, 80077a4 <__hi0bits+0x3c>
 8007770:	0403      	lsls	r3, r0, #16
 8007772:	2010      	movs	r0, #16
 8007774:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007778:	bf04      	itt	eq
 800777a:	021b      	lsleq	r3, r3, #8
 800777c:	3008      	addeq	r0, #8
 800777e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007782:	bf04      	itt	eq
 8007784:	011b      	lsleq	r3, r3, #4
 8007786:	3004      	addeq	r0, #4
 8007788:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800778c:	bf04      	itt	eq
 800778e:	009b      	lsleq	r3, r3, #2
 8007790:	3002      	addeq	r0, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	db05      	blt.n	80077a2 <__hi0bits+0x3a>
 8007796:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800779a:	f100 0001 	add.w	r0, r0, #1
 800779e:	bf08      	it	eq
 80077a0:	2020      	moveq	r0, #32
 80077a2:	4770      	bx	lr
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7e5      	b.n	8007774 <__hi0bits+0xc>

080077a8 <__lo0bits>:
 80077a8:	6803      	ldr	r3, [r0, #0]
 80077aa:	4602      	mov	r2, r0
 80077ac:	f013 0007 	ands.w	r0, r3, #7
 80077b0:	d00b      	beq.n	80077ca <__lo0bits+0x22>
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d422      	bmi.n	80077fc <__lo0bits+0x54>
 80077b6:	0798      	lsls	r0, r3, #30
 80077b8:	bf49      	itett	mi
 80077ba:	085b      	lsrmi	r3, r3, #1
 80077bc:	089b      	lsrpl	r3, r3, #2
 80077be:	2001      	movmi	r0, #1
 80077c0:	6013      	strmi	r3, [r2, #0]
 80077c2:	bf5c      	itt	pl
 80077c4:	2002      	movpl	r0, #2
 80077c6:	6013      	strpl	r3, [r2, #0]
 80077c8:	4770      	bx	lr
 80077ca:	b299      	uxth	r1, r3
 80077cc:	b909      	cbnz	r1, 80077d2 <__lo0bits+0x2a>
 80077ce:	2010      	movs	r0, #16
 80077d0:	0c1b      	lsrs	r3, r3, #16
 80077d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077d6:	bf04      	itt	eq
 80077d8:	0a1b      	lsreq	r3, r3, #8
 80077da:	3008      	addeq	r0, #8
 80077dc:	0719      	lsls	r1, r3, #28
 80077de:	bf04      	itt	eq
 80077e0:	091b      	lsreq	r3, r3, #4
 80077e2:	3004      	addeq	r0, #4
 80077e4:	0799      	lsls	r1, r3, #30
 80077e6:	bf04      	itt	eq
 80077e8:	089b      	lsreq	r3, r3, #2
 80077ea:	3002      	addeq	r0, #2
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	d403      	bmi.n	80077f8 <__lo0bits+0x50>
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	f100 0001 	add.w	r0, r0, #1
 80077f6:	d003      	beq.n	8007800 <__lo0bits+0x58>
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	4770      	bx	lr
 80077fc:	2000      	movs	r0, #0
 80077fe:	4770      	bx	lr
 8007800:	2020      	movs	r0, #32
 8007802:	4770      	bx	lr

08007804 <__i2b>:
 8007804:	b510      	push	{r4, lr}
 8007806:	460c      	mov	r4, r1
 8007808:	2101      	movs	r1, #1
 800780a:	f7ff feb7 	bl	800757c <_Balloc>
 800780e:	4602      	mov	r2, r0
 8007810:	b928      	cbnz	r0, 800781e <__i2b+0x1a>
 8007812:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <__i2b+0x24>)
 8007818:	4804      	ldr	r0, [pc, #16]	; (800782c <__i2b+0x28>)
 800781a:	f000 fdad 	bl	8008378 <__assert_func>
 800781e:	2301      	movs	r3, #1
 8007820:	6144      	str	r4, [r0, #20]
 8007822:	6103      	str	r3, [r0, #16]
 8007824:	bd10      	pop	{r4, pc}
 8007826:	bf00      	nop
 8007828:	0800915c 	.word	0x0800915c
 800782c:	080091ec 	.word	0x080091ec

08007830 <__multiply>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	4614      	mov	r4, r2
 8007836:	690a      	ldr	r2, [r1, #16]
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	460d      	mov	r5, r1
 800783c:	429a      	cmp	r2, r3
 800783e:	bfbe      	ittt	lt
 8007840:	460b      	movlt	r3, r1
 8007842:	4625      	movlt	r5, r4
 8007844:	461c      	movlt	r4, r3
 8007846:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800784a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800784e:	68ab      	ldr	r3, [r5, #8]
 8007850:	6869      	ldr	r1, [r5, #4]
 8007852:	eb0a 0709 	add.w	r7, sl, r9
 8007856:	42bb      	cmp	r3, r7
 8007858:	b085      	sub	sp, #20
 800785a:	bfb8      	it	lt
 800785c:	3101      	addlt	r1, #1
 800785e:	f7ff fe8d 	bl	800757c <_Balloc>
 8007862:	b930      	cbnz	r0, 8007872 <__multiply+0x42>
 8007864:	4602      	mov	r2, r0
 8007866:	f240 115d 	movw	r1, #349	; 0x15d
 800786a:	4b41      	ldr	r3, [pc, #260]	; (8007970 <__multiply+0x140>)
 800786c:	4841      	ldr	r0, [pc, #260]	; (8007974 <__multiply+0x144>)
 800786e:	f000 fd83 	bl	8008378 <__assert_func>
 8007872:	f100 0614 	add.w	r6, r0, #20
 8007876:	4633      	mov	r3, r6
 8007878:	2200      	movs	r2, #0
 800787a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800787e:	4543      	cmp	r3, r8
 8007880:	d31e      	bcc.n	80078c0 <__multiply+0x90>
 8007882:	f105 0c14 	add.w	ip, r5, #20
 8007886:	f104 0314 	add.w	r3, r4, #20
 800788a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800788e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007892:	9202      	str	r2, [sp, #8]
 8007894:	ebac 0205 	sub.w	r2, ip, r5
 8007898:	3a15      	subs	r2, #21
 800789a:	f022 0203 	bic.w	r2, r2, #3
 800789e:	3204      	adds	r2, #4
 80078a0:	f105 0115 	add.w	r1, r5, #21
 80078a4:	458c      	cmp	ip, r1
 80078a6:	bf38      	it	cc
 80078a8:	2204      	movcc	r2, #4
 80078aa:	9201      	str	r2, [sp, #4]
 80078ac:	9a02      	ldr	r2, [sp, #8]
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d808      	bhi.n	80078c6 <__multiply+0x96>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	dc55      	bgt.n	8007964 <__multiply+0x134>
 80078b8:	6107      	str	r7, [r0, #16]
 80078ba:	b005      	add	sp, #20
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	f843 2b04 	str.w	r2, [r3], #4
 80078c4:	e7db      	b.n	800787e <__multiply+0x4e>
 80078c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80078ca:	f1ba 0f00 	cmp.w	sl, #0
 80078ce:	d020      	beq.n	8007912 <__multiply+0xe2>
 80078d0:	46b1      	mov	r9, r6
 80078d2:	2200      	movs	r2, #0
 80078d4:	f105 0e14 	add.w	lr, r5, #20
 80078d8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80078dc:	f8d9 b000 	ldr.w	fp, [r9]
 80078e0:	b2a1      	uxth	r1, r4
 80078e2:	fa1f fb8b 	uxth.w	fp, fp
 80078e6:	fb0a b101 	mla	r1, sl, r1, fp
 80078ea:	4411      	add	r1, r2
 80078ec:	f8d9 2000 	ldr.w	r2, [r9]
 80078f0:	0c24      	lsrs	r4, r4, #16
 80078f2:	0c12      	lsrs	r2, r2, #16
 80078f4:	fb0a 2404 	mla	r4, sl, r4, r2
 80078f8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80078fc:	b289      	uxth	r1, r1
 80078fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007902:	45f4      	cmp	ip, lr
 8007904:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007908:	f849 1b04 	str.w	r1, [r9], #4
 800790c:	d8e4      	bhi.n	80078d8 <__multiply+0xa8>
 800790e:	9901      	ldr	r1, [sp, #4]
 8007910:	5072      	str	r2, [r6, r1]
 8007912:	9a03      	ldr	r2, [sp, #12]
 8007914:	3304      	adds	r3, #4
 8007916:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800791a:	f1b9 0f00 	cmp.w	r9, #0
 800791e:	d01f      	beq.n	8007960 <__multiply+0x130>
 8007920:	46b6      	mov	lr, r6
 8007922:	f04f 0a00 	mov.w	sl, #0
 8007926:	6834      	ldr	r4, [r6, #0]
 8007928:	f105 0114 	add.w	r1, r5, #20
 800792c:	880a      	ldrh	r2, [r1, #0]
 800792e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007932:	b2a4      	uxth	r4, r4
 8007934:	fb09 b202 	mla	r2, r9, r2, fp
 8007938:	4492      	add	sl, r2
 800793a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800793e:	f84e 4b04 	str.w	r4, [lr], #4
 8007942:	f851 4b04 	ldr.w	r4, [r1], #4
 8007946:	f8be 2000 	ldrh.w	r2, [lr]
 800794a:	0c24      	lsrs	r4, r4, #16
 800794c:	fb09 2404 	mla	r4, r9, r4, r2
 8007950:	458c      	cmp	ip, r1
 8007952:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007956:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800795a:	d8e7      	bhi.n	800792c <__multiply+0xfc>
 800795c:	9a01      	ldr	r2, [sp, #4]
 800795e:	50b4      	str	r4, [r6, r2]
 8007960:	3604      	adds	r6, #4
 8007962:	e7a3      	b.n	80078ac <__multiply+0x7c>
 8007964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1a5      	bne.n	80078b8 <__multiply+0x88>
 800796c:	3f01      	subs	r7, #1
 800796e:	e7a1      	b.n	80078b4 <__multiply+0x84>
 8007970:	0800915c 	.word	0x0800915c
 8007974:	080091ec 	.word	0x080091ec

08007978 <__pow5mult>:
 8007978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800797c:	4615      	mov	r5, r2
 800797e:	f012 0203 	ands.w	r2, r2, #3
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	d007      	beq.n	8007998 <__pow5mult+0x20>
 8007988:	4c25      	ldr	r4, [pc, #148]	; (8007a20 <__pow5mult+0xa8>)
 800798a:	3a01      	subs	r2, #1
 800798c:	2300      	movs	r3, #0
 800798e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007992:	f7ff fe55 	bl	8007640 <__multadd>
 8007996:	4607      	mov	r7, r0
 8007998:	10ad      	asrs	r5, r5, #2
 800799a:	d03d      	beq.n	8007a18 <__pow5mult+0xa0>
 800799c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800799e:	b97c      	cbnz	r4, 80079c0 <__pow5mult+0x48>
 80079a0:	2010      	movs	r0, #16
 80079a2:	f7ff fdb5 	bl	8007510 <malloc>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6270      	str	r0, [r6, #36]	; 0x24
 80079aa:	b928      	cbnz	r0, 80079b8 <__pow5mult+0x40>
 80079ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079b0:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <__pow5mult+0xac>)
 80079b2:	481d      	ldr	r0, [pc, #116]	; (8007a28 <__pow5mult+0xb0>)
 80079b4:	f000 fce0 	bl	8008378 <__assert_func>
 80079b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079bc:	6004      	str	r4, [r0, #0]
 80079be:	60c4      	str	r4, [r0, #12]
 80079c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079c8:	b94c      	cbnz	r4, 80079de <__pow5mult+0x66>
 80079ca:	f240 2171 	movw	r1, #625	; 0x271
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7ff ff18 	bl	8007804 <__i2b>
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	f04f 0900 	mov.w	r9, #0
 80079e2:	07eb      	lsls	r3, r5, #31
 80079e4:	d50a      	bpl.n	80079fc <__pow5mult+0x84>
 80079e6:	4639      	mov	r1, r7
 80079e8:	4622      	mov	r2, r4
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff ff20 	bl	8007830 <__multiply>
 80079f0:	4680      	mov	r8, r0
 80079f2:	4639      	mov	r1, r7
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7ff fe01 	bl	80075fc <_Bfree>
 80079fa:	4647      	mov	r7, r8
 80079fc:	106d      	asrs	r5, r5, #1
 80079fe:	d00b      	beq.n	8007a18 <__pow5mult+0xa0>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	b938      	cbnz	r0, 8007a14 <__pow5mult+0x9c>
 8007a04:	4622      	mov	r2, r4
 8007a06:	4621      	mov	r1, r4
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff ff11 	bl	8007830 <__multiply>
 8007a0e:	6020      	str	r0, [r4, #0]
 8007a10:	f8c0 9000 	str.w	r9, [r0]
 8007a14:	4604      	mov	r4, r0
 8007a16:	e7e4      	b.n	80079e2 <__pow5mult+0x6a>
 8007a18:	4638      	mov	r0, r7
 8007a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	bf00      	nop
 8007a20:	08009340 	.word	0x08009340
 8007a24:	080090e6 	.word	0x080090e6
 8007a28:	080091ec 	.word	0x080091ec

08007a2c <__lshift>:
 8007a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	4607      	mov	r7, r0
 8007a34:	4691      	mov	r9, r2
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6849      	ldr	r1, [r1, #4]
 8007a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a44:	f108 0601 	add.w	r6, r8, #1
 8007a48:	42b3      	cmp	r3, r6
 8007a4a:	db0b      	blt.n	8007a64 <__lshift+0x38>
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff fd95 	bl	800757c <_Balloc>
 8007a52:	4605      	mov	r5, r0
 8007a54:	b948      	cbnz	r0, 8007a6a <__lshift+0x3e>
 8007a56:	4602      	mov	r2, r0
 8007a58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a5c:	4b27      	ldr	r3, [pc, #156]	; (8007afc <__lshift+0xd0>)
 8007a5e:	4828      	ldr	r0, [pc, #160]	; (8007b00 <__lshift+0xd4>)
 8007a60:	f000 fc8a 	bl	8008378 <__assert_func>
 8007a64:	3101      	adds	r1, #1
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	e7ee      	b.n	8007a48 <__lshift+0x1c>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f100 0114 	add.w	r1, r0, #20
 8007a70:	f100 0210 	add.w	r2, r0, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	4553      	cmp	r3, sl
 8007a78:	db33      	blt.n	8007ae2 <__lshift+0xb6>
 8007a7a:	6920      	ldr	r0, [r4, #16]
 8007a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a80:	f104 0314 	add.w	r3, r4, #20
 8007a84:	f019 091f 	ands.w	r9, r9, #31
 8007a88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a90:	d02b      	beq.n	8007aea <__lshift+0xbe>
 8007a92:	468a      	mov	sl, r1
 8007a94:	2200      	movs	r2, #0
 8007a96:	f1c9 0e20 	rsb	lr, r9, #32
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	fa00 f009 	lsl.w	r0, r0, r9
 8007aa0:	4302      	orrs	r2, r0
 8007aa2:	f84a 2b04 	str.w	r2, [sl], #4
 8007aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aaa:	459c      	cmp	ip, r3
 8007aac:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ab0:	d8f3      	bhi.n	8007a9a <__lshift+0x6e>
 8007ab2:	ebac 0304 	sub.w	r3, ip, r4
 8007ab6:	3b15      	subs	r3, #21
 8007ab8:	f023 0303 	bic.w	r3, r3, #3
 8007abc:	3304      	adds	r3, #4
 8007abe:	f104 0015 	add.w	r0, r4, #21
 8007ac2:	4584      	cmp	ip, r0
 8007ac4:	bf38      	it	cc
 8007ac6:	2304      	movcc	r3, #4
 8007ac8:	50ca      	str	r2, [r1, r3]
 8007aca:	b10a      	cbz	r2, 8007ad0 <__lshift+0xa4>
 8007acc:	f108 0602 	add.w	r6, r8, #2
 8007ad0:	3e01      	subs	r6, #1
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	612e      	str	r6, [r5, #16]
 8007ad8:	f7ff fd90 	bl	80075fc <_Bfree>
 8007adc:	4628      	mov	r0, r5
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	e7c5      	b.n	8007a76 <__lshift+0x4a>
 8007aea:	3904      	subs	r1, #4
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	459c      	cmp	ip, r3
 8007af2:	f841 2f04 	str.w	r2, [r1, #4]!
 8007af6:	d8f9      	bhi.n	8007aec <__lshift+0xc0>
 8007af8:	e7ea      	b.n	8007ad0 <__lshift+0xa4>
 8007afa:	bf00      	nop
 8007afc:	0800915c 	.word	0x0800915c
 8007b00:	080091ec 	.word	0x080091ec

08007b04 <__mcmp>:
 8007b04:	4603      	mov	r3, r0
 8007b06:	690a      	ldr	r2, [r1, #16]
 8007b08:	6900      	ldr	r0, [r0, #16]
 8007b0a:	b530      	push	{r4, r5, lr}
 8007b0c:	1a80      	subs	r0, r0, r2
 8007b0e:	d10d      	bne.n	8007b2c <__mcmp+0x28>
 8007b10:	3314      	adds	r3, #20
 8007b12:	3114      	adds	r1, #20
 8007b14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b24:	4295      	cmp	r5, r2
 8007b26:	d002      	beq.n	8007b2e <__mcmp+0x2a>
 8007b28:	d304      	bcc.n	8007b34 <__mcmp+0x30>
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	bd30      	pop	{r4, r5, pc}
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d3f4      	bcc.n	8007b1c <__mcmp+0x18>
 8007b32:	e7fb      	b.n	8007b2c <__mcmp+0x28>
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	e7f8      	b.n	8007b2c <__mcmp+0x28>
	...

08007b3c <__mdiff>:
 8007b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	460c      	mov	r4, r1
 8007b42:	4606      	mov	r6, r0
 8007b44:	4611      	mov	r1, r2
 8007b46:	4620      	mov	r0, r4
 8007b48:	4692      	mov	sl, r2
 8007b4a:	f7ff ffdb 	bl	8007b04 <__mcmp>
 8007b4e:	1e05      	subs	r5, r0, #0
 8007b50:	d111      	bne.n	8007b76 <__mdiff+0x3a>
 8007b52:	4629      	mov	r1, r5
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff fd11 	bl	800757c <_Balloc>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	b928      	cbnz	r0, 8007b6a <__mdiff+0x2e>
 8007b5e:	f240 2132 	movw	r1, #562	; 0x232
 8007b62:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <__mdiff+0x118>)
 8007b64:	483c      	ldr	r0, [pc, #240]	; (8007c58 <__mdiff+0x11c>)
 8007b66:	f000 fc07 	bl	8008378 <__assert_func>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b70:	4610      	mov	r0, r2
 8007b72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	bfa4      	itt	ge
 8007b78:	4653      	movge	r3, sl
 8007b7a:	46a2      	movge	sl, r4
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007b82:	bfa6      	itte	ge
 8007b84:	461c      	movge	r4, r3
 8007b86:	2500      	movge	r5, #0
 8007b88:	2501      	movlt	r5, #1
 8007b8a:	f7ff fcf7 	bl	800757c <_Balloc>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	b918      	cbnz	r0, 8007b9a <__mdiff+0x5e>
 8007b92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <__mdiff+0x118>)
 8007b98:	e7e4      	b.n	8007b64 <__mdiff+0x28>
 8007b9a:	f100 0814 	add.w	r8, r0, #20
 8007b9e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007ba2:	60c5      	str	r5, [r0, #12]
 8007ba4:	f04f 0c00 	mov.w	ip, #0
 8007ba8:	f10a 0514 	add.w	r5, sl, #20
 8007bac:	f10a 0010 	add.w	r0, sl, #16
 8007bb0:	46c2      	mov	sl, r8
 8007bb2:	6926      	ldr	r6, [r4, #16]
 8007bb4:	f104 0914 	add.w	r9, r4, #20
 8007bb8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007bbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007bc0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007bc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bc8:	fa1f f18b 	uxth.w	r1, fp
 8007bcc:	4461      	add	r1, ip
 8007bce:	fa1f fc83 	uxth.w	ip, r3
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	eba1 010c 	sub.w	r1, r1, ip
 8007bd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bdc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007be0:	b289      	uxth	r1, r1
 8007be2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007be6:	454e      	cmp	r6, r9
 8007be8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007bec:	f84a 3b04 	str.w	r3, [sl], #4
 8007bf0:	d8e6      	bhi.n	8007bc0 <__mdiff+0x84>
 8007bf2:	1b33      	subs	r3, r6, r4
 8007bf4:	3b15      	subs	r3, #21
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	3415      	adds	r4, #21
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	42a6      	cmp	r6, r4
 8007c00:	bf38      	it	cc
 8007c02:	2304      	movcc	r3, #4
 8007c04:	441d      	add	r5, r3
 8007c06:	4443      	add	r3, r8
 8007c08:	461e      	mov	r6, r3
 8007c0a:	462c      	mov	r4, r5
 8007c0c:	4574      	cmp	r4, lr
 8007c0e:	d30e      	bcc.n	8007c2e <__mdiff+0xf2>
 8007c10:	f10e 0103 	add.w	r1, lr, #3
 8007c14:	1b49      	subs	r1, r1, r5
 8007c16:	f021 0103 	bic.w	r1, r1, #3
 8007c1a:	3d03      	subs	r5, #3
 8007c1c:	45ae      	cmp	lr, r5
 8007c1e:	bf38      	it	cc
 8007c20:	2100      	movcc	r1, #0
 8007c22:	4419      	add	r1, r3
 8007c24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007c28:	b18b      	cbz	r3, 8007c4e <__mdiff+0x112>
 8007c2a:	6117      	str	r7, [r2, #16]
 8007c2c:	e7a0      	b.n	8007b70 <__mdiff+0x34>
 8007c2e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007c32:	fa1f f188 	uxth.w	r1, r8
 8007c36:	4461      	add	r1, ip
 8007c38:	1408      	asrs	r0, r1, #16
 8007c3a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007c3e:	b289      	uxth	r1, r1
 8007c40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c48:	f846 1b04 	str.w	r1, [r6], #4
 8007c4c:	e7de      	b.n	8007c0c <__mdiff+0xd0>
 8007c4e:	3f01      	subs	r7, #1
 8007c50:	e7e8      	b.n	8007c24 <__mdiff+0xe8>
 8007c52:	bf00      	nop
 8007c54:	0800915c 	.word	0x0800915c
 8007c58:	080091ec 	.word	0x080091ec

08007c5c <__ulp>:
 8007c5c:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <__ulp+0x48>)
 8007c5e:	400b      	ands	r3, r1
 8007c60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dd02      	ble.n	8007c6e <__ulp+0x12>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4770      	bx	lr
 8007c6e:	425b      	negs	r3, r3
 8007c70:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007c74:	f04f 0000 	mov.w	r0, #0
 8007c78:	f04f 0100 	mov.w	r1, #0
 8007c7c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c80:	da04      	bge.n	8007c8c <__ulp+0x30>
 8007c82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c86:	fa43 f102 	asr.w	r1, r3, r2
 8007c8a:	4770      	bx	lr
 8007c8c:	f1a2 0314 	sub.w	r3, r2, #20
 8007c90:	2b1e      	cmp	r3, #30
 8007c92:	bfd6      	itet	le
 8007c94:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c98:	2301      	movgt	r3, #1
 8007c9a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	7ff00000 	.word	0x7ff00000

08007ca8 <__b2d>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	6907      	ldr	r7, [r0, #16]
 8007cae:	f100 0914 	add.w	r9, r0, #20
 8007cb2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007cb6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007cba:	f1a7 0804 	sub.w	r8, r7, #4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff fd52 	bl	8007768 <__hi0bits>
 8007cc4:	f1c0 0320 	rsb	r3, r0, #32
 8007cc8:	280a      	cmp	r0, #10
 8007cca:	600b      	str	r3, [r1, #0]
 8007ccc:	491f      	ldr	r1, [pc, #124]	; (8007d4c <__b2d+0xa4>)
 8007cce:	dc17      	bgt.n	8007d00 <__b2d+0x58>
 8007cd0:	45c1      	cmp	r9, r8
 8007cd2:	bf28      	it	cs
 8007cd4:	2200      	movcs	r2, #0
 8007cd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007cda:	fa26 f30c 	lsr.w	r3, r6, ip
 8007cde:	bf38      	it	cc
 8007ce0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ce4:	ea43 0501 	orr.w	r5, r3, r1
 8007ce8:	f100 0315 	add.w	r3, r0, #21
 8007cec:	fa06 f303 	lsl.w	r3, r6, r3
 8007cf0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007cf4:	ea43 0402 	orr.w	r4, r3, r2
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d00:	45c1      	cmp	r9, r8
 8007d02:	bf2e      	itee	cs
 8007d04:	2200      	movcs	r2, #0
 8007d06:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007d0a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007d0e:	f1b0 030b 	subs.w	r3, r0, #11
 8007d12:	d016      	beq.n	8007d42 <__b2d+0x9a>
 8007d14:	f1c3 0720 	rsb	r7, r3, #32
 8007d18:	fa22 f107 	lsr.w	r1, r2, r7
 8007d1c:	45c8      	cmp	r8, r9
 8007d1e:	fa06 f603 	lsl.w	r6, r6, r3
 8007d22:	ea46 0601 	orr.w	r6, r6, r1
 8007d26:	bf94      	ite	ls
 8007d28:	2100      	movls	r1, #0
 8007d2a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007d2e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007d32:	fa02 f003 	lsl.w	r0, r2, r3
 8007d36:	40f9      	lsrs	r1, r7
 8007d38:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d3c:	ea40 0401 	orr.w	r4, r0, r1
 8007d40:	e7da      	b.n	8007cf8 <__b2d+0x50>
 8007d42:	4614      	mov	r4, r2
 8007d44:	ea46 0501 	orr.w	r5, r6, r1
 8007d48:	e7d6      	b.n	8007cf8 <__b2d+0x50>
 8007d4a:	bf00      	nop
 8007d4c:	3ff00000 	.word	0x3ff00000

08007d50 <__d2b>:
 8007d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d54:	2101      	movs	r1, #1
 8007d56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007d5a:	4690      	mov	r8, r2
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	f7ff fc0d 	bl	800757c <_Balloc>
 8007d62:	4604      	mov	r4, r0
 8007d64:	b930      	cbnz	r0, 8007d74 <__d2b+0x24>
 8007d66:	4602      	mov	r2, r0
 8007d68:	f240 310a 	movw	r1, #778	; 0x30a
 8007d6c:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <__d2b+0xb0>)
 8007d6e:	4825      	ldr	r0, [pc, #148]	; (8007e04 <__d2b+0xb4>)
 8007d70:	f000 fb02 	bl	8008378 <__assert_func>
 8007d74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007d78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007d7c:	bb2d      	cbnz	r5, 8007dca <__d2b+0x7a>
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	f1b8 0300 	subs.w	r3, r8, #0
 8007d84:	d026      	beq.n	8007dd4 <__d2b+0x84>
 8007d86:	4668      	mov	r0, sp
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	f7ff fd0d 	bl	80077a8 <__lo0bits>
 8007d8e:	9900      	ldr	r1, [sp, #0]
 8007d90:	b1f0      	cbz	r0, 8007dd0 <__d2b+0x80>
 8007d92:	9a01      	ldr	r2, [sp, #4]
 8007d94:	f1c0 0320 	rsb	r3, r0, #32
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	40c2      	lsrs	r2, r0
 8007da0:	6163      	str	r3, [r4, #20]
 8007da2:	9201      	str	r2, [sp, #4]
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf14      	ite	ne
 8007daa:	2102      	movne	r1, #2
 8007dac:	2101      	moveq	r1, #1
 8007dae:	61a3      	str	r3, [r4, #24]
 8007db0:	6121      	str	r1, [r4, #16]
 8007db2:	b1c5      	cbz	r5, 8007de6 <__d2b+0x96>
 8007db4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007db8:	4405      	add	r5, r0
 8007dba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dbe:	603d      	str	r5, [r7, #0]
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	b002      	add	sp, #8
 8007dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dce:	e7d6      	b.n	8007d7e <__d2b+0x2e>
 8007dd0:	6161      	str	r1, [r4, #20]
 8007dd2:	e7e7      	b.n	8007da4 <__d2b+0x54>
 8007dd4:	a801      	add	r0, sp, #4
 8007dd6:	f7ff fce7 	bl	80077a8 <__lo0bits>
 8007dda:	2101      	movs	r1, #1
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	6121      	str	r1, [r4, #16]
 8007de0:	6163      	str	r3, [r4, #20]
 8007de2:	3020      	adds	r0, #32
 8007de4:	e7e5      	b.n	8007db2 <__d2b+0x62>
 8007de6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dee:	6038      	str	r0, [r7, #0]
 8007df0:	6918      	ldr	r0, [r3, #16]
 8007df2:	f7ff fcb9 	bl	8007768 <__hi0bits>
 8007df6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007dfa:	6031      	str	r1, [r6, #0]
 8007dfc:	e7e1      	b.n	8007dc2 <__d2b+0x72>
 8007dfe:	bf00      	nop
 8007e00:	0800915c 	.word	0x0800915c
 8007e04:	080091ec 	.word	0x080091ec

08007e08 <__ratio>:
 8007e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	4688      	mov	r8, r1
 8007e0e:	4669      	mov	r1, sp
 8007e10:	4681      	mov	r9, r0
 8007e12:	f7ff ff49 	bl	8007ca8 <__b2d>
 8007e16:	460f      	mov	r7, r1
 8007e18:	4604      	mov	r4, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	a901      	add	r1, sp, #4
 8007e20:	f7ff ff42 	bl	8007ca8 <__b2d>
 8007e24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007e2c:	468b      	mov	fp, r1
 8007e2e:	eba3 0c02 	sub.w	ip, r3, r2
 8007e32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bfd5      	itete	le
 8007e40:	460a      	movle	r2, r1
 8007e42:	462a      	movgt	r2, r5
 8007e44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e4c:	bfd8      	it	le
 8007e4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007e52:	465b      	mov	r3, fp
 8007e54:	4602      	mov	r2, r0
 8007e56:	4639      	mov	r1, r7
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7f8 fc67 	bl	800072c <__aeabi_ddiv>
 8007e5e:	b003      	add	sp, #12
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e64 <__copybits>:
 8007e64:	3901      	subs	r1, #1
 8007e66:	b570      	push	{r4, r5, r6, lr}
 8007e68:	1149      	asrs	r1, r1, #5
 8007e6a:	6914      	ldr	r4, [r2, #16]
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	f102 0314 	add.w	r3, r2, #20
 8007e72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e7a:	1f05      	subs	r5, r0, #4
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d30c      	bcc.n	8007e9a <__copybits+0x36>
 8007e80:	1aa3      	subs	r3, r4, r2
 8007e82:	3b11      	subs	r3, #17
 8007e84:	f023 0303 	bic.w	r3, r3, #3
 8007e88:	3211      	adds	r2, #17
 8007e8a:	42a2      	cmp	r2, r4
 8007e8c:	bf88      	it	hi
 8007e8e:	2300      	movhi	r3, #0
 8007e90:	4418      	add	r0, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	4288      	cmp	r0, r1
 8007e96:	d305      	bcc.n	8007ea4 <__copybits+0x40>
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ea2:	e7eb      	b.n	8007e7c <__copybits+0x18>
 8007ea4:	f840 3b04 	str.w	r3, [r0], #4
 8007ea8:	e7f4      	b.n	8007e94 <__copybits+0x30>

08007eaa <__any_on>:
 8007eaa:	f100 0214 	add.w	r2, r0, #20
 8007eae:	6900      	ldr	r0, [r0, #16]
 8007eb0:	114b      	asrs	r3, r1, #5
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	db11      	blt.n	8007edc <__any_on+0x32>
 8007eb8:	dd0a      	ble.n	8007ed0 <__any_on+0x26>
 8007eba:	f011 011f 	ands.w	r1, r1, #31
 8007ebe:	d007      	beq.n	8007ed0 <__any_on+0x26>
 8007ec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ec4:	fa24 f001 	lsr.w	r0, r4, r1
 8007ec8:	fa00 f101 	lsl.w	r1, r0, r1
 8007ecc:	428c      	cmp	r4, r1
 8007ece:	d10b      	bne.n	8007ee8 <__any_on+0x3e>
 8007ed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d803      	bhi.n	8007ee0 <__any_on+0x36>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	4603      	mov	r3, r0
 8007ede:	e7f7      	b.n	8007ed0 <__any_on+0x26>
 8007ee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d0f5      	beq.n	8007ed4 <__any_on+0x2a>
 8007ee8:	2001      	movs	r0, #1
 8007eea:	e7f6      	b.n	8007eda <__any_on+0x30>

08007eec <_calloc_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	fb02 f501 	mul.w	r5, r2, r1
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f000 f854 	bl	8007fa0 <_malloc_r>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	b118      	cbz	r0, 8007f04 <_calloc_r+0x18>
 8007efc:	462a      	mov	r2, r5
 8007efe:	2100      	movs	r1, #0
 8007f00:	f7fc fbdc 	bl	80046bc <memset>
 8007f04:	4620      	mov	r0, r4
 8007f06:	bd38      	pop	{r3, r4, r5, pc}

08007f08 <_free_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d043      	beq.n	8007f98 <_free_r+0x90>
 8007f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f14:	1f0c      	subs	r4, r1, #4
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bfb8      	it	lt
 8007f1a:	18e4      	addlt	r4, r4, r3
 8007f1c:	f000 fa76 	bl	800840c <__malloc_lock>
 8007f20:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <_free_r+0x94>)
 8007f22:	6813      	ldr	r3, [r2, #0]
 8007f24:	4610      	mov	r0, r2
 8007f26:	b933      	cbnz	r3, 8007f36 <_free_r+0x2e>
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	6014      	str	r4, [r2, #0]
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f32:	f000 ba71 	b.w	8008418 <__malloc_unlock>
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	d90a      	bls.n	8007f50 <_free_r+0x48>
 8007f3a:	6821      	ldr	r1, [r4, #0]
 8007f3c:	1862      	adds	r2, r4, r1
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	bf01      	itttt	eq
 8007f42:	681a      	ldreq	r2, [r3, #0]
 8007f44:	685b      	ldreq	r3, [r3, #4]
 8007f46:	1852      	addeq	r2, r2, r1
 8007f48:	6022      	streq	r2, [r4, #0]
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	6004      	str	r4, [r0, #0]
 8007f4e:	e7ed      	b.n	8007f2c <_free_r+0x24>
 8007f50:	461a      	mov	r2, r3
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b10b      	cbz	r3, 8007f5a <_free_r+0x52>
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	d9fa      	bls.n	8007f50 <_free_r+0x48>
 8007f5a:	6811      	ldr	r1, [r2, #0]
 8007f5c:	1850      	adds	r0, r2, r1
 8007f5e:	42a0      	cmp	r0, r4
 8007f60:	d10b      	bne.n	8007f7a <_free_r+0x72>
 8007f62:	6820      	ldr	r0, [r4, #0]
 8007f64:	4401      	add	r1, r0
 8007f66:	1850      	adds	r0, r2, r1
 8007f68:	4283      	cmp	r3, r0
 8007f6a:	6011      	str	r1, [r2, #0]
 8007f6c:	d1de      	bne.n	8007f2c <_free_r+0x24>
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	4401      	add	r1, r0
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	6053      	str	r3, [r2, #4]
 8007f78:	e7d8      	b.n	8007f2c <_free_r+0x24>
 8007f7a:	d902      	bls.n	8007f82 <_free_r+0x7a>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	e7d4      	b.n	8007f2c <_free_r+0x24>
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	1821      	adds	r1, r4, r0
 8007f86:	428b      	cmp	r3, r1
 8007f88:	bf01      	itttt	eq
 8007f8a:	6819      	ldreq	r1, [r3, #0]
 8007f8c:	685b      	ldreq	r3, [r3, #4]
 8007f8e:	1809      	addeq	r1, r1, r0
 8007f90:	6021      	streq	r1, [r4, #0]
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	6054      	str	r4, [r2, #4]
 8007f96:	e7c9      	b.n	8007f2c <_free_r+0x24>
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000238 	.word	0x20000238

08007fa0 <_malloc_r>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	1ccd      	adds	r5, r1, #3
 8007fa4:	f025 0503 	bic.w	r5, r5, #3
 8007fa8:	3508      	adds	r5, #8
 8007faa:	2d0c      	cmp	r5, #12
 8007fac:	bf38      	it	cc
 8007fae:	250c      	movcc	r5, #12
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	db01      	blt.n	8007fba <_malloc_r+0x1a>
 8007fb6:	42a9      	cmp	r1, r5
 8007fb8:	d903      	bls.n	8007fc2 <_malloc_r+0x22>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc2:	f000 fa23 	bl	800840c <__malloc_lock>
 8007fc6:	4921      	ldr	r1, [pc, #132]	; (800804c <_malloc_r+0xac>)
 8007fc8:	680a      	ldr	r2, [r1, #0]
 8007fca:	4614      	mov	r4, r2
 8007fcc:	b99c      	cbnz	r4, 8007ff6 <_malloc_r+0x56>
 8007fce:	4f20      	ldr	r7, [pc, #128]	; (8008050 <_malloc_r+0xb0>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	b923      	cbnz	r3, 8007fde <_malloc_r+0x3e>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f99e 	bl	8008318 <_sbrk_r>
 8007fdc:	6038      	str	r0, [r7, #0]
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f999 	bl	8008318 <_sbrk_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d123      	bne.n	8008032 <_malloc_r+0x92>
 8007fea:	230c      	movs	r3, #12
 8007fec:	4630      	mov	r0, r6
 8007fee:	6033      	str	r3, [r6, #0]
 8007ff0:	f000 fa12 	bl	8008418 <__malloc_unlock>
 8007ff4:	e7e3      	b.n	8007fbe <_malloc_r+0x1e>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	1b5b      	subs	r3, r3, r5
 8007ffa:	d417      	bmi.n	800802c <_malloc_r+0x8c>
 8007ffc:	2b0b      	cmp	r3, #11
 8007ffe:	d903      	bls.n	8008008 <_malloc_r+0x68>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	441c      	add	r4, r3
 8008004:	6025      	str	r5, [r4, #0]
 8008006:	e004      	b.n	8008012 <_malloc_r+0x72>
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	42a2      	cmp	r2, r4
 800800c:	bf0c      	ite	eq
 800800e:	600b      	streq	r3, [r1, #0]
 8008010:	6053      	strne	r3, [r2, #4]
 8008012:	4630      	mov	r0, r6
 8008014:	f000 fa00 	bl	8008418 <__malloc_unlock>
 8008018:	f104 000b 	add.w	r0, r4, #11
 800801c:	1d23      	adds	r3, r4, #4
 800801e:	f020 0007 	bic.w	r0, r0, #7
 8008022:	1ac2      	subs	r2, r0, r3
 8008024:	d0cc      	beq.n	8007fc0 <_malloc_r+0x20>
 8008026:	1a1b      	subs	r3, r3, r0
 8008028:	50a3      	str	r3, [r4, r2]
 800802a:	e7c9      	b.n	8007fc0 <_malloc_r+0x20>
 800802c:	4622      	mov	r2, r4
 800802e:	6864      	ldr	r4, [r4, #4]
 8008030:	e7cc      	b.n	8007fcc <_malloc_r+0x2c>
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0e3      	beq.n	8008004 <_malloc_r+0x64>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f96a 	bl	8008318 <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1dd      	bne.n	8008004 <_malloc_r+0x64>
 8008048:	e7cf      	b.n	8007fea <_malloc_r+0x4a>
 800804a:	bf00      	nop
 800804c:	20000238 	.word	0x20000238
 8008050:	2000023c 	.word	0x2000023c

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	688e      	ldr	r6, [r1, #8]
 800805a:	4682      	mov	sl, r0
 800805c:	429e      	cmp	r6, r3
 800805e:	460c      	mov	r4, r1
 8008060:	4690      	mov	r8, r2
 8008062:	461f      	mov	r7, r3
 8008064:	d838      	bhi.n	80080d8 <__ssputs_r+0x84>
 8008066:	898a      	ldrh	r2, [r1, #12]
 8008068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806c:	d032      	beq.n	80080d4 <__ssputs_r+0x80>
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	6909      	ldr	r1, [r1, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	eba5 0901 	sub.w	r9, r5, r1
 8008078:	6965      	ldr	r5, [r4, #20]
 800807a:	444b      	add	r3, r9
 800807c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d531      	bpl.n	80080f4 <__ssputs_r+0xa0>
 8008090:	4629      	mov	r1, r5
 8008092:	f7ff ff85 	bl	8007fa0 <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b950      	cbnz	r0, 80080b0 <__ssputs_r+0x5c>
 800809a:	230c      	movs	r3, #12
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	f8ca 3000 	str.w	r3, [sl]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	464a      	mov	r2, r9
 80080b2:	6921      	ldr	r1, [r4, #16]
 80080b4:	f7ff fa54 	bl	8007560 <memcpy>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6126      	str	r6, [r4, #16]
 80080c6:	444e      	add	r6, r9
 80080c8:	6026      	str	r6, [r4, #0]
 80080ca:	463e      	mov	r6, r7
 80080cc:	6165      	str	r5, [r4, #20]
 80080ce:	eba5 0509 	sub.w	r5, r5, r9
 80080d2:	60a5      	str	r5, [r4, #8]
 80080d4:	42be      	cmp	r6, r7
 80080d6:	d900      	bls.n	80080da <__ssputs_r+0x86>
 80080d8:	463e      	mov	r6, r7
 80080da:	4632      	mov	r2, r6
 80080dc:	4641      	mov	r1, r8
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	f000 f97a 	bl	80083d8 <memmove>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	4432      	add	r2, r6
 80080ec:	2000      	movs	r0, #0
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	6022      	str	r2, [r4, #0]
 80080f2:	e7db      	b.n	80080ac <__ssputs_r+0x58>
 80080f4:	462a      	mov	r2, r5
 80080f6:	f000 f995 	bl	8008424 <_realloc_r>
 80080fa:	4606      	mov	r6, r0
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e1      	bne.n	80080c4 <__ssputs_r+0x70>
 8008100:	4650      	mov	r0, sl
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	f7ff ff00 	bl	8007f08 <_free_r>
 8008108:	e7c7      	b.n	800809a <__ssputs_r+0x46>
	...

0800810c <_svfiprintf_r>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4698      	mov	r8, r3
 8008112:	898b      	ldrh	r3, [r1, #12]
 8008114:	4607      	mov	r7, r0
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	460d      	mov	r5, r1
 800811a:	4614      	mov	r4, r2
 800811c:	b09d      	sub	sp, #116	; 0x74
 800811e:	d50e      	bpl.n	800813e <_svfiprintf_r+0x32>
 8008120:	690b      	ldr	r3, [r1, #16]
 8008122:	b963      	cbnz	r3, 800813e <_svfiprintf_r+0x32>
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	f7ff ff3b 	bl	8007fa0 <_malloc_r>
 800812a:	6028      	str	r0, [r5, #0]
 800812c:	6128      	str	r0, [r5, #16]
 800812e:	b920      	cbnz	r0, 800813a <_svfiprintf_r+0x2e>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e0d1      	b.n	80082de <_svfiprintf_r+0x1d2>
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	616b      	str	r3, [r5, #20]
 800813e:	2300      	movs	r3, #0
 8008140:	9309      	str	r3, [sp, #36]	; 0x24
 8008142:	2320      	movs	r3, #32
 8008144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008148:	2330      	movs	r3, #48	; 0x30
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008152:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082f8 <_svfiprintf_r+0x1ec>
 8008156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815a:	4623      	mov	r3, r4
 800815c:	469a      	mov	sl, r3
 800815e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008162:	b10a      	cbz	r2, 8008168 <_svfiprintf_r+0x5c>
 8008164:	2a25      	cmp	r2, #37	; 0x25
 8008166:	d1f9      	bne.n	800815c <_svfiprintf_r+0x50>
 8008168:	ebba 0b04 	subs.w	fp, sl, r4
 800816c:	d00b      	beq.n	8008186 <_svfiprintf_r+0x7a>
 800816e:	465b      	mov	r3, fp
 8008170:	4622      	mov	r2, r4
 8008172:	4629      	mov	r1, r5
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff6d 	bl	8008054 <__ssputs_r>
 800817a:	3001      	adds	r0, #1
 800817c:	f000 80aa 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008182:	445a      	add	r2, fp
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	f89a 3000 	ldrb.w	r3, [sl]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a2 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008190:	2300      	movs	r3, #0
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819a:	f10a 0a01 	add.w	sl, sl, #1
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a6:	931a      	str	r3, [sp, #104]	; 0x68
 80081a8:	4654      	mov	r4, sl
 80081aa:	2205      	movs	r2, #5
 80081ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b0:	4851      	ldr	r0, [pc, #324]	; (80082f8 <_svfiprintf_r+0x1ec>)
 80081b2:	f7ff f9c7 	bl	8007544 <memchr>
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	b9d8      	cbnz	r0, 80081f2 <_svfiprintf_r+0xe6>
 80081ba:	06d0      	lsls	r0, r2, #27
 80081bc:	bf44      	itt	mi
 80081be:	2320      	movmi	r3, #32
 80081c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c4:	0711      	lsls	r1, r2, #28
 80081c6:	bf44      	itt	mi
 80081c8:	232b      	movmi	r3, #43	; 0x2b
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d015      	beq.n	8008202 <_svfiprintf_r+0xf6>
 80081d6:	4654      	mov	r4, sl
 80081d8:	2000      	movs	r0, #0
 80081da:	f04f 0c0a 	mov.w	ip, #10
 80081de:	9a07      	ldr	r2, [sp, #28]
 80081e0:	4621      	mov	r1, r4
 80081e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d94e      	bls.n	800828a <_svfiprintf_r+0x17e>
 80081ec:	b1b0      	cbz	r0, 800821c <_svfiprintf_r+0x110>
 80081ee:	9207      	str	r2, [sp, #28]
 80081f0:	e014      	b.n	800821c <_svfiprintf_r+0x110>
 80081f2:	eba0 0308 	sub.w	r3, r0, r8
 80081f6:	fa09 f303 	lsl.w	r3, r9, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	46a2      	mov	sl, r4
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	e7d2      	b.n	80081a8 <_svfiprintf_r+0x9c>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	1d19      	adds	r1, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9103      	str	r1, [sp, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	bfbb      	ittet	lt
 800820e:	425b      	neglt	r3, r3
 8008210:	f042 0202 	orrlt.w	r2, r2, #2
 8008214:	9307      	strge	r3, [sp, #28]
 8008216:	9307      	strlt	r3, [sp, #28]
 8008218:	bfb8      	it	lt
 800821a:	9204      	strlt	r2, [sp, #16]
 800821c:	7823      	ldrb	r3, [r4, #0]
 800821e:	2b2e      	cmp	r3, #46	; 0x2e
 8008220:	d10c      	bne.n	800823c <_svfiprintf_r+0x130>
 8008222:	7863      	ldrb	r3, [r4, #1]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d135      	bne.n	8008294 <_svfiprintf_r+0x188>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3402      	adds	r4, #2
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	9203      	str	r2, [sp, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	bfb8      	it	lt
 8008236:	f04f 33ff 	movlt.w	r3, #4294967295
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008308 <_svfiprintf_r+0x1fc>
 8008240:	2203      	movs	r2, #3
 8008242:	4650      	mov	r0, sl
 8008244:	7821      	ldrb	r1, [r4, #0]
 8008246:	f7ff f97d 	bl	8007544 <memchr>
 800824a:	b140      	cbz	r0, 800825e <_svfiprintf_r+0x152>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	eba0 000a 	sub.w	r0, r0, sl
 8008252:	fa03 f000 	lsl.w	r0, r3, r0
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3401      	adds	r4, #1
 800825a:	4303      	orrs	r3, r0
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	2206      	movs	r2, #6
 8008264:	4825      	ldr	r0, [pc, #148]	; (80082fc <_svfiprintf_r+0x1f0>)
 8008266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826a:	f7ff f96b 	bl	8007544 <memchr>
 800826e:	2800      	cmp	r0, #0
 8008270:	d038      	beq.n	80082e4 <_svfiprintf_r+0x1d8>
 8008272:	4b23      	ldr	r3, [pc, #140]	; (8008300 <_svfiprintf_r+0x1f4>)
 8008274:	bb1b      	cbnz	r3, 80082be <_svfiprintf_r+0x1b2>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	3307      	adds	r3, #7
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	3308      	adds	r3, #8
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	4433      	add	r3, r6
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	e767      	b.n	800815a <_svfiprintf_r+0x4e>
 800828a:	460c      	mov	r4, r1
 800828c:	2001      	movs	r0, #1
 800828e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008292:	e7a5      	b.n	80081e0 <_svfiprintf_r+0xd4>
 8008294:	2300      	movs	r3, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4619      	mov	r1, r3
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a6:	3a30      	subs	r2, #48	; 0x30
 80082a8:	2a09      	cmp	r2, #9
 80082aa:	d903      	bls.n	80082b4 <_svfiprintf_r+0x1a8>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0c5      	beq.n	800823c <_svfiprintf_r+0x130>
 80082b0:	9105      	str	r1, [sp, #20]
 80082b2:	e7c3      	b.n	800823c <_svfiprintf_r+0x130>
 80082b4:	4604      	mov	r4, r0
 80082b6:	2301      	movs	r3, #1
 80082b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082bc:	e7f0      	b.n	80082a0 <_svfiprintf_r+0x194>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <_svfiprintf_r+0x1f8>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	f7fc fa9d 	bl	8004808 <_printf_float>
 80082ce:	1c42      	adds	r2, r0, #1
 80082d0:	4606      	mov	r6, r0
 80082d2:	d1d6      	bne.n	8008282 <_svfiprintf_r+0x176>
 80082d4:	89ab      	ldrh	r3, [r5, #12]
 80082d6:	065b      	lsls	r3, r3, #25
 80082d8:	f53f af2c 	bmi.w	8008134 <_svfiprintf_r+0x28>
 80082dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082de:	b01d      	add	sp, #116	; 0x74
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	ab03      	add	r3, sp, #12
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	462a      	mov	r2, r5
 80082ea:	4638      	mov	r0, r7
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <_svfiprintf_r+0x1f8>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	f7fc fd26 	bl	8004d40 <_printf_i>
 80082f4:	e7eb      	b.n	80082ce <_svfiprintf_r+0x1c2>
 80082f6:	bf00      	nop
 80082f8:	0800934c 	.word	0x0800934c
 80082fc:	08009356 	.word	0x08009356
 8008300:	08004809 	.word	0x08004809
 8008304:	08008055 	.word	0x08008055
 8008308:	08009352 	.word	0x08009352

0800830c <nan>:
 800830c:	2000      	movs	r0, #0
 800830e:	4901      	ldr	r1, [pc, #4]	; (8008314 <nan+0x8>)
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	7ff80000 	.word	0x7ff80000

08008318 <_sbrk_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	2300      	movs	r3, #0
 800831c:	4d05      	ldr	r5, [pc, #20]	; (8008334 <_sbrk_r+0x1c>)
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	f7f9 fa8e 	bl	8001844 <_sbrk>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_sbrk_r+0x1a>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_sbrk_r+0x1a>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	200003a0 	.word	0x200003a0

08008338 <strncmp>:
 8008338:	b510      	push	{r4, lr}
 800833a:	b16a      	cbz	r2, 8008358 <strncmp+0x20>
 800833c:	3901      	subs	r1, #1
 800833e:	1884      	adds	r4, r0, r2
 8008340:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008348:	4293      	cmp	r3, r2
 800834a:	d103      	bne.n	8008354 <strncmp+0x1c>
 800834c:	42a0      	cmp	r0, r4
 800834e:	d001      	beq.n	8008354 <strncmp+0x1c>
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f5      	bne.n	8008340 <strncmp+0x8>
 8008354:	1a98      	subs	r0, r3, r2
 8008356:	bd10      	pop	{r4, pc}
 8008358:	4610      	mov	r0, r2
 800835a:	e7fc      	b.n	8008356 <strncmp+0x1e>

0800835c <__ascii_wctomb>:
 800835c:	4603      	mov	r3, r0
 800835e:	4608      	mov	r0, r1
 8008360:	b141      	cbz	r1, 8008374 <__ascii_wctomb+0x18>
 8008362:	2aff      	cmp	r2, #255	; 0xff
 8008364:	d904      	bls.n	8008370 <__ascii_wctomb+0x14>
 8008366:	228a      	movs	r2, #138	; 0x8a
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	4770      	bx	lr
 8008370:	2001      	movs	r0, #1
 8008372:	700a      	strb	r2, [r1, #0]
 8008374:	4770      	bx	lr
	...

08008378 <__assert_func>:
 8008378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800837a:	4614      	mov	r4, r2
 800837c:	461a      	mov	r2, r3
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <__assert_func+0x2c>)
 8008380:	4605      	mov	r5, r0
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68d8      	ldr	r0, [r3, #12]
 8008386:	b14c      	cbz	r4, 800839c <__assert_func+0x24>
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <__assert_func+0x30>)
 800838a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800838e:	9100      	str	r1, [sp, #0]
 8008390:	462b      	mov	r3, r5
 8008392:	4906      	ldr	r1, [pc, #24]	; (80083ac <__assert_func+0x34>)
 8008394:	f000 f80e 	bl	80083b4 <fiprintf>
 8008398:	f000 fa82 	bl	80088a0 <abort>
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <__assert_func+0x38>)
 800839e:	461c      	mov	r4, r3
 80083a0:	e7f3      	b.n	800838a <__assert_func+0x12>
 80083a2:	bf00      	nop
 80083a4:	2000000c 	.word	0x2000000c
 80083a8:	0800935d 	.word	0x0800935d
 80083ac:	0800936a 	.word	0x0800936a
 80083b0:	08009398 	.word	0x08009398

080083b4 <fiprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	b503      	push	{r0, r1, lr}
 80083b8:	4601      	mov	r1, r0
 80083ba:	ab03      	add	r3, sp, #12
 80083bc:	4805      	ldr	r0, [pc, #20]	; (80083d4 <fiprintf+0x20>)
 80083be:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	f000 f87b 	bl	80084c0 <_vfiprintf_r>
 80083ca:	b002      	add	sp, #8
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d0:	b003      	add	sp, #12
 80083d2:	4770      	bx	lr
 80083d4:	2000000c 	.word	0x2000000c

080083d8 <memmove>:
 80083d8:	4288      	cmp	r0, r1
 80083da:	b510      	push	{r4, lr}
 80083dc:	eb01 0402 	add.w	r4, r1, r2
 80083e0:	d902      	bls.n	80083e8 <memmove+0x10>
 80083e2:	4284      	cmp	r4, r0
 80083e4:	4623      	mov	r3, r4
 80083e6:	d807      	bhi.n	80083f8 <memmove+0x20>
 80083e8:	1e43      	subs	r3, r0, #1
 80083ea:	42a1      	cmp	r1, r4
 80083ec:	d008      	beq.n	8008400 <memmove+0x28>
 80083ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083f6:	e7f8      	b.n	80083ea <memmove+0x12>
 80083f8:	4601      	mov	r1, r0
 80083fa:	4402      	add	r2, r0
 80083fc:	428a      	cmp	r2, r1
 80083fe:	d100      	bne.n	8008402 <memmove+0x2a>
 8008400:	bd10      	pop	{r4, pc}
 8008402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800840a:	e7f7      	b.n	80083fc <memmove+0x24>

0800840c <__malloc_lock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_lock+0x8>)
 800840e:	f000 bc07 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 8008412:	bf00      	nop
 8008414:	200003a8 	.word	0x200003a8

08008418 <__malloc_unlock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_unlock+0x8>)
 800841a:	f000 bc02 	b.w	8008c22 <__retarget_lock_release_recursive>
 800841e:	bf00      	nop
 8008420:	200003a8 	.word	0x200003a8

08008424 <_realloc_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	4607      	mov	r7, r0
 8008428:	4614      	mov	r4, r2
 800842a:	460e      	mov	r6, r1
 800842c:	b921      	cbnz	r1, 8008438 <_realloc_r+0x14>
 800842e:	4611      	mov	r1, r2
 8008430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008434:	f7ff bdb4 	b.w	8007fa0 <_malloc_r>
 8008438:	b922      	cbnz	r2, 8008444 <_realloc_r+0x20>
 800843a:	f7ff fd65 	bl	8007f08 <_free_r>
 800843e:	4625      	mov	r5, r4
 8008440:	4628      	mov	r0, r5
 8008442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008444:	f000 fc52 	bl	8008cec <_malloc_usable_size_r>
 8008448:	42a0      	cmp	r0, r4
 800844a:	d20f      	bcs.n	800846c <_realloc_r+0x48>
 800844c:	4621      	mov	r1, r4
 800844e:	4638      	mov	r0, r7
 8008450:	f7ff fda6 	bl	8007fa0 <_malloc_r>
 8008454:	4605      	mov	r5, r0
 8008456:	2800      	cmp	r0, #0
 8008458:	d0f2      	beq.n	8008440 <_realloc_r+0x1c>
 800845a:	4631      	mov	r1, r6
 800845c:	4622      	mov	r2, r4
 800845e:	f7ff f87f 	bl	8007560 <memcpy>
 8008462:	4631      	mov	r1, r6
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fd4f 	bl	8007f08 <_free_r>
 800846a:	e7e9      	b.n	8008440 <_realloc_r+0x1c>
 800846c:	4635      	mov	r5, r6
 800846e:	e7e7      	b.n	8008440 <_realloc_r+0x1c>

08008470 <__sfputc_r>:
 8008470:	6893      	ldr	r3, [r2, #8]
 8008472:	b410      	push	{r4}
 8008474:	3b01      	subs	r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	da07      	bge.n	800848c <__sfputc_r+0x1c>
 800847c:	6994      	ldr	r4, [r2, #24]
 800847e:	42a3      	cmp	r3, r4
 8008480:	db01      	blt.n	8008486 <__sfputc_r+0x16>
 8008482:	290a      	cmp	r1, #10
 8008484:	d102      	bne.n	800848c <__sfputc_r+0x1c>
 8008486:	bc10      	pop	{r4}
 8008488:	f000 b94a 	b.w	8008720 <__swbuf_r>
 800848c:	6813      	ldr	r3, [r2, #0]
 800848e:	1c58      	adds	r0, r3, #1
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	7019      	strb	r1, [r3, #0]
 8008494:	4608      	mov	r0, r1
 8008496:	bc10      	pop	{r4}
 8008498:	4770      	bx	lr

0800849a <__sfputs_r>:
 800849a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	4614      	mov	r4, r2
 80084a2:	18d5      	adds	r5, r2, r3
 80084a4:	42ac      	cmp	r4, r5
 80084a6:	d101      	bne.n	80084ac <__sfputs_r+0x12>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e007      	b.n	80084bc <__sfputs_r+0x22>
 80084ac:	463a      	mov	r2, r7
 80084ae:	4630      	mov	r0, r6
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	f7ff ffdc 	bl	8008470 <__sfputc_r>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d1f3      	bne.n	80084a4 <__sfputs_r+0xa>
 80084bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c0 <_vfiprintf_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	460d      	mov	r5, r1
 80084c6:	4614      	mov	r4, r2
 80084c8:	4698      	mov	r8, r3
 80084ca:	4606      	mov	r6, r0
 80084cc:	b09d      	sub	sp, #116	; 0x74
 80084ce:	b118      	cbz	r0, 80084d8 <_vfiprintf_r+0x18>
 80084d0:	6983      	ldr	r3, [r0, #24]
 80084d2:	b90b      	cbnz	r3, 80084d8 <_vfiprintf_r+0x18>
 80084d4:	f000 fb06 	bl	8008ae4 <__sinit>
 80084d8:	4b89      	ldr	r3, [pc, #548]	; (8008700 <_vfiprintf_r+0x240>)
 80084da:	429d      	cmp	r5, r3
 80084dc:	d11b      	bne.n	8008516 <_vfiprintf_r+0x56>
 80084de:	6875      	ldr	r5, [r6, #4]
 80084e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ee:	f000 fb97 	bl	8008c20 <__retarget_lock_acquire_recursive>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	d501      	bpl.n	80084fc <_vfiprintf_r+0x3c>
 80084f8:	692b      	ldr	r3, [r5, #16]
 80084fa:	b9eb      	cbnz	r3, 8008538 <_vfiprintf_r+0x78>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f960 	bl	80087c4 <__swsetup_r>
 8008504:	b1c0      	cbz	r0, 8008538 <_vfiprintf_r+0x78>
 8008506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008508:	07dc      	lsls	r4, r3, #31
 800850a:	d50e      	bpl.n	800852a <_vfiprintf_r+0x6a>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b01d      	add	sp, #116	; 0x74
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	4b7b      	ldr	r3, [pc, #492]	; (8008704 <_vfiprintf_r+0x244>)
 8008518:	429d      	cmp	r5, r3
 800851a:	d101      	bne.n	8008520 <_vfiprintf_r+0x60>
 800851c:	68b5      	ldr	r5, [r6, #8]
 800851e:	e7df      	b.n	80084e0 <_vfiprintf_r+0x20>
 8008520:	4b79      	ldr	r3, [pc, #484]	; (8008708 <_vfiprintf_r+0x248>)
 8008522:	429d      	cmp	r5, r3
 8008524:	bf08      	it	eq
 8008526:	68f5      	ldreq	r5, [r6, #12]
 8008528:	e7da      	b.n	80084e0 <_vfiprintf_r+0x20>
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4ed      	bmi.n	800850c <_vfiprintf_r+0x4c>
 8008530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008532:	f000 fb76 	bl	8008c22 <__retarget_lock_release_recursive>
 8008536:	e7e9      	b.n	800850c <_vfiprintf_r+0x4c>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008542:	2330      	movs	r3, #48	; 0x30
 8008544:	f04f 0901 	mov.w	r9, #1
 8008548:	f8cd 800c 	str.w	r8, [sp, #12]
 800854c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800870c <_vfiprintf_r+0x24c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0xa2>
 800855e:	2a25      	cmp	r2, #37	; 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x96>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xc0>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ff93 	bl	800849a <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80aa 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	; 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80a2 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a0:	931a      	str	r3, [sp, #104]	; 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4858      	ldr	r0, [pc, #352]	; (800870c <_vfiprintf_r+0x24c>)
 80085ac:	f7fe ffca 	bl	8007544 <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x12c>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	; 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x13c>
 80085d0:	4654      	mov	r4, sl
 80085d2:	2000      	movs	r0, #0
 80085d4:	f04f 0c0a 	mov.w	ip, #10
 80085d8:	9a07      	ldr	r2, [sp, #28]
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	; 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94e      	bls.n	8008684 <_vfiprintf_r+0x1c4>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x156>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x156>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	46a2      	mov	sl, r4
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xe2>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	; 0x2e
 800861a:	d10c      	bne.n	8008636 <_vfiprintf_r+0x176>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	; 0x2a
 8008620:	d135      	bne.n	800868e <_vfiprintf_r+0x1ce>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	3402      	adds	r4, #2
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfb8      	it	lt
 8008630:	f04f 33ff 	movlt.w	r3, #4294967295
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800871c <_vfiprintf_r+0x25c>
 800863a:	2203      	movs	r2, #3
 800863c:	4650      	mov	r0, sl
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	f7fe ff80 	bl	8007544 <memchr>
 8008644:	b140      	cbz	r0, 8008658 <_vfiprintf_r+0x198>
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	fa03 f000 	lsl.w	r0, r3, r0
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	3401      	adds	r4, #1
 8008654:	4303      	orrs	r3, r0
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865c:	2206      	movs	r2, #6
 800865e:	482c      	ldr	r0, [pc, #176]	; (8008710 <_vfiprintf_r+0x250>)
 8008660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008664:	f7fe ff6e 	bl	8007544 <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d03f      	beq.n	80086ec <_vfiprintf_r+0x22c>
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <_vfiprintf_r+0x254>)
 800866e:	bb1b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x1f8>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3307      	adds	r3, #7
 8008674:	f023 0307 	bic.w	r3, r3, #7
 8008678:	3308      	adds	r3, #8
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	443b      	add	r3, r7
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	e767      	b.n	8008554 <_vfiprintf_r+0x94>
 8008684:	460c      	mov	r4, r1
 8008686:	2001      	movs	r0, #1
 8008688:	fb0c 3202 	mla	r2, ip, r2, r3
 800868c:	e7a5      	b.n	80085da <_vfiprintf_r+0x11a>
 800868e:	2300      	movs	r3, #0
 8008690:	f04f 0c0a 	mov.w	ip, #10
 8008694:	4619      	mov	r1, r3
 8008696:	3401      	adds	r4, #1
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	4620      	mov	r0, r4
 800869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a0:	3a30      	subs	r2, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d903      	bls.n	80086ae <_vfiprintf_r+0x1ee>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0c5      	beq.n	8008636 <_vfiprintf_r+0x176>
 80086aa:	9105      	str	r1, [sp, #20]
 80086ac:	e7c3      	b.n	8008636 <_vfiprintf_r+0x176>
 80086ae:	4604      	mov	r4, r0
 80086b0:	2301      	movs	r3, #1
 80086b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b6:	e7f0      	b.n	800869a <_vfiprintf_r+0x1da>
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	462a      	mov	r2, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	4b15      	ldr	r3, [pc, #84]	; (8008718 <_vfiprintf_r+0x258>)
 80086c2:	a904      	add	r1, sp, #16
 80086c4:	f7fc f8a0 	bl	8004808 <_printf_float>
 80086c8:	4607      	mov	r7, r0
 80086ca:	1c78      	adds	r0, r7, #1
 80086cc:	d1d6      	bne.n	800867c <_vfiprintf_r+0x1bc>
 80086ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d0:	07d9      	lsls	r1, r3, #31
 80086d2:	d405      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086d4:	89ab      	ldrh	r3, [r5, #12]
 80086d6:	059a      	lsls	r2, r3, #22
 80086d8:	d402      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086dc:	f000 faa1 	bl	8008c22 <__retarget_lock_release_recursive>
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	065b      	lsls	r3, r3, #25
 80086e4:	f53f af12 	bmi.w	800850c <_vfiprintf_r+0x4c>
 80086e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ea:	e711      	b.n	8008510 <_vfiprintf_r+0x50>
 80086ec:	ab03      	add	r3, sp, #12
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	462a      	mov	r2, r5
 80086f2:	4630      	mov	r0, r6
 80086f4:	4b08      	ldr	r3, [pc, #32]	; (8008718 <_vfiprintf_r+0x258>)
 80086f6:	a904      	add	r1, sp, #16
 80086f8:	f7fc fb22 	bl	8004d40 <_printf_i>
 80086fc:	e7e4      	b.n	80086c8 <_vfiprintf_r+0x208>
 80086fe:	bf00      	nop
 8008700:	080093bc 	.word	0x080093bc
 8008704:	080093dc 	.word	0x080093dc
 8008708:	0800939c 	.word	0x0800939c
 800870c:	0800934c 	.word	0x0800934c
 8008710:	08009356 	.word	0x08009356
 8008714:	08004809 	.word	0x08004809
 8008718:	0800849b 	.word	0x0800849b
 800871c:	08009352 	.word	0x08009352

08008720 <__swbuf_r>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	460e      	mov	r6, r1
 8008724:	4614      	mov	r4, r2
 8008726:	4605      	mov	r5, r0
 8008728:	b118      	cbz	r0, 8008732 <__swbuf_r+0x12>
 800872a:	6983      	ldr	r3, [r0, #24]
 800872c:	b90b      	cbnz	r3, 8008732 <__swbuf_r+0x12>
 800872e:	f000 f9d9 	bl	8008ae4 <__sinit>
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <__swbuf_r+0x98>)
 8008734:	429c      	cmp	r4, r3
 8008736:	d12b      	bne.n	8008790 <__swbuf_r+0x70>
 8008738:	686c      	ldr	r4, [r5, #4]
 800873a:	69a3      	ldr	r3, [r4, #24]
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	071a      	lsls	r2, r3, #28
 8008742:	d52f      	bpl.n	80087a4 <__swbuf_r+0x84>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	b36b      	cbz	r3, 80087a4 <__swbuf_r+0x84>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	b2f6      	uxtb	r6, r6
 800874e:	1ac0      	subs	r0, r0, r3
 8008750:	6963      	ldr	r3, [r4, #20]
 8008752:	4637      	mov	r7, r6
 8008754:	4283      	cmp	r3, r0
 8008756:	dc04      	bgt.n	8008762 <__swbuf_r+0x42>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f92e 	bl	80089bc <_fflush_r>
 8008760:	bb30      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	3001      	adds	r0, #1
 8008766:	3b01      	subs	r3, #1
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	701e      	strb	r6, [r3, #0]
 8008772:	6963      	ldr	r3, [r4, #20]
 8008774:	4283      	cmp	r3, r0
 8008776:	d004      	beq.n	8008782 <__swbuf_r+0x62>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	07db      	lsls	r3, r3, #31
 800877c:	d506      	bpl.n	800878c <__swbuf_r+0x6c>
 800877e:	2e0a      	cmp	r6, #10
 8008780:	d104      	bne.n	800878c <__swbuf_r+0x6c>
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 f919 	bl	80089bc <_fflush_r>
 800878a:	b988      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 800878c:	4638      	mov	r0, r7
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <__swbuf_r+0x9c>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <__swbuf_r+0x7a>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7cf      	b.n	800873a <__swbuf_r+0x1a>
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <__swbuf_r+0xa0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7ca      	b.n	800873a <__swbuf_r+0x1a>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f80c 	bl	80087c4 <__swsetup_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0cb      	beq.n	8008748 <__swbuf_r+0x28>
 80087b0:	f04f 37ff 	mov.w	r7, #4294967295
 80087b4:	e7ea      	b.n	800878c <__swbuf_r+0x6c>
 80087b6:	bf00      	nop
 80087b8:	080093bc 	.word	0x080093bc
 80087bc:	080093dc 	.word	0x080093dc
 80087c0:	0800939c 	.word	0x0800939c

080087c4 <__swsetup_r>:
 80087c4:	4b32      	ldr	r3, [pc, #200]	; (8008890 <__swsetup_r+0xcc>)
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	681d      	ldr	r5, [r3, #0]
 80087ca:	4606      	mov	r6, r0
 80087cc:	460c      	mov	r4, r1
 80087ce:	b125      	cbz	r5, 80087da <__swsetup_r+0x16>
 80087d0:	69ab      	ldr	r3, [r5, #24]
 80087d2:	b913      	cbnz	r3, 80087da <__swsetup_r+0x16>
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 f985 	bl	8008ae4 <__sinit>
 80087da:	4b2e      	ldr	r3, [pc, #184]	; (8008894 <__swsetup_r+0xd0>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	d10f      	bne.n	8008800 <__swsetup_r+0x3c>
 80087e0:	686c      	ldr	r4, [r5, #4]
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087e8:	0719      	lsls	r1, r3, #28
 80087ea:	d42c      	bmi.n	8008846 <__swsetup_r+0x82>
 80087ec:	06dd      	lsls	r5, r3, #27
 80087ee:	d411      	bmi.n	8008814 <__swsetup_r+0x50>
 80087f0:	2309      	movs	r3, #9
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	e03e      	b.n	800887e <__swsetup_r+0xba>
 8008800:	4b25      	ldr	r3, [pc, #148]	; (8008898 <__swsetup_r+0xd4>)
 8008802:	429c      	cmp	r4, r3
 8008804:	d101      	bne.n	800880a <__swsetup_r+0x46>
 8008806:	68ac      	ldr	r4, [r5, #8]
 8008808:	e7eb      	b.n	80087e2 <__swsetup_r+0x1e>
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <__swsetup_r+0xd8>)
 800880c:	429c      	cmp	r4, r3
 800880e:	bf08      	it	eq
 8008810:	68ec      	ldreq	r4, [r5, #12]
 8008812:	e7e6      	b.n	80087e2 <__swsetup_r+0x1e>
 8008814:	0758      	lsls	r0, r3, #29
 8008816:	d512      	bpl.n	800883e <__swsetup_r+0x7a>
 8008818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881a:	b141      	cbz	r1, 800882e <__swsetup_r+0x6a>
 800881c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__swsetup_r+0x66>
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff fb6f 	bl	8007f08 <_free_r>
 800882a:	2300      	movs	r3, #0
 800882c:	6363      	str	r3, [r4, #52]	; 0x34
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f043 0308 	orr.w	r3, r3, #8
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	b94b      	cbnz	r3, 800885e <__swsetup_r+0x9a>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008854:	d003      	beq.n	800885e <__swsetup_r+0x9a>
 8008856:	4621      	mov	r1, r4
 8008858:	4630      	mov	r0, r6
 800885a:	f000 fa07 	bl	8008c6c <__smakebuf_r>
 800885e:	89a0      	ldrh	r0, [r4, #12]
 8008860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008864:	f010 0301 	ands.w	r3, r0, #1
 8008868:	d00a      	beq.n	8008880 <__swsetup_r+0xbc>
 800886a:	2300      	movs	r3, #0
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	6963      	ldr	r3, [r4, #20]
 8008870:	425b      	negs	r3, r3
 8008872:	61a3      	str	r3, [r4, #24]
 8008874:	6923      	ldr	r3, [r4, #16]
 8008876:	b943      	cbnz	r3, 800888a <__swsetup_r+0xc6>
 8008878:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800887c:	d1ba      	bne.n	80087f4 <__swsetup_r+0x30>
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	0781      	lsls	r1, r0, #30
 8008882:	bf58      	it	pl
 8008884:	6963      	ldrpl	r3, [r4, #20]
 8008886:	60a3      	str	r3, [r4, #8]
 8008888:	e7f4      	b.n	8008874 <__swsetup_r+0xb0>
 800888a:	2000      	movs	r0, #0
 800888c:	e7f7      	b.n	800887e <__swsetup_r+0xba>
 800888e:	bf00      	nop
 8008890:	2000000c 	.word	0x2000000c
 8008894:	080093bc 	.word	0x080093bc
 8008898:	080093dc 	.word	0x080093dc
 800889c:	0800939c 	.word	0x0800939c

080088a0 <abort>:
 80088a0:	2006      	movs	r0, #6
 80088a2:	b508      	push	{r3, lr}
 80088a4:	f000 fa52 	bl	8008d4c <raise>
 80088a8:	2001      	movs	r0, #1
 80088aa:	f7f8 ff58 	bl	800175e <_exit>
	...

080088b0 <__sflush_r>:
 80088b0:	898a      	ldrh	r2, [r1, #12]
 80088b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b6:	4605      	mov	r5, r0
 80088b8:	0710      	lsls	r0, r2, #28
 80088ba:	460c      	mov	r4, r1
 80088bc:	d458      	bmi.n	8008970 <__sflush_r+0xc0>
 80088be:	684b      	ldr	r3, [r1, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dc05      	bgt.n	80088d0 <__sflush_r+0x20>
 80088c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc02      	bgt.n	80088d0 <__sflush_r+0x20>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d0f9      	beq.n	80088ca <__sflush_r+0x1a>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088dc:	682f      	ldr	r7, [r5, #0]
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	d032      	beq.n	8008948 <__sflush_r+0x98>
 80088e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	075a      	lsls	r2, r3, #29
 80088e8:	d505      	bpl.n	80088f6 <__sflush_r+0x46>
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f0:	b10b      	cbz	r3, 80088f6 <__sflush_r+0x46>
 80088f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f4:	1ac0      	subs	r0, r0, r3
 80088f6:	2300      	movs	r3, #0
 80088f8:	4602      	mov	r2, r0
 80088fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fc:	4628      	mov	r0, r5
 80088fe:	6a21      	ldr	r1, [r4, #32]
 8008900:	47b0      	blx	r6
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	d106      	bne.n	8008916 <__sflush_r+0x66>
 8008908:	6829      	ldr	r1, [r5, #0]
 800890a:	291d      	cmp	r1, #29
 800890c:	d82c      	bhi.n	8008968 <__sflush_r+0xb8>
 800890e:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <__sflush_r+0x108>)
 8008910:	40ca      	lsrs	r2, r1
 8008912:	07d6      	lsls	r6, r2, #31
 8008914:	d528      	bpl.n	8008968 <__sflush_r+0xb8>
 8008916:	2200      	movs	r2, #0
 8008918:	6062      	str	r2, [r4, #4]
 800891a:	6922      	ldr	r2, [r4, #16]
 800891c:	04d9      	lsls	r1, r3, #19
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	d504      	bpl.n	800892c <__sflush_r+0x7c>
 8008922:	1c42      	adds	r2, r0, #1
 8008924:	d101      	bne.n	800892a <__sflush_r+0x7a>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b903      	cbnz	r3, 800892c <__sflush_r+0x7c>
 800892a:	6560      	str	r0, [r4, #84]	; 0x54
 800892c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800892e:	602f      	str	r7, [r5, #0]
 8008930:	2900      	cmp	r1, #0
 8008932:	d0ca      	beq.n	80088ca <__sflush_r+0x1a>
 8008934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <__sflush_r+0x92>
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff fae3 	bl	8007f08 <_free_r>
 8008942:	2000      	movs	r0, #0
 8008944:	6360      	str	r0, [r4, #52]	; 0x34
 8008946:	e7c1      	b.n	80088cc <__sflush_r+0x1c>
 8008948:	6a21      	ldr	r1, [r4, #32]
 800894a:	2301      	movs	r3, #1
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	1c41      	adds	r1, r0, #1
 8008952:	d1c7      	bne.n	80088e4 <__sflush_r+0x34>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c4      	beq.n	80088e4 <__sflush_r+0x34>
 800895a:	2b1d      	cmp	r3, #29
 800895c:	d001      	beq.n	8008962 <__sflush_r+0xb2>
 800895e:	2b16      	cmp	r3, #22
 8008960:	d101      	bne.n	8008966 <__sflush_r+0xb6>
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	e7b1      	b.n	80088ca <__sflush_r+0x1a>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e7ad      	b.n	80088cc <__sflush_r+0x1c>
 8008970:	690f      	ldr	r7, [r1, #16]
 8008972:	2f00      	cmp	r7, #0
 8008974:	d0a9      	beq.n	80088ca <__sflush_r+0x1a>
 8008976:	0793      	lsls	r3, r2, #30
 8008978:	bf18      	it	ne
 800897a:	2300      	movne	r3, #0
 800897c:	680e      	ldr	r6, [r1, #0]
 800897e:	bf08      	it	eq
 8008980:	694b      	ldreq	r3, [r1, #20]
 8008982:	eba6 0807 	sub.w	r8, r6, r7
 8008986:	600f      	str	r7, [r1, #0]
 8008988:	608b      	str	r3, [r1, #8]
 800898a:	f1b8 0f00 	cmp.w	r8, #0
 800898e:	dd9c      	ble.n	80088ca <__sflush_r+0x1a>
 8008990:	4643      	mov	r3, r8
 8008992:	463a      	mov	r2, r7
 8008994:	4628      	mov	r0, r5
 8008996:	6a21      	ldr	r1, [r4, #32]
 8008998:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800899a:	47b0      	blx	r6
 800899c:	2800      	cmp	r0, #0
 800899e:	dc06      	bgt.n	80089ae <__sflush_r+0xfe>
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	e78e      	b.n	80088cc <__sflush_r+0x1c>
 80089ae:	4407      	add	r7, r0
 80089b0:	eba8 0800 	sub.w	r8, r8, r0
 80089b4:	e7e9      	b.n	800898a <__sflush_r+0xda>
 80089b6:	bf00      	nop
 80089b8:	20400001 	.word	0x20400001

080089bc <_fflush_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	4605      	mov	r5, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b913      	cbnz	r3, 80089cc <_fflush_r+0x10>
 80089c6:	2500      	movs	r5, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	b118      	cbz	r0, 80089d6 <_fflush_r+0x1a>
 80089ce:	6983      	ldr	r3, [r0, #24]
 80089d0:	b90b      	cbnz	r3, 80089d6 <_fflush_r+0x1a>
 80089d2:	f000 f887 	bl	8008ae4 <__sinit>
 80089d6:	4b14      	ldr	r3, [pc, #80]	; (8008a28 <_fflush_r+0x6c>)
 80089d8:	429c      	cmp	r4, r3
 80089da:	d11b      	bne.n	8008a14 <_fflush_r+0x58>
 80089dc:	686c      	ldr	r4, [r5, #4]
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0ef      	beq.n	80089c6 <_fflush_r+0xa>
 80089e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e8:	07d0      	lsls	r0, r2, #31
 80089ea:	d404      	bmi.n	80089f6 <_fflush_r+0x3a>
 80089ec:	0599      	lsls	r1, r3, #22
 80089ee:	d402      	bmi.n	80089f6 <_fflush_r+0x3a>
 80089f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f2:	f000 f915 	bl	8008c20 <__retarget_lock_acquire_recursive>
 80089f6:	4628      	mov	r0, r5
 80089f8:	4621      	mov	r1, r4
 80089fa:	f7ff ff59 	bl	80088b0 <__sflush_r>
 80089fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a00:	4605      	mov	r5, r0
 8008a02:	07da      	lsls	r2, r3, #31
 8008a04:	d4e0      	bmi.n	80089c8 <_fflush_r+0xc>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	059b      	lsls	r3, r3, #22
 8008a0a:	d4dd      	bmi.n	80089c8 <_fflush_r+0xc>
 8008a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0e:	f000 f908 	bl	8008c22 <__retarget_lock_release_recursive>
 8008a12:	e7d9      	b.n	80089c8 <_fflush_r+0xc>
 8008a14:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <_fflush_r+0x70>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <_fflush_r+0x62>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7df      	b.n	80089de <_fflush_r+0x22>
 8008a1e:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <_fflush_r+0x74>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7da      	b.n	80089de <_fflush_r+0x22>
 8008a28:	080093bc 	.word	0x080093bc
 8008a2c:	080093dc 	.word	0x080093dc
 8008a30:	0800939c 	.word	0x0800939c

08008a34 <std>:
 8008a34:	2300      	movs	r3, #0
 8008a36:	b510      	push	{r4, lr}
 8008a38:	4604      	mov	r4, r0
 8008a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a42:	6083      	str	r3, [r0, #8]
 8008a44:	8181      	strh	r1, [r0, #12]
 8008a46:	6643      	str	r3, [r0, #100]	; 0x64
 8008a48:	81c2      	strh	r2, [r0, #14]
 8008a4a:	6183      	str	r3, [r0, #24]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	2208      	movs	r2, #8
 8008a50:	305c      	adds	r0, #92	; 0x5c
 8008a52:	f7fb fe33 	bl	80046bc <memset>
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x38>)
 8008a58:	6224      	str	r4, [r4, #32]
 8008a5a:	6263      	str	r3, [r4, #36]	; 0x24
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <std+0x3c>)
 8008a5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <std+0x40>)
 8008a62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <std+0x44>)
 8008a66:	6323      	str	r3, [r4, #48]	; 0x30
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08008d85 	.word	0x08008d85
 8008a70:	08008da7 	.word	0x08008da7
 8008a74:	08008ddf 	.word	0x08008ddf
 8008a78:	08008e03 	.word	0x08008e03

08008a7c <_cleanup_r>:
 8008a7c:	4901      	ldr	r1, [pc, #4]	; (8008a84 <_cleanup_r+0x8>)
 8008a7e:	f000 b8af 	b.w	8008be0 <_fwalk_reent>
 8008a82:	bf00      	nop
 8008a84:	080089bd 	.word	0x080089bd

08008a88 <__sfmoreglue>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	2568      	movs	r5, #104	; 0x68
 8008a8c:	1e4a      	subs	r2, r1, #1
 8008a8e:	4355      	muls	r5, r2
 8008a90:	460e      	mov	r6, r1
 8008a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a96:	f7ff fa83 	bl	8007fa0 <_malloc_r>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	b140      	cbz	r0, 8008ab0 <__sfmoreglue+0x28>
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8008aa4:	300c      	adds	r0, #12
 8008aa6:	60a0      	str	r0, [r4, #8]
 8008aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aac:	f7fb fe06 	bl	80046bc <memset>
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <__sfp_lock_acquire>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	; (8008abc <__sfp_lock_acquire+0x8>)
 8008ab6:	f000 b8b3 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 8008aba:	bf00      	nop
 8008abc:	200003ac 	.word	0x200003ac

08008ac0 <__sfp_lock_release>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__sfp_lock_release+0x8>)
 8008ac2:	f000 b8ae 	b.w	8008c22 <__retarget_lock_release_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	200003ac 	.word	0x200003ac

08008acc <__sinit_lock_acquire>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__sinit_lock_acquire+0x8>)
 8008ace:	f000 b8a7 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	200003a7 	.word	0x200003a7

08008ad8 <__sinit_lock_release>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sinit_lock_release+0x8>)
 8008ada:	f000 b8a2 	b.w	8008c22 <__retarget_lock_release_recursive>
 8008ade:	bf00      	nop
 8008ae0:	200003a7 	.word	0x200003a7

08008ae4 <__sinit>:
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	f7ff fff0 	bl	8008acc <__sinit_lock_acquire>
 8008aec:	69a3      	ldr	r3, [r4, #24]
 8008aee:	b11b      	cbz	r3, 8008af8 <__sinit+0x14>
 8008af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af4:	f7ff bff0 	b.w	8008ad8 <__sinit_lock_release>
 8008af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008afc:	6523      	str	r3, [r4, #80]	; 0x50
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <__sinit+0x68>)
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <__sinit+0x6c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	bf08      	it	eq
 8008b0a:	2301      	moveq	r3, #1
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bf08      	it	eq
 8008b10:	61a3      	streq	r3, [r4, #24]
 8008b12:	f000 f81f 	bl	8008b54 <__sfp>
 8008b16:	6060      	str	r0, [r4, #4]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f81b 	bl	8008b54 <__sfp>
 8008b1e:	60a0      	str	r0, [r4, #8]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f817 	bl	8008b54 <__sfp>
 8008b26:	2200      	movs	r2, #0
 8008b28:	2104      	movs	r1, #4
 8008b2a:	60e0      	str	r0, [r4, #12]
 8008b2c:	6860      	ldr	r0, [r4, #4]
 8008b2e:	f7ff ff81 	bl	8008a34 <std>
 8008b32:	2201      	movs	r2, #1
 8008b34:	2109      	movs	r1, #9
 8008b36:	68a0      	ldr	r0, [r4, #8]
 8008b38:	f7ff ff7c 	bl	8008a34 <std>
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	2112      	movs	r1, #18
 8008b40:	68e0      	ldr	r0, [r4, #12]
 8008b42:	f7ff ff77 	bl	8008a34 <std>
 8008b46:	2301      	movs	r3, #1
 8008b48:	61a3      	str	r3, [r4, #24]
 8008b4a:	e7d1      	b.n	8008af0 <__sinit+0xc>
 8008b4c:	08008f44 	.word	0x08008f44
 8008b50:	08008a7d 	.word	0x08008a7d

08008b54 <__sfp>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	4607      	mov	r7, r0
 8008b58:	f7ff ffac 	bl	8008ab4 <__sfp_lock_acquire>
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <__sfp+0x84>)
 8008b5e:	681e      	ldr	r6, [r3, #0]
 8008b60:	69b3      	ldr	r3, [r6, #24]
 8008b62:	b913      	cbnz	r3, 8008b6a <__sfp+0x16>
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7ff ffbd 	bl	8008ae4 <__sinit>
 8008b6a:	3648      	adds	r6, #72	; 0x48
 8008b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	d503      	bpl.n	8008b7c <__sfp+0x28>
 8008b74:	6833      	ldr	r3, [r6, #0]
 8008b76:	b30b      	cbz	r3, 8008bbc <__sfp+0x68>
 8008b78:	6836      	ldr	r6, [r6, #0]
 8008b7a:	e7f7      	b.n	8008b6c <__sfp+0x18>
 8008b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b80:	b9d5      	cbnz	r5, 8008bb8 <__sfp+0x64>
 8008b82:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <__sfp+0x88>)
 8008b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b88:	60e3      	str	r3, [r4, #12]
 8008b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b8c:	f000 f847 	bl	8008c1e <__retarget_lock_init_recursive>
 8008b90:	f7ff ff96 	bl	8008ac0 <__sfp_lock_release>
 8008b94:	2208      	movs	r2, #8
 8008b96:	4629      	mov	r1, r5
 8008b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ba0:	6025      	str	r5, [r4, #0]
 8008ba2:	61a5      	str	r5, [r4, #24]
 8008ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba8:	f7fb fd88 	bl	80046bc <memset>
 8008bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb8:	3468      	adds	r4, #104	; 0x68
 8008bba:	e7d9      	b.n	8008b70 <__sfp+0x1c>
 8008bbc:	2104      	movs	r1, #4
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f7ff ff62 	bl	8008a88 <__sfmoreglue>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	6030      	str	r0, [r6, #0]
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d1d5      	bne.n	8008b78 <__sfp+0x24>
 8008bcc:	f7ff ff78 	bl	8008ac0 <__sfp_lock_release>
 8008bd0:	230c      	movs	r3, #12
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	e7ee      	b.n	8008bb4 <__sfp+0x60>
 8008bd6:	bf00      	nop
 8008bd8:	08008f44 	.word	0x08008f44
 8008bdc:	ffff0001 	.word	0xffff0001

08008be0 <_fwalk_reent>:
 8008be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be4:	4606      	mov	r6, r0
 8008be6:	4688      	mov	r8, r1
 8008be8:	2700      	movs	r7, #0
 8008bea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8008bf6:	d505      	bpl.n	8008c04 <_fwalk_reent+0x24>
 8008bf8:	6824      	ldr	r4, [r4, #0]
 8008bfa:	2c00      	cmp	r4, #0
 8008bfc:	d1f7      	bne.n	8008bee <_fwalk_reent+0xe>
 8008bfe:	4638      	mov	r0, r7
 8008c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c04:	89ab      	ldrh	r3, [r5, #12]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d907      	bls.n	8008c1a <_fwalk_reent+0x3a>
 8008c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	d003      	beq.n	8008c1a <_fwalk_reent+0x3a>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4630      	mov	r0, r6
 8008c16:	47c0      	blx	r8
 8008c18:	4307      	orrs	r7, r0
 8008c1a:	3568      	adds	r5, #104	; 0x68
 8008c1c:	e7e9      	b.n	8008bf2 <_fwalk_reent+0x12>

08008c1e <__retarget_lock_init_recursive>:
 8008c1e:	4770      	bx	lr

08008c20 <__retarget_lock_acquire_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_release_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <__swhatbuf_r>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	460e      	mov	r6, r1
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	461d      	mov	r5, r3
 8008c32:	b096      	sub	sp, #88	; 0x58
 8008c34:	da07      	bge.n	8008c46 <__swhatbuf_r+0x22>
 8008c36:	2300      	movs	r3, #0
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	89b3      	ldrh	r3, [r6, #12]
 8008c3c:	061a      	lsls	r2, r3, #24
 8008c3e:	d410      	bmi.n	8008c62 <__swhatbuf_r+0x3e>
 8008c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c44:	e00e      	b.n	8008c64 <__swhatbuf_r+0x40>
 8008c46:	466a      	mov	r2, sp
 8008c48:	f000 f902 	bl	8008e50 <_fstat_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	dbf2      	blt.n	8008c36 <__swhatbuf_r+0x12>
 8008c50:	9a01      	ldr	r2, [sp, #4]
 8008c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c5a:	425a      	negs	r2, r3
 8008c5c:	415a      	adcs	r2, r3
 8008c5e:	602a      	str	r2, [r5, #0]
 8008c60:	e7ee      	b.n	8008c40 <__swhatbuf_r+0x1c>
 8008c62:	2340      	movs	r3, #64	; 0x40
 8008c64:	2000      	movs	r0, #0
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	b016      	add	sp, #88	; 0x58
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}

08008c6c <__smakebuf_r>:
 8008c6c:	898b      	ldrh	r3, [r1, #12]
 8008c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c70:	079d      	lsls	r5, r3, #30
 8008c72:	4606      	mov	r6, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	d507      	bpl.n	8008c88 <__smakebuf_r+0x1c>
 8008c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	2301      	movs	r3, #1
 8008c82:	6163      	str	r3, [r4, #20]
 8008c84:	b002      	add	sp, #8
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	466a      	mov	r2, sp
 8008c8a:	ab01      	add	r3, sp, #4
 8008c8c:	f7ff ffca 	bl	8008c24 <__swhatbuf_r>
 8008c90:	9900      	ldr	r1, [sp, #0]
 8008c92:	4605      	mov	r5, r0
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff f983 	bl	8007fa0 <_malloc_r>
 8008c9a:	b948      	cbnz	r0, 8008cb0 <__smakebuf_r+0x44>
 8008c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca0:	059a      	lsls	r2, r3, #22
 8008ca2:	d4ef      	bmi.n	8008c84 <__smakebuf_r+0x18>
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e7e3      	b.n	8008c78 <__smakebuf_r+0xc>
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <__smakebuf_r+0x7c>)
 8008cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	6020      	str	r0, [r4, #0]
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	9b00      	ldr	r3, [sp, #0]
 8008cc0:	6120      	str	r0, [r4, #16]
 8008cc2:	6163      	str	r3, [r4, #20]
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	b15b      	cbz	r3, 8008ce0 <__smakebuf_r+0x74>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cce:	f000 f8d1 	bl	8008e74 <_isatty_r>
 8008cd2:	b128      	cbz	r0, 8008ce0 <__smakebuf_r+0x74>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	89a0      	ldrh	r0, [r4, #12]
 8008ce2:	4305      	orrs	r5, r0
 8008ce4:	81a5      	strh	r5, [r4, #12]
 8008ce6:	e7cd      	b.n	8008c84 <__smakebuf_r+0x18>
 8008ce8:	08008a7d 	.word	0x08008a7d

08008cec <_malloc_usable_size_r>:
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f18      	subs	r0, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfbc      	itt	lt
 8008cf6:	580b      	ldrlt	r3, [r1, r0]
 8008cf8:	18c0      	addlt	r0, r0, r3
 8008cfa:	4770      	bx	lr

08008cfc <_raise_r>:
 8008cfc:	291f      	cmp	r1, #31
 8008cfe:	b538      	push	{r3, r4, r5, lr}
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	d904      	bls.n	8008d10 <_raise_r+0x14>
 8008d06:	2316      	movs	r3, #22
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d12:	b112      	cbz	r2, 8008d1a <_raise_r+0x1e>
 8008d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d18:	b94b      	cbnz	r3, 8008d2e <_raise_r+0x32>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 f830 	bl	8008d80 <_getpid_r>
 8008d20:	462a      	mov	r2, r5
 8008d22:	4601      	mov	r1, r0
 8008d24:	4620      	mov	r0, r4
 8008d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2a:	f000 b817 	b.w	8008d5c <_kill_r>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d00a      	beq.n	8008d48 <_raise_r+0x4c>
 8008d32:	1c59      	adds	r1, r3, #1
 8008d34:	d103      	bne.n	8008d3e <_raise_r+0x42>
 8008d36:	2316      	movs	r3, #22
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7e7      	b.n	8008d0e <_raise_r+0x12>
 8008d3e:	2400      	movs	r4, #0
 8008d40:	4628      	mov	r0, r5
 8008d42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d46:	4798      	blx	r3
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e7e0      	b.n	8008d0e <_raise_r+0x12>

08008d4c <raise>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <raise+0xc>)
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f7ff bfd3 	b.w	8008cfc <_raise_r>
 8008d56:	bf00      	nop
 8008d58:	2000000c 	.word	0x2000000c

08008d5c <_kill_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4d06      	ldr	r5, [pc, #24]	; (8008d7c <_kill_r+0x20>)
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	4611      	mov	r1, r2
 8008d68:	602b      	str	r3, [r5, #0]
 8008d6a:	f7f8 fce8 	bl	800173e <_kill>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d102      	bne.n	8008d78 <_kill_r+0x1c>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b103      	cbz	r3, 8008d78 <_kill_r+0x1c>
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200003a0 	.word	0x200003a0

08008d80 <_getpid_r>:
 8008d80:	f7f8 bcd6 	b.w	8001730 <_getpid>

08008d84 <__sread>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	460c      	mov	r4, r1
 8008d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8c:	f000 f894 	bl	8008eb8 <_read_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	bfab      	itete	ge
 8008d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d96:	89a3      	ldrhlt	r3, [r4, #12]
 8008d98:	181b      	addge	r3, r3, r0
 8008d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d9e:	bfac      	ite	ge
 8008da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008da2:	81a3      	strhlt	r3, [r4, #12]
 8008da4:	bd10      	pop	{r4, pc}

08008da6 <__swrite>:
 8008da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008daa:	461f      	mov	r7, r3
 8008dac:	898b      	ldrh	r3, [r1, #12]
 8008dae:	4605      	mov	r5, r0
 8008db0:	05db      	lsls	r3, r3, #23
 8008db2:	460c      	mov	r4, r1
 8008db4:	4616      	mov	r6, r2
 8008db6:	d505      	bpl.n	8008dc4 <__swrite+0x1e>
 8008db8:	2302      	movs	r3, #2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 f868 	bl	8008e94 <_lseek_r>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dda:	f000 b817 	b.w	8008e0c <_write_r>

08008dde <__sseek>:
 8008dde:	b510      	push	{r4, lr}
 8008de0:	460c      	mov	r4, r1
 8008de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de6:	f000 f855 	bl	8008e94 <_lseek_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	bf15      	itete	ne
 8008df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dfa:	81a3      	strheq	r3, [r4, #12]
 8008dfc:	bf18      	it	ne
 8008dfe:	81a3      	strhne	r3, [r4, #12]
 8008e00:	bd10      	pop	{r4, pc}

08008e02 <__sclose>:
 8008e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e06:	f000 b813 	b.w	8008e30 <_close_r>
	...

08008e0c <_write_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	2200      	movs	r2, #0
 8008e16:	4d05      	ldr	r5, [pc, #20]	; (8008e2c <_write_r+0x20>)
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7f8 fcc6 	bl	80017ac <_write>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_write_r+0x1e>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_write_r+0x1e>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	200003a0 	.word	0x200003a0

08008e30 <_close_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	2300      	movs	r3, #0
 8008e34:	4d05      	ldr	r5, [pc, #20]	; (8008e4c <_close_r+0x1c>)
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f8 fcd2 	bl	80017e4 <_close>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_close_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_close_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	200003a0 	.word	0x200003a0

08008e50 <_fstat_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_fstat_r+0x20>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f7f8 fccc 	bl	80017fa <_fstat>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d102      	bne.n	8008e6c <_fstat_r+0x1c>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <_fstat_r+0x1c>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	200003a0 	.word	0x200003a0

08008e74 <_isatty_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	2300      	movs	r3, #0
 8008e78:	4d05      	ldr	r5, [pc, #20]	; (8008e90 <_isatty_r+0x1c>)
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fcca 	bl	8001818 <_isatty>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_isatty_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_isatty_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	200003a0 	.word	0x200003a0

08008e94 <_lseek_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4d05      	ldr	r5, [pc, #20]	; (8008eb4 <_lseek_r+0x20>)
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7f8 fcc2 	bl	800182c <_lseek>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_lseek_r+0x1e>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_lseek_r+0x1e>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	200003a0 	.word	0x200003a0

08008eb8 <_read_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4d05      	ldr	r5, [pc, #20]	; (8008ed8 <_read_r+0x20>)
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f8 fc53 	bl	8001772 <_read>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_read_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_read_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	200003a0 	.word	0x200003a0

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
