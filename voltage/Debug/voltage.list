
voltage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800dfc0  0800dfc0  0001dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4fc  0800e4fc  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4fc  0800e4fc  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4fc  0800e4fc  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4fc  0800e4fc  0001e4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e500  0800e500  0001e500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f4  20000350  0800e854  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0800e854  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb5e  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e06  00000000  00000000  0003bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  00041110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c660  00000000  00000000  000423b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017be1  00000000  00000000  0005ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c29  00000000  00000000  000765f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  0010c278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dfa4 	.word	0x0800dfa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800dfa4 	.word	0x0800dfa4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b0a5      	sub	sp, #148	; 0x94
 8000bdc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bde:	f000 fc85 	bl	80014ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be2:	f000 f897 	bl	8000d14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000be6:	f000 fa01 	bl	8000fec <MX_GPIO_Init>
	MX_DMA_Init();
 8000bea:	f000 f9e1 	bl	8000fb0 <MX_DMA_Init>
	MX_USB_DEVICE_Init();
 8000bee:	f008 f92b 	bl	8008e48 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8000bf2:	f000 f8ed 	bl	8000dd0 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000bf6:	f000 f955 	bl	8000ea4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000bfa:	f000 f9af 	bl	8000f5c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ADC_FLAG = FALSE;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <main+0x120>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

	i = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	LED_ON();
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	483a      	ldr	r0, [pc, #232]	; (8000cfc <main+0x124>)
 8000c12:	f001 fd33 	bl	800267c <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8000c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1a:	f000 fcc9 	bl	80015b0 <HAL_Delay>
	LED_OFF();
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4835      	ldr	r0, [pc, #212]	; (8000cfc <main+0x124>)
 8000c26:	f001 fd29 	bl	800267c <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8000c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2e:	f000 fcbf 	bl	80015b0 <HAL_Delay>
	HAL_TIM_Base_Start(&htim3); //AO!: Start the timer.
 8000c32:	4833      	ldr	r0, [pc, #204]	; (8000d00 <main+0x128>)
 8000c34:	f003 ff20 	bl	8004a78 <HAL_TIM_Base_Start>

	//The link between hadc1 and hdma_adc1 was completed in stm32f1xx_hal_msp.c:
	HAL_ADC_Start_DMA(&hadc1, adcBuf, ADC_BUFLEN); //Link DMA to ADC1
 8000c38:	2204      	movs	r2, #4
 8000c3a:	4932      	ldr	r1, [pc, #200]	; (8000d04 <main+0x12c>)
 8000c3c:	4832      	ldr	r0, [pc, #200]	; (8000d08 <main+0x130>)
 8000c3e:	f000 fdb3 	bl	80017a8 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (ADC_FLAG == TRUE) {
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <main+0x120>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d1fb      	bne.n	8000c42 <main+0x6a>
			ADC_FLAG = FALSE;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <main+0x120>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			++i;
 8000c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c54:	3301      	adds	r3, #1
 8000c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			LED_ON();  //After ADC has been completed.
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4826      	ldr	r0, [pc, #152]	; (8000cfc <main+0x124>)
 8000c62:	f001 fd0b 	bl	800267c <HAL_GPIO_WritePin>

			 float volt =adcBuf[0] *(3.3/4096)* 7.82;
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <main+0x12c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbba 	bl	80003e4 <__aeabi_ui2d>
 8000c70:	a31d      	add	r3, pc, #116	; (adr r3, 8000ce8 <main+0x110>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fc2f 	bl	80004d8 <__aeabi_dmul>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	a31b      	add	r3, pc, #108	; (adr r3, 8000cf0 <main+0x118>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fc26 	bl	80004d8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff18 	bl	8000ac8 <__aeabi_d2f>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			sprintf(msgbuf, "%d: ADC1=%d , volt= %f V ,\r\n", i,
					(int) adcBuf[0], (float)volt);
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <main+0x12c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
			sprintf(msgbuf, "%d: ADC1=%d , volt= %f V ,\r\n", i,
 8000ca2:	461c      	mov	r4, r3
 8000ca4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000ca8:	f7ff fbbe 	bl	8000428 <__aeabi_f2d>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	e9cd 2300 	strd	r2, r3, [sp]
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000cbc:	4913      	ldr	r1, [pc, #76]	; (8000d0c <main+0x134>)
 8000cbe:	f009 fbe1 	bl	800a484 <siprintf>
			HAL_UART_Transmit(&huart1, msgbuf, strlen(msgbuf), HAL_MAX_DELAY);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fa43 	bl	8000150 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	480e      	ldr	r0, [pc, #56]	; (8000d10 <main+0x138>)
 8000cd6:	f004 f980 	bl	8004fda <HAL_UART_Transmit>

			LED_OFF();
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <main+0x124>)
 8000ce2:	f001 fccb 	bl	800267c <HAL_GPIO_WritePin>
		if (ADC_FLAG == TRUE) {
 8000ce6:	e7ac      	b.n	8000c42 <main+0x6a>
 8000ce8:	66666666 	.word	0x66666666
 8000cec:	3f4a6666 	.word	0x3f4a6666
 8000cf0:	147ae148 	.word	0x147ae148
 8000cf4:	401f47ae 	.word	0x401f47ae
 8000cf8:	20000624 	.word	0x20000624
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	200005ac 	.word	0x200005ac
 8000d04:	2000059c 	.word	0x2000059c
 8000d08:	200005f4 	.word	0x200005f4
 8000d0c:	0800dfc0 	.word	0x0800dfc0
 8000d10:	20000628 	.word	0x20000628

08000d14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fd30 	bl	8009788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	2301      	movs	r3, #1
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 f964 	bl	8004038 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x66>
		Error_Handler();
 8000d76:	f000 f985 	bl	8001084 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fbce 	bl	8004538 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x92>
		Error_Handler();
 8000da2:	f000 f96f 	bl	8001084 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8000da6:	2312      	movs	r3, #18
 8000da8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000daa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dae:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fd58 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xb2>
		Error_Handler();
 8000dc2:	f000 f95f 	bl	8001084 <Error_Handler>
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	; 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000de2:	4a2f      	ldr	r2, [pc, #188]	; (8000ea0 <MX_ADC1_Init+0xd0>)
 8000de4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dec:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000dfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e00:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e0e:	4823      	ldr	r0, [pc, #140]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e10:	f000 fbf2 	bl	80015f8 <HAL_ADC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x4e>
		Error_Handler();
 8000e1a:	f000 f933 	bl	8001084 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000e26:	2305      	movs	r3, #5
 8000e28:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481b      	ldr	r0, [pc, #108]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e30:	f000 fdaa 	bl	8001988 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000e3a:	f000 f923 	bl	8001084 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e4c:	f000 fd9c 	bl	8001988 <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0x8a>
		Error_Handler();
 8000e56:	f000 f915 	bl	8001084 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e68:	f000 fd8e 	bl	8001988 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000e72:	f000 f907 	bl	8001084 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_ADC1_Init+0xcc>)
 8000e84:	f000 fd80 	bl	8001988 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8000e8e:	f000 f8f9 	bl	8001084 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200005f4 	.word	0x200005f4
 8000ea0:	40012400 	.word	0x40012400

08000ea4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <MX_TIM3_Init+0x98>)
 8000ec4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7200;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ec8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000ecc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000eea:	f003 fd75 	bl	80049d8 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x54>
		Error_Handler();
 8000ef4:	f000 f8c6 	bl	8001084 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000f06:	f003 fe01 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x70>
		Error_Handler();
 8000f10:	f000 f8b8 	bl	8001084 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f14:	2320      	movs	r3, #32
 8000f16:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM3_Init+0x94>)
 8000f22:	f003 ffaf 	bl	8004e84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000f2c:	f000 f8aa 	bl	8001084 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200005ac 	.word	0x200005ac
 8000f3c:	40000400 	.word	0x40000400

08000f40 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

	ADC_FLAG = TRUE;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000624 	.word	0x20000624

08000f5c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART1_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f94:	f003 ffd4 	bl	8004f40 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f9e:	f000 f871 	bl	8001084 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000628 	.word	0x20000628
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f000 ffa9 	bl	8001f2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f000 ffc2 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_GPIO_Init+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <MX_GPIO_Init+0x90>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_GPIO_Init+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_GPIO_Init+0x90>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <MX_GPIO_Init+0x90>)
 800101e:	f043 0320 	orr.w	r3, r3, #32
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_GPIO_Init+0x90>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_GPIO_Init+0x90>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <MX_GPIO_Init+0x90>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_GPIO_Init+0x90>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_GPIO_Init+0x94>)
 8001050:	f001 fb14 	bl	800267c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_GPIO_Init+0x94>)
 800106e:	f001 f981 	bl	8002374 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	40011000 	.word	0x40011000

08001084 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_MspInit+0x5c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_MspInit+0x5c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x5c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x5c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_MspInit+0x60>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_MspInit+0x60>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <HAL_ADC_MspInit+0xc0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d14a      	bne.n	80011aa <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_ADC_MspInit+0xc4>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001144:	230e      	movs	r3, #14
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	481a      	ldr	r0, [pc, #104]	; (80011bc <HAL_ADC_MspInit+0xc8>)
 8001154:	f001 f90e 	bl	8002374 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 800115c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001176:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 800117a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001182:	2220      	movs	r2, #32
 8001184:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118e:	480c      	ldr	r0, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001190:	f000 ff02 	bl	8001f98 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800119a:	f7ff ff73 	bl	8001084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012400 	.word	0x40012400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	2000066c 	.word	0x2000066c
 80011c4:	40020008 	.word	0x40020008

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_TIM_Base_MspInit+0x34>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10b      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0x38>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_TIM_Base_MspInit+0x38>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_TIM_Base_MspInit+0x38>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40000400 	.word	0x40000400
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_UART_MspInit+0x8c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d131      	bne.n	8001288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x90>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_UART_MspInit+0x94>)
 800126a:	f001 f883 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_UART_MspInit+0x94>)
 8001284:	f001 f876 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40013800 	.word	0x40013800
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f949 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA1_Channel1_IRQHandler+0x10>)
 80012f2:	f000 ff0b 	bl	800210c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000066c 	.word	0x2000066c

08001300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001306:	f001 fb02 	bl	800290e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20001348 	.word	0x20001348

08001314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_kill>:

int _kill(int pid, int sig)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800132c:	f008 fa02 	bl	8009734 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	2216      	movs	r2, #22
 8001334:	601a      	str	r2, [r3, #0]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_exit>:

void _exit (int status)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800134a:	f04f 31ff 	mov.w	r1, #4294967295
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffe7 	bl	8001322 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001354:	e7fe      	b.n	8001354 <_exit+0x12>

08001356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00a      	b.n	800137e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001368:	f3af 8000 	nop.w
 800136c:	4601      	mov	r1, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf0      	blt.n	8001368 <_read+0x12>
	}

return len;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e009      	b.n	80013b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf1      	blt.n	80013a2 <_write+0x12>
	}
	return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_close>:

int _close(int file)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <_isatty>:

int _isatty(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f008 f96c 	bl	8009734 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20005000 	.word	0x20005000
 8001488:	00000400 	.word	0x00000400
 800148c:	2000036c 	.word	0x2000036c
 8001490:	20001648 	.word	0x20001648

08001494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c6:	f7ff ffe5 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f008 f939 	bl	8009740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fb83 	bl	8000bd8 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80014dc:	0800e504 	.word	0x0800e504
  ldr r2, =_sbss
 80014e0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80014e4:	20001644 	.word	0x20001644

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 fd09 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fdc2 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fd21 	bl	8001f7e <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 fce9 	bl	8001f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x1c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x20>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000008 	.word	0x20000008
 8001598:	200006b0 	.word	0x200006b0

0800159c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_GetTick+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	200006b0 	.word	0x200006b0

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fff0 	bl	800159c <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffe0 	bl	800159c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008

080015f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0be      	b.n	8001798 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fd5c 	bl	80010f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 faf5 	bl	8001c2c <ADC_ConversionStop_Disable>
 8001642:	4603      	mov	r3, r0
 8001644:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 8099 	bne.w	8001786 <HAL_ADC_Init+0x18e>
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 8095 	bne.w	8001786 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001664:	f023 0302 	bic.w	r3, r3, #2
 8001668:	f043 0202 	orr.w	r2, r3, #2
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001678:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001680:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4313      	orrs	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001690:	d003      	beq.n	800169a <HAL_ADC_Init+0xa2>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <HAL_ADC_Init+0xa8>
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	e000      	b.n	80016a2 <HAL_ADC_Init+0xaa>
 80016a0:	2300      	movs	r3, #0
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7d1b      	ldrb	r3, [r3, #20]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d119      	bne.n	80016e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7b1b      	ldrb	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	3b01      	subs	r3, #1
 80016be:	035a      	lsls	r2, r3, #13
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	e00b      	b.n	80016e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_ADC_Init+0x1a8>)
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	430b      	orrs	r3, r1
 800170a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d003      	beq.n	800171e <HAL_ADC_Init+0x126>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d104      	bne.n	8001728 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	3b01      	subs	r3, #1
 8001724:	051b      	lsls	r3, r3, #20
 8001726:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	430a      	orrs	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_ADC_Init+0x1ac>)
 8001744:	4013      	ands	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	429a      	cmp	r2, r3
 800174a:	d10b      	bne.n	8001764 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001762:	e018      	b.n	8001796 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f023 0312 	bic.w	r3, r3, #18
 800176c:	f043 0210 	orr.w	r2, r3, #16
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001784:	e007      	b.n	8001796 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	ffe1f7fd 	.word	0xffe1f7fd
 80017a4:	ff1f0efe 	.word	0xff1f0efe

080017a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a64      	ldr	r2, [pc, #400]	; (8001950 <HAL_ADC_Start_DMA+0x1a8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_ADC_Start_DMA+0x24>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_ADC_Start_DMA+0x1ac>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d106      	bne.n	80017da <HAL_ADC_Start_DMA+0x32>
 80017cc:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HAL_ADC_Start_DMA+0x1a8>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 80b3 	bne.w	8001940 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_Start_DMA+0x40>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0ae      	b.n	8001946 <HAL_ADC_Start_DMA+0x19e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 f9c1 	bl	8001b78 <ADC_Enable>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 809a 	bne.w	8001936 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_ADC_Start_DMA+0x1ac>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d105      	bne.n	800182c <HAL_ADC_Start_DMA+0x84>
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_ADC_Start_DMA+0x1a8>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d115      	bne.n	8001858 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d026      	beq.n	8001894 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800184e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001856:	e01d      	b.n	8001894 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a39      	ldr	r2, [pc, #228]	; (8001950 <HAL_ADC_Start_DMA+0x1a8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_ADC_Start_DMA+0xd0>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a38      	ldr	r2, [pc, #224]	; (8001954 <HAL_ADC_Start_DMA+0x1ac>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10d      	bne.n	8001894 <HAL_ADC_Start_DMA+0xec>
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_ADC_Start_DMA+0x1a8>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f023 0206 	bic.w	r2, r3, #6
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a25      	ldr	r2, [pc, #148]	; (8001958 <HAL_ADC_Start_DMA+0x1b0>)
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <HAL_ADC_Start_DMA+0x1b4>)
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_ADC_Start_DMA+0x1b8>)
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0202 	mvn.w	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a18      	ldr	r0, [r3, #32]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	334c      	adds	r3, #76	; 0x4c
 80018f8:	4619      	mov	r1, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f000 fba5 	bl	800204c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800190c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001910:	d108      	bne.n	8001924 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001920:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001922:	e00f      	b.n	8001944 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001932:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001934:	e006      	b.n	8001944 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800193e:	e001      	b.n	8001944 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001944:	7dfb      	ldrb	r3, [r7, #23]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012400 	.word	0x40012400
 8001954:	40012800 	.word	0x40012800
 8001958:	08001caf 	.word	0x08001caf
 800195c:	08001d2b 	.word	0x08001d2b
 8001960:	08001d47 	.word	0x08001d47

08001964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x20>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e0dc      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1da>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d81c      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	3b05      	subs	r3, #5
 80019ca:	221f      	movs	r2, #31
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4019      	ands	r1, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b05      	subs	r3, #5
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
 80019f0:	e03c      	b.n	8001a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d81c      	bhi.n	8001a34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b23      	subs	r3, #35	; 0x23
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4019      	ands	r1, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b23      	subs	r3, #35	; 0x23
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
 8001a32:	e01b      	b.n	8001a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b41      	subs	r3, #65	; 0x41
 8001a46:	221f      	movs	r2, #31
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4019      	ands	r1, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b41      	subs	r3, #65	; 0x41
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	d91c      	bls.n	8001aae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68d9      	ldr	r1, [r3, #12]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	3b1e      	subs	r3, #30
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b1e      	subs	r3, #30
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	e019      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6898      	ldr	r0, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d003      	beq.n	8001af2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aee:	2b11      	cmp	r3, #17
 8001af0:	d132      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d125      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d126      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d11a      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9a      	lsrs	r2, r3, #18
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x1b2>
 8001b46:	e007      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40012400 	.word	0x40012400
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d040      	beq.n	8001c18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <ADC_Enable+0xac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <ADC_Enable+0xb0>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bb4:	e002      	b.n	8001bbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f9      	bne.n	8001bb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc2:	f7ff fceb 	bl	800159c <HAL_GetTick>
 8001bc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bc8:	e01f      	b.n	8001c0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bca:	f7ff fce7 	bl	800159c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d918      	bls.n	8001c0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d011      	beq.n	8001c0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d1d8      	bne.n	8001bca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	431bde83 	.word	0x431bde83

08001c2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d12e      	bne.n	8001ca4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c56:	f7ff fca1 	bl	800159c <HAL_GetTick>
 8001c5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c5c:	e01b      	b.n	8001c96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c5e:	f7ff fc9d 	bl	800159c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d914      	bls.n	8001c96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10d      	bne.n	8001c96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0dc      	beq.n	8001c5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d127      	bne.n	8001d18 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ce2:	d115      	bne.n	8001d10 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff f915 	bl	8000f40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d16:	e004      	b.n	8001d22 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fe13 	bl	8001964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f043 0204 	orr.w	r2, r3, #4
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff fe02 	bl	8001976 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4906      	ldr	r1, [pc, #24]	; (8001e14 <__NVIC_EnableIRQ+0x34>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee0:	d301      	bcc.n	8001ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00f      	b.n	8001f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <SysTick_Config+0x40>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eee:	210f      	movs	r1, #15
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f7ff ff90 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SysTick_Config+0x40>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Config+0x40>)
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff2d 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff42 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ff90 	bl	8001e6c <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff5f 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff35 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa2 	bl	8001ed0 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e043      	b.n	8002036 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_DMA_Init+0xa8>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_DMA_Init+0xac>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_DMA_Init+0xb0>)
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fe2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	bffdfff8 	.word	0xbffdfff8
 8002044:	cccccccd 	.word	0xcccccccd
 8002048:	40020000 	.word	0x40020000

0800204c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_DMA_Start_IT+0x20>
 8002068:	2302      	movs	r3, #2
 800206a:	e04a      	b.n	8002102 <HAL_DMA_Start_IT+0xb6>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800207a:	2b01      	cmp	r3, #1
 800207c:	d13a      	bne.n	80020f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f938 	bl	8002318 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 020e 	orr.w	r2, r2, #14
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e00f      	b.n	80020e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 020a 	orr.w	r2, r2, #10
 80020e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e005      	b.n	8002100 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002100:	7dfb      	ldrb	r3, [r7, #23]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2204      	movs	r2, #4
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d04f      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xc8>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_DMA_IRQHandler+0x1f0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d029      	beq.n	80021ba <HAL_DMA_IRQHandler+0xae>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_DMA_IRQHandler+0x1f4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xaa>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_DMA_IRQHandler+0x1f8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0xa4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_DMA_IRQHandler+0x1fc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d012      	beq.n	80021aa <HAL_DMA_IRQHandler+0x9e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_DMA_IRQHandler+0x200>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00a      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x98>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_DMA_IRQHandler+0x204>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d102      	bne.n	800219e <HAL_DMA_IRQHandler+0x92>
 8002198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800219c:	e00e      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 800219e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021a2:	e00b      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 80021a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a8:	e008      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 80021aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ae:	e005      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 80021b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b4:	e002      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 80021b6:	2340      	movs	r3, #64	; 0x40
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0xb0>
 80021ba:	2304      	movs	r3, #4
 80021bc:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_DMA_IRQHandler+0x208>)
 80021be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8094 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	e08e      	b.n	80022f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2202      	movs	r2, #2
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d056      	beq.n	8002292 <HAL_DMA_IRQHandler+0x186>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d051      	beq.n	8002292 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 020a 	bic.w	r2, r2, #10
 800220a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a38      	ldr	r2, [pc, #224]	; (80022fc <HAL_DMA_IRQHandler+0x1f0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d029      	beq.n	8002272 <HAL_DMA_IRQHandler+0x166>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a37      	ldr	r2, [pc, #220]	; (8002300 <HAL_DMA_IRQHandler+0x1f4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0x162>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a35      	ldr	r2, [pc, #212]	; (8002304 <HAL_DMA_IRQHandler+0x1f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x15c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_DMA_IRQHandler+0x1fc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d012      	beq.n	8002262 <HAL_DMA_IRQHandler+0x156>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_DMA_IRQHandler+0x200>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00a      	beq.n	800225c <HAL_DMA_IRQHandler+0x150>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a31      	ldr	r2, [pc, #196]	; (8002310 <HAL_DMA_IRQHandler+0x204>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d102      	bne.n	8002256 <HAL_DMA_IRQHandler+0x14a>
 8002250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002254:	e00e      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 8002256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225a:	e00b      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 800225c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002260:	e008      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 8002262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002266:	e005      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 8002268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226c:	e002      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 800226e:	2320      	movs	r3, #32
 8002270:	e000      	b.n	8002274 <HAL_DMA_IRQHandler+0x168>
 8002272:	2302      	movs	r3, #2
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_DMA_IRQHandler+0x208>)
 8002276:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d034      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002290:	e02f      	b.n	80022f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2208      	movs	r2, #8
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d028      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x1e8>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 020e 	bic.w	r2, r2, #14
 80022ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
    }
  }
  return;
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
}
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40020008 	.word	0x40020008
 8002300:	4002001c 	.word	0x4002001c
 8002304:	40020030 	.word	0x40020030
 8002308:	40020044 	.word	0x40020044
 800230c:	40020058 	.word	0x40020058
 8002310:	4002006c 	.word	0x4002006c
 8002314:	40020000 	.word	0x40020000

08002318 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b10      	cmp	r3, #16
 8002344:	d108      	bne.n	8002358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002356:	e007      	b.n	8002368 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	60da      	str	r2, [r3, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b08b      	sub	sp, #44	; 0x2c
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	e169      	b.n	800265c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002388:	2201      	movs	r2, #1
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8158 	bne.w	8002656 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a9a      	ldr	r2, [pc, #616]	; (8002614 <HAL_GPIO_Init+0x2a0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d05e      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023b0:	4a98      	ldr	r2, [pc, #608]	; (8002614 <HAL_GPIO_Init+0x2a0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d875      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023b6:	4a98      	ldr	r2, [pc, #608]	; (8002618 <HAL_GPIO_Init+0x2a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d058      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023bc:	4a96      	ldr	r2, [pc, #600]	; (8002618 <HAL_GPIO_Init+0x2a4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d86f      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023c2:	4a96      	ldr	r2, [pc, #600]	; (800261c <HAL_GPIO_Init+0x2a8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d052      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023c8:	4a94      	ldr	r2, [pc, #592]	; (800261c <HAL_GPIO_Init+0x2a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d869      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023ce:	4a94      	ldr	r2, [pc, #592]	; (8002620 <HAL_GPIO_Init+0x2ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04c      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023d4:	4a92      	ldr	r2, [pc, #584]	; (8002620 <HAL_GPIO_Init+0x2ac>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d863      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023da:	4a92      	ldr	r2, [pc, #584]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d046      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023e0:	4a90      	ldr	r2, [pc, #576]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d85d      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d82a      	bhi.n	8002440 <HAL_GPIO_Init+0xcc>
 80023ea:	2b12      	cmp	r3, #18
 80023ec:	d859      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_GPIO_Init+0x80>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800246f 	.word	0x0800246f
 80023f8:	08002449 	.word	0x08002449
 80023fc:	0800245b 	.word	0x0800245b
 8002400:	0800249d 	.word	0x0800249d
 8002404:	080024a3 	.word	0x080024a3
 8002408:	080024a3 	.word	0x080024a3
 800240c:	080024a3 	.word	0x080024a3
 8002410:	080024a3 	.word	0x080024a3
 8002414:	080024a3 	.word	0x080024a3
 8002418:	080024a3 	.word	0x080024a3
 800241c:	080024a3 	.word	0x080024a3
 8002420:	080024a3 	.word	0x080024a3
 8002424:	080024a3 	.word	0x080024a3
 8002428:	080024a3 	.word	0x080024a3
 800242c:	080024a3 	.word	0x080024a3
 8002430:	080024a3 	.word	0x080024a3
 8002434:	080024a3 	.word	0x080024a3
 8002438:	08002451 	.word	0x08002451
 800243c:	08002465 	.word	0x08002465
 8002440:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_GPIO_Init+0x2b4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002446:	e02c      	b.n	80024a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e029      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	3304      	adds	r3, #4
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e024      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	3308      	adds	r3, #8
 8002460:	623b      	str	r3, [r7, #32]
          break;
 8002462:	e01f      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	330c      	adds	r3, #12
 800246a:	623b      	str	r3, [r7, #32]
          break;
 800246c:	e01a      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002476:	2304      	movs	r3, #4
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e013      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002484:	2308      	movs	r3, #8
 8002486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	611a      	str	r2, [r3, #16]
          break;
 800248e:	e009      	b.n	80024a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002490:	2308      	movs	r3, #8
 8002492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	615a      	str	r2, [r3, #20]
          break;
 800249a:	e003      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800249c:	2300      	movs	r3, #0
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          break;
 80024a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d801      	bhi.n	80024ae <HAL_GPIO_Init+0x13a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	e001      	b.n	80024b2 <HAL_GPIO_Init+0x13e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2bff      	cmp	r3, #255	; 0xff
 80024b8:	d802      	bhi.n	80024c0 <HAL_GPIO_Init+0x14c>
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x152>
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3b08      	subs	r3, #8
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	210f      	movs	r1, #15
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80b1 	beq.w	8002656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_GPIO_Init+0x2b8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_GPIO_Init+0x2b8>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_GPIO_Init+0x2b8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_GPIO_Init+0x2bc>)
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <HAL_GPIO_Init+0x2c0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_GPIO_Init+0x1ec>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3f      	ldr	r2, [pc, #252]	; (8002638 <HAL_GPIO_Init+0x2c4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00d      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_GPIO_Init+0x2c8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x1e4>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3d      	ldr	r2, [pc, #244]	; (8002640 <HAL_GPIO_Init+0x2cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_GPIO_Init+0x1e0>
 8002550:	2303      	movs	r3, #3
 8002552:	e006      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002554:	2304      	movs	r3, #4
 8002556:	e004      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002558:	2302      	movs	r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002560:	2300      	movs	r3, #0
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	f002 0203 	and.w	r2, r2, #3
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4093      	lsls	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002572:	492f      	ldr	r1, [pc, #188]	; (8002630 <HAL_GPIO_Init+0x2bc>)
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	492c      	ldr	r1, [pc, #176]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4928      	ldr	r1, [pc, #160]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	491e      	ldr	r1, [pc, #120]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	4918      	ldr	r1, [pc, #96]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4914      	ldr	r1, [pc, #80]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d021      	beq.n	8002648 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	490e      	ldr	r1, [pc, #56]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
 8002610:	e021      	b.n	8002656 <HAL_GPIO_Init+0x2e2>
 8002612:	bf00      	nop
 8002614:	10320000 	.word	0x10320000
 8002618:	10310000 	.word	0x10310000
 800261c:	10220000 	.word	0x10220000
 8002620:	10210000 	.word	0x10210000
 8002624:	10120000 	.word	0x10120000
 8002628:	10110000 	.word	0x10110000
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000
 8002634:	40010800 	.word	0x40010800
 8002638:	40010c00 	.word	0x40010c00
 800263c:	40011000 	.word	0x40011000
 8002640:	40011400 	.word	0x40011400
 8002644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_GPIO_Init+0x304>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	43db      	mvns	r3, r3
 8002650:	4909      	ldr	r1, [pc, #36]	; (8002678 <HAL_GPIO_Init+0x304>)
 8002652:	4013      	ands	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3301      	adds	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	f47f ae8e 	bne.w	8002388 <HAL_GPIO_Init+0x14>
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	372c      	adds	r7, #44	; 0x2c
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af06      	add	r7, sp, #24
 80026b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0fd      	b.n	80028ba <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f006 fd84 	bl	80091e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fe09 	bl	80052fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f002 fdd3 	bl	80052b0 <USB_CoreInit>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0ce      	b.n	80028ba <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fe04 	bl	8005330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e04c      	b.n	80027c8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3301      	adds	r3, #1
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	b298      	uxth	r0, r3
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	3336      	adds	r3, #54	; 0x36
 800276c:	4602      	mov	r2, r0
 800276e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	3303      	adds	r3, #3
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	333c      	adds	r3, #60	; 0x3c
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3340      	adds	r3, #64	; 0x40
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3301      	adds	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3ad      	bcc.n	800272e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3b5      	bcc.n	80027d8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	687e      	ldr	r6, [r7, #4]
 8002874:	466d      	mov	r5, sp
 8002876:	f106 0410 	add.w	r4, r6, #16
 800287a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	1d33      	adds	r3, r6, #4
 8002884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f002 fd5e 	bl	8005348 <USB_DevInit>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00d      	b.n	80028ba <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fecf 	bl	8007656 <USB_DevDisconnect>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_PCD_Start+0x16>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e016      	b.n	8002906 <HAL_PCD_Start+0x44>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fcf3 	bl	80052d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028ea:	2101      	movs	r1, #1
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f006 feea 	bl	80096c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fea3 	bl	8007642 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b088      	sub	sp, #32
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f004 fea5 	bl	800766a <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292a:	d102      	bne.n	8002932 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb61 	bl	8002ff4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fe97 	bl	800766a <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d112      	bne.n	800296e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	b292      	uxth	r2, r2
 800295c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f006 fcb8 	bl	80092d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002966:	2100      	movs	r1, #0
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f925 	bl	8002bb8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fe79 	bl	800766a <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002982:	d10b      	bne.n	800299c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002996:	b292      	uxth	r2, r2
 8002998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fe62 	bl	800766a <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	d10b      	bne.n	80029ca <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fe4b 	bl	800766a <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d126      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0208 	bic.w	r2, r2, #8
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f006 fc99 	bl	8009348 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fe19 	bl	800766a <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a42:	f040 8084 	bne.w	8002b4e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e011      	b.n	8002a70 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	441a      	add	r2, r3
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	f107 0120 	add.w	r1, r7, #32
 8002a64:	440b      	add	r3, r1
 8002a66:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d9ea      	bls.n	8002a4c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002aa6:	bf00      	nop
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f6      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002acc:	b292      	uxth	r2, r2
 8002ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e010      	b.n	8002afa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	7ffa      	ldrb	r2, [r7, #31]
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	440a      	add	r2, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f107 0120 	add.w	r1, r7, #32
 8002aec:	440b      	add	r3, r1
 8002aee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002af2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
 8002af6:	3301      	adds	r3, #1
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
 8002afc:	2b07      	cmp	r3, #7
 8002afe:	d9eb      	bls.n	8002ad8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	b292      	uxth	r2, r2
 8002b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0204 	orr.w	r2, r2, #4
 8002b42:	b292      	uxth	r2, r2
 8002b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f006 fbe3 	bl	8009314 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fd89 	bl	800766a <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b62:	d10e      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b76:	b292      	uxth	r2, r2
 8002b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f006 fb9c 	bl	80092ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fd6f 	bl	800766a <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b96:	d10b      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002baa:	b292      	uxth	r2, r2
 8002bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_PCD_SetAddress+0x1a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e013      	b.n	8002bfa <HAL_PCD_SetAddress+0x42>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fd16 	bl	800761c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	4608      	mov	r0, r1
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4603      	mov	r3, r0
 8002c12:	70fb      	strb	r3, [r7, #3]
 8002c14:	460b      	mov	r3, r1
 8002c16:	803b      	strh	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da0e      	bge.n	8002c46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	705a      	strb	r2, [r3, #1]
 8002c44:	e00e      	b.n	8002c64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 0207 	and.w	r2, r3, #7
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c70:	883a      	ldrh	r2, [r7, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	78ba      	ldrb	r2, [r7, #2]
 8002c7a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c8e:	78bb      	ldrb	r3, [r7, #2]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d102      	bne.n	8002c9a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_EP_Open+0xa6>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e00e      	b.n	8002cc6 <HAL_PCD_EP_Open+0xc4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fb66 	bl	8005388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0e      	bge.n	8002d00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	705a      	strb	r2, [r3, #1]
 8002cfe:	e00e      	b.n	8002d1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 0207 	and.w	r2, r3, #7
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_PCD_EP_Close+0x6a>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e00e      	b.n	8002d56 <HAL_PCD_EP_Close+0x88>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fe88 	bl	8005a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	7afb      	ldrb	r3, [r7, #11]
 8002d70:	f003 0207 	and.w	r2, r3, #7
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 f83a 	bl	8005e34 <USB_EPStartXfer>
 8002dc0:	e005      	b.n	8002dce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 f833 	bl	8005e34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0207 	and.w	r2, r3, #7
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	460b      	mov	r3, r1
 8002e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	7afb      	ldrb	r3, [r7, #11]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 ffe0 	bl	8005e34 <USB_EPStartXfer>
 8002e74:	e005      	b.n	8002e82 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 ffd9 	bl	8005e34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0207 	and.w	r2, r3, #7
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e04c      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0e      	bge.n	8002ed0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	705a      	strb	r2, [r3, #1]
 8002ece:	e00c      	b.n	8002eea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_EP_SetStall+0x7e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e01c      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xb8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fa82 	bl	8007422 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f004 fba7 	bl	8007688 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e040      	b.n	8002fec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0e      	bge.n	8002f90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	705a      	strb	r2, [r3, #1]
 8002f8e:	e00e      	b.n	8002fae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0207 	and.w	r2, r3, #7
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_PCD_EP_ClrStall+0x82>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e00e      	b.n	8002fec <HAL_PCD_EP_ClrStall+0xa0>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 fa70 	bl	80074c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ffc:	e2ec      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003006:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003014:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 8161 	bne.w	80032e0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800301e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d152      	bne.n	80030ce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	81fb      	strh	r3, [r7, #14]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003048:	b29b      	uxth	r3, r3
 800304a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3328      	adds	r3, #40	; 0x28
 8003050:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	3302      	adds	r3, #2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	441a      	add	r2, r3
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800308c:	2100      	movs	r1, #0
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f006 f8f9 	bl	8009286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 829b 	beq.w	80035d8 <PCD_EP_ISR_Handler+0x5e4>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 8296 	bne.w	80035d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b292      	uxth	r2, r2
 80030c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030cc:	e284      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d034      	beq.n	8003152 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	3306      	adds	r3, #6
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003126:	b29b      	uxth	r3, r3
 8003128:	f004 fafe 	bl	8007728 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29a      	uxth	r2, r3
 8003134:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003138:	4013      	ands	r3, r2
 800313a:	823b      	strh	r3, [r7, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	8a3a      	ldrh	r2, [r7, #16]
 8003142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003146:	b292      	uxth	r2, r2
 8003148:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f006 f86e 	bl	800922c <HAL_PCD_SetupStageCallback>
 8003150:	e242      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003152:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003156:	2b00      	cmp	r3, #0
 8003158:	f280 823e 	bge.w	80035d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29a      	uxth	r2, r3
 8003164:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003168:	4013      	ands	r3, r2
 800316a:	83bb      	strh	r3, [r7, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	8bba      	ldrh	r2, [r7, #28]
 8003172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003176:	b292      	uxth	r2, r2
 8003178:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	3306      	adds	r3, #6
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x1ee>
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d015      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	6959      	ldr	r1, [r3, #20]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f004 faae 	bl	8007728 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	441a      	add	r2, r3
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031da:	2100      	movs	r1, #0
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f006 f837 	bl	8009250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 81f2 	bne.w	80035d8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d112      	bne.n	8003242 <PCD_EP_ISR_Handler+0x24e>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003226:	b29a      	uxth	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800323a:	b29a      	uxth	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	e02f      	b.n	80032a2 <PCD_EP_ISR_Handler+0x2ae>
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b3e      	cmp	r3, #62	; 0x3e
 8003248:	d813      	bhi.n	8003272 <PCD_EP_ISR_Handler+0x27e>
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <PCD_EP_ISR_Handler+0x270>
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	3301      	adds	r3, #1
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	b29b      	uxth	r3, r3
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	b29a      	uxth	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	e017      	b.n	80032a2 <PCD_EP_ISR_Handler+0x2ae>
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <PCD_EP_ISR_Handler+0x298>
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	3b01      	subs	r3, #1
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	b29b      	uxth	r3, r3
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	b29b      	uxth	r3, r3
 8003294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329c:	b29a      	uxth	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	827b      	strh	r3, [r7, #18]
 80032b4:	8a7b      	ldrh	r3, [r7, #18]
 80032b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032ba:	827b      	strh	r3, [r7, #18]
 80032bc:	8a7b      	ldrh	r3, [r7, #18]
 80032be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032c2:	827b      	strh	r3, [r7, #18]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	8a7b      	ldrh	r3, [r7, #18]
 80032ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
 80032de:	e17b      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f280 80ea 	bge.w	80034d0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29a      	uxth	r2, r3
 800330e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003312:	4013      	ands	r3, r2
 8003314:	853b      	strh	r3, [r7, #40]	; 0x28
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800332e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d122      	bne.n	8003392 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	3306      	adds	r3, #6
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003374:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003376:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8087 	beq.w	800348c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	88da      	ldrh	r2, [r3, #6]
 800338a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800338c:	f004 f9cc 	bl	8007728 <USB_ReadPMA>
 8003390:	e07c      	b.n	800348c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	78db      	ldrb	r3, [r3, #3]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d108      	bne.n	80033ac <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800339a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800339c:	461a      	mov	r2, r3
 800339e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f927 	bl	80035f4 <HAL_PCD_EP_DB_Receive>
 80033a6:	4603      	mov	r3, r0
 80033a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033aa:	e06f      	b.n	800348c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d021      	beq.n	800344a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	3302      	adds	r3, #2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003432:	2b00      	cmp	r3, #0
 8003434:	d02a      	beq.n	800348c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	6959      	ldr	r1, [r3, #20]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	891a      	ldrh	r2, [r3, #8]
 8003442:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003444:	f004 f970 	bl	8007728 <USB_ReadPMA>
 8003448:	e020      	b.n	800348c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	3306      	adds	r3, #6
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003472:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	6959      	ldr	r1, [r3, #20]
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	895a      	ldrh	r2, [r3, #10]
 8003486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003488:	f004 f94e 	bl	8007728 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003492:	441a      	add	r2, r3
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800349e:	441a      	add	r2, r3
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <PCD_EP_ISR_Handler+0x4c2>
 80034ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d206      	bcs.n	80034c4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f005 fec7 	bl	8009250 <HAL_PCD_DataOutStageCallback>
 80034c2:	e005      	b.n	80034d0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fcb2 	bl	8005e34 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d07e      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80034da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	843b      	strh	r3, [r7, #32]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	8c3b      	ldrh	r3, [r7, #32]
 800351a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003522:	b29b      	uxth	r3, r3
 8003524:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	78db      	ldrb	r3, [r3, #3]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d00c      	beq.n	8003548 <PCD_EP_ISR_Handler+0x554>
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	78db      	ldrb	r3, [r3, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800353a:	2b02      	cmp	r3, #2
 800353c:	d146      	bne.n	80035cc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800353e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d141      	bne.n	80035cc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003550:	b29b      	uxth	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	3302      	adds	r3, #2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003570:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	8bfb      	ldrh	r3, [r7, #30]
 8003578:	429a      	cmp	r2, r3
 800357a:	d906      	bls.n	800358a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	8bfb      	ldrh	r3, [r7, #30]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	619a      	str	r2, [r3, #24]
 8003588:	e002      	b.n	8003590 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f005 fe71 	bl	8009286 <HAL_PCD_DataInStageCallback>
 80035a4:	e018      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	8bfb      	ldrh	r3, [r7, #30]
 80035ac:	441a      	add	r2, r3
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	8bfb      	ldrh	r3, [r7, #30]
 80035b8:	441a      	add	r2, r3
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fc35 	bl	8005e34 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80035ca:	e005      	b.n	80035d8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ce:	461a      	mov	r2, r3
 80035d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f91b 	bl	800380e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f6ff ad0a 	blt.w	8002ffe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3738      	adds	r7, #56	; 0x38
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d07e      	beq.n	800370a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	3302      	adds	r3, #2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	8b7b      	ldrh	r3, [r7, #26]
 800363c:	429a      	cmp	r2, r3
 800363e:	d306      	bcc.n	800364e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	8b7b      	ldrh	r3, [r7, #26]
 8003646:	1ad2      	subs	r2, r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	619a      	str	r2, [r3, #24]
 800364c:	e002      	b.n	8003654 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d123      	bne.n	80036a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	833b      	strh	r3, [r7, #24]
 8003678:	8b3b      	ldrh	r3, [r7, #24]
 800367a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800367e:	833b      	strh	r3, [r7, #24]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	8b3b      	ldrh	r3, [r7, #24]
 8003690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01f      	beq.n	80036ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	82fb      	strh	r3, [r7, #22]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	441a      	add	r2, r3
 80036d8:	8afb      	ldrh	r3, [r7, #22]
 80036da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036ee:	8b7b      	ldrh	r3, [r7, #26]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8087 	beq.w	8003804 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6959      	ldr	r1, [r3, #20]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	891a      	ldrh	r2, [r3, #8]
 8003702:	8b7b      	ldrh	r3, [r7, #26]
 8003704:	f004 f810 	bl	8007728 <USB_ReadPMA>
 8003708:	e07c      	b.n	8003804 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	3306      	adds	r3, #6
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	8b7b      	ldrh	r3, [r7, #26]
 800373a:	429a      	cmp	r2, r3
 800373c:	d306      	bcc.n	800374c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	8b7b      	ldrh	r3, [r7, #26]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e002      	b.n	8003752 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d123      	bne.n	80037a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003774:	83fb      	strh	r3, [r7, #30]
 8003776:	8bfb      	ldrh	r3, [r7, #30]
 8003778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800377c:	83fb      	strh	r3, [r7, #30]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	8bfb      	ldrh	r3, [r7, #30]
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11f      	bne.n	80037ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	83bb      	strh	r3, [r7, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	8bbb      	ldrh	r3, [r7, #28]
 80037d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037ec:	8b7b      	ldrh	r3, [r7, #26]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6959      	ldr	r1, [r3, #20]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	895a      	ldrh	r2, [r3, #10]
 80037fe:	8b7b      	ldrh	r3, [r7, #26]
 8003800:	f003 ff92 	bl	8007728 <USB_ReadPMA>
    }
  }

  return count;
 8003804:	8b7b      	ldrh	r3, [r7, #26]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b0a2      	sub	sp, #136	; 0x88
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 81c7 	beq.w	8003bb6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003830:	b29b      	uxth	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	3302      	adds	r3, #2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003850:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800385c:	429a      	cmp	r2, r3
 800385e:	d907      	bls.n	8003870 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	619a      	str	r2, [r3, #24]
 800386e:	e002      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 80b9 	bne.w	80039f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d126      	bne.n	80038d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	4413      	add	r3, r2
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	011a      	lsls	r2, r3, #4
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	4413      	add	r3, r2
 80038aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	e01a      	b.n	800390c <HAL_PCD_EP_DB_Transmit+0xfe>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d116      	bne.n	800390c <HAL_PCD_EP_DB_Transmit+0xfe>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	4413      	add	r3, r2
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	011a      	lsls	r2, r3, #4
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	4413      	add	r3, r2
 8003900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	2200      	movs	r2, #0
 800390a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d126      	bne.n	8003968 <HAL_PCD_EP_DB_Transmit+0x15a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	4413      	add	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	011a      	lsls	r2, r3, #4
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800394c:	b29a      	uxth	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003960:	b29a      	uxth	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	e017      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d113      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003978:	b29b      	uxth	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	011a      	lsls	r2, r3, #4
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	4413      	add	r3, r2
 800398c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2200      	movs	r2, #0
 8003996:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f005 fc71 	bl	8009286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 82d4 	beq.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	827b      	strh	r3, [r7, #18]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	8a7b      	ldrh	r3, [r7, #18]
 80039dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	8013      	strh	r3, [r2, #0]
 80039f0:	e2b2      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d021      	beq.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	f040 8286 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a54:	441a      	add	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a62:	441a      	add	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6a1a      	ldr	r2, [r3, #32]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d309      	bcc.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6a1a      	ldr	r2, [r3, #32]
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	621a      	str	r2, [r3, #32]
 8003a86:	e015      	b.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a9e:	e009      	b.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d155      	bne.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	4413      	add	r3, r2
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	4413      	add	r3, r2
 8003ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d112      	bne.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x302>
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	e047      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	2b3e      	cmp	r3, #62	; 0x3e
 8003b14:	d811      	bhi.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_PCD_EP_DB_Transmit+0x31e>
 8003b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b28:	3301      	adds	r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	029b      	lsls	r3, r3, #10
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e032      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_PCD_EP_DB_Transmit+0x342>
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e01b      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d117      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	643b      	str	r3, [r7, #64]	; 0x40
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	4413      	add	r3, r2
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	891a      	ldrh	r2, [r3, #8]
 8003bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f003 fd75 	bl	800769e <USB_WritePMA>
 8003bb4:	e1d0      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3306      	adds	r3, #6
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d307      	bcc.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	e002      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 80c4 	bne.w	8003d96 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d126      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x456>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	4413      	add	r3, r2
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	011a      	lsls	r2, r3, #4
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	4413      	add	r3, r2
 8003c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	e01a      	b.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d116      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	4413      	add	r3, r2
 8003c82:	677b      	str	r3, [r7, #116]	; 0x74
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c92:	673b      	str	r3, [r7, #112]	; 0x70
 8003c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c96:	2200      	movs	r2, #0
 8003c98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d12f      	bne.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	011a      	lsls	r2, r3, #4
 8003ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e017      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d113      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1e:	4413      	add	r3, r2
 8003d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	011a      	lsls	r2, r3, #4
 8003d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f005 faa1 	bl	8009286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8104 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8013      	strh	r3, [r2, #0]
 8003d94:	e0e0      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d121      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 80b4 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003df8:	441a      	add	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e06:	441a      	add	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d309      	bcc.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	621a      	str	r2, [r3, #32]
 8003e2a:	e015      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e42:	e009      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d155      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x704>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7a:	4413      	add	r3, r2
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d112      	bne.n	8003eba <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e044      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x736>
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ebe:	d811      	bhi.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	e02f      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8003eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	657b      	str	r3, [r7, #84]	; 0x54
 8003efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	029b      	lsls	r3, r3, #10
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e018      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d114      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f28:	4413      	add	r3, r2
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	011a      	lsls	r2, r3, #4
 8003f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6959      	ldr	r1, [r3, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	895a      	ldrh	r2, [r3, #10]
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f003 fba3 	bl	800769e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f72:	823b      	strh	r3, [r7, #16]
 8003f74:	8a3b      	ldrh	r3, [r7, #16]
 8003f76:	f083 0310 	eor.w	r3, r3, #16
 8003f7a:	823b      	strh	r3, [r7, #16]
 8003f7c:	8a3b      	ldrh	r3, [r7, #16]
 8003f7e:	f083 0320 	eor.w	r3, r3, #32
 8003f82:	823b      	strh	r3, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	8a3b      	ldrh	r3, [r7, #16]
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3788      	adds	r7, #136	; 0x88
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e009      	b.n	8003ffc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	b29a      	uxth	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	80da      	strh	r2, [r3, #6]
 8004010:	e00b      	b.n	800402a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2201      	movs	r2, #1
 8004016:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	b29a      	uxth	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	b29a      	uxth	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e26c      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8087 	beq.w	8004166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004058:	4b92      	ldr	r3, [pc, #584]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b04      	cmp	r3, #4
 8004062:	d00c      	beq.n	800407e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004064:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d112      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
 8004070:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d10b      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407e:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06c      	beq.n	8004164 <HAL_RCC_OscConfig+0x12c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d168      	bne.n	8004164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e246      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x76>
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e02e      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a77      	ldr	r2, [pc, #476]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0xbc>
 80040da:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a71      	ldr	r2, [pc, #452]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6e      	ldr	r2, [pc, #440]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6a      	ldr	r2, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fd fa42 	bl	800159c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fd fa3e 	bl	800159c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1fa      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xe4>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd fa2e 	bl	800159c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fd fa2a 	bl	800159c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1e6      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x10c>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004172:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1ba      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd f9e3 	bl	800159c <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd f9df 	bl	800159c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e19b      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4927      	ldr	r1, [pc, #156]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fd f9c2 	bl	800159c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421c:	f7fd f9be 	bl	800159c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e17a      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03a      	beq.n	80042bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fd f9a2 	bl	800159c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425c:	f7fd f99e 	bl	800159c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e15a      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f000 fad8 	bl	8004830 <RCC_Delay>
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd f988 	bl	800159c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428e:	e00f      	b.n	80042b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd f984 	bl	800159c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d908      	bls.n	80042b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e140      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	42420000 	.word	0x42420000
 80042ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	4b9e      	ldr	r3, [pc, #632]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e9      	bne.n	8004290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a6 	beq.w	8004416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b97      	ldr	r3, [pc, #604]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b94      	ldr	r3, [pc, #592]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a93      	ldr	r2, [pc, #588]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]
 80042e6:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	4b8b      	ldr	r3, [pc, #556]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a8a      	ldr	r2, [pc, #552]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430e:	f7fd f945 	bl	800159c <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fd f941 	bl	800159c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0fd      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x312>
 800433c:	4b7b      	ldr	r3, [pc, #492]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4a7a      	ldr	r2, [pc, #488]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6213      	str	r3, [r2, #32]
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x334>
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4a75      	ldr	r2, [pc, #468]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6213      	str	r3, [r2, #32]
 800435e:	4b73      	ldr	r3, [pc, #460]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a72      	ldr	r2, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x356>
 8004374:	4b6d      	ldr	r3, [pc, #436]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4a6c      	ldr	r2, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6213      	str	r3, [r2, #32]
 8004380:	4b6a      	ldr	r3, [pc, #424]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a69      	ldr	r2, [pc, #420]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800438e:	4b67      	ldr	r3, [pc, #412]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a66      	ldr	r2, [pc, #408]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	4b64      	ldr	r3, [pc, #400]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a63      	ldr	r2, [pc, #396]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fd f8f5 	bl	800159c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd f8f1 	bl	800159c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0ab      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b57      	ldr	r3, [pc, #348]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x37e>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fd f8df 	bl	800159c <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd f8db 	bl	800159c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e095      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b48      	ldr	r3, [pc, #288]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4a47      	ldr	r2, [pc, #284]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8081 	beq.w	8004522 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d061      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d146      	bne.n	80044c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fd f8af 	bl	800159c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd f8ab 	bl	800159c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e067      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004454:	4b35      	ldr	r3, [pc, #212]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d108      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	492d      	ldr	r1, [pc, #180]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a19      	ldr	r1, [r3, #32]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	430b      	orrs	r3, r1
 800448e:	4927      	ldr	r1, [pc, #156]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b27      	ldr	r3, [pc, #156]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fd f87f 	bl	800159c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd f87b 	bl	800159c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e037      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x46a>
 80044c0:	e02f      	b.n	8004522 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fd f868 	bl	800159c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fd f864 	bl	800159c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e020      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x498>
 80044ee:	e018      	b.n	8004522 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e013      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	429a      	cmp	r2, r3
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	40007000 	.word	0x40007000
 8004534:	42420060 	.word	0x42420060

08004538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0d0      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d910      	bls.n	800457c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0207 	bic.w	r2, r3, #7
 8004562:	4965      	ldr	r1, [pc, #404]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800459e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d040      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e073      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06b      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fc ffb8 	bl	800159c <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fc ffb4 	bl	800159c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e053      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d210      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4922      	ldr	r1, [pc, #136]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490a      	ldr	r1, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1cc>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc ff16 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	0800e030 	.word	0x0800e030
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004

0800470c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b490      	push	{r4, r7}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004712:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004714:	1d3c      	adds	r4, r7, #4
 8004716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800471c:	f240 2301 	movw	r3, #513	; 0x201
 8004720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x40>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x46>
 800474a:	e02d      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474e:	623b      	str	r3, [r7, #32]
      break;
 8004750:	e02d      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800475e:	4413      	add	r3, r2
 8004760:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004764:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c5b      	lsrs	r3, r3, #17
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800477e:	4413      	add	r3, r2
 8004780:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004784:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800478a:	fb02 f203 	mul.w	r2, r2, r3
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e004      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	623b      	str	r3, [r7, #32]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047aa:	623b      	str	r3, [r7, #32]
      break;
 80047ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc90      	pop	{r4, r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	0800dfe0 	.word	0x0800dfe0
 80047c0:	40021000 	.word	0x40021000
 80047c4:	007a1200 	.word	0x007a1200
 80047c8:	003d0900 	.word	0x003d0900

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b02      	ldr	r3, [pc, #8]	; (80047dc <HAL_RCC_GetHCLKFreq+0x10>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	20000000 	.word	0x20000000

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e4:	f7ff fff2 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000
 8004804:	0800e040 	.word	0x0800e040

08004808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800480c:	f7ff ffde 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	0adb      	lsrs	r3, r3, #11
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_GetPCLK2Freq+0x24>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	0800e040 	.word	0x0800e040

08004830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <RCC_Delay+0x34>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <RCC_Delay+0x38>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	0a5b      	lsrs	r3, r3, #9
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800484c:	bf00      	nop
  }
  while (Delay --);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	60fa      	str	r2, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f9      	bne.n	800484c <RCC_Delay+0x1c>
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	20000000 	.word	0x20000000
 8004868:	10624dd3 	.word	0x10624dd3

0800486c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d07d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10d      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	4a4b      	ldr	r2, [pc, #300]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	61d3      	str	r3, [r2, #28]
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d118      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c0:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048cc:	f7fc fe66 	bl	800159c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	e008      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fc fe62 	bl	800159c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	; 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e06d      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02e      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	429a      	cmp	r2, r3
 800490e:	d027      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800491a:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004926:	4a29      	ldr	r2, [pc, #164]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d014      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fc fe31 	bl	800159c <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	e00a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fc fe2d 	bl	800159c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d901      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e036      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ee      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4917      	ldr	r1, [pc, #92]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	4313      	orrs	r3, r2
 8004970:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4a13      	ldr	r2, [pc, #76]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	490b      	ldr	r1, [pc, #44]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40007000 	.word	0x40007000
 80049d4:	42420440 	.word	0x42420440

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e041      	b.n	8004a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fbe2 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 f93c 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e032      	b.n	8004af6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_TIM_Base_Start+0x88>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x48>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x48>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <HAL_TIM_Base_Start+0x8c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x48>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <HAL_TIM_Base_Start+0x90>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d111      	bne.n	8004ae4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800

08004b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_ConfigClockSource+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0b3      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x180>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5c:	d03e      	beq.n	8004bdc <HAL_TIM_ConfigClockSource+0xd0>
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b62:	f200 8087 	bhi.w	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	f000 8085 	beq.w	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	d87f      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b74:	2b70      	cmp	r3, #112	; 0x70
 8004b76:	d01a      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0xa2>
 8004b78:	2b70      	cmp	r3, #112	; 0x70
 8004b7a:	d87b      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b7c:	2b60      	cmp	r3, #96	; 0x60
 8004b7e:	d050      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x116>
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d877      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b84:	2b50      	cmp	r3, #80	; 0x50
 8004b86:	d03c      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xf6>
 8004b88:	2b50      	cmp	r3, #80	; 0x50
 8004b8a:	d873      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d058      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x136>
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d86f      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b94:	2b30      	cmp	r3, #48	; 0x30
 8004b96:	d064      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x156>
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d86b      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d060      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x156>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d867      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x156>
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d05a      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bac:	e062      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6899      	ldr	r1, [r3, #8]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f000 f942 	bl	8004e46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	609a      	str	r2, [r3, #8]
      break;
 8004bda:	e04e      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6899      	ldr	r1, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f000 f92b 	bl	8004e46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfe:	609a      	str	r2, [r3, #8]
      break;
 8004c00:	e03b      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 f8a2 	bl	8004d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2150      	movs	r1, #80	; 0x50
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f8f9 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004c20:	e02b      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 f8c0 	bl	8004db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2160      	movs	r1, #96	; 0x60
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f8e9 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004c40:	e01b      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f000 f882 	bl	8004d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2140      	movs	r1, #64	; 0x40
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f8d9 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004c60:	e00b      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 f8d0 	bl	8004e12 <TIM_ITRx_SetConfig>
        break;
 8004c72:	e002      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <TIM_Base_SetConfig+0xb8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_Base_SetConfig+0x30>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0x30>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0xbc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0x30>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <TIM_Base_SetConfig+0xc0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <TIM_Base_SetConfig+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x62>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x62>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_Base_SetConfig+0xbc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <TIM_Base_SetConfig+0xc0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <TIM_Base_SetConfig+0xb8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	615a      	str	r2, [r3, #20]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800

08004d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 030a 	bic.w	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f023 0210 	bic.w	r2, r3, #16
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	031b      	lsls	r3, r3, #12
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f043 0307 	orr.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	021a      	lsls	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e046      	b.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d009      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d10c      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800

08004f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e03f      	b.n	8004fd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc f94c 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f905 	bl	8005194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08a      	sub	sp, #40	; 0x28
 8004fde:	af02      	add	r7, sp, #8
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d17c      	bne.n	80050f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Transmit+0x2c>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e075      	b.n	80050f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Transmit+0x3e>
 8005014:	2302      	movs	r3, #2
 8005016:	e06e      	b.n	80050f6 <HAL_UART_Transmit+0x11c>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2221      	movs	r2, #33	; 0x21
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502e:	f7fc fab5 	bl	800159c <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d108      	bne.n	800505c <HAL_UART_Transmit+0x82>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e003      	b.n	8005064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800506c:	e02a      	b.n	80050c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f840 	bl	80050fe <UART_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e036      	b.n	80050f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800509c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	3302      	adds	r3, #2
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e007      	b.n	80050b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1cf      	bne.n	800506e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2140      	movs	r1, #64	; 0x40
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f810 	bl	80050fe <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e006      	b.n	80050f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510e:	e02c      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d028      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x30>
 800511e:	f7fc fa3d 	bl	800159c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	429a      	cmp	r2, r3
 800512c:	d21d      	bcs.n	800516a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800513c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e00f      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4013      	ands	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	bf0c      	ite	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	2300      	movne	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	429a      	cmp	r2, r3
 8005186:	d0c3      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051ce:	f023 030c 	bic.w	r3, r3, #12
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	430b      	orrs	r3, r1
 80051da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <UART_SetConfig+0x114>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7ff fb04 	bl	8004808 <HAL_RCC_GetPCLK2Freq>
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	e002      	b.n	800520a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7ff faec 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8005208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009a      	lsls	r2, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	4a22      	ldr	r2, [pc, #136]	; (80052ac <UART_SetConfig+0x118>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	0119      	lsls	r1, r3, #4
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <UART_SetConfig+0x118>)
 8005242:	fba3 0302 	umull	r0, r3, r3, r2
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2064      	movs	r0, #100	; 0x64
 800524a:	fb00 f303 	mul.w	r3, r0, r3
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	3332      	adds	r3, #50	; 0x32
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <UART_SetConfig+0x118>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005260:	4419      	add	r1, r3
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009a      	lsls	r2, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	fbb2 f2f3 	udiv	r2, r2, r3
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <UART_SetConfig+0x118>)
 800527a:	fba3 0302 	umull	r0, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2064      	movs	r0, #100	; 0x64
 8005282:	fb00 f303 	mul.w	r3, r0, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	3332      	adds	r3, #50	; 0x32
 800528c:	4a07      	ldr	r2, [pc, #28]	; (80052ac <UART_SetConfig+0x118>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	440a      	add	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40013800 	.word	0x40013800
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052b0:	b084      	sub	sp, #16
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	f107 0014 	add.w	r0, r7, #20
 80052be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	b004      	add	sp, #16
 80052ce:	4770      	bx	lr

080052d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005304:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005308:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	b29b      	uxth	r3, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	b29b      	uxth	r3, r3
 800531a:	4013      	ands	r3, r2
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005348:	b084      	sub	sp, #16
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	f107 0014 	add.w	r0, r7, #20
 8005356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	b004      	add	sp, #16
 8005386:	4770      	bx	lr

08005388 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005388:	b480      	push	{r7}
 800538a:	b09b      	sub	sp, #108	; 0x6c
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	78db      	ldrb	r3, [r3, #3]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d81f      	bhi.n	80053fa <USB_ActivateEndpoint+0x72>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <USB_ActivateEndpoint+0x38>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	08005403 	.word	0x08005403
 80053cc:	080053df 	.word	0x080053df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053dc:	e012      	b.n	8005404 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053ea:	e00b      	b.n	8005404 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053f8:	e004      	b.n	8005404 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005400:	e000      	b.n	8005404 <USB_ActivateEndpoint+0x7c>
      break;
 8005402:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	b29a      	uxth	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	4313      	orrs	r3, r2
 8005446:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8149 	bne.w	8005708 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8084 	beq.w	8005588 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	011a      	lsls	r2, r3, #4
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	88db      	ldrh	r3, [r3, #6]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	81fb      	strh	r3, [r7, #14]
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <USB_ActivateEndpoint+0x17c>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	81bb      	strh	r3, [r7, #12]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	89bb      	ldrh	r3, [r7, #12]
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d020      	beq.n	800554e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	813b      	strh	r3, [r7, #8]
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	f083 0320 	eor.w	r3, r3, #32
 800552a:	813b      	strh	r3, [r7, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	893b      	ldrh	r3, [r7, #8]
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
 800554c:	e27f      	b.n	8005a4e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005564:	817b      	strh	r3, [r7, #10]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	897b      	ldrh	r3, [r7, #10]
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
 8005586:	e262      	b.n	8005a4e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	4413      	add	r3, r2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	88db      	ldrh	r3, [r3, #6]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	4413      	add	r3, r2
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	011a      	lsls	r2, r3, #4
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	4413      	add	r3, r2
 80055da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d112      	bne.n	800560e <USB_ActivateEndpoint+0x286>
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005606:	b29a      	uxth	r2, r3
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	e02f      	b.n	800566e <USB_ActivateEndpoint+0x2e6>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b3e      	cmp	r3, #62	; 0x3e
 8005614:	d813      	bhi.n	800563e <USB_ActivateEndpoint+0x2b6>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <USB_ActivateEndpoint+0x2a8>
 800562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562c:	3301      	adds	r3, #1
 800562e:	663b      	str	r3, [r7, #96]	; 0x60
 8005630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005632:	b29b      	uxth	r3, r3
 8005634:	029b      	lsls	r3, r3, #10
 8005636:	b29a      	uxth	r2, r3
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e017      	b.n	800566e <USB_ActivateEndpoint+0x2e6>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	663b      	str	r3, [r7, #96]	; 0x60
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <USB_ActivateEndpoint+0x2d0>
 8005652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005654:	3b01      	subs	r3, #1
 8005656:	663b      	str	r3, [r7, #96]	; 0x60
 8005658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	83fb      	strh	r3, [r7, #30]
 800567c:	8bfb      	ldrh	r3, [r7, #30]
 800567e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <USB_ActivateEndpoint+0x336>
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	83bb      	strh	r3, [r7, #28]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8bbb      	ldrh	r3, [r7, #28]
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	837b      	strh	r3, [r7, #26]
 80056d6:	8b7b      	ldrh	r3, [r7, #26]
 80056d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056dc:	837b      	strh	r3, [r7, #26]
 80056de:	8b7b      	ldrh	r3, [r7, #26]
 80056e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056e4:	837b      	strh	r3, [r7, #26]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8b7b      	ldrh	r3, [r7, #26]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e1a2      	b.n	8005a4e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	65bb      	str	r3, [r7, #88]	; 0x58
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005754:	4413      	add	r3, r2
 8005756:	65bb      	str	r3, [r7, #88]	; 0x58
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005760:	4413      	add	r3, r2
 8005762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005766:	657b      	str	r3, [r7, #84]	; 0x54
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	891b      	ldrh	r3, [r3, #8]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	653b      	str	r3, [r7, #80]	; 0x50
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005782:	b29b      	uxth	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005788:	4413      	add	r3, r2
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	4413      	add	r3, r2
 8005796:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800579a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	895b      	ldrh	r3, [r3, #10]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f040 8091 	bne.w	80058d8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80057c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01b      	beq.n	8005806 <USB_ActivateEndpoint+0x47e>
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	873b      	strh	r3, [r7, #56]	; 0x38
 8005814:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01b      	beq.n	8005856 <USB_ActivateEndpoint+0x4ce>
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	441a      	add	r2, r3
 8005840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005852:	b29b      	uxth	r3, r3
 8005854:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800586e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005874:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005876:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800587c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b4:	867b      	strh	r3, [r7, #50]	; 0x32
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]
 80058d6:	e0ba      	b.n	8005a4e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01d      	beq.n	8005930 <USB_ActivateEndpoint+0x5a8>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800591c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	b29b      	uxth	r3, r3
 800592e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005940:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01d      	beq.n	8005988 <USB_ActivateEndpoint+0x600>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d024      	beq.n	80059da <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059ae:	f083 0320 	eor.w	r3, r3, #32
 80059b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	8013      	strh	r3, [r2, #0]
 80059d8:	e01d      	b.n	8005a16 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005a4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	376c      	adds	r7, #108	; 0x6c
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b08d      	sub	sp, #52	; 0x34
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	7b1b      	ldrb	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 808e 	bne.w	8005b8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d044      	beq.n	8005b02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	81bb      	strh	r3, [r7, #12]
 8005a86:	89bb      	ldrh	r3, [r7, #12]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01b      	beq.n	8005ac8 <USB_DeactivateEndpoint+0x6c>
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	817b      	strh	r3, [r7, #10]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ade:	813b      	strh	r3, [r7, #8]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	893b      	ldrh	r3, [r7, #8]
 8005aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	8013      	strh	r3, [r2, #0]
 8005b00:	e192      	b.n	8005e28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	827b      	strh	r3, [r7, #18]
 8005b10:	8a7b      	ldrh	r3, [r7, #18]
 8005b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01b      	beq.n	8005b52 <USB_DeactivateEndpoint+0xf6>
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b30:	823b      	strh	r3, [r7, #16]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	441a      	add	r2, r3
 8005b3c:	8a3b      	ldrh	r3, [r7, #16]
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	81fb      	strh	r3, [r7, #14]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]
 8005b8a:	e14d      	b.n	8005e28 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 80a5 	bne.w	8005ce0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	843b      	strh	r3, [r7, #32]
 8005ba4:	8c3b      	ldrh	r3, [r7, #32]
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01b      	beq.n	8005be6 <USB_DeactivateEndpoint+0x18a>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	83fb      	strh	r3, [r7, #30]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	8bfb      	ldrh	r3, [r7, #30]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	83bb      	strh	r3, [r7, #28]
 8005bf4:	8bbb      	ldrh	r3, [r7, #28]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01b      	beq.n	8005c36 <USB_DeactivateEndpoint+0x1da>
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	837b      	strh	r3, [r7, #26]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	8b7b      	ldrh	r3, [r7, #26]
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4c:	833b      	strh	r3, [r7, #24]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8b3b      	ldrh	r3, [r7, #24]
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	82fb      	strh	r3, [r7, #22]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8afb      	ldrh	r3, [r7, #22]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	82bb      	strh	r3, [r7, #20]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8abb      	ldrh	r3, [r7, #20]
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e0a3      	b.n	8005e28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <USB_DeactivateEndpoint+0x2d4>
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_DeactivateEndpoint+0x324>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	441a      	add	r2, r3
 8005dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3734      	adds	r7, #52	; 0x34
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b0cc      	sub	sp, #304	; 0x130
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	6018      	str	r0, [r3, #0]
 8005e3e:	463b      	mov	r3, r7
 8005e40:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 872e 	bne.w	8006caa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d905      	bls.n	8005e6a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005e68:	e004      	b.n	8005e74 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	7b1b      	ldrb	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d134      	bne.n	8005ee8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6959      	ldr	r1, [r3, #20]
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	88da      	ldrh	r2, [r3, #6]
 8005e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	1d38      	adds	r0, r7, #4
 8005e92:	6800      	ldr	r0, [r0, #0]
 8005e94:	f001 fc03 	bl	800769e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e98:	f107 0310 	add.w	r3, r7, #16
 8005e9c:	1d3a      	adds	r2, r7, #4
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	4619      	mov	r1, r3
 8005eae:	f107 0310 	add.w	r3, r7, #16
 8005eb2:	f107 0210 	add.w	r2, r7, #16
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	440a      	add	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	011a      	lsls	r2, r3, #4
 8005ec4:	f107 0310 	add.w	r3, r7, #16
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f107 030c 	add.w	r3, r7, #12
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	f000 beac 	b.w	8006c40 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f040 838c 	bne.w	800660c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f240 8330 	bls.w	8006566 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 819e 	beq.w	80062b4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f7c:	1d3a      	adds	r2, r7, #4
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d17a      	bne.n	8006082 <USB_EPStartXfer+0x24e>
 8005f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f90:	1d3a      	adds	r2, r7, #4
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	440a      	add	r2, r1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	011a      	lsls	r2, r3, #4
 8005fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d11a      	bne.n	8006008 <USB_EPStartXfer+0x1d4>
 8005fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e062      	b.n	80060ce <USB_EPStartXfer+0x29a>
 8006008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600c:	2b3e      	cmp	r3, #62	; 0x3e
 800600e:	d819      	bhi.n	8006044 <USB_EPStartXfer+0x210>
 8006010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <USB_EPStartXfer+0x1fc>
 8006026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800602a:	3301      	adds	r3, #1
 800602c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006030:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006034:	b29b      	uxth	r3, r3
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	b29a      	uxth	r2, r3
 800603a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e044      	b.n	80060ce <USB_EPStartXfer+0x29a>
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <USB_EPStartXfer+0x230>
 800605a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800605e:	3b01      	subs	r3, #1
 8006060:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006064:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e025      	b.n	80060ce <USB_EPStartXfer+0x29a>
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d120      	bne.n	80060ce <USB_EPStartXfer+0x29a>
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006094:	b29b      	uxth	r3, r3
 8006096:	4619      	mov	r1, r3
 8006098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800609c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	440a      	add	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	011a      	lsls	r2, r3, #4
 80060ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	895b      	ldrh	r3, [r3, #10]
 80060d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6959      	ldr	r1, [r3, #20]
 80060de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060e8:	1d38      	adds	r0, r7, #4
 80060ea:	6800      	ldr	r0, [r0, #0]
 80060ec:	f001 fad7 	bl	800769e <USB_WritePMA>
            ep->xfer_buff += len;
 80060f0:	463b      	mov	r3, r7
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	441a      	add	r2, r3
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6a1a      	ldr	r2, [r3, #32]
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d909      	bls.n	8006126 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611c:	1ad2      	subs	r2, r2, r3
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	621a      	str	r2, [r3, #32]
 8006124:	e008      	b.n	8006138 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006130:	463b      	mov	r3, r7
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2200      	movs	r2, #0
 8006136:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d17a      	bne.n	8006238 <USB_EPStartXfer+0x404>
 8006142:	f107 0318 	add.w	r3, r7, #24
 8006146:	1d3a      	adds	r2, r7, #4
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	4619      	mov	r1, r3
 8006158:	f107 0318 	add.w	r3, r7, #24
 800615c:	f107 0218 	add.w	r2, r7, #24
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	440a      	add	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	011a      	lsls	r2, r3, #4
 800616e:	f107 0318 	add.w	r3, r7, #24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4413      	add	r3, r2
 8006176:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800617a:	f107 0314 	add.w	r3, r7, #20
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11a      	bne.n	80061be <USB_EPStartXfer+0x38a>
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006196:	b29a      	uxth	r2, r3
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	f107 0314 	add.w	r3, r7, #20
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f107 0314 	add.w	r3, r7, #20
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e067      	b.n	800628e <USB_EPStartXfer+0x45a>
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d819      	bhi.n	80061fa <USB_EPStartXfer+0x3c6>
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0x3b2>
 80061dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80061e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e049      	b.n	800628e <USB_EPStartXfer+0x45a>
 80061fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <USB_EPStartXfer+0x3e6>
 8006210:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006214:	3b01      	subs	r3, #1
 8006216:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800621a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800621e:	b29b      	uxth	r3, r3
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622c:	b29a      	uxth	r2, r3
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e02a      	b.n	800628e <USB_EPStartXfer+0x45a>
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d125      	bne.n	800628e <USB_EPStartXfer+0x45a>
 8006242:	f107 0320 	add.w	r3, r7, #32
 8006246:	1d3a      	adds	r2, r7, #4
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006254:	b29b      	uxth	r3, r3
 8006256:	4619      	mov	r1, r3
 8006258:	f107 0320 	add.w	r3, r7, #32
 800625c:	f107 0220 	add.w	r2, r7, #32
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	440a      	add	r2, r1
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	f107 0320 	add.w	r3, r7, #32
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4413      	add	r3, r2
 8006276:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800627a:	f107 031c 	add.w	r3, r7, #28
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	b29a      	uxth	r2, r3
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	891b      	ldrh	r3, [r3, #8]
 8006294:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6959      	ldr	r1, [r3, #20]
 800629e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062a8:	1d38      	adds	r0, r7, #4
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	f001 f9f7 	bl	800769e <USB_WritePMA>
 80062b0:	f000 bcc6 	b.w	8006c40 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d164      	bne.n	8006388 <USB_EPStartXfer+0x554>
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c4:	1d3b      	adds	r3, r7, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d2:	4413      	add	r3, r2
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	011a      	lsls	r2, r3, #4
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062e6:	647b      	str	r3, [r7, #68]	; 0x44
 80062e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d112      	bne.n	8006316 <USB_EPStartXfer+0x4e2>
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630e:	b29a      	uxth	r2, r3
 8006310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e057      	b.n	80063c6 <USB_EPStartXfer+0x592>
 8006316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631a:	2b3e      	cmp	r3, #62	; 0x3e
 800631c:	d817      	bhi.n	800634e <USB_EPStartXfer+0x51a>
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <USB_EPStartXfer+0x50a>
 8006334:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006338:	3301      	adds	r3, #1
 800633a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800633e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006342:	b29b      	uxth	r3, r3
 8006344:	029b      	lsls	r3, r3, #10
 8006346:	b29a      	uxth	r2, r3
 8006348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e03b      	b.n	80063c6 <USB_EPStartXfer+0x592>
 800634e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USB_EPStartXfer+0x53a>
 8006364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006368:	3b01      	subs	r3, #1
 800636a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800636e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006380:	b29a      	uxth	r2, r3
 8006382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	e01e      	b.n	80063c6 <USB_EPStartXfer+0x592>
 8006388:	463b      	mov	r3, r7
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d119      	bne.n	80063c6 <USB_EPStartXfer+0x592>
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	653b      	str	r3, [r7, #80]	; 0x50
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a6:	4413      	add	r3, r2
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	891b      	ldrh	r3, [r3, #8]
 80063cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6959      	ldr	r1, [r3, #20]
 80063d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063e0:	1d38      	adds	r0, r7, #4
 80063e2:	6800      	ldr	r0, [r0, #0]
 80063e4:	f001 f95b 	bl	800769e <USB_WritePMA>
            ep->xfer_buff += len;
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	441a      	add	r2, r3
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d909      	bls.n	800641e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	621a      	str	r2, [r3, #32]
 800641c:	e008      	b.n	8006430 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d164      	bne.n	800650a <USB_EPStartXfer+0x6d6>
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	4413      	add	r3, r2
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	011a      	lsls	r2, r3, #4
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	4413      	add	r3, r2
 8006464:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d112      	bne.n	8006498 <USB_EPStartXfer+0x664>
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800647c:	b29a      	uxth	r2, r3
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006490:	b29a      	uxth	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e054      	b.n	8006542 <USB_EPStartXfer+0x70e>
 8006498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649c:	2b3e      	cmp	r3, #62	; 0x3e
 800649e:	d817      	bhi.n	80064d0 <USB_EPStartXfer+0x69c>
 80064a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <USB_EPStartXfer+0x68c>
 80064b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064ba:	3301      	adds	r3, #1
 80064bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	029b      	lsls	r3, r3, #10
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e038      	b.n	8006542 <USB_EPStartXfer+0x70e>
 80064d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USB_EPStartXfer+0x6bc>
 80064e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006502:	b29a      	uxth	r2, r3
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e01b      	b.n	8006542 <USB_EPStartXfer+0x70e>
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d116      	bne.n	8006542 <USB_EPStartXfer+0x70e>
 8006514:	1d3b      	adds	r3, r7, #4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651c:	b29b      	uxth	r3, r3
 800651e:	461a      	mov	r2, r3
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	4413      	add	r3, r2
 8006524:	643b      	str	r3, [r7, #64]	; 0x40
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	011a      	lsls	r2, r3, #4
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	4413      	add	r3, r2
 8006532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653c:	b29a      	uxth	r2, r3
 800653e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	895b      	ldrh	r3, [r3, #10]
 8006548:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6959      	ldr	r1, [r3, #20]
 8006552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006556:	b29b      	uxth	r3, r3
 8006558:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800655c:	1d38      	adds	r0, r7, #4
 800655e:	6800      	ldr	r0, [r0, #0]
 8006560:	f001 f89d 	bl	800769e <USB_WritePMA>
 8006564:	e36c      	b.n	8006c40 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006566:	463b      	mov	r3, r7
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ba:	1d3b      	adds	r3, r7, #4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c8:	4413      	add	r3, r2
 80065ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	011a      	lsls	r2, r3, #4
 80065d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	891b      	ldrh	r3, [r3, #8]
 80065ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6959      	ldr	r1, [r3, #20]
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006602:	1d38      	adds	r0, r7, #4
 8006604:	6800      	ldr	r0, [r0, #0]
 8006606:	f001 f84a 	bl	800769e <USB_WritePMA>
 800660a:	e319      	b.n	8006c40 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8162 	beq.w	8006942 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d164      	bne.n	800675a <USB_EPStartXfer+0x926>
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a4:	4413      	add	r3, r2
 80066a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	011a      	lsls	r2, r3, #4
 80066b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b8:	677b      	str	r3, [r7, #116]	; 0x74
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d112      	bne.n	80066e8 <USB_EPStartXfer+0x8b4>
 80066c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	e057      	b.n	8006798 <USB_EPStartXfer+0x964>
 80066e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ec:	2b3e      	cmp	r3, #62	; 0x3e
 80066ee:	d817      	bhi.n	8006720 <USB_EPStartXfer+0x8ec>
 80066f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <USB_EPStartXfer+0x8dc>
 8006706:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800670a:	3301      	adds	r3, #1
 800670c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006710:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006714:	b29b      	uxth	r3, r3
 8006716:	029b      	lsls	r3, r3, #10
 8006718:	b29a      	uxth	r2, r3
 800671a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	e03b      	b.n	8006798 <USB_EPStartXfer+0x964>
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <USB_EPStartXfer+0x90c>
 8006736:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800673a:	3b01      	subs	r3, #1
 800673c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006740:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006744:	b29b      	uxth	r3, r3
 8006746:	029b      	lsls	r3, r3, #10
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006752:	b29a      	uxth	r2, r3
 8006754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e01e      	b.n	8006798 <USB_EPStartXfer+0x964>
 800675a:	463b      	mov	r3, r7
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d119      	bne.n	8006798 <USB_EPStartXfer+0x964>
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676c:	b29b      	uxth	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800677a:	463b      	mov	r3, r7
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006786:	4413      	add	r3, r2
 8006788:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800678c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800678e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006792:	b29a      	uxth	r2, r3
 8006794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006796:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006798:	463b      	mov	r3, r7
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a2:	463b      	mov	r3, r7
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6959      	ldr	r1, [r3, #20]
 80067a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067b2:	1d38      	adds	r0, r7, #4
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f000 ff72 	bl	800769e <USB_WritePMA>
          ep->xfer_buff += len;
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	441a      	add	r2, r3
 80067c6:	463b      	mov	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	463b      	mov	r3, r7
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d909      	bls.n	80067f0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e6:	1ad2      	subs	r2, r2, r3
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	621a      	str	r2, [r3, #32]
 80067ee:	e008      	b.n	8006802 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 821a 	beq.w	8006c40 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d164      	bne.n	80068e0 <USB_EPStartXfer+0xaac>
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	66bb      	str	r3, [r7, #104]	; 0x68
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800682a:	4413      	add	r3, r2
 800682c:	66bb      	str	r3, [r7, #104]	; 0x68
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	011a      	lsls	r2, r3, #4
 8006836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006838:	4413      	add	r3, r2
 800683a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800683e:	667b      	str	r3, [r7, #100]	; 0x64
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d112      	bne.n	800686e <USB_EPStartXfer+0xa3a>
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006852:	b29a      	uxth	r2, r3
 8006854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006866:	b29a      	uxth	r2, r3
 8006868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e057      	b.n	800691e <USB_EPStartXfer+0xaea>
 800686e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006872:	2b3e      	cmp	r3, #62	; 0x3e
 8006874:	d817      	bhi.n	80068a6 <USB_EPStartXfer+0xa72>
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0xa62>
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e03b      	b.n	800691e <USB_EPStartXfer+0xaea>
 80068a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <USB_EPStartXfer+0xa92>
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c0:	3b01      	subs	r3, #1
 80068c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	029b      	lsls	r3, r3, #10
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d8:	b29a      	uxth	r2, r3
 80068da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e01e      	b.n	800691e <USB_EPStartXfer+0xaea>
 80068e0:	463b      	mov	r3, r7
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d119      	bne.n	800691e <USB_EPStartXfer+0xaea>
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	673b      	str	r3, [r7, #112]	; 0x70
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068fe:	4413      	add	r3, r2
 8006900:	673b      	str	r3, [r7, #112]	; 0x70
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800690c:	4413      	add	r3, r2
 800690e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	b29a      	uxth	r2, r3
 800691a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	891b      	ldrh	r3, [r3, #8]
 8006924:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6959      	ldr	r1, [r3, #20]
 800692e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006932:	b29b      	uxth	r3, r3
 8006934:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006938:	1d38      	adds	r0, r7, #4
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	f000 feaf 	bl	800769e <USB_WritePMA>
 8006940:	e17e      	b.n	8006c40 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006942:	463b      	mov	r3, r7
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d16f      	bne.n	8006a2c <USB_EPStartXfer+0xbf8>
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006954:	1d3b      	adds	r3, r7, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695c:	b29b      	uxth	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006964:	4413      	add	r3, r2
 8006966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	011a      	lsls	r2, r3, #4
 8006972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006976:	4413      	add	r3, r2
 8006978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800697c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d116      	bne.n	80069b6 <USB_EPStartXfer+0xb82>
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e05f      	b.n	8006a76 <USB_EPStartXfer+0xc42>
 80069b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ba:	2b3e      	cmp	r3, #62	; 0x3e
 80069bc:	d818      	bhi.n	80069f0 <USB_EPStartXfer+0xbbc>
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80069c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <USB_EPStartXfer+0xbaa>
 80069d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069d8:	3301      	adds	r3, #1
 80069da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80069de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e042      	b.n	8006a76 <USB_EPStartXfer+0xc42>
 80069f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80069fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <USB_EPStartXfer+0xbdc>
 8006a06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	029b      	lsls	r3, r3, #10
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e024      	b.n	8006a76 <USB_EPStartXfer+0xc42>
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d11f      	bne.n	8006a76 <USB_EPStartXfer+0xc42>
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a3e:	1d3b      	adds	r3, r7, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	011a      	lsls	r2, r3, #4
 8006a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	891b      	ldrh	r3, [r3, #8]
 8006a7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6959      	ldr	r1, [r3, #20]
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a90:	1d38      	adds	r0, r7, #4
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	f000 fe03 	bl	800769e <USB_WritePMA>
          ep->xfer_buff += len;
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa2:	441a      	add	r2, r3
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006aaa:	463b      	mov	r3, r7
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d909      	bls.n	8006ace <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	1ad2      	subs	r2, r2, r3
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	621a      	str	r2, [r3, #32]
 8006acc:	e008      	b.n	8006ae0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80ab 	beq.w	8006c40 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d16f      	bne.n	8006bdc <USB_EPStartXfer+0xda8>
 8006afc:	1d3b      	adds	r3, r7, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b14:	4413      	add	r3, r2
 8006b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	011a      	lsls	r2, r3, #4
 8006b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b26:	4413      	add	r3, r2
 8006b28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d116      	bne.n	8006b66 <USB_EPStartXfer+0xd32>
 8006b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e05b      	b.n	8006c1e <USB_EPStartXfer+0xdea>
 8006b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6c:	d818      	bhi.n	8006ba0 <USB_EPStartXfer+0xd6c>
 8006b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <USB_EPStartXfer+0xd5a>
 8006b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e03e      	b.n	8006c1e <USB_EPStartXfer+0xdea>
 8006ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <USB_EPStartXfer+0xd8c>
 8006bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e020      	b.n	8006c1e <USB_EPStartXfer+0xdea>
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d11b      	bne.n	8006c1e <USB_EPStartXfer+0xdea>
 8006be6:	1d3b      	adds	r3, r7, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	895b      	ldrh	r3, [r3, #10]
 8006c24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c28:	463b      	mov	r3, r7
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6959      	ldr	r1, [r3, #20]
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c38:	1d38      	adds	r0, r7, #4
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f000 fd2f 	bl	800769e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c40:	1d3b      	adds	r3, r7, #4
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f107 020a 	add.w	r2, r7, #10
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5e:	8013      	strh	r3, [r2, #0]
 8006c60:	f107 030a 	add.w	r3, r7, #10
 8006c64:	f107 020a 	add.w	r2, r7, #10
 8006c68:	8812      	ldrh	r2, [r2, #0]
 8006c6a:	f082 0210 	eor.w	r2, r2, #16
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f107 030a 	add.w	r3, r7, #10
 8006c74:	f107 020a 	add.w	r2, r7, #10
 8006c78:	8812      	ldrh	r2, [r2, #0]
 8006c7a:	f082 0220 	eor.w	r2, r2, #32
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	f107 030a 	add.w	r3, r7, #10
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
 8006ca8:	e3b5      	b.n	8007416 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006caa:	463b      	mov	r3, r7
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	7b1b      	ldrb	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8090 	bne.w	8006dd6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90e      	bls.n	8006ce4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	619a      	str	r2, [r3, #24]
 8006ce2:	e008      	b.n	8006cf6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d0e:	4413      	add	r3, r2
 8006d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	011a      	lsls	r2, r3, #4
 8006d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d116      	bne.n	8006d60 <USB_EPStartXfer+0xf2c>
 8006d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e32c      	b.n	80073ba <USB_EPStartXfer+0x1586>
 8006d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d64:	2b3e      	cmp	r3, #62	; 0x3e
 8006d66:	d818      	bhi.n	8006d9a <USB_EPStartXfer+0xf66>
 8006d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6c:	085b      	lsrs	r3, r3, #1
 8006d6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <USB_EPStartXfer+0xf54>
 8006d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d82:	3301      	adds	r3, #1
 8006d84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	029b      	lsls	r3, r3, #10
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e30f      	b.n	80073ba <USB_EPStartXfer+0x1586>
 8006d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <USB_EPStartXfer+0xf86>
 8006db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	029b      	lsls	r3, r3, #10
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e2f1      	b.n	80073ba <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	f040 818f 	bne.w	8007100 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d175      	bne.n	8006ed8 <USB_EPStartXfer+0x10a4>
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e04:	4413      	add	r3, r2
 8006e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e16:	4413      	add	r3, r2
 8006e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d116      	bne.n	8006e58 <USB_EPStartXfer+0x1024>
 8006e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e065      	b.n	8006f24 <USB_EPStartXfer+0x10f0>
 8006e58:	463b      	mov	r3, r7
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e60:	d81a      	bhi.n	8006e98 <USB_EPStartXfer+0x1064>
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <USB_EPStartXfer+0x1052>
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	3301      	adds	r3, #1
 8006e82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	e045      	b.n	8006f24 <USB_EPStartXfer+0x10f0>
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <USB_EPStartXfer+0x1088>
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e025      	b.n	8006f24 <USB_EPStartXfer+0x10f0>
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d120      	bne.n	8006f24 <USB_EPStartXfer+0x10f0>
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006efa:	4413      	add	r3, r2
 8006efc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d175      	bne.n	8007022 <USB_EPStartXfer+0x11ee>
 8006f36:	1d3b      	adds	r3, r7, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f4e:	4413      	add	r3, r2
 8006f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f54:	463b      	mov	r3, r7
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d116      	bne.n	8006fa2 <USB_EPStartXfer+0x116e>
 8006f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e061      	b.n	8007066 <USB_EPStartXfer+0x1232>
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8006faa:	d81a      	bhi.n	8006fe2 <USB_EPStartXfer+0x11ae>
 8006fac:	463b      	mov	r3, r7
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <USB_EPStartXfer+0x119c>
 8006fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	e041      	b.n	8007066 <USB_EPStartXfer+0x1232>
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <USB_EPStartXfer+0x11d2>
 8006ffc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007000:	3b01      	subs	r3, #1
 8007002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007006:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800700a:	b29b      	uxth	r3, r3
 800700c:	029b      	lsls	r3, r3, #10
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e021      	b.n	8007066 <USB_EPStartXfer+0x1232>
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d11c      	bne.n	8007066 <USB_EPStartXfer+0x1232>
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800703c:	4413      	add	r3, r2
 800703e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	011a      	lsls	r2, r3, #4
 800704a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800704e:	4413      	add	r3, r2
 8007050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007058:	463b      	mov	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007064:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007066:	463b      	mov	r3, r7
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 81a4 	beq.w	80073ba <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007086:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800708a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USB_EPStartXfer+0x126a>
 8007092:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10d      	bne.n	80070ba <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800709e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 8187 	bne.w	80073ba <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8180 	bne.w	80073ba <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80070d8:	1d3b      	adds	r3, r7, #4
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
 80070fe:	e15c      	b.n	80073ba <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	2b01      	cmp	r3, #1
 8007108:	f040 8155 	bne.w	80073b6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	463b      	mov	r3, r7
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	429a      	cmp	r2, r3
 800711a:	d90e      	bls.n	800713a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	619a      	str	r2, [r3, #24]
 8007138:	e008      	b.n	800714c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d16f      	bne.n	8007236 <USB_EPStartXfer+0x1402>
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800716e:	4413      	add	r3, r2
 8007170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007174:	463b      	mov	r3, r7
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	011a      	lsls	r2, r3, #4
 800717c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007180:	4413      	add	r3, r2
 8007182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d116      	bne.n	80071c0 <USB_EPStartXfer+0x138c>
 8007192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800719e:	b29a      	uxth	r2, r3
 80071a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	e05f      	b.n	8007280 <USB_EPStartXfer+0x144c>
 80071c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c4:	2b3e      	cmp	r3, #62	; 0x3e
 80071c6:	d818      	bhi.n	80071fa <USB_EPStartXfer+0x13c6>
 80071c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <USB_EPStartXfer+0x13b4>
 80071de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e2:	3301      	adds	r3, #1
 80071e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	029b      	lsls	r3, r3, #10
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e042      	b.n	8007280 <USB_EPStartXfer+0x144c>
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USB_EPStartXfer+0x13e6>
 8007210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007214:	3b01      	subs	r3, #1
 8007216:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800721a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721e:	b29b      	uxth	r3, r3
 8007220:	029b      	lsls	r3, r3, #10
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e024      	b.n	8007280 <USB_EPStartXfer+0x144c>
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d11f      	bne.n	8007280 <USB_EPStartXfer+0x144c>
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007248:	1d3b      	adds	r3, r7, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	4413      	add	r3, r2
 800725a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	011a      	lsls	r2, r3, #4
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	4413      	add	r3, r2
 800726c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007270:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007278:	b29a      	uxth	r2, r3
 800727a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	1d3b      	adds	r3, r7, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d16f      	bne.n	8007372 <USB_EPStartXfer+0x153e>
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072aa:	4413      	add	r3, r2
 80072ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	011a      	lsls	r2, r3, #4
 80072b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072bc:	4413      	add	r3, r2
 80072be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <USB_EPStartXfer+0x14c8>
 80072ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e05e      	b.n	80073ba <USB_EPStartXfer+0x1586>
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	2b3e      	cmp	r3, #62	; 0x3e
 8007302:	d818      	bhi.n	8007336 <USB_EPStartXfer+0x1502>
 8007304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800730e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <USB_EPStartXfer+0x14f0>
 800731a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800731e:	3301      	adds	r3, #1
 8007320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007328:	b29b      	uxth	r3, r3
 800732a:	029b      	lsls	r3, r3, #10
 800732c:	b29a      	uxth	r2, r3
 800732e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	e041      	b.n	80073ba <USB_EPStartXfer+0x1586>
 8007336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2b00      	cmp	r3, #0
 800734a:	d104      	bne.n	8007356 <USB_EPStartXfer+0x1522>
 800734c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007350:	3b01      	subs	r3, #1
 8007352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800735a:	b29b      	uxth	r3, r3
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e023      	b.n	80073ba <USB_EPStartXfer+0x1586>
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d11e      	bne.n	80073ba <USB_EPStartXfer+0x1586>
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007384:	b29b      	uxth	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738c:	4413      	add	r3, r2
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	4413      	add	r3, r2
 80073a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	e001      	b.n	80073ba <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e02e      	b.n	8007418 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073ba:	1d3b      	adds	r3, r7, #4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	463b      	mov	r3, r7
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073e0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073ec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d020      	beq.n	8007476 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744a:	81bb      	strh	r3, [r7, #12]
 800744c:	89bb      	ldrh	r3, [r7, #12]
 800744e:	f083 0310 	eor.w	r3, r3, #16
 8007452:	81bb      	strh	r3, [r7, #12]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	89bb      	ldrh	r3, [r7, #12]
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
 8007474:	e01f      	b.n	80074b6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748c:	81fb      	strh	r3, [r7, #14]
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007494:	81fb      	strh	r3, [r7, #14]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr

080074c2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b087      	sub	sp, #28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	7b1b      	ldrb	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 809d 	bne.w	8007610 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d04c      	beq.n	8007578 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	823b      	strh	r3, [r7, #16]
 80074ec:	8a3b      	ldrh	r3, [r7, #16]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01b      	beq.n	800752e <USB_EPClearStall+0x6c>
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750c:	81fb      	strh	r3, [r7, #14]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	441a      	add	r2, r3
 8007518:	89fb      	ldrh	r3, [r7, #14]
 800751a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800752a:	b29b      	uxth	r3, r3
 800752c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	78db      	ldrb	r3, [r3, #3]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d06c      	beq.n	8007610 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754c:	81bb      	strh	r3, [r7, #12]
 800754e:	89bb      	ldrh	r3, [r7, #12]
 8007550:	f083 0320 	eor.w	r3, r3, #32
 8007554:	81bb      	strh	r3, [r7, #12]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	89bb      	ldrh	r3, [r7, #12]
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
 8007576:	e04b      	b.n	8007610 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	82fb      	strh	r3, [r7, #22]
 8007586:	8afb      	ldrh	r3, [r7, #22]
 8007588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01b      	beq.n	80075c8 <USB_EPClearStall+0x106>
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	82bb      	strh	r3, [r7, #20]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	8abb      	ldrh	r3, [r7, #20]
 80075b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075de:	827b      	strh	r3, [r7, #18]
 80075e0:	8a7b      	ldrh	r3, [r7, #18]
 80075e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075e6:	827b      	strh	r3, [r7, #18]
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
 80075ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075ee:	827b      	strh	r3, [r7, #18]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	8a7b      	ldrh	r3, [r7, #18]
 80075fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760c:	b29b      	uxth	r3, r3
 800760e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2280      	movs	r2, #128	; 0x80
 8007632:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007678:	b29b      	uxth	r3, r3
 800767a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800769e:	b480      	push	{r7}
 80076a0:	b08d      	sub	sp, #52	; 0x34
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	460b      	mov	r3, r1
 80076ae:	80fb      	strh	r3, [r7, #6]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076b4:	88bb      	ldrh	r3, [r7, #4]
 80076b6:	3301      	adds	r3, #1
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	005a      	lsls	r2, r3, #1
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d6:	e01e      	b.n	8007716 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	3301      	adds	r3, #1
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	3302      	adds	r3, #2
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	3302      	adds	r3, #2
 8007708:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	3301      	adds	r3, #1
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	3b01      	subs	r3, #1
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1dd      	bne.n	80076d8 <USB_WritePMA+0x3a>
  }
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	3734      	adds	r7, #52	; 0x34
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007728:	b480      	push	{r7}
 800772a:	b08b      	sub	sp, #44	; 0x2c
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4611      	mov	r1, r2
 8007734:	461a      	mov	r2, r3
 8007736:	460b      	mov	r3, r1
 8007738:	80fb      	strh	r3, [r7, #6]
 800773a:	4613      	mov	r3, r2
 800773c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800773e:	88bb      	ldrh	r3, [r7, #4]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	005a      	lsls	r2, r3, #1
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	e01b      	b.n	800779a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	3302      	adds	r3, #2
 800776e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	b2da      	uxtb	r2, r3
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	3301      	adds	r3, #1
 800778c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	3302      	adds	r3, #2
 8007792:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	3b01      	subs	r3, #1
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e0      	bne.n	8007762 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077a0:	88bb      	ldrh	r3, [r7, #4]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	701a      	strb	r2, [r3, #0]
  }
}
 80077bc:	bf00      	nop
 80077be:	372c      	adds	r7, #44	; 0x2c
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7c1b      	ldrb	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d115      	bne.n	800780a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e2:	2202      	movs	r2, #2
 80077e4:	2181      	movs	r1, #129	; 0x81
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fe31 	bl	800944e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f6:	2202      	movs	r2, #2
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fe27 	bl	800944e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007808:	e012      	b.n	8007830 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	2202      	movs	r2, #2
 800780e:	2181      	movs	r1, #129	; 0x81
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fe1c 	bl	800944e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	2202      	movs	r2, #2
 8007820:	2101      	movs	r1, #1
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fe13 	bl	800944e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007830:	2308      	movs	r3, #8
 8007832:	2203      	movs	r2, #3
 8007834:	2182      	movs	r1, #130	; 0x82
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fe09 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007842:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007846:	f001 ff29 	bl	800969c <USBD_static_malloc>
 800784a:	4602      	mov	r2, r0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e026      	b.n	80078b0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7c1b      	ldrb	r3, [r3, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007896:	2101      	movs	r1, #1
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fec9 	bl	8009630 <USBD_LL_PrepareReceive>
 800789e:	e007      	b.n	80078b0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fec0 	bl	8009630 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078ca:	2181      	movs	r1, #129	; 0x81
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fde4 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078d8:	2101      	movs	r1, #1
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fddd 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078e8:	2182      	movs	r1, #130	; 0x82
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fdd5 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fecf 	bl	80096b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800794e:	2b00      	cmp	r3, #0
 8007950:	d039      	beq.n	80079c6 <USBD_CDC_Setup+0x9e>
 8007952:	2b20      	cmp	r3, #32
 8007954:	d17f      	bne.n	8007a56 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d029      	beq.n	80079b2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b25b      	sxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	da11      	bge.n	800798c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007974:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	88d2      	ldrh	r2, [r2, #6]
 800797a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800797c:	6939      	ldr	r1, [r7, #16]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	461a      	mov	r2, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 f9da 	bl	8008d3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800798a:	e06b      	b.n	8007a64 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	785a      	ldrb	r2, [r3, #1]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079a2:	6939      	ldr	r1, [r7, #16]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	88db      	ldrh	r3, [r3, #6]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f9f5 	bl	8008d9a <USBD_CtlPrepareRx>
      break;
 80079b0:	e058      	b.n	8007a64 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	7850      	ldrb	r0, [r2, #1]
 80079be:	2200      	movs	r2, #0
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	4798      	blx	r3
      break;
 80079c4:	e04e      	b.n	8007a64 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b0b      	cmp	r3, #11
 80079cc:	d02e      	beq.n	8007a2c <USBD_CDC_Setup+0x104>
 80079ce:	2b0b      	cmp	r3, #11
 80079d0:	dc38      	bgt.n	8007a44 <USBD_CDC_Setup+0x11c>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <USBD_CDC_Setup+0xb4>
 80079d6:	2b0a      	cmp	r3, #10
 80079d8:	d014      	beq.n	8007a04 <USBD_CDC_Setup+0xdc>
 80079da:	e033      	b.n	8007a44 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d107      	bne.n	80079f6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	2202      	movs	r2, #2
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 f9a5 	bl	8008d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079f4:	e02e      	b.n	8007a54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f936 	bl	8008c6a <USBD_CtlError>
            ret = USBD_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	75fb      	strb	r3, [r7, #23]
          break;
 8007a02:	e027      	b.n	8007a54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d107      	bne.n	8007a1e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a0e:	f107 030f 	add.w	r3, r7, #15
 8007a12:	2201      	movs	r2, #1
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f991 	bl	8008d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a1c:	e01a      	b.n	8007a54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f922 	bl	8008c6a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	75fb      	strb	r3, [r7, #23]
          break;
 8007a2a:	e013      	b.n	8007a54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d00d      	beq.n	8007a52 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f916 	bl	8008c6a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a42:	e006      	b.n	8007a52 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f90f 	bl	8008c6a <USBD_CtlError>
          ret = USBD_FAIL;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a50:	e000      	b.n	8007a54 <USBD_CDC_Setup+0x12c>
          break;
 8007a52:	bf00      	nop
      }
      break;
 8007a54:	e006      	b.n	8007a64 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f906 	bl	8008c6a <USBD_CtlError>
      ret = USBD_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	75fb      	strb	r3, [r7, #23]
      break;
 8007a62:	bf00      	nop
  }

  return ret;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d03a      	beq.n	8007b0a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	331c      	adds	r3, #28
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d029      	beq.n	8007afe <USBD_CDC_DataIn+0x90>
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	331c      	adds	r3, #28
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	78f9      	ldrb	r1, [r7, #3]
 8007abe:	68b8      	ldr	r0, [r7, #8]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	4403      	add	r3, r0
 8007aca:	3338      	adds	r3, #56	; 0x38
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ad2:	fb03 f301 	mul.w	r3, r3, r1
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d110      	bne.n	8007afe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	331c      	adds	r3, #28
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007af0:	78f9      	ldrb	r1, [r7, #3]
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fd77 	bl	80095ea <USBD_LL_Transmit>
 8007afc:	e003      	b.n	8007b06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fda2 	bl	8009676 <USBD_LL_GetRxDataSize>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4798      	blx	r3

    return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e000      	b.n	8007b62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b60:	2302      	movs	r3, #2
  }
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d015      	beq.n	8007bb0 <USBD_CDC_EP0_RxReady+0x46>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b8a:	2bff      	cmp	r3, #255	; 0xff
 8007b8c:	d010      	beq.n	8007bb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	22ff      	movs	r2, #255	; 0xff
 8007bac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2243      	movs	r2, #67	; 0x43
 8007bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007bca:	4b03      	ldr	r3, [pc, #12]	; (8007bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000094 	.word	0x20000094

08007bdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2243      	movs	r2, #67	; 0x43
 8007be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007bea:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000050 	.word	0x20000050

08007bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2243      	movs	r2, #67	; 0x43
 8007c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c0a:	4b03      	ldr	r3, [pc, #12]	; (8007c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	200000d8 	.word	0x200000d8

08007c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220a      	movs	r2, #10
 8007c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c46:	2302      	movs	r3, #2
 8007c48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d017      	beq.n	8007d0a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7c1b      	ldrb	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cec:	2101      	movs	r1, #1
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fc9e 	bl	8009630 <USBD_LL_PrepareReceive>
 8007cf4:	e007      	b.n	8007d06 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fc95 	bl	8009630 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e000      	b.n	8007d0c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d0a:	2302      	movs	r3, #2
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e01a      	b.n	8007d62 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	79fa      	ldrb	r2, [r7, #7]
 8007d58:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fb02 	bl	8009364 <USBD_LL_Init>

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d006      	beq.n	8007d8c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
 8007d8a:	e001      	b.n	8007d90 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fb37 	bl	8009418 <USBD_LL_Start>

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	4611      	mov	r1, r2
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fed7 	bl	8008bf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d016      	beq.n	8007e96 <USBD_LL_SetupStage+0x6a>
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d81c      	bhi.n	8007ea6 <USBD_LL_SetupStage+0x7a>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <USBD_LL_SetupStage+0x4a>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d008      	beq.n	8007e86 <USBD_LL_SetupStage+0x5a>
 8007e74:	e017      	b.n	8007ea6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9ca 	bl	8008218 <USBD_StdDevReq>
      break;
 8007e84:	e01a      	b.n	8007ebc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa2c 	bl	80082ec <USBD_StdItfReq>
      break;
 8007e94:	e012      	b.n	8007ebc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa6c 	bl	800837c <USBD_StdEPReq>
      break;
 8007ea4:	e00a      	b.n	8007ebc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007eac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fb0f 	bl	80094d8 <USBD_LL_StallEP>
      break;
 8007eba:	bf00      	nop
  }

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d14b      	bne.n	8007f72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ee0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d134      	bne.n	8007f56 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d919      	bls.n	8007f2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	1ad2      	subs	r2, r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d203      	bcs.n	8007f1a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	e002      	b.n	8007f20 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 ff56 	bl	8008dd6 <USBD_CtlContinueRx>
 8007f2a:	e038      	b.n	8007f9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d105      	bne.n	8007f4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 ff53 	bl	8008dfa <USBD_CtlSendStatus>
 8007f54:	e023      	b.n	8007f9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d11e      	bne.n	8007f9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f68:	2100      	movs	r1, #0
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 fab4 	bl	80094d8 <USBD_LL_StallEP>
 8007f70:	e015      	b.n	8007f9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d108      	bne.n	8007f9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	7afa      	ldrb	r2, [r7, #11]
 8007f92:	4611      	mov	r1, r2
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	4798      	blx	r3
 8007f98:	e001      	b.n	8007f9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e000      	b.n	8007fa0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d17f      	bne.n	80080bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d15c      	bne.n	8008086 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d915      	bls.n	8008004 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	1ad2      	subs	r2, r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fec0 	bl	8008d76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f001 fb17 	bl	8009630 <USBD_LL_PrepareReceive>
 8008002:	e04e      	b.n	80080a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	6912      	ldr	r2, [r2, #16]
 800800c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008010:	fb02 f201 	mul.w	r2, r2, r1
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d11c      	bne.n	8008054 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008022:	429a      	cmp	r2, r3
 8008024:	d316      	bcc.n	8008054 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008030:	429a      	cmp	r2, r3
 8008032:	d20f      	bcs.n	8008054 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fe9c 	bl	8008d76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008046:	2300      	movs	r3, #0
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f001 faef 	bl	8009630 <USBD_LL_PrepareReceive>
 8008052:	e026      	b.n	80080a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008066:	2b03      	cmp	r3, #3
 8008068:	d105      	bne.n	8008076 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008076:	2180      	movs	r1, #128	; 0x80
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f001 fa2d 	bl	80094d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fece 	bl	8008e20 <USBD_CtlReceiveStatus>
 8008084:	e00d      	b.n	80080a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800808c:	2b04      	cmp	r3, #4
 800808e:	d004      	beq.n	800809a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008096:	2b00      	cmp	r3, #0
 8008098:	d103      	bne.n	80080a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800809a:	2180      	movs	r1, #128	; 0x80
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fa1b 	bl	80094d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11d      	bne.n	80080e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff fe81 	bl	8007db4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080ba:	e015      	b.n	80080e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d108      	bne.n	80080e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	7afa      	ldrb	r2, [r7, #11]
 80080dc:	4611      	mov	r1, r2
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	4798      	blx	r3
 80080e2:	e001      	b.n	80080e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080e4:	2302      	movs	r3, #2
 80080e6:	e000      	b.n	80080ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	2200      	movs	r2, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f9a4 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	2200      	movs	r2, #0
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 f996 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2240      	movs	r2, #64	; 0x40
 800812c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	4611      	mov	r1, r2
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
  }

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d105      	bne.n	80081d8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d10b      	bne.n	800820e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d005      	beq.n	800823e <USBD_StdDevReq+0x26>
 8008232:	2b40      	cmp	r3, #64	; 0x40
 8008234:	d84f      	bhi.n	80082d6 <USBD_StdDevReq+0xbe>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <USBD_StdDevReq+0x36>
 800823a:	2b20      	cmp	r3, #32
 800823c:	d14b      	bne.n	80082d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4798      	blx	r3
      break;
 800824c:	e048      	b.n	80082e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2b09      	cmp	r3, #9
 8008254:	d839      	bhi.n	80082ca <USBD_StdDevReq+0xb2>
 8008256:	a201      	add	r2, pc, #4	; (adr r2, 800825c <USBD_StdDevReq+0x44>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	080082ad 	.word	0x080082ad
 8008260:	080082c1 	.word	0x080082c1
 8008264:	080082cb 	.word	0x080082cb
 8008268:	080082b7 	.word	0x080082b7
 800826c:	080082cb 	.word	0x080082cb
 8008270:	0800828f 	.word	0x0800828f
 8008274:	08008285 	.word	0x08008285
 8008278:	080082cb 	.word	0x080082cb
 800827c:	080082a3 	.word	0x080082a3
 8008280:	08008299 	.word	0x08008299
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9dc 	bl	8008644 <USBD_GetDescriptor>
          break;
 800828c:	e022      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb3f 	bl	8008914 <USBD_SetAddress>
          break;
 8008296:	e01d      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb7e 	bl	800899c <USBD_SetConfig>
          break;
 80082a0:	e018      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc07 	bl	8008ab8 <USBD_GetConfig>
          break;
 80082aa:	e013      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc37 	bl	8008b22 <USBD_GetStatus>
          break;
 80082b4:	e00e      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc65 	bl	8008b88 <USBD_SetFeature>
          break;
 80082be:	e009      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fc74 	bl	8008bb0 <USBD_ClrFeature>
          break;
 80082c8:	e004      	b.n	80082d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fccc 	bl	8008c6a <USBD_CtlError>
          break;
 80082d2:	bf00      	nop
      }
      break;
 80082d4:	e004      	b.n	80082e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fcc6 	bl	8008c6a <USBD_CtlError>
      break;
 80082de:	bf00      	nop
  }

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop

080082ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d005      	beq.n	8008312 <USBD_StdItfReq+0x26>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d82e      	bhi.n	8008368 <USBD_StdItfReq+0x7c>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <USBD_StdItfReq+0x26>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d12a      	bne.n	8008368 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008318:	3b01      	subs	r3, #1
 800831a:	2b02      	cmp	r3, #2
 800831c:	d81d      	bhi.n	800835a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	889b      	ldrh	r3, [r3, #4]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d813      	bhi.n	8008350 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	88db      	ldrh	r3, [r3, #6]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d110      	bne.n	8008364 <USBD_StdItfReq+0x78>
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10d      	bne.n	8008364 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fd56 	bl	8008dfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800834e:	e009      	b.n	8008364 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc89 	bl	8008c6a <USBD_CtlError>
          break;
 8008358:	e004      	b.n	8008364 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc84 	bl	8008c6a <USBD_CtlError>
          break;
 8008362:	e000      	b.n	8008366 <USBD_StdItfReq+0x7a>
          break;
 8008364:	bf00      	nop
      }
      break;
 8008366:	e004      	b.n	8008372 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc7d 	bl	8008c6a <USBD_CtlError>
      break;
 8008370:	bf00      	nop
  }

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	889b      	ldrh	r3, [r3, #4]
 800838e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d007      	beq.n	80083ac <USBD_StdEPReq+0x30>
 800839c:	2b40      	cmp	r3, #64	; 0x40
 800839e:	f200 8146 	bhi.w	800862e <USBD_StdEPReq+0x2b2>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <USBD_StdEPReq+0x40>
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	f040 8141 	bne.w	800862e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
      break;
 80083ba:	e13d      	b.n	8008638 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d10a      	bne.n	80083de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	e12d      	b.n	800863a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d007      	beq.n	80083f6 <USBD_StdEPReq+0x7a>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	f300 811b 	bgt.w	8008622 <USBD_StdEPReq+0x2a6>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d072      	beq.n	80084d6 <USBD_StdEPReq+0x15a>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d03a      	beq.n	800846a <USBD_StdEPReq+0xee>
 80083f4:	e115      	b.n	8008622 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d002      	beq.n	8008406 <USBD_StdEPReq+0x8a>
 8008400:	2b03      	cmp	r3, #3
 8008402:	d015      	beq.n	8008430 <USBD_StdEPReq+0xb4>
 8008404:	e02b      	b.n	800845e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00c      	beq.n	8008426 <USBD_StdEPReq+0xaa>
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d009      	beq.n	8008426 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f85e 	bl	80094d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 f85a 	bl	80094d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008424:	e020      	b.n	8008468 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc1e 	bl	8008c6a <USBD_CtlError>
              break;
 800842e:	e01b      	b.n	8008468 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	885b      	ldrh	r3, [r3, #2]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10e      	bne.n	8008456 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <USBD_StdEPReq+0xda>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d008      	beq.n	8008456 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f841 	bl	80094d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fccf 	bl	8008dfa <USBD_CtlSendStatus>

              break;
 800845c:	e004      	b.n	8008468 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc02 	bl	8008c6a <USBD_CtlError>
              break;
 8008466:	bf00      	nop
          }
          break;
 8008468:	e0e0      	b.n	800862c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0xfe>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d015      	beq.n	80084a4 <USBD_StdEPReq+0x128>
 8008478:	e026      	b.n	80084c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <USBD_StdEPReq+0x11e>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d009      	beq.n	800849a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f824 	bl	80094d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f820 	bl	80094d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008498:	e01c      	b.n	80084d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fbe4 	bl	8008c6a <USBD_CtlError>
              break;
 80084a2:	e017      	b.n	80084d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d112      	bne.n	80084d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 f82b 	bl	8009516 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc9a 	bl	8008dfa <USBD_CtlSendStatus>
              }
              break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fbcd 	bl	8008c6a <USBD_CtlError>
              break;
 80084d0:	e000      	b.n	80084d4 <USBD_StdEPReq+0x158>
              break;
 80084d2:	bf00      	nop
          }
          break;
 80084d4:	e0aa      	b.n	800862c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_StdEPReq+0x16a>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d032      	beq.n	800854a <USBD_StdEPReq+0x1ce>
 80084e4:	e097      	b.n	8008616 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <USBD_StdEPReq+0x180>
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d004      	beq.n	80084fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fbb8 	bl	8008c6a <USBD_CtlError>
                break;
 80084fa:	e091      	b.n	8008620 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da0b      	bge.n	800851c <USBD_StdEPReq+0x1a0>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	3310      	adds	r3, #16
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	3304      	adds	r3, #4
 800851a:	e00b      	b.n	8008534 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	3304      	adds	r3, #4
 8008534:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2202      	movs	r2, #2
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fbfb 	bl	8008d3e <USBD_CtlSendData>
              break;
 8008548:	e06a      	b.n	8008620 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800854a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da11      	bge.n	8008576 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	3318      	adds	r3, #24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d117      	bne.n	800859c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fb7b 	bl	8008c6a <USBD_CtlError>
                  break;
 8008574:	e054      	b.n	8008620 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fb68 	bl	8008c6a <USBD_CtlError>
                  break;
 800859a:	e041      	b.n	8008620 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da0b      	bge.n	80085bc <USBD_StdEPReq+0x240>
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	3310      	adds	r3, #16
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4413      	add	r3, r2
 80085b8:	3304      	adds	r3, #4
 80085ba:	e00b      	b.n	80085d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	3304      	adds	r3, #4
 80085d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <USBD_StdEPReq+0x266>
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b80      	cmp	r3, #128	; 0x80
 80085e0:	d103      	bne.n	80085ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e00e      	b.n	8008608 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 ffb0 	bl	8009554 <USBD_LL_IsStallEP>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e002      	b.n	8008608 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2202      	movs	r2, #2
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fb95 	bl	8008d3e <USBD_CtlSendData>
              break;
 8008614:	e004      	b.n	8008620 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fb26 	bl	8008c6a <USBD_CtlError>
              break;
 800861e:	bf00      	nop
          }
          break;
 8008620:	e004      	b.n	800862c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb20 	bl	8008c6a <USBD_CtlError>
          break;
 800862a:	bf00      	nop
      }
      break;
 800862c:	e004      	b.n	8008638 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb1a 	bl	8008c6a <USBD_CtlError>
      break;
 8008636:	bf00      	nop
  }

  return ret;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	885b      	ldrh	r3, [r3, #2]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	2b06      	cmp	r3, #6
 8008666:	f200 8128 	bhi.w	80088ba <USBD_GetDescriptor+0x276>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_GetDescriptor+0x2c>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	0800868d 	.word	0x0800868d
 8008674:	080086a5 	.word	0x080086a5
 8008678:	080086e5 	.word	0x080086e5
 800867c:	080088bb 	.word	0x080088bb
 8008680:	080088bb 	.word	0x080088bb
 8008684:	0800885b 	.word	0x0800885b
 8008688:	08008887 	.word	0x08008887
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
      break;
 80086a2:	e112      	b.n	80088ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7c1b      	ldrb	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10d      	bne.n	80086c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f107 0208 	add.w	r2, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	2202      	movs	r2, #2
 80086c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086c6:	e100      	b.n	80088ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	f107 0208 	add.w	r2, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	2202      	movs	r2, #2
 80086e0:	701a      	strb	r2, [r3, #0]
      break;
 80086e2:	e0f2      	b.n	80088ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	885b      	ldrh	r3, [r3, #2]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	f200 80ac 	bhi.w	8008848 <USBD_GetDescriptor+0x204>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_GetDescriptor+0xb4>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008745 	.word	0x08008745
 8008700:	08008779 	.word	0x08008779
 8008704:	080087ad 	.word	0x080087ad
 8008708:	080087e1 	.word	0x080087e1
 800870c:	08008815 	.word	0x08008815
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008732:	e091      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa97 	bl	8008c6a <USBD_CtlError>
            err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
          break;
 8008742:	e089      	b.n	8008858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008766:	e077      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa7d 	bl	8008c6a <USBD_CtlError>
            err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
          break;
 8008776:	e06f      	b.n	8008858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	7c12      	ldrb	r2, [r2, #16]
 8008790:	f107 0108 	add.w	r1, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879a:	e05d      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa63 	bl	8008c6a <USBD_CtlError>
            err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
          break;
 80087aa:	e055      	b.n	8008858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ce:	e043      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa49 	bl	8008c6a <USBD_CtlError>
            err++;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	3301      	adds	r3, #1
 80087dc:	72fb      	strb	r3, [r7, #11]
          break;
 80087de:	e03b      	b.n	8008858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008802:	e029      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa2f 	bl	8008c6a <USBD_CtlError>
            err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
          break;
 8008812:	e021      	b.n	8008858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7c12      	ldrb	r2, [r2, #16]
 800882c:	f107 0108 	add.w	r1, r7, #8
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
 8008834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008836:	e00f      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa15 	bl	8008c6a <USBD_CtlError>
            err++;
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	3301      	adds	r3, #1
 8008844:	72fb      	strb	r3, [r7, #11]
          break;
 8008846:	e007      	b.n	8008858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa0d 	bl	8008c6a <USBD_CtlError>
          err++;
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	3301      	adds	r3, #1
 8008854:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008856:	e038      	b.n	80088ca <USBD_GetDescriptor+0x286>
 8008858:	e037      	b.n	80088ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7c1b      	ldrb	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886a:	f107 0208 	add.w	r2, r7, #8
 800886e:	4610      	mov	r0, r2
 8008870:	4798      	blx	r3
 8008872:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008874:	e029      	b.n	80088ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9f6 	bl	8008c6a <USBD_CtlError>
        err++;
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	3301      	adds	r3, #1
 8008882:	72fb      	strb	r3, [r7, #11]
      break;
 8008884:	e021      	b.n	80088ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7c1b      	ldrb	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f107 0208 	add.w	r2, r7, #8
 800889a:	4610      	mov	r0, r2
 800889c:	4798      	blx	r3
 800889e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	2207      	movs	r2, #7
 80088a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088a8:	e00f      	b.n	80088ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9dc 	bl	8008c6a <USBD_CtlError>
        err++;
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	3301      	adds	r3, #1
 80088b6:	72fb      	strb	r3, [r7, #11]
      break;
 80088b8:	e007      	b.n	80088ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9d4 	bl	8008c6a <USBD_CtlError>
      err++;
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	3301      	adds	r3, #1
 80088c6:	72fb      	strb	r3, [r7, #11]
      break;
 80088c8:	bf00      	nop
  }

  if (err != 0U)
 80088ca:	7afb      	ldrb	r3, [r7, #11]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11c      	bne.n	800890a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80088d0:	893b      	ldrh	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <USBD_GetDescriptor+0x2b6>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	88db      	ldrh	r3, [r3, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	88da      	ldrh	r2, [r3, #6]
 80088e2:	893b      	ldrh	r3, [r7, #8]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bf28      	it	cs
 80088e8:	4613      	movcs	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ee:	893b      	ldrh	r3, [r7, #8]
 80088f0:	461a      	mov	r2, r3
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fa22 	bl	8008d3e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fa79 	bl	8008dfa <USBD_CtlSendStatus>
 8008908:	e000      	b.n	800890c <USBD_GetDescriptor+0x2c8>
    return;
 800890a:	bf00      	nop
    }
  }
}
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop

08008914 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d130      	bne.n	8008988 <USBD_SetAddress+0x74>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d12c      	bne.n	8008988 <USBD_SetAddress+0x74>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	2b7f      	cmp	r3, #127	; 0x7f
 8008934:	d828      	bhi.n	8008988 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	885b      	ldrh	r3, [r3, #2]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008948:	2b03      	cmp	r3, #3
 800894a:	d104      	bne.n	8008956 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f98b 	bl	8008c6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008954:	e01d      	b.n	8008992 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7bfa      	ldrb	r2, [r7, #15]
 800895a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fe22 	bl	80095ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa46 	bl	8008dfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d004      	beq.n	800897e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897c:	e009      	b.n	8008992 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008986:	e004      	b.n	8008992 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f96d 	bl	8008c6a <USBD_CtlError>
  }
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	4b41      	ldr	r3, [pc, #260]	; (8008ab4 <USBD_SetConfig+0x118>)
 80089ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089b0:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <USBD_SetConfig+0x118>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d904      	bls.n	80089c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f955 	bl	8008c6a <USBD_CtlError>
 80089c0:	e075      	b.n	8008aae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d002      	beq.n	80089d2 <USBD_SetConfig+0x36>
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d023      	beq.n	8008a18 <USBD_SetConfig+0x7c>
 80089d0:	e062      	b.n	8008a98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80089d2:	4b38      	ldr	r3, [pc, #224]	; (8008ab4 <USBD_SetConfig+0x118>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01a      	beq.n	8008a10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80089da:	4b36      	ldr	r3, [pc, #216]	; (8008ab4 <USBD_SetConfig+0x118>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2203      	movs	r2, #3
 80089e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089ec:	4b31      	ldr	r3, [pc, #196]	; (8008ab4 <USBD_SetConfig+0x118>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff f9e8 	bl	8007dc8 <USBD_SetClassConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d104      	bne.n	8008a08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f932 	bl	8008c6a <USBD_CtlError>
            return;
 8008a06:	e052      	b.n	8008aae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f9f6 	bl	8008dfa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a0e:	e04e      	b.n	8008aae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f9f2 	bl	8008dfa <USBD_CtlSendStatus>
        break;
 8008a16:	e04a      	b.n	8008aae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a18:	4b26      	ldr	r3, [pc, #152]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d112      	bne.n	8008a46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a28:	4b22      	ldr	r3, [pc, #136]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a32:	4b20      	ldr	r3, [pc, #128]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff f9e4 	bl	8007e06 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f9db 	bl	8008dfa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a44:	e033      	b.n	8008aae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a46:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d01d      	beq.n	8008a90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff f9d2 	bl	8007e06 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a62:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff f9a8 	bl	8007dc8 <USBD_SetClassConfig>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d104      	bne.n	8008a88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8f2 	bl	8008c6a <USBD_CtlError>
            return;
 8008a86:	e012      	b.n	8008aae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f9b6 	bl	8008dfa <USBD_CtlSendStatus>
        break;
 8008a8e:	e00e      	b.n	8008aae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9b2 	bl	8008dfa <USBD_CtlSendStatus>
        break;
 8008a96:	e00a      	b.n	8008aae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8e5 	bl	8008c6a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <USBD_SetConfig+0x118>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff f9ad 	bl	8007e06 <USBD_ClrClassConfig>
        break;
 8008aac:	bf00      	nop
    }
  }
}
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20000370 	.word	0x20000370

08008ab8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	88db      	ldrh	r3, [r3, #6]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d004      	beq.n	8008ad4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8cc 	bl	8008c6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ad2:	e022      	b.n	8008b1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	dc02      	bgt.n	8008ae4 <USBD_GetConfig+0x2c>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc03      	bgt.n	8008aea <USBD_GetConfig+0x32>
 8008ae2:	e015      	b.n	8008b10 <USBD_GetConfig+0x58>
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d00b      	beq.n	8008b00 <USBD_GetConfig+0x48>
 8008ae8:	e012      	b.n	8008b10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3308      	adds	r3, #8
 8008af4:	2201      	movs	r2, #1
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f920 	bl	8008d3e <USBD_CtlSendData>
        break;
 8008afe:	e00c      	b.n	8008b1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	2201      	movs	r2, #1
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f918 	bl	8008d3e <USBD_CtlSendData>
        break;
 8008b0e:	e004      	b.n	8008b1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8a9 	bl	8008c6a <USBD_CtlError>
        break;
 8008b18:	bf00      	nop
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b32:	3b01      	subs	r3, #1
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d81e      	bhi.n	8008b76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	88db      	ldrh	r3, [r3, #6]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d004      	beq.n	8008b4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f891 	bl	8008c6a <USBD_CtlError>
        break;
 8008b48:	e01a      	b.n	8008b80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f043 0202 	orr.w	r2, r3, #2
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8e5 	bl	8008d3e <USBD_CtlSendData>
      break;
 8008b74:	e004      	b.n	8008b80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f876 	bl	8008c6a <USBD_CtlError>
      break;
 8008b7e:	bf00      	nop
  }
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d106      	bne.n	8008ba8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f929 	bl	8008dfa <USBD_CtlSendStatus>
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d80b      	bhi.n	8008bde <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d10c      	bne.n	8008be8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f90f 	bl	8008dfa <USBD_CtlSendStatus>
      }
      break;
 8008bdc:	e004      	b.n	8008be8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f842 	bl	8008c6a <USBD_CtlError>
      break;
 8008be6:	e000      	b.n	8008bea <USBD_ClrFeature+0x3a>
      break;
 8008be8:	bf00      	nop
  }
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	785a      	ldrb	r2, [r3, #1]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	3302      	adds	r3, #2
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	3303      	adds	r3, #3
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	4413      	add	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	3305      	adds	r3, #5
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	3306      	adds	r3, #6
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	3307      	adds	r3, #7
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4413      	add	r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	80da      	strh	r2, [r3, #6]

}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c74:	2180      	movs	r1, #128	; 0x80
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fc2e 	bl	80094d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc2a 	bl	80094d8 <USBD_LL_StallEP>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d032      	beq.n	8008d08 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f834 	bl	8008d10 <USBD_GetLen>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	3301      	adds	r3, #1
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	75fa      	strb	r2, [r7, #23]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	75fa      	strb	r2, [r7, #23]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008cd8:	e012      	b.n	8008d00 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	60fa      	str	r2, [r7, #12]
 8008ce0:	7dfa      	ldrb	r2, [r7, #23]
 8008ce2:	1c51      	adds	r1, r2, #1
 8008ce4:	75f9      	strb	r1, [r7, #23]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	440a      	add	r2, r1
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	75fa      	strb	r2, [r7, #23]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e8      	bne.n	8008cda <USBD_GetString+0x4e>
    }
  }
}
 8008d08:	bf00      	nop
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d1c:	e005      	b.n	8008d2a <USBD_GetLen+0x1a>
  {
    len++;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	3301      	adds	r3, #1
 8008d22:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3301      	adds	r3, #1
 8008d28:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f5      	bne.n	8008d1e <USBD_GetLen+0xe>
  }

  return len;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr

08008d3e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d54:	88fa      	ldrh	r2, [r7, #6]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d5a:	88fa      	ldrh	r2, [r7, #6]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	2100      	movs	r1, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fc3f 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	4613      	mov	r3, r2
 8008d82:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fc2d 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2203      	movs	r2, #3
 8008dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fc32 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	4613      	mov	r3, r2
 8008de2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	2100      	movs	r1, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fc20 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2204      	movs	r2, #4
 8008e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fbea 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2205      	movs	r2, #5
 8008e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e30:	2300      	movs	r3, #0
 8008e32:	2200      	movs	r2, #0
 8008e34:	2100      	movs	r1, #0
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fbfa 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4912      	ldr	r1, [pc, #72]	; (8008e98 <MX_USB_DEVICE_Init+0x50>)
 8008e50:	4812      	ldr	r0, [pc, #72]	; (8008e9c <MX_USB_DEVICE_Init+0x54>)
 8008e52:	f7fe ff5f 	bl	8007d14 <USBD_Init>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e5c:	f7f8 f912 	bl	8001084 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e60:	490f      	ldr	r1, [pc, #60]	; (8008ea0 <MX_USB_DEVICE_Init+0x58>)
 8008e62:	480e      	ldr	r0, [pc, #56]	; (8008e9c <MX_USB_DEVICE_Init+0x54>)
 8008e64:	f7fe ff81 	bl	8007d6a <USBD_RegisterClass>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e6e:	f7f8 f909 	bl	8001084 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e72:	490c      	ldr	r1, [pc, #48]	; (8008ea4 <MX_USB_DEVICE_Init+0x5c>)
 8008e74:	4809      	ldr	r0, [pc, #36]	; (8008e9c <MX_USB_DEVICE_Init+0x54>)
 8008e76:	f7fe fee1 	bl	8007c3c <USBD_CDC_RegisterInterface>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e80:	f7f8 f900 	bl	8001084 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e84:	4805      	ldr	r0, [pc, #20]	; (8008e9c <MX_USB_DEVICE_Init+0x54>)
 8008e86:	f7fe ff89 	bl	8007d9c <USBD_Start>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e90:	f7f8 f8f8 	bl	8001084 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e94:	bf00      	nop
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	2000012c 	.word	0x2000012c
 8008e9c:	200006b4 	.word	0x200006b4
 8008ea0:	20000018 	.word	0x20000018
 8008ea4:	2000011c 	.word	0x2000011c

08008ea8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008eac:	2200      	movs	r2, #0
 8008eae:	4905      	ldr	r1, [pc, #20]	; (8008ec4 <CDC_Init_FS+0x1c>)
 8008eb0:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <CDC_Init_FS+0x20>)
 8008eb2:	f7fe fed9 	bl	8007c68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008eb6:	4905      	ldr	r1, [pc, #20]	; (8008ecc <CDC_Init_FS+0x24>)
 8008eb8:	4803      	ldr	r0, [pc, #12]	; (8008ec8 <CDC_Init_FS+0x20>)
 8008eba:	f7fe feee 	bl	8007c9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ebe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000d60 	.word	0x20000d60
 8008ec8:	200006b4 	.word	0x200006b4
 8008ecc:	20000978 	.word	0x20000978

08008ed0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ed4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr
	...

08008ee0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
 8008eec:	4613      	mov	r3, r2
 8008eee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	2b23      	cmp	r3, #35	; 0x23
 8008ef4:	d84a      	bhi.n	8008f8c <CDC_Control_FS+0xac>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <CDC_Control_FS+0x1c>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f8d 	.word	0x08008f8d
 8008f00:	08008f8d 	.word	0x08008f8d
 8008f04:	08008f8d 	.word	0x08008f8d
 8008f08:	08008f8d 	.word	0x08008f8d
 8008f0c:	08008f8d 	.word	0x08008f8d
 8008f10:	08008f8d 	.word	0x08008f8d
 8008f14:	08008f8d 	.word	0x08008f8d
 8008f18:	08008f8d 	.word	0x08008f8d
 8008f1c:	08008f8d 	.word	0x08008f8d
 8008f20:	08008f8d 	.word	0x08008f8d
 8008f24:	08008f8d 	.word	0x08008f8d
 8008f28:	08008f8d 	.word	0x08008f8d
 8008f2c:	08008f8d 	.word	0x08008f8d
 8008f30:	08008f8d 	.word	0x08008f8d
 8008f34:	08008f8d 	.word	0x08008f8d
 8008f38:	08008f8d 	.word	0x08008f8d
 8008f3c:	08008f8d 	.word	0x08008f8d
 8008f40:	08008f8d 	.word	0x08008f8d
 8008f44:	08008f8d 	.word	0x08008f8d
 8008f48:	08008f8d 	.word	0x08008f8d
 8008f4c:	08008f8d 	.word	0x08008f8d
 8008f50:	08008f8d 	.word	0x08008f8d
 8008f54:	08008f8d 	.word	0x08008f8d
 8008f58:	08008f8d 	.word	0x08008f8d
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08008f8d 	.word	0x08008f8d
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f8d 	.word	0x08008f8d
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	08008f8d 	.word	0x08008f8d
 8008f74:	08008f8d 	.word	0x08008f8d
 8008f78:	08008f8d 	.word	0x08008f8d
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f8d 	.word	0x08008f8d
 8008f84:	08008f8d 	.word	0x08008f8d
 8008f88:	08008f8d 	.word	0x08008f8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f8c:	bf00      	nop
  }

  return (USBD_OK);
 8008f8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop

08008f9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <CDC_Receive_FS+0x24>)
 8008faa:	f7fe fe76 	bl	8007c9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fae:	4804      	ldr	r0, [pc, #16]	; (8008fc0 <CDC_Receive_FS+0x24>)
 8008fb0:	f7fe fe86 	bl	8007cc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200006b4 	.word	0x200006b4

08008fc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2212      	movs	r2, #18
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000148 	.word	0x20000148

08008fe8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	; (8009008 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	2000015c 	.word	0x2000015c

0800900c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4907      	ldr	r1, [pc, #28]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
 8009022:	4808      	ldr	r0, [pc, #32]	; (8009044 <USBD_FS_ProductStrDescriptor+0x38>)
 8009024:	f7ff fe32 	bl	8008c8c <USBD_GetString>
 8009028:	e004      	b.n	8009034 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4904      	ldr	r1, [pc, #16]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
 800902e:	4805      	ldr	r0, [pc, #20]	; (8009044 <USBD_FS_ProductStrDescriptor+0x38>)
 8009030:	f7ff fe2c 	bl	8008c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009034:	4b02      	ldr	r3, [pc, #8]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20001148 	.word	0x20001148
 8009044:	0800dff0 	.word	0x0800dff0

08009048 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	4904      	ldr	r1, [pc, #16]	; (8009068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009058:	4804      	ldr	r0, [pc, #16]	; (800906c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800905a:	f7ff fe17 	bl	8008c8c <USBD_GetString>
  return USBD_StrDesc;
 800905e:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20001148 	.word	0x20001148
 800906c:	0800e008 	.word	0x0800e008

08009070 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	221a      	movs	r2, #26
 8009080:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009082:	f000 f843 	bl	800910c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009086:	4b02      	ldr	r3, [pc, #8]	; (8009090 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20000160 	.word	0x20000160

08009094 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d105      	bne.n	80090b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4907      	ldr	r1, [pc, #28]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090aa:	4808      	ldr	r0, [pc, #32]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090ac:	f7ff fdee 	bl	8008c8c <USBD_GetString>
 80090b0:	e004      	b.n	80090bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	4904      	ldr	r1, [pc, #16]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b6:	4805      	ldr	r0, [pc, #20]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b8:	f7ff fde8 	bl	8008c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20001148 	.word	0x20001148
 80090cc:	0800e014 	.word	0x0800e014

080090d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4907      	ldr	r1, [pc, #28]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e6:	4808      	ldr	r0, [pc, #32]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e8:	f7ff fdd0 	bl	8008c8c <USBD_GetString>
 80090ec:	e004      	b.n	80090f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4904      	ldr	r1, [pc, #16]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f2:	4805      	ldr	r0, [pc, #20]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f4:	f7ff fdca 	bl	8008c8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f8:	4b02      	ldr	r3, [pc, #8]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20001148 	.word	0x20001148
 8009108:	0800e020 	.word	0x0800e020

0800910c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <Get_SerialNum+0x44>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009118:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <Get_SerialNum+0x48>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800911e:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <Get_SerialNum+0x4c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009132:	2208      	movs	r2, #8
 8009134:	4909      	ldr	r1, [pc, #36]	; (800915c <Get_SerialNum+0x50>)
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f814 	bl	8009164 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800913c:	2204      	movs	r2, #4
 800913e:	4908      	ldr	r1, [pc, #32]	; (8009160 <Get_SerialNum+0x54>)
 8009140:	68b8      	ldr	r0, [r7, #8]
 8009142:	f000 f80f 	bl	8009164 <IntToUnicode>
  }
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	1ffff7e8 	.word	0x1ffff7e8
 8009154:	1ffff7ec 	.word	0x1ffff7ec
 8009158:	1ffff7f0 	.word	0x1ffff7f0
 800915c:	20000162 	.word	0x20000162
 8009160:	20000172 	.word	0x20000172

08009164 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
 800917a:	e027      	b.n	80091cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0f1b      	lsrs	r3, r3, #28
 8009180:	2b09      	cmp	r3, #9
 8009182:	d80b      	bhi.n	800919c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0f1b      	lsrs	r3, r3, #28
 8009188:	b2da      	uxtb	r2, r3
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4619      	mov	r1, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	440b      	add	r3, r1
 8009194:	3230      	adds	r2, #48	; 0x30
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	e00a      	b.n	80091b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0f1b      	lsrs	r3, r3, #28
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	4619      	mov	r1, r3
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	440b      	add	r3, r1
 80091ac:	3237      	adds	r2, #55	; 0x37
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	3301      	adds	r3, #1
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	3301      	adds	r3, #1
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	7dfa      	ldrb	r2, [r7, #23]
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d3d3      	bcc.n	800917c <IntToUnicode+0x18>
  }
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr

080091e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a0d      	ldr	r2, [pc, #52]	; (8009224 <HAL_PCD_MspInit+0x44>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d113      	bne.n	800921a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091f2:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <HAL_PCD_MspInit+0x48>)
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <HAL_PCD_MspInit+0x48>)
 80091f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091fc:	61d3      	str	r3, [r2, #28]
 80091fe:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <HAL_PCD_MspInit+0x48>)
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800920a:	2200      	movs	r2, #0
 800920c:	2100      	movs	r1, #0
 800920e:	2014      	movs	r0, #20
 8009210:	f7f8 fe8b 	bl	8001f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009214:	2014      	movs	r0, #20
 8009216:	f7f8 fea4 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40005c00 	.word	0x40005c00
 8009228:	40021000 	.word	0x40021000

0800922c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009240:	4619      	mov	r1, r3
 8009242:	4610      	mov	r0, r2
 8009244:	f7fe fdf2 	bl	8007e2c <USBD_LL_SetupStage>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	440b      	add	r3, r1
 8009270:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	4619      	mov	r1, r3
 800927a:	f7fe fe24 	bl	8007ec6 <USBD_LL_DataOutStage>
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	440b      	add	r3, r1
 80092a6:	333c      	adds	r3, #60	; 0x3c
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7fe fe7b 	bl	8007fa8 <USBD_LL_DataInStage>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe ff8b 	bl	80081e4 <USBD_LL_SOF>
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d001      	beq.n	80092ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ea:	f7f7 fecb 	bl	8001084 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092f4:	7bfa      	ldrb	r2, [r7, #15]
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe ff3b 	bl	8008174 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fef4 	bl	80080f2 <USBD_LL_Reset>
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe ff35 	bl	8008192 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <HAL_PCD_SuspendCallback+0x30>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	4a03      	ldr	r2, [pc, #12]	; (8009344 <HAL_PCD_SuspendCallback+0x30>)
 8009336:	f043 0306 	orr.w	r3, r3, #6
 800933a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	e000ed00 	.word	0xe000ed00

08009348 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe ff2f 	bl	80081ba <USBD_LL_Resume>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800936c:	4a28      	ldr	r2, [pc, #160]	; (8009410 <USBD_LL_Init+0xac>)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a26      	ldr	r2, [pc, #152]	; (8009410 <USBD_LL_Init+0xac>)
 8009378:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800937c:	4b24      	ldr	r3, [pc, #144]	; (8009410 <USBD_LL_Init+0xac>)
 800937e:	4a25      	ldr	r2, [pc, #148]	; (8009414 <USBD_LL_Init+0xb0>)
 8009380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009382:	4b23      	ldr	r3, [pc, #140]	; (8009410 <USBD_LL_Init+0xac>)
 8009384:	2208      	movs	r2, #8
 8009386:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009388:	4b21      	ldr	r3, [pc, #132]	; (8009410 <USBD_LL_Init+0xac>)
 800938a:	2202      	movs	r2, #2
 800938c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800938e:	4b20      	ldr	r3, [pc, #128]	; (8009410 <USBD_LL_Init+0xac>)
 8009390:	2200      	movs	r2, #0
 8009392:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009394:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <USBD_LL_Init+0xac>)
 8009396:	2200      	movs	r2, #0
 8009398:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800939a:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <USBD_LL_Init+0xac>)
 800939c:	2200      	movs	r2, #0
 800939e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093a0:	481b      	ldr	r0, [pc, #108]	; (8009410 <USBD_LL_Init+0xac>)
 80093a2:	f7f9 f983 	bl	80026ac <HAL_PCD_Init>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80093ac:	f7f7 fe6a 	bl	8001084 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093b6:	2318      	movs	r3, #24
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	f7fa fdf9 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093c6:	2358      	movs	r3, #88	; 0x58
 80093c8:	2200      	movs	r2, #0
 80093ca:	2180      	movs	r1, #128	; 0x80
 80093cc:	f7fa fdf1 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d6:	23c0      	movs	r3, #192	; 0xc0
 80093d8:	2200      	movs	r2, #0
 80093da:	2181      	movs	r1, #129	; 0x81
 80093dc:	f7fa fde9 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093ea:	2200      	movs	r2, #0
 80093ec:	2101      	movs	r1, #1
 80093ee:	f7fa fde0 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093fc:	2200      	movs	r2, #0
 80093fe:	2182      	movs	r1, #130	; 0x82
 8009400:	f7fa fdd7 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20001348 	.word	0x20001348
 8009414:	40005c00 	.word	0x40005c00

08009418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800942e:	4618      	mov	r0, r3
 8009430:	f7f9 fa47 	bl	80028c2 <HAL_PCD_Start>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f94e 	bl	80096dc <USBD_Get_USB_Status>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	461a      	mov	r2, r3
 800945c:	4603      	mov	r3, r0
 800945e:	70fb      	strb	r3, [r7, #3]
 8009460:	460b      	mov	r3, r1
 8009462:	70bb      	strb	r3, [r7, #2]
 8009464:	4613      	mov	r3, r2
 8009466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009476:	78bb      	ldrb	r3, [r7, #2]
 8009478:	883a      	ldrh	r2, [r7, #0]
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	f7f9 fbc1 	bl	8002c02 <HAL_PCD_EP_Open>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f928 	bl	80096dc <USBD_Get_USB_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009490:	7bbb      	ldrb	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f9 fc08 	bl	8002cce <HAL_PCD_EP_Close>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f909 	bl	80096dc <USBD_Get_USB_Status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7f9 fcc8 	bl	8002e8c <HAL_PCD_EP_SetStall>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f8ea 	bl	80096dc <USBD_Get_USB_Status>
 8009508:	4603      	mov	r3, r0
 800950a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950c:	7bbb      	ldrb	r3, [r7, #14]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7f9 fd09 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f8cb 	bl	80096dc <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954a:	7bbb      	ldrb	r3, [r7, #14]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	da0c      	bge.n	800958a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	440b      	add	r3, r1
 8009584:	3302      	adds	r3, #2
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	e00b      	b.n	80095a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	440b      	add	r3, r1
 800959c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f9 faf4 	bl	8002bb8 <HAL_PCD_SetAddress>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f880 	bl	80096dc <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	461a      	mov	r2, r3
 80095f6:	460b      	mov	r3, r1
 80095f8:	72fb      	strb	r3, [r7, #11]
 80095fa:	4613      	mov	r3, r2
 80095fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800960c:	893b      	ldrh	r3, [r7, #8]
 800960e:	7af9      	ldrb	r1, [r7, #11]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	f7f9 fbf8 	bl	8002e06 <HAL_PCD_EP_Transmit>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f85d 	bl	80096dc <USBD_Get_USB_Status>
 8009622:	4603      	mov	r3, r0
 8009624:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009626:	7dbb      	ldrb	r3, [r7, #22]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	461a      	mov	r2, r3
 800963c:	460b      	mov	r3, r1
 800963e:	72fb      	strb	r3, [r7, #11]
 8009640:	4613      	mov	r3, r2
 8009642:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	7af9      	ldrb	r1, [r7, #11]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	f7f9 fb81 	bl	8002d5e <HAL_PCD_EP_Receive>
 800965c:	4603      	mov	r3, r0
 800965e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f83a 	bl	80096dc <USBD_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800966c:	7dbb      	ldrb	r3, [r7, #22]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7f9 fba3 	bl	8002dd8 <HAL_PCD_EP_GetRxCount>
 8009692:	4603      	mov	r3, r0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <USBD_static_malloc+0x14>)
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr
 80096b0:	20000374 	.word	0x20000374

080096b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bc80      	pop	{r7}
 80096c4:	4770      	bx	lr

080096c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr

080096dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d817      	bhi.n	8009720 <USBD_Get_USB_Status+0x44>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <USBD_Get_USB_Status+0x1c>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009709 	.word	0x08009709
 80096fc:	0800970f 	.word	0x0800970f
 8009700:	08009715 	.word	0x08009715
 8009704:	0800971b 	.word	0x0800971b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e00b      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800970e:	2302      	movs	r3, #2
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	e008      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e005      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e002      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009720:	2302      	movs	r3, #2
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	bf00      	nop
  }
  return usb_status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop

08009734 <__errno>:
 8009734:	4b01      	ldr	r3, [pc, #4]	; (800973c <__errno+0x8>)
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	2000017c 	.word	0x2000017c

08009740 <__libc_init_array>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	2600      	movs	r6, #0
 8009744:	4d0c      	ldr	r5, [pc, #48]	; (8009778 <__libc_init_array+0x38>)
 8009746:	4c0d      	ldr	r4, [pc, #52]	; (800977c <__libc_init_array+0x3c>)
 8009748:	1b64      	subs	r4, r4, r5
 800974a:	10a4      	asrs	r4, r4, #2
 800974c:	42a6      	cmp	r6, r4
 800974e:	d109      	bne.n	8009764 <__libc_init_array+0x24>
 8009750:	f004 fc28 	bl	800dfa4 <_init>
 8009754:	2600      	movs	r6, #0
 8009756:	4d0a      	ldr	r5, [pc, #40]	; (8009780 <__libc_init_array+0x40>)
 8009758:	4c0a      	ldr	r4, [pc, #40]	; (8009784 <__libc_init_array+0x44>)
 800975a:	1b64      	subs	r4, r4, r5
 800975c:	10a4      	asrs	r4, r4, #2
 800975e:	42a6      	cmp	r6, r4
 8009760:	d105      	bne.n	800976e <__libc_init_array+0x2e>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	f855 3b04 	ldr.w	r3, [r5], #4
 8009768:	4798      	blx	r3
 800976a:	3601      	adds	r6, #1
 800976c:	e7ee      	b.n	800974c <__libc_init_array+0xc>
 800976e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009772:	4798      	blx	r3
 8009774:	3601      	adds	r6, #1
 8009776:	e7f2      	b.n	800975e <__libc_init_array+0x1e>
 8009778:	0800e4fc 	.word	0x0800e4fc
 800977c:	0800e4fc 	.word	0x0800e4fc
 8009780:	0800e4fc 	.word	0x0800e4fc
 8009784:	0800e500 	.word	0x0800e500

08009788 <memset>:
 8009788:	4603      	mov	r3, r0
 800978a:	4402      	add	r2, r0
 800978c:	4293      	cmp	r3, r2
 800978e:	d100      	bne.n	8009792 <memset+0xa>
 8009790:	4770      	bx	lr
 8009792:	f803 1b01 	strb.w	r1, [r3], #1
 8009796:	e7f9      	b.n	800978c <memset+0x4>

08009798 <__cvt>:
 8009798:	2b00      	cmp	r3, #0
 800979a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800979e:	461f      	mov	r7, r3
 80097a0:	bfbb      	ittet	lt
 80097a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097a6:	461f      	movlt	r7, r3
 80097a8:	2300      	movge	r3, #0
 80097aa:	232d      	movlt	r3, #45	; 0x2d
 80097ac:	b088      	sub	sp, #32
 80097ae:	4614      	mov	r4, r2
 80097b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097b4:	7013      	strb	r3, [r2, #0]
 80097b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80097bc:	f023 0820 	bic.w	r8, r3, #32
 80097c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097c4:	d005      	beq.n	80097d2 <__cvt+0x3a>
 80097c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097ca:	d100      	bne.n	80097ce <__cvt+0x36>
 80097cc:	3501      	adds	r5, #1
 80097ce:	2302      	movs	r3, #2
 80097d0:	e000      	b.n	80097d4 <__cvt+0x3c>
 80097d2:	2303      	movs	r3, #3
 80097d4:	aa07      	add	r2, sp, #28
 80097d6:	9204      	str	r2, [sp, #16]
 80097d8:	aa06      	add	r2, sp, #24
 80097da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80097de:	e9cd 3500 	strd	r3, r5, [sp]
 80097e2:	4622      	mov	r2, r4
 80097e4:	463b      	mov	r3, r7
 80097e6:	f001 fd9f 	bl	800b328 <_dtoa_r>
 80097ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097ee:	4606      	mov	r6, r0
 80097f0:	d102      	bne.n	80097f8 <__cvt+0x60>
 80097f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097f4:	07db      	lsls	r3, r3, #31
 80097f6:	d522      	bpl.n	800983e <__cvt+0xa6>
 80097f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097fc:	eb06 0905 	add.w	r9, r6, r5
 8009800:	d110      	bne.n	8009824 <__cvt+0x8c>
 8009802:	7833      	ldrb	r3, [r6, #0]
 8009804:	2b30      	cmp	r3, #48	; 0x30
 8009806:	d10a      	bne.n	800981e <__cvt+0x86>
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	4620      	mov	r0, r4
 800980e:	4639      	mov	r1, r7
 8009810:	f7f7 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8009814:	b918      	cbnz	r0, 800981e <__cvt+0x86>
 8009816:	f1c5 0501 	rsb	r5, r5, #1
 800981a:	f8ca 5000 	str.w	r5, [sl]
 800981e:	f8da 3000 	ldr.w	r3, [sl]
 8009822:	4499      	add	r9, r3
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	4620      	mov	r0, r4
 800982a:	4639      	mov	r1, r7
 800982c:	f7f7 f8bc 	bl	80009a8 <__aeabi_dcmpeq>
 8009830:	b108      	cbz	r0, 8009836 <__cvt+0x9e>
 8009832:	f8cd 901c 	str.w	r9, [sp, #28]
 8009836:	2230      	movs	r2, #48	; 0x30
 8009838:	9b07      	ldr	r3, [sp, #28]
 800983a:	454b      	cmp	r3, r9
 800983c:	d307      	bcc.n	800984e <__cvt+0xb6>
 800983e:	4630      	mov	r0, r6
 8009840:	9b07      	ldr	r3, [sp, #28]
 8009842:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009844:	1b9b      	subs	r3, r3, r6
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	b008      	add	sp, #32
 800984a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984e:	1c59      	adds	r1, r3, #1
 8009850:	9107      	str	r1, [sp, #28]
 8009852:	701a      	strb	r2, [r3, #0]
 8009854:	e7f0      	b.n	8009838 <__cvt+0xa0>

08009856 <__exponent>:
 8009856:	4603      	mov	r3, r0
 8009858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985a:	2900      	cmp	r1, #0
 800985c:	f803 2b02 	strb.w	r2, [r3], #2
 8009860:	bfb6      	itet	lt
 8009862:	222d      	movlt	r2, #45	; 0x2d
 8009864:	222b      	movge	r2, #43	; 0x2b
 8009866:	4249      	neglt	r1, r1
 8009868:	2909      	cmp	r1, #9
 800986a:	7042      	strb	r2, [r0, #1]
 800986c:	dd2b      	ble.n	80098c6 <__exponent+0x70>
 800986e:	f10d 0407 	add.w	r4, sp, #7
 8009872:	46a4      	mov	ip, r4
 8009874:	270a      	movs	r7, #10
 8009876:	fb91 f6f7 	sdiv	r6, r1, r7
 800987a:	460a      	mov	r2, r1
 800987c:	46a6      	mov	lr, r4
 800987e:	fb07 1516 	mls	r5, r7, r6, r1
 8009882:	2a63      	cmp	r2, #99	; 0x63
 8009884:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009888:	4631      	mov	r1, r6
 800988a:	f104 34ff 	add.w	r4, r4, #4294967295
 800988e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009892:	dcf0      	bgt.n	8009876 <__exponent+0x20>
 8009894:	3130      	adds	r1, #48	; 0x30
 8009896:	f1ae 0502 	sub.w	r5, lr, #2
 800989a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800989e:	4629      	mov	r1, r5
 80098a0:	1c44      	adds	r4, r0, #1
 80098a2:	4561      	cmp	r1, ip
 80098a4:	d30a      	bcc.n	80098bc <__exponent+0x66>
 80098a6:	f10d 0209 	add.w	r2, sp, #9
 80098aa:	eba2 020e 	sub.w	r2, r2, lr
 80098ae:	4565      	cmp	r5, ip
 80098b0:	bf88      	it	hi
 80098b2:	2200      	movhi	r2, #0
 80098b4:	4413      	add	r3, r2
 80098b6:	1a18      	subs	r0, r3, r0
 80098b8:	b003      	add	sp, #12
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098c4:	e7ed      	b.n	80098a2 <__exponent+0x4c>
 80098c6:	2330      	movs	r3, #48	; 0x30
 80098c8:	3130      	adds	r1, #48	; 0x30
 80098ca:	7083      	strb	r3, [r0, #2]
 80098cc:	70c1      	strb	r1, [r0, #3]
 80098ce:	1d03      	adds	r3, r0, #4
 80098d0:	e7f1      	b.n	80098b6 <__exponent+0x60>
	...

080098d4 <_printf_float>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	b091      	sub	sp, #68	; 0x44
 80098da:	460c      	mov	r4, r1
 80098dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80098e0:	4616      	mov	r6, r2
 80098e2:	461f      	mov	r7, r3
 80098e4:	4605      	mov	r5, r0
 80098e6:	f002 fe73 	bl	800c5d0 <_localeconv_r>
 80098ea:	6803      	ldr	r3, [r0, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	f7f6 fc2e 	bl	8000150 <strlen>
 80098f4:	2300      	movs	r3, #0
 80098f6:	930e      	str	r3, [sp, #56]	; 0x38
 80098f8:	f8d8 3000 	ldr.w	r3, [r8]
 80098fc:	900a      	str	r0, [sp, #40]	; 0x28
 80098fe:	3307      	adds	r3, #7
 8009900:	f023 0307 	bic.w	r3, r3, #7
 8009904:	f103 0208 	add.w	r2, r3, #8
 8009908:	f894 9018 	ldrb.w	r9, [r4, #24]
 800990c:	f8d4 b000 	ldr.w	fp, [r4]
 8009910:	f8c8 2000 	str.w	r2, [r8]
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800991c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009920:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009924:	930b      	str	r3, [sp, #44]	; 0x2c
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	4640      	mov	r0, r8
 800992c:	4b9c      	ldr	r3, [pc, #624]	; (8009ba0 <_printf_float+0x2cc>)
 800992e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009930:	f7f7 f86c 	bl	8000a0c <__aeabi_dcmpun>
 8009934:	bb70      	cbnz	r0, 8009994 <_printf_float+0xc0>
 8009936:	f04f 32ff 	mov.w	r2, #4294967295
 800993a:	4640      	mov	r0, r8
 800993c:	4b98      	ldr	r3, [pc, #608]	; (8009ba0 <_printf_float+0x2cc>)
 800993e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009940:	f7f7 f846 	bl	80009d0 <__aeabi_dcmple>
 8009944:	bb30      	cbnz	r0, 8009994 <_printf_float+0xc0>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4640      	mov	r0, r8
 800994c:	4651      	mov	r1, sl
 800994e:	f7f7 f835 	bl	80009bc <__aeabi_dcmplt>
 8009952:	b110      	cbz	r0, 800995a <_printf_float+0x86>
 8009954:	232d      	movs	r3, #45	; 0x2d
 8009956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995a:	4b92      	ldr	r3, [pc, #584]	; (8009ba4 <_printf_float+0x2d0>)
 800995c:	4892      	ldr	r0, [pc, #584]	; (8009ba8 <_printf_float+0x2d4>)
 800995e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009962:	bf94      	ite	ls
 8009964:	4698      	movls	r8, r3
 8009966:	4680      	movhi	r8, r0
 8009968:	2303      	movs	r3, #3
 800996a:	f04f 0a00 	mov.w	sl, #0
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	f02b 0304 	bic.w	r3, fp, #4
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	4633      	mov	r3, r6
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	9700      	str	r7, [sp, #0]
 800997e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009980:	f000 f9d4 	bl	8009d2c <_printf_common>
 8009984:	3001      	adds	r0, #1
 8009986:	f040 8090 	bne.w	8009aaa <_printf_float+0x1d6>
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	b011      	add	sp, #68	; 0x44
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	4642      	mov	r2, r8
 8009996:	4653      	mov	r3, sl
 8009998:	4640      	mov	r0, r8
 800999a:	4651      	mov	r1, sl
 800999c:	f7f7 f836 	bl	8000a0c <__aeabi_dcmpun>
 80099a0:	b148      	cbz	r0, 80099b6 <_printf_float+0xe2>
 80099a2:	f1ba 0f00 	cmp.w	sl, #0
 80099a6:	bfb8      	it	lt
 80099a8:	232d      	movlt	r3, #45	; 0x2d
 80099aa:	4880      	ldr	r0, [pc, #512]	; (8009bac <_printf_float+0x2d8>)
 80099ac:	bfb8      	it	lt
 80099ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099b2:	4b7f      	ldr	r3, [pc, #508]	; (8009bb0 <_printf_float+0x2dc>)
 80099b4:	e7d3      	b.n	800995e <_printf_float+0x8a>
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	d142      	bne.n	8009a46 <_printf_float+0x172>
 80099c0:	2306      	movs	r3, #6
 80099c2:	6063      	str	r3, [r4, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	9206      	str	r2, [sp, #24]
 80099c8:	aa0e      	add	r2, sp, #56	; 0x38
 80099ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80099ce:	aa0d      	add	r2, sp, #52	; 0x34
 80099d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80099da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	4642      	mov	r2, r8
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	4628      	mov	r0, r5
 80099e8:	4653      	mov	r3, sl
 80099ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80099ec:	f7ff fed4 	bl	8009798 <__cvt>
 80099f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099f2:	4680      	mov	r8, r0
 80099f4:	2947      	cmp	r1, #71	; 0x47
 80099f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099f8:	d108      	bne.n	8009a0c <_printf_float+0x138>
 80099fa:	1cc8      	adds	r0, r1, #3
 80099fc:	db02      	blt.n	8009a04 <_printf_float+0x130>
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	4299      	cmp	r1, r3
 8009a02:	dd40      	ble.n	8009a86 <_printf_float+0x1b2>
 8009a04:	f1a9 0902 	sub.w	r9, r9, #2
 8009a08:	fa5f f989 	uxtb.w	r9, r9
 8009a0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a10:	d81f      	bhi.n	8009a52 <_printf_float+0x17e>
 8009a12:	464a      	mov	r2, r9
 8009a14:	3901      	subs	r1, #1
 8009a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8009a1c:	f7ff ff1b 	bl	8009856 <__exponent>
 8009a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a22:	4682      	mov	sl, r0
 8009a24:	1813      	adds	r3, r2, r0
 8009a26:	2a01      	cmp	r2, #1
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	dc02      	bgt.n	8009a32 <_printf_float+0x15e>
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	07d2      	lsls	r2, r2, #31
 8009a30:	d501      	bpl.n	8009a36 <_printf_float+0x162>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d09b      	beq.n	8009976 <_printf_float+0xa2>
 8009a3e:	232d      	movs	r3, #45	; 0x2d
 8009a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a44:	e797      	b.n	8009976 <_printf_float+0xa2>
 8009a46:	2947      	cmp	r1, #71	; 0x47
 8009a48:	d1bc      	bne.n	80099c4 <_printf_float+0xf0>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1ba      	bne.n	80099c4 <_printf_float+0xf0>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7b7      	b.n	80099c2 <_printf_float+0xee>
 8009a52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a56:	d118      	bne.n	8009a8a <_printf_float+0x1b6>
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	dd0b      	ble.n	8009a76 <_printf_float+0x1a2>
 8009a5e:	6121      	str	r1, [r4, #16]
 8009a60:	b913      	cbnz	r3, 8009a68 <_printf_float+0x194>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	07d0      	lsls	r0, r2, #31
 8009a66:	d502      	bpl.n	8009a6e <_printf_float+0x19a>
 8009a68:	3301      	adds	r3, #1
 8009a6a:	440b      	add	r3, r1
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	f04f 0a00 	mov.w	sl, #0
 8009a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a74:	e7df      	b.n	8009a36 <_printf_float+0x162>
 8009a76:	b913      	cbnz	r3, 8009a7e <_printf_float+0x1aa>
 8009a78:	6822      	ldr	r2, [r4, #0]
 8009a7a:	07d2      	lsls	r2, r2, #31
 8009a7c:	d501      	bpl.n	8009a82 <_printf_float+0x1ae>
 8009a7e:	3302      	adds	r3, #2
 8009a80:	e7f4      	b.n	8009a6c <_printf_float+0x198>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e7f2      	b.n	8009a6c <_printf_float+0x198>
 8009a86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	db05      	blt.n	8009a9c <_printf_float+0x1c8>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	6121      	str	r1, [r4, #16]
 8009a94:	07d8      	lsls	r0, r3, #31
 8009a96:	d5ea      	bpl.n	8009a6e <_printf_float+0x19a>
 8009a98:	1c4b      	adds	r3, r1, #1
 8009a9a:	e7e7      	b.n	8009a6c <_printf_float+0x198>
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	bfcc      	ite	gt
 8009aa0:	2201      	movgt	r2, #1
 8009aa2:	f1c1 0202 	rsble	r2, r1, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	e7e0      	b.n	8009a6c <_printf_float+0x198>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	055a      	lsls	r2, r3, #21
 8009aae:	d407      	bmi.n	8009ac0 <_printf_float+0x1ec>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	d12b      	bne.n	8009b16 <_printf_float+0x242>
 8009abe:	e764      	b.n	800998a <_printf_float+0xb6>
 8009ac0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ac4:	f240 80dd 	bls.w	8009c82 <_printf_float+0x3ae>
 8009ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f7f6 ff6a 	bl	80009a8 <__aeabi_dcmpeq>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d033      	beq.n	8009b40 <_printf_float+0x26c>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	4a35      	ldr	r2, [pc, #212]	; (8009bb4 <_printf_float+0x2e0>)
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f43f af51 	beq.w	800998a <_printf_float+0xb6>
 8009ae8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009aec:	429a      	cmp	r2, r3
 8009aee:	db02      	blt.n	8009af6 <_printf_float+0x222>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	07d8      	lsls	r0, r3, #31
 8009af4:	d50f      	bpl.n	8009b16 <_printf_float+0x242>
 8009af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f af42 	beq.w	800998a <_printf_float+0xb6>
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	f104 091a 	add.w	r9, r4, #26
 8009b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b10:	3b01      	subs	r3, #1
 8009b12:	4543      	cmp	r3, r8
 8009b14:	dc09      	bgt.n	8009b2a <_printf_float+0x256>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	079b      	lsls	r3, r3, #30
 8009b1a:	f100 8102 	bmi.w	8009d22 <_printf_float+0x44e>
 8009b1e:	68e0      	ldr	r0, [r4, #12]
 8009b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b22:	4298      	cmp	r0, r3
 8009b24:	bfb8      	it	lt
 8009b26:	4618      	movlt	r0, r3
 8009b28:	e731      	b.n	800998e <_printf_float+0xba>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f af28 	beq.w	800998a <_printf_float+0xb6>
 8009b3a:	f108 0801 	add.w	r8, r8, #1
 8009b3e:	e7e6      	b.n	8009b0e <_printf_float+0x23a>
 8009b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	dc38      	bgt.n	8009bb8 <_printf_float+0x2e4>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	4a19      	ldr	r2, [pc, #100]	; (8009bb4 <_printf_float+0x2e0>)
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f af1a 	beq.w	800998a <_printf_float+0xb6>
 8009b56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	d102      	bne.n	8009b64 <_printf_float+0x290>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	07d9      	lsls	r1, r3, #31
 8009b62:	d5d8      	bpl.n	8009b16 <_printf_float+0x242>
 8009b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af0b 	beq.w	800998a <_printf_float+0xb6>
 8009b74:	f04f 0900 	mov.w	r9, #0
 8009b78:	f104 0a1a 	add.w	sl, r4, #26
 8009b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b7e:	425b      	negs	r3, r3
 8009b80:	454b      	cmp	r3, r9
 8009b82:	dc01      	bgt.n	8009b88 <_printf_float+0x2b4>
 8009b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b86:	e794      	b.n	8009ab2 <_printf_float+0x1de>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f aef9 	beq.w	800998a <_printf_float+0xb6>
 8009b98:	f109 0901 	add.w	r9, r9, #1
 8009b9c:	e7ee      	b.n	8009b7c <_printf_float+0x2a8>
 8009b9e:	bf00      	nop
 8009ba0:	7fefffff 	.word	0x7fefffff
 8009ba4:	0800e04c 	.word	0x0800e04c
 8009ba8:	0800e050 	.word	0x0800e050
 8009bac:	0800e058 	.word	0x0800e058
 8009bb0:	0800e054 	.word	0x0800e054
 8009bb4:	0800e05c 	.word	0x0800e05c
 8009bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	bfa8      	it	ge
 8009bc0:	461a      	movge	r2, r3
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	4691      	mov	r9, r2
 8009bc6:	dc37      	bgt.n	8009c38 <_printf_float+0x364>
 8009bc8:	f04f 0b00 	mov.w	fp, #0
 8009bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd0:	f104 021a 	add.w	r2, r4, #26
 8009bd4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009bd8:	ebaa 0309 	sub.w	r3, sl, r9
 8009bdc:	455b      	cmp	r3, fp
 8009bde:	dc33      	bgt.n	8009c48 <_printf_float+0x374>
 8009be0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009be4:	429a      	cmp	r2, r3
 8009be6:	db3b      	blt.n	8009c60 <_printf_float+0x38c>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	07da      	lsls	r2, r3, #31
 8009bec:	d438      	bmi.n	8009c60 <_printf_float+0x38c>
 8009bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bf2:	eba2 030a 	sub.w	r3, r2, sl
 8009bf6:	eba2 0901 	sub.w	r9, r2, r1
 8009bfa:	4599      	cmp	r9, r3
 8009bfc:	bfa8      	it	ge
 8009bfe:	4699      	movge	r9, r3
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	dc34      	bgt.n	8009c70 <_printf_float+0x39c>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c0e:	f104 0a1a 	add.w	sl, r4, #26
 8009c12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	eba3 0309 	sub.w	r3, r3, r9
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	f77f af7a 	ble.w	8009b16 <_printf_float+0x242>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4652      	mov	r2, sl
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b8      	blx	r7
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f43f aeac 	beq.w	800998a <_printf_float+0xb6>
 8009c32:	f108 0801 	add.w	r8, r8, #1
 8009c36:	e7ec      	b.n	8009c12 <_printf_float+0x33e>
 8009c38:	4613      	mov	r3, r2
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1c0      	bne.n	8009bc8 <_printf_float+0x2f4>
 8009c46:	e6a0      	b.n	800998a <_printf_float+0xb6>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f ae99 	beq.w	800998a <_printf_float+0xb6>
 8009c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c5a:	f10b 0b01 	add.w	fp, fp, #1
 8009c5e:	e7b9      	b.n	8009bd4 <_printf_float+0x300>
 8009c60:	4631      	mov	r1, r6
 8009c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c66:	4628      	mov	r0, r5
 8009c68:	47b8      	blx	r7
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d1bf      	bne.n	8009bee <_printf_float+0x31a>
 8009c6e:	e68c      	b.n	800998a <_printf_float+0xb6>
 8009c70:	464b      	mov	r3, r9
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	eb08 020a 	add.w	r2, r8, sl
 8009c7a:	47b8      	blx	r7
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d1c2      	bne.n	8009c06 <_printf_float+0x332>
 8009c80:	e683      	b.n	800998a <_printf_float+0xb6>
 8009c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c84:	2a01      	cmp	r2, #1
 8009c86:	dc01      	bgt.n	8009c8c <_printf_float+0x3b8>
 8009c88:	07db      	lsls	r3, r3, #31
 8009c8a:	d537      	bpl.n	8009cfc <_printf_float+0x428>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4642      	mov	r2, r8
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f ae77 	beq.w	800998a <_printf_float+0xb6>
 8009c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	47b8      	blx	r7
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f43f ae6f 	beq.w	800998a <_printf_float+0xb6>
 8009cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f7f6 fe78 	bl	80009a8 <__aeabi_dcmpeq>
 8009cb8:	b9d8      	cbnz	r0, 8009cf2 <_printf_float+0x41e>
 8009cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cbc:	f108 0201 	add.w	r2, r8, #1
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d10e      	bne.n	8009cea <_printf_float+0x416>
 8009ccc:	e65d      	b.n	800998a <_printf_float+0xb6>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	464a      	mov	r2, r9
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b8      	blx	r7
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f43f ae56 	beq.w	800998a <_printf_float+0xb6>
 8009cde:	f108 0801 	add.w	r8, r8, #1
 8009ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	4543      	cmp	r3, r8
 8009ce8:	dcf1      	bgt.n	8009cce <_printf_float+0x3fa>
 8009cea:	4653      	mov	r3, sl
 8009cec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cf0:	e6e0      	b.n	8009ab4 <_printf_float+0x1e0>
 8009cf2:	f04f 0800 	mov.w	r8, #0
 8009cf6:	f104 091a 	add.w	r9, r4, #26
 8009cfa:	e7f2      	b.n	8009ce2 <_printf_float+0x40e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4642      	mov	r2, r8
 8009d00:	e7df      	b.n	8009cc2 <_printf_float+0x3ee>
 8009d02:	2301      	movs	r3, #1
 8009d04:	464a      	mov	r2, r9
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f ae3c 	beq.w	800998a <_printf_float+0xb6>
 8009d12:	f108 0801 	add.w	r8, r8, #1
 8009d16:	68e3      	ldr	r3, [r4, #12]
 8009d18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d1a:	1a5b      	subs	r3, r3, r1
 8009d1c:	4543      	cmp	r3, r8
 8009d1e:	dcf0      	bgt.n	8009d02 <_printf_float+0x42e>
 8009d20:	e6fd      	b.n	8009b1e <_printf_float+0x24a>
 8009d22:	f04f 0800 	mov.w	r8, #0
 8009d26:	f104 0919 	add.w	r9, r4, #25
 8009d2a:	e7f4      	b.n	8009d16 <_printf_float+0x442>

08009d2c <_printf_common>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	4616      	mov	r6, r2
 8009d32:	4699      	mov	r9, r3
 8009d34:	688a      	ldr	r2, [r1, #8]
 8009d36:	690b      	ldr	r3, [r1, #16]
 8009d38:	4607      	mov	r7, r0
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	bfb8      	it	lt
 8009d3e:	4613      	movlt	r3, r2
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d46:	460c      	mov	r4, r1
 8009d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d4c:	b10a      	cbz	r2, 8009d52 <_printf_common+0x26>
 8009d4e:	3301      	adds	r3, #1
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	0699      	lsls	r1, r3, #26
 8009d56:	bf42      	ittt	mi
 8009d58:	6833      	ldrmi	r3, [r6, #0]
 8009d5a:	3302      	addmi	r3, #2
 8009d5c:	6033      	strmi	r3, [r6, #0]
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	f015 0506 	ands.w	r5, r5, #6
 8009d64:	d106      	bne.n	8009d74 <_printf_common+0x48>
 8009d66:	f104 0a19 	add.w	sl, r4, #25
 8009d6a:	68e3      	ldr	r3, [r4, #12]
 8009d6c:	6832      	ldr	r2, [r6, #0]
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	42ab      	cmp	r3, r5
 8009d72:	dc28      	bgt.n	8009dc6 <_printf_common+0x9a>
 8009d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d78:	1e13      	subs	r3, r2, #0
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	bf18      	it	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	0692      	lsls	r2, r2, #26
 8009d82:	d42d      	bmi.n	8009de0 <_printf_common+0xb4>
 8009d84:	4649      	mov	r1, r9
 8009d86:	4638      	mov	r0, r7
 8009d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d8c:	47c0      	blx	r8
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d020      	beq.n	8009dd4 <_printf_common+0xa8>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	68e5      	ldr	r5, [r4, #12]
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	bf18      	it	ne
 8009d9e:	2500      	movne	r5, #0
 8009da0:	6832      	ldr	r2, [r6, #0]
 8009da2:	f04f 0600 	mov.w	r6, #0
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	bf08      	it	eq
 8009daa:	1aad      	subeq	r5, r5, r2
 8009dac:	6922      	ldr	r2, [r4, #16]
 8009dae:	bf08      	it	eq
 8009db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db4:	4293      	cmp	r3, r2
 8009db6:	bfc4      	itt	gt
 8009db8:	1a9b      	subgt	r3, r3, r2
 8009dba:	18ed      	addgt	r5, r5, r3
 8009dbc:	341a      	adds	r4, #26
 8009dbe:	42b5      	cmp	r5, r6
 8009dc0:	d11a      	bne.n	8009df8 <_printf_common+0xcc>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e008      	b.n	8009dd8 <_printf_common+0xac>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4652      	mov	r2, sl
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4638      	mov	r0, r7
 8009dce:	47c0      	blx	r8
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d103      	bne.n	8009ddc <_printf_common+0xb0>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ddc:	3501      	adds	r5, #1
 8009dde:	e7c4      	b.n	8009d6a <_printf_common+0x3e>
 8009de0:	2030      	movs	r0, #48	; 0x30
 8009de2:	18e1      	adds	r1, r4, r3
 8009de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dee:	4422      	add	r2, r4
 8009df0:	3302      	adds	r3, #2
 8009df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009df6:	e7c5      	b.n	8009d84 <_printf_common+0x58>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	4638      	mov	r0, r7
 8009e00:	47c0      	blx	r8
 8009e02:	3001      	adds	r0, #1
 8009e04:	d0e6      	beq.n	8009dd4 <_printf_common+0xa8>
 8009e06:	3601      	adds	r6, #1
 8009e08:	e7d9      	b.n	8009dbe <_printf_common+0x92>
	...

08009e0c <_printf_i>:
 8009e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	7e27      	ldrb	r7, [r4, #24]
 8009e14:	4691      	mov	r9, r2
 8009e16:	2f78      	cmp	r7, #120	; 0x78
 8009e18:	4680      	mov	r8, r0
 8009e1a:	469a      	mov	sl, r3
 8009e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e22:	d807      	bhi.n	8009e34 <_printf_i+0x28>
 8009e24:	2f62      	cmp	r7, #98	; 0x62
 8009e26:	d80a      	bhi.n	8009e3e <_printf_i+0x32>
 8009e28:	2f00      	cmp	r7, #0
 8009e2a:	f000 80d9 	beq.w	8009fe0 <_printf_i+0x1d4>
 8009e2e:	2f58      	cmp	r7, #88	; 0x58
 8009e30:	f000 80a4 	beq.w	8009f7c <_printf_i+0x170>
 8009e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e3c:	e03a      	b.n	8009eb4 <_printf_i+0xa8>
 8009e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e42:	2b15      	cmp	r3, #21
 8009e44:	d8f6      	bhi.n	8009e34 <_printf_i+0x28>
 8009e46:	a001      	add	r0, pc, #4	; (adr r0, 8009e4c <_printf_i+0x40>)
 8009e48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e4c:	08009ea5 	.word	0x08009ea5
 8009e50:	08009eb9 	.word	0x08009eb9
 8009e54:	08009e35 	.word	0x08009e35
 8009e58:	08009e35 	.word	0x08009e35
 8009e5c:	08009e35 	.word	0x08009e35
 8009e60:	08009e35 	.word	0x08009e35
 8009e64:	08009eb9 	.word	0x08009eb9
 8009e68:	08009e35 	.word	0x08009e35
 8009e6c:	08009e35 	.word	0x08009e35
 8009e70:	08009e35 	.word	0x08009e35
 8009e74:	08009e35 	.word	0x08009e35
 8009e78:	08009fc7 	.word	0x08009fc7
 8009e7c:	08009ee9 	.word	0x08009ee9
 8009e80:	08009fa9 	.word	0x08009fa9
 8009e84:	08009e35 	.word	0x08009e35
 8009e88:	08009e35 	.word	0x08009e35
 8009e8c:	08009fe9 	.word	0x08009fe9
 8009e90:	08009e35 	.word	0x08009e35
 8009e94:	08009ee9 	.word	0x08009ee9
 8009e98:	08009e35 	.word	0x08009e35
 8009e9c:	08009e35 	.word	0x08009e35
 8009ea0:	08009fb1 	.word	0x08009fb1
 8009ea4:	680b      	ldr	r3, [r1, #0]
 8009ea6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	600a      	str	r2, [r1, #0]
 8009eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e0a4      	b.n	800a002 <_printf_i+0x1f6>
 8009eb8:	6825      	ldr	r5, [r4, #0]
 8009eba:	6808      	ldr	r0, [r1, #0]
 8009ebc:	062e      	lsls	r6, r5, #24
 8009ebe:	f100 0304 	add.w	r3, r0, #4
 8009ec2:	d50a      	bpl.n	8009eda <_printf_i+0xce>
 8009ec4:	6805      	ldr	r5, [r0, #0]
 8009ec6:	600b      	str	r3, [r1, #0]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	da03      	bge.n	8009ed4 <_printf_i+0xc8>
 8009ecc:	232d      	movs	r3, #45	; 0x2d
 8009ece:	426d      	negs	r5, r5
 8009ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	485e      	ldr	r0, [pc, #376]	; (800a050 <_printf_i+0x244>)
 8009ed8:	e019      	b.n	8009f0e <_printf_i+0x102>
 8009eda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ede:	6805      	ldr	r5, [r0, #0]
 8009ee0:	600b      	str	r3, [r1, #0]
 8009ee2:	bf18      	it	ne
 8009ee4:	b22d      	sxthne	r5, r5
 8009ee6:	e7ef      	b.n	8009ec8 <_printf_i+0xbc>
 8009ee8:	680b      	ldr	r3, [r1, #0]
 8009eea:	6825      	ldr	r5, [r4, #0]
 8009eec:	1d18      	adds	r0, r3, #4
 8009eee:	6008      	str	r0, [r1, #0]
 8009ef0:	0628      	lsls	r0, r5, #24
 8009ef2:	d501      	bpl.n	8009ef8 <_printf_i+0xec>
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	e002      	b.n	8009efe <_printf_i+0xf2>
 8009ef8:	0669      	lsls	r1, r5, #25
 8009efa:	d5fb      	bpl.n	8009ef4 <_printf_i+0xe8>
 8009efc:	881d      	ldrh	r5, [r3, #0]
 8009efe:	2f6f      	cmp	r7, #111	; 0x6f
 8009f00:	bf0c      	ite	eq
 8009f02:	2308      	moveq	r3, #8
 8009f04:	230a      	movne	r3, #10
 8009f06:	4852      	ldr	r0, [pc, #328]	; (800a050 <_printf_i+0x244>)
 8009f08:	2100      	movs	r1, #0
 8009f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f0e:	6866      	ldr	r6, [r4, #4]
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	bfa8      	it	ge
 8009f14:	6821      	ldrge	r1, [r4, #0]
 8009f16:	60a6      	str	r6, [r4, #8]
 8009f18:	bfa4      	itt	ge
 8009f1a:	f021 0104 	bicge.w	r1, r1, #4
 8009f1e:	6021      	strge	r1, [r4, #0]
 8009f20:	b90d      	cbnz	r5, 8009f26 <_printf_i+0x11a>
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	d04d      	beq.n	8009fc2 <_printf_i+0x1b6>
 8009f26:	4616      	mov	r6, r2
 8009f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8009f30:	5dc7      	ldrb	r7, [r0, r7]
 8009f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f36:	462f      	mov	r7, r5
 8009f38:	42bb      	cmp	r3, r7
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	d9f4      	bls.n	8009f28 <_printf_i+0x11c>
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d10b      	bne.n	8009f5a <_printf_i+0x14e>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	07df      	lsls	r7, r3, #31
 8009f46:	d508      	bpl.n	8009f5a <_printf_i+0x14e>
 8009f48:	6923      	ldr	r3, [r4, #16]
 8009f4a:	6861      	ldr	r1, [r4, #4]
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	bfde      	ittt	le
 8009f50:	2330      	movle	r3, #48	; 0x30
 8009f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f5a:	1b92      	subs	r2, r2, r6
 8009f5c:	6122      	str	r2, [r4, #16]
 8009f5e:	464b      	mov	r3, r9
 8009f60:	4621      	mov	r1, r4
 8009f62:	4640      	mov	r0, r8
 8009f64:	f8cd a000 	str.w	sl, [sp]
 8009f68:	aa03      	add	r2, sp, #12
 8009f6a:	f7ff fedf 	bl	8009d2c <_printf_common>
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d14c      	bne.n	800a00c <_printf_i+0x200>
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	b004      	add	sp, #16
 8009f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7c:	4834      	ldr	r0, [pc, #208]	; (800a050 <_printf_i+0x244>)
 8009f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f82:	680e      	ldr	r6, [r1, #0]
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f8a:	061f      	lsls	r7, r3, #24
 8009f8c:	600e      	str	r6, [r1, #0]
 8009f8e:	d514      	bpl.n	8009fba <_printf_i+0x1ae>
 8009f90:	07d9      	lsls	r1, r3, #31
 8009f92:	bf44      	itt	mi
 8009f94:	f043 0320 	orrmi.w	r3, r3, #32
 8009f98:	6023      	strmi	r3, [r4, #0]
 8009f9a:	b91d      	cbnz	r5, 8009fa4 <_printf_i+0x198>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	e7af      	b.n	8009f08 <_printf_i+0xfc>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	f043 0320 	orr.w	r3, r3, #32
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	2378      	movs	r3, #120	; 0x78
 8009fb2:	4828      	ldr	r0, [pc, #160]	; (800a054 <_printf_i+0x248>)
 8009fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fb8:	e7e3      	b.n	8009f82 <_printf_i+0x176>
 8009fba:	065e      	lsls	r6, r3, #25
 8009fbc:	bf48      	it	mi
 8009fbe:	b2ad      	uxthmi	r5, r5
 8009fc0:	e7e6      	b.n	8009f90 <_printf_i+0x184>
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	e7bb      	b.n	8009f3e <_printf_i+0x132>
 8009fc6:	680b      	ldr	r3, [r1, #0]
 8009fc8:	6826      	ldr	r6, [r4, #0]
 8009fca:	1d1d      	adds	r5, r3, #4
 8009fcc:	6960      	ldr	r0, [r4, #20]
 8009fce:	600d      	str	r5, [r1, #0]
 8009fd0:	0635      	lsls	r5, r6, #24
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	d501      	bpl.n	8009fda <_printf_i+0x1ce>
 8009fd6:	6018      	str	r0, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <_printf_i+0x1d4>
 8009fda:	0671      	lsls	r1, r6, #25
 8009fdc:	d5fb      	bpl.n	8009fd6 <_printf_i+0x1ca>
 8009fde:	8018      	strh	r0, [r3, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4616      	mov	r6, r2
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	e7ba      	b.n	8009f5e <_printf_i+0x152>
 8009fe8:	680b      	ldr	r3, [r1, #0]
 8009fea:	1d1a      	adds	r2, r3, #4
 8009fec:	600a      	str	r2, [r1, #0]
 8009fee:	681e      	ldr	r6, [r3, #0]
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	6862      	ldr	r2, [r4, #4]
 8009ff6:	f002 fb09 	bl	800c60c <memchr>
 8009ffa:	b108      	cbz	r0, 800a000 <_printf_i+0x1f4>
 8009ffc:	1b80      	subs	r0, r0, r6
 8009ffe:	6060      	str	r0, [r4, #4]
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	2300      	movs	r3, #0
 800a006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a00a:	e7a8      	b.n	8009f5e <_printf_i+0x152>
 800a00c:	4632      	mov	r2, r6
 800a00e:	4649      	mov	r1, r9
 800a010:	4640      	mov	r0, r8
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	47d0      	blx	sl
 800a016:	3001      	adds	r0, #1
 800a018:	d0ab      	beq.n	8009f72 <_printf_i+0x166>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	079b      	lsls	r3, r3, #30
 800a01e:	d413      	bmi.n	800a048 <_printf_i+0x23c>
 800a020:	68e0      	ldr	r0, [r4, #12]
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	4298      	cmp	r0, r3
 800a026:	bfb8      	it	lt
 800a028:	4618      	movlt	r0, r3
 800a02a:	e7a4      	b.n	8009f76 <_printf_i+0x16a>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4632      	mov	r2, r6
 800a030:	4649      	mov	r1, r9
 800a032:	4640      	mov	r0, r8
 800a034:	47d0      	blx	sl
 800a036:	3001      	adds	r0, #1
 800a038:	d09b      	beq.n	8009f72 <_printf_i+0x166>
 800a03a:	3501      	adds	r5, #1
 800a03c:	68e3      	ldr	r3, [r4, #12]
 800a03e:	9903      	ldr	r1, [sp, #12]
 800a040:	1a5b      	subs	r3, r3, r1
 800a042:	42ab      	cmp	r3, r5
 800a044:	dcf2      	bgt.n	800a02c <_printf_i+0x220>
 800a046:	e7eb      	b.n	800a020 <_printf_i+0x214>
 800a048:	2500      	movs	r5, #0
 800a04a:	f104 0619 	add.w	r6, r4, #25
 800a04e:	e7f5      	b.n	800a03c <_printf_i+0x230>
 800a050:	0800e05e 	.word	0x0800e05e
 800a054:	0800e06f 	.word	0x0800e06f

0800a058 <_scanf_float>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	b087      	sub	sp, #28
 800a05e:	9303      	str	r3, [sp, #12]
 800a060:	688b      	ldr	r3, [r1, #8]
 800a062:	4617      	mov	r7, r2
 800a064:	1e5a      	subs	r2, r3, #1
 800a066:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a06a:	bf85      	ittet	hi
 800a06c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a070:	195b      	addhi	r3, r3, r5
 800a072:	2300      	movls	r3, #0
 800a074:	9302      	strhi	r3, [sp, #8]
 800a076:	bf88      	it	hi
 800a078:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a07c:	468b      	mov	fp, r1
 800a07e:	f04f 0500 	mov.w	r5, #0
 800a082:	bf8c      	ite	hi
 800a084:	608b      	strhi	r3, [r1, #8]
 800a086:	9302      	strls	r3, [sp, #8]
 800a088:	680b      	ldr	r3, [r1, #0]
 800a08a:	4680      	mov	r8, r0
 800a08c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a090:	f84b 3b1c 	str.w	r3, [fp], #28
 800a094:	460c      	mov	r4, r1
 800a096:	465e      	mov	r6, fp
 800a098:	46aa      	mov	sl, r5
 800a09a:	46a9      	mov	r9, r5
 800a09c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0a0:	9501      	str	r5, [sp, #4]
 800a0a2:	68a2      	ldr	r2, [r4, #8]
 800a0a4:	b152      	cbz	r2, 800a0bc <_scanf_float+0x64>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b4e      	cmp	r3, #78	; 0x4e
 800a0ac:	d864      	bhi.n	800a178 <_scanf_float+0x120>
 800a0ae:	2b40      	cmp	r3, #64	; 0x40
 800a0b0:	d83c      	bhi.n	800a12c <_scanf_float+0xd4>
 800a0b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0b6:	b2c8      	uxtb	r0, r1
 800a0b8:	280e      	cmp	r0, #14
 800a0ba:	d93a      	bls.n	800a132 <_scanf_float+0xda>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	d003      	beq.n	800a0ca <_scanf_float+0x72>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ce:	f1ba 0f01 	cmp.w	sl, #1
 800a0d2:	f200 8113 	bhi.w	800a2fc <_scanf_float+0x2a4>
 800a0d6:	455e      	cmp	r6, fp
 800a0d8:	f200 8105 	bhi.w	800a2e6 <_scanf_float+0x28e>
 800a0dc:	2501      	movs	r5, #1
 800a0de:	4628      	mov	r0, r5
 800a0e0:	b007      	add	sp, #28
 800a0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0ea:	2a0d      	cmp	r2, #13
 800a0ec:	d8e6      	bhi.n	800a0bc <_scanf_float+0x64>
 800a0ee:	a101      	add	r1, pc, #4	; (adr r1, 800a0f4 <_scanf_float+0x9c>)
 800a0f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0f4:	0800a233 	.word	0x0800a233
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a0bd 	.word	0x0800a0bd
 800a104:	0800a293 	.word	0x0800a293
 800a108:	0800a26b 	.word	0x0800a26b
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a241 	.word	0x0800a241
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a0bd 	.word	0x0800a0bd
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a1f9 	.word	0x0800a1f9
 800a12c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a130:	e7db      	b.n	800a0ea <_scanf_float+0x92>
 800a132:	290e      	cmp	r1, #14
 800a134:	d8c2      	bhi.n	800a0bc <_scanf_float+0x64>
 800a136:	a001      	add	r0, pc, #4	; (adr r0, 800a13c <_scanf_float+0xe4>)
 800a138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a13c:	0800a1eb 	.word	0x0800a1eb
 800a140:	0800a0bd 	.word	0x0800a0bd
 800a144:	0800a1eb 	.word	0x0800a1eb
 800a148:	0800a27f 	.word	0x0800a27f
 800a14c:	0800a0bd 	.word	0x0800a0bd
 800a150:	0800a199 	.word	0x0800a199
 800a154:	0800a1d5 	.word	0x0800a1d5
 800a158:	0800a1d5 	.word	0x0800a1d5
 800a15c:	0800a1d5 	.word	0x0800a1d5
 800a160:	0800a1d5 	.word	0x0800a1d5
 800a164:	0800a1d5 	.word	0x0800a1d5
 800a168:	0800a1d5 	.word	0x0800a1d5
 800a16c:	0800a1d5 	.word	0x0800a1d5
 800a170:	0800a1d5 	.word	0x0800a1d5
 800a174:	0800a1d5 	.word	0x0800a1d5
 800a178:	2b6e      	cmp	r3, #110	; 0x6e
 800a17a:	d809      	bhi.n	800a190 <_scanf_float+0x138>
 800a17c:	2b60      	cmp	r3, #96	; 0x60
 800a17e:	d8b2      	bhi.n	800a0e6 <_scanf_float+0x8e>
 800a180:	2b54      	cmp	r3, #84	; 0x54
 800a182:	d077      	beq.n	800a274 <_scanf_float+0x21c>
 800a184:	2b59      	cmp	r3, #89	; 0x59
 800a186:	d199      	bne.n	800a0bc <_scanf_float+0x64>
 800a188:	2d07      	cmp	r5, #7
 800a18a:	d197      	bne.n	800a0bc <_scanf_float+0x64>
 800a18c:	2508      	movs	r5, #8
 800a18e:	e029      	b.n	800a1e4 <_scanf_float+0x18c>
 800a190:	2b74      	cmp	r3, #116	; 0x74
 800a192:	d06f      	beq.n	800a274 <_scanf_float+0x21c>
 800a194:	2b79      	cmp	r3, #121	; 0x79
 800a196:	e7f6      	b.n	800a186 <_scanf_float+0x12e>
 800a198:	6821      	ldr	r1, [r4, #0]
 800a19a:	05c8      	lsls	r0, r1, #23
 800a19c:	d51a      	bpl.n	800a1d4 <_scanf_float+0x17c>
 800a19e:	9b02      	ldr	r3, [sp, #8]
 800a1a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1a4:	6021      	str	r1, [r4, #0]
 800a1a6:	f109 0901 	add.w	r9, r9, #1
 800a1aa:	b11b      	cbz	r3, 800a1b4 <_scanf_float+0x15c>
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	3201      	adds	r2, #1
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	60a2      	str	r2, [r4, #8]
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	60a3      	str	r3, [r4, #8]
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	607b      	str	r3, [r7, #4]
 800a1c8:	f340 8084 	ble.w	800a2d4 <_scanf_float+0x27c>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	603b      	str	r3, [r7, #0]
 800a1d2:	e766      	b.n	800a0a2 <_scanf_float+0x4a>
 800a1d4:	eb1a 0f05 	cmn.w	sl, r5
 800a1d8:	f47f af70 	bne.w	800a0bc <_scanf_float+0x64>
 800a1dc:	6822      	ldr	r2, [r4, #0]
 800a1de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1e2:	6022      	str	r2, [r4, #0]
 800a1e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1e8:	e7e4      	b.n	800a1b4 <_scanf_float+0x15c>
 800a1ea:	6822      	ldr	r2, [r4, #0]
 800a1ec:	0610      	lsls	r0, r2, #24
 800a1ee:	f57f af65 	bpl.w	800a0bc <_scanf_float+0x64>
 800a1f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1f6:	e7f4      	b.n	800a1e2 <_scanf_float+0x18a>
 800a1f8:	f1ba 0f00 	cmp.w	sl, #0
 800a1fc:	d10e      	bne.n	800a21c <_scanf_float+0x1c4>
 800a1fe:	f1b9 0f00 	cmp.w	r9, #0
 800a202:	d10e      	bne.n	800a222 <_scanf_float+0x1ca>
 800a204:	6822      	ldr	r2, [r4, #0]
 800a206:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a20a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a20e:	d108      	bne.n	800a222 <_scanf_float+0x1ca>
 800a210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a214:	f04f 0a01 	mov.w	sl, #1
 800a218:	6022      	str	r2, [r4, #0]
 800a21a:	e7e3      	b.n	800a1e4 <_scanf_float+0x18c>
 800a21c:	f1ba 0f02 	cmp.w	sl, #2
 800a220:	d055      	beq.n	800a2ce <_scanf_float+0x276>
 800a222:	2d01      	cmp	r5, #1
 800a224:	d002      	beq.n	800a22c <_scanf_float+0x1d4>
 800a226:	2d04      	cmp	r5, #4
 800a228:	f47f af48 	bne.w	800a0bc <_scanf_float+0x64>
 800a22c:	3501      	adds	r5, #1
 800a22e:	b2ed      	uxtb	r5, r5
 800a230:	e7d8      	b.n	800a1e4 <_scanf_float+0x18c>
 800a232:	f1ba 0f01 	cmp.w	sl, #1
 800a236:	f47f af41 	bne.w	800a0bc <_scanf_float+0x64>
 800a23a:	f04f 0a02 	mov.w	sl, #2
 800a23e:	e7d1      	b.n	800a1e4 <_scanf_float+0x18c>
 800a240:	b97d      	cbnz	r5, 800a262 <_scanf_float+0x20a>
 800a242:	f1b9 0f00 	cmp.w	r9, #0
 800a246:	f47f af3c 	bne.w	800a0c2 <_scanf_float+0x6a>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a250:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a254:	f47f af39 	bne.w	800a0ca <_scanf_float+0x72>
 800a258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a25c:	2501      	movs	r5, #1
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	e7c0      	b.n	800a1e4 <_scanf_float+0x18c>
 800a262:	2d03      	cmp	r5, #3
 800a264:	d0e2      	beq.n	800a22c <_scanf_float+0x1d4>
 800a266:	2d05      	cmp	r5, #5
 800a268:	e7de      	b.n	800a228 <_scanf_float+0x1d0>
 800a26a:	2d02      	cmp	r5, #2
 800a26c:	f47f af26 	bne.w	800a0bc <_scanf_float+0x64>
 800a270:	2503      	movs	r5, #3
 800a272:	e7b7      	b.n	800a1e4 <_scanf_float+0x18c>
 800a274:	2d06      	cmp	r5, #6
 800a276:	f47f af21 	bne.w	800a0bc <_scanf_float+0x64>
 800a27a:	2507      	movs	r5, #7
 800a27c:	e7b2      	b.n	800a1e4 <_scanf_float+0x18c>
 800a27e:	6822      	ldr	r2, [r4, #0]
 800a280:	0591      	lsls	r1, r2, #22
 800a282:	f57f af1b 	bpl.w	800a0bc <_scanf_float+0x64>
 800a286:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a28a:	6022      	str	r2, [r4, #0]
 800a28c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a290:	e7a8      	b.n	800a1e4 <_scanf_float+0x18c>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a29c:	d006      	beq.n	800a2ac <_scanf_float+0x254>
 800a29e:	0550      	lsls	r0, r2, #21
 800a2a0:	f57f af0c 	bpl.w	800a0bc <_scanf_float+0x64>
 800a2a4:	f1b9 0f00 	cmp.w	r9, #0
 800a2a8:	f43f af0f 	beq.w	800a0ca <_scanf_float+0x72>
 800a2ac:	0591      	lsls	r1, r2, #22
 800a2ae:	bf58      	it	pl
 800a2b0:	9901      	ldrpl	r1, [sp, #4]
 800a2b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2b6:	bf58      	it	pl
 800a2b8:	eba9 0101 	subpl.w	r1, r9, r1
 800a2bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2c0:	f04f 0900 	mov.w	r9, #0
 800a2c4:	bf58      	it	pl
 800a2c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2ca:	6022      	str	r2, [r4, #0]
 800a2cc:	e78a      	b.n	800a1e4 <_scanf_float+0x18c>
 800a2ce:	f04f 0a03 	mov.w	sl, #3
 800a2d2:	e787      	b.n	800a1e4 <_scanf_float+0x18c>
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2dc:	4798      	blx	r3
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f43f aedf 	beq.w	800a0a2 <_scanf_float+0x4a>
 800a2e4:	e6ea      	b.n	800a0bc <_scanf_float+0x64>
 800a2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2f2:	4798      	blx	r3
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	e6ec      	b.n	800a0d6 <_scanf_float+0x7e>
 800a2fc:	1e6b      	subs	r3, r5, #1
 800a2fe:	2b06      	cmp	r3, #6
 800a300:	d825      	bhi.n	800a34e <_scanf_float+0x2f6>
 800a302:	2d02      	cmp	r5, #2
 800a304:	d836      	bhi.n	800a374 <_scanf_float+0x31c>
 800a306:	455e      	cmp	r6, fp
 800a308:	f67f aee8 	bls.w	800a0dc <_scanf_float+0x84>
 800a30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a310:	463a      	mov	r2, r7
 800a312:	4640      	mov	r0, r8
 800a314:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a318:	4798      	blx	r3
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	e7f1      	b.n	800a306 <_scanf_float+0x2ae>
 800a322:	9802      	ldr	r0, [sp, #8]
 800a324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a328:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a32c:	463a      	mov	r2, r7
 800a32e:	9002      	str	r0, [sp, #8]
 800a330:	4640      	mov	r0, r8
 800a332:	4798      	blx	r3
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	3b01      	subs	r3, #1
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a33e:	fa5f fa8a 	uxtb.w	sl, sl
 800a342:	f1ba 0f02 	cmp.w	sl, #2
 800a346:	d1ec      	bne.n	800a322 <_scanf_float+0x2ca>
 800a348:	3d03      	subs	r5, #3
 800a34a:	b2ed      	uxtb	r5, r5
 800a34c:	1b76      	subs	r6, r6, r5
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	05da      	lsls	r2, r3, #23
 800a352:	d52f      	bpl.n	800a3b4 <_scanf_float+0x35c>
 800a354:	055b      	lsls	r3, r3, #21
 800a356:	d510      	bpl.n	800a37a <_scanf_float+0x322>
 800a358:	455e      	cmp	r6, fp
 800a35a:	f67f aebf 	bls.w	800a0dc <_scanf_float+0x84>
 800a35e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a362:	463a      	mov	r2, r7
 800a364:	4640      	mov	r0, r8
 800a366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a36a:	4798      	blx	r3
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	3b01      	subs	r3, #1
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	e7f1      	b.n	800a358 <_scanf_float+0x300>
 800a374:	46aa      	mov	sl, r5
 800a376:	9602      	str	r6, [sp, #8]
 800a378:	e7df      	b.n	800a33a <_scanf_float+0x2e2>
 800a37a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	2965      	cmp	r1, #101	; 0x65
 800a382:	f103 33ff 	add.w	r3, r3, #4294967295
 800a386:	f106 35ff 	add.w	r5, r6, #4294967295
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	d00c      	beq.n	800a3a8 <_scanf_float+0x350>
 800a38e:	2945      	cmp	r1, #69	; 0x45
 800a390:	d00a      	beq.n	800a3a8 <_scanf_float+0x350>
 800a392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a396:	463a      	mov	r2, r7
 800a398:	4640      	mov	r0, r8
 800a39a:	4798      	blx	r3
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	1eb5      	subs	r5, r6, #2
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	463a      	mov	r2, r7
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3b0:	4798      	blx	r3
 800a3b2:	462e      	mov	r6, r5
 800a3b4:	6825      	ldr	r5, [r4, #0]
 800a3b6:	f015 0510 	ands.w	r5, r5, #16
 800a3ba:	d159      	bne.n	800a470 <_scanf_float+0x418>
 800a3bc:	7035      	strb	r5, [r6, #0]
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c8:	d11c      	bne.n	800a404 <_scanf_float+0x3ac>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	454b      	cmp	r3, r9
 800a3ce:	eba3 0209 	sub.w	r2, r3, r9
 800a3d2:	d124      	bne.n	800a41e <_scanf_float+0x3c6>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4659      	mov	r1, fp
 800a3d8:	4640      	mov	r0, r8
 800a3da:	f000 fe89 	bl	800b0f0 <_strtod_r>
 800a3de:	f8d4 c000 	ldr.w	ip, [r4]
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	f01c 0f02 	tst.w	ip, #2
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	460f      	mov	r7, r1
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	d021      	beq.n	800a434 <_scanf_float+0x3dc>
 800a3f0:	9903      	ldr	r1, [sp, #12]
 800a3f2:	1d1a      	adds	r2, r3, #4
 800a3f4:	600a      	str	r2, [r1, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	e9c3 6700 	strd	r6, r7, [r3]
 800a3fc:	68e3      	ldr	r3, [r4, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60e3      	str	r3, [r4, #12]
 800a402:	e66c      	b.n	800a0de <_scanf_float+0x86>
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0e4      	beq.n	800a3d4 <_scanf_float+0x37c>
 800a40a:	9905      	ldr	r1, [sp, #20]
 800a40c:	230a      	movs	r3, #10
 800a40e:	462a      	mov	r2, r5
 800a410:	4640      	mov	r0, r8
 800a412:	3101      	adds	r1, #1
 800a414:	f000 fef8 	bl	800b208 <_strtol_r>
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	9e05      	ldr	r6, [sp, #20]
 800a41c:	1ac2      	subs	r2, r0, r3
 800a41e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a422:	429e      	cmp	r6, r3
 800a424:	bf28      	it	cs
 800a426:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a42a:	4630      	mov	r0, r6
 800a42c:	4911      	ldr	r1, [pc, #68]	; (800a474 <_scanf_float+0x41c>)
 800a42e:	f000 f829 	bl	800a484 <siprintf>
 800a432:	e7cf      	b.n	800a3d4 <_scanf_float+0x37c>
 800a434:	f01c 0f04 	tst.w	ip, #4
 800a438:	f103 0e04 	add.w	lr, r3, #4
 800a43c:	d003      	beq.n	800a446 <_scanf_float+0x3ee>
 800a43e:	9903      	ldr	r1, [sp, #12]
 800a440:	f8c1 e000 	str.w	lr, [r1]
 800a444:	e7d7      	b.n	800a3f6 <_scanf_float+0x39e>
 800a446:	9a03      	ldr	r2, [sp, #12]
 800a448:	f8c2 e000 	str.w	lr, [r2]
 800a44c:	f8d3 8000 	ldr.w	r8, [r3]
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	f7f6 fada 	bl	8000a0c <__aeabi_dcmpun>
 800a458:	b128      	cbz	r0, 800a466 <_scanf_float+0x40e>
 800a45a:	4807      	ldr	r0, [pc, #28]	; (800a478 <_scanf_float+0x420>)
 800a45c:	f000 f80e 	bl	800a47c <nanf>
 800a460:	f8c8 0000 	str.w	r0, [r8]
 800a464:	e7ca      	b.n	800a3fc <_scanf_float+0x3a4>
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f6 fb2d 	bl	8000ac8 <__aeabi_d2f>
 800a46e:	e7f7      	b.n	800a460 <_scanf_float+0x408>
 800a470:	2500      	movs	r5, #0
 800a472:	e634      	b.n	800a0de <_scanf_float+0x86>
 800a474:	0800e080 	.word	0x0800e080
 800a478:	0800e498 	.word	0x0800e498

0800a47c <nanf>:
 800a47c:	4800      	ldr	r0, [pc, #0]	; (800a480 <nanf+0x4>)
 800a47e:	4770      	bx	lr
 800a480:	7fc00000 	.word	0x7fc00000

0800a484 <siprintf>:
 800a484:	b40e      	push	{r1, r2, r3}
 800a486:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a48a:	b500      	push	{lr}
 800a48c:	b09c      	sub	sp, #112	; 0x70
 800a48e:	ab1d      	add	r3, sp, #116	; 0x74
 800a490:	9002      	str	r0, [sp, #8]
 800a492:	9006      	str	r0, [sp, #24]
 800a494:	9107      	str	r1, [sp, #28]
 800a496:	9104      	str	r1, [sp, #16]
 800a498:	4808      	ldr	r0, [pc, #32]	; (800a4bc <siprintf+0x38>)
 800a49a:	4909      	ldr	r1, [pc, #36]	; (800a4c0 <siprintf+0x3c>)
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	9105      	str	r1, [sp, #20]
 800a4a2:	6800      	ldr	r0, [r0, #0]
 800a4a4:	a902      	add	r1, sp, #8
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	f002 fe94 	bl	800d1d4 <_svfiprintf_r>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	9b02      	ldr	r3, [sp, #8]
 800a4b0:	701a      	strb	r2, [r3, #0]
 800a4b2:	b01c      	add	sp, #112	; 0x70
 800a4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b8:	b003      	add	sp, #12
 800a4ba:	4770      	bx	lr
 800a4bc:	2000017c 	.word	0x2000017c
 800a4c0:	ffff0208 	.word	0xffff0208

0800a4c4 <sulp>:
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	460f      	mov	r7, r1
 800a4ca:	4690      	mov	r8, r2
 800a4cc:	f002 fc2a 	bl	800cd24 <__ulp>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	f1b8 0f00 	cmp.w	r8, #0
 800a4d8:	d011      	beq.n	800a4fe <sulp+0x3a>
 800a4da:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a4de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd0b      	ble.n	800a4fe <sulp+0x3a>
 800a4e6:	2400      	movs	r4, #0
 800a4e8:	051b      	lsls	r3, r3, #20
 800a4ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	462b      	mov	r3, r5
 800a4f6:	f7f5 ffef 	bl	80004d8 <__aeabi_dmul>
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a508 <_strtod_l>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	469b      	mov	fp, r3
 800a50e:	2300      	movs	r3, #0
 800a510:	b0a1      	sub	sp, #132	; 0x84
 800a512:	931c      	str	r3, [sp, #112]	; 0x70
 800a514:	4ba1      	ldr	r3, [pc, #644]	; (800a79c <_strtod_l+0x294>)
 800a516:	4682      	mov	sl, r0
 800a518:	681f      	ldr	r7, [r3, #0]
 800a51a:	460e      	mov	r6, r1
 800a51c:	4638      	mov	r0, r7
 800a51e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a520:	f7f5 fe16 	bl	8000150 <strlen>
 800a524:	f04f 0800 	mov.w	r8, #0
 800a528:	4604      	mov	r4, r0
 800a52a:	f04f 0900 	mov.w	r9, #0
 800a52e:	961b      	str	r6, [sp, #108]	; 0x6c
 800a530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	2a2b      	cmp	r2, #43	; 0x2b
 800a536:	d04c      	beq.n	800a5d2 <_strtod_l+0xca>
 800a538:	d83a      	bhi.n	800a5b0 <_strtod_l+0xa8>
 800a53a:	2a0d      	cmp	r2, #13
 800a53c:	d833      	bhi.n	800a5a6 <_strtod_l+0x9e>
 800a53e:	2a08      	cmp	r2, #8
 800a540:	d833      	bhi.n	800a5aa <_strtod_l+0xa2>
 800a542:	2a00      	cmp	r2, #0
 800a544:	d03d      	beq.n	800a5c2 <_strtod_l+0xba>
 800a546:	2300      	movs	r3, #0
 800a548:	930c      	str	r3, [sp, #48]	; 0x30
 800a54a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a54c:	782b      	ldrb	r3, [r5, #0]
 800a54e:	2b30      	cmp	r3, #48	; 0x30
 800a550:	f040 80af 	bne.w	800a6b2 <_strtod_l+0x1aa>
 800a554:	786b      	ldrb	r3, [r5, #1]
 800a556:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a55a:	2b58      	cmp	r3, #88	; 0x58
 800a55c:	d16c      	bne.n	800a638 <_strtod_l+0x130>
 800a55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a560:	4650      	mov	r0, sl
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	ab1c      	add	r3, sp, #112	; 0x70
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4a8d      	ldr	r2, [pc, #564]	; (800a7a0 <_strtod_l+0x298>)
 800a56a:	f8cd b008 	str.w	fp, [sp, #8]
 800a56e:	ab1d      	add	r3, sp, #116	; 0x74
 800a570:	a91b      	add	r1, sp, #108	; 0x6c
 800a572:	f001 fd2f 	bl	800bfd4 <__gethex>
 800a576:	f010 0607 	ands.w	r6, r0, #7
 800a57a:	4604      	mov	r4, r0
 800a57c:	d005      	beq.n	800a58a <_strtod_l+0x82>
 800a57e:	2e06      	cmp	r6, #6
 800a580:	d129      	bne.n	800a5d6 <_strtod_l+0xce>
 800a582:	2300      	movs	r3, #0
 800a584:	3501      	adds	r5, #1
 800a586:	951b      	str	r5, [sp, #108]	; 0x6c
 800a588:	930c      	str	r3, [sp, #48]	; 0x30
 800a58a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8596 	bne.w	800b0be <_strtod_l+0xbb6>
 800a592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a594:	b1d3      	cbz	r3, 800a5cc <_strtod_l+0xc4>
 800a596:	4642      	mov	r2, r8
 800a598:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a59c:	4610      	mov	r0, r2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	b021      	add	sp, #132	; 0x84
 800a5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a6:	2a20      	cmp	r2, #32
 800a5a8:	d1cd      	bne.n	800a546 <_strtod_l+0x3e>
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5ae:	e7bf      	b.n	800a530 <_strtod_l+0x28>
 800a5b0:	2a2d      	cmp	r2, #45	; 0x2d
 800a5b2:	d1c8      	bne.n	800a546 <_strtod_l+0x3e>
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	920c      	str	r2, [sp, #48]	; 0x30
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5bc:	785b      	ldrb	r3, [r3, #1]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1c3      	bne.n	800a54a <_strtod_l+0x42>
 800a5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 8577 	bne.w	800b0ba <_strtod_l+0xbb2>
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	464b      	mov	r3, r9
 800a5d0:	e7e4      	b.n	800a59c <_strtod_l+0x94>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	e7ef      	b.n	800a5b6 <_strtod_l+0xae>
 800a5d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5d8:	b13a      	cbz	r2, 800a5ea <_strtod_l+0xe2>
 800a5da:	2135      	movs	r1, #53	; 0x35
 800a5dc:	a81e      	add	r0, sp, #120	; 0x78
 800a5de:	f002 fca5 	bl	800cf2c <__copybits>
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5e6:	f002 f86d 	bl	800c6c4 <_Bfree>
 800a5ea:	3e01      	subs	r6, #1
 800a5ec:	2e05      	cmp	r6, #5
 800a5ee:	d807      	bhi.n	800a600 <_strtod_l+0xf8>
 800a5f0:	e8df f006 	tbb	[pc, r6]
 800a5f4:	1d180b0e 	.word	0x1d180b0e
 800a5f8:	030e      	.short	0x030e
 800a5fa:	f04f 0900 	mov.w	r9, #0
 800a5fe:	46c8      	mov	r8, r9
 800a600:	0721      	lsls	r1, r4, #28
 800a602:	d5c2      	bpl.n	800a58a <_strtod_l+0x82>
 800a604:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a608:	e7bf      	b.n	800a58a <_strtod_l+0x82>
 800a60a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a60e:	e7f7      	b.n	800a600 <_strtod_l+0xf8>
 800a610:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a612:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a616:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a61a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a61e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a622:	e7ed      	b.n	800a600 <_strtod_l+0xf8>
 800a624:	f04f 0800 	mov.w	r8, #0
 800a628:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a7a4 <_strtod_l+0x29c>
 800a62c:	e7e8      	b.n	800a600 <_strtod_l+0xf8>
 800a62e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a632:	f04f 38ff 	mov.w	r8, #4294967295
 800a636:	e7e3      	b.n	800a600 <_strtod_l+0xf8>
 800a638:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b30      	cmp	r3, #48	; 0x30
 800a642:	d0f9      	beq.n	800a638 <_strtod_l+0x130>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0a0      	beq.n	800a58a <_strtod_l+0x82>
 800a648:	2301      	movs	r3, #1
 800a64a:	9307      	str	r3, [sp, #28]
 800a64c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a64e:	220a      	movs	r2, #10
 800a650:	9308      	str	r3, [sp, #32]
 800a652:	2300      	movs	r3, #0
 800a654:	469b      	mov	fp, r3
 800a656:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a65a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a65c:	7805      	ldrb	r5, [r0, #0]
 800a65e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a662:	b2d9      	uxtb	r1, r3
 800a664:	2909      	cmp	r1, #9
 800a666:	d926      	bls.n	800a6b6 <_strtod_l+0x1ae>
 800a668:	4622      	mov	r2, r4
 800a66a:	4639      	mov	r1, r7
 800a66c:	f002 fec8 	bl	800d400 <strncmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	d032      	beq.n	800a6da <_strtod_l+0x1d2>
 800a674:	2000      	movs	r0, #0
 800a676:	462b      	mov	r3, r5
 800a678:	465c      	mov	r4, fp
 800a67a:	4602      	mov	r2, r0
 800a67c:	9004      	str	r0, [sp, #16]
 800a67e:	2b65      	cmp	r3, #101	; 0x65
 800a680:	d001      	beq.n	800a686 <_strtod_l+0x17e>
 800a682:	2b45      	cmp	r3, #69	; 0x45
 800a684:	d113      	bne.n	800a6ae <_strtod_l+0x1a6>
 800a686:	b91c      	cbnz	r4, 800a690 <_strtod_l+0x188>
 800a688:	9b07      	ldr	r3, [sp, #28]
 800a68a:	4303      	orrs	r3, r0
 800a68c:	d099      	beq.n	800a5c2 <_strtod_l+0xba>
 800a68e:	2400      	movs	r4, #0
 800a690:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a692:	1c73      	adds	r3, r6, #1
 800a694:	931b      	str	r3, [sp, #108]	; 0x6c
 800a696:	7873      	ldrb	r3, [r6, #1]
 800a698:	2b2b      	cmp	r3, #43	; 0x2b
 800a69a:	d078      	beq.n	800a78e <_strtod_l+0x286>
 800a69c:	2b2d      	cmp	r3, #45	; 0x2d
 800a69e:	d07b      	beq.n	800a798 <_strtod_l+0x290>
 800a6a0:	2700      	movs	r7, #0
 800a6a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a6a6:	2909      	cmp	r1, #9
 800a6a8:	f240 8082 	bls.w	800a7b0 <_strtod_l+0x2a8>
 800a6ac:	961b      	str	r6, [sp, #108]	; 0x6c
 800a6ae:	2500      	movs	r5, #0
 800a6b0:	e09e      	b.n	800a7f0 <_strtod_l+0x2e8>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e7c9      	b.n	800a64a <_strtod_l+0x142>
 800a6b6:	f1bb 0f08 	cmp.w	fp, #8
 800a6ba:	bfd5      	itete	le
 800a6bc:	9906      	ldrle	r1, [sp, #24]
 800a6be:	9905      	ldrgt	r1, [sp, #20]
 800a6c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a6c8:	f100 0001 	add.w	r0, r0, #1
 800a6cc:	bfd4      	ite	le
 800a6ce:	9306      	strle	r3, [sp, #24]
 800a6d0:	9305      	strgt	r3, [sp, #20]
 800a6d2:	f10b 0b01 	add.w	fp, fp, #1
 800a6d6:	901b      	str	r0, [sp, #108]	; 0x6c
 800a6d8:	e7bf      	b.n	800a65a <_strtod_l+0x152>
 800a6da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6dc:	191a      	adds	r2, r3, r4
 800a6de:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6e0:	5d1b      	ldrb	r3, [r3, r4]
 800a6e2:	f1bb 0f00 	cmp.w	fp, #0
 800a6e6:	d036      	beq.n	800a756 <_strtod_l+0x24e>
 800a6e8:	465c      	mov	r4, fp
 800a6ea:	9004      	str	r0, [sp, #16]
 800a6ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a6f0:	2a09      	cmp	r2, #9
 800a6f2:	d912      	bls.n	800a71a <_strtod_l+0x212>
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	e7c2      	b.n	800a67e <_strtod_l+0x176>
 800a6f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	921b      	str	r2, [sp, #108]	; 0x6c
 800a700:	785b      	ldrb	r3, [r3, #1]
 800a702:	2b30      	cmp	r3, #48	; 0x30
 800a704:	d0f8      	beq.n	800a6f8 <_strtod_l+0x1f0>
 800a706:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a70a:	2a08      	cmp	r2, #8
 800a70c:	f200 84dc 	bhi.w	800b0c8 <_strtod_l+0xbc0>
 800a710:	9004      	str	r0, [sp, #16]
 800a712:	2000      	movs	r0, #0
 800a714:	4604      	mov	r4, r0
 800a716:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a718:	9208      	str	r2, [sp, #32]
 800a71a:	3b30      	subs	r3, #48	; 0x30
 800a71c:	f100 0201 	add.w	r2, r0, #1
 800a720:	d013      	beq.n	800a74a <_strtod_l+0x242>
 800a722:	9904      	ldr	r1, [sp, #16]
 800a724:	1905      	adds	r5, r0, r4
 800a726:	4411      	add	r1, r2
 800a728:	9104      	str	r1, [sp, #16]
 800a72a:	4622      	mov	r2, r4
 800a72c:	210a      	movs	r1, #10
 800a72e:	42aa      	cmp	r2, r5
 800a730:	d113      	bne.n	800a75a <_strtod_l+0x252>
 800a732:	1822      	adds	r2, r4, r0
 800a734:	2a08      	cmp	r2, #8
 800a736:	f104 0401 	add.w	r4, r4, #1
 800a73a:	4404      	add	r4, r0
 800a73c:	dc1b      	bgt.n	800a776 <_strtod_l+0x26e>
 800a73e:	220a      	movs	r2, #10
 800a740:	9906      	ldr	r1, [sp, #24]
 800a742:	fb02 3301 	mla	r3, r2, r1, r3
 800a746:	9306      	str	r3, [sp, #24]
 800a748:	2200      	movs	r2, #0
 800a74a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a74c:	4610      	mov	r0, r2
 800a74e:	1c59      	adds	r1, r3, #1
 800a750:	911b      	str	r1, [sp, #108]	; 0x6c
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	e7ca      	b.n	800a6ec <_strtod_l+0x1e4>
 800a756:	4658      	mov	r0, fp
 800a758:	e7d3      	b.n	800a702 <_strtod_l+0x1fa>
 800a75a:	2a08      	cmp	r2, #8
 800a75c:	dc04      	bgt.n	800a768 <_strtod_l+0x260>
 800a75e:	9f06      	ldr	r7, [sp, #24]
 800a760:	434f      	muls	r7, r1
 800a762:	9706      	str	r7, [sp, #24]
 800a764:	3201      	adds	r2, #1
 800a766:	e7e2      	b.n	800a72e <_strtod_l+0x226>
 800a768:	1c57      	adds	r7, r2, #1
 800a76a:	2f10      	cmp	r7, #16
 800a76c:	bfde      	ittt	le
 800a76e:	9f05      	ldrle	r7, [sp, #20]
 800a770:	434f      	mulle	r7, r1
 800a772:	9705      	strle	r7, [sp, #20]
 800a774:	e7f6      	b.n	800a764 <_strtod_l+0x25c>
 800a776:	2c10      	cmp	r4, #16
 800a778:	bfdf      	itttt	le
 800a77a:	220a      	movle	r2, #10
 800a77c:	9905      	ldrle	r1, [sp, #20]
 800a77e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a782:	9305      	strle	r3, [sp, #20]
 800a784:	e7e0      	b.n	800a748 <_strtod_l+0x240>
 800a786:	2300      	movs	r3, #0
 800a788:	2201      	movs	r2, #1
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	e77c      	b.n	800a688 <_strtod_l+0x180>
 800a78e:	2700      	movs	r7, #0
 800a790:	1cb3      	adds	r3, r6, #2
 800a792:	931b      	str	r3, [sp, #108]	; 0x6c
 800a794:	78b3      	ldrb	r3, [r6, #2]
 800a796:	e784      	b.n	800a6a2 <_strtod_l+0x19a>
 800a798:	2701      	movs	r7, #1
 800a79a:	e7f9      	b.n	800a790 <_strtod_l+0x288>
 800a79c:	0800e2d8 	.word	0x0800e2d8
 800a7a0:	0800e088 	.word	0x0800e088
 800a7a4:	7ff00000 	.word	0x7ff00000
 800a7a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7aa:	1c59      	adds	r1, r3, #1
 800a7ac:	911b      	str	r1, [sp, #108]	; 0x6c
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	2b30      	cmp	r3, #48	; 0x30
 800a7b2:	d0f9      	beq.n	800a7a8 <_strtod_l+0x2a0>
 800a7b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a7b8:	2908      	cmp	r1, #8
 800a7ba:	f63f af78 	bhi.w	800a6ae <_strtod_l+0x1a6>
 800a7be:	f04f 0e0a 	mov.w	lr, #10
 800a7c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a7c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7cc:	1c59      	adds	r1, r3, #1
 800a7ce:	911b      	str	r1, [sp, #108]	; 0x6c
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a7d6:	2d09      	cmp	r5, #9
 800a7d8:	d935      	bls.n	800a846 <_strtod_l+0x33e>
 800a7da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a7dc:	1b49      	subs	r1, r1, r5
 800a7de:	2908      	cmp	r1, #8
 800a7e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a7e4:	dc02      	bgt.n	800a7ec <_strtod_l+0x2e4>
 800a7e6:	4565      	cmp	r5, ip
 800a7e8:	bfa8      	it	ge
 800a7ea:	4665      	movge	r5, ip
 800a7ec:	b107      	cbz	r7, 800a7f0 <_strtod_l+0x2e8>
 800a7ee:	426d      	negs	r5, r5
 800a7f0:	2c00      	cmp	r4, #0
 800a7f2:	d14c      	bne.n	800a88e <_strtod_l+0x386>
 800a7f4:	9907      	ldr	r1, [sp, #28]
 800a7f6:	4301      	orrs	r1, r0
 800a7f8:	f47f aec7 	bne.w	800a58a <_strtod_l+0x82>
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	f47f aee0 	bne.w	800a5c2 <_strtod_l+0xba>
 800a802:	2b69      	cmp	r3, #105	; 0x69
 800a804:	d026      	beq.n	800a854 <_strtod_l+0x34c>
 800a806:	dc23      	bgt.n	800a850 <_strtod_l+0x348>
 800a808:	2b49      	cmp	r3, #73	; 0x49
 800a80a:	d023      	beq.n	800a854 <_strtod_l+0x34c>
 800a80c:	2b4e      	cmp	r3, #78	; 0x4e
 800a80e:	f47f aed8 	bne.w	800a5c2 <_strtod_l+0xba>
 800a812:	499c      	ldr	r1, [pc, #624]	; (800aa84 <_strtod_l+0x57c>)
 800a814:	a81b      	add	r0, sp, #108	; 0x6c
 800a816:	f001 fe2b 	bl	800c470 <__match>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f43f aed1 	beq.w	800a5c2 <_strtod_l+0xba>
 800a820:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b28      	cmp	r3, #40	; 0x28
 800a826:	d12c      	bne.n	800a882 <_strtod_l+0x37a>
 800a828:	4997      	ldr	r1, [pc, #604]	; (800aa88 <_strtod_l+0x580>)
 800a82a:	aa1e      	add	r2, sp, #120	; 0x78
 800a82c:	a81b      	add	r0, sp, #108	; 0x6c
 800a82e:	f001 fe33 	bl	800c498 <__hexnan>
 800a832:	2805      	cmp	r0, #5
 800a834:	d125      	bne.n	800a882 <_strtod_l+0x37a>
 800a836:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a838:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a83c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a840:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a844:	e6a1      	b.n	800a58a <_strtod_l+0x82>
 800a846:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a84a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a84e:	e7bc      	b.n	800a7ca <_strtod_l+0x2c2>
 800a850:	2b6e      	cmp	r3, #110	; 0x6e
 800a852:	e7dc      	b.n	800a80e <_strtod_l+0x306>
 800a854:	498d      	ldr	r1, [pc, #564]	; (800aa8c <_strtod_l+0x584>)
 800a856:	a81b      	add	r0, sp, #108	; 0x6c
 800a858:	f001 fe0a 	bl	800c470 <__match>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f43f aeb0 	beq.w	800a5c2 <_strtod_l+0xba>
 800a862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a864:	498a      	ldr	r1, [pc, #552]	; (800aa90 <_strtod_l+0x588>)
 800a866:	3b01      	subs	r3, #1
 800a868:	a81b      	add	r0, sp, #108	; 0x6c
 800a86a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a86c:	f001 fe00 	bl	800c470 <__match>
 800a870:	b910      	cbnz	r0, 800a878 <_strtod_l+0x370>
 800a872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a874:	3301      	adds	r3, #1
 800a876:	931b      	str	r3, [sp, #108]	; 0x6c
 800a878:	f04f 0800 	mov.w	r8, #0
 800a87c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800aaa0 <_strtod_l+0x598>
 800a880:	e683      	b.n	800a58a <_strtod_l+0x82>
 800a882:	4884      	ldr	r0, [pc, #528]	; (800aa94 <_strtod_l+0x58c>)
 800a884:	f002 fda6 	bl	800d3d4 <nan>
 800a888:	4680      	mov	r8, r0
 800a88a:	4689      	mov	r9, r1
 800a88c:	e67d      	b.n	800a58a <_strtod_l+0x82>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	f1bb 0f00 	cmp.w	fp, #0
 800a894:	bf08      	it	eq
 800a896:	46a3      	moveq	fp, r4
 800a898:	1aeb      	subs	r3, r5, r3
 800a89a:	2c10      	cmp	r4, #16
 800a89c:	9806      	ldr	r0, [sp, #24]
 800a89e:	4626      	mov	r6, r4
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	bfa8      	it	ge
 800a8a4:	2610      	movge	r6, #16
 800a8a6:	f7f5 fd9d 	bl	80003e4 <__aeabi_ui2d>
 800a8aa:	2c09      	cmp	r4, #9
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	dd13      	ble.n	800a8da <_strtod_l+0x3d2>
 800a8b2:	4b79      	ldr	r3, [pc, #484]	; (800aa98 <_strtod_l+0x590>)
 800a8b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8bc:	f7f5 fe0c 	bl	80004d8 <__aeabi_dmul>
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	9805      	ldr	r0, [sp, #20]
 800a8c4:	4689      	mov	r9, r1
 800a8c6:	f7f5 fd8d 	bl	80003e4 <__aeabi_ui2d>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	f7f5 fc4b 	bl	800016c <__adddf3>
 800a8d6:	4680      	mov	r8, r0
 800a8d8:	4689      	mov	r9, r1
 800a8da:	2c0f      	cmp	r4, #15
 800a8dc:	dc36      	bgt.n	800a94c <_strtod_l+0x444>
 800a8de:	9b07      	ldr	r3, [sp, #28]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f43f ae52 	beq.w	800a58a <_strtod_l+0x82>
 800a8e6:	dd22      	ble.n	800a92e <_strtod_l+0x426>
 800a8e8:	2b16      	cmp	r3, #22
 800a8ea:	dc09      	bgt.n	800a900 <_strtod_l+0x3f8>
 800a8ec:	4c6a      	ldr	r4, [pc, #424]	; (800aa98 <_strtod_l+0x590>)
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a8f4:	464b      	mov	r3, r9
 800a8f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	e7c3      	b.n	800a888 <_strtod_l+0x380>
 800a900:	9a07      	ldr	r2, [sp, #28]
 800a902:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a906:	4293      	cmp	r3, r2
 800a908:	db20      	blt.n	800a94c <_strtod_l+0x444>
 800a90a:	4d63      	ldr	r5, [pc, #396]	; (800aa98 <_strtod_l+0x590>)
 800a90c:	f1c4 040f 	rsb	r4, r4, #15
 800a910:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a914:	4642      	mov	r2, r8
 800a916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91a:	464b      	mov	r3, r9
 800a91c:	f7f5 fddc 	bl	80004d8 <__aeabi_dmul>
 800a920:	9b07      	ldr	r3, [sp, #28]
 800a922:	1b1c      	subs	r4, r3, r4
 800a924:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a928:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a92c:	e7e5      	b.n	800a8fa <_strtod_l+0x3f2>
 800a92e:	9b07      	ldr	r3, [sp, #28]
 800a930:	3316      	adds	r3, #22
 800a932:	db0b      	blt.n	800a94c <_strtod_l+0x444>
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	4a58      	ldr	r2, [pc, #352]	; (800aa98 <_strtod_l+0x590>)
 800a938:	1b5d      	subs	r5, r3, r5
 800a93a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a93e:	4640      	mov	r0, r8
 800a940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a944:	4649      	mov	r1, r9
 800a946:	f7f5 fef1 	bl	800072c <__aeabi_ddiv>
 800a94a:	e79d      	b.n	800a888 <_strtod_l+0x380>
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	1ba6      	subs	r6, r4, r6
 800a950:	441e      	add	r6, r3
 800a952:	2e00      	cmp	r6, #0
 800a954:	dd71      	ble.n	800aa3a <_strtod_l+0x532>
 800a956:	f016 030f 	ands.w	r3, r6, #15
 800a95a:	d00a      	beq.n	800a972 <_strtod_l+0x46a>
 800a95c:	494e      	ldr	r1, [pc, #312]	; (800aa98 <_strtod_l+0x590>)
 800a95e:	4642      	mov	r2, r8
 800a960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a968:	464b      	mov	r3, r9
 800a96a:	f7f5 fdb5 	bl	80004d8 <__aeabi_dmul>
 800a96e:	4680      	mov	r8, r0
 800a970:	4689      	mov	r9, r1
 800a972:	f036 060f 	bics.w	r6, r6, #15
 800a976:	d050      	beq.n	800aa1a <_strtod_l+0x512>
 800a978:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a97c:	dd27      	ble.n	800a9ce <_strtod_l+0x4c6>
 800a97e:	f04f 0b00 	mov.w	fp, #0
 800a982:	f8cd b010 	str.w	fp, [sp, #16]
 800a986:	f8cd b020 	str.w	fp, [sp, #32]
 800a98a:	f8cd b018 	str.w	fp, [sp, #24]
 800a98e:	2322      	movs	r3, #34	; 0x22
 800a990:	f04f 0800 	mov.w	r8, #0
 800a994:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aaa0 <_strtod_l+0x598>
 800a998:	f8ca 3000 	str.w	r3, [sl]
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f43f adf3 	beq.w	800a58a <_strtod_l+0x82>
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9a8:	f001 fe8c 	bl	800c6c4 <_Bfree>
 800a9ac:	4650      	mov	r0, sl
 800a9ae:	9906      	ldr	r1, [sp, #24]
 800a9b0:	f001 fe88 	bl	800c6c4 <_Bfree>
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	9904      	ldr	r1, [sp, #16]
 800a9b8:	f001 fe84 	bl	800c6c4 <_Bfree>
 800a9bc:	4650      	mov	r0, sl
 800a9be:	9908      	ldr	r1, [sp, #32]
 800a9c0:	f001 fe80 	bl	800c6c4 <_Bfree>
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	f001 fe7c 	bl	800c6c4 <_Bfree>
 800a9cc:	e5dd      	b.n	800a58a <_strtod_l+0x82>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	461f      	mov	r7, r3
 800a9d6:	1136      	asrs	r6, r6, #4
 800a9d8:	2e01      	cmp	r6, #1
 800a9da:	dc21      	bgt.n	800aa20 <_strtod_l+0x518>
 800a9dc:	b10b      	cbz	r3, 800a9e2 <_strtod_l+0x4da>
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	4b2e      	ldr	r3, [pc, #184]	; (800aa9c <_strtod_l+0x594>)
 800a9e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a9e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	f7f5 fd70 	bl	80004d8 <__aeabi_dmul>
 800a9f8:	4b29      	ldr	r3, [pc, #164]	; (800aaa0 <_strtod_l+0x598>)
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	400b      	ands	r3, r1
 800a9fe:	4929      	ldr	r1, [pc, #164]	; (800aaa4 <_strtod_l+0x59c>)
 800aa00:	4680      	mov	r8, r0
 800aa02:	428b      	cmp	r3, r1
 800aa04:	d8bb      	bhi.n	800a97e <_strtod_l+0x476>
 800aa06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa0a:	428b      	cmp	r3, r1
 800aa0c:	bf86      	itte	hi
 800aa0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800aa12:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800aaa8 <_strtod_l+0x5a0>
 800aa16:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	e07e      	b.n	800ab1e <_strtod_l+0x616>
 800aa20:	07f2      	lsls	r2, r6, #31
 800aa22:	d507      	bpl.n	800aa34 <_strtod_l+0x52c>
 800aa24:	4b1d      	ldr	r3, [pc, #116]	; (800aa9c <_strtod_l+0x594>)
 800aa26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fd53 	bl	80004d8 <__aeabi_dmul>
 800aa32:	2301      	movs	r3, #1
 800aa34:	3701      	adds	r7, #1
 800aa36:	1076      	asrs	r6, r6, #1
 800aa38:	e7ce      	b.n	800a9d8 <_strtod_l+0x4d0>
 800aa3a:	d0ee      	beq.n	800aa1a <_strtod_l+0x512>
 800aa3c:	4276      	negs	r6, r6
 800aa3e:	f016 020f 	ands.w	r2, r6, #15
 800aa42:	d00a      	beq.n	800aa5a <_strtod_l+0x552>
 800aa44:	4b14      	ldr	r3, [pc, #80]	; (800aa98 <_strtod_l+0x590>)
 800aa46:	4640      	mov	r0, r8
 800aa48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fe6b 	bl	800072c <__aeabi_ddiv>
 800aa56:	4680      	mov	r8, r0
 800aa58:	4689      	mov	r9, r1
 800aa5a:	1136      	asrs	r6, r6, #4
 800aa5c:	d0dd      	beq.n	800aa1a <_strtod_l+0x512>
 800aa5e:	2e1f      	cmp	r6, #31
 800aa60:	dd24      	ble.n	800aaac <_strtod_l+0x5a4>
 800aa62:	f04f 0b00 	mov.w	fp, #0
 800aa66:	f8cd b010 	str.w	fp, [sp, #16]
 800aa6a:	f8cd b020 	str.w	fp, [sp, #32]
 800aa6e:	f8cd b018 	str.w	fp, [sp, #24]
 800aa72:	2322      	movs	r3, #34	; 0x22
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	f04f 0900 	mov.w	r9, #0
 800aa7c:	f8ca 3000 	str.w	r3, [sl]
 800aa80:	e78c      	b.n	800a99c <_strtod_l+0x494>
 800aa82:	bf00      	nop
 800aa84:	0800e059 	.word	0x0800e059
 800aa88:	0800e09c 	.word	0x0800e09c
 800aa8c:	0800e051 	.word	0x0800e051
 800aa90:	0800e1dc 	.word	0x0800e1dc
 800aa94:	0800e498 	.word	0x0800e498
 800aa98:	0800e378 	.word	0x0800e378
 800aa9c:	0800e350 	.word	0x0800e350
 800aaa0:	7ff00000 	.word	0x7ff00000
 800aaa4:	7ca00000 	.word	0x7ca00000
 800aaa8:	7fefffff 	.word	0x7fefffff
 800aaac:	f016 0310 	ands.w	r3, r6, #16
 800aab0:	bf18      	it	ne
 800aab2:	236a      	movne	r3, #106	; 0x6a
 800aab4:	4640      	mov	r0, r8
 800aab6:	9305      	str	r3, [sp, #20]
 800aab8:	4649      	mov	r1, r9
 800aaba:	2300      	movs	r3, #0
 800aabc:	4fb2      	ldr	r7, [pc, #712]	; (800ad88 <_strtod_l+0x880>)
 800aabe:	07f2      	lsls	r2, r6, #31
 800aac0:	d504      	bpl.n	800aacc <_strtod_l+0x5c4>
 800aac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac6:	f7f5 fd07 	bl	80004d8 <__aeabi_dmul>
 800aaca:	2301      	movs	r3, #1
 800aacc:	1076      	asrs	r6, r6, #1
 800aace:	f107 0708 	add.w	r7, r7, #8
 800aad2:	d1f4      	bne.n	800aabe <_strtod_l+0x5b6>
 800aad4:	b10b      	cbz	r3, 800aada <_strtod_l+0x5d2>
 800aad6:	4680      	mov	r8, r0
 800aad8:	4689      	mov	r9, r1
 800aada:	9b05      	ldr	r3, [sp, #20]
 800aadc:	b1bb      	cbz	r3, 800ab0e <_strtod_l+0x606>
 800aade:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800aae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	4649      	mov	r1, r9
 800aaea:	dd10      	ble.n	800ab0e <_strtod_l+0x606>
 800aaec:	2b1f      	cmp	r3, #31
 800aaee:	f340 812b 	ble.w	800ad48 <_strtod_l+0x840>
 800aaf2:	2b34      	cmp	r3, #52	; 0x34
 800aaf4:	bfd8      	it	le
 800aaf6:	f04f 32ff 	movle.w	r2, #4294967295
 800aafa:	f04f 0800 	mov.w	r8, #0
 800aafe:	bfcf      	iteee	gt
 800ab00:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab04:	3b20      	suble	r3, #32
 800ab06:	fa02 f303 	lslle.w	r3, r2, r3
 800ab0a:	ea03 0901 	andle.w	r9, r3, r1
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2300      	movs	r3, #0
 800ab12:	4640      	mov	r0, r8
 800ab14:	4649      	mov	r1, r9
 800ab16:	f7f5 ff47 	bl	80009a8 <__aeabi_dcmpeq>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1a1      	bne.n	800aa62 <_strtod_l+0x55a>
 800ab1e:	9b06      	ldr	r3, [sp, #24]
 800ab20:	465a      	mov	r2, fp
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4650      	mov	r0, sl
 800ab26:	4623      	mov	r3, r4
 800ab28:	9908      	ldr	r1, [sp, #32]
 800ab2a:	f001 fe37 	bl	800c79c <__s2b>
 800ab2e:	9008      	str	r0, [sp, #32]
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f43f af24 	beq.w	800a97e <_strtod_l+0x476>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	f04f 0b00 	mov.w	fp, #0
 800ab3c:	1b5d      	subs	r5, r3, r5
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	f8cd b010 	str.w	fp, [sp, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfb4      	ite	lt
 800ab48:	462b      	movlt	r3, r5
 800ab4a:	2300      	movge	r3, #0
 800ab4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab54:	9316      	str	r3, [sp, #88]	; 0x58
 800ab56:	9b08      	ldr	r3, [sp, #32]
 800ab58:	4650      	mov	r0, sl
 800ab5a:	6859      	ldr	r1, [r3, #4]
 800ab5c:	f001 fd72 	bl	800c644 <_Balloc>
 800ab60:	9006      	str	r0, [sp, #24]
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f43f af13 	beq.w	800a98e <_strtod_l+0x486>
 800ab68:	9b08      	ldr	r3, [sp, #32]
 800ab6a:	300c      	adds	r0, #12
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	f103 010c 	add.w	r1, r3, #12
 800ab72:	3202      	adds	r2, #2
 800ab74:	0092      	lsls	r2, r2, #2
 800ab76:	f001 fd57 	bl	800c628 <memcpy>
 800ab7a:	ab1e      	add	r3, sp, #120	; 0x78
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4642      	mov	r2, r8
 800ab84:	464b      	mov	r3, r9
 800ab86:	4650      	mov	r0, sl
 800ab88:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ab8c:	f002 f944 	bl	800ce18 <__d2b>
 800ab90:	901c      	str	r0, [sp, #112]	; 0x70
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f43f aefb 	beq.w	800a98e <_strtod_l+0x486>
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	f001 fe96 	bl	800c8cc <__i2b>
 800aba0:	4603      	mov	r3, r0
 800aba2:	9004      	str	r0, [sp, #16]
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f43f aef2 	beq.w	800a98e <_strtod_l+0x486>
 800abaa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800abac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800abae:	2d00      	cmp	r5, #0
 800abb0:	bfab      	itete	ge
 800abb2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800abb4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800abb6:	18ee      	addge	r6, r5, r3
 800abb8:	1b5c      	sublt	r4, r3, r5
 800abba:	9b05      	ldr	r3, [sp, #20]
 800abbc:	bfa8      	it	ge
 800abbe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800abc0:	eba5 0503 	sub.w	r5, r5, r3
 800abc4:	4415      	add	r5, r2
 800abc6:	4b71      	ldr	r3, [pc, #452]	; (800ad8c <_strtod_l+0x884>)
 800abc8:	f105 35ff 	add.w	r5, r5, #4294967295
 800abcc:	bfb8      	it	lt
 800abce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800abd0:	429d      	cmp	r5, r3
 800abd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abd6:	f280 80c9 	bge.w	800ad6c <_strtod_l+0x864>
 800abda:	1b5b      	subs	r3, r3, r5
 800abdc:	2b1f      	cmp	r3, #31
 800abde:	f04f 0701 	mov.w	r7, #1
 800abe2:	eba2 0203 	sub.w	r2, r2, r3
 800abe6:	f300 80b6 	bgt.w	800ad56 <_strtod_l+0x84e>
 800abea:	2500      	movs	r5, #0
 800abec:	fa07 f303 	lsl.w	r3, r7, r3
 800abf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf2:	18b7      	adds	r7, r6, r2
 800abf4:	9b05      	ldr	r3, [sp, #20]
 800abf6:	42be      	cmp	r6, r7
 800abf8:	4414      	add	r4, r2
 800abfa:	441c      	add	r4, r3
 800abfc:	4633      	mov	r3, r6
 800abfe:	bfa8      	it	ge
 800ac00:	463b      	movge	r3, r7
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	bfa8      	it	ge
 800ac06:	4623      	movge	r3, r4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfc2      	ittt	gt
 800ac0c:	1aff      	subgt	r7, r7, r3
 800ac0e:	1ae4      	subgt	r4, r4, r3
 800ac10:	1af6      	subgt	r6, r6, r3
 800ac12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd17      	ble.n	800ac48 <_strtod_l+0x740>
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	9904      	ldr	r1, [sp, #16]
 800ac1e:	f001 ff0f 	bl	800ca40 <__pow5mult>
 800ac22:	9004      	str	r0, [sp, #16]
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f aeb2 	beq.w	800a98e <_strtod_l+0x486>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ac2e:	4650      	mov	r0, sl
 800ac30:	f001 fe62 	bl	800c8f8 <__multiply>
 800ac34:	9009      	str	r0, [sp, #36]	; 0x24
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f43f aea9 	beq.w	800a98e <_strtod_l+0x486>
 800ac3c:	4650      	mov	r0, sl
 800ac3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac40:	f001 fd40 	bl	800c6c4 <_Bfree>
 800ac44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac46:	931c      	str	r3, [sp, #112]	; 0x70
 800ac48:	2f00      	cmp	r7, #0
 800ac4a:	f300 8093 	bgt.w	800ad74 <_strtod_l+0x86c>
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	dd08      	ble.n	800ac66 <_strtod_l+0x75e>
 800ac54:	4650      	mov	r0, sl
 800ac56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac58:	9906      	ldr	r1, [sp, #24]
 800ac5a:	f001 fef1 	bl	800ca40 <__pow5mult>
 800ac5e:	9006      	str	r0, [sp, #24]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f43f ae94 	beq.w	800a98e <_strtod_l+0x486>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	dd08      	ble.n	800ac7c <_strtod_l+0x774>
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	9906      	ldr	r1, [sp, #24]
 800ac70:	f001 ff40 	bl	800caf4 <__lshift>
 800ac74:	9006      	str	r0, [sp, #24]
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f ae89 	beq.w	800a98e <_strtod_l+0x486>
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	dd08      	ble.n	800ac92 <_strtod_l+0x78a>
 800ac80:	4632      	mov	r2, r6
 800ac82:	4650      	mov	r0, sl
 800ac84:	9904      	ldr	r1, [sp, #16]
 800ac86:	f001 ff35 	bl	800caf4 <__lshift>
 800ac8a:	9004      	str	r0, [sp, #16]
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f ae7e 	beq.w	800a98e <_strtod_l+0x486>
 800ac92:	4650      	mov	r0, sl
 800ac94:	9a06      	ldr	r2, [sp, #24]
 800ac96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac98:	f001 ffb4 	bl	800cc04 <__mdiff>
 800ac9c:	4683      	mov	fp, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f ae75 	beq.w	800a98e <_strtod_l+0x486>
 800aca4:	2400      	movs	r4, #0
 800aca6:	68c3      	ldr	r3, [r0, #12]
 800aca8:	9904      	ldr	r1, [sp, #16]
 800acaa:	60c4      	str	r4, [r0, #12]
 800acac:	930d      	str	r3, [sp, #52]	; 0x34
 800acae:	f001 ff8d 	bl	800cbcc <__mcmp>
 800acb2:	42a0      	cmp	r0, r4
 800acb4:	da70      	bge.n	800ad98 <_strtod_l+0x890>
 800acb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb8:	ea53 0308 	orrs.w	r3, r3, r8
 800acbc:	f040 8096 	bne.w	800adec <_strtod_l+0x8e4>
 800acc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f040 8091 	bne.w	800adec <_strtod_l+0x8e4>
 800acca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acce:	0d1b      	lsrs	r3, r3, #20
 800acd0:	051b      	lsls	r3, r3, #20
 800acd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acd6:	f240 8089 	bls.w	800adec <_strtod_l+0x8e4>
 800acda:	f8db 3014 	ldr.w	r3, [fp, #20]
 800acde:	b923      	cbnz	r3, 800acea <_strtod_l+0x7e2>
 800ace0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	f340 8081 	ble.w	800adec <_strtod_l+0x8e4>
 800acea:	4659      	mov	r1, fp
 800acec:	2201      	movs	r2, #1
 800acee:	4650      	mov	r0, sl
 800acf0:	f001 ff00 	bl	800caf4 <__lshift>
 800acf4:	9904      	ldr	r1, [sp, #16]
 800acf6:	4683      	mov	fp, r0
 800acf8:	f001 ff68 	bl	800cbcc <__mcmp>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	dd75      	ble.n	800adec <_strtod_l+0x8e4>
 800ad00:	9905      	ldr	r1, [sp, #20]
 800ad02:	464b      	mov	r3, r9
 800ad04:	4a22      	ldr	r2, [pc, #136]	; (800ad90 <_strtod_l+0x888>)
 800ad06:	2900      	cmp	r1, #0
 800ad08:	f000 8091 	beq.w	800ae2e <_strtod_l+0x926>
 800ad0c:	ea02 0109 	and.w	r1, r2, r9
 800ad10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad14:	f300 808b 	bgt.w	800ae2e <_strtod_l+0x926>
 800ad18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad1c:	f77f aea9 	ble.w	800aa72 <_strtod_l+0x56a>
 800ad20:	2300      	movs	r3, #0
 800ad22:	4a1c      	ldr	r2, [pc, #112]	; (800ad94 <_strtod_l+0x88c>)
 800ad24:	4640      	mov	r0, r8
 800ad26:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad30:	f7f5 fbd2 	bl	80004d8 <__aeabi_dmul>
 800ad34:	460b      	mov	r3, r1
 800ad36:	4303      	orrs	r3, r0
 800ad38:	bf08      	it	eq
 800ad3a:	2322      	moveq	r3, #34	; 0x22
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4689      	mov	r9, r1
 800ad40:	bf08      	it	eq
 800ad42:	f8ca 3000 	streq.w	r3, [sl]
 800ad46:	e62d      	b.n	800a9a4 <_strtod_l+0x49c>
 800ad48:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad50:	ea03 0808 	and.w	r8, r3, r8
 800ad54:	e6db      	b.n	800ab0e <_strtod_l+0x606>
 800ad56:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ad5a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ad5e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ad62:	35e2      	adds	r5, #226	; 0xe2
 800ad64:	fa07 f505 	lsl.w	r5, r7, r5
 800ad68:	970f      	str	r7, [sp, #60]	; 0x3c
 800ad6a:	e742      	b.n	800abf2 <_strtod_l+0x6ea>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	2500      	movs	r5, #0
 800ad70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad72:	e73e      	b.n	800abf2 <_strtod_l+0x6ea>
 800ad74:	463a      	mov	r2, r7
 800ad76:	4650      	mov	r0, sl
 800ad78:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad7a:	f001 febb 	bl	800caf4 <__lshift>
 800ad7e:	901c      	str	r0, [sp, #112]	; 0x70
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f47f af64 	bne.w	800ac4e <_strtod_l+0x746>
 800ad86:	e602      	b.n	800a98e <_strtod_l+0x486>
 800ad88:	0800e0b0 	.word	0x0800e0b0
 800ad8c:	fffffc02 	.word	0xfffffc02
 800ad90:	7ff00000 	.word	0x7ff00000
 800ad94:	39500000 	.word	0x39500000
 800ad98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ad9c:	d166      	bne.n	800ae6c <_strtod_l+0x964>
 800ad9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ada0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ada4:	b35a      	cbz	r2, 800adfe <_strtod_l+0x8f6>
 800ada6:	4a9c      	ldr	r2, [pc, #624]	; (800b018 <_strtod_l+0xb10>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d12c      	bne.n	800ae06 <_strtod_l+0x8fe>
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	4640      	mov	r0, r8
 800adb0:	b303      	cbz	r3, 800adf4 <_strtod_l+0x8ec>
 800adb2:	464b      	mov	r3, r9
 800adb4:	4a99      	ldr	r2, [pc, #612]	; (800b01c <_strtod_l+0xb14>)
 800adb6:	f04f 31ff 	mov.w	r1, #4294967295
 800adba:	401a      	ands	r2, r3
 800adbc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800adc0:	d81b      	bhi.n	800adfa <_strtod_l+0x8f2>
 800adc2:	0d12      	lsrs	r2, r2, #20
 800adc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800adc8:	fa01 f303 	lsl.w	r3, r1, r3
 800adcc:	4298      	cmp	r0, r3
 800adce:	d11a      	bne.n	800ae06 <_strtod_l+0x8fe>
 800add0:	4b93      	ldr	r3, [pc, #588]	; (800b020 <_strtod_l+0xb18>)
 800add2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add4:	429a      	cmp	r2, r3
 800add6:	d102      	bne.n	800adde <_strtod_l+0x8d6>
 800add8:	3001      	adds	r0, #1
 800adda:	f43f add8 	beq.w	800a98e <_strtod_l+0x486>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	4b8e      	ldr	r3, [pc, #568]	; (800b01c <_strtod_l+0xb14>)
 800ade4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade6:	401a      	ands	r2, r3
 800ade8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800adec:	9b05      	ldr	r3, [sp, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d196      	bne.n	800ad20 <_strtod_l+0x818>
 800adf2:	e5d7      	b.n	800a9a4 <_strtod_l+0x49c>
 800adf4:	f04f 33ff 	mov.w	r3, #4294967295
 800adf8:	e7e8      	b.n	800adcc <_strtod_l+0x8c4>
 800adfa:	460b      	mov	r3, r1
 800adfc:	e7e6      	b.n	800adcc <_strtod_l+0x8c4>
 800adfe:	ea53 0308 	orrs.w	r3, r3, r8
 800ae02:	f43f af7d 	beq.w	800ad00 <_strtod_l+0x7f8>
 800ae06:	b1e5      	cbz	r5, 800ae42 <_strtod_l+0x93a>
 800ae08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae0a:	421d      	tst	r5, r3
 800ae0c:	d0ee      	beq.n	800adec <_strtod_l+0x8e4>
 800ae0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae10:	4640      	mov	r0, r8
 800ae12:	4649      	mov	r1, r9
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	b1c3      	cbz	r3, 800ae4a <_strtod_l+0x942>
 800ae18:	f7ff fb54 	bl	800a4c4 <sulp>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae24:	f7f5 f9a2 	bl	800016c <__adddf3>
 800ae28:	4680      	mov	r8, r0
 800ae2a:	4689      	mov	r9, r1
 800ae2c:	e7de      	b.n	800adec <_strtod_l+0x8e4>
 800ae2e:	4013      	ands	r3, r2
 800ae30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae34:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae38:	f04f 38ff 	mov.w	r8, #4294967295
 800ae3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae40:	e7d4      	b.n	800adec <_strtod_l+0x8e4>
 800ae42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae44:	ea13 0f08 	tst.w	r3, r8
 800ae48:	e7e0      	b.n	800ae0c <_strtod_l+0x904>
 800ae4a:	f7ff fb3b 	bl	800a4c4 <sulp>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae56:	f7f5 f987 	bl	8000168 <__aeabi_dsub>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4689      	mov	r9, r1
 800ae62:	f7f5 fda1 	bl	80009a8 <__aeabi_dcmpeq>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0c0      	beq.n	800adec <_strtod_l+0x8e4>
 800ae6a:	e602      	b.n	800aa72 <_strtod_l+0x56a>
 800ae6c:	4658      	mov	r0, fp
 800ae6e:	9904      	ldr	r1, [sp, #16]
 800ae70:	f002 f82e 	bl	800ced0 <__ratio>
 800ae74:	2200      	movs	r2, #0
 800ae76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	f7f5 fda7 	bl	80009d0 <__aeabi_dcmple>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d075      	beq.n	800af72 <_strtod_l+0xa6a>
 800ae86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d047      	beq.n	800af1c <_strtod_l+0xa14>
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	4f65      	ldr	r7, [pc, #404]	; (800b024 <_strtod_l+0xb1c>)
 800ae90:	4d64      	ldr	r5, [pc, #400]	; (800b024 <_strtod_l+0xb1c>)
 800ae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae98:	0d1b      	lsrs	r3, r3, #20
 800ae9a:	051b      	lsls	r3, r3, #20
 800ae9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aea0:	4b61      	ldr	r3, [pc, #388]	; (800b028 <_strtod_l+0xb20>)
 800aea2:	429a      	cmp	r2, r3
 800aea4:	f040 80c8 	bne.w	800b038 <_strtod_l+0xb30>
 800aea8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aeac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800aeb8:	4649      	mov	r1, r9
 800aeba:	f001 ff33 	bl	800cd24 <__ulp>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	f7f5 fb07 	bl	80004d8 <__aeabi_dmul>
 800aeca:	4642      	mov	r2, r8
 800aecc:	464b      	mov	r3, r9
 800aece:	f7f5 f94d 	bl	800016c <__adddf3>
 800aed2:	460b      	mov	r3, r1
 800aed4:	4951      	ldr	r1, [pc, #324]	; (800b01c <_strtod_l+0xb14>)
 800aed6:	4a55      	ldr	r2, [pc, #340]	; (800b02c <_strtod_l+0xb24>)
 800aed8:	4019      	ands	r1, r3
 800aeda:	4291      	cmp	r1, r2
 800aedc:	4680      	mov	r8, r0
 800aede:	d95e      	bls.n	800af9e <_strtod_l+0xa96>
 800aee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d103      	bne.n	800aef2 <_strtod_l+0x9ea>
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	3301      	adds	r3, #1
 800aeee:	f43f ad4e 	beq.w	800a98e <_strtod_l+0x486>
 800aef2:	f04f 38ff 	mov.w	r8, #4294967295
 800aef6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b020 <_strtod_l+0xb18>
 800aefa:	4650      	mov	r0, sl
 800aefc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aefe:	f001 fbe1 	bl	800c6c4 <_Bfree>
 800af02:	4650      	mov	r0, sl
 800af04:	9906      	ldr	r1, [sp, #24]
 800af06:	f001 fbdd 	bl	800c6c4 <_Bfree>
 800af0a:	4650      	mov	r0, sl
 800af0c:	9904      	ldr	r1, [sp, #16]
 800af0e:	f001 fbd9 	bl	800c6c4 <_Bfree>
 800af12:	4659      	mov	r1, fp
 800af14:	4650      	mov	r0, sl
 800af16:	f001 fbd5 	bl	800c6c4 <_Bfree>
 800af1a:	e61c      	b.n	800ab56 <_strtod_l+0x64e>
 800af1c:	f1b8 0f00 	cmp.w	r8, #0
 800af20:	d119      	bne.n	800af56 <_strtod_l+0xa4e>
 800af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af28:	b9e3      	cbnz	r3, 800af64 <_strtod_l+0xa5c>
 800af2a:	2200      	movs	r2, #0
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <_strtod_l+0xb1c>)
 800af32:	f7f5 fd43 	bl	80009bc <__aeabi_dcmplt>
 800af36:	b9c8      	cbnz	r0, 800af6c <_strtod_l+0xa64>
 800af38:	2200      	movs	r2, #0
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	4b3c      	ldr	r3, [pc, #240]	; (800b030 <_strtod_l+0xb28>)
 800af40:	f7f5 faca 	bl	80004d8 <__aeabi_dmul>
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af4c:	9418      	str	r4, [sp, #96]	; 0x60
 800af4e:	9319      	str	r3, [sp, #100]	; 0x64
 800af50:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800af54:	e79d      	b.n	800ae92 <_strtod_l+0x98a>
 800af56:	f1b8 0f01 	cmp.w	r8, #1
 800af5a:	d103      	bne.n	800af64 <_strtod_l+0xa5c>
 800af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f43f ad87 	beq.w	800aa72 <_strtod_l+0x56a>
 800af64:	2600      	movs	r6, #0
 800af66:	2400      	movs	r4, #0
 800af68:	4f32      	ldr	r7, [pc, #200]	; (800b034 <_strtod_l+0xb2c>)
 800af6a:	e791      	b.n	800ae90 <_strtod_l+0x988>
 800af6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800af6e:	4d30      	ldr	r5, [pc, #192]	; (800b030 <_strtod_l+0xb28>)
 800af70:	e7ea      	b.n	800af48 <_strtod_l+0xa40>
 800af72:	4b2f      	ldr	r3, [pc, #188]	; (800b030 <_strtod_l+0xb28>)
 800af74:	2200      	movs	r2, #0
 800af76:	4630      	mov	r0, r6
 800af78:	4639      	mov	r1, r7
 800af7a:	f7f5 faad 	bl	80004d8 <__aeabi_dmul>
 800af7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	b933      	cbnz	r3, 800af94 <_strtod_l+0xa8c>
 800af86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af8a:	9010      	str	r0, [sp, #64]	; 0x40
 800af8c:	9311      	str	r3, [sp, #68]	; 0x44
 800af8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800af92:	e77e      	b.n	800ae92 <_strtod_l+0x98a>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800af9c:	e7f7      	b.n	800af8e <_strtod_l+0xa86>
 800af9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800afa2:	9b05      	ldr	r3, [sp, #20]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1a8      	bne.n	800aefa <_strtod_l+0x9f2>
 800afa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afae:	0d1b      	lsrs	r3, r3, #20
 800afb0:	051b      	lsls	r3, r3, #20
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d1a1      	bne.n	800aefa <_strtod_l+0x9f2>
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 fdd5 	bl	8000b68 <__aeabi_d2lz>
 800afbe:	f7f5 fa5d 	bl	800047c <__aeabi_l2d>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 f8cd 	bl	8000168 <__aeabi_dsub>
 800afce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd4:	ea43 0308 	orr.w	r3, r3, r8
 800afd8:	4313      	orrs	r3, r2
 800afda:	4604      	mov	r4, r0
 800afdc:	460d      	mov	r5, r1
 800afde:	d066      	beq.n	800b0ae <_strtod_l+0xba6>
 800afe0:	a309      	add	r3, pc, #36	; (adr r3, 800b008 <_strtod_l+0xb00>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 fce9 	bl	80009bc <__aeabi_dcmplt>
 800afea:	2800      	cmp	r0, #0
 800afec:	f47f acda 	bne.w	800a9a4 <_strtod_l+0x49c>
 800aff0:	a307      	add	r3, pc, #28	; (adr r3, 800b010 <_strtod_l+0xb08>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 800affe:	2800      	cmp	r0, #0
 800b000:	f43f af7b 	beq.w	800aefa <_strtod_l+0x9f2>
 800b004:	e4ce      	b.n	800a9a4 <_strtod_l+0x49c>
 800b006:	bf00      	nop
 800b008:	94a03595 	.word	0x94a03595
 800b00c:	3fdfffff 	.word	0x3fdfffff
 800b010:	35afe535 	.word	0x35afe535
 800b014:	3fe00000 	.word	0x3fe00000
 800b018:	000fffff 	.word	0x000fffff
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	7fefffff 	.word	0x7fefffff
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	7fe00000 	.word	0x7fe00000
 800b02c:	7c9fffff 	.word	0x7c9fffff
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	bff00000 	.word	0xbff00000
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	b313      	cbz	r3, 800b082 <_strtod_l+0xb7a>
 800b03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b03e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b042:	d81e      	bhi.n	800b082 <_strtod_l+0xb7a>
 800b044:	a326      	add	r3, pc, #152	; (adr r3, 800b0e0 <_strtod_l+0xbd8>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	4620      	mov	r0, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	f7f5 fcbf 	bl	80009d0 <__aeabi_dcmple>
 800b052:	b190      	cbz	r0, 800b07a <_strtod_l+0xb72>
 800b054:	4629      	mov	r1, r5
 800b056:	4620      	mov	r0, r4
 800b058:	f7f5 fd16 	bl	8000a88 <__aeabi_d2uiz>
 800b05c:	2801      	cmp	r0, #1
 800b05e:	bf38      	it	cc
 800b060:	2001      	movcc	r0, #1
 800b062:	f7f5 f9bf 	bl	80003e4 <__aeabi_ui2d>
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	b9d3      	cbnz	r3, 800b0a4 <_strtod_l+0xb9c>
 800b06e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b072:	9012      	str	r0, [sp, #72]	; 0x48
 800b074:	9313      	str	r3, [sp, #76]	; 0x4c
 800b076:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b07a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b07c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b080:	1a9f      	subs	r7, r3, r2
 800b082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b086:	f001 fe4d 	bl	800cd24 <__ulp>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 fa21 	bl	80004d8 <__aeabi_dmul>
 800b096:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b09a:	f7f5 f867 	bl	800016c <__adddf3>
 800b09e:	4680      	mov	r8, r0
 800b0a0:	4689      	mov	r9, r1
 800b0a2:	e77e      	b.n	800afa2 <_strtod_l+0xa9a>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b0ac:	e7e3      	b.n	800b076 <_strtod_l+0xb6e>
 800b0ae:	a30e      	add	r3, pc, #56	; (adr r3, 800b0e8 <_strtod_l+0xbe0>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 fc82 	bl	80009bc <__aeabi_dcmplt>
 800b0b8:	e7a1      	b.n	800affe <_strtod_l+0xaf6>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	930c      	str	r3, [sp, #48]	; 0x30
 800b0be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	f7ff ba65 	b.w	800a592 <_strtod_l+0x8a>
 800b0c8:	2b65      	cmp	r3, #101	; 0x65
 800b0ca:	f43f ab5c 	beq.w	800a786 <_strtod_l+0x27e>
 800b0ce:	2b45      	cmp	r3, #69	; 0x45
 800b0d0:	f43f ab59 	beq.w	800a786 <_strtod_l+0x27e>
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f7ff bb8d 	b.w	800a7f4 <_strtod_l+0x2ec>
 800b0da:	bf00      	nop
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	ffc00000 	.word	0xffc00000
 800b0e4:	41dfffff 	.word	0x41dfffff
 800b0e8:	94a03595 	.word	0x94a03595
 800b0ec:	3fcfffff 	.word	0x3fcfffff

0800b0f0 <_strtod_r>:
 800b0f0:	4b01      	ldr	r3, [pc, #4]	; (800b0f8 <_strtod_r+0x8>)
 800b0f2:	f7ff ba09 	b.w	800a508 <_strtod_l>
 800b0f6:	bf00      	nop
 800b0f8:	200001e4 	.word	0x200001e4

0800b0fc <_strtol_l.isra.0>:
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b102:	4686      	mov	lr, r0
 800b104:	d001      	beq.n	800b10a <_strtol_l.isra.0+0xe>
 800b106:	2b24      	cmp	r3, #36	; 0x24
 800b108:	d906      	bls.n	800b118 <_strtol_l.isra.0+0x1c>
 800b10a:	f7fe fb13 	bl	8009734 <__errno>
 800b10e:	2316      	movs	r3, #22
 800b110:	6003      	str	r3, [r0, #0]
 800b112:	2000      	movs	r0, #0
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	468c      	mov	ip, r1
 800b11a:	4e3a      	ldr	r6, [pc, #232]	; (800b204 <_strtol_l.isra.0+0x108>)
 800b11c:	4660      	mov	r0, ip
 800b11e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b122:	5da5      	ldrb	r5, [r4, r6]
 800b124:	f015 0508 	ands.w	r5, r5, #8
 800b128:	d1f8      	bne.n	800b11c <_strtol_l.isra.0+0x20>
 800b12a:	2c2d      	cmp	r4, #45	; 0x2d
 800b12c:	d133      	bne.n	800b196 <_strtol_l.isra.0+0x9a>
 800b12e:	f04f 0801 	mov.w	r8, #1
 800b132:	f89c 4000 	ldrb.w	r4, [ip]
 800b136:	f100 0c02 	add.w	ip, r0, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d05d      	beq.n	800b1fa <_strtol_l.isra.0+0xfe>
 800b13e:	2b10      	cmp	r3, #16
 800b140:	d10c      	bne.n	800b15c <_strtol_l.isra.0+0x60>
 800b142:	2c30      	cmp	r4, #48	; 0x30
 800b144:	d10a      	bne.n	800b15c <_strtol_l.isra.0+0x60>
 800b146:	f89c 0000 	ldrb.w	r0, [ip]
 800b14a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b14e:	2858      	cmp	r0, #88	; 0x58
 800b150:	d14e      	bne.n	800b1f0 <_strtol_l.isra.0+0xf4>
 800b152:	2310      	movs	r3, #16
 800b154:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b158:	f10c 0c02 	add.w	ip, ip, #2
 800b15c:	2500      	movs	r5, #0
 800b15e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b162:	3f01      	subs	r7, #1
 800b164:	fbb7 f9f3 	udiv	r9, r7, r3
 800b168:	4628      	mov	r0, r5
 800b16a:	fb03 7a19 	mls	sl, r3, r9, r7
 800b16e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b172:	2e09      	cmp	r6, #9
 800b174:	d818      	bhi.n	800b1a8 <_strtol_l.isra.0+0xac>
 800b176:	4634      	mov	r4, r6
 800b178:	42a3      	cmp	r3, r4
 800b17a:	dd24      	ble.n	800b1c6 <_strtol_l.isra.0+0xca>
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	db1f      	blt.n	800b1c0 <_strtol_l.isra.0+0xc4>
 800b180:	4581      	cmp	r9, r0
 800b182:	d31d      	bcc.n	800b1c0 <_strtol_l.isra.0+0xc4>
 800b184:	d101      	bne.n	800b18a <_strtol_l.isra.0+0x8e>
 800b186:	45a2      	cmp	sl, r4
 800b188:	db1a      	blt.n	800b1c0 <_strtol_l.isra.0+0xc4>
 800b18a:	2501      	movs	r5, #1
 800b18c:	fb00 4003 	mla	r0, r0, r3, r4
 800b190:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b194:	e7eb      	b.n	800b16e <_strtol_l.isra.0+0x72>
 800b196:	2c2b      	cmp	r4, #43	; 0x2b
 800b198:	bf08      	it	eq
 800b19a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b19e:	46a8      	mov	r8, r5
 800b1a0:	bf08      	it	eq
 800b1a2:	f100 0c02 	addeq.w	ip, r0, #2
 800b1a6:	e7c8      	b.n	800b13a <_strtol_l.isra.0+0x3e>
 800b1a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b1ac:	2e19      	cmp	r6, #25
 800b1ae:	d801      	bhi.n	800b1b4 <_strtol_l.isra.0+0xb8>
 800b1b0:	3c37      	subs	r4, #55	; 0x37
 800b1b2:	e7e1      	b.n	800b178 <_strtol_l.isra.0+0x7c>
 800b1b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b1b8:	2e19      	cmp	r6, #25
 800b1ba:	d804      	bhi.n	800b1c6 <_strtol_l.isra.0+0xca>
 800b1bc:	3c57      	subs	r4, #87	; 0x57
 800b1be:	e7db      	b.n	800b178 <_strtol_l.isra.0+0x7c>
 800b1c0:	f04f 35ff 	mov.w	r5, #4294967295
 800b1c4:	e7e4      	b.n	800b190 <_strtol_l.isra.0+0x94>
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	da08      	bge.n	800b1dc <_strtol_l.isra.0+0xe0>
 800b1ca:	2322      	movs	r3, #34	; 0x22
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	f8ce 3000 	str.w	r3, [lr]
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	d09e      	beq.n	800b114 <_strtol_l.isra.0+0x18>
 800b1d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b1da:	e007      	b.n	800b1ec <_strtol_l.isra.0+0xf0>
 800b1dc:	f1b8 0f00 	cmp.w	r8, #0
 800b1e0:	d000      	beq.n	800b1e4 <_strtol_l.isra.0+0xe8>
 800b1e2:	4240      	negs	r0, r0
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	d095      	beq.n	800b114 <_strtol_l.isra.0+0x18>
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	d1f4      	bne.n	800b1d6 <_strtol_l.isra.0+0xda>
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	e791      	b.n	800b114 <_strtol_l.isra.0+0x18>
 800b1f0:	2430      	movs	r4, #48	; 0x30
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1b2      	bne.n	800b15c <_strtol_l.isra.0+0x60>
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	e7b0      	b.n	800b15c <_strtol_l.isra.0+0x60>
 800b1fa:	2c30      	cmp	r4, #48	; 0x30
 800b1fc:	d0a3      	beq.n	800b146 <_strtol_l.isra.0+0x4a>
 800b1fe:	230a      	movs	r3, #10
 800b200:	e7ac      	b.n	800b15c <_strtol_l.isra.0+0x60>
 800b202:	bf00      	nop
 800b204:	0800e0d9 	.word	0x0800e0d9

0800b208 <_strtol_r>:
 800b208:	f7ff bf78 	b.w	800b0fc <_strtol_l.isra.0>

0800b20c <quorem>:
 800b20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	6903      	ldr	r3, [r0, #16]
 800b212:	690c      	ldr	r4, [r1, #16]
 800b214:	4607      	mov	r7, r0
 800b216:	42a3      	cmp	r3, r4
 800b218:	f2c0 8083 	blt.w	800b322 <quorem+0x116>
 800b21c:	3c01      	subs	r4, #1
 800b21e:	f100 0514 	add.w	r5, r0, #20
 800b222:	f101 0814 	add.w	r8, r1, #20
 800b226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b234:	3301      	adds	r3, #1
 800b236:	429a      	cmp	r2, r3
 800b238:	fbb2 f6f3 	udiv	r6, r2, r3
 800b23c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b240:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b244:	d332      	bcc.n	800b2ac <quorem+0xa0>
 800b246:	f04f 0e00 	mov.w	lr, #0
 800b24a:	4640      	mov	r0, r8
 800b24c:	46ac      	mov	ip, r5
 800b24e:	46f2      	mov	sl, lr
 800b250:	f850 2b04 	ldr.w	r2, [r0], #4
 800b254:	b293      	uxth	r3, r2
 800b256:	fb06 e303 	mla	r3, r6, r3, lr
 800b25a:	0c12      	lsrs	r2, r2, #16
 800b25c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b260:	fb06 e202 	mla	r2, r6, r2, lr
 800b264:	b29b      	uxth	r3, r3
 800b266:	ebaa 0303 	sub.w	r3, sl, r3
 800b26a:	f8dc a000 	ldr.w	sl, [ip]
 800b26e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b272:	fa1f fa8a 	uxth.w	sl, sl
 800b276:	4453      	add	r3, sl
 800b278:	fa1f fa82 	uxth.w	sl, r2
 800b27c:	f8dc 2000 	ldr.w	r2, [ip]
 800b280:	4581      	cmp	r9, r0
 800b282:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b290:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b294:	f84c 3b04 	str.w	r3, [ip], #4
 800b298:	d2da      	bcs.n	800b250 <quorem+0x44>
 800b29a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b29e:	b92b      	cbnz	r3, 800b2ac <quorem+0xa0>
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	3b04      	subs	r3, #4
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	d32f      	bcc.n	800b30a <quorem+0xfe>
 800b2aa:	613c      	str	r4, [r7, #16]
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f001 fc8d 	bl	800cbcc <__mcmp>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	db25      	blt.n	800b302 <quorem+0xf6>
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f04f 0c00 	mov.w	ip, #0
 800b2bc:	3601      	adds	r6, #1
 800b2be:	f858 1b04 	ldr.w	r1, [r8], #4
 800b2c2:	f8d0 e000 	ldr.w	lr, [r0]
 800b2c6:	b28b      	uxth	r3, r1
 800b2c8:	ebac 0303 	sub.w	r3, ip, r3
 800b2cc:	fa1f f28e 	uxth.w	r2, lr
 800b2d0:	4413      	add	r3, r2
 800b2d2:	0c0a      	lsrs	r2, r1, #16
 800b2d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e2:	45c1      	cmp	r9, r8
 800b2e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2e8:	f840 3b04 	str.w	r3, [r0], #4
 800b2ec:	d2e7      	bcs.n	800b2be <quorem+0xb2>
 800b2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2f6:	b922      	cbnz	r2, 800b302 <quorem+0xf6>
 800b2f8:	3b04      	subs	r3, #4
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	d30a      	bcc.n	800b316 <quorem+0x10a>
 800b300:	613c      	str	r4, [r7, #16]
 800b302:	4630      	mov	r0, r6
 800b304:	b003      	add	sp, #12
 800b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	2a00      	cmp	r2, #0
 800b310:	d1cb      	bne.n	800b2aa <quorem+0x9e>
 800b312:	3c01      	subs	r4, #1
 800b314:	e7c6      	b.n	800b2a4 <quorem+0x98>
 800b316:	6812      	ldr	r2, [r2, #0]
 800b318:	3b04      	subs	r3, #4
 800b31a:	2a00      	cmp	r2, #0
 800b31c:	d1f0      	bne.n	800b300 <quorem+0xf4>
 800b31e:	3c01      	subs	r4, #1
 800b320:	e7eb      	b.n	800b2fa <quorem+0xee>
 800b322:	2000      	movs	r0, #0
 800b324:	e7ee      	b.n	800b304 <quorem+0xf8>
	...

0800b328 <_dtoa_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4616      	mov	r6, r2
 800b32e:	461f      	mov	r7, r3
 800b330:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b332:	b099      	sub	sp, #100	; 0x64
 800b334:	4605      	mov	r5, r0
 800b336:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b33a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b33e:	b974      	cbnz	r4, 800b35e <_dtoa_r+0x36>
 800b340:	2010      	movs	r0, #16
 800b342:	f001 f949 	bl	800c5d8 <malloc>
 800b346:	4602      	mov	r2, r0
 800b348:	6268      	str	r0, [r5, #36]	; 0x24
 800b34a:	b920      	cbnz	r0, 800b356 <_dtoa_r+0x2e>
 800b34c:	21ea      	movs	r1, #234	; 0xea
 800b34e:	4bae      	ldr	r3, [pc, #696]	; (800b608 <_dtoa_r+0x2e0>)
 800b350:	48ae      	ldr	r0, [pc, #696]	; (800b60c <_dtoa_r+0x2e4>)
 800b352:	f002 f875 	bl	800d440 <__assert_func>
 800b356:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b35a:	6004      	str	r4, [r0, #0]
 800b35c:	60c4      	str	r4, [r0, #12]
 800b35e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	b151      	cbz	r1, 800b37a <_dtoa_r+0x52>
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	2301      	movs	r3, #1
 800b368:	4093      	lsls	r3, r2
 800b36a:	604a      	str	r2, [r1, #4]
 800b36c:	608b      	str	r3, [r1, #8]
 800b36e:	4628      	mov	r0, r5
 800b370:	f001 f9a8 	bl	800c6c4 <_Bfree>
 800b374:	2200      	movs	r2, #0
 800b376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	1e3b      	subs	r3, r7, #0
 800b37c:	bfaf      	iteee	ge
 800b37e:	2300      	movge	r3, #0
 800b380:	2201      	movlt	r2, #1
 800b382:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b386:	9305      	strlt	r3, [sp, #20]
 800b388:	bfa8      	it	ge
 800b38a:	f8c8 3000 	strge.w	r3, [r8]
 800b38e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b392:	4b9f      	ldr	r3, [pc, #636]	; (800b610 <_dtoa_r+0x2e8>)
 800b394:	bfb8      	it	lt
 800b396:	f8c8 2000 	strlt.w	r2, [r8]
 800b39a:	ea33 0309 	bics.w	r3, r3, r9
 800b39e:	d119      	bne.n	800b3d4 <_dtoa_r+0xac>
 800b3a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3ac:	4333      	orrs	r3, r6
 800b3ae:	f000 8580 	beq.w	800beb2 <_dtoa_r+0xb8a>
 800b3b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3b4:	b953      	cbnz	r3, 800b3cc <_dtoa_r+0xa4>
 800b3b6:	4b97      	ldr	r3, [pc, #604]	; (800b614 <_dtoa_r+0x2ec>)
 800b3b8:	e022      	b.n	800b400 <_dtoa_r+0xd8>
 800b3ba:	4b97      	ldr	r3, [pc, #604]	; (800b618 <_dtoa_r+0x2f0>)
 800b3bc:	9308      	str	r3, [sp, #32]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	9808      	ldr	r0, [sp, #32]
 800b3c6:	b019      	add	sp, #100	; 0x64
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4b91      	ldr	r3, [pc, #580]	; (800b614 <_dtoa_r+0x2ec>)
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	e7f5      	b.n	800b3c0 <_dtoa_r+0x98>
 800b3d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b3d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b3dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f7f5 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	b158      	cbz	r0, 800b404 <_dtoa_r+0xdc>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 8559 	beq.w	800beac <_dtoa_r+0xb84>
 800b3fa:	4888      	ldr	r0, [pc, #544]	; (800b61c <_dtoa_r+0x2f4>)
 800b3fc:	6018      	str	r0, [r3, #0]
 800b3fe:	1e43      	subs	r3, r0, #1
 800b400:	9308      	str	r3, [sp, #32]
 800b402:	e7df      	b.n	800b3c4 <_dtoa_r+0x9c>
 800b404:	ab16      	add	r3, sp, #88	; 0x58
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	ab17      	add	r3, sp, #92	; 0x5c
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	4628      	mov	r0, r5
 800b40e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b412:	f001 fd01 	bl	800ce18 <__d2b>
 800b416:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b41a:	4682      	mov	sl, r0
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	d07e      	beq.n	800b51e <_dtoa_r+0x1f6>
 800b420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b426:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b432:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b436:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b43a:	2200      	movs	r2, #0
 800b43c:	4b78      	ldr	r3, [pc, #480]	; (800b620 <_dtoa_r+0x2f8>)
 800b43e:	f7f4 fe93 	bl	8000168 <__aeabi_dsub>
 800b442:	a36b      	add	r3, pc, #428	; (adr r3, 800b5f0 <_dtoa_r+0x2c8>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	a36a      	add	r3, pc, #424	; (adr r3, 800b5f8 <_dtoa_r+0x2d0>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 fe8b 	bl	800016c <__adddf3>
 800b456:	4606      	mov	r6, r0
 800b458:	4620      	mov	r0, r4
 800b45a:	460f      	mov	r7, r1
 800b45c:	f7f4 ffd2 	bl	8000404 <__aeabi_i2d>
 800b460:	a367      	add	r3, pc, #412	; (adr r3, 800b600 <_dtoa_r+0x2d8>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f5 f837 	bl	80004d8 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f4 fe7b 	bl	800016c <__adddf3>
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	f7f5 fadd 	bl	8000a38 <__aeabi_d2iz>
 800b47e:	2200      	movs	r2, #0
 800b480:	4681      	mov	r9, r0
 800b482:	2300      	movs	r3, #0
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f5 fa98 	bl	80009bc <__aeabi_dcmplt>
 800b48c:	b148      	cbz	r0, 800b4a2 <_dtoa_r+0x17a>
 800b48e:	4648      	mov	r0, r9
 800b490:	f7f4 ffb8 	bl	8000404 <__aeabi_i2d>
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	f7f5 fa86 	bl	80009a8 <__aeabi_dcmpeq>
 800b49c:	b908      	cbnz	r0, 800b4a2 <_dtoa_r+0x17a>
 800b49e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4a2:	f1b9 0f16 	cmp.w	r9, #22
 800b4a6:	d857      	bhi.n	800b558 <_dtoa_r+0x230>
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4ac:	4b5d      	ldr	r3, [pc, #372]	; (800b624 <_dtoa_r+0x2fc>)
 800b4ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f5 fa81 	bl	80009bc <__aeabi_dcmplt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d04e      	beq.n	800b55c <_dtoa_r+0x234>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4c8:	1b1c      	subs	r4, r3, r4
 800b4ca:	1e63      	subs	r3, r4, #1
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	bf49      	itett	mi
 800b4d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800b4d4:	2300      	movpl	r3, #0
 800b4d6:	9306      	strmi	r3, [sp, #24]
 800b4d8:	2300      	movmi	r3, #0
 800b4da:	bf54      	ite	pl
 800b4dc:	9306      	strpl	r3, [sp, #24]
 800b4de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b4e0:	f1b9 0f00 	cmp.w	r9, #0
 800b4e4:	db3c      	blt.n	800b560 <_dtoa_r+0x238>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4ec:	444b      	add	r3, r9
 800b4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d86c      	bhi.n	800b5d4 <_dtoa_r+0x2ac>
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	bfc4      	itt	gt
 800b4fe:	3b04      	subgt	r3, #4
 800b500:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b504:	bfc8      	it	gt
 800b506:	2400      	movgt	r4, #0
 800b508:	f1a3 0302 	sub.w	r3, r3, #2
 800b50c:	bfd8      	it	le
 800b50e:	2401      	movle	r4, #1
 800b510:	2b03      	cmp	r3, #3
 800b512:	f200 808b 	bhi.w	800b62c <_dtoa_r+0x304>
 800b516:	e8df f003 	tbb	[pc, r3]
 800b51a:	4f2d      	.short	0x4f2d
 800b51c:	5b4d      	.short	0x5b4d
 800b51e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b522:	441c      	add	r4, r3
 800b524:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b528:	2b20      	cmp	r3, #32
 800b52a:	bfc3      	ittte	gt
 800b52c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b530:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b534:	fa09 f303 	lslgt.w	r3, r9, r3
 800b538:	f1c3 0320 	rsble	r3, r3, #32
 800b53c:	bfc6      	itte	gt
 800b53e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b542:	4318      	orrgt	r0, r3
 800b544:	fa06 f003 	lslle.w	r0, r6, r3
 800b548:	f7f4 ff4c 	bl	80003e4 <__aeabi_ui2d>
 800b54c:	2301      	movs	r3, #1
 800b54e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b552:	3c01      	subs	r4, #1
 800b554:	9313      	str	r3, [sp, #76]	; 0x4c
 800b556:	e770      	b.n	800b43a <_dtoa_r+0x112>
 800b558:	2301      	movs	r3, #1
 800b55a:	e7b3      	b.n	800b4c4 <_dtoa_r+0x19c>
 800b55c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b55e:	e7b2      	b.n	800b4c6 <_dtoa_r+0x19e>
 800b560:	9b06      	ldr	r3, [sp, #24]
 800b562:	eba3 0309 	sub.w	r3, r3, r9
 800b566:	9306      	str	r3, [sp, #24]
 800b568:	f1c9 0300 	rsb	r3, r9, #0
 800b56c:	930a      	str	r3, [sp, #40]	; 0x28
 800b56e:	2300      	movs	r3, #0
 800b570:	930e      	str	r3, [sp, #56]	; 0x38
 800b572:	e7bf      	b.n	800b4f4 <_dtoa_r+0x1cc>
 800b574:	2300      	movs	r3, #0
 800b576:	930b      	str	r3, [sp, #44]	; 0x2c
 800b578:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dc59      	bgt.n	800b632 <_dtoa_r+0x30a>
 800b57e:	f04f 0b01 	mov.w	fp, #1
 800b582:	465b      	mov	r3, fp
 800b584:	f8cd b008 	str.w	fp, [sp, #8]
 800b588:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b58c:	2200      	movs	r2, #0
 800b58e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b590:	6042      	str	r2, [r0, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	f102 0614 	add.w	r6, r2, #20
 800b598:	429e      	cmp	r6, r3
 800b59a:	6841      	ldr	r1, [r0, #4]
 800b59c:	d94f      	bls.n	800b63e <_dtoa_r+0x316>
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f001 f850 	bl	800c644 <_Balloc>
 800b5a4:	9008      	str	r0, [sp, #32]
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d14d      	bne.n	800b646 <_dtoa_r+0x31e>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <_dtoa_r+0x300>)
 800b5b2:	e6cd      	b.n	800b350 <_dtoa_r+0x28>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e7de      	b.n	800b576 <_dtoa_r+0x24e>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5be:	eb09 0b03 	add.w	fp, r9, r3
 800b5c2:	f10b 0301 	add.w	r3, fp, #1
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	bfb8      	it	lt
 800b5cc:	2301      	movlt	r3, #1
 800b5ce:	e7dd      	b.n	800b58c <_dtoa_r+0x264>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7f2      	b.n	800b5ba <_dtoa_r+0x292>
 800b5d4:	2401      	movs	r4, #1
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5da:	9322      	str	r3, [sp, #136]	; 0x88
 800b5dc:	f04f 3bff 	mov.w	fp, #4294967295
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2312      	movs	r3, #18
 800b5e4:	f8cd b008 	str.w	fp, [sp, #8]
 800b5e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b5ea:	e7cf      	b.n	800b58c <_dtoa_r+0x264>
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	636f4361 	.word	0x636f4361
 800b5f4:	3fd287a7 	.word	0x3fd287a7
 800b5f8:	8b60c8b3 	.word	0x8b60c8b3
 800b5fc:	3fc68a28 	.word	0x3fc68a28
 800b600:	509f79fb 	.word	0x509f79fb
 800b604:	3fd34413 	.word	0x3fd34413
 800b608:	0800e1e6 	.word	0x0800e1e6
 800b60c:	0800e1fd 	.word	0x0800e1fd
 800b610:	7ff00000 	.word	0x7ff00000
 800b614:	0800e1e2 	.word	0x0800e1e2
 800b618:	0800e1d9 	.word	0x0800e1d9
 800b61c:	0800e05d 	.word	0x0800e05d
 800b620:	3ff80000 	.word	0x3ff80000
 800b624:	0800e378 	.word	0x0800e378
 800b628:	0800e25c 	.word	0x0800e25c
 800b62c:	2301      	movs	r3, #1
 800b62e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b630:	e7d4      	b.n	800b5dc <_dtoa_r+0x2b4>
 800b632:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b636:	465b      	mov	r3, fp
 800b638:	f8cd b008 	str.w	fp, [sp, #8]
 800b63c:	e7a6      	b.n	800b58c <_dtoa_r+0x264>
 800b63e:	3101      	adds	r1, #1
 800b640:	6041      	str	r1, [r0, #4]
 800b642:	0052      	lsls	r2, r2, #1
 800b644:	e7a6      	b.n	800b594 <_dtoa_r+0x26c>
 800b646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b648:	9a08      	ldr	r2, [sp, #32]
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	9b02      	ldr	r3, [sp, #8]
 800b64e:	2b0e      	cmp	r3, #14
 800b650:	f200 80a8 	bhi.w	800b7a4 <_dtoa_r+0x47c>
 800b654:	2c00      	cmp	r4, #0
 800b656:	f000 80a5 	beq.w	800b7a4 <_dtoa_r+0x47c>
 800b65a:	f1b9 0f00 	cmp.w	r9, #0
 800b65e:	dd34      	ble.n	800b6ca <_dtoa_r+0x3a2>
 800b660:	4a9a      	ldr	r2, [pc, #616]	; (800b8cc <_dtoa_r+0x5a4>)
 800b662:	f009 030f 	and.w	r3, r9, #15
 800b666:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b66a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b66e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b672:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b676:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b67a:	d016      	beq.n	800b6aa <_dtoa_r+0x382>
 800b67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b680:	4b93      	ldr	r3, [pc, #588]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b682:	2703      	movs	r7, #3
 800b684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b688:	f7f5 f850 	bl	800072c <__aeabi_ddiv>
 800b68c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b690:	f004 040f 	and.w	r4, r4, #15
 800b694:	4e8e      	ldr	r6, [pc, #568]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b696:	b954      	cbnz	r4, 800b6ae <_dtoa_r+0x386>
 800b698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b69c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6a0:	f7f5 f844 	bl	800072c <__aeabi_ddiv>
 800b6a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6a8:	e029      	b.n	800b6fe <_dtoa_r+0x3d6>
 800b6aa:	2702      	movs	r7, #2
 800b6ac:	e7f2      	b.n	800b694 <_dtoa_r+0x36c>
 800b6ae:	07e1      	lsls	r1, r4, #31
 800b6b0:	d508      	bpl.n	800b6c4 <_dtoa_r+0x39c>
 800b6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6ba:	f7f4 ff0d 	bl	80004d8 <__aeabi_dmul>
 800b6be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6c2:	3701      	adds	r7, #1
 800b6c4:	1064      	asrs	r4, r4, #1
 800b6c6:	3608      	adds	r6, #8
 800b6c8:	e7e5      	b.n	800b696 <_dtoa_r+0x36e>
 800b6ca:	f000 80a5 	beq.w	800b818 <_dtoa_r+0x4f0>
 800b6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6d2:	f1c9 0400 	rsb	r4, r9, #0
 800b6d6:	4b7d      	ldr	r3, [pc, #500]	; (800b8cc <_dtoa_r+0x5a4>)
 800b6d8:	f004 020f 	and.w	r2, r4, #15
 800b6dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f7f4 fef8 	bl	80004d8 <__aeabi_dmul>
 800b6e8:	2702      	movs	r7, #2
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6f0:	4e77      	ldr	r6, [pc, #476]	; (800b8d0 <_dtoa_r+0x5a8>)
 800b6f2:	1124      	asrs	r4, r4, #4
 800b6f4:	2c00      	cmp	r4, #0
 800b6f6:	f040 8084 	bne.w	800b802 <_dtoa_r+0x4da>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1d2      	bne.n	800b6a4 <_dtoa_r+0x37c>
 800b6fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 808b 	beq.w	800b81c <_dtoa_r+0x4f4>
 800b706:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b70a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b70e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b712:	2200      	movs	r2, #0
 800b714:	4b6f      	ldr	r3, [pc, #444]	; (800b8d4 <_dtoa_r+0x5ac>)
 800b716:	f7f5 f951 	bl	80009bc <__aeabi_dcmplt>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d07e      	beq.n	800b81c <_dtoa_r+0x4f4>
 800b71e:	9b02      	ldr	r3, [sp, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d07b      	beq.n	800b81c <_dtoa_r+0x4f4>
 800b724:	f1bb 0f00 	cmp.w	fp, #0
 800b728:	dd38      	ble.n	800b79c <_dtoa_r+0x474>
 800b72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b72e:	2200      	movs	r2, #0
 800b730:	4b69      	ldr	r3, [pc, #420]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b732:	f7f4 fed1 	bl	80004d8 <__aeabi_dmul>
 800b736:	465c      	mov	r4, fp
 800b738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b73c:	f109 38ff 	add.w	r8, r9, #4294967295
 800b740:	3701      	adds	r7, #1
 800b742:	4638      	mov	r0, r7
 800b744:	f7f4 fe5e 	bl	8000404 <__aeabi_i2d>
 800b748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b74c:	f7f4 fec4 	bl	80004d8 <__aeabi_dmul>
 800b750:	2200      	movs	r2, #0
 800b752:	4b62      	ldr	r3, [pc, #392]	; (800b8dc <_dtoa_r+0x5b4>)
 800b754:	f7f4 fd0a 	bl	800016c <__adddf3>
 800b758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b75c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b760:	9611      	str	r6, [sp, #68]	; 0x44
 800b762:	2c00      	cmp	r4, #0
 800b764:	d15d      	bne.n	800b822 <_dtoa_r+0x4fa>
 800b766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b76a:	2200      	movs	r2, #0
 800b76c:	4b5c      	ldr	r3, [pc, #368]	; (800b8e0 <_dtoa_r+0x5b8>)
 800b76e:	f7f4 fcfb 	bl	8000168 <__aeabi_dsub>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b77a:	4633      	mov	r3, r6
 800b77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b77e:	f7f5 f93b 	bl	80009f8 <__aeabi_dcmpgt>
 800b782:	2800      	cmp	r0, #0
 800b784:	f040 829e 	bne.w	800bcc4 <_dtoa_r+0x99c>
 800b788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b78c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b78e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b792:	f7f5 f913 	bl	80009bc <__aeabi_dcmplt>
 800b796:	2800      	cmp	r0, #0
 800b798:	f040 8292 	bne.w	800bcc0 <_dtoa_r+0x998>
 800b79c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b7a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b7a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f2c0 8153 	blt.w	800ba52 <_dtoa_r+0x72a>
 800b7ac:	f1b9 0f0e 	cmp.w	r9, #14
 800b7b0:	f300 814f 	bgt.w	800ba52 <_dtoa_r+0x72a>
 800b7b4:	4b45      	ldr	r3, [pc, #276]	; (800b8cc <_dtoa_r+0x5a4>)
 800b7b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b7ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b7c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f280 80db 	bge.w	800b980 <_dtoa_r+0x658>
 800b7ca:	9b02      	ldr	r3, [sp, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f300 80d7 	bgt.w	800b980 <_dtoa_r+0x658>
 800b7d2:	f040 8274 	bne.w	800bcbe <_dtoa_r+0x996>
 800b7d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4b40      	ldr	r3, [pc, #256]	; (800b8e0 <_dtoa_r+0x5b8>)
 800b7de:	f7f4 fe7b 	bl	80004d8 <__aeabi_dmul>
 800b7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e6:	f7f5 f8fd 	bl	80009e4 <__aeabi_dcmpge>
 800b7ea:	9c02      	ldr	r4, [sp, #8]
 800b7ec:	4626      	mov	r6, r4
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f040 824a 	bne.w	800bc88 <_dtoa_r+0x960>
 800b7f4:	2331      	movs	r3, #49	; 0x31
 800b7f6:	9f08      	ldr	r7, [sp, #32]
 800b7f8:	f109 0901 	add.w	r9, r9, #1
 800b7fc:	f807 3b01 	strb.w	r3, [r7], #1
 800b800:	e246      	b.n	800bc90 <_dtoa_r+0x968>
 800b802:	07e2      	lsls	r2, r4, #31
 800b804:	d505      	bpl.n	800b812 <_dtoa_r+0x4ea>
 800b806:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b80a:	f7f4 fe65 	bl	80004d8 <__aeabi_dmul>
 800b80e:	2301      	movs	r3, #1
 800b810:	3701      	adds	r7, #1
 800b812:	1064      	asrs	r4, r4, #1
 800b814:	3608      	adds	r6, #8
 800b816:	e76d      	b.n	800b6f4 <_dtoa_r+0x3cc>
 800b818:	2702      	movs	r7, #2
 800b81a:	e770      	b.n	800b6fe <_dtoa_r+0x3d6>
 800b81c:	46c8      	mov	r8, r9
 800b81e:	9c02      	ldr	r4, [sp, #8]
 800b820:	e78f      	b.n	800b742 <_dtoa_r+0x41a>
 800b822:	9908      	ldr	r1, [sp, #32]
 800b824:	4b29      	ldr	r3, [pc, #164]	; (800b8cc <_dtoa_r+0x5a4>)
 800b826:	4421      	add	r1, r4
 800b828:	9112      	str	r1, [sp, #72]	; 0x48
 800b82a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b82c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b830:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b834:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b838:	2900      	cmp	r1, #0
 800b83a:	d055      	beq.n	800b8e8 <_dtoa_r+0x5c0>
 800b83c:	2000      	movs	r0, #0
 800b83e:	4929      	ldr	r1, [pc, #164]	; (800b8e4 <_dtoa_r+0x5bc>)
 800b840:	f7f4 ff74 	bl	800072c <__aeabi_ddiv>
 800b844:	463b      	mov	r3, r7
 800b846:	4632      	mov	r2, r6
 800b848:	f7f4 fc8e 	bl	8000168 <__aeabi_dsub>
 800b84c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b850:	9f08      	ldr	r7, [sp, #32]
 800b852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b856:	f7f5 f8ef 	bl	8000a38 <__aeabi_d2iz>
 800b85a:	4604      	mov	r4, r0
 800b85c:	f7f4 fdd2 	bl	8000404 <__aeabi_i2d>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b868:	f7f4 fc7e 	bl	8000168 <__aeabi_dsub>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	3430      	adds	r4, #48	; 0x30
 800b872:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b87a:	f807 4b01 	strb.w	r4, [r7], #1
 800b87e:	f7f5 f89d 	bl	80009bc <__aeabi_dcmplt>
 800b882:	2800      	cmp	r0, #0
 800b884:	d174      	bne.n	800b970 <_dtoa_r+0x648>
 800b886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88a:	2000      	movs	r0, #0
 800b88c:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <_dtoa_r+0x5ac>)
 800b88e:	f7f4 fc6b 	bl	8000168 <__aeabi_dsub>
 800b892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b896:	f7f5 f891 	bl	80009bc <__aeabi_dcmplt>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	f040 80b6 	bne.w	800ba0c <_dtoa_r+0x6e4>
 800b8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8a2:	429f      	cmp	r7, r3
 800b8a4:	f43f af7a 	beq.w	800b79c <_dtoa_r+0x474>
 800b8a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b8b0:	f7f4 fe12 	bl	80004d8 <__aeabi_dmul>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8be:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <_dtoa_r+0x5b0>)
 800b8c0:	f7f4 fe0a 	bl	80004d8 <__aeabi_dmul>
 800b8c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8c8:	e7c3      	b.n	800b852 <_dtoa_r+0x52a>
 800b8ca:	bf00      	nop
 800b8cc:	0800e378 	.word	0x0800e378
 800b8d0:	0800e350 	.word	0x0800e350
 800b8d4:	3ff00000 	.word	0x3ff00000
 800b8d8:	40240000 	.word	0x40240000
 800b8dc:	401c0000 	.word	0x401c0000
 800b8e0:	40140000 	.word	0x40140000
 800b8e4:	3fe00000 	.word	0x3fe00000
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fdf4 	bl	80004d8 <__aeabi_dmul>
 800b8f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8f6:	9c08      	ldr	r4, [sp, #32]
 800b8f8:	9314      	str	r3, [sp, #80]	; 0x50
 800b8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fe:	f7f5 f89b 	bl	8000a38 <__aeabi_d2iz>
 800b902:	9015      	str	r0, [sp, #84]	; 0x54
 800b904:	f7f4 fd7e 	bl	8000404 <__aeabi_i2d>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b910:	f7f4 fc2a 	bl	8000168 <__aeabi_dsub>
 800b914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b916:	4606      	mov	r6, r0
 800b918:	3330      	adds	r3, #48	; 0x30
 800b91a:	f804 3b01 	strb.w	r3, [r4], #1
 800b91e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b920:	460f      	mov	r7, r1
 800b922:	429c      	cmp	r4, r3
 800b924:	f04f 0200 	mov.w	r2, #0
 800b928:	d124      	bne.n	800b974 <_dtoa_r+0x64c>
 800b92a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b92e:	4bb3      	ldr	r3, [pc, #716]	; (800bbfc <_dtoa_r+0x8d4>)
 800b930:	f7f4 fc1c 	bl	800016c <__adddf3>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4630      	mov	r0, r6
 800b93a:	4639      	mov	r1, r7
 800b93c:	f7f5 f85c 	bl	80009f8 <__aeabi_dcmpgt>
 800b940:	2800      	cmp	r0, #0
 800b942:	d162      	bne.n	800ba0a <_dtoa_r+0x6e2>
 800b944:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b948:	2000      	movs	r0, #0
 800b94a:	49ac      	ldr	r1, [pc, #688]	; (800bbfc <_dtoa_r+0x8d4>)
 800b94c:	f7f4 fc0c 	bl	8000168 <__aeabi_dsub>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f830 	bl	80009bc <__aeabi_dcmplt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f43f af1d 	beq.w	800b79c <_dtoa_r+0x474>
 800b962:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b964:	1e7b      	subs	r3, r7, #1
 800b966:	9314      	str	r3, [sp, #80]	; 0x50
 800b968:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b96c:	2b30      	cmp	r3, #48	; 0x30
 800b96e:	d0f8      	beq.n	800b962 <_dtoa_r+0x63a>
 800b970:	46c1      	mov	r9, r8
 800b972:	e03a      	b.n	800b9ea <_dtoa_r+0x6c2>
 800b974:	4ba2      	ldr	r3, [pc, #648]	; (800bc00 <_dtoa_r+0x8d8>)
 800b976:	f7f4 fdaf 	bl	80004d8 <__aeabi_dmul>
 800b97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b97e:	e7bc      	b.n	800b8fa <_dtoa_r+0x5d2>
 800b980:	9f08      	ldr	r7, [sp, #32]
 800b982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b98a:	f7f4 fecf 	bl	800072c <__aeabi_ddiv>
 800b98e:	f7f5 f853 	bl	8000a38 <__aeabi_d2iz>
 800b992:	4604      	mov	r4, r0
 800b994:	f7f4 fd36 	bl	8000404 <__aeabi_i2d>
 800b998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b99c:	f7f4 fd9c 	bl	80004d8 <__aeabi_dmul>
 800b9a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ac:	f7f4 fbdc 	bl	8000168 <__aeabi_dsub>
 800b9b0:	f807 6b01 	strb.w	r6, [r7], #1
 800b9b4:	9e08      	ldr	r6, [sp, #32]
 800b9b6:	9b02      	ldr	r3, [sp, #8]
 800b9b8:	1bbe      	subs	r6, r7, r6
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	d13a      	bne.n	800ba34 <_dtoa_r+0x70c>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	f7f4 fbd3 	bl	800016c <__adddf3>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9d2:	f7f5 f811 	bl	80009f8 <__aeabi_dcmpgt>
 800b9d6:	bb58      	cbnz	r0, 800ba30 <_dtoa_r+0x708>
 800b9d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9e0:	f7f4 ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 800b9e4:	b108      	cbz	r0, 800b9ea <_dtoa_r+0x6c2>
 800b9e6:	07e1      	lsls	r1, r4, #31
 800b9e8:	d422      	bmi.n	800ba30 <_dtoa_r+0x708>
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	4651      	mov	r1, sl
 800b9ee:	f000 fe69 	bl	800c6c4 <_Bfree>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	703b      	strb	r3, [r7, #0]
 800b9f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9f8:	f109 0001 	add.w	r0, r9, #1
 800b9fc:	6018      	str	r0, [r3, #0]
 800b9fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f43f acdf 	beq.w	800b3c4 <_dtoa_r+0x9c>
 800ba06:	601f      	str	r7, [r3, #0]
 800ba08:	e4dc      	b.n	800b3c4 <_dtoa_r+0x9c>
 800ba0a:	4627      	mov	r7, r4
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	461f      	mov	r7, r3
 800ba10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba14:	2a39      	cmp	r2, #57	; 0x39
 800ba16:	d107      	bne.n	800ba28 <_dtoa_r+0x700>
 800ba18:	9a08      	ldr	r2, [sp, #32]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d1f7      	bne.n	800ba0e <_dtoa_r+0x6e6>
 800ba1e:	2230      	movs	r2, #48	; 0x30
 800ba20:	9908      	ldr	r1, [sp, #32]
 800ba22:	f108 0801 	add.w	r8, r8, #1
 800ba26:	700a      	strb	r2, [r1, #0]
 800ba28:	781a      	ldrb	r2, [r3, #0]
 800ba2a:	3201      	adds	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	e79f      	b.n	800b970 <_dtoa_r+0x648>
 800ba30:	46c8      	mov	r8, r9
 800ba32:	e7eb      	b.n	800ba0c <_dtoa_r+0x6e4>
 800ba34:	2200      	movs	r2, #0
 800ba36:	4b72      	ldr	r3, [pc, #456]	; (800bc00 <_dtoa_r+0x8d8>)
 800ba38:	f7f4 fd4e 	bl	80004d8 <__aeabi_dmul>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba44:	2200      	movs	r2, #0
 800ba46:	2300      	movs	r3, #0
 800ba48:	f7f4 ffae 	bl	80009a8 <__aeabi_dcmpeq>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d098      	beq.n	800b982 <_dtoa_r+0x65a>
 800ba50:	e7cb      	b.n	800b9ea <_dtoa_r+0x6c2>
 800ba52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	f000 80cd 	beq.w	800bbf4 <_dtoa_r+0x8cc>
 800ba5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba5c:	2a01      	cmp	r2, #1
 800ba5e:	f300 80af 	bgt.w	800bbc0 <_dtoa_r+0x898>
 800ba62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	f000 80a7 	beq.w	800bbb8 <_dtoa_r+0x890>
 800ba6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba70:	9f06      	ldr	r7, [sp, #24]
 800ba72:	9a06      	ldr	r2, [sp, #24]
 800ba74:	2101      	movs	r1, #1
 800ba76:	441a      	add	r2, r3
 800ba78:	9206      	str	r2, [sp, #24]
 800ba7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	441a      	add	r2, r3
 800ba80:	9209      	str	r2, [sp, #36]	; 0x24
 800ba82:	f000 ff23 	bl	800c8cc <__i2b>
 800ba86:	4606      	mov	r6, r0
 800ba88:	2f00      	cmp	r7, #0
 800ba8a:	dd0c      	ble.n	800baa6 <_dtoa_r+0x77e>
 800ba8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dd09      	ble.n	800baa6 <_dtoa_r+0x77e>
 800ba92:	42bb      	cmp	r3, r7
 800ba94:	bfa8      	it	ge
 800ba96:	463b      	movge	r3, r7
 800ba98:	9a06      	ldr	r2, [sp, #24]
 800ba9a:	1aff      	subs	r7, r7, r3
 800ba9c:	1ad2      	subs	r2, r2, r3
 800ba9e:	9206      	str	r2, [sp, #24]
 800baa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	9309      	str	r3, [sp, #36]	; 0x24
 800baa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa8:	b1f3      	cbz	r3, 800bae8 <_dtoa_r+0x7c0>
 800baaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 80a9 	beq.w	800bc04 <_dtoa_r+0x8dc>
 800bab2:	2c00      	cmp	r4, #0
 800bab4:	dd10      	ble.n	800bad8 <_dtoa_r+0x7b0>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4622      	mov	r2, r4
 800baba:	4628      	mov	r0, r5
 800babc:	f000 ffc0 	bl	800ca40 <__pow5mult>
 800bac0:	4652      	mov	r2, sl
 800bac2:	4601      	mov	r1, r0
 800bac4:	4606      	mov	r6, r0
 800bac6:	4628      	mov	r0, r5
 800bac8:	f000 ff16 	bl	800c8f8 <__multiply>
 800bacc:	4680      	mov	r8, r0
 800bace:	4651      	mov	r1, sl
 800bad0:	4628      	mov	r0, r5
 800bad2:	f000 fdf7 	bl	800c6c4 <_Bfree>
 800bad6:	46c2      	mov	sl, r8
 800bad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bada:	1b1a      	subs	r2, r3, r4
 800badc:	d004      	beq.n	800bae8 <_dtoa_r+0x7c0>
 800bade:	4651      	mov	r1, sl
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 ffad 	bl	800ca40 <__pow5mult>
 800bae6:	4682      	mov	sl, r0
 800bae8:	2101      	movs	r1, #1
 800baea:	4628      	mov	r0, r5
 800baec:	f000 feee 	bl	800c8cc <__i2b>
 800baf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800baf2:	4604      	mov	r4, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f340 8087 	ble.w	800bc08 <_dtoa_r+0x8e0>
 800bafa:	461a      	mov	r2, r3
 800bafc:	4601      	mov	r1, r0
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 ff9e 	bl	800ca40 <__pow5mult>
 800bb04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb06:	4604      	mov	r4, r0
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	f340 8080 	ble.w	800bc0e <_dtoa_r+0x8e6>
 800bb0e:	f04f 0800 	mov.w	r8, #0
 800bb12:	6923      	ldr	r3, [r4, #16]
 800bb14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb18:	6918      	ldr	r0, [r3, #16]
 800bb1a:	f000 fe89 	bl	800c830 <__hi0bits>
 800bb1e:	f1c0 0020 	rsb	r0, r0, #32
 800bb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb24:	4418      	add	r0, r3
 800bb26:	f010 001f 	ands.w	r0, r0, #31
 800bb2a:	f000 8092 	beq.w	800bc52 <_dtoa_r+0x92a>
 800bb2e:	f1c0 0320 	rsb	r3, r0, #32
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	f340 808a 	ble.w	800bc4c <_dtoa_r+0x924>
 800bb38:	f1c0 001c 	rsb	r0, r0, #28
 800bb3c:	9b06      	ldr	r3, [sp, #24]
 800bb3e:	4407      	add	r7, r0
 800bb40:	4403      	add	r3, r0
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	4403      	add	r3, r0
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	9b06      	ldr	r3, [sp, #24]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dd05      	ble.n	800bb5c <_dtoa_r+0x834>
 800bb50:	4651      	mov	r1, sl
 800bb52:	461a      	mov	r2, r3
 800bb54:	4628      	mov	r0, r5
 800bb56:	f000 ffcd 	bl	800caf4 <__lshift>
 800bb5a:	4682      	mov	sl, r0
 800bb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd05      	ble.n	800bb6e <_dtoa_r+0x846>
 800bb62:	4621      	mov	r1, r4
 800bb64:	461a      	mov	r2, r3
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 ffc4 	bl	800caf4 <__lshift>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d070      	beq.n	800bc56 <_dtoa_r+0x92e>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4650      	mov	r0, sl
 800bb78:	f001 f828 	bl	800cbcc <__mcmp>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	da6a      	bge.n	800bc56 <_dtoa_r+0x92e>
 800bb80:	2300      	movs	r3, #0
 800bb82:	4651      	mov	r1, sl
 800bb84:	220a      	movs	r2, #10
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 fdbe 	bl	800c708 <__multadd>
 800bb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8e:	4682      	mov	sl, r0
 800bb90:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8193 	beq.w	800bec0 <_dtoa_r+0xb98>
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	220a      	movs	r2, #10
 800bba0:	4628      	mov	r0, r5
 800bba2:	f000 fdb1 	bl	800c708 <__multadd>
 800bba6:	f1bb 0f00 	cmp.w	fp, #0
 800bbaa:	4606      	mov	r6, r0
 800bbac:	f300 8093 	bgt.w	800bcd6 <_dtoa_r+0x9ae>
 800bbb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	dc57      	bgt.n	800bc66 <_dtoa_r+0x93e>
 800bbb6:	e08e      	b.n	800bcd6 <_dtoa_r+0x9ae>
 800bbb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bbba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbbe:	e756      	b.n	800ba6e <_dtoa_r+0x746>
 800bbc0:	9b02      	ldr	r3, [sp, #8]
 800bbc2:	1e5c      	subs	r4, r3, #1
 800bbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc6:	42a3      	cmp	r3, r4
 800bbc8:	bfb7      	itett	lt
 800bbca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bbcc:	1b1c      	subge	r4, r3, r4
 800bbce:	1ae2      	sublt	r2, r4, r3
 800bbd0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bbd2:	bfbe      	ittt	lt
 800bbd4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bbd6:	189b      	addlt	r3, r3, r2
 800bbd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	bfb8      	it	lt
 800bbde:	2400      	movlt	r4, #0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	bfbb      	ittet	lt
 800bbe4:	9b06      	ldrlt	r3, [sp, #24]
 800bbe6:	9a02      	ldrlt	r2, [sp, #8]
 800bbe8:	9f06      	ldrge	r7, [sp, #24]
 800bbea:	1a9f      	sublt	r7, r3, r2
 800bbec:	bfac      	ite	ge
 800bbee:	9b02      	ldrge	r3, [sp, #8]
 800bbf0:	2300      	movlt	r3, #0
 800bbf2:	e73e      	b.n	800ba72 <_dtoa_r+0x74a>
 800bbf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbf6:	9f06      	ldr	r7, [sp, #24]
 800bbf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bbfa:	e745      	b.n	800ba88 <_dtoa_r+0x760>
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	40240000 	.word	0x40240000
 800bc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc06:	e76a      	b.n	800bade <_dtoa_r+0x7b6>
 800bc08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	dc19      	bgt.n	800bc42 <_dtoa_r+0x91a>
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	b9bb      	cbnz	r3, 800bc42 <_dtoa_r+0x91a>
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc18:	b99b      	cbnz	r3, 800bc42 <_dtoa_r+0x91a>
 800bc1a:	9b05      	ldr	r3, [sp, #20]
 800bc1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc20:	0d1b      	lsrs	r3, r3, #20
 800bc22:	051b      	lsls	r3, r3, #20
 800bc24:	b183      	cbz	r3, 800bc48 <_dtoa_r+0x920>
 800bc26:	f04f 0801 	mov.w	r8, #1
 800bc2a:	9b06      	ldr	r3, [sp, #24]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	9306      	str	r3, [sp, #24]
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	3301      	adds	r3, #1
 800bc34:	9309      	str	r3, [sp, #36]	; 0x24
 800bc36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f af6a 	bne.w	800bb12 <_dtoa_r+0x7ea>
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e76f      	b.n	800bb22 <_dtoa_r+0x7fa>
 800bc42:	f04f 0800 	mov.w	r8, #0
 800bc46:	e7f6      	b.n	800bc36 <_dtoa_r+0x90e>
 800bc48:	4698      	mov	r8, r3
 800bc4a:	e7f4      	b.n	800bc36 <_dtoa_r+0x90e>
 800bc4c:	f43f af7d 	beq.w	800bb4a <_dtoa_r+0x822>
 800bc50:	4618      	mov	r0, r3
 800bc52:	301c      	adds	r0, #28
 800bc54:	e772      	b.n	800bb3c <_dtoa_r+0x814>
 800bc56:	9b02      	ldr	r3, [sp, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc36      	bgt.n	800bcca <_dtoa_r+0x9a2>
 800bc5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	dd33      	ble.n	800bcca <_dtoa_r+0x9a2>
 800bc62:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bc66:	f1bb 0f00 	cmp.w	fp, #0
 800bc6a:	d10d      	bne.n	800bc88 <_dtoa_r+0x960>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	465b      	mov	r3, fp
 800bc70:	2205      	movs	r2, #5
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 fd48 	bl	800c708 <__multadd>
 800bc78:	4601      	mov	r1, r0
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	f000 ffa5 	bl	800cbcc <__mcmp>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f73f adb6 	bgt.w	800b7f4 <_dtoa_r+0x4cc>
 800bc88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc8a:	9f08      	ldr	r7, [sp, #32]
 800bc8c:	ea6f 0903 	mvn.w	r9, r3
 800bc90:	f04f 0800 	mov.w	r8, #0
 800bc94:	4621      	mov	r1, r4
 800bc96:	4628      	mov	r0, r5
 800bc98:	f000 fd14 	bl	800c6c4 <_Bfree>
 800bc9c:	2e00      	cmp	r6, #0
 800bc9e:	f43f aea4 	beq.w	800b9ea <_dtoa_r+0x6c2>
 800bca2:	f1b8 0f00 	cmp.w	r8, #0
 800bca6:	d005      	beq.n	800bcb4 <_dtoa_r+0x98c>
 800bca8:	45b0      	cmp	r8, r6
 800bcaa:	d003      	beq.n	800bcb4 <_dtoa_r+0x98c>
 800bcac:	4641      	mov	r1, r8
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 fd08 	bl	800c6c4 <_Bfree>
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f000 fd04 	bl	800c6c4 <_Bfree>
 800bcbc:	e695      	b.n	800b9ea <_dtoa_r+0x6c2>
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	4626      	mov	r6, r4
 800bcc2:	e7e1      	b.n	800bc88 <_dtoa_r+0x960>
 800bcc4:	46c1      	mov	r9, r8
 800bcc6:	4626      	mov	r6, r4
 800bcc8:	e594      	b.n	800b7f4 <_dtoa_r+0x4cc>
 800bcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bccc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 80fc 	beq.w	800bece <_dtoa_r+0xba6>
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	dd05      	ble.n	800bce6 <_dtoa_r+0x9be>
 800bcda:	4631      	mov	r1, r6
 800bcdc:	463a      	mov	r2, r7
 800bcde:	4628      	mov	r0, r5
 800bce0:	f000 ff08 	bl	800caf4 <__lshift>
 800bce4:	4606      	mov	r6, r0
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	d05c      	beq.n	800bda6 <_dtoa_r+0xa7e>
 800bcec:	4628      	mov	r0, r5
 800bcee:	6871      	ldr	r1, [r6, #4]
 800bcf0:	f000 fca8 	bl	800c644 <_Balloc>
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	b928      	cbnz	r0, 800bd04 <_dtoa_r+0x9dc>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcfe:	4b7e      	ldr	r3, [pc, #504]	; (800bef8 <_dtoa_r+0xbd0>)
 800bd00:	f7ff bb26 	b.w	800b350 <_dtoa_r+0x28>
 800bd04:	6932      	ldr	r2, [r6, #16]
 800bd06:	f106 010c 	add.w	r1, r6, #12
 800bd0a:	3202      	adds	r2, #2
 800bd0c:	0092      	lsls	r2, r2, #2
 800bd0e:	300c      	adds	r0, #12
 800bd10:	f000 fc8a 	bl	800c628 <memcpy>
 800bd14:	2201      	movs	r2, #1
 800bd16:	4639      	mov	r1, r7
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f000 feeb 	bl	800caf4 <__lshift>
 800bd1e:	46b0      	mov	r8, r6
 800bd20:	4606      	mov	r6, r0
 800bd22:	9b08      	ldr	r3, [sp, #32]
 800bd24:	3301      	adds	r3, #1
 800bd26:	9302      	str	r3, [sp, #8]
 800bd28:	9b08      	ldr	r3, [sp, #32]
 800bd2a:	445b      	add	r3, fp
 800bd2c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd2e:	9b04      	ldr	r3, [sp, #16]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	9b02      	ldr	r3, [sp, #8]
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4650      	mov	r0, sl
 800bd3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd40:	f7ff fa64 	bl	800b20c <quorem>
 800bd44:	4603      	mov	r3, r0
 800bd46:	4641      	mov	r1, r8
 800bd48:	3330      	adds	r3, #48	; 0x30
 800bd4a:	9004      	str	r0, [sp, #16]
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd50:	f000 ff3c 	bl	800cbcc <__mcmp>
 800bd54:	4632      	mov	r2, r6
 800bd56:	9006      	str	r0, [sp, #24]
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 ff52 	bl	800cc04 <__mdiff>
 800bd60:	68c2      	ldr	r2, [r0, #12]
 800bd62:	4607      	mov	r7, r0
 800bd64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd66:	bb02      	cbnz	r2, 800bdaa <_dtoa_r+0xa82>
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4650      	mov	r0, sl
 800bd6c:	f000 ff2e 	bl	800cbcc <__mcmp>
 800bd70:	4602      	mov	r2, r0
 800bd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd74:	4639      	mov	r1, r7
 800bd76:	4628      	mov	r0, r5
 800bd78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bd7c:	f000 fca2 	bl	800c6c4 <_Bfree>
 800bd80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd84:	9f02      	ldr	r7, [sp, #8]
 800bd86:	ea43 0102 	orr.w	r1, r3, r2
 800bd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8c:	430b      	orrs	r3, r1
 800bd8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd90:	d10d      	bne.n	800bdae <_dtoa_r+0xa86>
 800bd92:	2b39      	cmp	r3, #57	; 0x39
 800bd94:	d027      	beq.n	800bde6 <_dtoa_r+0xabe>
 800bd96:	9a06      	ldr	r2, [sp, #24]
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	dd01      	ble.n	800bda0 <_dtoa_r+0xa78>
 800bd9c:	9b04      	ldr	r3, [sp, #16]
 800bd9e:	3331      	adds	r3, #49	; 0x31
 800bda0:	f88b 3000 	strb.w	r3, [fp]
 800bda4:	e776      	b.n	800bc94 <_dtoa_r+0x96c>
 800bda6:	4630      	mov	r0, r6
 800bda8:	e7b9      	b.n	800bd1e <_dtoa_r+0x9f6>
 800bdaa:	2201      	movs	r2, #1
 800bdac:	e7e2      	b.n	800bd74 <_dtoa_r+0xa4c>
 800bdae:	9906      	ldr	r1, [sp, #24]
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	db04      	blt.n	800bdbe <_dtoa_r+0xa96>
 800bdb4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800bdb6:	4301      	orrs	r1, r0
 800bdb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdba:	4301      	orrs	r1, r0
 800bdbc:	d120      	bne.n	800be00 <_dtoa_r+0xad8>
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	ddee      	ble.n	800bda0 <_dtoa_r+0xa78>
 800bdc2:	4651      	mov	r1, sl
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	9302      	str	r3, [sp, #8]
 800bdca:	f000 fe93 	bl	800caf4 <__lshift>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	f000 fefb 	bl	800cbcc <__mcmp>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	9b02      	ldr	r3, [sp, #8]
 800bdda:	dc02      	bgt.n	800bde2 <_dtoa_r+0xaba>
 800bddc:	d1e0      	bne.n	800bda0 <_dtoa_r+0xa78>
 800bdde:	07da      	lsls	r2, r3, #31
 800bde0:	d5de      	bpl.n	800bda0 <_dtoa_r+0xa78>
 800bde2:	2b39      	cmp	r3, #57	; 0x39
 800bde4:	d1da      	bne.n	800bd9c <_dtoa_r+0xa74>
 800bde6:	2339      	movs	r3, #57	; 0x39
 800bde8:	f88b 3000 	strb.w	r3, [fp]
 800bdec:	463b      	mov	r3, r7
 800bdee:	461f      	mov	r7, r3
 800bdf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	2a39      	cmp	r2, #57	; 0x39
 800bdf8:	d050      	beq.n	800be9c <_dtoa_r+0xb74>
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e749      	b.n	800bc94 <_dtoa_r+0x96c>
 800be00:	2a00      	cmp	r2, #0
 800be02:	dd03      	ble.n	800be0c <_dtoa_r+0xae4>
 800be04:	2b39      	cmp	r3, #57	; 0x39
 800be06:	d0ee      	beq.n	800bde6 <_dtoa_r+0xabe>
 800be08:	3301      	adds	r3, #1
 800be0a:	e7c9      	b.n	800bda0 <_dtoa_r+0xa78>
 800be0c:	9a02      	ldr	r2, [sp, #8]
 800be0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be14:	428a      	cmp	r2, r1
 800be16:	d02a      	beq.n	800be6e <_dtoa_r+0xb46>
 800be18:	4651      	mov	r1, sl
 800be1a:	2300      	movs	r3, #0
 800be1c:	220a      	movs	r2, #10
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 fc72 	bl	800c708 <__multadd>
 800be24:	45b0      	cmp	r8, r6
 800be26:	4682      	mov	sl, r0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	f04f 020a 	mov.w	r2, #10
 800be30:	4641      	mov	r1, r8
 800be32:	4628      	mov	r0, r5
 800be34:	d107      	bne.n	800be46 <_dtoa_r+0xb1e>
 800be36:	f000 fc67 	bl	800c708 <__multadd>
 800be3a:	4680      	mov	r8, r0
 800be3c:	4606      	mov	r6, r0
 800be3e:	9b02      	ldr	r3, [sp, #8]
 800be40:	3301      	adds	r3, #1
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	e777      	b.n	800bd36 <_dtoa_r+0xa0e>
 800be46:	f000 fc5f 	bl	800c708 <__multadd>
 800be4a:	4631      	mov	r1, r6
 800be4c:	4680      	mov	r8, r0
 800be4e:	2300      	movs	r3, #0
 800be50:	220a      	movs	r2, #10
 800be52:	4628      	mov	r0, r5
 800be54:	f000 fc58 	bl	800c708 <__multadd>
 800be58:	4606      	mov	r6, r0
 800be5a:	e7f0      	b.n	800be3e <_dtoa_r+0xb16>
 800be5c:	f1bb 0f00 	cmp.w	fp, #0
 800be60:	bfcc      	ite	gt
 800be62:	465f      	movgt	r7, fp
 800be64:	2701      	movle	r7, #1
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	9a08      	ldr	r2, [sp, #32]
 800be6c:	4417      	add	r7, r2
 800be6e:	4651      	mov	r1, sl
 800be70:	2201      	movs	r2, #1
 800be72:	4628      	mov	r0, r5
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	f000 fe3d 	bl	800caf4 <__lshift>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4682      	mov	sl, r0
 800be7e:	f000 fea5 	bl	800cbcc <__mcmp>
 800be82:	2800      	cmp	r0, #0
 800be84:	dcb2      	bgt.n	800bdec <_dtoa_r+0xac4>
 800be86:	d102      	bne.n	800be8e <_dtoa_r+0xb66>
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	07db      	lsls	r3, r3, #31
 800be8c:	d4ae      	bmi.n	800bdec <_dtoa_r+0xac4>
 800be8e:	463b      	mov	r3, r7
 800be90:	461f      	mov	r7, r3
 800be92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be96:	2a30      	cmp	r2, #48	; 0x30
 800be98:	d0fa      	beq.n	800be90 <_dtoa_r+0xb68>
 800be9a:	e6fb      	b.n	800bc94 <_dtoa_r+0x96c>
 800be9c:	9a08      	ldr	r2, [sp, #32]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d1a5      	bne.n	800bdee <_dtoa_r+0xac6>
 800bea2:	2331      	movs	r3, #49	; 0x31
 800bea4:	f109 0901 	add.w	r9, r9, #1
 800bea8:	7013      	strb	r3, [r2, #0]
 800beaa:	e6f3      	b.n	800bc94 <_dtoa_r+0x96c>
 800beac:	4b13      	ldr	r3, [pc, #76]	; (800befc <_dtoa_r+0xbd4>)
 800beae:	f7ff baa7 	b.w	800b400 <_dtoa_r+0xd8>
 800beb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f47f aa80 	bne.w	800b3ba <_dtoa_r+0x92>
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <_dtoa_r+0xbd8>)
 800bebc:	f7ff baa0 	b.w	800b400 <_dtoa_r+0xd8>
 800bec0:	f1bb 0f00 	cmp.w	fp, #0
 800bec4:	dc03      	bgt.n	800bece <_dtoa_r+0xba6>
 800bec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bec8:	2b02      	cmp	r3, #2
 800beca:	f73f aecc 	bgt.w	800bc66 <_dtoa_r+0x93e>
 800bece:	9f08      	ldr	r7, [sp, #32]
 800bed0:	4621      	mov	r1, r4
 800bed2:	4650      	mov	r0, sl
 800bed4:	f7ff f99a 	bl	800b20c <quorem>
 800bed8:	9a08      	ldr	r2, [sp, #32]
 800beda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bede:	f807 3b01 	strb.w	r3, [r7], #1
 800bee2:	1aba      	subs	r2, r7, r2
 800bee4:	4593      	cmp	fp, r2
 800bee6:	ddb9      	ble.n	800be5c <_dtoa_r+0xb34>
 800bee8:	4651      	mov	r1, sl
 800beea:	2300      	movs	r3, #0
 800beec:	220a      	movs	r2, #10
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 fc0a 	bl	800c708 <__multadd>
 800bef4:	4682      	mov	sl, r0
 800bef6:	e7eb      	b.n	800bed0 <_dtoa_r+0xba8>
 800bef8:	0800e25c 	.word	0x0800e25c
 800befc:	0800e05c 	.word	0x0800e05c
 800bf00:	0800e1d9 	.word	0x0800e1d9

0800bf04 <rshift>:
 800bf04:	6903      	ldr	r3, [r0, #16]
 800bf06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf0e:	f100 0414 	add.w	r4, r0, #20
 800bf12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf16:	dd46      	ble.n	800bfa6 <rshift+0xa2>
 800bf18:	f011 011f 	ands.w	r1, r1, #31
 800bf1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf24:	d10c      	bne.n	800bf40 <rshift+0x3c>
 800bf26:	4629      	mov	r1, r5
 800bf28:	f100 0710 	add.w	r7, r0, #16
 800bf2c:	42b1      	cmp	r1, r6
 800bf2e:	d335      	bcc.n	800bf9c <rshift+0x98>
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	1eea      	subs	r2, r5, #3
 800bf36:	4296      	cmp	r6, r2
 800bf38:	bf38      	it	cc
 800bf3a:	2300      	movcc	r3, #0
 800bf3c:	4423      	add	r3, r4
 800bf3e:	e015      	b.n	800bf6c <rshift+0x68>
 800bf40:	46a1      	mov	r9, r4
 800bf42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf46:	f1c1 0820 	rsb	r8, r1, #32
 800bf4a:	40cf      	lsrs	r7, r1
 800bf4c:	f105 0e04 	add.w	lr, r5, #4
 800bf50:	4576      	cmp	r6, lr
 800bf52:	46f4      	mov	ip, lr
 800bf54:	d816      	bhi.n	800bf84 <rshift+0x80>
 800bf56:	1a9b      	subs	r3, r3, r2
 800bf58:	009a      	lsls	r2, r3, #2
 800bf5a:	3a04      	subs	r2, #4
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	42ae      	cmp	r6, r5
 800bf60:	bf38      	it	cc
 800bf62:	2200      	movcc	r2, #0
 800bf64:	18a3      	adds	r3, r4, r2
 800bf66:	50a7      	str	r7, [r4, r2]
 800bf68:	b107      	cbz	r7, 800bf6c <rshift+0x68>
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	eba3 0204 	sub.w	r2, r3, r4
 800bf72:	bf08      	it	eq
 800bf74:	2300      	moveq	r3, #0
 800bf76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf7a:	6102      	str	r2, [r0, #16]
 800bf7c:	bf08      	it	eq
 800bf7e:	6143      	streq	r3, [r0, #20]
 800bf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf84:	f8dc c000 	ldr.w	ip, [ip]
 800bf88:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf8c:	ea4c 0707 	orr.w	r7, ip, r7
 800bf90:	f849 7b04 	str.w	r7, [r9], #4
 800bf94:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf98:	40cf      	lsrs	r7, r1
 800bf9a:	e7d9      	b.n	800bf50 <rshift+0x4c>
 800bf9c:	f851 cb04 	ldr.w	ip, [r1], #4
 800bfa0:	f847 cf04 	str.w	ip, [r7, #4]!
 800bfa4:	e7c2      	b.n	800bf2c <rshift+0x28>
 800bfa6:	4623      	mov	r3, r4
 800bfa8:	e7e0      	b.n	800bf6c <rshift+0x68>

0800bfaa <__hexdig_fun>:
 800bfaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d802      	bhi.n	800bfb8 <__hexdig_fun+0xe>
 800bfb2:	3820      	subs	r0, #32
 800bfb4:	b2c0      	uxtb	r0, r0
 800bfb6:	4770      	bx	lr
 800bfb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bfbc:	2b05      	cmp	r3, #5
 800bfbe:	d801      	bhi.n	800bfc4 <__hexdig_fun+0x1a>
 800bfc0:	3847      	subs	r0, #71	; 0x47
 800bfc2:	e7f7      	b.n	800bfb4 <__hexdig_fun+0xa>
 800bfc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfc8:	2b05      	cmp	r3, #5
 800bfca:	d801      	bhi.n	800bfd0 <__hexdig_fun+0x26>
 800bfcc:	3827      	subs	r0, #39	; 0x27
 800bfce:	e7f1      	b.n	800bfb4 <__hexdig_fun+0xa>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	4770      	bx	lr

0800bfd4 <__gethex>:
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	b08b      	sub	sp, #44	; 0x2c
 800bfda:	9306      	str	r3, [sp, #24]
 800bfdc:	4bb9      	ldr	r3, [pc, #740]	; (800c2c4 <__gethex+0x2f0>)
 800bfde:	9002      	str	r0, [sp, #8]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	468b      	mov	fp, r1
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	4690      	mov	r8, r2
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	f7f4 f8b1 	bl	8000150 <strlen>
 800bfee:	4682      	mov	sl, r0
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	f8db 2000 	ldr.w	r2, [fp]
 800bff6:	4403      	add	r3, r0
 800bff8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bffc:	9307      	str	r3, [sp, #28]
 800bffe:	1c93      	adds	r3, r2, #2
 800c000:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c004:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c008:	32fe      	adds	r2, #254	; 0xfe
 800c00a:	18d1      	adds	r1, r2, r3
 800c00c:	461f      	mov	r7, r3
 800c00e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c012:	9101      	str	r1, [sp, #4]
 800c014:	2830      	cmp	r0, #48	; 0x30
 800c016:	d0f8      	beq.n	800c00a <__gethex+0x36>
 800c018:	f7ff ffc7 	bl	800bfaa <__hexdig_fun>
 800c01c:	4604      	mov	r4, r0
 800c01e:	2800      	cmp	r0, #0
 800c020:	d13a      	bne.n	800c098 <__gethex+0xc4>
 800c022:	4652      	mov	r2, sl
 800c024:	4638      	mov	r0, r7
 800c026:	9903      	ldr	r1, [sp, #12]
 800c028:	f001 f9ea 	bl	800d400 <strncmp>
 800c02c:	4605      	mov	r5, r0
 800c02e:	2800      	cmp	r0, #0
 800c030:	d166      	bne.n	800c100 <__gethex+0x12c>
 800c032:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c036:	eb07 060a 	add.w	r6, r7, sl
 800c03a:	f7ff ffb6 	bl	800bfaa <__hexdig_fun>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d060      	beq.n	800c104 <__gethex+0x130>
 800c042:	4633      	mov	r3, r6
 800c044:	7818      	ldrb	r0, [r3, #0]
 800c046:	461f      	mov	r7, r3
 800c048:	2830      	cmp	r0, #48	; 0x30
 800c04a:	f103 0301 	add.w	r3, r3, #1
 800c04e:	d0f9      	beq.n	800c044 <__gethex+0x70>
 800c050:	f7ff ffab 	bl	800bfaa <__hexdig_fun>
 800c054:	2301      	movs	r3, #1
 800c056:	fab0 f480 	clz	r4, r0
 800c05a:	4635      	mov	r5, r6
 800c05c:	0964      	lsrs	r4, r4, #5
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	463a      	mov	r2, r7
 800c062:	4616      	mov	r6, r2
 800c064:	7830      	ldrb	r0, [r6, #0]
 800c066:	3201      	adds	r2, #1
 800c068:	f7ff ff9f 	bl	800bfaa <__hexdig_fun>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1f8      	bne.n	800c062 <__gethex+0x8e>
 800c070:	4652      	mov	r2, sl
 800c072:	4630      	mov	r0, r6
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	f001 f9c3 	bl	800d400 <strncmp>
 800c07a:	b980      	cbnz	r0, 800c09e <__gethex+0xca>
 800c07c:	b94d      	cbnz	r5, 800c092 <__gethex+0xbe>
 800c07e:	eb06 050a 	add.w	r5, r6, sl
 800c082:	462a      	mov	r2, r5
 800c084:	4616      	mov	r6, r2
 800c086:	7830      	ldrb	r0, [r6, #0]
 800c088:	3201      	adds	r2, #1
 800c08a:	f7ff ff8e 	bl	800bfaa <__hexdig_fun>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d1f8      	bne.n	800c084 <__gethex+0xb0>
 800c092:	1bad      	subs	r5, r5, r6
 800c094:	00ad      	lsls	r5, r5, #2
 800c096:	e004      	b.n	800c0a2 <__gethex+0xce>
 800c098:	2400      	movs	r4, #0
 800c09a:	4625      	mov	r5, r4
 800c09c:	e7e0      	b.n	800c060 <__gethex+0x8c>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	d1f7      	bne.n	800c092 <__gethex+0xbe>
 800c0a2:	7833      	ldrb	r3, [r6, #0]
 800c0a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c0a8:	2b50      	cmp	r3, #80	; 0x50
 800c0aa:	d139      	bne.n	800c120 <__gethex+0x14c>
 800c0ac:	7873      	ldrb	r3, [r6, #1]
 800c0ae:	2b2b      	cmp	r3, #43	; 0x2b
 800c0b0:	d02a      	beq.n	800c108 <__gethex+0x134>
 800c0b2:	2b2d      	cmp	r3, #45	; 0x2d
 800c0b4:	d02c      	beq.n	800c110 <__gethex+0x13c>
 800c0b6:	f04f 0900 	mov.w	r9, #0
 800c0ba:	1c71      	adds	r1, r6, #1
 800c0bc:	7808      	ldrb	r0, [r1, #0]
 800c0be:	f7ff ff74 	bl	800bfaa <__hexdig_fun>
 800c0c2:	1e43      	subs	r3, r0, #1
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b18      	cmp	r3, #24
 800c0c8:	d82a      	bhi.n	800c120 <__gethex+0x14c>
 800c0ca:	f1a0 0210 	sub.w	r2, r0, #16
 800c0ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0d2:	f7ff ff6a 	bl	800bfaa <__hexdig_fun>
 800c0d6:	1e43      	subs	r3, r0, #1
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b18      	cmp	r3, #24
 800c0dc:	d91b      	bls.n	800c116 <__gethex+0x142>
 800c0de:	f1b9 0f00 	cmp.w	r9, #0
 800c0e2:	d000      	beq.n	800c0e6 <__gethex+0x112>
 800c0e4:	4252      	negs	r2, r2
 800c0e6:	4415      	add	r5, r2
 800c0e8:	f8cb 1000 	str.w	r1, [fp]
 800c0ec:	b1d4      	cbz	r4, 800c124 <__gethex+0x150>
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bf14      	ite	ne
 800c0f4:	2700      	movne	r7, #0
 800c0f6:	2706      	moveq	r7, #6
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	b00b      	add	sp, #44	; 0x2c
 800c0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c100:	463e      	mov	r6, r7
 800c102:	4625      	mov	r5, r4
 800c104:	2401      	movs	r4, #1
 800c106:	e7cc      	b.n	800c0a2 <__gethex+0xce>
 800c108:	f04f 0900 	mov.w	r9, #0
 800c10c:	1cb1      	adds	r1, r6, #2
 800c10e:	e7d5      	b.n	800c0bc <__gethex+0xe8>
 800c110:	f04f 0901 	mov.w	r9, #1
 800c114:	e7fa      	b.n	800c10c <__gethex+0x138>
 800c116:	230a      	movs	r3, #10
 800c118:	fb03 0202 	mla	r2, r3, r2, r0
 800c11c:	3a10      	subs	r2, #16
 800c11e:	e7d6      	b.n	800c0ce <__gethex+0xfa>
 800c120:	4631      	mov	r1, r6
 800c122:	e7e1      	b.n	800c0e8 <__gethex+0x114>
 800c124:	4621      	mov	r1, r4
 800c126:	1bf3      	subs	r3, r6, r7
 800c128:	3b01      	subs	r3, #1
 800c12a:	2b07      	cmp	r3, #7
 800c12c:	dc0a      	bgt.n	800c144 <__gethex+0x170>
 800c12e:	9802      	ldr	r0, [sp, #8]
 800c130:	f000 fa88 	bl	800c644 <_Balloc>
 800c134:	4604      	mov	r4, r0
 800c136:	b940      	cbnz	r0, 800c14a <__gethex+0x176>
 800c138:	4602      	mov	r2, r0
 800c13a:	21de      	movs	r1, #222	; 0xde
 800c13c:	4b62      	ldr	r3, [pc, #392]	; (800c2c8 <__gethex+0x2f4>)
 800c13e:	4863      	ldr	r0, [pc, #396]	; (800c2cc <__gethex+0x2f8>)
 800c140:	f001 f97e 	bl	800d440 <__assert_func>
 800c144:	3101      	adds	r1, #1
 800c146:	105b      	asrs	r3, r3, #1
 800c148:	e7ef      	b.n	800c12a <__gethex+0x156>
 800c14a:	f04f 0b00 	mov.w	fp, #0
 800c14e:	f100 0914 	add.w	r9, r0, #20
 800c152:	f1ca 0301 	rsb	r3, sl, #1
 800c156:	f8cd 9010 	str.w	r9, [sp, #16]
 800c15a:	f8cd b004 	str.w	fp, [sp, #4]
 800c15e:	9308      	str	r3, [sp, #32]
 800c160:	42b7      	cmp	r7, r6
 800c162:	d33f      	bcc.n	800c1e4 <__gethex+0x210>
 800c164:	9f04      	ldr	r7, [sp, #16]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	f847 3b04 	str.w	r3, [r7], #4
 800c16c:	eba7 0709 	sub.w	r7, r7, r9
 800c170:	10bf      	asrs	r7, r7, #2
 800c172:	6127      	str	r7, [r4, #16]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fb5b 	bl	800c830 <__hi0bits>
 800c17a:	017f      	lsls	r7, r7, #5
 800c17c:	f8d8 6000 	ldr.w	r6, [r8]
 800c180:	1a3f      	subs	r7, r7, r0
 800c182:	42b7      	cmp	r7, r6
 800c184:	dd62      	ble.n	800c24c <__gethex+0x278>
 800c186:	1bbf      	subs	r7, r7, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fef1 	bl	800cf72 <__any_on>
 800c190:	4682      	mov	sl, r0
 800c192:	b1a8      	cbz	r0, 800c1c0 <__gethex+0x1ec>
 800c194:	f04f 0a01 	mov.w	sl, #1
 800c198:	1e7b      	subs	r3, r7, #1
 800c19a:	1159      	asrs	r1, r3, #5
 800c19c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c1a0:	f003 021f 	and.w	r2, r3, #31
 800c1a4:	fa0a f202 	lsl.w	r2, sl, r2
 800c1a8:	420a      	tst	r2, r1
 800c1aa:	d009      	beq.n	800c1c0 <__gethex+0x1ec>
 800c1ac:	4553      	cmp	r3, sl
 800c1ae:	dd05      	ble.n	800c1bc <__gethex+0x1e8>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	1eb9      	subs	r1, r7, #2
 800c1b4:	f000 fedd 	bl	800cf72 <__any_on>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d144      	bne.n	800c246 <__gethex+0x272>
 800c1bc:	f04f 0a02 	mov.w	sl, #2
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff fe9e 	bl	800bf04 <rshift>
 800c1c8:	443d      	add	r5, r7
 800c1ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1ce:	42ab      	cmp	r3, r5
 800c1d0:	da4a      	bge.n	800c268 <__gethex+0x294>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	9802      	ldr	r0, [sp, #8]
 800c1d6:	f000 fa75 	bl	800c6c4 <_Bfree>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1de:	27a3      	movs	r7, #163	; 0xa3
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	e789      	b.n	800c0f8 <__gethex+0x124>
 800c1e4:	1e73      	subs	r3, r6, #1
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	9305      	str	r3, [sp, #20]
 800c1ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d019      	beq.n	800c226 <__gethex+0x252>
 800c1f2:	f1bb 0f20 	cmp.w	fp, #32
 800c1f6:	d107      	bne.n	800c208 <__gethex+0x234>
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	9a01      	ldr	r2, [sp, #4]
 800c1fc:	f843 2b04 	str.w	r2, [r3], #4
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	2300      	movs	r3, #0
 800c204:	469b      	mov	fp, r3
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c20c:	f7ff fecd 	bl	800bfaa <__hexdig_fun>
 800c210:	9b01      	ldr	r3, [sp, #4]
 800c212:	f000 000f 	and.w	r0, r0, #15
 800c216:	fa00 f00b 	lsl.w	r0, r0, fp
 800c21a:	4303      	orrs	r3, r0
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f10b 0b04 	add.w	fp, fp, #4
 800c222:	9b05      	ldr	r3, [sp, #20]
 800c224:	e00d      	b.n	800c242 <__gethex+0x26e>
 800c226:	9b05      	ldr	r3, [sp, #20]
 800c228:	9a08      	ldr	r2, [sp, #32]
 800c22a:	4413      	add	r3, r2
 800c22c:	42bb      	cmp	r3, r7
 800c22e:	d3e0      	bcc.n	800c1f2 <__gethex+0x21e>
 800c230:	4618      	mov	r0, r3
 800c232:	4652      	mov	r2, sl
 800c234:	9903      	ldr	r1, [sp, #12]
 800c236:	9309      	str	r3, [sp, #36]	; 0x24
 800c238:	f001 f8e2 	bl	800d400 <strncmp>
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	2800      	cmp	r0, #0
 800c240:	d1d7      	bne.n	800c1f2 <__gethex+0x21e>
 800c242:	461e      	mov	r6, r3
 800c244:	e78c      	b.n	800c160 <__gethex+0x18c>
 800c246:	f04f 0a03 	mov.w	sl, #3
 800c24a:	e7b9      	b.n	800c1c0 <__gethex+0x1ec>
 800c24c:	da09      	bge.n	800c262 <__gethex+0x28e>
 800c24e:	1bf7      	subs	r7, r6, r7
 800c250:	4621      	mov	r1, r4
 800c252:	463a      	mov	r2, r7
 800c254:	9802      	ldr	r0, [sp, #8]
 800c256:	f000 fc4d 	bl	800caf4 <__lshift>
 800c25a:	4604      	mov	r4, r0
 800c25c:	1bed      	subs	r5, r5, r7
 800c25e:	f100 0914 	add.w	r9, r0, #20
 800c262:	f04f 0a00 	mov.w	sl, #0
 800c266:	e7b0      	b.n	800c1ca <__gethex+0x1f6>
 800c268:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c26c:	42a8      	cmp	r0, r5
 800c26e:	dd71      	ble.n	800c354 <__gethex+0x380>
 800c270:	1b45      	subs	r5, r0, r5
 800c272:	42ae      	cmp	r6, r5
 800c274:	dc34      	bgt.n	800c2e0 <__gethex+0x30c>
 800c276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d028      	beq.n	800c2d0 <__gethex+0x2fc>
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d02a      	beq.n	800c2d8 <__gethex+0x304>
 800c282:	2b01      	cmp	r3, #1
 800c284:	d115      	bne.n	800c2b2 <__gethex+0x2de>
 800c286:	42ae      	cmp	r6, r5
 800c288:	d113      	bne.n	800c2b2 <__gethex+0x2de>
 800c28a:	2e01      	cmp	r6, #1
 800c28c:	d10b      	bne.n	800c2a6 <__gethex+0x2d2>
 800c28e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c292:	9a06      	ldr	r2, [sp, #24]
 800c294:	2762      	movs	r7, #98	; 0x62
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	2301      	movs	r3, #1
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	f8c9 3000 	str.w	r3, [r9]
 800c2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2a2:	601c      	str	r4, [r3, #0]
 800c2a4:	e728      	b.n	800c0f8 <__gethex+0x124>
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	1e71      	subs	r1, r6, #1
 800c2aa:	f000 fe62 	bl	800cf72 <__any_on>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d1ed      	bne.n	800c28e <__gethex+0x2ba>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	9802      	ldr	r0, [sp, #8]
 800c2b6:	f000 fa05 	bl	800c6c4 <_Bfree>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2be:	2750      	movs	r7, #80	; 0x50
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	e719      	b.n	800c0f8 <__gethex+0x124>
 800c2c4:	0800e2d8 	.word	0x0800e2d8
 800c2c8:	0800e25c 	.word	0x0800e25c
 800c2cc:	0800e26d 	.word	0x0800e26d
 800c2d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1ed      	bne.n	800c2b2 <__gethex+0x2de>
 800c2d6:	e7da      	b.n	800c28e <__gethex+0x2ba>
 800c2d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1d7      	bne.n	800c28e <__gethex+0x2ba>
 800c2de:	e7e8      	b.n	800c2b2 <__gethex+0x2de>
 800c2e0:	1e6f      	subs	r7, r5, #1
 800c2e2:	f1ba 0f00 	cmp.w	sl, #0
 800c2e6:	d132      	bne.n	800c34e <__gethex+0x37a>
 800c2e8:	b127      	cbz	r7, 800c2f4 <__gethex+0x320>
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 fe40 	bl	800cf72 <__any_on>
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	117b      	asrs	r3, r7, #5
 800c2f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c2fc:	f007 071f 	and.w	r7, r7, #31
 800c300:	fa01 f707 	lsl.w	r7, r1, r7
 800c304:	421f      	tst	r7, r3
 800c306:	f04f 0702 	mov.w	r7, #2
 800c30a:	4629      	mov	r1, r5
 800c30c:	4620      	mov	r0, r4
 800c30e:	bf18      	it	ne
 800c310:	f04a 0a02 	orrne.w	sl, sl, #2
 800c314:	1b76      	subs	r6, r6, r5
 800c316:	f7ff fdf5 	bl	800bf04 <rshift>
 800c31a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c31e:	f1ba 0f00 	cmp.w	sl, #0
 800c322:	d048      	beq.n	800c3b6 <__gethex+0x3e2>
 800c324:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d015      	beq.n	800c358 <__gethex+0x384>
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d017      	beq.n	800c360 <__gethex+0x38c>
 800c330:	2b01      	cmp	r3, #1
 800c332:	d109      	bne.n	800c348 <__gethex+0x374>
 800c334:	f01a 0f02 	tst.w	sl, #2
 800c338:	d006      	beq.n	800c348 <__gethex+0x374>
 800c33a:	f8d9 0000 	ldr.w	r0, [r9]
 800c33e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c342:	f01a 0f01 	tst.w	sl, #1
 800c346:	d10e      	bne.n	800c366 <__gethex+0x392>
 800c348:	f047 0710 	orr.w	r7, r7, #16
 800c34c:	e033      	b.n	800c3b6 <__gethex+0x3e2>
 800c34e:	f04f 0a01 	mov.w	sl, #1
 800c352:	e7cf      	b.n	800c2f4 <__gethex+0x320>
 800c354:	2701      	movs	r7, #1
 800c356:	e7e2      	b.n	800c31e <__gethex+0x34a>
 800c358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c35a:	f1c3 0301 	rsb	r3, r3, #1
 800c35e:	9315      	str	r3, [sp, #84]	; 0x54
 800c360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f0      	beq.n	800c348 <__gethex+0x374>
 800c366:	f04f 0c00 	mov.w	ip, #0
 800c36a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c36e:	f104 0314 	add.w	r3, r4, #20
 800c372:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c376:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c380:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c384:	d01c      	beq.n	800c3c0 <__gethex+0x3ec>
 800c386:	3201      	adds	r2, #1
 800c388:	6002      	str	r2, [r0, #0]
 800c38a:	2f02      	cmp	r7, #2
 800c38c:	f104 0314 	add.w	r3, r4, #20
 800c390:	d13d      	bne.n	800c40e <__gethex+0x43a>
 800c392:	f8d8 2000 	ldr.w	r2, [r8]
 800c396:	3a01      	subs	r2, #1
 800c398:	42b2      	cmp	r2, r6
 800c39a:	d10a      	bne.n	800c3b2 <__gethex+0x3de>
 800c39c:	2201      	movs	r2, #1
 800c39e:	1171      	asrs	r1, r6, #5
 800c3a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3a4:	f006 061f 	and.w	r6, r6, #31
 800c3a8:	fa02 f606 	lsl.w	r6, r2, r6
 800c3ac:	421e      	tst	r6, r3
 800c3ae:	bf18      	it	ne
 800c3b0:	4617      	movne	r7, r2
 800c3b2:	f047 0720 	orr.w	r7, r7, #32
 800c3b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3b8:	601c      	str	r4, [r3, #0]
 800c3ba:	9b06      	ldr	r3, [sp, #24]
 800c3bc:	601d      	str	r5, [r3, #0]
 800c3be:	e69b      	b.n	800c0f8 <__gethex+0x124>
 800c3c0:	4299      	cmp	r1, r3
 800c3c2:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3c6:	d8d8      	bhi.n	800c37a <__gethex+0x3a6>
 800c3c8:	68a3      	ldr	r3, [r4, #8]
 800c3ca:	459b      	cmp	fp, r3
 800c3cc:	db17      	blt.n	800c3fe <__gethex+0x42a>
 800c3ce:	6861      	ldr	r1, [r4, #4]
 800c3d0:	9802      	ldr	r0, [sp, #8]
 800c3d2:	3101      	adds	r1, #1
 800c3d4:	f000 f936 	bl	800c644 <_Balloc>
 800c3d8:	4681      	mov	r9, r0
 800c3da:	b918      	cbnz	r0, 800c3e4 <__gethex+0x410>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	2184      	movs	r1, #132	; 0x84
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <__gethex+0x474>)
 800c3e2:	e6ac      	b.n	800c13e <__gethex+0x16a>
 800c3e4:	6922      	ldr	r2, [r4, #16]
 800c3e6:	f104 010c 	add.w	r1, r4, #12
 800c3ea:	3202      	adds	r2, #2
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	300c      	adds	r0, #12
 800c3f0:	f000 f91a 	bl	800c628 <memcpy>
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	9802      	ldr	r0, [sp, #8]
 800c3f8:	f000 f964 	bl	800c6c4 <_Bfree>
 800c3fc:	464c      	mov	r4, r9
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	6122      	str	r2, [r4, #16]
 800c404:	2201      	movs	r2, #1
 800c406:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c40a:	615a      	str	r2, [r3, #20]
 800c40c:	e7bd      	b.n	800c38a <__gethex+0x3b6>
 800c40e:	6922      	ldr	r2, [r4, #16]
 800c410:	455a      	cmp	r2, fp
 800c412:	dd0b      	ble.n	800c42c <__gethex+0x458>
 800c414:	2101      	movs	r1, #1
 800c416:	4620      	mov	r0, r4
 800c418:	f7ff fd74 	bl	800bf04 <rshift>
 800c41c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c420:	3501      	adds	r5, #1
 800c422:	42ab      	cmp	r3, r5
 800c424:	f6ff aed5 	blt.w	800c1d2 <__gethex+0x1fe>
 800c428:	2701      	movs	r7, #1
 800c42a:	e7c2      	b.n	800c3b2 <__gethex+0x3de>
 800c42c:	f016 061f 	ands.w	r6, r6, #31
 800c430:	d0fa      	beq.n	800c428 <__gethex+0x454>
 800c432:	449a      	add	sl, r3
 800c434:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c438:	f000 f9fa 	bl	800c830 <__hi0bits>
 800c43c:	f1c6 0620 	rsb	r6, r6, #32
 800c440:	42b0      	cmp	r0, r6
 800c442:	dbe7      	blt.n	800c414 <__gethex+0x440>
 800c444:	e7f0      	b.n	800c428 <__gethex+0x454>
 800c446:	bf00      	nop
 800c448:	0800e25c 	.word	0x0800e25c

0800c44c <L_shift>:
 800c44c:	f1c2 0208 	rsb	r2, r2, #8
 800c450:	0092      	lsls	r2, r2, #2
 800c452:	b570      	push	{r4, r5, r6, lr}
 800c454:	f1c2 0620 	rsb	r6, r2, #32
 800c458:	6843      	ldr	r3, [r0, #4]
 800c45a:	6804      	ldr	r4, [r0, #0]
 800c45c:	fa03 f506 	lsl.w	r5, r3, r6
 800c460:	432c      	orrs	r4, r5
 800c462:	40d3      	lsrs	r3, r2
 800c464:	6004      	str	r4, [r0, #0]
 800c466:	f840 3f04 	str.w	r3, [r0, #4]!
 800c46a:	4288      	cmp	r0, r1
 800c46c:	d3f4      	bcc.n	800c458 <L_shift+0xc>
 800c46e:	bd70      	pop	{r4, r5, r6, pc}

0800c470 <__match>:
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	3301      	adds	r3, #1
 800c476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c47a:	b914      	cbnz	r4, 800c482 <__match+0x12>
 800c47c:	6003      	str	r3, [r0, #0]
 800c47e:	2001      	movs	r0, #1
 800c480:	bd30      	pop	{r4, r5, pc}
 800c482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c486:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c48a:	2d19      	cmp	r5, #25
 800c48c:	bf98      	it	ls
 800c48e:	3220      	addls	r2, #32
 800c490:	42a2      	cmp	r2, r4
 800c492:	d0f0      	beq.n	800c476 <__match+0x6>
 800c494:	2000      	movs	r0, #0
 800c496:	e7f3      	b.n	800c480 <__match+0x10>

0800c498 <__hexnan>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	2500      	movs	r5, #0
 800c49e:	680b      	ldr	r3, [r1, #0]
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	115e      	asrs	r6, r3, #5
 800c4a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4a8:	f013 031f 	ands.w	r3, r3, #31
 800c4ac:	bf18      	it	ne
 800c4ae:	3604      	addne	r6, #4
 800c4b0:	1f37      	subs	r7, r6, #4
 800c4b2:	4690      	mov	r8, r2
 800c4b4:	46b9      	mov	r9, r7
 800c4b6:	463c      	mov	r4, r7
 800c4b8:	46ab      	mov	fp, r5
 800c4ba:	b087      	sub	sp, #28
 800c4bc:	6801      	ldr	r1, [r0, #0]
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4c4:	9502      	str	r5, [sp, #8]
 800c4c6:	784a      	ldrb	r2, [r1, #1]
 800c4c8:	1c4b      	adds	r3, r1, #1
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	b342      	cbz	r2, 800c520 <__hexnan+0x88>
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	9105      	str	r1, [sp, #20]
 800c4d2:	9204      	str	r2, [sp, #16]
 800c4d4:	f7ff fd69 	bl	800bfaa <__hexdig_fun>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d14f      	bne.n	800c57c <__hexnan+0xe4>
 800c4dc:	9a04      	ldr	r2, [sp, #16]
 800c4de:	9905      	ldr	r1, [sp, #20]
 800c4e0:	2a20      	cmp	r2, #32
 800c4e2:	d818      	bhi.n	800c516 <__hexnan+0x7e>
 800c4e4:	9b02      	ldr	r3, [sp, #8]
 800c4e6:	459b      	cmp	fp, r3
 800c4e8:	dd13      	ble.n	800c512 <__hexnan+0x7a>
 800c4ea:	454c      	cmp	r4, r9
 800c4ec:	d206      	bcs.n	800c4fc <__hexnan+0x64>
 800c4ee:	2d07      	cmp	r5, #7
 800c4f0:	dc04      	bgt.n	800c4fc <__hexnan+0x64>
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff ffa8 	bl	800c44c <L_shift>
 800c4fc:	4544      	cmp	r4, r8
 800c4fe:	d950      	bls.n	800c5a2 <__hexnan+0x10a>
 800c500:	2300      	movs	r3, #0
 800c502:	f1a4 0904 	sub.w	r9, r4, #4
 800c506:	f844 3c04 	str.w	r3, [r4, #-4]
 800c50a:	461d      	mov	r5, r3
 800c50c:	464c      	mov	r4, r9
 800c50e:	f8cd b008 	str.w	fp, [sp, #8]
 800c512:	9903      	ldr	r1, [sp, #12]
 800c514:	e7d7      	b.n	800c4c6 <__hexnan+0x2e>
 800c516:	2a29      	cmp	r2, #41	; 0x29
 800c518:	d156      	bne.n	800c5c8 <__hexnan+0x130>
 800c51a:	3102      	adds	r1, #2
 800c51c:	f8ca 1000 	str.w	r1, [sl]
 800c520:	f1bb 0f00 	cmp.w	fp, #0
 800c524:	d050      	beq.n	800c5c8 <__hexnan+0x130>
 800c526:	454c      	cmp	r4, r9
 800c528:	d206      	bcs.n	800c538 <__hexnan+0xa0>
 800c52a:	2d07      	cmp	r5, #7
 800c52c:	dc04      	bgt.n	800c538 <__hexnan+0xa0>
 800c52e:	462a      	mov	r2, r5
 800c530:	4649      	mov	r1, r9
 800c532:	4620      	mov	r0, r4
 800c534:	f7ff ff8a 	bl	800c44c <L_shift>
 800c538:	4544      	cmp	r4, r8
 800c53a:	d934      	bls.n	800c5a6 <__hexnan+0x10e>
 800c53c:	4623      	mov	r3, r4
 800c53e:	f1a8 0204 	sub.w	r2, r8, #4
 800c542:	f853 1b04 	ldr.w	r1, [r3], #4
 800c546:	429f      	cmp	r7, r3
 800c548:	f842 1f04 	str.w	r1, [r2, #4]!
 800c54c:	d2f9      	bcs.n	800c542 <__hexnan+0xaa>
 800c54e:	1b3b      	subs	r3, r7, r4
 800c550:	f023 0303 	bic.w	r3, r3, #3
 800c554:	3304      	adds	r3, #4
 800c556:	3401      	adds	r4, #1
 800c558:	3e03      	subs	r6, #3
 800c55a:	42b4      	cmp	r4, r6
 800c55c:	bf88      	it	hi
 800c55e:	2304      	movhi	r3, #4
 800c560:	2200      	movs	r2, #0
 800c562:	4443      	add	r3, r8
 800c564:	f843 2b04 	str.w	r2, [r3], #4
 800c568:	429f      	cmp	r7, r3
 800c56a:	d2fb      	bcs.n	800c564 <__hexnan+0xcc>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	b91b      	cbnz	r3, 800c578 <__hexnan+0xe0>
 800c570:	4547      	cmp	r7, r8
 800c572:	d127      	bne.n	800c5c4 <__hexnan+0x12c>
 800c574:	2301      	movs	r3, #1
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	2005      	movs	r0, #5
 800c57a:	e026      	b.n	800c5ca <__hexnan+0x132>
 800c57c:	3501      	adds	r5, #1
 800c57e:	2d08      	cmp	r5, #8
 800c580:	f10b 0b01 	add.w	fp, fp, #1
 800c584:	dd06      	ble.n	800c594 <__hexnan+0xfc>
 800c586:	4544      	cmp	r4, r8
 800c588:	d9c3      	bls.n	800c512 <__hexnan+0x7a>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2501      	movs	r5, #1
 800c58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c592:	3c04      	subs	r4, #4
 800c594:	6822      	ldr	r2, [r4, #0]
 800c596:	f000 000f 	and.w	r0, r0, #15
 800c59a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	e7b7      	b.n	800c512 <__hexnan+0x7a>
 800c5a2:	2508      	movs	r5, #8
 800c5a4:	e7b5      	b.n	800c512 <__hexnan+0x7a>
 800c5a6:	9b01      	ldr	r3, [sp, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0df      	beq.n	800c56c <__hexnan+0xd4>
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b0:	f1c3 0320 	rsb	r3, r3, #32
 800c5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5bc:	401a      	ands	r2, r3
 800c5be:	f846 2c04 	str.w	r2, [r6, #-4]
 800c5c2:	e7d3      	b.n	800c56c <__hexnan+0xd4>
 800c5c4:	3f04      	subs	r7, #4
 800c5c6:	e7d1      	b.n	800c56c <__hexnan+0xd4>
 800c5c8:	2004      	movs	r0, #4
 800c5ca:	b007      	add	sp, #28
 800c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5d0 <_localeconv_r>:
 800c5d0:	4800      	ldr	r0, [pc, #0]	; (800c5d4 <_localeconv_r+0x4>)
 800c5d2:	4770      	bx	lr
 800c5d4:	200002d4 	.word	0x200002d4

0800c5d8 <malloc>:
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <malloc+0xc>)
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6818      	ldr	r0, [r3, #0]
 800c5de:	f000 bd43 	b.w	800d068 <_malloc_r>
 800c5e2:	bf00      	nop
 800c5e4:	2000017c 	.word	0x2000017c

0800c5e8 <__ascii_mbtowc>:
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	b901      	cbnz	r1, 800c5ee <__ascii_mbtowc+0x6>
 800c5ec:	a901      	add	r1, sp, #4
 800c5ee:	b142      	cbz	r2, 800c602 <__ascii_mbtowc+0x1a>
 800c5f0:	b14b      	cbz	r3, 800c606 <__ascii_mbtowc+0x1e>
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	600b      	str	r3, [r1, #0]
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	1e10      	subs	r0, r2, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2001      	movne	r0, #1
 800c5fe:	b002      	add	sp, #8
 800c600:	4770      	bx	lr
 800c602:	4610      	mov	r0, r2
 800c604:	e7fb      	b.n	800c5fe <__ascii_mbtowc+0x16>
 800c606:	f06f 0001 	mvn.w	r0, #1
 800c60a:	e7f8      	b.n	800c5fe <__ascii_mbtowc+0x16>

0800c60c <memchr>:
 800c60c:	4603      	mov	r3, r0
 800c60e:	b510      	push	{r4, lr}
 800c610:	b2c9      	uxtb	r1, r1
 800c612:	4402      	add	r2, r0
 800c614:	4293      	cmp	r3, r2
 800c616:	4618      	mov	r0, r3
 800c618:	d101      	bne.n	800c61e <memchr+0x12>
 800c61a:	2000      	movs	r0, #0
 800c61c:	e003      	b.n	800c626 <memchr+0x1a>
 800c61e:	7804      	ldrb	r4, [r0, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	428c      	cmp	r4, r1
 800c624:	d1f6      	bne.n	800c614 <memchr+0x8>
 800c626:	bd10      	pop	{r4, pc}

0800c628 <memcpy>:
 800c628:	440a      	add	r2, r1
 800c62a:	4291      	cmp	r1, r2
 800c62c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c630:	d100      	bne.n	800c634 <memcpy+0xc>
 800c632:	4770      	bx	lr
 800c634:	b510      	push	{r4, lr}
 800c636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63a:	4291      	cmp	r1, r2
 800c63c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c640:	d1f9      	bne.n	800c636 <memcpy+0xe>
 800c642:	bd10      	pop	{r4, pc}

0800c644 <_Balloc>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	b976      	cbnz	r6, 800c66c <_Balloc+0x28>
 800c64e:	2010      	movs	r0, #16
 800c650:	f7ff ffc2 	bl	800c5d8 <malloc>
 800c654:	4602      	mov	r2, r0
 800c656:	6260      	str	r0, [r4, #36]	; 0x24
 800c658:	b920      	cbnz	r0, 800c664 <_Balloc+0x20>
 800c65a:	2166      	movs	r1, #102	; 0x66
 800c65c:	4b17      	ldr	r3, [pc, #92]	; (800c6bc <_Balloc+0x78>)
 800c65e:	4818      	ldr	r0, [pc, #96]	; (800c6c0 <_Balloc+0x7c>)
 800c660:	f000 feee 	bl	800d440 <__assert_func>
 800c664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c668:	6006      	str	r6, [r0, #0]
 800c66a:	60c6      	str	r6, [r0, #12]
 800c66c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c66e:	68f3      	ldr	r3, [r6, #12]
 800c670:	b183      	cbz	r3, 800c694 <_Balloc+0x50>
 800c672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c67a:	b9b8      	cbnz	r0, 800c6ac <_Balloc+0x68>
 800c67c:	2101      	movs	r1, #1
 800c67e:	fa01 f605 	lsl.w	r6, r1, r5
 800c682:	1d72      	adds	r2, r6, #5
 800c684:	4620      	mov	r0, r4
 800c686:	0092      	lsls	r2, r2, #2
 800c688:	f000 fc94 	bl	800cfb4 <_calloc_r>
 800c68c:	b160      	cbz	r0, 800c6a8 <_Balloc+0x64>
 800c68e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c692:	e00e      	b.n	800c6b2 <_Balloc+0x6e>
 800c694:	2221      	movs	r2, #33	; 0x21
 800c696:	2104      	movs	r1, #4
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 fc8b 	bl	800cfb4 <_calloc_r>
 800c69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6a0:	60f0      	str	r0, [r6, #12]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e4      	bne.n	800c672 <_Balloc+0x2e>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	6802      	ldr	r2, [r0, #0]
 800c6ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6b8:	e7f7      	b.n	800c6aa <_Balloc+0x66>
 800c6ba:	bf00      	nop
 800c6bc:	0800e1e6 	.word	0x0800e1e6
 800c6c0:	0800e2ec 	.word	0x0800e2ec

0800c6c4 <_Bfree>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	b976      	cbnz	r6, 800c6ec <_Bfree+0x28>
 800c6ce:	2010      	movs	r0, #16
 800c6d0:	f7ff ff82 	bl	800c5d8 <malloc>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6268      	str	r0, [r5, #36]	; 0x24
 800c6d8:	b920      	cbnz	r0, 800c6e4 <_Bfree+0x20>
 800c6da:	218a      	movs	r1, #138	; 0x8a
 800c6dc:	4b08      	ldr	r3, [pc, #32]	; (800c700 <_Bfree+0x3c>)
 800c6de:	4809      	ldr	r0, [pc, #36]	; (800c704 <_Bfree+0x40>)
 800c6e0:	f000 feae 	bl	800d440 <__assert_func>
 800c6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6e8:	6006      	str	r6, [r0, #0]
 800c6ea:	60c6      	str	r6, [r0, #12]
 800c6ec:	b13c      	cbz	r4, 800c6fe <_Bfree+0x3a>
 800c6ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6f0:	6862      	ldr	r2, [r4, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6f8:	6021      	str	r1, [r4, #0]
 800c6fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	0800e1e6 	.word	0x0800e1e6
 800c704:	0800e2ec 	.word	0x0800e2ec

0800c708 <__multadd>:
 800c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70c:	4698      	mov	r8, r3
 800c70e:	460c      	mov	r4, r1
 800c710:	2300      	movs	r3, #0
 800c712:	690e      	ldr	r6, [r1, #16]
 800c714:	4607      	mov	r7, r0
 800c716:	f101 0014 	add.w	r0, r1, #20
 800c71a:	6805      	ldr	r5, [r0, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2a9      	uxth	r1, r5
 800c720:	fb02 8101 	mla	r1, r2, r1, r8
 800c724:	0c2d      	lsrs	r5, r5, #16
 800c726:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c72a:	fb02 c505 	mla	r5, r2, r5, ip
 800c72e:	b289      	uxth	r1, r1
 800c730:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c734:	429e      	cmp	r6, r3
 800c736:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c73a:	f840 1b04 	str.w	r1, [r0], #4
 800c73e:	dcec      	bgt.n	800c71a <__multadd+0x12>
 800c740:	f1b8 0f00 	cmp.w	r8, #0
 800c744:	d022      	beq.n	800c78c <__multadd+0x84>
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	42b3      	cmp	r3, r6
 800c74a:	dc19      	bgt.n	800c780 <__multadd+0x78>
 800c74c:	6861      	ldr	r1, [r4, #4]
 800c74e:	4638      	mov	r0, r7
 800c750:	3101      	adds	r1, #1
 800c752:	f7ff ff77 	bl	800c644 <_Balloc>
 800c756:	4605      	mov	r5, r0
 800c758:	b928      	cbnz	r0, 800c766 <__multadd+0x5e>
 800c75a:	4602      	mov	r2, r0
 800c75c:	21b5      	movs	r1, #181	; 0xb5
 800c75e:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <__multadd+0x8c>)
 800c760:	480d      	ldr	r0, [pc, #52]	; (800c798 <__multadd+0x90>)
 800c762:	f000 fe6d 	bl	800d440 <__assert_func>
 800c766:	6922      	ldr	r2, [r4, #16]
 800c768:	f104 010c 	add.w	r1, r4, #12
 800c76c:	3202      	adds	r2, #2
 800c76e:	0092      	lsls	r2, r2, #2
 800c770:	300c      	adds	r0, #12
 800c772:	f7ff ff59 	bl	800c628 <memcpy>
 800c776:	4621      	mov	r1, r4
 800c778:	4638      	mov	r0, r7
 800c77a:	f7ff ffa3 	bl	800c6c4 <_Bfree>
 800c77e:	462c      	mov	r4, r5
 800c780:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c784:	3601      	adds	r6, #1
 800c786:	f8c3 8014 	str.w	r8, [r3, #20]
 800c78a:	6126      	str	r6, [r4, #16]
 800c78c:	4620      	mov	r0, r4
 800c78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c792:	bf00      	nop
 800c794:	0800e25c 	.word	0x0800e25c
 800c798:	0800e2ec 	.word	0x0800e2ec

0800c79c <__s2b>:
 800c79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a0:	4615      	mov	r5, r2
 800c7a2:	2209      	movs	r2, #9
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	db09      	blt.n	800c7cc <__s2b+0x30>
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7ff ff43 	bl	800c644 <_Balloc>
 800c7be:	b940      	cbnz	r0, 800c7d2 <__s2b+0x36>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	21ce      	movs	r1, #206	; 0xce
 800c7c4:	4b18      	ldr	r3, [pc, #96]	; (800c828 <__s2b+0x8c>)
 800c7c6:	4819      	ldr	r0, [pc, #100]	; (800c82c <__s2b+0x90>)
 800c7c8:	f000 fe3a 	bl	800d440 <__assert_func>
 800c7cc:	0052      	lsls	r2, r2, #1
 800c7ce:	3101      	adds	r1, #1
 800c7d0:	e7f0      	b.n	800c7b4 <__s2b+0x18>
 800c7d2:	9b08      	ldr	r3, [sp, #32]
 800c7d4:	2d09      	cmp	r5, #9
 800c7d6:	6143      	str	r3, [r0, #20]
 800c7d8:	f04f 0301 	mov.w	r3, #1
 800c7dc:	6103      	str	r3, [r0, #16]
 800c7de:	dd16      	ble.n	800c80e <__s2b+0x72>
 800c7e0:	f104 0909 	add.w	r9, r4, #9
 800c7e4:	46c8      	mov	r8, r9
 800c7e6:	442c      	add	r4, r5
 800c7e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	220a      	movs	r2, #10
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	3b30      	subs	r3, #48	; 0x30
 800c7f4:	f7ff ff88 	bl	800c708 <__multadd>
 800c7f8:	45a0      	cmp	r8, r4
 800c7fa:	d1f5      	bne.n	800c7e8 <__s2b+0x4c>
 800c7fc:	f1a5 0408 	sub.w	r4, r5, #8
 800c800:	444c      	add	r4, r9
 800c802:	1b2d      	subs	r5, r5, r4
 800c804:	1963      	adds	r3, r4, r5
 800c806:	42bb      	cmp	r3, r7
 800c808:	db04      	blt.n	800c814 <__s2b+0x78>
 800c80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80e:	2509      	movs	r5, #9
 800c810:	340a      	adds	r4, #10
 800c812:	e7f6      	b.n	800c802 <__s2b+0x66>
 800c814:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c818:	4601      	mov	r1, r0
 800c81a:	220a      	movs	r2, #10
 800c81c:	4630      	mov	r0, r6
 800c81e:	3b30      	subs	r3, #48	; 0x30
 800c820:	f7ff ff72 	bl	800c708 <__multadd>
 800c824:	e7ee      	b.n	800c804 <__s2b+0x68>
 800c826:	bf00      	nop
 800c828:	0800e25c 	.word	0x0800e25c
 800c82c:	0800e2ec 	.word	0x0800e2ec

0800c830 <__hi0bits>:
 800c830:	0c02      	lsrs	r2, r0, #16
 800c832:	0412      	lsls	r2, r2, #16
 800c834:	4603      	mov	r3, r0
 800c836:	b9ca      	cbnz	r2, 800c86c <__hi0bits+0x3c>
 800c838:	0403      	lsls	r3, r0, #16
 800c83a:	2010      	movs	r0, #16
 800c83c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c840:	bf04      	itt	eq
 800c842:	021b      	lsleq	r3, r3, #8
 800c844:	3008      	addeq	r0, #8
 800c846:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c84a:	bf04      	itt	eq
 800c84c:	011b      	lsleq	r3, r3, #4
 800c84e:	3004      	addeq	r0, #4
 800c850:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c854:	bf04      	itt	eq
 800c856:	009b      	lsleq	r3, r3, #2
 800c858:	3002      	addeq	r0, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	db05      	blt.n	800c86a <__hi0bits+0x3a>
 800c85e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c862:	f100 0001 	add.w	r0, r0, #1
 800c866:	bf08      	it	eq
 800c868:	2020      	moveq	r0, #32
 800c86a:	4770      	bx	lr
 800c86c:	2000      	movs	r0, #0
 800c86e:	e7e5      	b.n	800c83c <__hi0bits+0xc>

0800c870 <__lo0bits>:
 800c870:	6803      	ldr	r3, [r0, #0]
 800c872:	4602      	mov	r2, r0
 800c874:	f013 0007 	ands.w	r0, r3, #7
 800c878:	d00b      	beq.n	800c892 <__lo0bits+0x22>
 800c87a:	07d9      	lsls	r1, r3, #31
 800c87c:	d422      	bmi.n	800c8c4 <__lo0bits+0x54>
 800c87e:	0798      	lsls	r0, r3, #30
 800c880:	bf49      	itett	mi
 800c882:	085b      	lsrmi	r3, r3, #1
 800c884:	089b      	lsrpl	r3, r3, #2
 800c886:	2001      	movmi	r0, #1
 800c888:	6013      	strmi	r3, [r2, #0]
 800c88a:	bf5c      	itt	pl
 800c88c:	2002      	movpl	r0, #2
 800c88e:	6013      	strpl	r3, [r2, #0]
 800c890:	4770      	bx	lr
 800c892:	b299      	uxth	r1, r3
 800c894:	b909      	cbnz	r1, 800c89a <__lo0bits+0x2a>
 800c896:	2010      	movs	r0, #16
 800c898:	0c1b      	lsrs	r3, r3, #16
 800c89a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c89e:	bf04      	itt	eq
 800c8a0:	0a1b      	lsreq	r3, r3, #8
 800c8a2:	3008      	addeq	r0, #8
 800c8a4:	0719      	lsls	r1, r3, #28
 800c8a6:	bf04      	itt	eq
 800c8a8:	091b      	lsreq	r3, r3, #4
 800c8aa:	3004      	addeq	r0, #4
 800c8ac:	0799      	lsls	r1, r3, #30
 800c8ae:	bf04      	itt	eq
 800c8b0:	089b      	lsreq	r3, r3, #2
 800c8b2:	3002      	addeq	r0, #2
 800c8b4:	07d9      	lsls	r1, r3, #31
 800c8b6:	d403      	bmi.n	800c8c0 <__lo0bits+0x50>
 800c8b8:	085b      	lsrs	r3, r3, #1
 800c8ba:	f100 0001 	add.w	r0, r0, #1
 800c8be:	d003      	beq.n	800c8c8 <__lo0bits+0x58>
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	4770      	bx	lr
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	4770      	bx	lr
 800c8c8:	2020      	movs	r0, #32
 800c8ca:	4770      	bx	lr

0800c8cc <__i2b>:
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	f7ff feb7 	bl	800c644 <_Balloc>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	b928      	cbnz	r0, 800c8e6 <__i2b+0x1a>
 800c8da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8de:	4b04      	ldr	r3, [pc, #16]	; (800c8f0 <__i2b+0x24>)
 800c8e0:	4804      	ldr	r0, [pc, #16]	; (800c8f4 <__i2b+0x28>)
 800c8e2:	f000 fdad 	bl	800d440 <__assert_func>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	6144      	str	r4, [r0, #20]
 800c8ea:	6103      	str	r3, [r0, #16]
 800c8ec:	bd10      	pop	{r4, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0800e25c 	.word	0x0800e25c
 800c8f4:	0800e2ec 	.word	0x0800e2ec

0800c8f8 <__multiply>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	690a      	ldr	r2, [r1, #16]
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	460d      	mov	r5, r1
 800c904:	429a      	cmp	r2, r3
 800c906:	bfbe      	ittt	lt
 800c908:	460b      	movlt	r3, r1
 800c90a:	4625      	movlt	r5, r4
 800c90c:	461c      	movlt	r4, r3
 800c90e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c912:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c916:	68ab      	ldr	r3, [r5, #8]
 800c918:	6869      	ldr	r1, [r5, #4]
 800c91a:	eb0a 0709 	add.w	r7, sl, r9
 800c91e:	42bb      	cmp	r3, r7
 800c920:	b085      	sub	sp, #20
 800c922:	bfb8      	it	lt
 800c924:	3101      	addlt	r1, #1
 800c926:	f7ff fe8d 	bl	800c644 <_Balloc>
 800c92a:	b930      	cbnz	r0, 800c93a <__multiply+0x42>
 800c92c:	4602      	mov	r2, r0
 800c92e:	f240 115d 	movw	r1, #349	; 0x15d
 800c932:	4b41      	ldr	r3, [pc, #260]	; (800ca38 <__multiply+0x140>)
 800c934:	4841      	ldr	r0, [pc, #260]	; (800ca3c <__multiply+0x144>)
 800c936:	f000 fd83 	bl	800d440 <__assert_func>
 800c93a:	f100 0614 	add.w	r6, r0, #20
 800c93e:	4633      	mov	r3, r6
 800c940:	2200      	movs	r2, #0
 800c942:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c946:	4543      	cmp	r3, r8
 800c948:	d31e      	bcc.n	800c988 <__multiply+0x90>
 800c94a:	f105 0c14 	add.w	ip, r5, #20
 800c94e:	f104 0314 	add.w	r3, r4, #20
 800c952:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c956:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c95a:	9202      	str	r2, [sp, #8]
 800c95c:	ebac 0205 	sub.w	r2, ip, r5
 800c960:	3a15      	subs	r2, #21
 800c962:	f022 0203 	bic.w	r2, r2, #3
 800c966:	3204      	adds	r2, #4
 800c968:	f105 0115 	add.w	r1, r5, #21
 800c96c:	458c      	cmp	ip, r1
 800c96e:	bf38      	it	cc
 800c970:	2204      	movcc	r2, #4
 800c972:	9201      	str	r2, [sp, #4]
 800c974:	9a02      	ldr	r2, [sp, #8]
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d808      	bhi.n	800c98e <__multiply+0x96>
 800c97c:	2f00      	cmp	r7, #0
 800c97e:	dc55      	bgt.n	800ca2c <__multiply+0x134>
 800c980:	6107      	str	r7, [r0, #16]
 800c982:	b005      	add	sp, #20
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	f843 2b04 	str.w	r2, [r3], #4
 800c98c:	e7db      	b.n	800c946 <__multiply+0x4e>
 800c98e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c992:	f1ba 0f00 	cmp.w	sl, #0
 800c996:	d020      	beq.n	800c9da <__multiply+0xe2>
 800c998:	46b1      	mov	r9, r6
 800c99a:	2200      	movs	r2, #0
 800c99c:	f105 0e14 	add.w	lr, r5, #20
 800c9a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c9a4:	f8d9 b000 	ldr.w	fp, [r9]
 800c9a8:	b2a1      	uxth	r1, r4
 800c9aa:	fa1f fb8b 	uxth.w	fp, fp
 800c9ae:	fb0a b101 	mla	r1, sl, r1, fp
 800c9b2:	4411      	add	r1, r2
 800c9b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c9b8:	0c24      	lsrs	r4, r4, #16
 800c9ba:	0c12      	lsrs	r2, r2, #16
 800c9bc:	fb0a 2404 	mla	r4, sl, r4, r2
 800c9c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9c4:	b289      	uxth	r1, r1
 800c9c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9ca:	45f4      	cmp	ip, lr
 800c9cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c9d0:	f849 1b04 	str.w	r1, [r9], #4
 800c9d4:	d8e4      	bhi.n	800c9a0 <__multiply+0xa8>
 800c9d6:	9901      	ldr	r1, [sp, #4]
 800c9d8:	5072      	str	r2, [r6, r1]
 800c9da:	9a03      	ldr	r2, [sp, #12]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	d01f      	beq.n	800ca28 <__multiply+0x130>
 800c9e8:	46b6      	mov	lr, r6
 800c9ea:	f04f 0a00 	mov.w	sl, #0
 800c9ee:	6834      	ldr	r4, [r6, #0]
 800c9f0:	f105 0114 	add.w	r1, r5, #20
 800c9f4:	880a      	ldrh	r2, [r1, #0]
 800c9f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9fa:	b2a4      	uxth	r4, r4
 800c9fc:	fb09 b202 	mla	r2, r9, r2, fp
 800ca00:	4492      	add	sl, r2
 800ca02:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ca06:	f84e 4b04 	str.w	r4, [lr], #4
 800ca0a:	f851 4b04 	ldr.w	r4, [r1], #4
 800ca0e:	f8be 2000 	ldrh.w	r2, [lr]
 800ca12:	0c24      	lsrs	r4, r4, #16
 800ca14:	fb09 2404 	mla	r4, r9, r4, r2
 800ca18:	458c      	cmp	ip, r1
 800ca1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ca1e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca22:	d8e7      	bhi.n	800c9f4 <__multiply+0xfc>
 800ca24:	9a01      	ldr	r2, [sp, #4]
 800ca26:	50b4      	str	r4, [r6, r2]
 800ca28:	3604      	adds	r6, #4
 800ca2a:	e7a3      	b.n	800c974 <__multiply+0x7c>
 800ca2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1a5      	bne.n	800c980 <__multiply+0x88>
 800ca34:	3f01      	subs	r7, #1
 800ca36:	e7a1      	b.n	800c97c <__multiply+0x84>
 800ca38:	0800e25c 	.word	0x0800e25c
 800ca3c:	0800e2ec 	.word	0x0800e2ec

0800ca40 <__pow5mult>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4615      	mov	r5, r2
 800ca46:	f012 0203 	ands.w	r2, r2, #3
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	d007      	beq.n	800ca60 <__pow5mult+0x20>
 800ca50:	4c25      	ldr	r4, [pc, #148]	; (800cae8 <__pow5mult+0xa8>)
 800ca52:	3a01      	subs	r2, #1
 800ca54:	2300      	movs	r3, #0
 800ca56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca5a:	f7ff fe55 	bl	800c708 <__multadd>
 800ca5e:	4607      	mov	r7, r0
 800ca60:	10ad      	asrs	r5, r5, #2
 800ca62:	d03d      	beq.n	800cae0 <__pow5mult+0xa0>
 800ca64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca66:	b97c      	cbnz	r4, 800ca88 <__pow5mult+0x48>
 800ca68:	2010      	movs	r0, #16
 800ca6a:	f7ff fdb5 	bl	800c5d8 <malloc>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	6270      	str	r0, [r6, #36]	; 0x24
 800ca72:	b928      	cbnz	r0, 800ca80 <__pow5mult+0x40>
 800ca74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca78:	4b1c      	ldr	r3, [pc, #112]	; (800caec <__pow5mult+0xac>)
 800ca7a:	481d      	ldr	r0, [pc, #116]	; (800caf0 <__pow5mult+0xb0>)
 800ca7c:	f000 fce0 	bl	800d440 <__assert_func>
 800ca80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca84:	6004      	str	r4, [r0, #0]
 800ca86:	60c4      	str	r4, [r0, #12]
 800ca88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca90:	b94c      	cbnz	r4, 800caa6 <__pow5mult+0x66>
 800ca92:	f240 2171 	movw	r1, #625	; 0x271
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7ff ff18 	bl	800c8cc <__i2b>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	f8c8 0008 	str.w	r0, [r8, #8]
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	f04f 0900 	mov.w	r9, #0
 800caaa:	07eb      	lsls	r3, r5, #31
 800caac:	d50a      	bpl.n	800cac4 <__pow5mult+0x84>
 800caae:	4639      	mov	r1, r7
 800cab0:	4622      	mov	r2, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ff20 	bl	800c8f8 <__multiply>
 800cab8:	4680      	mov	r8, r0
 800caba:	4639      	mov	r1, r7
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff fe01 	bl	800c6c4 <_Bfree>
 800cac2:	4647      	mov	r7, r8
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	d00b      	beq.n	800cae0 <__pow5mult+0xa0>
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	b938      	cbnz	r0, 800cadc <__pow5mult+0x9c>
 800cacc:	4622      	mov	r2, r4
 800cace:	4621      	mov	r1, r4
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff ff11 	bl	800c8f8 <__multiply>
 800cad6:	6020      	str	r0, [r4, #0]
 800cad8:	f8c0 9000 	str.w	r9, [r0]
 800cadc:	4604      	mov	r4, r0
 800cade:	e7e4      	b.n	800caaa <__pow5mult+0x6a>
 800cae0:	4638      	mov	r0, r7
 800cae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae6:	bf00      	nop
 800cae8:	0800e440 	.word	0x0800e440
 800caec:	0800e1e6 	.word	0x0800e1e6
 800caf0:	0800e2ec 	.word	0x0800e2ec

0800caf4 <__lshift>:
 800caf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4607      	mov	r7, r0
 800cafc:	4691      	mov	r9, r2
 800cafe:	6923      	ldr	r3, [r4, #16]
 800cb00:	6849      	ldr	r1, [r1, #4]
 800cb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb0c:	f108 0601 	add.w	r6, r8, #1
 800cb10:	42b3      	cmp	r3, r6
 800cb12:	db0b      	blt.n	800cb2c <__lshift+0x38>
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7ff fd95 	bl	800c644 <_Balloc>
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	b948      	cbnz	r0, 800cb32 <__lshift+0x3e>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb24:	4b27      	ldr	r3, [pc, #156]	; (800cbc4 <__lshift+0xd0>)
 800cb26:	4828      	ldr	r0, [pc, #160]	; (800cbc8 <__lshift+0xd4>)
 800cb28:	f000 fc8a 	bl	800d440 <__assert_func>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	e7ee      	b.n	800cb10 <__lshift+0x1c>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f100 0114 	add.w	r1, r0, #20
 800cb38:	f100 0210 	add.w	r2, r0, #16
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	4553      	cmp	r3, sl
 800cb40:	db33      	blt.n	800cbaa <__lshift+0xb6>
 800cb42:	6920      	ldr	r0, [r4, #16]
 800cb44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb48:	f104 0314 	add.w	r3, r4, #20
 800cb4c:	f019 091f 	ands.w	r9, r9, #31
 800cb50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb58:	d02b      	beq.n	800cbb2 <__lshift+0xbe>
 800cb5a:	468a      	mov	sl, r1
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f1c9 0e20 	rsb	lr, r9, #32
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	fa00 f009 	lsl.w	r0, r0, r9
 800cb68:	4302      	orrs	r2, r0
 800cb6a:	f84a 2b04 	str.w	r2, [sl], #4
 800cb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb72:	459c      	cmp	ip, r3
 800cb74:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb78:	d8f3      	bhi.n	800cb62 <__lshift+0x6e>
 800cb7a:	ebac 0304 	sub.w	r3, ip, r4
 800cb7e:	3b15      	subs	r3, #21
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	3304      	adds	r3, #4
 800cb86:	f104 0015 	add.w	r0, r4, #21
 800cb8a:	4584      	cmp	ip, r0
 800cb8c:	bf38      	it	cc
 800cb8e:	2304      	movcc	r3, #4
 800cb90:	50ca      	str	r2, [r1, r3]
 800cb92:	b10a      	cbz	r2, 800cb98 <__lshift+0xa4>
 800cb94:	f108 0602 	add.w	r6, r8, #2
 800cb98:	3e01      	subs	r6, #1
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	612e      	str	r6, [r5, #16]
 800cba0:	f7ff fd90 	bl	800c6c4 <_Bfree>
 800cba4:	4628      	mov	r0, r5
 800cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbae:	3301      	adds	r3, #1
 800cbb0:	e7c5      	b.n	800cb3e <__lshift+0x4a>
 800cbb2:	3904      	subs	r1, #4
 800cbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb8:	459c      	cmp	ip, r3
 800cbba:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbbe:	d8f9      	bhi.n	800cbb4 <__lshift+0xc0>
 800cbc0:	e7ea      	b.n	800cb98 <__lshift+0xa4>
 800cbc2:	bf00      	nop
 800cbc4:	0800e25c 	.word	0x0800e25c
 800cbc8:	0800e2ec 	.word	0x0800e2ec

0800cbcc <__mcmp>:
 800cbcc:	4603      	mov	r3, r0
 800cbce:	690a      	ldr	r2, [r1, #16]
 800cbd0:	6900      	ldr	r0, [r0, #16]
 800cbd2:	b530      	push	{r4, r5, lr}
 800cbd4:	1a80      	subs	r0, r0, r2
 800cbd6:	d10d      	bne.n	800cbf4 <__mcmp+0x28>
 800cbd8:	3314      	adds	r3, #20
 800cbda:	3114      	adds	r1, #20
 800cbdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbe0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbec:	4295      	cmp	r5, r2
 800cbee:	d002      	beq.n	800cbf6 <__mcmp+0x2a>
 800cbf0:	d304      	bcc.n	800cbfc <__mcmp+0x30>
 800cbf2:	2001      	movs	r0, #1
 800cbf4:	bd30      	pop	{r4, r5, pc}
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	d3f4      	bcc.n	800cbe4 <__mcmp+0x18>
 800cbfa:	e7fb      	b.n	800cbf4 <__mcmp+0x28>
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cc00:	e7f8      	b.n	800cbf4 <__mcmp+0x28>
	...

0800cc04 <__mdiff>:
 800cc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4692      	mov	sl, r2
 800cc12:	f7ff ffdb 	bl	800cbcc <__mcmp>
 800cc16:	1e05      	subs	r5, r0, #0
 800cc18:	d111      	bne.n	800cc3e <__mdiff+0x3a>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fd11 	bl	800c644 <_Balloc>
 800cc22:	4602      	mov	r2, r0
 800cc24:	b928      	cbnz	r0, 800cc32 <__mdiff+0x2e>
 800cc26:	f240 2132 	movw	r1, #562	; 0x232
 800cc2a:	4b3c      	ldr	r3, [pc, #240]	; (800cd1c <__mdiff+0x118>)
 800cc2c:	483c      	ldr	r0, [pc, #240]	; (800cd20 <__mdiff+0x11c>)
 800cc2e:	f000 fc07 	bl	800d440 <__assert_func>
 800cc32:	2301      	movs	r3, #1
 800cc34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc38:	4610      	mov	r0, r2
 800cc3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	bfa4      	itt	ge
 800cc40:	4653      	movge	r3, sl
 800cc42:	46a2      	movge	sl, r4
 800cc44:	4630      	mov	r0, r6
 800cc46:	f8da 1004 	ldr.w	r1, [sl, #4]
 800cc4a:	bfa6      	itte	ge
 800cc4c:	461c      	movge	r4, r3
 800cc4e:	2500      	movge	r5, #0
 800cc50:	2501      	movlt	r5, #1
 800cc52:	f7ff fcf7 	bl	800c644 <_Balloc>
 800cc56:	4602      	mov	r2, r0
 800cc58:	b918      	cbnz	r0, 800cc62 <__mdiff+0x5e>
 800cc5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc5e:	4b2f      	ldr	r3, [pc, #188]	; (800cd1c <__mdiff+0x118>)
 800cc60:	e7e4      	b.n	800cc2c <__mdiff+0x28>
 800cc62:	f100 0814 	add.w	r8, r0, #20
 800cc66:	f8da 7010 	ldr.w	r7, [sl, #16]
 800cc6a:	60c5      	str	r5, [r0, #12]
 800cc6c:	f04f 0c00 	mov.w	ip, #0
 800cc70:	f10a 0514 	add.w	r5, sl, #20
 800cc74:	f10a 0010 	add.w	r0, sl, #16
 800cc78:	46c2      	mov	sl, r8
 800cc7a:	6926      	ldr	r6, [r4, #16]
 800cc7c:	f104 0914 	add.w	r9, r4, #20
 800cc80:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800cc84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc88:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800cc8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc90:	fa1f f18b 	uxth.w	r1, fp
 800cc94:	4461      	add	r1, ip
 800cc96:	fa1f fc83 	uxth.w	ip, r3
 800cc9a:	0c1b      	lsrs	r3, r3, #16
 800cc9c:	eba1 010c 	sub.w	r1, r1, ip
 800cca0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cca4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cca8:	b289      	uxth	r1, r1
 800ccaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ccae:	454e      	cmp	r6, r9
 800ccb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ccb4:	f84a 3b04 	str.w	r3, [sl], #4
 800ccb8:	d8e6      	bhi.n	800cc88 <__mdiff+0x84>
 800ccba:	1b33      	subs	r3, r6, r4
 800ccbc:	3b15      	subs	r3, #21
 800ccbe:	f023 0303 	bic.w	r3, r3, #3
 800ccc2:	3415      	adds	r4, #21
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	42a6      	cmp	r6, r4
 800ccc8:	bf38      	it	cc
 800ccca:	2304      	movcc	r3, #4
 800cccc:	441d      	add	r5, r3
 800ccce:	4443      	add	r3, r8
 800ccd0:	461e      	mov	r6, r3
 800ccd2:	462c      	mov	r4, r5
 800ccd4:	4574      	cmp	r4, lr
 800ccd6:	d30e      	bcc.n	800ccf6 <__mdiff+0xf2>
 800ccd8:	f10e 0103 	add.w	r1, lr, #3
 800ccdc:	1b49      	subs	r1, r1, r5
 800ccde:	f021 0103 	bic.w	r1, r1, #3
 800cce2:	3d03      	subs	r5, #3
 800cce4:	45ae      	cmp	lr, r5
 800cce6:	bf38      	it	cc
 800cce8:	2100      	movcc	r1, #0
 800ccea:	4419      	add	r1, r3
 800ccec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ccf0:	b18b      	cbz	r3, 800cd16 <__mdiff+0x112>
 800ccf2:	6117      	str	r7, [r2, #16]
 800ccf4:	e7a0      	b.n	800cc38 <__mdiff+0x34>
 800ccf6:	f854 8b04 	ldr.w	r8, [r4], #4
 800ccfa:	fa1f f188 	uxth.w	r1, r8
 800ccfe:	4461      	add	r1, ip
 800cd00:	1408      	asrs	r0, r1, #16
 800cd02:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800cd06:	b289      	uxth	r1, r1
 800cd08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd10:	f846 1b04 	str.w	r1, [r6], #4
 800cd14:	e7de      	b.n	800ccd4 <__mdiff+0xd0>
 800cd16:	3f01      	subs	r7, #1
 800cd18:	e7e8      	b.n	800ccec <__mdiff+0xe8>
 800cd1a:	bf00      	nop
 800cd1c:	0800e25c 	.word	0x0800e25c
 800cd20:	0800e2ec 	.word	0x0800e2ec

0800cd24 <__ulp>:
 800cd24:	4b11      	ldr	r3, [pc, #68]	; (800cd6c <__ulp+0x48>)
 800cd26:	400b      	ands	r3, r1
 800cd28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd02      	ble.n	800cd36 <__ulp+0x12>
 800cd30:	2000      	movs	r0, #0
 800cd32:	4619      	mov	r1, r3
 800cd34:	4770      	bx	lr
 800cd36:	425b      	negs	r3, r3
 800cd38:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cd3c:	f04f 0000 	mov.w	r0, #0
 800cd40:	f04f 0100 	mov.w	r1, #0
 800cd44:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd48:	da04      	bge.n	800cd54 <__ulp+0x30>
 800cd4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd4e:	fa43 f102 	asr.w	r1, r3, r2
 800cd52:	4770      	bx	lr
 800cd54:	f1a2 0314 	sub.w	r3, r2, #20
 800cd58:	2b1e      	cmp	r3, #30
 800cd5a:	bfd6      	itet	le
 800cd5c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cd60:	2301      	movgt	r3, #1
 800cd62:	fa22 f303 	lsrle.w	r3, r2, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	7ff00000 	.word	0x7ff00000

0800cd70 <__b2d>:
 800cd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd74:	6907      	ldr	r7, [r0, #16]
 800cd76:	f100 0914 	add.w	r9, r0, #20
 800cd7a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cd7e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cd82:	f1a7 0804 	sub.w	r8, r7, #4
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff fd52 	bl	800c830 <__hi0bits>
 800cd8c:	f1c0 0320 	rsb	r3, r0, #32
 800cd90:	280a      	cmp	r0, #10
 800cd92:	600b      	str	r3, [r1, #0]
 800cd94:	491f      	ldr	r1, [pc, #124]	; (800ce14 <__b2d+0xa4>)
 800cd96:	dc17      	bgt.n	800cdc8 <__b2d+0x58>
 800cd98:	45c1      	cmp	r9, r8
 800cd9a:	bf28      	it	cs
 800cd9c:	2200      	movcs	r2, #0
 800cd9e:	f1c0 0c0b 	rsb	ip, r0, #11
 800cda2:	fa26 f30c 	lsr.w	r3, r6, ip
 800cda6:	bf38      	it	cc
 800cda8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cdac:	ea43 0501 	orr.w	r5, r3, r1
 800cdb0:	f100 0315 	add.w	r3, r0, #21
 800cdb4:	fa06 f303 	lsl.w	r3, r6, r3
 800cdb8:	fa22 f20c 	lsr.w	r2, r2, ip
 800cdbc:	ea43 0402 	orr.w	r4, r3, r2
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc8:	45c1      	cmp	r9, r8
 800cdca:	bf2e      	itee	cs
 800cdcc:	2200      	movcs	r2, #0
 800cdce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cdd2:	f1a7 0808 	subcc.w	r8, r7, #8
 800cdd6:	f1b0 030b 	subs.w	r3, r0, #11
 800cdda:	d016      	beq.n	800ce0a <__b2d+0x9a>
 800cddc:	f1c3 0720 	rsb	r7, r3, #32
 800cde0:	fa22 f107 	lsr.w	r1, r2, r7
 800cde4:	45c8      	cmp	r8, r9
 800cde6:	fa06 f603 	lsl.w	r6, r6, r3
 800cdea:	ea46 0601 	orr.w	r6, r6, r1
 800cdee:	bf94      	ite	ls
 800cdf0:	2100      	movls	r1, #0
 800cdf2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cdf6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cdfa:	fa02 f003 	lsl.w	r0, r2, r3
 800cdfe:	40f9      	lsrs	r1, r7
 800ce00:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce04:	ea40 0401 	orr.w	r4, r0, r1
 800ce08:	e7da      	b.n	800cdc0 <__b2d+0x50>
 800ce0a:	4614      	mov	r4, r2
 800ce0c:	ea46 0501 	orr.w	r5, r6, r1
 800ce10:	e7d6      	b.n	800cdc0 <__b2d+0x50>
 800ce12:	bf00      	nop
 800ce14:	3ff00000 	.word	0x3ff00000

0800ce18 <__d2b>:
 800ce18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ce22:	4690      	mov	r8, r2
 800ce24:	461d      	mov	r5, r3
 800ce26:	f7ff fc0d 	bl	800c644 <_Balloc>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	b930      	cbnz	r0, 800ce3c <__d2b+0x24>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	f240 310a 	movw	r1, #778	; 0x30a
 800ce34:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <__d2b+0xb0>)
 800ce36:	4825      	ldr	r0, [pc, #148]	; (800cecc <__d2b+0xb4>)
 800ce38:	f000 fb02 	bl	800d440 <__assert_func>
 800ce3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ce40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ce44:	bb2d      	cbnz	r5, 800ce92 <__d2b+0x7a>
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	f1b8 0300 	subs.w	r3, r8, #0
 800ce4c:	d026      	beq.n	800ce9c <__d2b+0x84>
 800ce4e:	4668      	mov	r0, sp
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	f7ff fd0d 	bl	800c870 <__lo0bits>
 800ce56:	9900      	ldr	r1, [sp, #0]
 800ce58:	b1f0      	cbz	r0, 800ce98 <__d2b+0x80>
 800ce5a:	9a01      	ldr	r2, [sp, #4]
 800ce5c:	f1c0 0320 	rsb	r3, r0, #32
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	430b      	orrs	r3, r1
 800ce66:	40c2      	lsrs	r2, r0
 800ce68:	6163      	str	r3, [r4, #20]
 800ce6a:	9201      	str	r2, [sp, #4]
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bf14      	ite	ne
 800ce72:	2102      	movne	r1, #2
 800ce74:	2101      	moveq	r1, #1
 800ce76:	61a3      	str	r3, [r4, #24]
 800ce78:	6121      	str	r1, [r4, #16]
 800ce7a:	b1c5      	cbz	r5, 800ceae <__d2b+0x96>
 800ce7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce80:	4405      	add	r5, r0
 800ce82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce86:	603d      	str	r5, [r7, #0]
 800ce88:	6030      	str	r0, [r6, #0]
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	b002      	add	sp, #8
 800ce8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce96:	e7d6      	b.n	800ce46 <__d2b+0x2e>
 800ce98:	6161      	str	r1, [r4, #20]
 800ce9a:	e7e7      	b.n	800ce6c <__d2b+0x54>
 800ce9c:	a801      	add	r0, sp, #4
 800ce9e:	f7ff fce7 	bl	800c870 <__lo0bits>
 800cea2:	2101      	movs	r1, #1
 800cea4:	9b01      	ldr	r3, [sp, #4]
 800cea6:	6121      	str	r1, [r4, #16]
 800cea8:	6163      	str	r3, [r4, #20]
 800ceaa:	3020      	adds	r0, #32
 800ceac:	e7e5      	b.n	800ce7a <__d2b+0x62>
 800ceae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ceb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ceb6:	6038      	str	r0, [r7, #0]
 800ceb8:	6918      	ldr	r0, [r3, #16]
 800ceba:	f7ff fcb9 	bl	800c830 <__hi0bits>
 800cebe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cec2:	6031      	str	r1, [r6, #0]
 800cec4:	e7e1      	b.n	800ce8a <__d2b+0x72>
 800cec6:	bf00      	nop
 800cec8:	0800e25c 	.word	0x0800e25c
 800cecc:	0800e2ec 	.word	0x0800e2ec

0800ced0 <__ratio>:
 800ced0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	4688      	mov	r8, r1
 800ced6:	4669      	mov	r1, sp
 800ced8:	4681      	mov	r9, r0
 800ceda:	f7ff ff49 	bl	800cd70 <__b2d>
 800cede:	460f      	mov	r7, r1
 800cee0:	4604      	mov	r4, r0
 800cee2:	460d      	mov	r5, r1
 800cee4:	4640      	mov	r0, r8
 800cee6:	a901      	add	r1, sp, #4
 800cee8:	f7ff ff42 	bl	800cd70 <__b2d>
 800ceec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cef0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cef4:	468b      	mov	fp, r1
 800cef6:	eba3 0c02 	sub.w	ip, r3, r2
 800cefa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfd5      	itete	le
 800cf08:	460a      	movle	r2, r1
 800cf0a:	462a      	movgt	r2, r5
 800cf0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf14:	bfd8      	it	le
 800cf16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf1a:	465b      	mov	r3, fp
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	4639      	mov	r1, r7
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7f3 fc03 	bl	800072c <__aeabi_ddiv>
 800cf26:	b003      	add	sp, #12
 800cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf2c <__copybits>:
 800cf2c:	3901      	subs	r1, #1
 800cf2e:	b570      	push	{r4, r5, r6, lr}
 800cf30:	1149      	asrs	r1, r1, #5
 800cf32:	6914      	ldr	r4, [r2, #16]
 800cf34:	3101      	adds	r1, #1
 800cf36:	f102 0314 	add.w	r3, r2, #20
 800cf3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf42:	1f05      	subs	r5, r0, #4
 800cf44:	42a3      	cmp	r3, r4
 800cf46:	d30c      	bcc.n	800cf62 <__copybits+0x36>
 800cf48:	1aa3      	subs	r3, r4, r2
 800cf4a:	3b11      	subs	r3, #17
 800cf4c:	f023 0303 	bic.w	r3, r3, #3
 800cf50:	3211      	adds	r2, #17
 800cf52:	42a2      	cmp	r2, r4
 800cf54:	bf88      	it	hi
 800cf56:	2300      	movhi	r3, #0
 800cf58:	4418      	add	r0, r3
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4288      	cmp	r0, r1
 800cf5e:	d305      	bcc.n	800cf6c <__copybits+0x40>
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
 800cf62:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf66:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf6a:	e7eb      	b.n	800cf44 <__copybits+0x18>
 800cf6c:	f840 3b04 	str.w	r3, [r0], #4
 800cf70:	e7f4      	b.n	800cf5c <__copybits+0x30>

0800cf72 <__any_on>:
 800cf72:	f100 0214 	add.w	r2, r0, #20
 800cf76:	6900      	ldr	r0, [r0, #16]
 800cf78:	114b      	asrs	r3, r1, #5
 800cf7a:	4298      	cmp	r0, r3
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	db11      	blt.n	800cfa4 <__any_on+0x32>
 800cf80:	dd0a      	ble.n	800cf98 <__any_on+0x26>
 800cf82:	f011 011f 	ands.w	r1, r1, #31
 800cf86:	d007      	beq.n	800cf98 <__any_on+0x26>
 800cf88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf8c:	fa24 f001 	lsr.w	r0, r4, r1
 800cf90:	fa00 f101 	lsl.w	r1, r0, r1
 800cf94:	428c      	cmp	r4, r1
 800cf96:	d10b      	bne.n	800cfb0 <__any_on+0x3e>
 800cf98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d803      	bhi.n	800cfa8 <__any_on+0x36>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	bd10      	pop	{r4, pc}
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	e7f7      	b.n	800cf98 <__any_on+0x26>
 800cfa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d0f5      	beq.n	800cf9c <__any_on+0x2a>
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	e7f6      	b.n	800cfa2 <__any_on+0x30>

0800cfb4 <_calloc_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	fb02 f501 	mul.w	r5, r2, r1
 800cfba:	4629      	mov	r1, r5
 800cfbc:	f000 f854 	bl	800d068 <_malloc_r>
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	b118      	cbz	r0, 800cfcc <_calloc_r+0x18>
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f7fc fbde 	bl	8009788 <memset>
 800cfcc:	4620      	mov	r0, r4
 800cfce:	bd38      	pop	{r3, r4, r5, pc}

0800cfd0 <_free_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	d043      	beq.n	800d060 <_free_r+0x90>
 800cfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfdc:	1f0c      	subs	r4, r1, #4
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	18e4      	addlt	r4, r4, r3
 800cfe4:	f000 fa76 	bl	800d4d4 <__malloc_lock>
 800cfe8:	4a1e      	ldr	r2, [pc, #120]	; (800d064 <_free_r+0x94>)
 800cfea:	6813      	ldr	r3, [r2, #0]
 800cfec:	4610      	mov	r0, r2
 800cfee:	b933      	cbnz	r3, 800cffe <_free_r+0x2e>
 800cff0:	6063      	str	r3, [r4, #4]
 800cff2:	6014      	str	r4, [r2, #0]
 800cff4:	4628      	mov	r0, r5
 800cff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cffa:	f000 ba71 	b.w	800d4e0 <__malloc_unlock>
 800cffe:	42a3      	cmp	r3, r4
 800d000:	d90a      	bls.n	800d018 <_free_r+0x48>
 800d002:	6821      	ldr	r1, [r4, #0]
 800d004:	1862      	adds	r2, r4, r1
 800d006:	4293      	cmp	r3, r2
 800d008:	bf01      	itttt	eq
 800d00a:	681a      	ldreq	r2, [r3, #0]
 800d00c:	685b      	ldreq	r3, [r3, #4]
 800d00e:	1852      	addeq	r2, r2, r1
 800d010:	6022      	streq	r2, [r4, #0]
 800d012:	6063      	str	r3, [r4, #4]
 800d014:	6004      	str	r4, [r0, #0]
 800d016:	e7ed      	b.n	800cff4 <_free_r+0x24>
 800d018:	461a      	mov	r2, r3
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	b10b      	cbz	r3, 800d022 <_free_r+0x52>
 800d01e:	42a3      	cmp	r3, r4
 800d020:	d9fa      	bls.n	800d018 <_free_r+0x48>
 800d022:	6811      	ldr	r1, [r2, #0]
 800d024:	1850      	adds	r0, r2, r1
 800d026:	42a0      	cmp	r0, r4
 800d028:	d10b      	bne.n	800d042 <_free_r+0x72>
 800d02a:	6820      	ldr	r0, [r4, #0]
 800d02c:	4401      	add	r1, r0
 800d02e:	1850      	adds	r0, r2, r1
 800d030:	4283      	cmp	r3, r0
 800d032:	6011      	str	r1, [r2, #0]
 800d034:	d1de      	bne.n	800cff4 <_free_r+0x24>
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4401      	add	r1, r0
 800d03c:	6011      	str	r1, [r2, #0]
 800d03e:	6053      	str	r3, [r2, #4]
 800d040:	e7d8      	b.n	800cff4 <_free_r+0x24>
 800d042:	d902      	bls.n	800d04a <_free_r+0x7a>
 800d044:	230c      	movs	r3, #12
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	e7d4      	b.n	800cff4 <_free_r+0x24>
 800d04a:	6820      	ldr	r0, [r4, #0]
 800d04c:	1821      	adds	r1, r4, r0
 800d04e:	428b      	cmp	r3, r1
 800d050:	bf01      	itttt	eq
 800d052:	6819      	ldreq	r1, [r3, #0]
 800d054:	685b      	ldreq	r3, [r3, #4]
 800d056:	1809      	addeq	r1, r1, r0
 800d058:	6021      	streq	r1, [r4, #0]
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	6054      	str	r4, [r2, #4]
 800d05e:	e7c9      	b.n	800cff4 <_free_r+0x24>
 800d060:	bd38      	pop	{r3, r4, r5, pc}
 800d062:	bf00      	nop
 800d064:	20000594 	.word	0x20000594

0800d068 <_malloc_r>:
 800d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06a:	1ccd      	adds	r5, r1, #3
 800d06c:	f025 0503 	bic.w	r5, r5, #3
 800d070:	3508      	adds	r5, #8
 800d072:	2d0c      	cmp	r5, #12
 800d074:	bf38      	it	cc
 800d076:	250c      	movcc	r5, #12
 800d078:	2d00      	cmp	r5, #0
 800d07a:	4606      	mov	r6, r0
 800d07c:	db01      	blt.n	800d082 <_malloc_r+0x1a>
 800d07e:	42a9      	cmp	r1, r5
 800d080:	d903      	bls.n	800d08a <_malloc_r+0x22>
 800d082:	230c      	movs	r3, #12
 800d084:	6033      	str	r3, [r6, #0]
 800d086:	2000      	movs	r0, #0
 800d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d08a:	f000 fa23 	bl	800d4d4 <__malloc_lock>
 800d08e:	4921      	ldr	r1, [pc, #132]	; (800d114 <_malloc_r+0xac>)
 800d090:	680a      	ldr	r2, [r1, #0]
 800d092:	4614      	mov	r4, r2
 800d094:	b99c      	cbnz	r4, 800d0be <_malloc_r+0x56>
 800d096:	4f20      	ldr	r7, [pc, #128]	; (800d118 <_malloc_r+0xb0>)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	b923      	cbnz	r3, 800d0a6 <_malloc_r+0x3e>
 800d09c:	4621      	mov	r1, r4
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f000 f99e 	bl	800d3e0 <_sbrk_r>
 800d0a4:	6038      	str	r0, [r7, #0]
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f000 f999 	bl	800d3e0 <_sbrk_r>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	d123      	bne.n	800d0fa <_malloc_r+0x92>
 800d0b2:	230c      	movs	r3, #12
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	6033      	str	r3, [r6, #0]
 800d0b8:	f000 fa12 	bl	800d4e0 <__malloc_unlock>
 800d0bc:	e7e3      	b.n	800d086 <_malloc_r+0x1e>
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	1b5b      	subs	r3, r3, r5
 800d0c2:	d417      	bmi.n	800d0f4 <_malloc_r+0x8c>
 800d0c4:	2b0b      	cmp	r3, #11
 800d0c6:	d903      	bls.n	800d0d0 <_malloc_r+0x68>
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	441c      	add	r4, r3
 800d0cc:	6025      	str	r5, [r4, #0]
 800d0ce:	e004      	b.n	800d0da <_malloc_r+0x72>
 800d0d0:	6863      	ldr	r3, [r4, #4]
 800d0d2:	42a2      	cmp	r2, r4
 800d0d4:	bf0c      	ite	eq
 800d0d6:	600b      	streq	r3, [r1, #0]
 800d0d8:	6053      	strne	r3, [r2, #4]
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f000 fa00 	bl	800d4e0 <__malloc_unlock>
 800d0e0:	f104 000b 	add.w	r0, r4, #11
 800d0e4:	1d23      	adds	r3, r4, #4
 800d0e6:	f020 0007 	bic.w	r0, r0, #7
 800d0ea:	1ac2      	subs	r2, r0, r3
 800d0ec:	d0cc      	beq.n	800d088 <_malloc_r+0x20>
 800d0ee:	1a1b      	subs	r3, r3, r0
 800d0f0:	50a3      	str	r3, [r4, r2]
 800d0f2:	e7c9      	b.n	800d088 <_malloc_r+0x20>
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	6864      	ldr	r4, [r4, #4]
 800d0f8:	e7cc      	b.n	800d094 <_malloc_r+0x2c>
 800d0fa:	1cc4      	adds	r4, r0, #3
 800d0fc:	f024 0403 	bic.w	r4, r4, #3
 800d100:	42a0      	cmp	r0, r4
 800d102:	d0e3      	beq.n	800d0cc <_malloc_r+0x64>
 800d104:	1a21      	subs	r1, r4, r0
 800d106:	4630      	mov	r0, r6
 800d108:	f000 f96a 	bl	800d3e0 <_sbrk_r>
 800d10c:	3001      	adds	r0, #1
 800d10e:	d1dd      	bne.n	800d0cc <_malloc_r+0x64>
 800d110:	e7cf      	b.n	800d0b2 <_malloc_r+0x4a>
 800d112:	bf00      	nop
 800d114:	20000594 	.word	0x20000594
 800d118:	20000598 	.word	0x20000598

0800d11c <__ssputs_r>:
 800d11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	688e      	ldr	r6, [r1, #8]
 800d122:	4682      	mov	sl, r0
 800d124:	429e      	cmp	r6, r3
 800d126:	460c      	mov	r4, r1
 800d128:	4690      	mov	r8, r2
 800d12a:	461f      	mov	r7, r3
 800d12c:	d838      	bhi.n	800d1a0 <__ssputs_r+0x84>
 800d12e:	898a      	ldrh	r2, [r1, #12]
 800d130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d134:	d032      	beq.n	800d19c <__ssputs_r+0x80>
 800d136:	6825      	ldr	r5, [r4, #0]
 800d138:	6909      	ldr	r1, [r1, #16]
 800d13a:	3301      	adds	r3, #1
 800d13c:	eba5 0901 	sub.w	r9, r5, r1
 800d140:	6965      	ldr	r5, [r4, #20]
 800d142:	444b      	add	r3, r9
 800d144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d14c:	106d      	asrs	r5, r5, #1
 800d14e:	429d      	cmp	r5, r3
 800d150:	bf38      	it	cc
 800d152:	461d      	movcc	r5, r3
 800d154:	0553      	lsls	r3, r2, #21
 800d156:	d531      	bpl.n	800d1bc <__ssputs_r+0xa0>
 800d158:	4629      	mov	r1, r5
 800d15a:	f7ff ff85 	bl	800d068 <_malloc_r>
 800d15e:	4606      	mov	r6, r0
 800d160:	b950      	cbnz	r0, 800d178 <__ssputs_r+0x5c>
 800d162:	230c      	movs	r3, #12
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	f8ca 3000 	str.w	r3, [sl]
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d178:	464a      	mov	r2, r9
 800d17a:	6921      	ldr	r1, [r4, #16]
 800d17c:	f7ff fa54 	bl	800c628 <memcpy>
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d18a:	81a3      	strh	r3, [r4, #12]
 800d18c:	6126      	str	r6, [r4, #16]
 800d18e:	444e      	add	r6, r9
 800d190:	6026      	str	r6, [r4, #0]
 800d192:	463e      	mov	r6, r7
 800d194:	6165      	str	r5, [r4, #20]
 800d196:	eba5 0509 	sub.w	r5, r5, r9
 800d19a:	60a5      	str	r5, [r4, #8]
 800d19c:	42be      	cmp	r6, r7
 800d19e:	d900      	bls.n	800d1a2 <__ssputs_r+0x86>
 800d1a0:	463e      	mov	r6, r7
 800d1a2:	4632      	mov	r2, r6
 800d1a4:	4641      	mov	r1, r8
 800d1a6:	6820      	ldr	r0, [r4, #0]
 800d1a8:	f000 f97a 	bl	800d4a0 <memmove>
 800d1ac:	68a3      	ldr	r3, [r4, #8]
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	1b9b      	subs	r3, r3, r6
 800d1b2:	4432      	add	r2, r6
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	60a3      	str	r3, [r4, #8]
 800d1b8:	6022      	str	r2, [r4, #0]
 800d1ba:	e7db      	b.n	800d174 <__ssputs_r+0x58>
 800d1bc:	462a      	mov	r2, r5
 800d1be:	f000 f995 	bl	800d4ec <_realloc_r>
 800d1c2:	4606      	mov	r6, r0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d1e1      	bne.n	800d18c <__ssputs_r+0x70>
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	6921      	ldr	r1, [r4, #16]
 800d1cc:	f7ff ff00 	bl	800cfd0 <_free_r>
 800d1d0:	e7c7      	b.n	800d162 <__ssputs_r+0x46>
	...

0800d1d4 <_svfiprintf_r>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	4698      	mov	r8, r3
 800d1da:	898b      	ldrh	r3, [r1, #12]
 800d1dc:	4607      	mov	r7, r0
 800d1de:	061b      	lsls	r3, r3, #24
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	4614      	mov	r4, r2
 800d1e4:	b09d      	sub	sp, #116	; 0x74
 800d1e6:	d50e      	bpl.n	800d206 <_svfiprintf_r+0x32>
 800d1e8:	690b      	ldr	r3, [r1, #16]
 800d1ea:	b963      	cbnz	r3, 800d206 <_svfiprintf_r+0x32>
 800d1ec:	2140      	movs	r1, #64	; 0x40
 800d1ee:	f7ff ff3b 	bl	800d068 <_malloc_r>
 800d1f2:	6028      	str	r0, [r5, #0]
 800d1f4:	6128      	str	r0, [r5, #16]
 800d1f6:	b920      	cbnz	r0, 800d202 <_svfiprintf_r+0x2e>
 800d1f8:	230c      	movs	r3, #12
 800d1fa:	603b      	str	r3, [r7, #0]
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	e0d1      	b.n	800d3a6 <_svfiprintf_r+0x1d2>
 800d202:	2340      	movs	r3, #64	; 0x40
 800d204:	616b      	str	r3, [r5, #20]
 800d206:	2300      	movs	r3, #0
 800d208:	9309      	str	r3, [sp, #36]	; 0x24
 800d20a:	2320      	movs	r3, #32
 800d20c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d210:	2330      	movs	r3, #48	; 0x30
 800d212:	f04f 0901 	mov.w	r9, #1
 800d216:	f8cd 800c 	str.w	r8, [sp, #12]
 800d21a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d3c0 <_svfiprintf_r+0x1ec>
 800d21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d222:	4623      	mov	r3, r4
 800d224:	469a      	mov	sl, r3
 800d226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d22a:	b10a      	cbz	r2, 800d230 <_svfiprintf_r+0x5c>
 800d22c:	2a25      	cmp	r2, #37	; 0x25
 800d22e:	d1f9      	bne.n	800d224 <_svfiprintf_r+0x50>
 800d230:	ebba 0b04 	subs.w	fp, sl, r4
 800d234:	d00b      	beq.n	800d24e <_svfiprintf_r+0x7a>
 800d236:	465b      	mov	r3, fp
 800d238:	4622      	mov	r2, r4
 800d23a:	4629      	mov	r1, r5
 800d23c:	4638      	mov	r0, r7
 800d23e:	f7ff ff6d 	bl	800d11c <__ssputs_r>
 800d242:	3001      	adds	r0, #1
 800d244:	f000 80aa 	beq.w	800d39c <_svfiprintf_r+0x1c8>
 800d248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d24a:	445a      	add	r2, fp
 800d24c:	9209      	str	r2, [sp, #36]	; 0x24
 800d24e:	f89a 3000 	ldrb.w	r3, [sl]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 80a2 	beq.w	800d39c <_svfiprintf_r+0x1c8>
 800d258:	2300      	movs	r3, #0
 800d25a:	f04f 32ff 	mov.w	r2, #4294967295
 800d25e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d262:	f10a 0a01 	add.w	sl, sl, #1
 800d266:	9304      	str	r3, [sp, #16]
 800d268:	9307      	str	r3, [sp, #28]
 800d26a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d26e:	931a      	str	r3, [sp, #104]	; 0x68
 800d270:	4654      	mov	r4, sl
 800d272:	2205      	movs	r2, #5
 800d274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d278:	4851      	ldr	r0, [pc, #324]	; (800d3c0 <_svfiprintf_r+0x1ec>)
 800d27a:	f7ff f9c7 	bl	800c60c <memchr>
 800d27e:	9a04      	ldr	r2, [sp, #16]
 800d280:	b9d8      	cbnz	r0, 800d2ba <_svfiprintf_r+0xe6>
 800d282:	06d0      	lsls	r0, r2, #27
 800d284:	bf44      	itt	mi
 800d286:	2320      	movmi	r3, #32
 800d288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d28c:	0711      	lsls	r1, r2, #28
 800d28e:	bf44      	itt	mi
 800d290:	232b      	movmi	r3, #43	; 0x2b
 800d292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d296:	f89a 3000 	ldrb.w	r3, [sl]
 800d29a:	2b2a      	cmp	r3, #42	; 0x2a
 800d29c:	d015      	beq.n	800d2ca <_svfiprintf_r+0xf6>
 800d29e:	4654      	mov	r4, sl
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	f04f 0c0a 	mov.w	ip, #10
 800d2a6:	9a07      	ldr	r2, [sp, #28]
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ae:	3b30      	subs	r3, #48	; 0x30
 800d2b0:	2b09      	cmp	r3, #9
 800d2b2:	d94e      	bls.n	800d352 <_svfiprintf_r+0x17e>
 800d2b4:	b1b0      	cbz	r0, 800d2e4 <_svfiprintf_r+0x110>
 800d2b6:	9207      	str	r2, [sp, #28]
 800d2b8:	e014      	b.n	800d2e4 <_svfiprintf_r+0x110>
 800d2ba:	eba0 0308 	sub.w	r3, r0, r8
 800d2be:	fa09 f303 	lsl.w	r3, r9, r3
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	46a2      	mov	sl, r4
 800d2c6:	9304      	str	r3, [sp, #16]
 800d2c8:	e7d2      	b.n	800d270 <_svfiprintf_r+0x9c>
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	1d19      	adds	r1, r3, #4
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	9103      	str	r1, [sp, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bfbb      	ittet	lt
 800d2d6:	425b      	neglt	r3, r3
 800d2d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d2dc:	9307      	strge	r3, [sp, #28]
 800d2de:	9307      	strlt	r3, [sp, #28]
 800d2e0:	bfb8      	it	lt
 800d2e2:	9204      	strlt	r2, [sp, #16]
 800d2e4:	7823      	ldrb	r3, [r4, #0]
 800d2e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2e8:	d10c      	bne.n	800d304 <_svfiprintf_r+0x130>
 800d2ea:	7863      	ldrb	r3, [r4, #1]
 800d2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ee:	d135      	bne.n	800d35c <_svfiprintf_r+0x188>
 800d2f0:	9b03      	ldr	r3, [sp, #12]
 800d2f2:	3402      	adds	r4, #2
 800d2f4:	1d1a      	adds	r2, r3, #4
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	9203      	str	r2, [sp, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	bfb8      	it	lt
 800d2fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3d0 <_svfiprintf_r+0x1fc>
 800d308:	2203      	movs	r2, #3
 800d30a:	4650      	mov	r0, sl
 800d30c:	7821      	ldrb	r1, [r4, #0]
 800d30e:	f7ff f97d 	bl	800c60c <memchr>
 800d312:	b140      	cbz	r0, 800d326 <_svfiprintf_r+0x152>
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	eba0 000a 	sub.w	r0, r0, sl
 800d31a:	fa03 f000 	lsl.w	r0, r3, r0
 800d31e:	9b04      	ldr	r3, [sp, #16]
 800d320:	3401      	adds	r4, #1
 800d322:	4303      	orrs	r3, r0
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32a:	2206      	movs	r2, #6
 800d32c:	4825      	ldr	r0, [pc, #148]	; (800d3c4 <_svfiprintf_r+0x1f0>)
 800d32e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d332:	f7ff f96b 	bl	800c60c <memchr>
 800d336:	2800      	cmp	r0, #0
 800d338:	d038      	beq.n	800d3ac <_svfiprintf_r+0x1d8>
 800d33a:	4b23      	ldr	r3, [pc, #140]	; (800d3c8 <_svfiprintf_r+0x1f4>)
 800d33c:	bb1b      	cbnz	r3, 800d386 <_svfiprintf_r+0x1b2>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	3307      	adds	r3, #7
 800d342:	f023 0307 	bic.w	r3, r3, #7
 800d346:	3308      	adds	r3, #8
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34c:	4433      	add	r3, r6
 800d34e:	9309      	str	r3, [sp, #36]	; 0x24
 800d350:	e767      	b.n	800d222 <_svfiprintf_r+0x4e>
 800d352:	460c      	mov	r4, r1
 800d354:	2001      	movs	r0, #1
 800d356:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35a:	e7a5      	b.n	800d2a8 <_svfiprintf_r+0xd4>
 800d35c:	2300      	movs	r3, #0
 800d35e:	f04f 0c0a 	mov.w	ip, #10
 800d362:	4619      	mov	r1, r3
 800d364:	3401      	adds	r4, #1
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	4620      	mov	r0, r4
 800d36a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d36e:	3a30      	subs	r2, #48	; 0x30
 800d370:	2a09      	cmp	r2, #9
 800d372:	d903      	bls.n	800d37c <_svfiprintf_r+0x1a8>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0c5      	beq.n	800d304 <_svfiprintf_r+0x130>
 800d378:	9105      	str	r1, [sp, #20]
 800d37a:	e7c3      	b.n	800d304 <_svfiprintf_r+0x130>
 800d37c:	4604      	mov	r4, r0
 800d37e:	2301      	movs	r3, #1
 800d380:	fb0c 2101 	mla	r1, ip, r1, r2
 800d384:	e7f0      	b.n	800d368 <_svfiprintf_r+0x194>
 800d386:	ab03      	add	r3, sp, #12
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	462a      	mov	r2, r5
 800d38c:	4638      	mov	r0, r7
 800d38e:	4b0f      	ldr	r3, [pc, #60]	; (800d3cc <_svfiprintf_r+0x1f8>)
 800d390:	a904      	add	r1, sp, #16
 800d392:	f7fc fa9f 	bl	80098d4 <_printf_float>
 800d396:	1c42      	adds	r2, r0, #1
 800d398:	4606      	mov	r6, r0
 800d39a:	d1d6      	bne.n	800d34a <_svfiprintf_r+0x176>
 800d39c:	89ab      	ldrh	r3, [r5, #12]
 800d39e:	065b      	lsls	r3, r3, #25
 800d3a0:	f53f af2c 	bmi.w	800d1fc <_svfiprintf_r+0x28>
 800d3a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a6:	b01d      	add	sp, #116	; 0x74
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	ab03      	add	r3, sp, #12
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <_svfiprintf_r+0x1f8>)
 800d3b6:	a904      	add	r1, sp, #16
 800d3b8:	f7fc fd28 	bl	8009e0c <_printf_i>
 800d3bc:	e7eb      	b.n	800d396 <_svfiprintf_r+0x1c2>
 800d3be:	bf00      	nop
 800d3c0:	0800e44c 	.word	0x0800e44c
 800d3c4:	0800e456 	.word	0x0800e456
 800d3c8:	080098d5 	.word	0x080098d5
 800d3cc:	0800d11d 	.word	0x0800d11d
 800d3d0:	0800e452 	.word	0x0800e452

0800d3d4 <nan>:
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	4901      	ldr	r1, [pc, #4]	; (800d3dc <nan+0x8>)
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	7ff80000 	.word	0x7ff80000

0800d3e0 <_sbrk_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4d05      	ldr	r5, [pc, #20]	; (800d3fc <_sbrk_r+0x1c>)
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f4 f81c 	bl	8001428 <_sbrk>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_sbrk_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_sbrk_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	20001634 	.word	0x20001634

0800d400 <strncmp>:
 800d400:	b510      	push	{r4, lr}
 800d402:	b16a      	cbz	r2, 800d420 <strncmp+0x20>
 800d404:	3901      	subs	r1, #1
 800d406:	1884      	adds	r4, r0, r2
 800d408:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d40c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d410:	4293      	cmp	r3, r2
 800d412:	d103      	bne.n	800d41c <strncmp+0x1c>
 800d414:	42a0      	cmp	r0, r4
 800d416:	d001      	beq.n	800d41c <strncmp+0x1c>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f5      	bne.n	800d408 <strncmp+0x8>
 800d41c:	1a98      	subs	r0, r3, r2
 800d41e:	bd10      	pop	{r4, pc}
 800d420:	4610      	mov	r0, r2
 800d422:	e7fc      	b.n	800d41e <strncmp+0x1e>

0800d424 <__ascii_wctomb>:
 800d424:	4603      	mov	r3, r0
 800d426:	4608      	mov	r0, r1
 800d428:	b141      	cbz	r1, 800d43c <__ascii_wctomb+0x18>
 800d42a:	2aff      	cmp	r2, #255	; 0xff
 800d42c:	d904      	bls.n	800d438 <__ascii_wctomb+0x14>
 800d42e:	228a      	movs	r2, #138	; 0x8a
 800d430:	f04f 30ff 	mov.w	r0, #4294967295
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	4770      	bx	lr
 800d438:	2001      	movs	r0, #1
 800d43a:	700a      	strb	r2, [r1, #0]
 800d43c:	4770      	bx	lr
	...

0800d440 <__assert_func>:
 800d440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d442:	4614      	mov	r4, r2
 800d444:	461a      	mov	r2, r3
 800d446:	4b09      	ldr	r3, [pc, #36]	; (800d46c <__assert_func+0x2c>)
 800d448:	4605      	mov	r5, r0
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68d8      	ldr	r0, [r3, #12]
 800d44e:	b14c      	cbz	r4, 800d464 <__assert_func+0x24>
 800d450:	4b07      	ldr	r3, [pc, #28]	; (800d470 <__assert_func+0x30>)
 800d452:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d456:	9100      	str	r1, [sp, #0]
 800d458:	462b      	mov	r3, r5
 800d45a:	4906      	ldr	r1, [pc, #24]	; (800d474 <__assert_func+0x34>)
 800d45c:	f000 f80e 	bl	800d47c <fiprintf>
 800d460:	f000 fa82 	bl	800d968 <abort>
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <__assert_func+0x38>)
 800d466:	461c      	mov	r4, r3
 800d468:	e7f3      	b.n	800d452 <__assert_func+0x12>
 800d46a:	bf00      	nop
 800d46c:	2000017c 	.word	0x2000017c
 800d470:	0800e45d 	.word	0x0800e45d
 800d474:	0800e46a 	.word	0x0800e46a
 800d478:	0800e498 	.word	0x0800e498

0800d47c <fiprintf>:
 800d47c:	b40e      	push	{r1, r2, r3}
 800d47e:	b503      	push	{r0, r1, lr}
 800d480:	4601      	mov	r1, r0
 800d482:	ab03      	add	r3, sp, #12
 800d484:	4805      	ldr	r0, [pc, #20]	; (800d49c <fiprintf+0x20>)
 800d486:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48a:	6800      	ldr	r0, [r0, #0]
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	f000 f87b 	bl	800d588 <_vfiprintf_r>
 800d492:	b002      	add	sp, #8
 800d494:	f85d eb04 	ldr.w	lr, [sp], #4
 800d498:	b003      	add	sp, #12
 800d49a:	4770      	bx	lr
 800d49c:	2000017c 	.word	0x2000017c

0800d4a0 <memmove>:
 800d4a0:	4288      	cmp	r0, r1
 800d4a2:	b510      	push	{r4, lr}
 800d4a4:	eb01 0402 	add.w	r4, r1, r2
 800d4a8:	d902      	bls.n	800d4b0 <memmove+0x10>
 800d4aa:	4284      	cmp	r4, r0
 800d4ac:	4623      	mov	r3, r4
 800d4ae:	d807      	bhi.n	800d4c0 <memmove+0x20>
 800d4b0:	1e43      	subs	r3, r0, #1
 800d4b2:	42a1      	cmp	r1, r4
 800d4b4:	d008      	beq.n	800d4c8 <memmove+0x28>
 800d4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4be:	e7f8      	b.n	800d4b2 <memmove+0x12>
 800d4c0:	4601      	mov	r1, r0
 800d4c2:	4402      	add	r2, r0
 800d4c4:	428a      	cmp	r2, r1
 800d4c6:	d100      	bne.n	800d4ca <memmove+0x2a>
 800d4c8:	bd10      	pop	{r4, pc}
 800d4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4d2:	e7f7      	b.n	800d4c4 <memmove+0x24>

0800d4d4 <__malloc_lock>:
 800d4d4:	4801      	ldr	r0, [pc, #4]	; (800d4dc <__malloc_lock+0x8>)
 800d4d6:	f000 bc07 	b.w	800dce8 <__retarget_lock_acquire_recursive>
 800d4da:	bf00      	nop
 800d4dc:	2000163c 	.word	0x2000163c

0800d4e0 <__malloc_unlock>:
 800d4e0:	4801      	ldr	r0, [pc, #4]	; (800d4e8 <__malloc_unlock+0x8>)
 800d4e2:	f000 bc02 	b.w	800dcea <__retarget_lock_release_recursive>
 800d4e6:	bf00      	nop
 800d4e8:	2000163c 	.word	0x2000163c

0800d4ec <_realloc_r>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	b921      	cbnz	r1, 800d500 <_realloc_r+0x14>
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4fc:	f7ff bdb4 	b.w	800d068 <_malloc_r>
 800d500:	b922      	cbnz	r2, 800d50c <_realloc_r+0x20>
 800d502:	f7ff fd65 	bl	800cfd0 <_free_r>
 800d506:	4625      	mov	r5, r4
 800d508:	4628      	mov	r0, r5
 800d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d50c:	f000 fc52 	bl	800ddb4 <_malloc_usable_size_r>
 800d510:	42a0      	cmp	r0, r4
 800d512:	d20f      	bcs.n	800d534 <_realloc_r+0x48>
 800d514:	4621      	mov	r1, r4
 800d516:	4638      	mov	r0, r7
 800d518:	f7ff fda6 	bl	800d068 <_malloc_r>
 800d51c:	4605      	mov	r5, r0
 800d51e:	2800      	cmp	r0, #0
 800d520:	d0f2      	beq.n	800d508 <_realloc_r+0x1c>
 800d522:	4631      	mov	r1, r6
 800d524:	4622      	mov	r2, r4
 800d526:	f7ff f87f 	bl	800c628 <memcpy>
 800d52a:	4631      	mov	r1, r6
 800d52c:	4638      	mov	r0, r7
 800d52e:	f7ff fd4f 	bl	800cfd0 <_free_r>
 800d532:	e7e9      	b.n	800d508 <_realloc_r+0x1c>
 800d534:	4635      	mov	r5, r6
 800d536:	e7e7      	b.n	800d508 <_realloc_r+0x1c>

0800d538 <__sfputc_r>:
 800d538:	6893      	ldr	r3, [r2, #8]
 800d53a:	b410      	push	{r4}
 800d53c:	3b01      	subs	r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	6093      	str	r3, [r2, #8]
 800d542:	da07      	bge.n	800d554 <__sfputc_r+0x1c>
 800d544:	6994      	ldr	r4, [r2, #24]
 800d546:	42a3      	cmp	r3, r4
 800d548:	db01      	blt.n	800d54e <__sfputc_r+0x16>
 800d54a:	290a      	cmp	r1, #10
 800d54c:	d102      	bne.n	800d554 <__sfputc_r+0x1c>
 800d54e:	bc10      	pop	{r4}
 800d550:	f000 b94a 	b.w	800d7e8 <__swbuf_r>
 800d554:	6813      	ldr	r3, [r2, #0]
 800d556:	1c58      	adds	r0, r3, #1
 800d558:	6010      	str	r0, [r2, #0]
 800d55a:	7019      	strb	r1, [r3, #0]
 800d55c:	4608      	mov	r0, r1
 800d55e:	bc10      	pop	{r4}
 800d560:	4770      	bx	lr

0800d562 <__sfputs_r>:
 800d562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d564:	4606      	mov	r6, r0
 800d566:	460f      	mov	r7, r1
 800d568:	4614      	mov	r4, r2
 800d56a:	18d5      	adds	r5, r2, r3
 800d56c:	42ac      	cmp	r4, r5
 800d56e:	d101      	bne.n	800d574 <__sfputs_r+0x12>
 800d570:	2000      	movs	r0, #0
 800d572:	e007      	b.n	800d584 <__sfputs_r+0x22>
 800d574:	463a      	mov	r2, r7
 800d576:	4630      	mov	r0, r6
 800d578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d57c:	f7ff ffdc 	bl	800d538 <__sfputc_r>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d1f3      	bne.n	800d56c <__sfputs_r+0xa>
 800d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d588 <_vfiprintf_r>:
 800d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	460d      	mov	r5, r1
 800d58e:	4614      	mov	r4, r2
 800d590:	4698      	mov	r8, r3
 800d592:	4606      	mov	r6, r0
 800d594:	b09d      	sub	sp, #116	; 0x74
 800d596:	b118      	cbz	r0, 800d5a0 <_vfiprintf_r+0x18>
 800d598:	6983      	ldr	r3, [r0, #24]
 800d59a:	b90b      	cbnz	r3, 800d5a0 <_vfiprintf_r+0x18>
 800d59c:	f000 fb06 	bl	800dbac <__sinit>
 800d5a0:	4b89      	ldr	r3, [pc, #548]	; (800d7c8 <_vfiprintf_r+0x240>)
 800d5a2:	429d      	cmp	r5, r3
 800d5a4:	d11b      	bne.n	800d5de <_vfiprintf_r+0x56>
 800d5a6:	6875      	ldr	r5, [r6, #4]
 800d5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5aa:	07d9      	lsls	r1, r3, #31
 800d5ac:	d405      	bmi.n	800d5ba <_vfiprintf_r+0x32>
 800d5ae:	89ab      	ldrh	r3, [r5, #12]
 800d5b0:	059a      	lsls	r2, r3, #22
 800d5b2:	d402      	bmi.n	800d5ba <_vfiprintf_r+0x32>
 800d5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5b6:	f000 fb97 	bl	800dce8 <__retarget_lock_acquire_recursive>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	071b      	lsls	r3, r3, #28
 800d5be:	d501      	bpl.n	800d5c4 <_vfiprintf_r+0x3c>
 800d5c0:	692b      	ldr	r3, [r5, #16]
 800d5c2:	b9eb      	cbnz	r3, 800d600 <_vfiprintf_r+0x78>
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f000 f960 	bl	800d88c <__swsetup_r>
 800d5cc:	b1c0      	cbz	r0, 800d600 <_vfiprintf_r+0x78>
 800d5ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5d0:	07dc      	lsls	r4, r3, #31
 800d5d2:	d50e      	bpl.n	800d5f2 <_vfiprintf_r+0x6a>
 800d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d8:	b01d      	add	sp, #116	; 0x74
 800d5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5de:	4b7b      	ldr	r3, [pc, #492]	; (800d7cc <_vfiprintf_r+0x244>)
 800d5e0:	429d      	cmp	r5, r3
 800d5e2:	d101      	bne.n	800d5e8 <_vfiprintf_r+0x60>
 800d5e4:	68b5      	ldr	r5, [r6, #8]
 800d5e6:	e7df      	b.n	800d5a8 <_vfiprintf_r+0x20>
 800d5e8:	4b79      	ldr	r3, [pc, #484]	; (800d7d0 <_vfiprintf_r+0x248>)
 800d5ea:	429d      	cmp	r5, r3
 800d5ec:	bf08      	it	eq
 800d5ee:	68f5      	ldreq	r5, [r6, #12]
 800d5f0:	e7da      	b.n	800d5a8 <_vfiprintf_r+0x20>
 800d5f2:	89ab      	ldrh	r3, [r5, #12]
 800d5f4:	0598      	lsls	r0, r3, #22
 800d5f6:	d4ed      	bmi.n	800d5d4 <_vfiprintf_r+0x4c>
 800d5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5fa:	f000 fb76 	bl	800dcea <__retarget_lock_release_recursive>
 800d5fe:	e7e9      	b.n	800d5d4 <_vfiprintf_r+0x4c>
 800d600:	2300      	movs	r3, #0
 800d602:	9309      	str	r3, [sp, #36]	; 0x24
 800d604:	2320      	movs	r3, #32
 800d606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d60a:	2330      	movs	r3, #48	; 0x30
 800d60c:	f04f 0901 	mov.w	r9, #1
 800d610:	f8cd 800c 	str.w	r8, [sp, #12]
 800d614:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d7d4 <_vfiprintf_r+0x24c>
 800d618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d61c:	4623      	mov	r3, r4
 800d61e:	469a      	mov	sl, r3
 800d620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d624:	b10a      	cbz	r2, 800d62a <_vfiprintf_r+0xa2>
 800d626:	2a25      	cmp	r2, #37	; 0x25
 800d628:	d1f9      	bne.n	800d61e <_vfiprintf_r+0x96>
 800d62a:	ebba 0b04 	subs.w	fp, sl, r4
 800d62e:	d00b      	beq.n	800d648 <_vfiprintf_r+0xc0>
 800d630:	465b      	mov	r3, fp
 800d632:	4622      	mov	r2, r4
 800d634:	4629      	mov	r1, r5
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ff93 	bl	800d562 <__sfputs_r>
 800d63c:	3001      	adds	r0, #1
 800d63e:	f000 80aa 	beq.w	800d796 <_vfiprintf_r+0x20e>
 800d642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d644:	445a      	add	r2, fp
 800d646:	9209      	str	r2, [sp, #36]	; 0x24
 800d648:	f89a 3000 	ldrb.w	r3, [sl]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 80a2 	beq.w	800d796 <_vfiprintf_r+0x20e>
 800d652:	2300      	movs	r3, #0
 800d654:	f04f 32ff 	mov.w	r2, #4294967295
 800d658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d65c:	f10a 0a01 	add.w	sl, sl, #1
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	9307      	str	r3, [sp, #28]
 800d664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d668:	931a      	str	r3, [sp, #104]	; 0x68
 800d66a:	4654      	mov	r4, sl
 800d66c:	2205      	movs	r2, #5
 800d66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d672:	4858      	ldr	r0, [pc, #352]	; (800d7d4 <_vfiprintf_r+0x24c>)
 800d674:	f7fe ffca 	bl	800c60c <memchr>
 800d678:	9a04      	ldr	r2, [sp, #16]
 800d67a:	b9d8      	cbnz	r0, 800d6b4 <_vfiprintf_r+0x12c>
 800d67c:	06d1      	lsls	r1, r2, #27
 800d67e:	bf44      	itt	mi
 800d680:	2320      	movmi	r3, #32
 800d682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d686:	0713      	lsls	r3, r2, #28
 800d688:	bf44      	itt	mi
 800d68a:	232b      	movmi	r3, #43	; 0x2b
 800d68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d690:	f89a 3000 	ldrb.w	r3, [sl]
 800d694:	2b2a      	cmp	r3, #42	; 0x2a
 800d696:	d015      	beq.n	800d6c4 <_vfiprintf_r+0x13c>
 800d698:	4654      	mov	r4, sl
 800d69a:	2000      	movs	r0, #0
 800d69c:	f04f 0c0a 	mov.w	ip, #10
 800d6a0:	9a07      	ldr	r2, [sp, #28]
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a8:	3b30      	subs	r3, #48	; 0x30
 800d6aa:	2b09      	cmp	r3, #9
 800d6ac:	d94e      	bls.n	800d74c <_vfiprintf_r+0x1c4>
 800d6ae:	b1b0      	cbz	r0, 800d6de <_vfiprintf_r+0x156>
 800d6b0:	9207      	str	r2, [sp, #28]
 800d6b2:	e014      	b.n	800d6de <_vfiprintf_r+0x156>
 800d6b4:	eba0 0308 	sub.w	r3, r0, r8
 800d6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	46a2      	mov	sl, r4
 800d6c0:	9304      	str	r3, [sp, #16]
 800d6c2:	e7d2      	b.n	800d66a <_vfiprintf_r+0xe2>
 800d6c4:	9b03      	ldr	r3, [sp, #12]
 800d6c6:	1d19      	adds	r1, r3, #4
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	9103      	str	r1, [sp, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfbb      	ittet	lt
 800d6d0:	425b      	neglt	r3, r3
 800d6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6d6:	9307      	strge	r3, [sp, #28]
 800d6d8:	9307      	strlt	r3, [sp, #28]
 800d6da:	bfb8      	it	lt
 800d6dc:	9204      	strlt	r2, [sp, #16]
 800d6de:	7823      	ldrb	r3, [r4, #0]
 800d6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6e2:	d10c      	bne.n	800d6fe <_vfiprintf_r+0x176>
 800d6e4:	7863      	ldrb	r3, [r4, #1]
 800d6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6e8:	d135      	bne.n	800d756 <_vfiprintf_r+0x1ce>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	3402      	adds	r4, #2
 800d6ee:	1d1a      	adds	r2, r3, #4
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	9203      	str	r2, [sp, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bfb8      	it	lt
 800d6f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6fc:	9305      	str	r3, [sp, #20]
 800d6fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7e4 <_vfiprintf_r+0x25c>
 800d702:	2203      	movs	r2, #3
 800d704:	4650      	mov	r0, sl
 800d706:	7821      	ldrb	r1, [r4, #0]
 800d708:	f7fe ff80 	bl	800c60c <memchr>
 800d70c:	b140      	cbz	r0, 800d720 <_vfiprintf_r+0x198>
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	eba0 000a 	sub.w	r0, r0, sl
 800d714:	fa03 f000 	lsl.w	r0, r3, r0
 800d718:	9b04      	ldr	r3, [sp, #16]
 800d71a:	3401      	adds	r4, #1
 800d71c:	4303      	orrs	r3, r0
 800d71e:	9304      	str	r3, [sp, #16]
 800d720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d724:	2206      	movs	r2, #6
 800d726:	482c      	ldr	r0, [pc, #176]	; (800d7d8 <_vfiprintf_r+0x250>)
 800d728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d72c:	f7fe ff6e 	bl	800c60c <memchr>
 800d730:	2800      	cmp	r0, #0
 800d732:	d03f      	beq.n	800d7b4 <_vfiprintf_r+0x22c>
 800d734:	4b29      	ldr	r3, [pc, #164]	; (800d7dc <_vfiprintf_r+0x254>)
 800d736:	bb1b      	cbnz	r3, 800d780 <_vfiprintf_r+0x1f8>
 800d738:	9b03      	ldr	r3, [sp, #12]
 800d73a:	3307      	adds	r3, #7
 800d73c:	f023 0307 	bic.w	r3, r3, #7
 800d740:	3308      	adds	r3, #8
 800d742:	9303      	str	r3, [sp, #12]
 800d744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d746:	443b      	add	r3, r7
 800d748:	9309      	str	r3, [sp, #36]	; 0x24
 800d74a:	e767      	b.n	800d61c <_vfiprintf_r+0x94>
 800d74c:	460c      	mov	r4, r1
 800d74e:	2001      	movs	r0, #1
 800d750:	fb0c 3202 	mla	r2, ip, r2, r3
 800d754:	e7a5      	b.n	800d6a2 <_vfiprintf_r+0x11a>
 800d756:	2300      	movs	r3, #0
 800d758:	f04f 0c0a 	mov.w	ip, #10
 800d75c:	4619      	mov	r1, r3
 800d75e:	3401      	adds	r4, #1
 800d760:	9305      	str	r3, [sp, #20]
 800d762:	4620      	mov	r0, r4
 800d764:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d768:	3a30      	subs	r2, #48	; 0x30
 800d76a:	2a09      	cmp	r2, #9
 800d76c:	d903      	bls.n	800d776 <_vfiprintf_r+0x1ee>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d0c5      	beq.n	800d6fe <_vfiprintf_r+0x176>
 800d772:	9105      	str	r1, [sp, #20]
 800d774:	e7c3      	b.n	800d6fe <_vfiprintf_r+0x176>
 800d776:	4604      	mov	r4, r0
 800d778:	2301      	movs	r3, #1
 800d77a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d77e:	e7f0      	b.n	800d762 <_vfiprintf_r+0x1da>
 800d780:	ab03      	add	r3, sp, #12
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	462a      	mov	r2, r5
 800d786:	4630      	mov	r0, r6
 800d788:	4b15      	ldr	r3, [pc, #84]	; (800d7e0 <_vfiprintf_r+0x258>)
 800d78a:	a904      	add	r1, sp, #16
 800d78c:	f7fc f8a2 	bl	80098d4 <_printf_float>
 800d790:	4607      	mov	r7, r0
 800d792:	1c78      	adds	r0, r7, #1
 800d794:	d1d6      	bne.n	800d744 <_vfiprintf_r+0x1bc>
 800d796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d798:	07d9      	lsls	r1, r3, #31
 800d79a:	d405      	bmi.n	800d7a8 <_vfiprintf_r+0x220>
 800d79c:	89ab      	ldrh	r3, [r5, #12]
 800d79e:	059a      	lsls	r2, r3, #22
 800d7a0:	d402      	bmi.n	800d7a8 <_vfiprintf_r+0x220>
 800d7a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7a4:	f000 faa1 	bl	800dcea <__retarget_lock_release_recursive>
 800d7a8:	89ab      	ldrh	r3, [r5, #12]
 800d7aa:	065b      	lsls	r3, r3, #25
 800d7ac:	f53f af12 	bmi.w	800d5d4 <_vfiprintf_r+0x4c>
 800d7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7b2:	e711      	b.n	800d5d8 <_vfiprintf_r+0x50>
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	4b08      	ldr	r3, [pc, #32]	; (800d7e0 <_vfiprintf_r+0x258>)
 800d7be:	a904      	add	r1, sp, #16
 800d7c0:	f7fc fb24 	bl	8009e0c <_printf_i>
 800d7c4:	e7e4      	b.n	800d790 <_vfiprintf_r+0x208>
 800d7c6:	bf00      	nop
 800d7c8:	0800e4bc 	.word	0x0800e4bc
 800d7cc:	0800e4dc 	.word	0x0800e4dc
 800d7d0:	0800e49c 	.word	0x0800e49c
 800d7d4:	0800e44c 	.word	0x0800e44c
 800d7d8:	0800e456 	.word	0x0800e456
 800d7dc:	080098d5 	.word	0x080098d5
 800d7e0:	0800d563 	.word	0x0800d563
 800d7e4:	0800e452 	.word	0x0800e452

0800d7e8 <__swbuf_r>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	460e      	mov	r6, r1
 800d7ec:	4614      	mov	r4, r2
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	b118      	cbz	r0, 800d7fa <__swbuf_r+0x12>
 800d7f2:	6983      	ldr	r3, [r0, #24]
 800d7f4:	b90b      	cbnz	r3, 800d7fa <__swbuf_r+0x12>
 800d7f6:	f000 f9d9 	bl	800dbac <__sinit>
 800d7fa:	4b21      	ldr	r3, [pc, #132]	; (800d880 <__swbuf_r+0x98>)
 800d7fc:	429c      	cmp	r4, r3
 800d7fe:	d12b      	bne.n	800d858 <__swbuf_r+0x70>
 800d800:	686c      	ldr	r4, [r5, #4]
 800d802:	69a3      	ldr	r3, [r4, #24]
 800d804:	60a3      	str	r3, [r4, #8]
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	071a      	lsls	r2, r3, #28
 800d80a:	d52f      	bpl.n	800d86c <__swbuf_r+0x84>
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	b36b      	cbz	r3, 800d86c <__swbuf_r+0x84>
 800d810:	6923      	ldr	r3, [r4, #16]
 800d812:	6820      	ldr	r0, [r4, #0]
 800d814:	b2f6      	uxtb	r6, r6
 800d816:	1ac0      	subs	r0, r0, r3
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	4637      	mov	r7, r6
 800d81c:	4283      	cmp	r3, r0
 800d81e:	dc04      	bgt.n	800d82a <__swbuf_r+0x42>
 800d820:	4621      	mov	r1, r4
 800d822:	4628      	mov	r0, r5
 800d824:	f000 f92e 	bl	800da84 <_fflush_r>
 800d828:	bb30      	cbnz	r0, 800d878 <__swbuf_r+0x90>
 800d82a:	68a3      	ldr	r3, [r4, #8]
 800d82c:	3001      	adds	r0, #1
 800d82e:	3b01      	subs	r3, #1
 800d830:	60a3      	str	r3, [r4, #8]
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	1c5a      	adds	r2, r3, #1
 800d836:	6022      	str	r2, [r4, #0]
 800d838:	701e      	strb	r6, [r3, #0]
 800d83a:	6963      	ldr	r3, [r4, #20]
 800d83c:	4283      	cmp	r3, r0
 800d83e:	d004      	beq.n	800d84a <__swbuf_r+0x62>
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	07db      	lsls	r3, r3, #31
 800d844:	d506      	bpl.n	800d854 <__swbuf_r+0x6c>
 800d846:	2e0a      	cmp	r6, #10
 800d848:	d104      	bne.n	800d854 <__swbuf_r+0x6c>
 800d84a:	4621      	mov	r1, r4
 800d84c:	4628      	mov	r0, r5
 800d84e:	f000 f919 	bl	800da84 <_fflush_r>
 800d852:	b988      	cbnz	r0, 800d878 <__swbuf_r+0x90>
 800d854:	4638      	mov	r0, r7
 800d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d858:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <__swbuf_r+0x9c>)
 800d85a:	429c      	cmp	r4, r3
 800d85c:	d101      	bne.n	800d862 <__swbuf_r+0x7a>
 800d85e:	68ac      	ldr	r4, [r5, #8]
 800d860:	e7cf      	b.n	800d802 <__swbuf_r+0x1a>
 800d862:	4b09      	ldr	r3, [pc, #36]	; (800d888 <__swbuf_r+0xa0>)
 800d864:	429c      	cmp	r4, r3
 800d866:	bf08      	it	eq
 800d868:	68ec      	ldreq	r4, [r5, #12]
 800d86a:	e7ca      	b.n	800d802 <__swbuf_r+0x1a>
 800d86c:	4621      	mov	r1, r4
 800d86e:	4628      	mov	r0, r5
 800d870:	f000 f80c 	bl	800d88c <__swsetup_r>
 800d874:	2800      	cmp	r0, #0
 800d876:	d0cb      	beq.n	800d810 <__swbuf_r+0x28>
 800d878:	f04f 37ff 	mov.w	r7, #4294967295
 800d87c:	e7ea      	b.n	800d854 <__swbuf_r+0x6c>
 800d87e:	bf00      	nop
 800d880:	0800e4bc 	.word	0x0800e4bc
 800d884:	0800e4dc 	.word	0x0800e4dc
 800d888:	0800e49c 	.word	0x0800e49c

0800d88c <__swsetup_r>:
 800d88c:	4b32      	ldr	r3, [pc, #200]	; (800d958 <__swsetup_r+0xcc>)
 800d88e:	b570      	push	{r4, r5, r6, lr}
 800d890:	681d      	ldr	r5, [r3, #0]
 800d892:	4606      	mov	r6, r0
 800d894:	460c      	mov	r4, r1
 800d896:	b125      	cbz	r5, 800d8a2 <__swsetup_r+0x16>
 800d898:	69ab      	ldr	r3, [r5, #24]
 800d89a:	b913      	cbnz	r3, 800d8a2 <__swsetup_r+0x16>
 800d89c:	4628      	mov	r0, r5
 800d89e:	f000 f985 	bl	800dbac <__sinit>
 800d8a2:	4b2e      	ldr	r3, [pc, #184]	; (800d95c <__swsetup_r+0xd0>)
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	d10f      	bne.n	800d8c8 <__swsetup_r+0x3c>
 800d8a8:	686c      	ldr	r4, [r5, #4]
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8b0:	0719      	lsls	r1, r3, #28
 800d8b2:	d42c      	bmi.n	800d90e <__swsetup_r+0x82>
 800d8b4:	06dd      	lsls	r5, r3, #27
 800d8b6:	d411      	bmi.n	800d8dc <__swsetup_r+0x50>
 800d8b8:	2309      	movs	r3, #9
 800d8ba:	6033      	str	r3, [r6, #0]
 800d8bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c4:	81a3      	strh	r3, [r4, #12]
 800d8c6:	e03e      	b.n	800d946 <__swsetup_r+0xba>
 800d8c8:	4b25      	ldr	r3, [pc, #148]	; (800d960 <__swsetup_r+0xd4>)
 800d8ca:	429c      	cmp	r4, r3
 800d8cc:	d101      	bne.n	800d8d2 <__swsetup_r+0x46>
 800d8ce:	68ac      	ldr	r4, [r5, #8]
 800d8d0:	e7eb      	b.n	800d8aa <__swsetup_r+0x1e>
 800d8d2:	4b24      	ldr	r3, [pc, #144]	; (800d964 <__swsetup_r+0xd8>)
 800d8d4:	429c      	cmp	r4, r3
 800d8d6:	bf08      	it	eq
 800d8d8:	68ec      	ldreq	r4, [r5, #12]
 800d8da:	e7e6      	b.n	800d8aa <__swsetup_r+0x1e>
 800d8dc:	0758      	lsls	r0, r3, #29
 800d8de:	d512      	bpl.n	800d906 <__swsetup_r+0x7a>
 800d8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8e2:	b141      	cbz	r1, 800d8f6 <__swsetup_r+0x6a>
 800d8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8e8:	4299      	cmp	r1, r3
 800d8ea:	d002      	beq.n	800d8f2 <__swsetup_r+0x66>
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff fb6f 	bl	800cfd0 <_free_r>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8fc:	81a3      	strh	r3, [r4, #12]
 800d8fe:	2300      	movs	r3, #0
 800d900:	6063      	str	r3, [r4, #4]
 800d902:	6923      	ldr	r3, [r4, #16]
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f043 0308 	orr.w	r3, r3, #8
 800d90c:	81a3      	strh	r3, [r4, #12]
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	b94b      	cbnz	r3, 800d926 <__swsetup_r+0x9a>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d91c:	d003      	beq.n	800d926 <__swsetup_r+0x9a>
 800d91e:	4621      	mov	r1, r4
 800d920:	4630      	mov	r0, r6
 800d922:	f000 fa07 	bl	800dd34 <__smakebuf_r>
 800d926:	89a0      	ldrh	r0, [r4, #12]
 800d928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d92c:	f010 0301 	ands.w	r3, r0, #1
 800d930:	d00a      	beq.n	800d948 <__swsetup_r+0xbc>
 800d932:	2300      	movs	r3, #0
 800d934:	60a3      	str	r3, [r4, #8]
 800d936:	6963      	ldr	r3, [r4, #20]
 800d938:	425b      	negs	r3, r3
 800d93a:	61a3      	str	r3, [r4, #24]
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	b943      	cbnz	r3, 800d952 <__swsetup_r+0xc6>
 800d940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d944:	d1ba      	bne.n	800d8bc <__swsetup_r+0x30>
 800d946:	bd70      	pop	{r4, r5, r6, pc}
 800d948:	0781      	lsls	r1, r0, #30
 800d94a:	bf58      	it	pl
 800d94c:	6963      	ldrpl	r3, [r4, #20]
 800d94e:	60a3      	str	r3, [r4, #8]
 800d950:	e7f4      	b.n	800d93c <__swsetup_r+0xb0>
 800d952:	2000      	movs	r0, #0
 800d954:	e7f7      	b.n	800d946 <__swsetup_r+0xba>
 800d956:	bf00      	nop
 800d958:	2000017c 	.word	0x2000017c
 800d95c:	0800e4bc 	.word	0x0800e4bc
 800d960:	0800e4dc 	.word	0x0800e4dc
 800d964:	0800e49c 	.word	0x0800e49c

0800d968 <abort>:
 800d968:	2006      	movs	r0, #6
 800d96a:	b508      	push	{r3, lr}
 800d96c:	f000 fa52 	bl	800de14 <raise>
 800d970:	2001      	movs	r0, #1
 800d972:	f7f3 fce6 	bl	8001342 <_exit>
	...

0800d978 <__sflush_r>:
 800d978:	898a      	ldrh	r2, [r1, #12]
 800d97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d97e:	4605      	mov	r5, r0
 800d980:	0710      	lsls	r0, r2, #28
 800d982:	460c      	mov	r4, r1
 800d984:	d458      	bmi.n	800da38 <__sflush_r+0xc0>
 800d986:	684b      	ldr	r3, [r1, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dc05      	bgt.n	800d998 <__sflush_r+0x20>
 800d98c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d98e:	2b00      	cmp	r3, #0
 800d990:	dc02      	bgt.n	800d998 <__sflush_r+0x20>
 800d992:	2000      	movs	r0, #0
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d0f9      	beq.n	800d992 <__sflush_r+0x1a>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9a4:	682f      	ldr	r7, [r5, #0]
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	d032      	beq.n	800da10 <__sflush_r+0x98>
 800d9aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9ac:	89a3      	ldrh	r3, [r4, #12]
 800d9ae:	075a      	lsls	r2, r3, #29
 800d9b0:	d505      	bpl.n	800d9be <__sflush_r+0x46>
 800d9b2:	6863      	ldr	r3, [r4, #4]
 800d9b4:	1ac0      	subs	r0, r0, r3
 800d9b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9b8:	b10b      	cbz	r3, 800d9be <__sflush_r+0x46>
 800d9ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9bc:	1ac0      	subs	r0, r0, r3
 800d9be:	2300      	movs	r3, #0
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	6a21      	ldr	r1, [r4, #32]
 800d9c8:	47b0      	blx	r6
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	d106      	bne.n	800d9de <__sflush_r+0x66>
 800d9d0:	6829      	ldr	r1, [r5, #0]
 800d9d2:	291d      	cmp	r1, #29
 800d9d4:	d82c      	bhi.n	800da30 <__sflush_r+0xb8>
 800d9d6:	4a2a      	ldr	r2, [pc, #168]	; (800da80 <__sflush_r+0x108>)
 800d9d8:	40ca      	lsrs	r2, r1
 800d9da:	07d6      	lsls	r6, r2, #31
 800d9dc:	d528      	bpl.n	800da30 <__sflush_r+0xb8>
 800d9de:	2200      	movs	r2, #0
 800d9e0:	6062      	str	r2, [r4, #4]
 800d9e2:	6922      	ldr	r2, [r4, #16]
 800d9e4:	04d9      	lsls	r1, r3, #19
 800d9e6:	6022      	str	r2, [r4, #0]
 800d9e8:	d504      	bpl.n	800d9f4 <__sflush_r+0x7c>
 800d9ea:	1c42      	adds	r2, r0, #1
 800d9ec:	d101      	bne.n	800d9f2 <__sflush_r+0x7a>
 800d9ee:	682b      	ldr	r3, [r5, #0]
 800d9f0:	b903      	cbnz	r3, 800d9f4 <__sflush_r+0x7c>
 800d9f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9f6:	602f      	str	r7, [r5, #0]
 800d9f8:	2900      	cmp	r1, #0
 800d9fa:	d0ca      	beq.n	800d992 <__sflush_r+0x1a>
 800d9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da00:	4299      	cmp	r1, r3
 800da02:	d002      	beq.n	800da0a <__sflush_r+0x92>
 800da04:	4628      	mov	r0, r5
 800da06:	f7ff fae3 	bl	800cfd0 <_free_r>
 800da0a:	2000      	movs	r0, #0
 800da0c:	6360      	str	r0, [r4, #52]	; 0x34
 800da0e:	e7c1      	b.n	800d994 <__sflush_r+0x1c>
 800da10:	6a21      	ldr	r1, [r4, #32]
 800da12:	2301      	movs	r3, #1
 800da14:	4628      	mov	r0, r5
 800da16:	47b0      	blx	r6
 800da18:	1c41      	adds	r1, r0, #1
 800da1a:	d1c7      	bne.n	800d9ac <__sflush_r+0x34>
 800da1c:	682b      	ldr	r3, [r5, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d0c4      	beq.n	800d9ac <__sflush_r+0x34>
 800da22:	2b1d      	cmp	r3, #29
 800da24:	d001      	beq.n	800da2a <__sflush_r+0xb2>
 800da26:	2b16      	cmp	r3, #22
 800da28:	d101      	bne.n	800da2e <__sflush_r+0xb6>
 800da2a:	602f      	str	r7, [r5, #0]
 800da2c:	e7b1      	b.n	800d992 <__sflush_r+0x1a>
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da34:	81a3      	strh	r3, [r4, #12]
 800da36:	e7ad      	b.n	800d994 <__sflush_r+0x1c>
 800da38:	690f      	ldr	r7, [r1, #16]
 800da3a:	2f00      	cmp	r7, #0
 800da3c:	d0a9      	beq.n	800d992 <__sflush_r+0x1a>
 800da3e:	0793      	lsls	r3, r2, #30
 800da40:	bf18      	it	ne
 800da42:	2300      	movne	r3, #0
 800da44:	680e      	ldr	r6, [r1, #0]
 800da46:	bf08      	it	eq
 800da48:	694b      	ldreq	r3, [r1, #20]
 800da4a:	eba6 0807 	sub.w	r8, r6, r7
 800da4e:	600f      	str	r7, [r1, #0]
 800da50:	608b      	str	r3, [r1, #8]
 800da52:	f1b8 0f00 	cmp.w	r8, #0
 800da56:	dd9c      	ble.n	800d992 <__sflush_r+0x1a>
 800da58:	4643      	mov	r3, r8
 800da5a:	463a      	mov	r2, r7
 800da5c:	4628      	mov	r0, r5
 800da5e:	6a21      	ldr	r1, [r4, #32]
 800da60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da62:	47b0      	blx	r6
 800da64:	2800      	cmp	r0, #0
 800da66:	dc06      	bgt.n	800da76 <__sflush_r+0xfe>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f04f 30ff 	mov.w	r0, #4294967295
 800da6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	e78e      	b.n	800d994 <__sflush_r+0x1c>
 800da76:	4407      	add	r7, r0
 800da78:	eba8 0800 	sub.w	r8, r8, r0
 800da7c:	e7e9      	b.n	800da52 <__sflush_r+0xda>
 800da7e:	bf00      	nop
 800da80:	20400001 	.word	0x20400001

0800da84 <_fflush_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	690b      	ldr	r3, [r1, #16]
 800da88:	4605      	mov	r5, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	b913      	cbnz	r3, 800da94 <_fflush_r+0x10>
 800da8e:	2500      	movs	r5, #0
 800da90:	4628      	mov	r0, r5
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	b118      	cbz	r0, 800da9e <_fflush_r+0x1a>
 800da96:	6983      	ldr	r3, [r0, #24]
 800da98:	b90b      	cbnz	r3, 800da9e <_fflush_r+0x1a>
 800da9a:	f000 f887 	bl	800dbac <__sinit>
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <_fflush_r+0x6c>)
 800daa0:	429c      	cmp	r4, r3
 800daa2:	d11b      	bne.n	800dadc <_fflush_r+0x58>
 800daa4:	686c      	ldr	r4, [r5, #4]
 800daa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0ef      	beq.n	800da8e <_fflush_r+0xa>
 800daae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dab0:	07d0      	lsls	r0, r2, #31
 800dab2:	d404      	bmi.n	800dabe <_fflush_r+0x3a>
 800dab4:	0599      	lsls	r1, r3, #22
 800dab6:	d402      	bmi.n	800dabe <_fflush_r+0x3a>
 800dab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daba:	f000 f915 	bl	800dce8 <__retarget_lock_acquire_recursive>
 800dabe:	4628      	mov	r0, r5
 800dac0:	4621      	mov	r1, r4
 800dac2:	f7ff ff59 	bl	800d978 <__sflush_r>
 800dac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dac8:	4605      	mov	r5, r0
 800daca:	07da      	lsls	r2, r3, #31
 800dacc:	d4e0      	bmi.n	800da90 <_fflush_r+0xc>
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	059b      	lsls	r3, r3, #22
 800dad2:	d4dd      	bmi.n	800da90 <_fflush_r+0xc>
 800dad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dad6:	f000 f908 	bl	800dcea <__retarget_lock_release_recursive>
 800dada:	e7d9      	b.n	800da90 <_fflush_r+0xc>
 800dadc:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <_fflush_r+0x70>)
 800dade:	429c      	cmp	r4, r3
 800dae0:	d101      	bne.n	800dae6 <_fflush_r+0x62>
 800dae2:	68ac      	ldr	r4, [r5, #8]
 800dae4:	e7df      	b.n	800daa6 <_fflush_r+0x22>
 800dae6:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <_fflush_r+0x74>)
 800dae8:	429c      	cmp	r4, r3
 800daea:	bf08      	it	eq
 800daec:	68ec      	ldreq	r4, [r5, #12]
 800daee:	e7da      	b.n	800daa6 <_fflush_r+0x22>
 800daf0:	0800e4bc 	.word	0x0800e4bc
 800daf4:	0800e4dc 	.word	0x0800e4dc
 800daf8:	0800e49c 	.word	0x0800e49c

0800dafc <std>:
 800dafc:	2300      	movs	r3, #0
 800dafe:	b510      	push	{r4, lr}
 800db00:	4604      	mov	r4, r0
 800db02:	e9c0 3300 	strd	r3, r3, [r0]
 800db06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db0a:	6083      	str	r3, [r0, #8]
 800db0c:	8181      	strh	r1, [r0, #12]
 800db0e:	6643      	str	r3, [r0, #100]	; 0x64
 800db10:	81c2      	strh	r2, [r0, #14]
 800db12:	6183      	str	r3, [r0, #24]
 800db14:	4619      	mov	r1, r3
 800db16:	2208      	movs	r2, #8
 800db18:	305c      	adds	r0, #92	; 0x5c
 800db1a:	f7fb fe35 	bl	8009788 <memset>
 800db1e:	4b05      	ldr	r3, [pc, #20]	; (800db34 <std+0x38>)
 800db20:	6224      	str	r4, [r4, #32]
 800db22:	6263      	str	r3, [r4, #36]	; 0x24
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <std+0x3c>)
 800db26:	62a3      	str	r3, [r4, #40]	; 0x28
 800db28:	4b04      	ldr	r3, [pc, #16]	; (800db3c <std+0x40>)
 800db2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db2c:	4b04      	ldr	r3, [pc, #16]	; (800db40 <std+0x44>)
 800db2e:	6323      	str	r3, [r4, #48]	; 0x30
 800db30:	bd10      	pop	{r4, pc}
 800db32:	bf00      	nop
 800db34:	0800de4d 	.word	0x0800de4d
 800db38:	0800de6f 	.word	0x0800de6f
 800db3c:	0800dea7 	.word	0x0800dea7
 800db40:	0800decb 	.word	0x0800decb

0800db44 <_cleanup_r>:
 800db44:	4901      	ldr	r1, [pc, #4]	; (800db4c <_cleanup_r+0x8>)
 800db46:	f000 b8af 	b.w	800dca8 <_fwalk_reent>
 800db4a:	bf00      	nop
 800db4c:	0800da85 	.word	0x0800da85

0800db50 <__sfmoreglue>:
 800db50:	b570      	push	{r4, r5, r6, lr}
 800db52:	2568      	movs	r5, #104	; 0x68
 800db54:	1e4a      	subs	r2, r1, #1
 800db56:	4355      	muls	r5, r2
 800db58:	460e      	mov	r6, r1
 800db5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db5e:	f7ff fa83 	bl	800d068 <_malloc_r>
 800db62:	4604      	mov	r4, r0
 800db64:	b140      	cbz	r0, 800db78 <__sfmoreglue+0x28>
 800db66:	2100      	movs	r1, #0
 800db68:	e9c0 1600 	strd	r1, r6, [r0]
 800db6c:	300c      	adds	r0, #12
 800db6e:	60a0      	str	r0, [r4, #8]
 800db70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db74:	f7fb fe08 	bl	8009788 <memset>
 800db78:	4620      	mov	r0, r4
 800db7a:	bd70      	pop	{r4, r5, r6, pc}

0800db7c <__sfp_lock_acquire>:
 800db7c:	4801      	ldr	r0, [pc, #4]	; (800db84 <__sfp_lock_acquire+0x8>)
 800db7e:	f000 b8b3 	b.w	800dce8 <__retarget_lock_acquire_recursive>
 800db82:	bf00      	nop
 800db84:	20001640 	.word	0x20001640

0800db88 <__sfp_lock_release>:
 800db88:	4801      	ldr	r0, [pc, #4]	; (800db90 <__sfp_lock_release+0x8>)
 800db8a:	f000 b8ae 	b.w	800dcea <__retarget_lock_release_recursive>
 800db8e:	bf00      	nop
 800db90:	20001640 	.word	0x20001640

0800db94 <__sinit_lock_acquire>:
 800db94:	4801      	ldr	r0, [pc, #4]	; (800db9c <__sinit_lock_acquire+0x8>)
 800db96:	f000 b8a7 	b.w	800dce8 <__retarget_lock_acquire_recursive>
 800db9a:	bf00      	nop
 800db9c:	2000163b 	.word	0x2000163b

0800dba0 <__sinit_lock_release>:
 800dba0:	4801      	ldr	r0, [pc, #4]	; (800dba8 <__sinit_lock_release+0x8>)
 800dba2:	f000 b8a2 	b.w	800dcea <__retarget_lock_release_recursive>
 800dba6:	bf00      	nop
 800dba8:	2000163b 	.word	0x2000163b

0800dbac <__sinit>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	4604      	mov	r4, r0
 800dbb0:	f7ff fff0 	bl	800db94 <__sinit_lock_acquire>
 800dbb4:	69a3      	ldr	r3, [r4, #24]
 800dbb6:	b11b      	cbz	r3, 800dbc0 <__sinit+0x14>
 800dbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbc:	f7ff bff0 	b.w	800dba0 <__sinit_lock_release>
 800dbc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dbc4:	6523      	str	r3, [r4, #80]	; 0x50
 800dbc6:	4b13      	ldr	r3, [pc, #76]	; (800dc14 <__sinit+0x68>)
 800dbc8:	4a13      	ldr	r2, [pc, #76]	; (800dc18 <__sinit+0x6c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	62a2      	str	r2, [r4, #40]	; 0x28
 800dbce:	42a3      	cmp	r3, r4
 800dbd0:	bf08      	it	eq
 800dbd2:	2301      	moveq	r3, #1
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	bf08      	it	eq
 800dbd8:	61a3      	streq	r3, [r4, #24]
 800dbda:	f000 f81f 	bl	800dc1c <__sfp>
 800dbde:	6060      	str	r0, [r4, #4]
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f000 f81b 	bl	800dc1c <__sfp>
 800dbe6:	60a0      	str	r0, [r4, #8]
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 f817 	bl	800dc1c <__sfp>
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2104      	movs	r1, #4
 800dbf2:	60e0      	str	r0, [r4, #12]
 800dbf4:	6860      	ldr	r0, [r4, #4]
 800dbf6:	f7ff ff81 	bl	800dafc <std>
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	2109      	movs	r1, #9
 800dbfe:	68a0      	ldr	r0, [r4, #8]
 800dc00:	f7ff ff7c 	bl	800dafc <std>
 800dc04:	2202      	movs	r2, #2
 800dc06:	2112      	movs	r1, #18
 800dc08:	68e0      	ldr	r0, [r4, #12]
 800dc0a:	f7ff ff77 	bl	800dafc <std>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	61a3      	str	r3, [r4, #24]
 800dc12:	e7d1      	b.n	800dbb8 <__sinit+0xc>
 800dc14:	0800e048 	.word	0x0800e048
 800dc18:	0800db45 	.word	0x0800db45

0800dc1c <__sfp>:
 800dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1e:	4607      	mov	r7, r0
 800dc20:	f7ff ffac 	bl	800db7c <__sfp_lock_acquire>
 800dc24:	4b1e      	ldr	r3, [pc, #120]	; (800dca0 <__sfp+0x84>)
 800dc26:	681e      	ldr	r6, [r3, #0]
 800dc28:	69b3      	ldr	r3, [r6, #24]
 800dc2a:	b913      	cbnz	r3, 800dc32 <__sfp+0x16>
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f7ff ffbd 	bl	800dbac <__sinit>
 800dc32:	3648      	adds	r6, #72	; 0x48
 800dc34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	d503      	bpl.n	800dc44 <__sfp+0x28>
 800dc3c:	6833      	ldr	r3, [r6, #0]
 800dc3e:	b30b      	cbz	r3, 800dc84 <__sfp+0x68>
 800dc40:	6836      	ldr	r6, [r6, #0]
 800dc42:	e7f7      	b.n	800dc34 <__sfp+0x18>
 800dc44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc48:	b9d5      	cbnz	r5, 800dc80 <__sfp+0x64>
 800dc4a:	4b16      	ldr	r3, [pc, #88]	; (800dca4 <__sfp+0x88>)
 800dc4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc50:	60e3      	str	r3, [r4, #12]
 800dc52:	6665      	str	r5, [r4, #100]	; 0x64
 800dc54:	f000 f847 	bl	800dce6 <__retarget_lock_init_recursive>
 800dc58:	f7ff ff96 	bl	800db88 <__sfp_lock_release>
 800dc5c:	2208      	movs	r2, #8
 800dc5e:	4629      	mov	r1, r5
 800dc60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc68:	6025      	str	r5, [r4, #0]
 800dc6a:	61a5      	str	r5, [r4, #24]
 800dc6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc70:	f7fb fd8a 	bl	8009788 <memset>
 800dc74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc80:	3468      	adds	r4, #104	; 0x68
 800dc82:	e7d9      	b.n	800dc38 <__sfp+0x1c>
 800dc84:	2104      	movs	r1, #4
 800dc86:	4638      	mov	r0, r7
 800dc88:	f7ff ff62 	bl	800db50 <__sfmoreglue>
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	6030      	str	r0, [r6, #0]
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d1d5      	bne.n	800dc40 <__sfp+0x24>
 800dc94:	f7ff ff78 	bl	800db88 <__sfp_lock_release>
 800dc98:	230c      	movs	r3, #12
 800dc9a:	603b      	str	r3, [r7, #0]
 800dc9c:	e7ee      	b.n	800dc7c <__sfp+0x60>
 800dc9e:	bf00      	nop
 800dca0:	0800e048 	.word	0x0800e048
 800dca4:	ffff0001 	.word	0xffff0001

0800dca8 <_fwalk_reent>:
 800dca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcac:	4606      	mov	r6, r0
 800dcae:	4688      	mov	r8, r1
 800dcb0:	2700      	movs	r7, #0
 800dcb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dcb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcba:	f1b9 0901 	subs.w	r9, r9, #1
 800dcbe:	d505      	bpl.n	800dccc <_fwalk_reent+0x24>
 800dcc0:	6824      	ldr	r4, [r4, #0]
 800dcc2:	2c00      	cmp	r4, #0
 800dcc4:	d1f7      	bne.n	800dcb6 <_fwalk_reent+0xe>
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dccc:	89ab      	ldrh	r3, [r5, #12]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d907      	bls.n	800dce2 <_fwalk_reent+0x3a>
 800dcd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	d003      	beq.n	800dce2 <_fwalk_reent+0x3a>
 800dcda:	4629      	mov	r1, r5
 800dcdc:	4630      	mov	r0, r6
 800dcde:	47c0      	blx	r8
 800dce0:	4307      	orrs	r7, r0
 800dce2:	3568      	adds	r5, #104	; 0x68
 800dce4:	e7e9      	b.n	800dcba <_fwalk_reent+0x12>

0800dce6 <__retarget_lock_init_recursive>:
 800dce6:	4770      	bx	lr

0800dce8 <__retarget_lock_acquire_recursive>:
 800dce8:	4770      	bx	lr

0800dcea <__retarget_lock_release_recursive>:
 800dcea:	4770      	bx	lr

0800dcec <__swhatbuf_r>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	460e      	mov	r6, r1
 800dcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf4:	4614      	mov	r4, r2
 800dcf6:	2900      	cmp	r1, #0
 800dcf8:	461d      	mov	r5, r3
 800dcfa:	b096      	sub	sp, #88	; 0x58
 800dcfc:	da07      	bge.n	800dd0e <__swhatbuf_r+0x22>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	89b3      	ldrh	r3, [r6, #12]
 800dd04:	061a      	lsls	r2, r3, #24
 800dd06:	d410      	bmi.n	800dd2a <__swhatbuf_r+0x3e>
 800dd08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd0c:	e00e      	b.n	800dd2c <__swhatbuf_r+0x40>
 800dd0e:	466a      	mov	r2, sp
 800dd10:	f000 f902 	bl	800df18 <_fstat_r>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	dbf2      	blt.n	800dcfe <__swhatbuf_r+0x12>
 800dd18:	9a01      	ldr	r2, [sp, #4]
 800dd1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd22:	425a      	negs	r2, r3
 800dd24:	415a      	adcs	r2, r3
 800dd26:	602a      	str	r2, [r5, #0]
 800dd28:	e7ee      	b.n	800dd08 <__swhatbuf_r+0x1c>
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	6023      	str	r3, [r4, #0]
 800dd30:	b016      	add	sp, #88	; 0x58
 800dd32:	bd70      	pop	{r4, r5, r6, pc}

0800dd34 <__smakebuf_r>:
 800dd34:	898b      	ldrh	r3, [r1, #12]
 800dd36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd38:	079d      	lsls	r5, r3, #30
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	d507      	bpl.n	800dd50 <__smakebuf_r+0x1c>
 800dd40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	2301      	movs	r3, #1
 800dd4a:	6163      	str	r3, [r4, #20]
 800dd4c:	b002      	add	sp, #8
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	466a      	mov	r2, sp
 800dd52:	ab01      	add	r3, sp, #4
 800dd54:	f7ff ffca 	bl	800dcec <__swhatbuf_r>
 800dd58:	9900      	ldr	r1, [sp, #0]
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7ff f983 	bl	800d068 <_malloc_r>
 800dd62:	b948      	cbnz	r0, 800dd78 <__smakebuf_r+0x44>
 800dd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd68:	059a      	lsls	r2, r3, #22
 800dd6a:	d4ef      	bmi.n	800dd4c <__smakebuf_r+0x18>
 800dd6c:	f023 0303 	bic.w	r3, r3, #3
 800dd70:	f043 0302 	orr.w	r3, r3, #2
 800dd74:	81a3      	strh	r3, [r4, #12]
 800dd76:	e7e3      	b.n	800dd40 <__smakebuf_r+0xc>
 800dd78:	4b0d      	ldr	r3, [pc, #52]	; (800ddb0 <__smakebuf_r+0x7c>)
 800dd7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd7c:	89a3      	ldrh	r3, [r4, #12]
 800dd7e:	6020      	str	r0, [r4, #0]
 800dd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd84:	81a3      	strh	r3, [r4, #12]
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	6120      	str	r0, [r4, #16]
 800dd8a:	6163      	str	r3, [r4, #20]
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	b15b      	cbz	r3, 800dda8 <__smakebuf_r+0x74>
 800dd90:	4630      	mov	r0, r6
 800dd92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd96:	f000 f8d1 	bl	800df3c <_isatty_r>
 800dd9a:	b128      	cbz	r0, 800dda8 <__smakebuf_r+0x74>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	f023 0303 	bic.w	r3, r3, #3
 800dda2:	f043 0301 	orr.w	r3, r3, #1
 800dda6:	81a3      	strh	r3, [r4, #12]
 800dda8:	89a0      	ldrh	r0, [r4, #12]
 800ddaa:	4305      	orrs	r5, r0
 800ddac:	81a5      	strh	r5, [r4, #12]
 800ddae:	e7cd      	b.n	800dd4c <__smakebuf_r+0x18>
 800ddb0:	0800db45 	.word	0x0800db45

0800ddb4 <_malloc_usable_size_r>:
 800ddb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb8:	1f18      	subs	r0, r3, #4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfbc      	itt	lt
 800ddbe:	580b      	ldrlt	r3, [r1, r0]
 800ddc0:	18c0      	addlt	r0, r0, r3
 800ddc2:	4770      	bx	lr

0800ddc4 <_raise_r>:
 800ddc4:	291f      	cmp	r1, #31
 800ddc6:	b538      	push	{r3, r4, r5, lr}
 800ddc8:	4604      	mov	r4, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	d904      	bls.n	800ddd8 <_raise_r+0x14>
 800ddce:	2316      	movs	r3, #22
 800ddd0:	6003      	str	r3, [r0, #0]
 800ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd6:	bd38      	pop	{r3, r4, r5, pc}
 800ddd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ddda:	b112      	cbz	r2, 800dde2 <_raise_r+0x1e>
 800dddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dde0:	b94b      	cbnz	r3, 800ddf6 <_raise_r+0x32>
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 f830 	bl	800de48 <_getpid_r>
 800dde8:	462a      	mov	r2, r5
 800ddea:	4601      	mov	r1, r0
 800ddec:	4620      	mov	r0, r4
 800ddee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddf2:	f000 b817 	b.w	800de24 <_kill_r>
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d00a      	beq.n	800de10 <_raise_r+0x4c>
 800ddfa:	1c59      	adds	r1, r3, #1
 800ddfc:	d103      	bne.n	800de06 <_raise_r+0x42>
 800ddfe:	2316      	movs	r3, #22
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	2001      	movs	r0, #1
 800de04:	e7e7      	b.n	800ddd6 <_raise_r+0x12>
 800de06:	2400      	movs	r4, #0
 800de08:	4628      	mov	r0, r5
 800de0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de0e:	4798      	blx	r3
 800de10:	2000      	movs	r0, #0
 800de12:	e7e0      	b.n	800ddd6 <_raise_r+0x12>

0800de14 <raise>:
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <raise+0xc>)
 800de16:	4601      	mov	r1, r0
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	f7ff bfd3 	b.w	800ddc4 <_raise_r>
 800de1e:	bf00      	nop
 800de20:	2000017c 	.word	0x2000017c

0800de24 <_kill_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	2300      	movs	r3, #0
 800de28:	4d06      	ldr	r5, [pc, #24]	; (800de44 <_kill_r+0x20>)
 800de2a:	4604      	mov	r4, r0
 800de2c:	4608      	mov	r0, r1
 800de2e:	4611      	mov	r1, r2
 800de30:	602b      	str	r3, [r5, #0]
 800de32:	f7f3 fa76 	bl	8001322 <_kill>
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	d102      	bne.n	800de40 <_kill_r+0x1c>
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	b103      	cbz	r3, 800de40 <_kill_r+0x1c>
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	bd38      	pop	{r3, r4, r5, pc}
 800de42:	bf00      	nop
 800de44:	20001634 	.word	0x20001634

0800de48 <_getpid_r>:
 800de48:	f7f3 ba64 	b.w	8001314 <_getpid>

0800de4c <__sread>:
 800de4c:	b510      	push	{r4, lr}
 800de4e:	460c      	mov	r4, r1
 800de50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de54:	f000 f894 	bl	800df80 <_read_r>
 800de58:	2800      	cmp	r0, #0
 800de5a:	bfab      	itete	ge
 800de5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de5e:	89a3      	ldrhlt	r3, [r4, #12]
 800de60:	181b      	addge	r3, r3, r0
 800de62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de66:	bfac      	ite	ge
 800de68:	6563      	strge	r3, [r4, #84]	; 0x54
 800de6a:	81a3      	strhlt	r3, [r4, #12]
 800de6c:	bd10      	pop	{r4, pc}

0800de6e <__swrite>:
 800de6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de72:	461f      	mov	r7, r3
 800de74:	898b      	ldrh	r3, [r1, #12]
 800de76:	4605      	mov	r5, r0
 800de78:	05db      	lsls	r3, r3, #23
 800de7a:	460c      	mov	r4, r1
 800de7c:	4616      	mov	r6, r2
 800de7e:	d505      	bpl.n	800de8c <__swrite+0x1e>
 800de80:	2302      	movs	r3, #2
 800de82:	2200      	movs	r2, #0
 800de84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de88:	f000 f868 	bl	800df5c <_lseek_r>
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	4632      	mov	r2, r6
 800de90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	4628      	mov	r0, r5
 800de98:	463b      	mov	r3, r7
 800de9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea2:	f000 b817 	b.w	800ded4 <_write_r>

0800dea6 <__sseek>:
 800dea6:	b510      	push	{r4, lr}
 800dea8:	460c      	mov	r4, r1
 800deaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deae:	f000 f855 	bl	800df5c <_lseek_r>
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	bf15      	itete	ne
 800deb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800deba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800debe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dec2:	81a3      	strheq	r3, [r4, #12]
 800dec4:	bf18      	it	ne
 800dec6:	81a3      	strhne	r3, [r4, #12]
 800dec8:	bd10      	pop	{r4, pc}

0800deca <__sclose>:
 800deca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dece:	f000 b813 	b.w	800def8 <_close_r>
	...

0800ded4 <_write_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	4604      	mov	r4, r0
 800ded8:	4608      	mov	r0, r1
 800deda:	4611      	mov	r1, r2
 800dedc:	2200      	movs	r2, #0
 800dede:	4d05      	ldr	r5, [pc, #20]	; (800def4 <_write_r+0x20>)
 800dee0:	602a      	str	r2, [r5, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	f7f3 fa54 	bl	8001390 <_write>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_write_r+0x1e>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_write_r+0x1e>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20001634 	.word	0x20001634

0800def8 <_close_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	2300      	movs	r3, #0
 800defc:	4d05      	ldr	r5, [pc, #20]	; (800df14 <_close_r+0x1c>)
 800defe:	4604      	mov	r4, r0
 800df00:	4608      	mov	r0, r1
 800df02:	602b      	str	r3, [r5, #0]
 800df04:	f7f3 fa60 	bl	80013c8 <_close>
 800df08:	1c43      	adds	r3, r0, #1
 800df0a:	d102      	bne.n	800df12 <_close_r+0x1a>
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	b103      	cbz	r3, 800df12 <_close_r+0x1a>
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	20001634 	.word	0x20001634

0800df18 <_fstat_r>:
 800df18:	b538      	push	{r3, r4, r5, lr}
 800df1a:	2300      	movs	r3, #0
 800df1c:	4d06      	ldr	r5, [pc, #24]	; (800df38 <_fstat_r+0x20>)
 800df1e:	4604      	mov	r4, r0
 800df20:	4608      	mov	r0, r1
 800df22:	4611      	mov	r1, r2
 800df24:	602b      	str	r3, [r5, #0]
 800df26:	f7f3 fa5a 	bl	80013de <_fstat>
 800df2a:	1c43      	adds	r3, r0, #1
 800df2c:	d102      	bne.n	800df34 <_fstat_r+0x1c>
 800df2e:	682b      	ldr	r3, [r5, #0]
 800df30:	b103      	cbz	r3, 800df34 <_fstat_r+0x1c>
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	bd38      	pop	{r3, r4, r5, pc}
 800df36:	bf00      	nop
 800df38:	20001634 	.word	0x20001634

0800df3c <_isatty_r>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	2300      	movs	r3, #0
 800df40:	4d05      	ldr	r5, [pc, #20]	; (800df58 <_isatty_r+0x1c>)
 800df42:	4604      	mov	r4, r0
 800df44:	4608      	mov	r0, r1
 800df46:	602b      	str	r3, [r5, #0]
 800df48:	f7f3 fa58 	bl	80013fc <_isatty>
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	d102      	bne.n	800df56 <_isatty_r+0x1a>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	b103      	cbz	r3, 800df56 <_isatty_r+0x1a>
 800df54:	6023      	str	r3, [r4, #0]
 800df56:	bd38      	pop	{r3, r4, r5, pc}
 800df58:	20001634 	.word	0x20001634

0800df5c <_lseek_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	2200      	movs	r2, #0
 800df66:	4d05      	ldr	r5, [pc, #20]	; (800df7c <_lseek_r+0x20>)
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f3 fa50 	bl	8001410 <_lseek>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_lseek_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_lseek_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	20001634 	.word	0x20001634

0800df80 <_read_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	4611      	mov	r1, r2
 800df88:	2200      	movs	r2, #0
 800df8a:	4d05      	ldr	r5, [pc, #20]	; (800dfa0 <_read_r+0x20>)
 800df8c:	602a      	str	r2, [r5, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f7f3 f9e1 	bl	8001356 <_read>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_read_r+0x1e>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_read_r+0x1e>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	20001634 	.word	0x20001634

0800dfa4 <_init>:
 800dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa6:	bf00      	nop
 800dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfaa:	bc08      	pop	{r3}
 800dfac:	469e      	mov	lr, r3
 800dfae:	4770      	bx	lr

0800dfb0 <_fini>:
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb2:	bf00      	nop
 800dfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb6:	bc08      	pop	{r3}
 800dfb8:	469e      	mov	lr, r3
 800dfba:	4770      	bx	lr
