
4_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08007a78  08007a78  00017a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f84  08007f84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007f84  08007f84  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f84  08007f84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001e0  0800816c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800816c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009619  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7b  00000000  00000000  00029822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018635  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000984b  00000000  00000000  00044c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a47  00000000  00000000  0004e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6eaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  000d6f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a5c 	.word	0x08007a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007a5c 	.word	0x08007a5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fbb5 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f837 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f985 	bl	8000ef4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bea:	f000 f93b 	bl	8000e64 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000bee:	f000 f963 	bl	8000eb8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf2:	f000 f88b 	bl	8000d0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, value, 6);
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	4911      	ldr	r1, [pc, #68]	; (8000c40 <main+0x68>)
 8000bfa:	4812      	ldr	r0, [pc, #72]	; (8000c44 <main+0x6c>)
 8000bfc:	f000 fd04 	bl	8001608 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

    /* USER CODE END WHILE */
		sprintf(msg, "Sensor1=%f,Sensor2=%f,Sensor3=%f,Sensor4=%f", value[0],value[1],value[2],value[3]);
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <main+0x68>)
 8000c02:	6819      	ldr	r1, [r3, #0]
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <main+0x68>)
 8000c06:	6858      	ldr	r0, [r3, #4]
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <main+0x68>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <main+0x68>)
 8000c0e:	68d2      	ldr	r2, [r2, #12]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4603      	mov	r3, r0
 8000c16:	460a      	mov	r2, r1
 8000c18:	490b      	ldr	r1, [pc, #44]	; (8000c48 <main+0x70>)
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <main+0x74>)
 8000c1c:	f003 f98e 	bl	8003f3c <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), 100);
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <main+0x74>)
 8000c22:	f7ff fa95 	bl	8000150 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <main+0x74>)
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <main+0x78>)
 8000c30:	f002 f971 	bl	8002f16 <HAL_UART_Transmit>

		HAL_Delay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f000 fbea 	bl	8001410 <HAL_Delay>
		sprintf(msg, "Sensor1=%f,Sensor2=%f,Sensor3=%f,Sensor4=%f", value[0],value[1],value[2],value[3]);
 8000c3c:	e7e0      	b.n	8000c00 <main+0x28>
 8000c3e:	bf00      	nop
 8000c40:	200001fc 	.word	0x200001fc
 8000c44:	2000029c 	.word	0x2000029c
 8000c48:	08007a78 	.word	0x08007a78
 8000c4c:	20000238 	.word	0x20000238
 8000c50:	200002cc 	.word	0x200002cc

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 faec 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fc16 	bl	80024dc <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb6:	f000 f93f 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fe80 	bl	80029dc <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ce2:	f000 f929 	bl	8000f38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f80c 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cfe:	f000 f91b 	bl	8000f38 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	; 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <MX_ADC1_Init+0x108>)
 8000d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d22:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d38:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d46:	2206      	movs	r2, #6
 8000d48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4a:	4831      	ldr	r0, [pc, #196]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d4c:	f000 fb84 	bl	8001458 <HAL_ADC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d56:	f000 f8ef 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d6c:	f000 fd3c 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 f8df 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000d88:	f000 fd2e 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d92:	f000 f8d1 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d96:	2303      	movs	r3, #3
 8000d98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000da4:	f000 fd20 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000dae:	f000 f8c3 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000db2:	2304      	movs	r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000dc0:	f000 fd12 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000dca:	f000 f8b5 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000ddc:	f000 fd04 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000de6:	f000 f8a7 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dea:	2306      	movs	r3, #6
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000dee:	2306      	movs	r3, #6
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0x104>)
 8000df8:	f000 fcf6 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000e02:	f000 f899 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000029c 	.word	0x2000029c
 8000e14:	40012400 	.word	0x40012400

08000e18 <HAL_ADC_ConvCpltCallback>:
  * @retval None
  */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if(hadc1->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x40>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d110      	bne.n	8000e4c <HAL_ADC_ConvCpltCallback+0x34>
	{
		for(uint8_t a=0; a<5;a++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e00a      	b.n	8000e46 <HAL_ADC_ConvCpltCallback+0x2e>
		{
		volt[a]=value[a];
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	4909      	ldr	r1, [pc, #36]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x44>)
 8000e36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3a:	4909      	ldr	r1, [pc, #36]	; (8000e60 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t a=0; a<5;a++)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	3301      	adds	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d9f1      	bls.n	8000e30 <HAL_ADC_ConvCpltCallback+0x18>
		}
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	200001fc 	.word	0x200001fc
 8000e60:	20000214 	.word	0x20000214

08000e64 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART1_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	f001 ffee 	bl	8002e7c <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f847 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002cc 	.word	0x200002cc
 8000eb4:	40013800 	.word	0x40013800

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_DMA_Init+0x38>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200b      	movs	r0, #11
 8000edc:	f000 ff55 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f000 ff6e 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <MX_GPIO_Init+0x40>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a28      	ldr	r2, [pc, #160]	; (8001064 <HAL_ADC_MspInit+0xbc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d149      	bne.n	800105c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_ADC_MspInit+0xc0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ff8:	237e      	movs	r3, #126	; 0x7e
 8000ffa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	4819      	ldr	r0, [pc, #100]	; (800106c <HAL_ADC_MspInit+0xc4>)
 8001008:	f001 f8e4 	bl	80021d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_ADC_MspInit+0xcc>)
 8001010:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 800102e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001032:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001036:	2220      	movs	r2, #32
 8001038:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001042:	f000 fed9 	bl	8001df8 <HAL_DMA_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800104c:	f7ff ff74 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001054:	621a      	str	r2, [r3, #32]
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_ADC_MspInit+0xc8>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40012400 	.word	0x40012400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800
 8001070:	20000310 	.word	0x20000310
 8001074:	40020008 	.word	0x40020008

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_UART_MspInit+0x8c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d131      	bne.n	80010fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_UART_MspInit+0x90>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_UART_MspInit+0x90>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_UART_MspInit+0x94>)
 80010de:	f001 f879 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_UART_MspInit+0x94>)
 80010f8:	f001 f86c 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013800 	.word	0x40013800
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001156:	f000 f93f 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA1_Channel1_IRQHandler+0x10>)
 8001166:	f000 ff01 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000310 	.word	0x20000310

08001174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <_kill>:

int _kill(int pid, int sig)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800118c:	f002 f82e 	bl	80031ec <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	2216      	movs	r2, #22
 8001194:	601a      	str	r2, [r3, #0]
	return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_exit>:

void _exit (int status)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011aa:	f04f 31ff 	mov.w	r1, #4294967295
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffe7 	bl	8001182 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011b4:	e7fe      	b.n	80011b4 <_exit+0x12>

080011b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e00a      	b.n	80011de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c8:	f3af 8000 	nop.w
 80011cc:	4601      	mov	r1, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	b2ca      	uxtb	r2, r1
 80011d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dbf0      	blt.n	80011c8 <_read+0x12>
	}

return len;
 80011e6:	687b      	ldr	r3, [r7, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e009      	b.n	8001216 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	60ba      	str	r2, [r7, #8]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf1      	blt.n	8001202 <_write+0x12>
	}
	return len;
 800121e:	687b      	ldr	r3, [r7, #4]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_close>:

int _close(int file)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124e:	605a      	str	r2, [r3, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <_isatty>:

int _isatty(int file)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f001 ff98 	bl	80031ec <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20005000 	.word	0x20005000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	2000022c 	.word	0x2000022c
 80012f0:	20000368 	.word	0x20000368

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001326:	f7ff ffe5 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f001 ff65 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fc53 	bl	8000bd8 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800133c:	08007f8c 	.word	0x08007f8c
  ldr r2, =_sbss
 8001340:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001344:	20000368 	.word	0x20000368

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 fd09 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fdec 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fd21 	bl	8001dde <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 fce9 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x1c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x20>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_IncTick+0x20>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000354 	.word	0x20000354

080013fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_GetTick+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000354 	.word	0x20000354

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fff0 	bl	80013fc <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffe0 	bl	80013fc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0be      	b.n	80015f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fd86 	bl	8000fa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 faf5 	bl	8001a8c <ADC_ConversionStop_Disable>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 8099 	bne.w	80015e6 <HAL_ADC_Init+0x18e>
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 8095 	bne.w	80015e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014c4:	f023 0302 	bic.w	r3, r3, #2
 80014c8:	f043 0202 	orr.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f0:	d003      	beq.n	80014fa <HAL_ADC_Init+0xa2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d102      	bne.n	8001500 <HAL_ADC_Init+0xa8>
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0xaa>
 8001500:	2300      	movs	r3, #0
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7d1b      	ldrb	r3, [r3, #20]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d119      	bne.n	8001544 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	3b01      	subs	r3, #1
 800151e:	035a      	lsls	r2, r3, #13
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e00b      	b.n	8001544 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f043 0220 	orr.w	r2, r3, #32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_ADC_Init+0x1a8>)
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	430b      	orrs	r3, r1
 800156a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001574:	d003      	beq.n	800157e <HAL_ADC_Init+0x126>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d104      	bne.n	8001588 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	3b01      	subs	r3, #1
 8001584:	051b      	lsls	r3, r3, #20
 8001586:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	430a      	orrs	r2, r1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_ADC_Init+0x1ac>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c2:	e018      	b.n	80015f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f023 0312 	bic.w	r3, r3, #18
 80015cc:	f043 0210 	orr.w	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e4:	e007      	b.n	80015f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f043 0210 	orr.w	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	ffe1f7fd 	.word	0xffe1f7fd
 8001604:	ff1f0efe 	.word	0xff1f0efe

08001608 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a64      	ldr	r2, [pc, #400]	; (80017b0 <HAL_ADC_Start_DMA+0x1a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_ADC_Start_DMA+0x24>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <HAL_ADC_Start_DMA+0x1ac>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d106      	bne.n	800163a <HAL_ADC_Start_DMA+0x32>
 800162c:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <HAL_ADC_Start_DMA+0x1a8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 80b3 	bne.w	80017a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_Start_DMA+0x40>
 8001644:	2302      	movs	r3, #2
 8001646:	e0ae      	b.n	80017a6 <HAL_ADC_Start_DMA+0x19e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f9c1 	bl	80019d8 <ADC_Enable>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f040 809a 	bne.w	8001796 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <HAL_ADC_Start_DMA+0x1ac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d105      	bne.n	800168c <HAL_ADC_Start_DMA+0x84>
 8001680:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <HAL_ADC_Start_DMA+0x1a8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d026      	beq.n	80016f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b6:	e01d      	b.n	80016f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a39      	ldr	r2, [pc, #228]	; (80017b0 <HAL_ADC_Start_DMA+0x1a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_Start_DMA+0xd0>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a38      	ldr	r2, [pc, #224]	; (80017b4 <HAL_ADC_Start_DMA+0x1ac>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d10d      	bne.n	80016f4 <HAL_ADC_Start_DMA+0xec>
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_ADC_Start_DMA+0x1a8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f023 0206 	bic.w	r2, r3, #6
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
 800170c:	e002      	b.n	8001714 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001722:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <HAL_ADC_Start_DMA+0x1b4>)
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001732:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f06f 0202 	mvn.w	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a18      	ldr	r0, [r3, #32]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	334c      	adds	r3, #76	; 0x4c
 8001758:	4619      	mov	r1, r3
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f000 fba5 	bl	8001eac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800176c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001770:	d108      	bne.n	8001784 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001780:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001782:	e00f      	b.n	80017a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001792:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001794:	e006      	b.n	80017a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800179e:	e001      	b.n	80017a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40012400 	.word	0x40012400
 80017b4:	40012800 	.word	0x40012800
 80017b8:	08001b0f 	.word	0x08001b0f
 80017bc:	08001b8b 	.word	0x08001b8b
 80017c0:	08001ba7 	.word	0x08001ba7

080017c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x20>
 8001804:	2302      	movs	r3, #2
 8001806:	e0dc      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1da>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b06      	cmp	r3, #6
 8001816:	d81c      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b05      	subs	r3, #5
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b05      	subs	r3, #5
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	e03c      	b.n	80018cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d81c      	bhi.n	8001894 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	3b23      	subs	r3, #35	; 0x23
 800186c:	221f      	movs	r2, #31
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	4019      	ands	r1, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e01b      	b.n	80018cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	; 0x41
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4019      	ands	r1, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b41      	subs	r3, #65	; 0x41
 80018c0:	fa00 f203 	lsl.w	r2, r0, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	d91c      	bls.n	800190e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d9      	ldr	r1, [r3, #12]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	3b1e      	subs	r3, #30
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	3b1e      	subs	r3, #30
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e019      	b.n	8001942 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	2207      	movs	r2, #7
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	fa00 f203 	lsl.w	r2, r0, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d003      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800194e:	2b11      	cmp	r3, #17
 8001950:	d132      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d125      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d126      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001978:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d11a      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0c9a      	lsrs	r2, r3, #18
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_ConfigChannel+0x1b2>
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40012400 	.word	0x40012400
 80019d0:	20000000 	.word	0x20000000
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d040      	beq.n	8001a78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <ADC_Enable+0xac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <ADC_Enable+0xb0>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a14:	e002      	b.n	8001a1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a22:	f7ff fceb 	bl	80013fc <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	e01f      	b.n	8001a6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a2a:	f7ff fce7 	bl	80013fc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d918      	bls.n	8001a6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d011      	beq.n	8001a6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e007      	b.n	8001a7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d1d8      	bne.n	8001a2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12e      	bne.n	8001b04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ab6:	f7ff fca1 	bl	80013fc <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001abc:	e01b      	b.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001abe:	f7ff fc9d 	bl	80013fc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d914      	bls.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f043 0210 	orr.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e007      	b.n	8001b06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d0dc      	beq.n	8001abe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d127      	bne.n	8001b78 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b42:	d115      	bne.n	8001b70 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff f951 	bl	8000e18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b76:	e004      	b.n	8001b82 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fe13 	bl	80017c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fe02 	bl	80017d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4906      	ldr	r1, [pc, #24]	; (8001c74 <__NVIC_EnableIRQ+0x34>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff90 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff2d 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff42 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff90 	bl	8001ccc <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5f 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff35 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e043      	b.n	8001e96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_DMA_Init+0xa8>)
 8001e16:	4413      	add	r3, r2
 8001e18:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_DMA_Init+0xac>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	009a      	lsls	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_DMA_Init+0xb0>)
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	bffdfff8 	.word	0xbffdfff8
 8001ea4:	cccccccd 	.word	0xcccccccd
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_DMA_Start_IT+0x20>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e04a      	b.n	8001f62 <HAL_DMA_Start_IT+0xb6>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d13a      	bne.n	8001f54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f938 	bl	8002178 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 020e 	orr.w	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e00f      	b.n	8001f42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0204 	bic.w	r2, r2, #4
 8001f30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 020a 	orr.w	r2, r2, #10
 8001f40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e005      	b.n	8001f60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2204      	movs	r2, #4
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d04f      	beq.n	8002034 <HAL_DMA_IRQHandler+0xc8>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d04a      	beq.n	8002034 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_DMA_IRQHandler+0x1f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d029      	beq.n	800201a <HAL_DMA_IRQHandler+0xae>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_DMA_IRQHandler+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_IRQHandler+0xaa>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_DMA_IRQHandler+0x1f8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01a      	beq.n	8002010 <HAL_DMA_IRQHandler+0xa4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a62      	ldr	r2, [pc, #392]	; (8002168 <HAL_DMA_IRQHandler+0x1fc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d012      	beq.n	800200a <HAL_DMA_IRQHandler+0x9e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a60      	ldr	r2, [pc, #384]	; (800216c <HAL_DMA_IRQHandler+0x200>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x98>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	; (8002170 <HAL_DMA_IRQHandler+0x204>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x92>
 8001ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffc:	e00e      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 8001ffe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002002:	e00b      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 8002004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002008:	e008      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 800200a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800200e:	e005      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 8002010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002014:	e002      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	e000      	b.n	800201c <HAL_DMA_IRQHandler+0xb0>
 800201a:	2304      	movs	r3, #4
 800201c:	4a55      	ldr	r2, [pc, #340]	; (8002174 <HAL_DMA_IRQHandler+0x208>)
 800201e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8094 	beq.w	8002152 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002032:	e08e      	b.n	8002152 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2202      	movs	r2, #2
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d056      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x186>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d051      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020a 	bic.w	r2, r2, #10
 800206a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <HAL_DMA_IRQHandler+0x1f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d029      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x166>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a37      	ldr	r2, [pc, #220]	; (8002160 <HAL_DMA_IRQHandler+0x1f4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <HAL_DMA_IRQHandler+0x162>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a35      	ldr	r2, [pc, #212]	; (8002164 <HAL_DMA_IRQHandler+0x1f8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x15c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a34      	ldr	r2, [pc, #208]	; (8002168 <HAL_DMA_IRQHandler+0x1fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x156>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_DMA_IRQHandler+0x200>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00a      	beq.n	80020bc <HAL_DMA_IRQHandler+0x150>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_DMA_IRQHandler+0x204>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d102      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x14a>
 80020b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020b4:	e00e      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ba:	e00b      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c0:	e008      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c6:	e005      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020cc:	e002      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020ce:	2320      	movs	r3, #32
 80020d0:	e000      	b.n	80020d4 <HAL_DMA_IRQHandler+0x168>
 80020d2:	2302      	movs	r3, #2
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_DMA_IRQHandler+0x208>)
 80020d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d034      	beq.n	8002152 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020f0:	e02f      	b.n	8002152 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2208      	movs	r2, #8
 80020f8:	409a      	lsls	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d028      	beq.n	8002154 <HAL_DMA_IRQHandler+0x1e8>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 020e 	bic.w	r2, r2, #14
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
    }
  }
  return;
 8002152:	bf00      	nop
 8002154:	bf00      	nop
}
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40020008 	.word	0x40020008
 8002160:	4002001c 	.word	0x4002001c
 8002164:	40020030 	.word	0x40020030
 8002168:	40020044 	.word	0x40020044
 800216c:	40020058 	.word	0x40020058
 8002170:	4002006c 	.word	0x4002006c
 8002174:	40020000 	.word	0x40020000

08002178 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d108      	bne.n	80021b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021b6:	e007      	b.n	80021c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b08b      	sub	sp, #44	; 0x2c
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e6:	e169      	b.n	80024bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021e8:	2201      	movs	r2, #1
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8158 	bne.w	80024b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a9a      	ldr	r2, [pc, #616]	; (8002474 <HAL_GPIO_Init+0x2a0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d05e      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002210:	4a98      	ldr	r2, [pc, #608]	; (8002474 <HAL_GPIO_Init+0x2a0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d875      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002216:	4a98      	ldr	r2, [pc, #608]	; (8002478 <HAL_GPIO_Init+0x2a4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d058      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 800221c:	4a96      	ldr	r2, [pc, #600]	; (8002478 <HAL_GPIO_Init+0x2a4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d86f      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002222:	4a96      	ldr	r2, [pc, #600]	; (800247c <HAL_GPIO_Init+0x2a8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d052      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002228:	4a94      	ldr	r2, [pc, #592]	; (800247c <HAL_GPIO_Init+0x2a8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d869      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800222e:	4a94      	ldr	r2, [pc, #592]	; (8002480 <HAL_GPIO_Init+0x2ac>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d04c      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002234:	4a92      	ldr	r2, [pc, #584]	; (8002480 <HAL_GPIO_Init+0x2ac>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d863      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800223a:	4a92      	ldr	r2, [pc, #584]	; (8002484 <HAL_GPIO_Init+0x2b0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d046      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002240:	4a90      	ldr	r2, [pc, #576]	; (8002484 <HAL_GPIO_Init+0x2b0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d85d      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002246:	2b12      	cmp	r3, #18
 8002248:	d82a      	bhi.n	80022a0 <HAL_GPIO_Init+0xcc>
 800224a:	2b12      	cmp	r3, #18
 800224c:	d859      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <HAL_GPIO_Init+0x80>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	080022cf 	.word	0x080022cf
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022bb 	.word	0x080022bb
 8002260:	080022fd 	.word	0x080022fd
 8002264:	08002303 	.word	0x08002303
 8002268:	08002303 	.word	0x08002303
 800226c:	08002303 	.word	0x08002303
 8002270:	08002303 	.word	0x08002303
 8002274:	08002303 	.word	0x08002303
 8002278:	08002303 	.word	0x08002303
 800227c:	08002303 	.word	0x08002303
 8002280:	08002303 	.word	0x08002303
 8002284:	08002303 	.word	0x08002303
 8002288:	08002303 	.word	0x08002303
 800228c:	08002303 	.word	0x08002303
 8002290:	08002303 	.word	0x08002303
 8002294:	08002303 	.word	0x08002303
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022c5 	.word	0x080022c5
 80022a0:	4a79      	ldr	r2, [pc, #484]	; (8002488 <HAL_GPIO_Init+0x2b4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022a6:	e02c      	b.n	8002302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e029      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	3304      	adds	r3, #4
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e024      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	3308      	adds	r3, #8
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e01f      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	330c      	adds	r3, #12
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e01a      	b.n	8002304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022d6:	2304      	movs	r3, #4
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e013      	b.n	8002304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	611a      	str	r2, [r3, #16]
          break;
 80022ee:	e009      	b.n	8002304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	615a      	str	r2, [r3, #20]
          break;
 80022fa:	e003      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x130>
          break;
 8002302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d801      	bhi.n	800230e <HAL_GPIO_Init+0x13a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_Init+0x13e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2bff      	cmp	r3, #255	; 0xff
 8002318:	d802      	bhi.n	8002320 <HAL_GPIO_Init+0x14c>
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x152>
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3b08      	subs	r3, #8
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	210f      	movs	r1, #15
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	6a39      	ldr	r1, [r7, #32]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	431a      	orrs	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80b1 	beq.w	80024b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_GPIO_Init+0x2b8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a40      	ldr	r2, [pc, #256]	; (8002494 <HAL_GPIO_Init+0x2c0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_GPIO_Init+0x1ec>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3f      	ldr	r2, [pc, #252]	; (8002498 <HAL_GPIO_Init+0x2c4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <HAL_GPIO_Init+0x1e8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3e      	ldr	r2, [pc, #248]	; (800249c <HAL_GPIO_Init+0x2c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_GPIO_Init+0x1e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3d      	ldr	r2, [pc, #244]	; (80024a0 <HAL_GPIO_Init+0x2cc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_GPIO_Init+0x1e0>
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e004      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023c0:	2300      	movs	r3, #0
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	f002 0203 	and.w	r2, r2, #3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4093      	lsls	r3, r2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023d2:	492f      	ldr	r1, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	492c      	ldr	r1, [pc, #176]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	4928      	ldr	r1, [pc, #160]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4922      	ldr	r1, [pc, #136]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	491e      	ldr	r1, [pc, #120]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	4918      	ldr	r1, [pc, #96]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	4914      	ldr	r1, [pc, #80]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002454:	4013      	ands	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d021      	beq.n	80024a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
 8002470:	e021      	b.n	80024b6 <HAL_GPIO_Init+0x2e2>
 8002472:	bf00      	nop
 8002474:	10320000 	.word	0x10320000
 8002478:	10310000 	.word	0x10310000
 800247c:	10220000 	.word	0x10220000
 8002480:	10210000 	.word	0x10210000
 8002484:	10120000 	.word	0x10120000
 8002488:	10110000 	.word	0x10110000
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	40010800 	.word	0x40010800
 8002498:	40010c00 	.word	0x40010c00
 800249c:	40011000 	.word	0x40011000
 80024a0:	40011400 	.word	0x40011400
 80024a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_GPIO_Init+0x304>)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <HAL_GPIO_Init+0x304>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	3301      	adds	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f47f ae8e 	bne.w	80021e8 <HAL_GPIO_Init+0x14>
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	372c      	adds	r7, #44	; 0x2c
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e26c      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b92      	ldr	r3, [pc, #584]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002508:	4b8f      	ldr	r3, [pc, #572]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e246      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7f      	ldr	r2, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7a      	ldr	r2, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b78      	ldr	r3, [pc, #480]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff20 	bl	80013fc <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe ff1c 	bl	80013fc <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1fa      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe ff0c 	bl	80013fc <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe ff08 	bl	80013fc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1e6      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1ba      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4939      	ldr	r1, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fec1 	bl	80013fc <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe febd 	bl	80013fc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e19b      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4927      	ldr	r1, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fea0 	bl	80013fc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fe9c 	bl	80013fc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e17a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe80 	bl	80013fc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fe7c 	bl	80013fc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e15a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f000 fad8 	bl	8002cd4 <RCC_Delay>
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe fe66 	bl	80013fc <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe fe62 	bl	80013fc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e140      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	42420000 	.word	0x42420000
 8002750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b9e      	ldr	r3, [pc, #632]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e9      	bne.n	8002734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a6 	beq.w	80028ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b97      	ldr	r3, [pc, #604]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b94      	ldr	r3, [pc, #592]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a93      	ldr	r2, [pc, #588]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b8e      	ldr	r3, [pc, #568]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fe23 	bl	80013fc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fe1f 	bl	80013fc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0fd      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027e0:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x334>
 80027f6:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a75      	ldr	r2, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a72      	ldr	r2, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x356>
 8002818:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a6c      	ldr	r2, [pc, #432]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe fdd3 	bl	80013fc <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fdcf 	bl	80013fc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ab      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fdbd 	bl	80013fc <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fdb9 	bl	80013fc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e095      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a47      	ldr	r2, [pc, #284]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8081 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d061      	beq.n	8002994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d146      	bne.n	8002966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fd8d 	bl	80013fc <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fd89 	bl	80013fc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e067      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	492d      	ldr	r1, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a19      	ldr	r1, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fd5d 	bl	80013fc <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fd59 	bl	80013fc <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e037      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
 8002964:	e02f      	b.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fd46 	bl	80013fc <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fd42 	bl	80013fc <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e020      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e013      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420060 	.word	0x42420060

080029dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d0      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d910      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4965      	ldr	r1, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d040      	beq.n	8002afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d115      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e073      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06b      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4936      	ldr	r1, [pc, #216]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002acc:	f7fe fc96 	bl	80013fc <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7fe fc92 	bl	80013fc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e053      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d210      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4922      	ldr	r1, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1d0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fbf4 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08007ab4 	.word	0x08007ab4
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b490      	push	{r4, r7}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb8:	1d3c      	adds	r4, r7, #4
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bc0:	f240 2301 	movw	r3, #513	; 0x201
 8002bc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bee:	e02d      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf2:	623b      	str	r3, [r7, #32]
      break;
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c02:	4413      	add	r3, r2
 8002c04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c5b      	lsrs	r3, r3, #17
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c22:	4413      	add	r3, r2
 8002c24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2e:	fb02 f203 	mul.w	r2, r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e004      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c40:	fb02 f303 	mul.w	r3, r2, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	623b      	str	r3, [r7, #32]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4e:	623b      	str	r3, [r7, #32]
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc90      	pop	{r4, r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	08007aa4 	.word	0x08007aa4
 8002c64:	40021000 	.word	0x40021000
 8002c68:	007a1200 	.word	0x007a1200
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08007ac4 	.word	0x08007ac4

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08007ac4 	.word	0x08007ac4

08002cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <RCC_Delay+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <RCC_Delay+0x38>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf0:	bf00      	nop
  }
  while (Delay --);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <RCC_Delay+0x1c>
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d07d      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d118      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fb44 	bl	80013fc <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe fb40 	bl	80013fc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e06d      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02e      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d027      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dca:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fb0f 	bl	80013fc <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fb0b 	bl	80013fc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e036      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ee      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4917      	ldr	r1, [pc, #92]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	490b      	ldr	r1, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420440 	.word	0x42420440

08002e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e03f      	b.n	8002f0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f8e8 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f905 	bl	80030d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b08a      	sub	sp, #40	; 0x28
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d17c      	bne.n	8003030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_Transmit+0x2c>
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e075      	b.n	8003032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Transmit+0x3e>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e06e      	b.n	8003032 <HAL_UART_Transmit+0x11c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2221      	movs	r2, #33	; 0x21
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6a:	f7fe fa47 	bl	80013fc <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d108      	bne.n	8002f98 <HAL_UART_Transmit+0x82>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	e003      	b.n	8002fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fa8:	e02a      	b.n	8003000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f840 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e036      	b.n	8003032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e007      	b.n	8002ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1cf      	bne.n	8002faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	2140      	movs	r1, #64	; 0x40
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f810 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e006      	b.n	8003032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304a:	e02c      	b.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d028      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x30>
 800305a:	f7fe f9cf 	bl	80013fc <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d21d      	bcs.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003078:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e00f      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d0c3      	beq.n	800304c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800310a:	f023 030c 	bic.w	r3, r3, #12
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	430b      	orrs	r3, r1
 8003116:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <UART_SetConfig+0x114>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff fdb8 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	e002      	b.n	8003146 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7ff fda0 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003144:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <UART_SetConfig+0x118>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	0119      	lsls	r1, r3, #4
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <UART_SetConfig+0x118>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	; 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	3332      	adds	r3, #50	; 0x32
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <UART_SetConfig+0x118>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319c:	4419      	add	r1, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <UART_SetConfig+0x118>)
 80031b6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2064      	movs	r0, #100	; 0x64
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	3332      	adds	r3, #50	; 0x32
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <UART_SetConfig+0x118>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	440a      	add	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40013800 	.word	0x40013800
 80031e8:	51eb851f 	.word	0x51eb851f

080031ec <__errno>:
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <__errno+0x8>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2600      	movs	r6, #0
 80031fc:	4d0c      	ldr	r5, [pc, #48]	; (8003230 <__libc_init_array+0x38>)
 80031fe:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	f004 fc28 	bl	8007a5c <_init>
 800320c:	2600      	movs	r6, #0
 800320e:	4d0a      	ldr	r5, [pc, #40]	; (8003238 <__libc_init_array+0x40>)
 8003210:	4c0a      	ldr	r4, [pc, #40]	; (800323c <__libc_init_array+0x44>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	08007f84 	.word	0x08007f84
 8003234:	08007f84 	.word	0x08007f84
 8003238:	08007f84 	.word	0x08007f84
 800323c:	08007f88 	.word	0x08007f88

08003240 <memset>:
 8003240:	4603      	mov	r3, r0
 8003242:	4402      	add	r2, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <__cvt>:
 8003250:	2b00      	cmp	r3, #0
 8003252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003256:	461f      	mov	r7, r3
 8003258:	bfbb      	ittet	lt
 800325a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800325e:	461f      	movlt	r7, r3
 8003260:	2300      	movge	r3, #0
 8003262:	232d      	movlt	r3, #45	; 0x2d
 8003264:	b088      	sub	sp, #32
 8003266:	4614      	mov	r4, r2
 8003268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800326a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800326c:	7013      	strb	r3, [r2, #0]
 800326e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003270:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003274:	f023 0820 	bic.w	r8, r3, #32
 8003278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800327c:	d005      	beq.n	800328a <__cvt+0x3a>
 800327e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003282:	d100      	bne.n	8003286 <__cvt+0x36>
 8003284:	3501      	adds	r5, #1
 8003286:	2302      	movs	r3, #2
 8003288:	e000      	b.n	800328c <__cvt+0x3c>
 800328a:	2303      	movs	r3, #3
 800328c:	aa07      	add	r2, sp, #28
 800328e:	9204      	str	r2, [sp, #16]
 8003290:	aa06      	add	r2, sp, #24
 8003292:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003296:	e9cd 3500 	strd	r3, r5, [sp]
 800329a:	4622      	mov	r2, r4
 800329c:	463b      	mov	r3, r7
 800329e:	f001 fd9f 	bl	8004de0 <_dtoa_r>
 80032a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032a6:	4606      	mov	r6, r0
 80032a8:	d102      	bne.n	80032b0 <__cvt+0x60>
 80032aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032ac:	07db      	lsls	r3, r3, #31
 80032ae:	d522      	bpl.n	80032f6 <__cvt+0xa6>
 80032b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032b4:	eb06 0905 	add.w	r9, r6, r5
 80032b8:	d110      	bne.n	80032dc <__cvt+0x8c>
 80032ba:	7833      	ldrb	r3, [r6, #0]
 80032bc:	2b30      	cmp	r3, #48	; 0x30
 80032be:	d10a      	bne.n	80032d6 <__cvt+0x86>
 80032c0:	2200      	movs	r2, #0
 80032c2:	2300      	movs	r3, #0
 80032c4:	4620      	mov	r0, r4
 80032c6:	4639      	mov	r1, r7
 80032c8:	f7fd fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80032cc:	b918      	cbnz	r0, 80032d6 <__cvt+0x86>
 80032ce:	f1c5 0501 	rsb	r5, r5, #1
 80032d2:	f8ca 5000 	str.w	r5, [sl]
 80032d6:	f8da 3000 	ldr.w	r3, [sl]
 80032da:	4499      	add	r9, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	2300      	movs	r3, #0
 80032e0:	4620      	mov	r0, r4
 80032e2:	4639      	mov	r1, r7
 80032e4:	f7fd fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80032e8:	b108      	cbz	r0, 80032ee <__cvt+0x9e>
 80032ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80032ee:	2230      	movs	r2, #48	; 0x30
 80032f0:	9b07      	ldr	r3, [sp, #28]
 80032f2:	454b      	cmp	r3, r9
 80032f4:	d307      	bcc.n	8003306 <__cvt+0xb6>
 80032f6:	4630      	mov	r0, r6
 80032f8:	9b07      	ldr	r3, [sp, #28]
 80032fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032fc:	1b9b      	subs	r3, r3, r6
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	b008      	add	sp, #32
 8003302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	9107      	str	r1, [sp, #28]
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e7f0      	b.n	80032f0 <__cvt+0xa0>

0800330e <__exponent>:
 800330e:	4603      	mov	r3, r0
 8003310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003312:	2900      	cmp	r1, #0
 8003314:	f803 2b02 	strb.w	r2, [r3], #2
 8003318:	bfb6      	itet	lt
 800331a:	222d      	movlt	r2, #45	; 0x2d
 800331c:	222b      	movge	r2, #43	; 0x2b
 800331e:	4249      	neglt	r1, r1
 8003320:	2909      	cmp	r1, #9
 8003322:	7042      	strb	r2, [r0, #1]
 8003324:	dd2b      	ble.n	800337e <__exponent+0x70>
 8003326:	f10d 0407 	add.w	r4, sp, #7
 800332a:	46a4      	mov	ip, r4
 800332c:	270a      	movs	r7, #10
 800332e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003332:	460a      	mov	r2, r1
 8003334:	46a6      	mov	lr, r4
 8003336:	fb07 1516 	mls	r5, r7, r6, r1
 800333a:	2a63      	cmp	r2, #99	; 0x63
 800333c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003340:	4631      	mov	r1, r6
 8003342:	f104 34ff 	add.w	r4, r4, #4294967295
 8003346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800334a:	dcf0      	bgt.n	800332e <__exponent+0x20>
 800334c:	3130      	adds	r1, #48	; 0x30
 800334e:	f1ae 0502 	sub.w	r5, lr, #2
 8003352:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003356:	4629      	mov	r1, r5
 8003358:	1c44      	adds	r4, r0, #1
 800335a:	4561      	cmp	r1, ip
 800335c:	d30a      	bcc.n	8003374 <__exponent+0x66>
 800335e:	f10d 0209 	add.w	r2, sp, #9
 8003362:	eba2 020e 	sub.w	r2, r2, lr
 8003366:	4565      	cmp	r5, ip
 8003368:	bf88      	it	hi
 800336a:	2200      	movhi	r2, #0
 800336c:	4413      	add	r3, r2
 800336e:	1a18      	subs	r0, r3, r0
 8003370:	b003      	add	sp, #12
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003378:	f804 2f01 	strb.w	r2, [r4, #1]!
 800337c:	e7ed      	b.n	800335a <__exponent+0x4c>
 800337e:	2330      	movs	r3, #48	; 0x30
 8003380:	3130      	adds	r1, #48	; 0x30
 8003382:	7083      	strb	r3, [r0, #2]
 8003384:	70c1      	strb	r1, [r0, #3]
 8003386:	1d03      	adds	r3, r0, #4
 8003388:	e7f1      	b.n	800336e <__exponent+0x60>
	...

0800338c <_printf_float>:
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003390:	b091      	sub	sp, #68	; 0x44
 8003392:	460c      	mov	r4, r1
 8003394:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003398:	4616      	mov	r6, r2
 800339a:	461f      	mov	r7, r3
 800339c:	4605      	mov	r5, r0
 800339e:	f002 fe73 	bl	8006088 <_localeconv_r>
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	9309      	str	r3, [sp, #36]	; 0x24
 80033a8:	f7fc fed2 	bl	8000150 <strlen>
 80033ac:	2300      	movs	r3, #0
 80033ae:	930e      	str	r3, [sp, #56]	; 0x38
 80033b0:	f8d8 3000 	ldr.w	r3, [r8]
 80033b4:	900a      	str	r0, [sp, #40]	; 0x28
 80033b6:	3307      	adds	r3, #7
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033c4:	f8d4 b000 	ldr.w	fp, [r4]
 80033c8:	f8c8 2000 	str.w	r2, [r8]
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80033d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80033dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80033de:	f04f 32ff 	mov.w	r2, #4294967295
 80033e2:	4640      	mov	r0, r8
 80033e4:	4b9c      	ldr	r3, [pc, #624]	; (8003658 <_printf_float+0x2cc>)
 80033e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033e8:	f7fd fb10 	bl	8000a0c <__aeabi_dcmpun>
 80033ec:	bb70      	cbnz	r0, 800344c <_printf_float+0xc0>
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
 80033f2:	4640      	mov	r0, r8
 80033f4:	4b98      	ldr	r3, [pc, #608]	; (8003658 <_printf_float+0x2cc>)
 80033f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033f8:	f7fd faea 	bl	80009d0 <__aeabi_dcmple>
 80033fc:	bb30      	cbnz	r0, 800344c <_printf_float+0xc0>
 80033fe:	2200      	movs	r2, #0
 8003400:	2300      	movs	r3, #0
 8003402:	4640      	mov	r0, r8
 8003404:	4651      	mov	r1, sl
 8003406:	f7fd fad9 	bl	80009bc <__aeabi_dcmplt>
 800340a:	b110      	cbz	r0, 8003412 <_printf_float+0x86>
 800340c:	232d      	movs	r3, #45	; 0x2d
 800340e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003412:	4b92      	ldr	r3, [pc, #584]	; (800365c <_printf_float+0x2d0>)
 8003414:	4892      	ldr	r0, [pc, #584]	; (8003660 <_printf_float+0x2d4>)
 8003416:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800341a:	bf94      	ite	ls
 800341c:	4698      	movls	r8, r3
 800341e:	4680      	movhi	r8, r0
 8003420:	2303      	movs	r3, #3
 8003422:	f04f 0a00 	mov.w	sl, #0
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	f02b 0304 	bic.w	r3, fp, #4
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	4633      	mov	r3, r6
 8003430:	4621      	mov	r1, r4
 8003432:	4628      	mov	r0, r5
 8003434:	9700      	str	r7, [sp, #0]
 8003436:	aa0f      	add	r2, sp, #60	; 0x3c
 8003438:	f000 f9d4 	bl	80037e4 <_printf_common>
 800343c:	3001      	adds	r0, #1
 800343e:	f040 8090 	bne.w	8003562 <_printf_float+0x1d6>
 8003442:	f04f 30ff 	mov.w	r0, #4294967295
 8003446:	b011      	add	sp, #68	; 0x44
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344c:	4642      	mov	r2, r8
 800344e:	4653      	mov	r3, sl
 8003450:	4640      	mov	r0, r8
 8003452:	4651      	mov	r1, sl
 8003454:	f7fd fada 	bl	8000a0c <__aeabi_dcmpun>
 8003458:	b148      	cbz	r0, 800346e <_printf_float+0xe2>
 800345a:	f1ba 0f00 	cmp.w	sl, #0
 800345e:	bfb8      	it	lt
 8003460:	232d      	movlt	r3, #45	; 0x2d
 8003462:	4880      	ldr	r0, [pc, #512]	; (8003664 <_printf_float+0x2d8>)
 8003464:	bfb8      	it	lt
 8003466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800346a:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <_printf_float+0x2dc>)
 800346c:	e7d3      	b.n	8003416 <_printf_float+0x8a>
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	d142      	bne.n	80034fe <_printf_float+0x172>
 8003478:	2306      	movs	r3, #6
 800347a:	6063      	str	r3, [r4, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	9206      	str	r2, [sp, #24]
 8003480:	aa0e      	add	r2, sp, #56	; 0x38
 8003482:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003486:	aa0d      	add	r2, sp, #52	; 0x34
 8003488:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800348c:	9203      	str	r2, [sp, #12]
 800348e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003492:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	4642      	mov	r2, r8
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4628      	mov	r0, r5
 80034a0:	4653      	mov	r3, sl
 80034a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80034a4:	f7ff fed4 	bl	8003250 <__cvt>
 80034a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034aa:	4680      	mov	r8, r0
 80034ac:	2947      	cmp	r1, #71	; 0x47
 80034ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034b0:	d108      	bne.n	80034c4 <_printf_float+0x138>
 80034b2:	1cc8      	adds	r0, r1, #3
 80034b4:	db02      	blt.n	80034bc <_printf_float+0x130>
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	4299      	cmp	r1, r3
 80034ba:	dd40      	ble.n	800353e <_printf_float+0x1b2>
 80034bc:	f1a9 0902 	sub.w	r9, r9, #2
 80034c0:	fa5f f989 	uxtb.w	r9, r9
 80034c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034c8:	d81f      	bhi.n	800350a <_printf_float+0x17e>
 80034ca:	464a      	mov	r2, r9
 80034cc:	3901      	subs	r1, #1
 80034ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034d2:	910d      	str	r1, [sp, #52]	; 0x34
 80034d4:	f7ff ff1b 	bl	800330e <__exponent>
 80034d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034da:	4682      	mov	sl, r0
 80034dc:	1813      	adds	r3, r2, r0
 80034de:	2a01      	cmp	r2, #1
 80034e0:	6123      	str	r3, [r4, #16]
 80034e2:	dc02      	bgt.n	80034ea <_printf_float+0x15e>
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	07d2      	lsls	r2, r2, #31
 80034e8:	d501      	bpl.n	80034ee <_printf_float+0x162>
 80034ea:	3301      	adds	r3, #1
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d09b      	beq.n	800342e <_printf_float+0xa2>
 80034f6:	232d      	movs	r3, #45	; 0x2d
 80034f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034fc:	e797      	b.n	800342e <_printf_float+0xa2>
 80034fe:	2947      	cmp	r1, #71	; 0x47
 8003500:	d1bc      	bne.n	800347c <_printf_float+0xf0>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ba      	bne.n	800347c <_printf_float+0xf0>
 8003506:	2301      	movs	r3, #1
 8003508:	e7b7      	b.n	800347a <_printf_float+0xee>
 800350a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800350e:	d118      	bne.n	8003542 <_printf_float+0x1b6>
 8003510:	2900      	cmp	r1, #0
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	dd0b      	ble.n	800352e <_printf_float+0x1a2>
 8003516:	6121      	str	r1, [r4, #16]
 8003518:	b913      	cbnz	r3, 8003520 <_printf_float+0x194>
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	07d0      	lsls	r0, r2, #31
 800351e:	d502      	bpl.n	8003526 <_printf_float+0x19a>
 8003520:	3301      	adds	r3, #1
 8003522:	440b      	add	r3, r1
 8003524:	6123      	str	r3, [r4, #16]
 8003526:	f04f 0a00 	mov.w	sl, #0
 800352a:	65a1      	str	r1, [r4, #88]	; 0x58
 800352c:	e7df      	b.n	80034ee <_printf_float+0x162>
 800352e:	b913      	cbnz	r3, 8003536 <_printf_float+0x1aa>
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	07d2      	lsls	r2, r2, #31
 8003534:	d501      	bpl.n	800353a <_printf_float+0x1ae>
 8003536:	3302      	adds	r3, #2
 8003538:	e7f4      	b.n	8003524 <_printf_float+0x198>
 800353a:	2301      	movs	r3, #1
 800353c:	e7f2      	b.n	8003524 <_printf_float+0x198>
 800353e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003544:	4299      	cmp	r1, r3
 8003546:	db05      	blt.n	8003554 <_printf_float+0x1c8>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	6121      	str	r1, [r4, #16]
 800354c:	07d8      	lsls	r0, r3, #31
 800354e:	d5ea      	bpl.n	8003526 <_printf_float+0x19a>
 8003550:	1c4b      	adds	r3, r1, #1
 8003552:	e7e7      	b.n	8003524 <_printf_float+0x198>
 8003554:	2900      	cmp	r1, #0
 8003556:	bfcc      	ite	gt
 8003558:	2201      	movgt	r2, #1
 800355a:	f1c1 0202 	rsble	r2, r1, #2
 800355e:	4413      	add	r3, r2
 8003560:	e7e0      	b.n	8003524 <_printf_float+0x198>
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	055a      	lsls	r2, r3, #21
 8003566:	d407      	bmi.n	8003578 <_printf_float+0x1ec>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	4642      	mov	r2, r8
 800356c:	4631      	mov	r1, r6
 800356e:	4628      	mov	r0, r5
 8003570:	47b8      	blx	r7
 8003572:	3001      	adds	r0, #1
 8003574:	d12b      	bne.n	80035ce <_printf_float+0x242>
 8003576:	e764      	b.n	8003442 <_printf_float+0xb6>
 8003578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800357c:	f240 80dd 	bls.w	800373a <_printf_float+0x3ae>
 8003580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003584:	2200      	movs	r2, #0
 8003586:	2300      	movs	r3, #0
 8003588:	f7fd fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800358c:	2800      	cmp	r0, #0
 800358e:	d033      	beq.n	80035f8 <_printf_float+0x26c>
 8003590:	2301      	movs	r3, #1
 8003592:	4631      	mov	r1, r6
 8003594:	4628      	mov	r0, r5
 8003596:	4a35      	ldr	r2, [pc, #212]	; (800366c <_printf_float+0x2e0>)
 8003598:	47b8      	blx	r7
 800359a:	3001      	adds	r0, #1
 800359c:	f43f af51 	beq.w	8003442 <_printf_float+0xb6>
 80035a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035a4:	429a      	cmp	r2, r3
 80035a6:	db02      	blt.n	80035ae <_printf_float+0x222>
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	07d8      	lsls	r0, r3, #31
 80035ac:	d50f      	bpl.n	80035ce <_printf_float+0x242>
 80035ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	f43f af42 	beq.w	8003442 <_printf_float+0xb6>
 80035be:	f04f 0800 	mov.w	r8, #0
 80035c2:	f104 091a 	add.w	r9, r4, #26
 80035c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c8:	3b01      	subs	r3, #1
 80035ca:	4543      	cmp	r3, r8
 80035cc:	dc09      	bgt.n	80035e2 <_printf_float+0x256>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	079b      	lsls	r3, r3, #30
 80035d2:	f100 8102 	bmi.w	80037da <_printf_float+0x44e>
 80035d6:	68e0      	ldr	r0, [r4, #12]
 80035d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035da:	4298      	cmp	r0, r3
 80035dc:	bfb8      	it	lt
 80035de:	4618      	movlt	r0, r3
 80035e0:	e731      	b.n	8003446 <_printf_float+0xba>
 80035e2:	2301      	movs	r3, #1
 80035e4:	464a      	mov	r2, r9
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	f43f af28 	beq.w	8003442 <_printf_float+0xb6>
 80035f2:	f108 0801 	add.w	r8, r8, #1
 80035f6:	e7e6      	b.n	80035c6 <_printf_float+0x23a>
 80035f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dc38      	bgt.n	8003670 <_printf_float+0x2e4>
 80035fe:	2301      	movs	r3, #1
 8003600:	4631      	mov	r1, r6
 8003602:	4628      	mov	r0, r5
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <_printf_float+0x2e0>)
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	f43f af1a 	beq.w	8003442 <_printf_float+0xb6>
 800360e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003612:	4313      	orrs	r3, r2
 8003614:	d102      	bne.n	800361c <_printf_float+0x290>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	07d9      	lsls	r1, r3, #31
 800361a:	d5d8      	bpl.n	80035ce <_printf_float+0x242>
 800361c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003620:	4631      	mov	r1, r6
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f af0b 	beq.w	8003442 <_printf_float+0xb6>
 800362c:	f04f 0900 	mov.w	r9, #0
 8003630:	f104 0a1a 	add.w	sl, r4, #26
 8003634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003636:	425b      	negs	r3, r3
 8003638:	454b      	cmp	r3, r9
 800363a:	dc01      	bgt.n	8003640 <_printf_float+0x2b4>
 800363c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800363e:	e794      	b.n	800356a <_printf_float+0x1de>
 8003640:	2301      	movs	r3, #1
 8003642:	4652      	mov	r2, sl
 8003644:	4631      	mov	r1, r6
 8003646:	4628      	mov	r0, r5
 8003648:	47b8      	blx	r7
 800364a:	3001      	adds	r0, #1
 800364c:	f43f aef9 	beq.w	8003442 <_printf_float+0xb6>
 8003650:	f109 0901 	add.w	r9, r9, #1
 8003654:	e7ee      	b.n	8003634 <_printf_float+0x2a8>
 8003656:	bf00      	nop
 8003658:	7fefffff 	.word	0x7fefffff
 800365c:	08007ad0 	.word	0x08007ad0
 8003660:	08007ad4 	.word	0x08007ad4
 8003664:	08007adc 	.word	0x08007adc
 8003668:	08007ad8 	.word	0x08007ad8
 800366c:	08007ae0 	.word	0x08007ae0
 8003670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003674:	429a      	cmp	r2, r3
 8003676:	bfa8      	it	ge
 8003678:	461a      	movge	r2, r3
 800367a:	2a00      	cmp	r2, #0
 800367c:	4691      	mov	r9, r2
 800367e:	dc37      	bgt.n	80036f0 <_printf_float+0x364>
 8003680:	f04f 0b00 	mov.w	fp, #0
 8003684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003688:	f104 021a 	add.w	r2, r4, #26
 800368c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003690:	ebaa 0309 	sub.w	r3, sl, r9
 8003694:	455b      	cmp	r3, fp
 8003696:	dc33      	bgt.n	8003700 <_printf_float+0x374>
 8003698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800369c:	429a      	cmp	r2, r3
 800369e:	db3b      	blt.n	8003718 <_printf_float+0x38c>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	07da      	lsls	r2, r3, #31
 80036a4:	d438      	bmi.n	8003718 <_printf_float+0x38c>
 80036a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036aa:	eba2 030a 	sub.w	r3, r2, sl
 80036ae:	eba2 0901 	sub.w	r9, r2, r1
 80036b2:	4599      	cmp	r9, r3
 80036b4:	bfa8      	it	ge
 80036b6:	4699      	movge	r9, r3
 80036b8:	f1b9 0f00 	cmp.w	r9, #0
 80036bc:	dc34      	bgt.n	8003728 <_printf_float+0x39c>
 80036be:	f04f 0800 	mov.w	r8, #0
 80036c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c6:	f104 0a1a 	add.w	sl, r4, #26
 80036ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	eba3 0309 	sub.w	r3, r3, r9
 80036d4:	4543      	cmp	r3, r8
 80036d6:	f77f af7a 	ble.w	80035ce <_printf_float+0x242>
 80036da:	2301      	movs	r3, #1
 80036dc:	4652      	mov	r2, sl
 80036de:	4631      	mov	r1, r6
 80036e0:	4628      	mov	r0, r5
 80036e2:	47b8      	blx	r7
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f aeac 	beq.w	8003442 <_printf_float+0xb6>
 80036ea:	f108 0801 	add.w	r8, r8, #1
 80036ee:	e7ec      	b.n	80036ca <_printf_float+0x33e>
 80036f0:	4613      	mov	r3, r2
 80036f2:	4631      	mov	r1, r6
 80036f4:	4642      	mov	r2, r8
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b8      	blx	r7
 80036fa:	3001      	adds	r0, #1
 80036fc:	d1c0      	bne.n	8003680 <_printf_float+0x2f4>
 80036fe:	e6a0      	b.n	8003442 <_printf_float+0xb6>
 8003700:	2301      	movs	r3, #1
 8003702:	4631      	mov	r1, r6
 8003704:	4628      	mov	r0, r5
 8003706:	920b      	str	r2, [sp, #44]	; 0x2c
 8003708:	47b8      	blx	r7
 800370a:	3001      	adds	r0, #1
 800370c:	f43f ae99 	beq.w	8003442 <_printf_float+0xb6>
 8003710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003712:	f10b 0b01 	add.w	fp, fp, #1
 8003716:	e7b9      	b.n	800368c <_printf_float+0x300>
 8003718:	4631      	mov	r1, r6
 800371a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	d1bf      	bne.n	80036a6 <_printf_float+0x31a>
 8003726:	e68c      	b.n	8003442 <_printf_float+0xb6>
 8003728:	464b      	mov	r3, r9
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	eb08 020a 	add.w	r2, r8, sl
 8003732:	47b8      	blx	r7
 8003734:	3001      	adds	r0, #1
 8003736:	d1c2      	bne.n	80036be <_printf_float+0x332>
 8003738:	e683      	b.n	8003442 <_printf_float+0xb6>
 800373a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800373c:	2a01      	cmp	r2, #1
 800373e:	dc01      	bgt.n	8003744 <_printf_float+0x3b8>
 8003740:	07db      	lsls	r3, r3, #31
 8003742:	d537      	bpl.n	80037b4 <_printf_float+0x428>
 8003744:	2301      	movs	r3, #1
 8003746:	4642      	mov	r2, r8
 8003748:	4631      	mov	r1, r6
 800374a:	4628      	mov	r0, r5
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	f43f ae77 	beq.w	8003442 <_printf_float+0xb6>
 8003754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003758:	4631      	mov	r1, r6
 800375a:	4628      	mov	r0, r5
 800375c:	47b8      	blx	r7
 800375e:	3001      	adds	r0, #1
 8003760:	f43f ae6f 	beq.w	8003442 <_printf_float+0xb6>
 8003764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003768:	2200      	movs	r2, #0
 800376a:	2300      	movs	r3, #0
 800376c:	f7fd f91c 	bl	80009a8 <__aeabi_dcmpeq>
 8003770:	b9d8      	cbnz	r0, 80037aa <_printf_float+0x41e>
 8003772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003774:	f108 0201 	add.w	r2, r8, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	4631      	mov	r1, r6
 800377c:	4628      	mov	r0, r5
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	d10e      	bne.n	80037a2 <_printf_float+0x416>
 8003784:	e65d      	b.n	8003442 <_printf_float+0xb6>
 8003786:	2301      	movs	r3, #1
 8003788:	464a      	mov	r2, r9
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	f43f ae56 	beq.w	8003442 <_printf_float+0xb6>
 8003796:	f108 0801 	add.w	r8, r8, #1
 800379a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800379c:	3b01      	subs	r3, #1
 800379e:	4543      	cmp	r3, r8
 80037a0:	dcf1      	bgt.n	8003786 <_printf_float+0x3fa>
 80037a2:	4653      	mov	r3, sl
 80037a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037a8:	e6e0      	b.n	800356c <_printf_float+0x1e0>
 80037aa:	f04f 0800 	mov.w	r8, #0
 80037ae:	f104 091a 	add.w	r9, r4, #26
 80037b2:	e7f2      	b.n	800379a <_printf_float+0x40e>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4642      	mov	r2, r8
 80037b8:	e7df      	b.n	800377a <_printf_float+0x3ee>
 80037ba:	2301      	movs	r3, #1
 80037bc:	464a      	mov	r2, r9
 80037be:	4631      	mov	r1, r6
 80037c0:	4628      	mov	r0, r5
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	f43f ae3c 	beq.w	8003442 <_printf_float+0xb6>
 80037ca:	f108 0801 	add.w	r8, r8, #1
 80037ce:	68e3      	ldr	r3, [r4, #12]
 80037d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037d2:	1a5b      	subs	r3, r3, r1
 80037d4:	4543      	cmp	r3, r8
 80037d6:	dcf0      	bgt.n	80037ba <_printf_float+0x42e>
 80037d8:	e6fd      	b.n	80035d6 <_printf_float+0x24a>
 80037da:	f04f 0800 	mov.w	r8, #0
 80037de:	f104 0919 	add.w	r9, r4, #25
 80037e2:	e7f4      	b.n	80037ce <_printf_float+0x442>

080037e4 <_printf_common>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4616      	mov	r6, r2
 80037ea:	4699      	mov	r9, r3
 80037ec:	688a      	ldr	r2, [r1, #8]
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	4607      	mov	r7, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bfb8      	it	lt
 80037f6:	4613      	movlt	r3, r2
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037fe:	460c      	mov	r4, r1
 8003800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003804:	b10a      	cbz	r2, 800380a <_printf_common+0x26>
 8003806:	3301      	adds	r3, #1
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	0699      	lsls	r1, r3, #26
 800380e:	bf42      	ittt	mi
 8003810:	6833      	ldrmi	r3, [r6, #0]
 8003812:	3302      	addmi	r3, #2
 8003814:	6033      	strmi	r3, [r6, #0]
 8003816:	6825      	ldr	r5, [r4, #0]
 8003818:	f015 0506 	ands.w	r5, r5, #6
 800381c:	d106      	bne.n	800382c <_printf_common+0x48>
 800381e:	f104 0a19 	add.w	sl, r4, #25
 8003822:	68e3      	ldr	r3, [r4, #12]
 8003824:	6832      	ldr	r2, [r6, #0]
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	42ab      	cmp	r3, r5
 800382a:	dc28      	bgt.n	800387e <_printf_common+0x9a>
 800382c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003830:	1e13      	subs	r3, r2, #0
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	bf18      	it	ne
 8003836:	2301      	movne	r3, #1
 8003838:	0692      	lsls	r2, r2, #26
 800383a:	d42d      	bmi.n	8003898 <_printf_common+0xb4>
 800383c:	4649      	mov	r1, r9
 800383e:	4638      	mov	r0, r7
 8003840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003844:	47c0      	blx	r8
 8003846:	3001      	adds	r0, #1
 8003848:	d020      	beq.n	800388c <_printf_common+0xa8>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	68e5      	ldr	r5, [r4, #12]
 800384e:	f003 0306 	and.w	r3, r3, #6
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf18      	it	ne
 8003856:	2500      	movne	r5, #0
 8003858:	6832      	ldr	r2, [r6, #0]
 800385a:	f04f 0600 	mov.w	r6, #0
 800385e:	68a3      	ldr	r3, [r4, #8]
 8003860:	bf08      	it	eq
 8003862:	1aad      	subeq	r5, r5, r2
 8003864:	6922      	ldr	r2, [r4, #16]
 8003866:	bf08      	it	eq
 8003868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800386c:	4293      	cmp	r3, r2
 800386e:	bfc4      	itt	gt
 8003870:	1a9b      	subgt	r3, r3, r2
 8003872:	18ed      	addgt	r5, r5, r3
 8003874:	341a      	adds	r4, #26
 8003876:	42b5      	cmp	r5, r6
 8003878:	d11a      	bne.n	80038b0 <_printf_common+0xcc>
 800387a:	2000      	movs	r0, #0
 800387c:	e008      	b.n	8003890 <_printf_common+0xac>
 800387e:	2301      	movs	r3, #1
 8003880:	4652      	mov	r2, sl
 8003882:	4649      	mov	r1, r9
 8003884:	4638      	mov	r0, r7
 8003886:	47c0      	blx	r8
 8003888:	3001      	adds	r0, #1
 800388a:	d103      	bne.n	8003894 <_printf_common+0xb0>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	3501      	adds	r5, #1
 8003896:	e7c4      	b.n	8003822 <_printf_common+0x3e>
 8003898:	2030      	movs	r0, #48	; 0x30
 800389a:	18e1      	adds	r1, r4, r3
 800389c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a6:	4422      	add	r2, r4
 80038a8:	3302      	adds	r3, #2
 80038aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ae:	e7c5      	b.n	800383c <_printf_common+0x58>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4622      	mov	r2, r4
 80038b4:	4649      	mov	r1, r9
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d0e6      	beq.n	800388c <_printf_common+0xa8>
 80038be:	3601      	adds	r6, #1
 80038c0:	e7d9      	b.n	8003876 <_printf_common+0x92>
	...

080038c4 <_printf_i>:
 80038c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c8:	460c      	mov	r4, r1
 80038ca:	7e27      	ldrb	r7, [r4, #24]
 80038cc:	4691      	mov	r9, r2
 80038ce:	2f78      	cmp	r7, #120	; 0x78
 80038d0:	4680      	mov	r8, r0
 80038d2:	469a      	mov	sl, r3
 80038d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038da:	d807      	bhi.n	80038ec <_printf_i+0x28>
 80038dc:	2f62      	cmp	r7, #98	; 0x62
 80038de:	d80a      	bhi.n	80038f6 <_printf_i+0x32>
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	f000 80d9 	beq.w	8003a98 <_printf_i+0x1d4>
 80038e6:	2f58      	cmp	r7, #88	; 0x58
 80038e8:	f000 80a4 	beq.w	8003a34 <_printf_i+0x170>
 80038ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f4:	e03a      	b.n	800396c <_printf_i+0xa8>
 80038f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038fa:	2b15      	cmp	r3, #21
 80038fc:	d8f6      	bhi.n	80038ec <_printf_i+0x28>
 80038fe:	a001      	add	r0, pc, #4	; (adr r0, 8003904 <_printf_i+0x40>)
 8003900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003904:	0800395d 	.word	0x0800395d
 8003908:	08003971 	.word	0x08003971
 800390c:	080038ed 	.word	0x080038ed
 8003910:	080038ed 	.word	0x080038ed
 8003914:	080038ed 	.word	0x080038ed
 8003918:	080038ed 	.word	0x080038ed
 800391c:	08003971 	.word	0x08003971
 8003920:	080038ed 	.word	0x080038ed
 8003924:	080038ed 	.word	0x080038ed
 8003928:	080038ed 	.word	0x080038ed
 800392c:	080038ed 	.word	0x080038ed
 8003930:	08003a7f 	.word	0x08003a7f
 8003934:	080039a1 	.word	0x080039a1
 8003938:	08003a61 	.word	0x08003a61
 800393c:	080038ed 	.word	0x080038ed
 8003940:	080038ed 	.word	0x080038ed
 8003944:	08003aa1 	.word	0x08003aa1
 8003948:	080038ed 	.word	0x080038ed
 800394c:	080039a1 	.word	0x080039a1
 8003950:	080038ed 	.word	0x080038ed
 8003954:	080038ed 	.word	0x080038ed
 8003958:	08003a69 	.word	0x08003a69
 800395c:	680b      	ldr	r3, [r1, #0]
 800395e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	600a      	str	r2, [r1, #0]
 8003968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800396c:	2301      	movs	r3, #1
 800396e:	e0a4      	b.n	8003aba <_printf_i+0x1f6>
 8003970:	6825      	ldr	r5, [r4, #0]
 8003972:	6808      	ldr	r0, [r1, #0]
 8003974:	062e      	lsls	r6, r5, #24
 8003976:	f100 0304 	add.w	r3, r0, #4
 800397a:	d50a      	bpl.n	8003992 <_printf_i+0xce>
 800397c:	6805      	ldr	r5, [r0, #0]
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	2d00      	cmp	r5, #0
 8003982:	da03      	bge.n	800398c <_printf_i+0xc8>
 8003984:	232d      	movs	r3, #45	; 0x2d
 8003986:	426d      	negs	r5, r5
 8003988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800398c:	230a      	movs	r3, #10
 800398e:	485e      	ldr	r0, [pc, #376]	; (8003b08 <_printf_i+0x244>)
 8003990:	e019      	b.n	80039c6 <_printf_i+0x102>
 8003992:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003996:	6805      	ldr	r5, [r0, #0]
 8003998:	600b      	str	r3, [r1, #0]
 800399a:	bf18      	it	ne
 800399c:	b22d      	sxthne	r5, r5
 800399e:	e7ef      	b.n	8003980 <_printf_i+0xbc>
 80039a0:	680b      	ldr	r3, [r1, #0]
 80039a2:	6825      	ldr	r5, [r4, #0]
 80039a4:	1d18      	adds	r0, r3, #4
 80039a6:	6008      	str	r0, [r1, #0]
 80039a8:	0628      	lsls	r0, r5, #24
 80039aa:	d501      	bpl.n	80039b0 <_printf_i+0xec>
 80039ac:	681d      	ldr	r5, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <_printf_i+0xf2>
 80039b0:	0669      	lsls	r1, r5, #25
 80039b2:	d5fb      	bpl.n	80039ac <_printf_i+0xe8>
 80039b4:	881d      	ldrh	r5, [r3, #0]
 80039b6:	2f6f      	cmp	r7, #111	; 0x6f
 80039b8:	bf0c      	ite	eq
 80039ba:	2308      	moveq	r3, #8
 80039bc:	230a      	movne	r3, #10
 80039be:	4852      	ldr	r0, [pc, #328]	; (8003b08 <_printf_i+0x244>)
 80039c0:	2100      	movs	r1, #0
 80039c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039c6:	6866      	ldr	r6, [r4, #4]
 80039c8:	2e00      	cmp	r6, #0
 80039ca:	bfa8      	it	ge
 80039cc:	6821      	ldrge	r1, [r4, #0]
 80039ce:	60a6      	str	r6, [r4, #8]
 80039d0:	bfa4      	itt	ge
 80039d2:	f021 0104 	bicge.w	r1, r1, #4
 80039d6:	6021      	strge	r1, [r4, #0]
 80039d8:	b90d      	cbnz	r5, 80039de <_printf_i+0x11a>
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d04d      	beq.n	8003a7a <_printf_i+0x1b6>
 80039de:	4616      	mov	r6, r2
 80039e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80039e4:	fb03 5711 	mls	r7, r3, r1, r5
 80039e8:	5dc7      	ldrb	r7, [r0, r7]
 80039ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039ee:	462f      	mov	r7, r5
 80039f0:	42bb      	cmp	r3, r7
 80039f2:	460d      	mov	r5, r1
 80039f4:	d9f4      	bls.n	80039e0 <_printf_i+0x11c>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d10b      	bne.n	8003a12 <_printf_i+0x14e>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	07df      	lsls	r7, r3, #31
 80039fe:	d508      	bpl.n	8003a12 <_printf_i+0x14e>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	6861      	ldr	r1, [r4, #4]
 8003a04:	4299      	cmp	r1, r3
 8003a06:	bfde      	ittt	le
 8003a08:	2330      	movle	r3, #48	; 0x30
 8003a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a12:	1b92      	subs	r2, r2, r6
 8003a14:	6122      	str	r2, [r4, #16]
 8003a16:	464b      	mov	r3, r9
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f8cd a000 	str.w	sl, [sp]
 8003a20:	aa03      	add	r2, sp, #12
 8003a22:	f7ff fedf 	bl	80037e4 <_printf_common>
 8003a26:	3001      	adds	r0, #1
 8003a28:	d14c      	bne.n	8003ac4 <_printf_i+0x200>
 8003a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2e:	b004      	add	sp, #16
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	4834      	ldr	r0, [pc, #208]	; (8003b08 <_printf_i+0x244>)
 8003a36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a3a:	680e      	ldr	r6, [r1, #0]
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a42:	061f      	lsls	r7, r3, #24
 8003a44:	600e      	str	r6, [r1, #0]
 8003a46:	d514      	bpl.n	8003a72 <_printf_i+0x1ae>
 8003a48:	07d9      	lsls	r1, r3, #31
 8003a4a:	bf44      	itt	mi
 8003a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a50:	6023      	strmi	r3, [r4, #0]
 8003a52:	b91d      	cbnz	r5, 8003a5c <_printf_i+0x198>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f023 0320 	bic.w	r3, r3, #32
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	e7af      	b.n	80039c0 <_printf_i+0xfc>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f043 0320 	orr.w	r3, r3, #32
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2378      	movs	r3, #120	; 0x78
 8003a6a:	4828      	ldr	r0, [pc, #160]	; (8003b0c <_printf_i+0x248>)
 8003a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a70:	e7e3      	b.n	8003a3a <_printf_i+0x176>
 8003a72:	065e      	lsls	r6, r3, #25
 8003a74:	bf48      	it	mi
 8003a76:	b2ad      	uxthmi	r5, r5
 8003a78:	e7e6      	b.n	8003a48 <_printf_i+0x184>
 8003a7a:	4616      	mov	r6, r2
 8003a7c:	e7bb      	b.n	80039f6 <_printf_i+0x132>
 8003a7e:	680b      	ldr	r3, [r1, #0]
 8003a80:	6826      	ldr	r6, [r4, #0]
 8003a82:	1d1d      	adds	r5, r3, #4
 8003a84:	6960      	ldr	r0, [r4, #20]
 8003a86:	600d      	str	r5, [r1, #0]
 8003a88:	0635      	lsls	r5, r6, #24
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	d501      	bpl.n	8003a92 <_printf_i+0x1ce>
 8003a8e:	6018      	str	r0, [r3, #0]
 8003a90:	e002      	b.n	8003a98 <_printf_i+0x1d4>
 8003a92:	0671      	lsls	r1, r6, #25
 8003a94:	d5fb      	bpl.n	8003a8e <_printf_i+0x1ca>
 8003a96:	8018      	strh	r0, [r3, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4616      	mov	r6, r2
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	e7ba      	b.n	8003a16 <_printf_i+0x152>
 8003aa0:	680b      	ldr	r3, [r1, #0]
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	600a      	str	r2, [r1, #0]
 8003aa6:	681e      	ldr	r6, [r3, #0]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4630      	mov	r0, r6
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	f002 fb09 	bl	80060c4 <memchr>
 8003ab2:	b108      	cbz	r0, 8003ab8 <_printf_i+0x1f4>
 8003ab4:	1b80      	subs	r0, r0, r6
 8003ab6:	6060      	str	r0, [r4, #4]
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	6123      	str	r3, [r4, #16]
 8003abc:	2300      	movs	r3, #0
 8003abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac2:	e7a8      	b.n	8003a16 <_printf_i+0x152>
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	4640      	mov	r0, r8
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	47d0      	blx	sl
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d0ab      	beq.n	8003a2a <_printf_i+0x166>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	079b      	lsls	r3, r3, #30
 8003ad6:	d413      	bmi.n	8003b00 <_printf_i+0x23c>
 8003ad8:	68e0      	ldr	r0, [r4, #12]
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	4298      	cmp	r0, r3
 8003ade:	bfb8      	it	lt
 8003ae0:	4618      	movlt	r0, r3
 8003ae2:	e7a4      	b.n	8003a2e <_printf_i+0x16a>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	4649      	mov	r1, r9
 8003aea:	4640      	mov	r0, r8
 8003aec:	47d0      	blx	sl
 8003aee:	3001      	adds	r0, #1
 8003af0:	d09b      	beq.n	8003a2a <_printf_i+0x166>
 8003af2:	3501      	adds	r5, #1
 8003af4:	68e3      	ldr	r3, [r4, #12]
 8003af6:	9903      	ldr	r1, [sp, #12]
 8003af8:	1a5b      	subs	r3, r3, r1
 8003afa:	42ab      	cmp	r3, r5
 8003afc:	dcf2      	bgt.n	8003ae4 <_printf_i+0x220>
 8003afe:	e7eb      	b.n	8003ad8 <_printf_i+0x214>
 8003b00:	2500      	movs	r5, #0
 8003b02:	f104 0619 	add.w	r6, r4, #25
 8003b06:	e7f5      	b.n	8003af4 <_printf_i+0x230>
 8003b08:	08007ae2 	.word	0x08007ae2
 8003b0c:	08007af3 	.word	0x08007af3

08003b10 <_scanf_float>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	b087      	sub	sp, #28
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	688b      	ldr	r3, [r1, #8]
 8003b1a:	4617      	mov	r7, r2
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b22:	bf85      	ittet	hi
 8003b24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b28:	195b      	addhi	r3, r3, r5
 8003b2a:	2300      	movls	r3, #0
 8003b2c:	9302      	strhi	r3, [sp, #8]
 8003b2e:	bf88      	it	hi
 8003b30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b34:	468b      	mov	fp, r1
 8003b36:	f04f 0500 	mov.w	r5, #0
 8003b3a:	bf8c      	ite	hi
 8003b3c:	608b      	strhi	r3, [r1, #8]
 8003b3e:	9302      	strls	r3, [sp, #8]
 8003b40:	680b      	ldr	r3, [r1, #0]
 8003b42:	4680      	mov	r8, r0
 8003b44:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003b48:	f84b 3b1c 	str.w	r3, [fp], #28
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	465e      	mov	r6, fp
 8003b50:	46aa      	mov	sl, r5
 8003b52:	46a9      	mov	r9, r5
 8003b54:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b58:	9501      	str	r5, [sp, #4]
 8003b5a:	68a2      	ldr	r2, [r4, #8]
 8003b5c:	b152      	cbz	r2, 8003b74 <_scanf_float+0x64>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b4e      	cmp	r3, #78	; 0x4e
 8003b64:	d864      	bhi.n	8003c30 <_scanf_float+0x120>
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d83c      	bhi.n	8003be4 <_scanf_float+0xd4>
 8003b6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003b6e:	b2c8      	uxtb	r0, r1
 8003b70:	280e      	cmp	r0, #14
 8003b72:	d93a      	bls.n	8003bea <_scanf_float+0xda>
 8003b74:	f1b9 0f00 	cmp.w	r9, #0
 8003b78:	d003      	beq.n	8003b82 <_scanf_float+0x72>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b86:	f1ba 0f01 	cmp.w	sl, #1
 8003b8a:	f200 8113 	bhi.w	8003db4 <_scanf_float+0x2a4>
 8003b8e:	455e      	cmp	r6, fp
 8003b90:	f200 8105 	bhi.w	8003d9e <_scanf_float+0x28e>
 8003b94:	2501      	movs	r5, #1
 8003b96:	4628      	mov	r0, r5
 8003b98:	b007      	add	sp, #28
 8003b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003ba2:	2a0d      	cmp	r2, #13
 8003ba4:	d8e6      	bhi.n	8003b74 <_scanf_float+0x64>
 8003ba6:	a101      	add	r1, pc, #4	; (adr r1, 8003bac <_scanf_float+0x9c>)
 8003ba8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bac:	08003ceb 	.word	0x08003ceb
 8003bb0:	08003b75 	.word	0x08003b75
 8003bb4:	08003b75 	.word	0x08003b75
 8003bb8:	08003b75 	.word	0x08003b75
 8003bbc:	08003d4b 	.word	0x08003d4b
 8003bc0:	08003d23 	.word	0x08003d23
 8003bc4:	08003b75 	.word	0x08003b75
 8003bc8:	08003b75 	.word	0x08003b75
 8003bcc:	08003cf9 	.word	0x08003cf9
 8003bd0:	08003b75 	.word	0x08003b75
 8003bd4:	08003b75 	.word	0x08003b75
 8003bd8:	08003b75 	.word	0x08003b75
 8003bdc:	08003b75 	.word	0x08003b75
 8003be0:	08003cb1 	.word	0x08003cb1
 8003be4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003be8:	e7db      	b.n	8003ba2 <_scanf_float+0x92>
 8003bea:	290e      	cmp	r1, #14
 8003bec:	d8c2      	bhi.n	8003b74 <_scanf_float+0x64>
 8003bee:	a001      	add	r0, pc, #4	; (adr r0, 8003bf4 <_scanf_float+0xe4>)
 8003bf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bf4:	08003ca3 	.word	0x08003ca3
 8003bf8:	08003b75 	.word	0x08003b75
 8003bfc:	08003ca3 	.word	0x08003ca3
 8003c00:	08003d37 	.word	0x08003d37
 8003c04:	08003b75 	.word	0x08003b75
 8003c08:	08003c51 	.word	0x08003c51
 8003c0c:	08003c8d 	.word	0x08003c8d
 8003c10:	08003c8d 	.word	0x08003c8d
 8003c14:	08003c8d 	.word	0x08003c8d
 8003c18:	08003c8d 	.word	0x08003c8d
 8003c1c:	08003c8d 	.word	0x08003c8d
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003c8d 	.word	0x08003c8d
 8003c28:	08003c8d 	.word	0x08003c8d
 8003c2c:	08003c8d 	.word	0x08003c8d
 8003c30:	2b6e      	cmp	r3, #110	; 0x6e
 8003c32:	d809      	bhi.n	8003c48 <_scanf_float+0x138>
 8003c34:	2b60      	cmp	r3, #96	; 0x60
 8003c36:	d8b2      	bhi.n	8003b9e <_scanf_float+0x8e>
 8003c38:	2b54      	cmp	r3, #84	; 0x54
 8003c3a:	d077      	beq.n	8003d2c <_scanf_float+0x21c>
 8003c3c:	2b59      	cmp	r3, #89	; 0x59
 8003c3e:	d199      	bne.n	8003b74 <_scanf_float+0x64>
 8003c40:	2d07      	cmp	r5, #7
 8003c42:	d197      	bne.n	8003b74 <_scanf_float+0x64>
 8003c44:	2508      	movs	r5, #8
 8003c46:	e029      	b.n	8003c9c <_scanf_float+0x18c>
 8003c48:	2b74      	cmp	r3, #116	; 0x74
 8003c4a:	d06f      	beq.n	8003d2c <_scanf_float+0x21c>
 8003c4c:	2b79      	cmp	r3, #121	; 0x79
 8003c4e:	e7f6      	b.n	8003c3e <_scanf_float+0x12e>
 8003c50:	6821      	ldr	r1, [r4, #0]
 8003c52:	05c8      	lsls	r0, r1, #23
 8003c54:	d51a      	bpl.n	8003c8c <_scanf_float+0x17c>
 8003c56:	9b02      	ldr	r3, [sp, #8]
 8003c58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003c5c:	6021      	str	r1, [r4, #0]
 8003c5e:	f109 0901 	add.w	r9, r9, #1
 8003c62:	b11b      	cbz	r3, 8003c6c <_scanf_float+0x15c>
 8003c64:	3b01      	subs	r3, #1
 8003c66:	3201      	adds	r2, #1
 8003c68:	9302      	str	r3, [sp, #8]
 8003c6a:	60a2      	str	r2, [r4, #8]
 8003c6c:	68a3      	ldr	r3, [r4, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	3301      	adds	r3, #1
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	f340 8084 	ble.w	8003d8c <_scanf_float+0x27c>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	e766      	b.n	8003b5a <_scanf_float+0x4a>
 8003c8c:	eb1a 0f05 	cmn.w	sl, r5
 8003c90:	f47f af70 	bne.w	8003b74 <_scanf_float+0x64>
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8003ca0:	e7e4      	b.n	8003c6c <_scanf_float+0x15c>
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	0610      	lsls	r0, r2, #24
 8003ca6:	f57f af65 	bpl.w	8003b74 <_scanf_float+0x64>
 8003caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cae:	e7f4      	b.n	8003c9a <_scanf_float+0x18a>
 8003cb0:	f1ba 0f00 	cmp.w	sl, #0
 8003cb4:	d10e      	bne.n	8003cd4 <_scanf_float+0x1c4>
 8003cb6:	f1b9 0f00 	cmp.w	r9, #0
 8003cba:	d10e      	bne.n	8003cda <_scanf_float+0x1ca>
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003cc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003cc6:	d108      	bne.n	8003cda <_scanf_float+0x1ca>
 8003cc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ccc:	f04f 0a01 	mov.w	sl, #1
 8003cd0:	6022      	str	r2, [r4, #0]
 8003cd2:	e7e3      	b.n	8003c9c <_scanf_float+0x18c>
 8003cd4:	f1ba 0f02 	cmp.w	sl, #2
 8003cd8:	d055      	beq.n	8003d86 <_scanf_float+0x276>
 8003cda:	2d01      	cmp	r5, #1
 8003cdc:	d002      	beq.n	8003ce4 <_scanf_float+0x1d4>
 8003cde:	2d04      	cmp	r5, #4
 8003ce0:	f47f af48 	bne.w	8003b74 <_scanf_float+0x64>
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	b2ed      	uxtb	r5, r5
 8003ce8:	e7d8      	b.n	8003c9c <_scanf_float+0x18c>
 8003cea:	f1ba 0f01 	cmp.w	sl, #1
 8003cee:	f47f af41 	bne.w	8003b74 <_scanf_float+0x64>
 8003cf2:	f04f 0a02 	mov.w	sl, #2
 8003cf6:	e7d1      	b.n	8003c9c <_scanf_float+0x18c>
 8003cf8:	b97d      	cbnz	r5, 8003d1a <_scanf_float+0x20a>
 8003cfa:	f1b9 0f00 	cmp.w	r9, #0
 8003cfe:	f47f af3c 	bne.w	8003b7a <_scanf_float+0x6a>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d0c:	f47f af39 	bne.w	8003b82 <_scanf_float+0x72>
 8003d10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d14:	2501      	movs	r5, #1
 8003d16:	6022      	str	r2, [r4, #0]
 8003d18:	e7c0      	b.n	8003c9c <_scanf_float+0x18c>
 8003d1a:	2d03      	cmp	r5, #3
 8003d1c:	d0e2      	beq.n	8003ce4 <_scanf_float+0x1d4>
 8003d1e:	2d05      	cmp	r5, #5
 8003d20:	e7de      	b.n	8003ce0 <_scanf_float+0x1d0>
 8003d22:	2d02      	cmp	r5, #2
 8003d24:	f47f af26 	bne.w	8003b74 <_scanf_float+0x64>
 8003d28:	2503      	movs	r5, #3
 8003d2a:	e7b7      	b.n	8003c9c <_scanf_float+0x18c>
 8003d2c:	2d06      	cmp	r5, #6
 8003d2e:	f47f af21 	bne.w	8003b74 <_scanf_float+0x64>
 8003d32:	2507      	movs	r5, #7
 8003d34:	e7b2      	b.n	8003c9c <_scanf_float+0x18c>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	0591      	lsls	r1, r2, #22
 8003d3a:	f57f af1b 	bpl.w	8003b74 <_scanf_float+0x64>
 8003d3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003d42:	6022      	str	r2, [r4, #0]
 8003d44:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d48:	e7a8      	b.n	8003c9c <_scanf_float+0x18c>
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003d50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003d54:	d006      	beq.n	8003d64 <_scanf_float+0x254>
 8003d56:	0550      	lsls	r0, r2, #21
 8003d58:	f57f af0c 	bpl.w	8003b74 <_scanf_float+0x64>
 8003d5c:	f1b9 0f00 	cmp.w	r9, #0
 8003d60:	f43f af0f 	beq.w	8003b82 <_scanf_float+0x72>
 8003d64:	0591      	lsls	r1, r2, #22
 8003d66:	bf58      	it	pl
 8003d68:	9901      	ldrpl	r1, [sp, #4]
 8003d6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d6e:	bf58      	it	pl
 8003d70:	eba9 0101 	subpl.w	r1, r9, r1
 8003d74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003d78:	f04f 0900 	mov.w	r9, #0
 8003d7c:	bf58      	it	pl
 8003d7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	e78a      	b.n	8003c9c <_scanf_float+0x18c>
 8003d86:	f04f 0a03 	mov.w	sl, #3
 8003d8a:	e787      	b.n	8003c9c <_scanf_float+0x18c>
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4640      	mov	r0, r8
 8003d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d94:	4798      	blx	r3
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f43f aedf 	beq.w	8003b5a <_scanf_float+0x4a>
 8003d9c:	e6ea      	b.n	8003b74 <_scanf_float+0x64>
 8003d9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003da2:	463a      	mov	r2, r7
 8003da4:	4640      	mov	r0, r8
 8003da6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003daa:	4798      	blx	r3
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	e6ec      	b.n	8003b8e <_scanf_float+0x7e>
 8003db4:	1e6b      	subs	r3, r5, #1
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d825      	bhi.n	8003e06 <_scanf_float+0x2f6>
 8003dba:	2d02      	cmp	r5, #2
 8003dbc:	d836      	bhi.n	8003e2c <_scanf_float+0x31c>
 8003dbe:	455e      	cmp	r6, fp
 8003dc0:	f67f aee8 	bls.w	8003b94 <_scanf_float+0x84>
 8003dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dc8:	463a      	mov	r2, r7
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dd0:	4798      	blx	r3
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	e7f1      	b.n	8003dbe <_scanf_float+0x2ae>
 8003dda:	9802      	ldr	r0, [sp, #8]
 8003ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003de0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003de4:	463a      	mov	r2, r7
 8003de6:	9002      	str	r0, [sp, #8]
 8003de8:	4640      	mov	r0, r8
 8003dea:	4798      	blx	r3
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003df6:	fa5f fa8a 	uxtb.w	sl, sl
 8003dfa:	f1ba 0f02 	cmp.w	sl, #2
 8003dfe:	d1ec      	bne.n	8003dda <_scanf_float+0x2ca>
 8003e00:	3d03      	subs	r5, #3
 8003e02:	b2ed      	uxtb	r5, r5
 8003e04:	1b76      	subs	r6, r6, r5
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	05da      	lsls	r2, r3, #23
 8003e0a:	d52f      	bpl.n	8003e6c <_scanf_float+0x35c>
 8003e0c:	055b      	lsls	r3, r3, #21
 8003e0e:	d510      	bpl.n	8003e32 <_scanf_float+0x322>
 8003e10:	455e      	cmp	r6, fp
 8003e12:	f67f aebf 	bls.w	8003b94 <_scanf_float+0x84>
 8003e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e22:	4798      	blx	r3
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	6123      	str	r3, [r4, #16]
 8003e2a:	e7f1      	b.n	8003e10 <_scanf_float+0x300>
 8003e2c:	46aa      	mov	sl, r5
 8003e2e:	9602      	str	r6, [sp, #8]
 8003e30:	e7df      	b.n	8003df2 <_scanf_float+0x2e2>
 8003e32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	2965      	cmp	r1, #101	; 0x65
 8003e3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	d00c      	beq.n	8003e60 <_scanf_float+0x350>
 8003e46:	2945      	cmp	r1, #69	; 0x45
 8003e48:	d00a      	beq.n	8003e60 <_scanf_float+0x350>
 8003e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e4e:	463a      	mov	r2, r7
 8003e50:	4640      	mov	r0, r8
 8003e52:	4798      	blx	r3
 8003e54:	6923      	ldr	r3, [r4, #16]
 8003e56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	1eb5      	subs	r5, r6, #2
 8003e5e:	6123      	str	r3, [r4, #16]
 8003e60:	463a      	mov	r2, r7
 8003e62:	4640      	mov	r0, r8
 8003e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e68:	4798      	blx	r3
 8003e6a:	462e      	mov	r6, r5
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	f015 0510 	ands.w	r5, r5, #16
 8003e72:	d159      	bne.n	8003f28 <_scanf_float+0x418>
 8003e74:	7035      	strb	r5, [r6, #0]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d11c      	bne.n	8003ebc <_scanf_float+0x3ac>
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	454b      	cmp	r3, r9
 8003e86:	eba3 0209 	sub.w	r2, r3, r9
 8003e8a:	d124      	bne.n	8003ed6 <_scanf_float+0x3c6>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4659      	mov	r1, fp
 8003e90:	4640      	mov	r0, r8
 8003e92:	f000 fe89 	bl	8004ba8 <_strtod_r>
 8003e96:	f8d4 c000 	ldr.w	ip, [r4]
 8003e9a:	9b03      	ldr	r3, [sp, #12]
 8003e9c:	f01c 0f02 	tst.w	ip, #2
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	460f      	mov	r7, r1
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	d021      	beq.n	8003eec <_scanf_float+0x3dc>
 8003ea8:	9903      	ldr	r1, [sp, #12]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	600a      	str	r2, [r1, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	e9c3 6700 	strd	r6, r7, [r3]
 8003eb4:	68e3      	ldr	r3, [r4, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60e3      	str	r3, [r4, #12]
 8003eba:	e66c      	b.n	8003b96 <_scanf_float+0x86>
 8003ebc:	9b04      	ldr	r3, [sp, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0e4      	beq.n	8003e8c <_scanf_float+0x37c>
 8003ec2:	9905      	ldr	r1, [sp, #20]
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4640      	mov	r0, r8
 8003eca:	3101      	adds	r1, #1
 8003ecc:	f000 fef8 	bl	8004cc0 <_strtol_r>
 8003ed0:	9b04      	ldr	r3, [sp, #16]
 8003ed2:	9e05      	ldr	r6, [sp, #20]
 8003ed4:	1ac2      	subs	r2, r0, r3
 8003ed6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003eda:	429e      	cmp	r6, r3
 8003edc:	bf28      	it	cs
 8003ede:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	4911      	ldr	r1, [pc, #68]	; (8003f2c <_scanf_float+0x41c>)
 8003ee6:	f000 f829 	bl	8003f3c <siprintf>
 8003eea:	e7cf      	b.n	8003e8c <_scanf_float+0x37c>
 8003eec:	f01c 0f04 	tst.w	ip, #4
 8003ef0:	f103 0e04 	add.w	lr, r3, #4
 8003ef4:	d003      	beq.n	8003efe <_scanf_float+0x3ee>
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	f8c1 e000 	str.w	lr, [r1]
 8003efc:	e7d7      	b.n	8003eae <_scanf_float+0x39e>
 8003efe:	9a03      	ldr	r2, [sp, #12]
 8003f00:	f8c2 e000 	str.w	lr, [r2]
 8003f04:	f8d3 8000 	ldr.w	r8, [r3]
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	f7fc fd7e 	bl	8000a0c <__aeabi_dcmpun>
 8003f10:	b128      	cbz	r0, 8003f1e <_scanf_float+0x40e>
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <_scanf_float+0x420>)
 8003f14:	f000 f80e 	bl	8003f34 <nanf>
 8003f18:	f8c8 0000 	str.w	r0, [r8]
 8003f1c:	e7ca      	b.n	8003eb4 <_scanf_float+0x3a4>
 8003f1e:	4630      	mov	r0, r6
 8003f20:	4639      	mov	r1, r7
 8003f22:	f7fc fdd1 	bl	8000ac8 <__aeabi_d2f>
 8003f26:	e7f7      	b.n	8003f18 <_scanf_float+0x408>
 8003f28:	2500      	movs	r5, #0
 8003f2a:	e634      	b.n	8003b96 <_scanf_float+0x86>
 8003f2c:	08007b04 	.word	0x08007b04
 8003f30:	08007f20 	.word	0x08007f20

08003f34 <nanf>:
 8003f34:	4800      	ldr	r0, [pc, #0]	; (8003f38 <nanf+0x4>)
 8003f36:	4770      	bx	lr
 8003f38:	7fc00000 	.word	0x7fc00000

08003f3c <siprintf>:
 8003f3c:	b40e      	push	{r1, r2, r3}
 8003f3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f42:	b500      	push	{lr}
 8003f44:	b09c      	sub	sp, #112	; 0x70
 8003f46:	ab1d      	add	r3, sp, #116	; 0x74
 8003f48:	9002      	str	r0, [sp, #8]
 8003f4a:	9006      	str	r0, [sp, #24]
 8003f4c:	9107      	str	r1, [sp, #28]
 8003f4e:	9104      	str	r1, [sp, #16]
 8003f50:	4808      	ldr	r0, [pc, #32]	; (8003f74 <siprintf+0x38>)
 8003f52:	4909      	ldr	r1, [pc, #36]	; (8003f78 <siprintf+0x3c>)
 8003f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f58:	9105      	str	r1, [sp, #20]
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	a902      	add	r1, sp, #8
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	f002 fe94 	bl	8006c8c <_svfiprintf_r>
 8003f64:	2200      	movs	r2, #0
 8003f66:	9b02      	ldr	r3, [sp, #8]
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	b01c      	add	sp, #112	; 0x70
 8003f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f70:	b003      	add	sp, #12
 8003f72:	4770      	bx	lr
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	ffff0208 	.word	0xffff0208

08003f7c <sulp>:
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	460f      	mov	r7, r1
 8003f82:	4690      	mov	r8, r2
 8003f84:	f002 fc2a 	bl	80067dc <__ulp>
 8003f88:	4604      	mov	r4, r0
 8003f8a:	460d      	mov	r5, r1
 8003f8c:	f1b8 0f00 	cmp.w	r8, #0
 8003f90:	d011      	beq.n	8003fb6 <sulp+0x3a>
 8003f92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003f96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dd0b      	ble.n	8003fb6 <sulp+0x3a>
 8003f9e:	2400      	movs	r4, #0
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003fa6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	f7fc fa93 	bl	80004d8 <__aeabi_dmul>
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003fc0 <_strtod_l>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	469b      	mov	fp, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	b0a1      	sub	sp, #132	; 0x84
 8003fca:	931c      	str	r3, [sp, #112]	; 0x70
 8003fcc:	4ba1      	ldr	r3, [pc, #644]	; (8004254 <_strtod_l+0x294>)
 8003fce:	4682      	mov	sl, r0
 8003fd0:	681f      	ldr	r7, [r3, #0]
 8003fd2:	460e      	mov	r6, r1
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8003fd8:	f7fc f8ba 	bl	8000150 <strlen>
 8003fdc:	f04f 0800 	mov.w	r8, #0
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	f04f 0900 	mov.w	r9, #0
 8003fe6:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fe8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fea:	781a      	ldrb	r2, [r3, #0]
 8003fec:	2a2b      	cmp	r2, #43	; 0x2b
 8003fee:	d04c      	beq.n	800408a <_strtod_l+0xca>
 8003ff0:	d83a      	bhi.n	8004068 <_strtod_l+0xa8>
 8003ff2:	2a0d      	cmp	r2, #13
 8003ff4:	d833      	bhi.n	800405e <_strtod_l+0x9e>
 8003ff6:	2a08      	cmp	r2, #8
 8003ff8:	d833      	bhi.n	8004062 <_strtod_l+0xa2>
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d03d      	beq.n	800407a <_strtod_l+0xba>
 8003ffe:	2300      	movs	r3, #0
 8004000:	930c      	str	r3, [sp, #48]	; 0x30
 8004002:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004004:	782b      	ldrb	r3, [r5, #0]
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	f040 80af 	bne.w	800416a <_strtod_l+0x1aa>
 800400c:	786b      	ldrb	r3, [r5, #1]
 800400e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004012:	2b58      	cmp	r3, #88	; 0x58
 8004014:	d16c      	bne.n	80040f0 <_strtod_l+0x130>
 8004016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004018:	4650      	mov	r0, sl
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	ab1c      	add	r3, sp, #112	; 0x70
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4a8d      	ldr	r2, [pc, #564]	; (8004258 <_strtod_l+0x298>)
 8004022:	f8cd b008 	str.w	fp, [sp, #8]
 8004026:	ab1d      	add	r3, sp, #116	; 0x74
 8004028:	a91b      	add	r1, sp, #108	; 0x6c
 800402a:	f001 fd2f 	bl	8005a8c <__gethex>
 800402e:	f010 0607 	ands.w	r6, r0, #7
 8004032:	4604      	mov	r4, r0
 8004034:	d005      	beq.n	8004042 <_strtod_l+0x82>
 8004036:	2e06      	cmp	r6, #6
 8004038:	d129      	bne.n	800408e <_strtod_l+0xce>
 800403a:	2300      	movs	r3, #0
 800403c:	3501      	adds	r5, #1
 800403e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004040:	930c      	str	r3, [sp, #48]	; 0x30
 8004042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 8596 	bne.w	8004b76 <_strtod_l+0xbb6>
 800404a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800404c:	b1d3      	cbz	r3, 8004084 <_strtod_l+0xc4>
 800404e:	4642      	mov	r2, r8
 8004050:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	b021      	add	sp, #132	; 0x84
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405e:	2a20      	cmp	r2, #32
 8004060:	d1cd      	bne.n	8003ffe <_strtod_l+0x3e>
 8004062:	3301      	adds	r3, #1
 8004064:	931b      	str	r3, [sp, #108]	; 0x6c
 8004066:	e7bf      	b.n	8003fe8 <_strtod_l+0x28>
 8004068:	2a2d      	cmp	r2, #45	; 0x2d
 800406a:	d1c8      	bne.n	8003ffe <_strtod_l+0x3e>
 800406c:	2201      	movs	r2, #1
 800406e:	920c      	str	r2, [sp, #48]	; 0x30
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	921b      	str	r2, [sp, #108]	; 0x6c
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1c3      	bne.n	8004002 <_strtod_l+0x42>
 800407a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800407c:	961b      	str	r6, [sp, #108]	; 0x6c
 800407e:	2b00      	cmp	r3, #0
 8004080:	f040 8577 	bne.w	8004b72 <_strtod_l+0xbb2>
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	e7e4      	b.n	8004054 <_strtod_l+0x94>
 800408a:	2200      	movs	r2, #0
 800408c:	e7ef      	b.n	800406e <_strtod_l+0xae>
 800408e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004090:	b13a      	cbz	r2, 80040a2 <_strtod_l+0xe2>
 8004092:	2135      	movs	r1, #53	; 0x35
 8004094:	a81e      	add	r0, sp, #120	; 0x78
 8004096:	f002 fca5 	bl	80069e4 <__copybits>
 800409a:	4650      	mov	r0, sl
 800409c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800409e:	f002 f86d 	bl	800617c <_Bfree>
 80040a2:	3e01      	subs	r6, #1
 80040a4:	2e05      	cmp	r6, #5
 80040a6:	d807      	bhi.n	80040b8 <_strtod_l+0xf8>
 80040a8:	e8df f006 	tbb	[pc, r6]
 80040ac:	1d180b0e 	.word	0x1d180b0e
 80040b0:	030e      	.short	0x030e
 80040b2:	f04f 0900 	mov.w	r9, #0
 80040b6:	46c8      	mov	r8, r9
 80040b8:	0721      	lsls	r1, r4, #28
 80040ba:	d5c2      	bpl.n	8004042 <_strtod_l+0x82>
 80040bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80040c0:	e7bf      	b.n	8004042 <_strtod_l+0x82>
 80040c2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80040c6:	e7f7      	b.n	80040b8 <_strtod_l+0xf8>
 80040c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80040ca:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80040ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80040d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80040da:	e7ed      	b.n	80040b8 <_strtod_l+0xf8>
 80040dc:	f04f 0800 	mov.w	r8, #0
 80040e0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800425c <_strtod_l+0x29c>
 80040e4:	e7e8      	b.n	80040b8 <_strtod_l+0xf8>
 80040e6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80040ea:	f04f 38ff 	mov.w	r8, #4294967295
 80040ee:	e7e3      	b.n	80040b8 <_strtod_l+0xf8>
 80040f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	921b      	str	r2, [sp, #108]	; 0x6c
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b30      	cmp	r3, #48	; 0x30
 80040fa:	d0f9      	beq.n	80040f0 <_strtod_l+0x130>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0a0      	beq.n	8004042 <_strtod_l+0x82>
 8004100:	2301      	movs	r3, #1
 8004102:	9307      	str	r3, [sp, #28]
 8004104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004106:	220a      	movs	r2, #10
 8004108:	9308      	str	r3, [sp, #32]
 800410a:	2300      	movs	r3, #0
 800410c:	469b      	mov	fp, r3
 800410e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004112:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004114:	7805      	ldrb	r5, [r0, #0]
 8004116:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800411a:	b2d9      	uxtb	r1, r3
 800411c:	2909      	cmp	r1, #9
 800411e:	d926      	bls.n	800416e <_strtod_l+0x1ae>
 8004120:	4622      	mov	r2, r4
 8004122:	4639      	mov	r1, r7
 8004124:	f002 fec8 	bl	8006eb8 <strncmp>
 8004128:	2800      	cmp	r0, #0
 800412a:	d032      	beq.n	8004192 <_strtod_l+0x1d2>
 800412c:	2000      	movs	r0, #0
 800412e:	462b      	mov	r3, r5
 8004130:	465c      	mov	r4, fp
 8004132:	4602      	mov	r2, r0
 8004134:	9004      	str	r0, [sp, #16]
 8004136:	2b65      	cmp	r3, #101	; 0x65
 8004138:	d001      	beq.n	800413e <_strtod_l+0x17e>
 800413a:	2b45      	cmp	r3, #69	; 0x45
 800413c:	d113      	bne.n	8004166 <_strtod_l+0x1a6>
 800413e:	b91c      	cbnz	r4, 8004148 <_strtod_l+0x188>
 8004140:	9b07      	ldr	r3, [sp, #28]
 8004142:	4303      	orrs	r3, r0
 8004144:	d099      	beq.n	800407a <_strtod_l+0xba>
 8004146:	2400      	movs	r4, #0
 8004148:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800414a:	1c73      	adds	r3, r6, #1
 800414c:	931b      	str	r3, [sp, #108]	; 0x6c
 800414e:	7873      	ldrb	r3, [r6, #1]
 8004150:	2b2b      	cmp	r3, #43	; 0x2b
 8004152:	d078      	beq.n	8004246 <_strtod_l+0x286>
 8004154:	2b2d      	cmp	r3, #45	; 0x2d
 8004156:	d07b      	beq.n	8004250 <_strtod_l+0x290>
 8004158:	2700      	movs	r7, #0
 800415a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800415e:	2909      	cmp	r1, #9
 8004160:	f240 8082 	bls.w	8004268 <_strtod_l+0x2a8>
 8004164:	961b      	str	r6, [sp, #108]	; 0x6c
 8004166:	2500      	movs	r5, #0
 8004168:	e09e      	b.n	80042a8 <_strtod_l+0x2e8>
 800416a:	2300      	movs	r3, #0
 800416c:	e7c9      	b.n	8004102 <_strtod_l+0x142>
 800416e:	f1bb 0f08 	cmp.w	fp, #8
 8004172:	bfd5      	itete	le
 8004174:	9906      	ldrle	r1, [sp, #24]
 8004176:	9905      	ldrgt	r1, [sp, #20]
 8004178:	fb02 3301 	mlale	r3, r2, r1, r3
 800417c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004180:	f100 0001 	add.w	r0, r0, #1
 8004184:	bfd4      	ite	le
 8004186:	9306      	strle	r3, [sp, #24]
 8004188:	9305      	strgt	r3, [sp, #20]
 800418a:	f10b 0b01 	add.w	fp, fp, #1
 800418e:	901b      	str	r0, [sp, #108]	; 0x6c
 8004190:	e7bf      	b.n	8004112 <_strtod_l+0x152>
 8004192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004194:	191a      	adds	r2, r3, r4
 8004196:	921b      	str	r2, [sp, #108]	; 0x6c
 8004198:	5d1b      	ldrb	r3, [r3, r4]
 800419a:	f1bb 0f00 	cmp.w	fp, #0
 800419e:	d036      	beq.n	800420e <_strtod_l+0x24e>
 80041a0:	465c      	mov	r4, fp
 80041a2:	9004      	str	r0, [sp, #16]
 80041a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80041a8:	2a09      	cmp	r2, #9
 80041aa:	d912      	bls.n	80041d2 <_strtod_l+0x212>
 80041ac:	2201      	movs	r2, #1
 80041ae:	e7c2      	b.n	8004136 <_strtod_l+0x176>
 80041b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041b2:	3001      	adds	r0, #1
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	921b      	str	r2, [sp, #108]	; 0x6c
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	2b30      	cmp	r3, #48	; 0x30
 80041bc:	d0f8      	beq.n	80041b0 <_strtod_l+0x1f0>
 80041be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80041c2:	2a08      	cmp	r2, #8
 80041c4:	f200 84dc 	bhi.w	8004b80 <_strtod_l+0xbc0>
 80041c8:	9004      	str	r0, [sp, #16]
 80041ca:	2000      	movs	r0, #0
 80041cc:	4604      	mov	r4, r0
 80041ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80041d0:	9208      	str	r2, [sp, #32]
 80041d2:	3b30      	subs	r3, #48	; 0x30
 80041d4:	f100 0201 	add.w	r2, r0, #1
 80041d8:	d013      	beq.n	8004202 <_strtod_l+0x242>
 80041da:	9904      	ldr	r1, [sp, #16]
 80041dc:	1905      	adds	r5, r0, r4
 80041de:	4411      	add	r1, r2
 80041e0:	9104      	str	r1, [sp, #16]
 80041e2:	4622      	mov	r2, r4
 80041e4:	210a      	movs	r1, #10
 80041e6:	42aa      	cmp	r2, r5
 80041e8:	d113      	bne.n	8004212 <_strtod_l+0x252>
 80041ea:	1822      	adds	r2, r4, r0
 80041ec:	2a08      	cmp	r2, #8
 80041ee:	f104 0401 	add.w	r4, r4, #1
 80041f2:	4404      	add	r4, r0
 80041f4:	dc1b      	bgt.n	800422e <_strtod_l+0x26e>
 80041f6:	220a      	movs	r2, #10
 80041f8:	9906      	ldr	r1, [sp, #24]
 80041fa:	fb02 3301 	mla	r3, r2, r1, r3
 80041fe:	9306      	str	r3, [sp, #24]
 8004200:	2200      	movs	r2, #0
 8004202:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004204:	4610      	mov	r0, r2
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	911b      	str	r1, [sp, #108]	; 0x6c
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	e7ca      	b.n	80041a4 <_strtod_l+0x1e4>
 800420e:	4658      	mov	r0, fp
 8004210:	e7d3      	b.n	80041ba <_strtod_l+0x1fa>
 8004212:	2a08      	cmp	r2, #8
 8004214:	dc04      	bgt.n	8004220 <_strtod_l+0x260>
 8004216:	9f06      	ldr	r7, [sp, #24]
 8004218:	434f      	muls	r7, r1
 800421a:	9706      	str	r7, [sp, #24]
 800421c:	3201      	adds	r2, #1
 800421e:	e7e2      	b.n	80041e6 <_strtod_l+0x226>
 8004220:	1c57      	adds	r7, r2, #1
 8004222:	2f10      	cmp	r7, #16
 8004224:	bfde      	ittt	le
 8004226:	9f05      	ldrle	r7, [sp, #20]
 8004228:	434f      	mulle	r7, r1
 800422a:	9705      	strle	r7, [sp, #20]
 800422c:	e7f6      	b.n	800421c <_strtod_l+0x25c>
 800422e:	2c10      	cmp	r4, #16
 8004230:	bfdf      	itttt	le
 8004232:	220a      	movle	r2, #10
 8004234:	9905      	ldrle	r1, [sp, #20]
 8004236:	fb02 3301 	mlale	r3, r2, r1, r3
 800423a:	9305      	strle	r3, [sp, #20]
 800423c:	e7e0      	b.n	8004200 <_strtod_l+0x240>
 800423e:	2300      	movs	r3, #0
 8004240:	2201      	movs	r2, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	e77c      	b.n	8004140 <_strtod_l+0x180>
 8004246:	2700      	movs	r7, #0
 8004248:	1cb3      	adds	r3, r6, #2
 800424a:	931b      	str	r3, [sp, #108]	; 0x6c
 800424c:	78b3      	ldrb	r3, [r6, #2]
 800424e:	e784      	b.n	800415a <_strtod_l+0x19a>
 8004250:	2701      	movs	r7, #1
 8004252:	e7f9      	b.n	8004248 <_strtod_l+0x288>
 8004254:	08007d60 	.word	0x08007d60
 8004258:	08007b0c 	.word	0x08007b0c
 800425c:	7ff00000 	.word	0x7ff00000
 8004260:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	911b      	str	r1, [sp, #108]	; 0x6c
 8004266:	785b      	ldrb	r3, [r3, #1]
 8004268:	2b30      	cmp	r3, #48	; 0x30
 800426a:	d0f9      	beq.n	8004260 <_strtod_l+0x2a0>
 800426c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004270:	2908      	cmp	r1, #8
 8004272:	f63f af78 	bhi.w	8004166 <_strtod_l+0x1a6>
 8004276:	f04f 0e0a 	mov.w	lr, #10
 800427a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800427e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004280:	9309      	str	r3, [sp, #36]	; 0x24
 8004282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	911b      	str	r1, [sp, #108]	; 0x6c
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800428e:	2d09      	cmp	r5, #9
 8004290:	d935      	bls.n	80042fe <_strtod_l+0x33e>
 8004292:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004294:	1b49      	subs	r1, r1, r5
 8004296:	2908      	cmp	r1, #8
 8004298:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800429c:	dc02      	bgt.n	80042a4 <_strtod_l+0x2e4>
 800429e:	4565      	cmp	r5, ip
 80042a0:	bfa8      	it	ge
 80042a2:	4665      	movge	r5, ip
 80042a4:	b107      	cbz	r7, 80042a8 <_strtod_l+0x2e8>
 80042a6:	426d      	negs	r5, r5
 80042a8:	2c00      	cmp	r4, #0
 80042aa:	d14c      	bne.n	8004346 <_strtod_l+0x386>
 80042ac:	9907      	ldr	r1, [sp, #28]
 80042ae:	4301      	orrs	r1, r0
 80042b0:	f47f aec7 	bne.w	8004042 <_strtod_l+0x82>
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	f47f aee0 	bne.w	800407a <_strtod_l+0xba>
 80042ba:	2b69      	cmp	r3, #105	; 0x69
 80042bc:	d026      	beq.n	800430c <_strtod_l+0x34c>
 80042be:	dc23      	bgt.n	8004308 <_strtod_l+0x348>
 80042c0:	2b49      	cmp	r3, #73	; 0x49
 80042c2:	d023      	beq.n	800430c <_strtod_l+0x34c>
 80042c4:	2b4e      	cmp	r3, #78	; 0x4e
 80042c6:	f47f aed8 	bne.w	800407a <_strtod_l+0xba>
 80042ca:	499c      	ldr	r1, [pc, #624]	; (800453c <_strtod_l+0x57c>)
 80042cc:	a81b      	add	r0, sp, #108	; 0x6c
 80042ce:	f001 fe2b 	bl	8005f28 <__match>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f43f aed1 	beq.w	800407a <_strtod_l+0xba>
 80042d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b28      	cmp	r3, #40	; 0x28
 80042de:	d12c      	bne.n	800433a <_strtod_l+0x37a>
 80042e0:	4997      	ldr	r1, [pc, #604]	; (8004540 <_strtod_l+0x580>)
 80042e2:	aa1e      	add	r2, sp, #120	; 0x78
 80042e4:	a81b      	add	r0, sp, #108	; 0x6c
 80042e6:	f001 fe33 	bl	8005f50 <__hexnan>
 80042ea:	2805      	cmp	r0, #5
 80042ec:	d125      	bne.n	800433a <_strtod_l+0x37a>
 80042ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042f0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80042f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80042f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80042fc:	e6a1      	b.n	8004042 <_strtod_l+0x82>
 80042fe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004302:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004306:	e7bc      	b.n	8004282 <_strtod_l+0x2c2>
 8004308:	2b6e      	cmp	r3, #110	; 0x6e
 800430a:	e7dc      	b.n	80042c6 <_strtod_l+0x306>
 800430c:	498d      	ldr	r1, [pc, #564]	; (8004544 <_strtod_l+0x584>)
 800430e:	a81b      	add	r0, sp, #108	; 0x6c
 8004310:	f001 fe0a 	bl	8005f28 <__match>
 8004314:	2800      	cmp	r0, #0
 8004316:	f43f aeb0 	beq.w	800407a <_strtod_l+0xba>
 800431a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800431c:	498a      	ldr	r1, [pc, #552]	; (8004548 <_strtod_l+0x588>)
 800431e:	3b01      	subs	r3, #1
 8004320:	a81b      	add	r0, sp, #108	; 0x6c
 8004322:	931b      	str	r3, [sp, #108]	; 0x6c
 8004324:	f001 fe00 	bl	8005f28 <__match>
 8004328:	b910      	cbnz	r0, 8004330 <_strtod_l+0x370>
 800432a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800432c:	3301      	adds	r3, #1
 800432e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004330:	f04f 0800 	mov.w	r8, #0
 8004334:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004558 <_strtod_l+0x598>
 8004338:	e683      	b.n	8004042 <_strtod_l+0x82>
 800433a:	4884      	ldr	r0, [pc, #528]	; (800454c <_strtod_l+0x58c>)
 800433c:	f002 fda6 	bl	8006e8c <nan>
 8004340:	4680      	mov	r8, r0
 8004342:	4689      	mov	r9, r1
 8004344:	e67d      	b.n	8004042 <_strtod_l+0x82>
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	f1bb 0f00 	cmp.w	fp, #0
 800434c:	bf08      	it	eq
 800434e:	46a3      	moveq	fp, r4
 8004350:	1aeb      	subs	r3, r5, r3
 8004352:	2c10      	cmp	r4, #16
 8004354:	9806      	ldr	r0, [sp, #24]
 8004356:	4626      	mov	r6, r4
 8004358:	9307      	str	r3, [sp, #28]
 800435a:	bfa8      	it	ge
 800435c:	2610      	movge	r6, #16
 800435e:	f7fc f841 	bl	80003e4 <__aeabi_ui2d>
 8004362:	2c09      	cmp	r4, #9
 8004364:	4680      	mov	r8, r0
 8004366:	4689      	mov	r9, r1
 8004368:	dd13      	ble.n	8004392 <_strtod_l+0x3d2>
 800436a:	4b79      	ldr	r3, [pc, #484]	; (8004550 <_strtod_l+0x590>)
 800436c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004370:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	4680      	mov	r8, r0
 800437a:	9805      	ldr	r0, [sp, #20]
 800437c:	4689      	mov	r9, r1
 800437e:	f7fc f831 	bl	80003e4 <__aeabi_ui2d>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4640      	mov	r0, r8
 8004388:	4649      	mov	r1, r9
 800438a:	f7fb feef 	bl	800016c <__adddf3>
 800438e:	4680      	mov	r8, r0
 8004390:	4689      	mov	r9, r1
 8004392:	2c0f      	cmp	r4, #15
 8004394:	dc36      	bgt.n	8004404 <_strtod_l+0x444>
 8004396:	9b07      	ldr	r3, [sp, #28]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f43f ae52 	beq.w	8004042 <_strtod_l+0x82>
 800439e:	dd22      	ble.n	80043e6 <_strtod_l+0x426>
 80043a0:	2b16      	cmp	r3, #22
 80043a2:	dc09      	bgt.n	80043b8 <_strtod_l+0x3f8>
 80043a4:	4c6a      	ldr	r4, [pc, #424]	; (8004550 <_strtod_l+0x590>)
 80043a6:	4642      	mov	r2, r8
 80043a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80043ac:	464b      	mov	r3, r9
 80043ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80043b2:	f7fc f891 	bl	80004d8 <__aeabi_dmul>
 80043b6:	e7c3      	b.n	8004340 <_strtod_l+0x380>
 80043b8:	9a07      	ldr	r2, [sp, #28]
 80043ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80043be:	4293      	cmp	r3, r2
 80043c0:	db20      	blt.n	8004404 <_strtod_l+0x444>
 80043c2:	4d63      	ldr	r5, [pc, #396]	; (8004550 <_strtod_l+0x590>)
 80043c4:	f1c4 040f 	rsb	r4, r4, #15
 80043c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80043cc:	4642      	mov	r2, r8
 80043ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043d2:	464b      	mov	r3, r9
 80043d4:	f7fc f880 	bl	80004d8 <__aeabi_dmul>
 80043d8:	9b07      	ldr	r3, [sp, #28]
 80043da:	1b1c      	subs	r4, r3, r4
 80043dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80043e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043e4:	e7e5      	b.n	80043b2 <_strtod_l+0x3f2>
 80043e6:	9b07      	ldr	r3, [sp, #28]
 80043e8:	3316      	adds	r3, #22
 80043ea:	db0b      	blt.n	8004404 <_strtod_l+0x444>
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	4a58      	ldr	r2, [pc, #352]	; (8004550 <_strtod_l+0x590>)
 80043f0:	1b5d      	subs	r5, r3, r5
 80043f2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80043f6:	4640      	mov	r0, r8
 80043f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043fc:	4649      	mov	r1, r9
 80043fe:	f7fc f995 	bl	800072c <__aeabi_ddiv>
 8004402:	e79d      	b.n	8004340 <_strtod_l+0x380>
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	1ba6      	subs	r6, r4, r6
 8004408:	441e      	add	r6, r3
 800440a:	2e00      	cmp	r6, #0
 800440c:	dd71      	ble.n	80044f2 <_strtod_l+0x532>
 800440e:	f016 030f 	ands.w	r3, r6, #15
 8004412:	d00a      	beq.n	800442a <_strtod_l+0x46a>
 8004414:	494e      	ldr	r1, [pc, #312]	; (8004550 <_strtod_l+0x590>)
 8004416:	4642      	mov	r2, r8
 8004418:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800441c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004420:	464b      	mov	r3, r9
 8004422:	f7fc f859 	bl	80004d8 <__aeabi_dmul>
 8004426:	4680      	mov	r8, r0
 8004428:	4689      	mov	r9, r1
 800442a:	f036 060f 	bics.w	r6, r6, #15
 800442e:	d050      	beq.n	80044d2 <_strtod_l+0x512>
 8004430:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004434:	dd27      	ble.n	8004486 <_strtod_l+0x4c6>
 8004436:	f04f 0b00 	mov.w	fp, #0
 800443a:	f8cd b010 	str.w	fp, [sp, #16]
 800443e:	f8cd b020 	str.w	fp, [sp, #32]
 8004442:	f8cd b018 	str.w	fp, [sp, #24]
 8004446:	2322      	movs	r3, #34	; 0x22
 8004448:	f04f 0800 	mov.w	r8, #0
 800444c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004558 <_strtod_l+0x598>
 8004450:	f8ca 3000 	str.w	r3, [sl]
 8004454:	9b08      	ldr	r3, [sp, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f43f adf3 	beq.w	8004042 <_strtod_l+0x82>
 800445c:	4650      	mov	r0, sl
 800445e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004460:	f001 fe8c 	bl	800617c <_Bfree>
 8004464:	4650      	mov	r0, sl
 8004466:	9906      	ldr	r1, [sp, #24]
 8004468:	f001 fe88 	bl	800617c <_Bfree>
 800446c:	4650      	mov	r0, sl
 800446e:	9904      	ldr	r1, [sp, #16]
 8004470:	f001 fe84 	bl	800617c <_Bfree>
 8004474:	4650      	mov	r0, sl
 8004476:	9908      	ldr	r1, [sp, #32]
 8004478:	f001 fe80 	bl	800617c <_Bfree>
 800447c:	4659      	mov	r1, fp
 800447e:	4650      	mov	r0, sl
 8004480:	f001 fe7c 	bl	800617c <_Bfree>
 8004484:	e5dd      	b.n	8004042 <_strtod_l+0x82>
 8004486:	2300      	movs	r3, #0
 8004488:	4640      	mov	r0, r8
 800448a:	4649      	mov	r1, r9
 800448c:	461f      	mov	r7, r3
 800448e:	1136      	asrs	r6, r6, #4
 8004490:	2e01      	cmp	r6, #1
 8004492:	dc21      	bgt.n	80044d8 <_strtod_l+0x518>
 8004494:	b10b      	cbz	r3, 800449a <_strtod_l+0x4da>
 8004496:	4680      	mov	r8, r0
 8004498:	4689      	mov	r9, r1
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <_strtod_l+0x594>)
 800449c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80044a0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80044a4:	4642      	mov	r2, r8
 80044a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044aa:	464b      	mov	r3, r9
 80044ac:	f7fc f814 	bl	80004d8 <__aeabi_dmul>
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <_strtod_l+0x598>)
 80044b2:	460a      	mov	r2, r1
 80044b4:	400b      	ands	r3, r1
 80044b6:	4929      	ldr	r1, [pc, #164]	; (800455c <_strtod_l+0x59c>)
 80044b8:	4680      	mov	r8, r0
 80044ba:	428b      	cmp	r3, r1
 80044bc:	d8bb      	bhi.n	8004436 <_strtod_l+0x476>
 80044be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80044c2:	428b      	cmp	r3, r1
 80044c4:	bf86      	itte	hi
 80044c6:	f04f 38ff 	movhi.w	r8, #4294967295
 80044ca:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004560 <_strtod_l+0x5a0>
 80044ce:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80044d2:	2300      	movs	r3, #0
 80044d4:	9305      	str	r3, [sp, #20]
 80044d6:	e07e      	b.n	80045d6 <_strtod_l+0x616>
 80044d8:	07f2      	lsls	r2, r6, #31
 80044da:	d507      	bpl.n	80044ec <_strtod_l+0x52c>
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <_strtod_l+0x594>)
 80044de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f7fb fff7 	bl	80004d8 <__aeabi_dmul>
 80044ea:	2301      	movs	r3, #1
 80044ec:	3701      	adds	r7, #1
 80044ee:	1076      	asrs	r6, r6, #1
 80044f0:	e7ce      	b.n	8004490 <_strtod_l+0x4d0>
 80044f2:	d0ee      	beq.n	80044d2 <_strtod_l+0x512>
 80044f4:	4276      	negs	r6, r6
 80044f6:	f016 020f 	ands.w	r2, r6, #15
 80044fa:	d00a      	beq.n	8004512 <_strtod_l+0x552>
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <_strtod_l+0x590>)
 80044fe:	4640      	mov	r0, r8
 8004500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004504:	4649      	mov	r1, r9
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f7fc f90f 	bl	800072c <__aeabi_ddiv>
 800450e:	4680      	mov	r8, r0
 8004510:	4689      	mov	r9, r1
 8004512:	1136      	asrs	r6, r6, #4
 8004514:	d0dd      	beq.n	80044d2 <_strtod_l+0x512>
 8004516:	2e1f      	cmp	r6, #31
 8004518:	dd24      	ble.n	8004564 <_strtod_l+0x5a4>
 800451a:	f04f 0b00 	mov.w	fp, #0
 800451e:	f8cd b010 	str.w	fp, [sp, #16]
 8004522:	f8cd b020 	str.w	fp, [sp, #32]
 8004526:	f8cd b018 	str.w	fp, [sp, #24]
 800452a:	2322      	movs	r3, #34	; 0x22
 800452c:	f04f 0800 	mov.w	r8, #0
 8004530:	f04f 0900 	mov.w	r9, #0
 8004534:	f8ca 3000 	str.w	r3, [sl]
 8004538:	e78c      	b.n	8004454 <_strtod_l+0x494>
 800453a:	bf00      	nop
 800453c:	08007add 	.word	0x08007add
 8004540:	08007b20 	.word	0x08007b20
 8004544:	08007ad5 	.word	0x08007ad5
 8004548:	08007c64 	.word	0x08007c64
 800454c:	08007f20 	.word	0x08007f20
 8004550:	08007e00 	.word	0x08007e00
 8004554:	08007dd8 	.word	0x08007dd8
 8004558:	7ff00000 	.word	0x7ff00000
 800455c:	7ca00000 	.word	0x7ca00000
 8004560:	7fefffff 	.word	0x7fefffff
 8004564:	f016 0310 	ands.w	r3, r6, #16
 8004568:	bf18      	it	ne
 800456a:	236a      	movne	r3, #106	; 0x6a
 800456c:	4640      	mov	r0, r8
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	4649      	mov	r1, r9
 8004572:	2300      	movs	r3, #0
 8004574:	4fb2      	ldr	r7, [pc, #712]	; (8004840 <_strtod_l+0x880>)
 8004576:	07f2      	lsls	r2, r6, #31
 8004578:	d504      	bpl.n	8004584 <_strtod_l+0x5c4>
 800457a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457e:	f7fb ffab 	bl	80004d8 <__aeabi_dmul>
 8004582:	2301      	movs	r3, #1
 8004584:	1076      	asrs	r6, r6, #1
 8004586:	f107 0708 	add.w	r7, r7, #8
 800458a:	d1f4      	bne.n	8004576 <_strtod_l+0x5b6>
 800458c:	b10b      	cbz	r3, 8004592 <_strtod_l+0x5d2>
 800458e:	4680      	mov	r8, r0
 8004590:	4689      	mov	r9, r1
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	b1bb      	cbz	r3, 80045c6 <_strtod_l+0x606>
 8004596:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800459a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800459e:	2b00      	cmp	r3, #0
 80045a0:	4649      	mov	r1, r9
 80045a2:	dd10      	ble.n	80045c6 <_strtod_l+0x606>
 80045a4:	2b1f      	cmp	r3, #31
 80045a6:	f340 812b 	ble.w	8004800 <_strtod_l+0x840>
 80045aa:	2b34      	cmp	r3, #52	; 0x34
 80045ac:	bfd8      	it	le
 80045ae:	f04f 32ff 	movle.w	r2, #4294967295
 80045b2:	f04f 0800 	mov.w	r8, #0
 80045b6:	bfcf      	iteee	gt
 80045b8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80045bc:	3b20      	suble	r3, #32
 80045be:	fa02 f303 	lslle.w	r3, r2, r3
 80045c2:	ea03 0901 	andle.w	r9, r3, r1
 80045c6:	2200      	movs	r2, #0
 80045c8:	2300      	movs	r3, #0
 80045ca:	4640      	mov	r0, r8
 80045cc:	4649      	mov	r1, r9
 80045ce:	f7fc f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1a1      	bne.n	800451a <_strtod_l+0x55a>
 80045d6:	9b06      	ldr	r3, [sp, #24]
 80045d8:	465a      	mov	r2, fp
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4650      	mov	r0, sl
 80045de:	4623      	mov	r3, r4
 80045e0:	9908      	ldr	r1, [sp, #32]
 80045e2:	f001 fe37 	bl	8006254 <__s2b>
 80045e6:	9008      	str	r0, [sp, #32]
 80045e8:	2800      	cmp	r0, #0
 80045ea:	f43f af24 	beq.w	8004436 <_strtod_l+0x476>
 80045ee:	9b04      	ldr	r3, [sp, #16]
 80045f0:	f04f 0b00 	mov.w	fp, #0
 80045f4:	1b5d      	subs	r5, r3, r5
 80045f6:	9b07      	ldr	r3, [sp, #28]
 80045f8:	f8cd b010 	str.w	fp, [sp, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bfb4      	ite	lt
 8004600:	462b      	movlt	r3, r5
 8004602:	2300      	movge	r3, #0
 8004604:	930e      	str	r3, [sp, #56]	; 0x38
 8004606:	9b07      	ldr	r3, [sp, #28]
 8004608:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800460c:	9316      	str	r3, [sp, #88]	; 0x58
 800460e:	9b08      	ldr	r3, [sp, #32]
 8004610:	4650      	mov	r0, sl
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	f001 fd72 	bl	80060fc <_Balloc>
 8004618:	9006      	str	r0, [sp, #24]
 800461a:	2800      	cmp	r0, #0
 800461c:	f43f af13 	beq.w	8004446 <_strtod_l+0x486>
 8004620:	9b08      	ldr	r3, [sp, #32]
 8004622:	300c      	adds	r0, #12
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	f103 010c 	add.w	r1, r3, #12
 800462a:	3202      	adds	r2, #2
 800462c:	0092      	lsls	r2, r2, #2
 800462e:	f001 fd57 	bl	80060e0 <memcpy>
 8004632:	ab1e      	add	r3, sp, #120	; 0x78
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	ab1d      	add	r3, sp, #116	; 0x74
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4642      	mov	r2, r8
 800463c:	464b      	mov	r3, r9
 800463e:	4650      	mov	r0, sl
 8004640:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004644:	f002 f944 	bl	80068d0 <__d2b>
 8004648:	901c      	str	r0, [sp, #112]	; 0x70
 800464a:	2800      	cmp	r0, #0
 800464c:	f43f aefb 	beq.w	8004446 <_strtod_l+0x486>
 8004650:	2101      	movs	r1, #1
 8004652:	4650      	mov	r0, sl
 8004654:	f001 fe96 	bl	8006384 <__i2b>
 8004658:	4603      	mov	r3, r0
 800465a:	9004      	str	r0, [sp, #16]
 800465c:	2800      	cmp	r0, #0
 800465e:	f43f aef2 	beq.w	8004446 <_strtod_l+0x486>
 8004662:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004664:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004666:	2d00      	cmp	r5, #0
 8004668:	bfab      	itete	ge
 800466a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800466c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800466e:	18ee      	addge	r6, r5, r3
 8004670:	1b5c      	sublt	r4, r3, r5
 8004672:	9b05      	ldr	r3, [sp, #20]
 8004674:	bfa8      	it	ge
 8004676:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004678:	eba5 0503 	sub.w	r5, r5, r3
 800467c:	4415      	add	r5, r2
 800467e:	4b71      	ldr	r3, [pc, #452]	; (8004844 <_strtod_l+0x884>)
 8004680:	f105 35ff 	add.w	r5, r5, #4294967295
 8004684:	bfb8      	it	lt
 8004686:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004688:	429d      	cmp	r5, r3
 800468a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800468e:	f280 80c9 	bge.w	8004824 <_strtod_l+0x864>
 8004692:	1b5b      	subs	r3, r3, r5
 8004694:	2b1f      	cmp	r3, #31
 8004696:	f04f 0701 	mov.w	r7, #1
 800469a:	eba2 0203 	sub.w	r2, r2, r3
 800469e:	f300 80b6 	bgt.w	800480e <_strtod_l+0x84e>
 80046a2:	2500      	movs	r5, #0
 80046a4:	fa07 f303 	lsl.w	r3, r7, r3
 80046a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80046aa:	18b7      	adds	r7, r6, r2
 80046ac:	9b05      	ldr	r3, [sp, #20]
 80046ae:	42be      	cmp	r6, r7
 80046b0:	4414      	add	r4, r2
 80046b2:	441c      	add	r4, r3
 80046b4:	4633      	mov	r3, r6
 80046b6:	bfa8      	it	ge
 80046b8:	463b      	movge	r3, r7
 80046ba:	42a3      	cmp	r3, r4
 80046bc:	bfa8      	it	ge
 80046be:	4623      	movge	r3, r4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bfc2      	ittt	gt
 80046c4:	1aff      	subgt	r7, r7, r3
 80046c6:	1ae4      	subgt	r4, r4, r3
 80046c8:	1af6      	subgt	r6, r6, r3
 80046ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dd17      	ble.n	8004700 <_strtod_l+0x740>
 80046d0:	461a      	mov	r2, r3
 80046d2:	4650      	mov	r0, sl
 80046d4:	9904      	ldr	r1, [sp, #16]
 80046d6:	f001 ff0f 	bl	80064f8 <__pow5mult>
 80046da:	9004      	str	r0, [sp, #16]
 80046dc:	2800      	cmp	r0, #0
 80046de:	f43f aeb2 	beq.w	8004446 <_strtod_l+0x486>
 80046e2:	4601      	mov	r1, r0
 80046e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80046e6:	4650      	mov	r0, sl
 80046e8:	f001 fe62 	bl	80063b0 <__multiply>
 80046ec:	9009      	str	r0, [sp, #36]	; 0x24
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f43f aea9 	beq.w	8004446 <_strtod_l+0x486>
 80046f4:	4650      	mov	r0, sl
 80046f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046f8:	f001 fd40 	bl	800617c <_Bfree>
 80046fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fe:	931c      	str	r3, [sp, #112]	; 0x70
 8004700:	2f00      	cmp	r7, #0
 8004702:	f300 8093 	bgt.w	800482c <_strtod_l+0x86c>
 8004706:	9b07      	ldr	r3, [sp, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	dd08      	ble.n	800471e <_strtod_l+0x75e>
 800470c:	4650      	mov	r0, sl
 800470e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004710:	9906      	ldr	r1, [sp, #24]
 8004712:	f001 fef1 	bl	80064f8 <__pow5mult>
 8004716:	9006      	str	r0, [sp, #24]
 8004718:	2800      	cmp	r0, #0
 800471a:	f43f ae94 	beq.w	8004446 <_strtod_l+0x486>
 800471e:	2c00      	cmp	r4, #0
 8004720:	dd08      	ble.n	8004734 <_strtod_l+0x774>
 8004722:	4622      	mov	r2, r4
 8004724:	4650      	mov	r0, sl
 8004726:	9906      	ldr	r1, [sp, #24]
 8004728:	f001 ff40 	bl	80065ac <__lshift>
 800472c:	9006      	str	r0, [sp, #24]
 800472e:	2800      	cmp	r0, #0
 8004730:	f43f ae89 	beq.w	8004446 <_strtod_l+0x486>
 8004734:	2e00      	cmp	r6, #0
 8004736:	dd08      	ble.n	800474a <_strtod_l+0x78a>
 8004738:	4632      	mov	r2, r6
 800473a:	4650      	mov	r0, sl
 800473c:	9904      	ldr	r1, [sp, #16]
 800473e:	f001 ff35 	bl	80065ac <__lshift>
 8004742:	9004      	str	r0, [sp, #16]
 8004744:	2800      	cmp	r0, #0
 8004746:	f43f ae7e 	beq.w	8004446 <_strtod_l+0x486>
 800474a:	4650      	mov	r0, sl
 800474c:	9a06      	ldr	r2, [sp, #24]
 800474e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004750:	f001 ffb4 	bl	80066bc <__mdiff>
 8004754:	4683      	mov	fp, r0
 8004756:	2800      	cmp	r0, #0
 8004758:	f43f ae75 	beq.w	8004446 <_strtod_l+0x486>
 800475c:	2400      	movs	r4, #0
 800475e:	68c3      	ldr	r3, [r0, #12]
 8004760:	9904      	ldr	r1, [sp, #16]
 8004762:	60c4      	str	r4, [r0, #12]
 8004764:	930d      	str	r3, [sp, #52]	; 0x34
 8004766:	f001 ff8d 	bl	8006684 <__mcmp>
 800476a:	42a0      	cmp	r0, r4
 800476c:	da70      	bge.n	8004850 <_strtod_l+0x890>
 800476e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004770:	ea53 0308 	orrs.w	r3, r3, r8
 8004774:	f040 8096 	bne.w	80048a4 <_strtod_l+0x8e4>
 8004778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 8091 	bne.w	80048a4 <_strtod_l+0x8e4>
 8004782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004786:	0d1b      	lsrs	r3, r3, #20
 8004788:	051b      	lsls	r3, r3, #20
 800478a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800478e:	f240 8089 	bls.w	80048a4 <_strtod_l+0x8e4>
 8004792:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004796:	b923      	cbnz	r3, 80047a2 <_strtod_l+0x7e2>
 8004798:	f8db 3010 	ldr.w	r3, [fp, #16]
 800479c:	2b01      	cmp	r3, #1
 800479e:	f340 8081 	ble.w	80048a4 <_strtod_l+0x8e4>
 80047a2:	4659      	mov	r1, fp
 80047a4:	2201      	movs	r2, #1
 80047a6:	4650      	mov	r0, sl
 80047a8:	f001 ff00 	bl	80065ac <__lshift>
 80047ac:	9904      	ldr	r1, [sp, #16]
 80047ae:	4683      	mov	fp, r0
 80047b0:	f001 ff68 	bl	8006684 <__mcmp>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	dd75      	ble.n	80048a4 <_strtod_l+0x8e4>
 80047b8:	9905      	ldr	r1, [sp, #20]
 80047ba:	464b      	mov	r3, r9
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <_strtod_l+0x888>)
 80047be:	2900      	cmp	r1, #0
 80047c0:	f000 8091 	beq.w	80048e6 <_strtod_l+0x926>
 80047c4:	ea02 0109 	and.w	r1, r2, r9
 80047c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80047cc:	f300 808b 	bgt.w	80048e6 <_strtod_l+0x926>
 80047d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80047d4:	f77f aea9 	ble.w	800452a <_strtod_l+0x56a>
 80047d8:	2300      	movs	r3, #0
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <_strtod_l+0x88c>)
 80047dc:	4640      	mov	r0, r8
 80047de:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80047e2:	4649      	mov	r1, r9
 80047e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80047e8:	f7fb fe76 	bl	80004d8 <__aeabi_dmul>
 80047ec:	460b      	mov	r3, r1
 80047ee:	4303      	orrs	r3, r0
 80047f0:	bf08      	it	eq
 80047f2:	2322      	moveq	r3, #34	; 0x22
 80047f4:	4680      	mov	r8, r0
 80047f6:	4689      	mov	r9, r1
 80047f8:	bf08      	it	eq
 80047fa:	f8ca 3000 	streq.w	r3, [sl]
 80047fe:	e62d      	b.n	800445c <_strtod_l+0x49c>
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	ea03 0808 	and.w	r8, r3, r8
 800480c:	e6db      	b.n	80045c6 <_strtod_l+0x606>
 800480e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004812:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004816:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800481a:	35e2      	adds	r5, #226	; 0xe2
 800481c:	fa07 f505 	lsl.w	r5, r7, r5
 8004820:	970f      	str	r7, [sp, #60]	; 0x3c
 8004822:	e742      	b.n	80046aa <_strtod_l+0x6ea>
 8004824:	2301      	movs	r3, #1
 8004826:	2500      	movs	r5, #0
 8004828:	930f      	str	r3, [sp, #60]	; 0x3c
 800482a:	e73e      	b.n	80046aa <_strtod_l+0x6ea>
 800482c:	463a      	mov	r2, r7
 800482e:	4650      	mov	r0, sl
 8004830:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004832:	f001 febb 	bl	80065ac <__lshift>
 8004836:	901c      	str	r0, [sp, #112]	; 0x70
 8004838:	2800      	cmp	r0, #0
 800483a:	f47f af64 	bne.w	8004706 <_strtod_l+0x746>
 800483e:	e602      	b.n	8004446 <_strtod_l+0x486>
 8004840:	08007b38 	.word	0x08007b38
 8004844:	fffffc02 	.word	0xfffffc02
 8004848:	7ff00000 	.word	0x7ff00000
 800484c:	39500000 	.word	0x39500000
 8004850:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004854:	d166      	bne.n	8004924 <_strtod_l+0x964>
 8004856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800485c:	b35a      	cbz	r2, 80048b6 <_strtod_l+0x8f6>
 800485e:	4a9c      	ldr	r2, [pc, #624]	; (8004ad0 <_strtod_l+0xb10>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d12c      	bne.n	80048be <_strtod_l+0x8fe>
 8004864:	9b05      	ldr	r3, [sp, #20]
 8004866:	4640      	mov	r0, r8
 8004868:	b303      	cbz	r3, 80048ac <_strtod_l+0x8ec>
 800486a:	464b      	mov	r3, r9
 800486c:	4a99      	ldr	r2, [pc, #612]	; (8004ad4 <_strtod_l+0xb14>)
 800486e:	f04f 31ff 	mov.w	r1, #4294967295
 8004872:	401a      	ands	r2, r3
 8004874:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004878:	d81b      	bhi.n	80048b2 <_strtod_l+0x8f2>
 800487a:	0d12      	lsrs	r2, r2, #20
 800487c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	4298      	cmp	r0, r3
 8004886:	d11a      	bne.n	80048be <_strtod_l+0x8fe>
 8004888:	4b93      	ldr	r3, [pc, #588]	; (8004ad8 <_strtod_l+0xb18>)
 800488a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800488c:	429a      	cmp	r2, r3
 800488e:	d102      	bne.n	8004896 <_strtod_l+0x8d6>
 8004890:	3001      	adds	r0, #1
 8004892:	f43f add8 	beq.w	8004446 <_strtod_l+0x486>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	4b8e      	ldr	r3, [pc, #568]	; (8004ad4 <_strtod_l+0xb14>)
 800489c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800489e:	401a      	ands	r2, r3
 80048a0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80048a4:	9b05      	ldr	r3, [sp, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d196      	bne.n	80047d8 <_strtod_l+0x818>
 80048aa:	e5d7      	b.n	800445c <_strtod_l+0x49c>
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e7e8      	b.n	8004884 <_strtod_l+0x8c4>
 80048b2:	460b      	mov	r3, r1
 80048b4:	e7e6      	b.n	8004884 <_strtod_l+0x8c4>
 80048b6:	ea53 0308 	orrs.w	r3, r3, r8
 80048ba:	f43f af7d 	beq.w	80047b8 <_strtod_l+0x7f8>
 80048be:	b1e5      	cbz	r5, 80048fa <_strtod_l+0x93a>
 80048c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c2:	421d      	tst	r5, r3
 80048c4:	d0ee      	beq.n	80048a4 <_strtod_l+0x8e4>
 80048c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c8:	4640      	mov	r0, r8
 80048ca:	4649      	mov	r1, r9
 80048cc:	9a05      	ldr	r2, [sp, #20]
 80048ce:	b1c3      	cbz	r3, 8004902 <_strtod_l+0x942>
 80048d0:	f7ff fb54 	bl	8003f7c <sulp>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048dc:	f7fb fc46 	bl	800016c <__adddf3>
 80048e0:	4680      	mov	r8, r0
 80048e2:	4689      	mov	r9, r1
 80048e4:	e7de      	b.n	80048a4 <_strtod_l+0x8e4>
 80048e6:	4013      	ands	r3, r2
 80048e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80048ec:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80048f0:	f04f 38ff 	mov.w	r8, #4294967295
 80048f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80048f8:	e7d4      	b.n	80048a4 <_strtod_l+0x8e4>
 80048fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048fc:	ea13 0f08 	tst.w	r3, r8
 8004900:	e7e0      	b.n	80048c4 <_strtod_l+0x904>
 8004902:	f7ff fb3b 	bl	8003f7c <sulp>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800490e:	f7fb fc2b 	bl	8000168 <__aeabi_dsub>
 8004912:	2200      	movs	r2, #0
 8004914:	2300      	movs	r3, #0
 8004916:	4680      	mov	r8, r0
 8004918:	4689      	mov	r9, r1
 800491a:	f7fc f845 	bl	80009a8 <__aeabi_dcmpeq>
 800491e:	2800      	cmp	r0, #0
 8004920:	d0c0      	beq.n	80048a4 <_strtod_l+0x8e4>
 8004922:	e602      	b.n	800452a <_strtod_l+0x56a>
 8004924:	4658      	mov	r0, fp
 8004926:	9904      	ldr	r1, [sp, #16]
 8004928:	f002 f82e 	bl	8006988 <__ratio>
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004932:	4606      	mov	r6, r0
 8004934:	460f      	mov	r7, r1
 8004936:	f7fc f84b 	bl	80009d0 <__aeabi_dcmple>
 800493a:	2800      	cmp	r0, #0
 800493c:	d075      	beq.n	8004a2a <_strtod_l+0xa6a>
 800493e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d047      	beq.n	80049d4 <_strtod_l+0xa14>
 8004944:	2600      	movs	r6, #0
 8004946:	4f65      	ldr	r7, [pc, #404]	; (8004adc <_strtod_l+0xb1c>)
 8004948:	4d64      	ldr	r5, [pc, #400]	; (8004adc <_strtod_l+0xb1c>)
 800494a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004950:	0d1b      	lsrs	r3, r3, #20
 8004952:	051b      	lsls	r3, r3, #20
 8004954:	930f      	str	r3, [sp, #60]	; 0x3c
 8004956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004958:	4b61      	ldr	r3, [pc, #388]	; (8004ae0 <_strtod_l+0xb20>)
 800495a:	429a      	cmp	r2, r3
 800495c:	f040 80c8 	bne.w	8004af0 <_strtod_l+0xb30>
 8004960:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004964:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496a:	4640      	mov	r0, r8
 800496c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004970:	4649      	mov	r1, r9
 8004972:	f001 ff33 	bl	80067dc <__ulp>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4630      	mov	r0, r6
 800497c:	4639      	mov	r1, r7
 800497e:	f7fb fdab 	bl	80004d8 <__aeabi_dmul>
 8004982:	4642      	mov	r2, r8
 8004984:	464b      	mov	r3, r9
 8004986:	f7fb fbf1 	bl	800016c <__adddf3>
 800498a:	460b      	mov	r3, r1
 800498c:	4951      	ldr	r1, [pc, #324]	; (8004ad4 <_strtod_l+0xb14>)
 800498e:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <_strtod_l+0xb24>)
 8004990:	4019      	ands	r1, r3
 8004992:	4291      	cmp	r1, r2
 8004994:	4680      	mov	r8, r0
 8004996:	d95e      	bls.n	8004a56 <_strtod_l+0xa96>
 8004998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800499a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800499e:	4293      	cmp	r3, r2
 80049a0:	d103      	bne.n	80049aa <_strtod_l+0x9ea>
 80049a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a4:	3301      	adds	r3, #1
 80049a6:	f43f ad4e 	beq.w	8004446 <_strtod_l+0x486>
 80049aa:	f04f 38ff 	mov.w	r8, #4294967295
 80049ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004ad8 <_strtod_l+0xb18>
 80049b2:	4650      	mov	r0, sl
 80049b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049b6:	f001 fbe1 	bl	800617c <_Bfree>
 80049ba:	4650      	mov	r0, sl
 80049bc:	9906      	ldr	r1, [sp, #24]
 80049be:	f001 fbdd 	bl	800617c <_Bfree>
 80049c2:	4650      	mov	r0, sl
 80049c4:	9904      	ldr	r1, [sp, #16]
 80049c6:	f001 fbd9 	bl	800617c <_Bfree>
 80049ca:	4659      	mov	r1, fp
 80049cc:	4650      	mov	r0, sl
 80049ce:	f001 fbd5 	bl	800617c <_Bfree>
 80049d2:	e61c      	b.n	800460e <_strtod_l+0x64e>
 80049d4:	f1b8 0f00 	cmp.w	r8, #0
 80049d8:	d119      	bne.n	8004a0e <_strtod_l+0xa4e>
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e0:	b9e3      	cbnz	r3, 8004a1c <_strtod_l+0xa5c>
 80049e2:	2200      	movs	r2, #0
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <_strtod_l+0xb1c>)
 80049ea:	f7fb ffe7 	bl	80009bc <__aeabi_dcmplt>
 80049ee:	b9c8      	cbnz	r0, 8004a24 <_strtod_l+0xa64>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4630      	mov	r0, r6
 80049f4:	4639      	mov	r1, r7
 80049f6:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <_strtod_l+0xb28>)
 80049f8:	f7fb fd6e 	bl	80004d8 <__aeabi_dmul>
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004a04:	9418      	str	r4, [sp, #96]	; 0x60
 8004a06:	9319      	str	r3, [sp, #100]	; 0x64
 8004a08:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004a0c:	e79d      	b.n	800494a <_strtod_l+0x98a>
 8004a0e:	f1b8 0f01 	cmp.w	r8, #1
 8004a12:	d103      	bne.n	8004a1c <_strtod_l+0xa5c>
 8004a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f43f ad87 	beq.w	800452a <_strtod_l+0x56a>
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	2400      	movs	r4, #0
 8004a20:	4f32      	ldr	r7, [pc, #200]	; (8004aec <_strtod_l+0xb2c>)
 8004a22:	e791      	b.n	8004948 <_strtod_l+0x988>
 8004a24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004a26:	4d30      	ldr	r5, [pc, #192]	; (8004ae8 <_strtod_l+0xb28>)
 8004a28:	e7ea      	b.n	8004a00 <_strtod_l+0xa40>
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <_strtod_l+0xb28>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4630      	mov	r0, r6
 8004a30:	4639      	mov	r1, r7
 8004a32:	f7fb fd51 	bl	80004d8 <__aeabi_dmul>
 8004a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	b933      	cbnz	r3, 8004a4c <_strtod_l+0xa8c>
 8004a3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a42:	9010      	str	r0, [sp, #64]	; 0x40
 8004a44:	9311      	str	r3, [sp, #68]	; 0x44
 8004a46:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a4a:	e77e      	b.n	800494a <_strtod_l+0x98a>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004a54:	e7f7      	b.n	8004a46 <_strtod_l+0xa86>
 8004a56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004a5a:	9b05      	ldr	r3, [sp, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1a8      	bne.n	80049b2 <_strtod_l+0x9f2>
 8004a60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a66:	0d1b      	lsrs	r3, r3, #20
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d1a1      	bne.n	80049b2 <_strtod_l+0x9f2>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fc f879 	bl	8000b68 <__aeabi_d2lz>
 8004a76:	f7fb fd01 	bl	800047c <__aeabi_l2d>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4620      	mov	r0, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7fb fb71 	bl	8000168 <__aeabi_dsub>
 8004a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a8c:	ea43 0308 	orr.w	r3, r3, r8
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4604      	mov	r4, r0
 8004a94:	460d      	mov	r5, r1
 8004a96:	d066      	beq.n	8004b66 <_strtod_l+0xba6>
 8004a98:	a309      	add	r3, pc, #36	; (adr r3, 8004ac0 <_strtod_l+0xb00>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f7fb ff8d 	bl	80009bc <__aeabi_dcmplt>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	f47f acda 	bne.w	800445c <_strtod_l+0x49c>
 8004aa8:	a307      	add	r3, pc, #28	; (adr r3, 8004ac8 <_strtod_l+0xb08>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb ffa1 	bl	80009f8 <__aeabi_dcmpgt>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	f43f af7b 	beq.w	80049b2 <_strtod_l+0x9f2>
 8004abc:	e4ce      	b.n	800445c <_strtod_l+0x49c>
 8004abe:	bf00      	nop
 8004ac0:	94a03595 	.word	0x94a03595
 8004ac4:	3fdfffff 	.word	0x3fdfffff
 8004ac8:	35afe535 	.word	0x35afe535
 8004acc:	3fe00000 	.word	0x3fe00000
 8004ad0:	000fffff 	.word	0x000fffff
 8004ad4:	7ff00000 	.word	0x7ff00000
 8004ad8:	7fefffff 	.word	0x7fefffff
 8004adc:	3ff00000 	.word	0x3ff00000
 8004ae0:	7fe00000 	.word	0x7fe00000
 8004ae4:	7c9fffff 	.word	0x7c9fffff
 8004ae8:	3fe00000 	.word	0x3fe00000
 8004aec:	bff00000 	.word	0xbff00000
 8004af0:	9b05      	ldr	r3, [sp, #20]
 8004af2:	b313      	cbz	r3, 8004b3a <_strtod_l+0xb7a>
 8004af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004af6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004afa:	d81e      	bhi.n	8004b3a <_strtod_l+0xb7a>
 8004afc:	a326      	add	r3, pc, #152	; (adr r3, 8004b98 <_strtod_l+0xbd8>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	4620      	mov	r0, r4
 8004b04:	4629      	mov	r1, r5
 8004b06:	f7fb ff63 	bl	80009d0 <__aeabi_dcmple>
 8004b0a:	b190      	cbz	r0, 8004b32 <_strtod_l+0xb72>
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7fb ffba 	bl	8000a88 <__aeabi_d2uiz>
 8004b14:	2801      	cmp	r0, #1
 8004b16:	bf38      	it	cc
 8004b18:	2001      	movcc	r0, #1
 8004b1a:	f7fb fc63 	bl	80003e4 <__aeabi_ui2d>
 8004b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	b9d3      	cbnz	r3, 8004b5c <_strtod_l+0xb9c>
 8004b26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b2a:	9012      	str	r0, [sp, #72]	; 0x48
 8004b2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b2e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004b32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b34:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004b38:	1a9f      	subs	r7, r3, r2
 8004b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b3e:	f001 fe4d 	bl	80067dc <__ulp>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4630      	mov	r0, r6
 8004b48:	4639      	mov	r1, r7
 8004b4a:	f7fb fcc5 	bl	80004d8 <__aeabi_dmul>
 8004b4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b52:	f7fb fb0b 	bl	800016c <__adddf3>
 8004b56:	4680      	mov	r8, r0
 8004b58:	4689      	mov	r9, r1
 8004b5a:	e77e      	b.n	8004a5a <_strtod_l+0xa9a>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004b64:	e7e3      	b.n	8004b2e <_strtod_l+0xb6e>
 8004b66:	a30e      	add	r3, pc, #56	; (adr r3, 8004ba0 <_strtod_l+0xbe0>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb ff26 	bl	80009bc <__aeabi_dcmplt>
 8004b70:	e7a1      	b.n	8004ab6 <_strtod_l+0xaf6>
 8004b72:	2300      	movs	r3, #0
 8004b74:	930c      	str	r3, [sp, #48]	; 0x30
 8004b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	f7ff ba65 	b.w	800404a <_strtod_l+0x8a>
 8004b80:	2b65      	cmp	r3, #101	; 0x65
 8004b82:	f43f ab5c 	beq.w	800423e <_strtod_l+0x27e>
 8004b86:	2b45      	cmp	r3, #69	; 0x45
 8004b88:	f43f ab59 	beq.w	800423e <_strtod_l+0x27e>
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f7ff bb8d 	b.w	80042ac <_strtod_l+0x2ec>
 8004b92:	bf00      	nop
 8004b94:	f3af 8000 	nop.w
 8004b98:	ffc00000 	.word	0xffc00000
 8004b9c:	41dfffff 	.word	0x41dfffff
 8004ba0:	94a03595 	.word	0x94a03595
 8004ba4:	3fcfffff 	.word	0x3fcfffff

08004ba8 <_strtod_r>:
 8004ba8:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <_strtod_r+0x8>)
 8004baa:	f7ff ba09 	b.w	8003fc0 <_strtod_l>
 8004bae:	bf00      	nop
 8004bb0:	20000074 	.word	0x20000074

08004bb4 <_strtol_l.isra.0>:
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bba:	4686      	mov	lr, r0
 8004bbc:	d001      	beq.n	8004bc2 <_strtol_l.isra.0+0xe>
 8004bbe:	2b24      	cmp	r3, #36	; 0x24
 8004bc0:	d906      	bls.n	8004bd0 <_strtol_l.isra.0+0x1c>
 8004bc2:	f7fe fb13 	bl	80031ec <__errno>
 8004bc6:	2316      	movs	r3, #22
 8004bc8:	6003      	str	r3, [r0, #0]
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	468c      	mov	ip, r1
 8004bd2:	4e3a      	ldr	r6, [pc, #232]	; (8004cbc <_strtol_l.isra.0+0x108>)
 8004bd4:	4660      	mov	r0, ip
 8004bd6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004bda:	5da5      	ldrb	r5, [r4, r6]
 8004bdc:	f015 0508 	ands.w	r5, r5, #8
 8004be0:	d1f8      	bne.n	8004bd4 <_strtol_l.isra.0+0x20>
 8004be2:	2c2d      	cmp	r4, #45	; 0x2d
 8004be4:	d133      	bne.n	8004c4e <_strtol_l.isra.0+0x9a>
 8004be6:	f04f 0801 	mov.w	r8, #1
 8004bea:	f89c 4000 	ldrb.w	r4, [ip]
 8004bee:	f100 0c02 	add.w	ip, r0, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d05d      	beq.n	8004cb2 <_strtol_l.isra.0+0xfe>
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d10c      	bne.n	8004c14 <_strtol_l.isra.0+0x60>
 8004bfa:	2c30      	cmp	r4, #48	; 0x30
 8004bfc:	d10a      	bne.n	8004c14 <_strtol_l.isra.0+0x60>
 8004bfe:	f89c 0000 	ldrb.w	r0, [ip]
 8004c02:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c06:	2858      	cmp	r0, #88	; 0x58
 8004c08:	d14e      	bne.n	8004ca8 <_strtol_l.isra.0+0xf4>
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004c10:	f10c 0c02 	add.w	ip, ip, #2
 8004c14:	2500      	movs	r5, #0
 8004c16:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004c1a:	3f01      	subs	r7, #1
 8004c1c:	fbb7 f9f3 	udiv	r9, r7, r3
 8004c20:	4628      	mov	r0, r5
 8004c22:	fb03 7a19 	mls	sl, r3, r9, r7
 8004c26:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004c2a:	2e09      	cmp	r6, #9
 8004c2c:	d818      	bhi.n	8004c60 <_strtol_l.isra.0+0xac>
 8004c2e:	4634      	mov	r4, r6
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	dd24      	ble.n	8004c7e <_strtol_l.isra.0+0xca>
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	db1f      	blt.n	8004c78 <_strtol_l.isra.0+0xc4>
 8004c38:	4581      	cmp	r9, r0
 8004c3a:	d31d      	bcc.n	8004c78 <_strtol_l.isra.0+0xc4>
 8004c3c:	d101      	bne.n	8004c42 <_strtol_l.isra.0+0x8e>
 8004c3e:	45a2      	cmp	sl, r4
 8004c40:	db1a      	blt.n	8004c78 <_strtol_l.isra.0+0xc4>
 8004c42:	2501      	movs	r5, #1
 8004c44:	fb00 4003 	mla	r0, r0, r3, r4
 8004c48:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c4c:	e7eb      	b.n	8004c26 <_strtol_l.isra.0+0x72>
 8004c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c50:	bf08      	it	eq
 8004c52:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004c56:	46a8      	mov	r8, r5
 8004c58:	bf08      	it	eq
 8004c5a:	f100 0c02 	addeq.w	ip, r0, #2
 8004c5e:	e7c8      	b.n	8004bf2 <_strtol_l.isra.0+0x3e>
 8004c60:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004c64:	2e19      	cmp	r6, #25
 8004c66:	d801      	bhi.n	8004c6c <_strtol_l.isra.0+0xb8>
 8004c68:	3c37      	subs	r4, #55	; 0x37
 8004c6a:	e7e1      	b.n	8004c30 <_strtol_l.isra.0+0x7c>
 8004c6c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004c70:	2e19      	cmp	r6, #25
 8004c72:	d804      	bhi.n	8004c7e <_strtol_l.isra.0+0xca>
 8004c74:	3c57      	subs	r4, #87	; 0x57
 8004c76:	e7db      	b.n	8004c30 <_strtol_l.isra.0+0x7c>
 8004c78:	f04f 35ff 	mov.w	r5, #4294967295
 8004c7c:	e7e4      	b.n	8004c48 <_strtol_l.isra.0+0x94>
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	da08      	bge.n	8004c94 <_strtol_l.isra.0+0xe0>
 8004c82:	2322      	movs	r3, #34	; 0x22
 8004c84:	4638      	mov	r0, r7
 8004c86:	f8ce 3000 	str.w	r3, [lr]
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	d09e      	beq.n	8004bcc <_strtol_l.isra.0+0x18>
 8004c8e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004c92:	e007      	b.n	8004ca4 <_strtol_l.isra.0+0xf0>
 8004c94:	f1b8 0f00 	cmp.w	r8, #0
 8004c98:	d000      	beq.n	8004c9c <_strtol_l.isra.0+0xe8>
 8004c9a:	4240      	negs	r0, r0
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d095      	beq.n	8004bcc <_strtol_l.isra.0+0x18>
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	d1f4      	bne.n	8004c8e <_strtol_l.isra.0+0xda>
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	e791      	b.n	8004bcc <_strtol_l.isra.0+0x18>
 8004ca8:	2430      	movs	r4, #48	; 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1b2      	bne.n	8004c14 <_strtol_l.isra.0+0x60>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	e7b0      	b.n	8004c14 <_strtol_l.isra.0+0x60>
 8004cb2:	2c30      	cmp	r4, #48	; 0x30
 8004cb4:	d0a3      	beq.n	8004bfe <_strtol_l.isra.0+0x4a>
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	e7ac      	b.n	8004c14 <_strtol_l.isra.0+0x60>
 8004cba:	bf00      	nop
 8004cbc:	08007b61 	.word	0x08007b61

08004cc0 <_strtol_r>:
 8004cc0:	f7ff bf78 	b.w	8004bb4 <_strtol_l.isra.0>

08004cc4 <quorem>:
 8004cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	6903      	ldr	r3, [r0, #16]
 8004cca:	690c      	ldr	r4, [r1, #16]
 8004ccc:	4607      	mov	r7, r0
 8004cce:	42a3      	cmp	r3, r4
 8004cd0:	f2c0 8083 	blt.w	8004dda <quorem+0x116>
 8004cd4:	3c01      	subs	r4, #1
 8004cd6:	f100 0514 	add.w	r5, r0, #20
 8004cda:	f101 0814 	add.w	r8, r1, #20
 8004cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cec:	3301      	adds	r3, #1
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cfc:	d332      	bcc.n	8004d64 <quorem+0xa0>
 8004cfe:	f04f 0e00 	mov.w	lr, #0
 8004d02:	4640      	mov	r0, r8
 8004d04:	46ac      	mov	ip, r5
 8004d06:	46f2      	mov	sl, lr
 8004d08:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d0c:	b293      	uxth	r3, r2
 8004d0e:	fb06 e303 	mla	r3, r6, r3, lr
 8004d12:	0c12      	lsrs	r2, r2, #16
 8004d14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d18:	fb06 e202 	mla	r2, r6, r2, lr
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d22:	f8dc a000 	ldr.w	sl, [ip]
 8004d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d2a:	fa1f fa8a 	uxth.w	sl, sl
 8004d2e:	4453      	add	r3, sl
 8004d30:	fa1f fa82 	uxth.w	sl, r2
 8004d34:	f8dc 2000 	ldr.w	r2, [ip]
 8004d38:	4581      	cmp	r9, r0
 8004d3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d4c:	f84c 3b04 	str.w	r3, [ip], #4
 8004d50:	d2da      	bcs.n	8004d08 <quorem+0x44>
 8004d52:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d56:	b92b      	cbnz	r3, 8004d64 <quorem+0xa0>
 8004d58:	9b01      	ldr	r3, [sp, #4]
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	429d      	cmp	r5, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	d32f      	bcc.n	8004dc2 <quorem+0xfe>
 8004d62:	613c      	str	r4, [r7, #16]
 8004d64:	4638      	mov	r0, r7
 8004d66:	f001 fc8d 	bl	8006684 <__mcmp>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	db25      	blt.n	8004dba <quorem+0xf6>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f04f 0c00 	mov.w	ip, #0
 8004d74:	3601      	adds	r6, #1
 8004d76:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d7a:	f8d0 e000 	ldr.w	lr, [r0]
 8004d7e:	b28b      	uxth	r3, r1
 8004d80:	ebac 0303 	sub.w	r3, ip, r3
 8004d84:	fa1f f28e 	uxth.w	r2, lr
 8004d88:	4413      	add	r3, r2
 8004d8a:	0c0a      	lsrs	r2, r1, #16
 8004d8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d9a:	45c1      	cmp	r9, r8
 8004d9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004da0:	f840 3b04 	str.w	r3, [r0], #4
 8004da4:	d2e7      	bcs.n	8004d76 <quorem+0xb2>
 8004da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dae:	b922      	cbnz	r2, 8004dba <quorem+0xf6>
 8004db0:	3b04      	subs	r3, #4
 8004db2:	429d      	cmp	r5, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	d30a      	bcc.n	8004dce <quorem+0x10a>
 8004db8:	613c      	str	r4, [r7, #16]
 8004dba:	4630      	mov	r0, r6
 8004dbc:	b003      	add	sp, #12
 8004dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	3b04      	subs	r3, #4
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	d1cb      	bne.n	8004d62 <quorem+0x9e>
 8004dca:	3c01      	subs	r4, #1
 8004dcc:	e7c6      	b.n	8004d5c <quorem+0x98>
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	3b04      	subs	r3, #4
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	d1f0      	bne.n	8004db8 <quorem+0xf4>
 8004dd6:	3c01      	subs	r4, #1
 8004dd8:	e7eb      	b.n	8004db2 <quorem+0xee>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7ee      	b.n	8004dbc <quorem+0xf8>
	...

08004de0 <_dtoa_r>:
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	461f      	mov	r7, r3
 8004de8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004dea:	b099      	sub	sp, #100	; 0x64
 8004dec:	4605      	mov	r5, r0
 8004dee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004df2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004df6:	b974      	cbnz	r4, 8004e16 <_dtoa_r+0x36>
 8004df8:	2010      	movs	r0, #16
 8004dfa:	f001 f949 	bl	8006090 <malloc>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6268      	str	r0, [r5, #36]	; 0x24
 8004e02:	b920      	cbnz	r0, 8004e0e <_dtoa_r+0x2e>
 8004e04:	21ea      	movs	r1, #234	; 0xea
 8004e06:	4bae      	ldr	r3, [pc, #696]	; (80050c0 <_dtoa_r+0x2e0>)
 8004e08:	48ae      	ldr	r0, [pc, #696]	; (80050c4 <_dtoa_r+0x2e4>)
 8004e0a:	f002 f875 	bl	8006ef8 <__assert_func>
 8004e0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e12:	6004      	str	r4, [r0, #0]
 8004e14:	60c4      	str	r4, [r0, #12]
 8004e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	b151      	cbz	r1, 8004e32 <_dtoa_r+0x52>
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4093      	lsls	r3, r2
 8004e22:	604a      	str	r2, [r1, #4]
 8004e24:	608b      	str	r3, [r1, #8]
 8004e26:	4628      	mov	r0, r5
 8004e28:	f001 f9a8 	bl	800617c <_Bfree>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	1e3b      	subs	r3, r7, #0
 8004e34:	bfaf      	iteee	ge
 8004e36:	2300      	movge	r3, #0
 8004e38:	2201      	movlt	r2, #1
 8004e3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	9305      	strlt	r3, [sp, #20]
 8004e40:	bfa8      	it	ge
 8004e42:	f8c8 3000 	strge.w	r3, [r8]
 8004e46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e4a:	4b9f      	ldr	r3, [pc, #636]	; (80050c8 <_dtoa_r+0x2e8>)
 8004e4c:	bfb8      	it	lt
 8004e4e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e52:	ea33 0309 	bics.w	r3, r3, r9
 8004e56:	d119      	bne.n	8004e8c <_dtoa_r+0xac>
 8004e58:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e64:	4333      	orrs	r3, r6
 8004e66:	f000 8580 	beq.w	800596a <_dtoa_r+0xb8a>
 8004e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e6c:	b953      	cbnz	r3, 8004e84 <_dtoa_r+0xa4>
 8004e6e:	4b97      	ldr	r3, [pc, #604]	; (80050cc <_dtoa_r+0x2ec>)
 8004e70:	e022      	b.n	8004eb8 <_dtoa_r+0xd8>
 8004e72:	4b97      	ldr	r3, [pc, #604]	; (80050d0 <_dtoa_r+0x2f0>)
 8004e74:	9308      	str	r3, [sp, #32]
 8004e76:	3308      	adds	r3, #8
 8004e78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	9808      	ldr	r0, [sp, #32]
 8004e7e:	b019      	add	sp, #100	; 0x64
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e84:	4b91      	ldr	r3, [pc, #580]	; (80050cc <_dtoa_r+0x2ec>)
 8004e86:	9308      	str	r3, [sp, #32]
 8004e88:	3303      	adds	r3, #3
 8004e8a:	e7f5      	b.n	8004e78 <_dtoa_r+0x98>
 8004e8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f7fb fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	b158      	cbz	r0, 8004ebc <_dtoa_r+0xdc>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8559 	beq.w	8005964 <_dtoa_r+0xb84>
 8004eb2:	4888      	ldr	r0, [pc, #544]	; (80050d4 <_dtoa_r+0x2f4>)
 8004eb4:	6018      	str	r0, [r3, #0]
 8004eb6:	1e43      	subs	r3, r0, #1
 8004eb8:	9308      	str	r3, [sp, #32]
 8004eba:	e7df      	b.n	8004e7c <_dtoa_r+0x9c>
 8004ebc:	ab16      	add	r3, sp, #88	; 0x58
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	ab17      	add	r3, sp, #92	; 0x5c
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eca:	f001 fd01 	bl	80068d0 <__d2b>
 8004ece:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004ed2:	4682      	mov	sl, r0
 8004ed4:	2c00      	cmp	r4, #0
 8004ed6:	d07e      	beq.n	8004fd6 <_dtoa_r+0x1f6>
 8004ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ede:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004eea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004eee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <_dtoa_r+0x2f8>)
 8004ef6:	f7fb f937 	bl	8000168 <__aeabi_dsub>
 8004efa:	a36b      	add	r3, pc, #428	; (adr r3, 80050a8 <_dtoa_r+0x2c8>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb faea 	bl	80004d8 <__aeabi_dmul>
 8004f04:	a36a      	add	r3, pc, #424	; (adr r3, 80050b0 <_dtoa_r+0x2d0>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb f92f 	bl	800016c <__adddf3>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	4620      	mov	r0, r4
 8004f12:	460f      	mov	r7, r1
 8004f14:	f7fb fa76 	bl	8000404 <__aeabi_i2d>
 8004f18:	a367      	add	r3, pc, #412	; (adr r3, 80050b8 <_dtoa_r+0x2d8>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fadb 	bl	80004d8 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb f91f 	bl	800016c <__adddf3>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	f7fb fd81 	bl	8000a38 <__aeabi_d2iz>
 8004f36:	2200      	movs	r2, #0
 8004f38:	4681      	mov	r9, r0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	4639      	mov	r1, r7
 8004f40:	f7fb fd3c 	bl	80009bc <__aeabi_dcmplt>
 8004f44:	b148      	cbz	r0, 8004f5a <_dtoa_r+0x17a>
 8004f46:	4648      	mov	r0, r9
 8004f48:	f7fb fa5c 	bl	8000404 <__aeabi_i2d>
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	463b      	mov	r3, r7
 8004f50:	f7fb fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f54:	b908      	cbnz	r0, 8004f5a <_dtoa_r+0x17a>
 8004f56:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f5a:	f1b9 0f16 	cmp.w	r9, #22
 8004f5e:	d857      	bhi.n	8005010 <_dtoa_r+0x230>
 8004f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f64:	4b5d      	ldr	r3, [pc, #372]	; (80050dc <_dtoa_r+0x2fc>)
 8004f66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fd25 	bl	80009bc <__aeabi_dcmplt>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d04e      	beq.n	8005014 <_dtoa_r+0x234>
 8004f76:	2300      	movs	r3, #0
 8004f78:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f80:	1b1c      	subs	r4, r3, r4
 8004f82:	1e63      	subs	r3, r4, #1
 8004f84:	9309      	str	r3, [sp, #36]	; 0x24
 8004f86:	bf49      	itett	mi
 8004f88:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f8c:	2300      	movpl	r3, #0
 8004f8e:	9306      	strmi	r3, [sp, #24]
 8004f90:	2300      	movmi	r3, #0
 8004f92:	bf54      	ite	pl
 8004f94:	9306      	strpl	r3, [sp, #24]
 8004f96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f98:	f1b9 0f00 	cmp.w	r9, #0
 8004f9c:	db3c      	blt.n	8005018 <_dtoa_r+0x238>
 8004f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004fa4:	444b      	add	r3, r9
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	2300      	movs	r3, #0
 8004faa:	930a      	str	r3, [sp, #40]	; 0x28
 8004fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	d86c      	bhi.n	800508c <_dtoa_r+0x2ac>
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	bfc4      	itt	gt
 8004fb6:	3b04      	subgt	r3, #4
 8004fb8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004fba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fbc:	bfc8      	it	gt
 8004fbe:	2400      	movgt	r4, #0
 8004fc0:	f1a3 0302 	sub.w	r3, r3, #2
 8004fc4:	bfd8      	it	le
 8004fc6:	2401      	movle	r4, #1
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	f200 808b 	bhi.w	80050e4 <_dtoa_r+0x304>
 8004fce:	e8df f003 	tbb	[pc, r3]
 8004fd2:	4f2d      	.short	0x4f2d
 8004fd4:	5b4d      	.short	0x5b4d
 8004fd6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004fda:	441c      	add	r4, r3
 8004fdc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	bfc3      	ittte	gt
 8004fe4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fe8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004fec:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ff0:	f1c3 0320 	rsble	r3, r3, #32
 8004ff4:	bfc6      	itte	gt
 8004ff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ffa:	4318      	orrgt	r0, r3
 8004ffc:	fa06 f003 	lslle.w	r0, r6, r3
 8005000:	f7fb f9f0 	bl	80003e4 <__aeabi_ui2d>
 8005004:	2301      	movs	r3, #1
 8005006:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800500a:	3c01      	subs	r4, #1
 800500c:	9313      	str	r3, [sp, #76]	; 0x4c
 800500e:	e770      	b.n	8004ef2 <_dtoa_r+0x112>
 8005010:	2301      	movs	r3, #1
 8005012:	e7b3      	b.n	8004f7c <_dtoa_r+0x19c>
 8005014:	900f      	str	r0, [sp, #60]	; 0x3c
 8005016:	e7b2      	b.n	8004f7e <_dtoa_r+0x19e>
 8005018:	9b06      	ldr	r3, [sp, #24]
 800501a:	eba3 0309 	sub.w	r3, r3, r9
 800501e:	9306      	str	r3, [sp, #24]
 8005020:	f1c9 0300 	rsb	r3, r9, #0
 8005024:	930a      	str	r3, [sp, #40]	; 0x28
 8005026:	2300      	movs	r3, #0
 8005028:	930e      	str	r3, [sp, #56]	; 0x38
 800502a:	e7bf      	b.n	8004fac <_dtoa_r+0x1cc>
 800502c:	2300      	movs	r3, #0
 800502e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005030:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005032:	2b00      	cmp	r3, #0
 8005034:	dc59      	bgt.n	80050ea <_dtoa_r+0x30a>
 8005036:	f04f 0b01 	mov.w	fp, #1
 800503a:	465b      	mov	r3, fp
 800503c:	f8cd b008 	str.w	fp, [sp, #8]
 8005040:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005044:	2200      	movs	r2, #0
 8005046:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005048:	6042      	str	r2, [r0, #4]
 800504a:	2204      	movs	r2, #4
 800504c:	f102 0614 	add.w	r6, r2, #20
 8005050:	429e      	cmp	r6, r3
 8005052:	6841      	ldr	r1, [r0, #4]
 8005054:	d94f      	bls.n	80050f6 <_dtoa_r+0x316>
 8005056:	4628      	mov	r0, r5
 8005058:	f001 f850 	bl	80060fc <_Balloc>
 800505c:	9008      	str	r0, [sp, #32]
 800505e:	2800      	cmp	r0, #0
 8005060:	d14d      	bne.n	80050fe <_dtoa_r+0x31e>
 8005062:	4602      	mov	r2, r0
 8005064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <_dtoa_r+0x300>)
 800506a:	e6cd      	b.n	8004e08 <_dtoa_r+0x28>
 800506c:	2301      	movs	r3, #1
 800506e:	e7de      	b.n	800502e <_dtoa_r+0x24e>
 8005070:	2300      	movs	r3, #0
 8005072:	930b      	str	r3, [sp, #44]	; 0x2c
 8005074:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005076:	eb09 0b03 	add.w	fp, r9, r3
 800507a:	f10b 0301 	add.w	r3, fp, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	9302      	str	r3, [sp, #8]
 8005082:	bfb8      	it	lt
 8005084:	2301      	movlt	r3, #1
 8005086:	e7dd      	b.n	8005044 <_dtoa_r+0x264>
 8005088:	2301      	movs	r3, #1
 800508a:	e7f2      	b.n	8005072 <_dtoa_r+0x292>
 800508c:	2401      	movs	r4, #1
 800508e:	2300      	movs	r3, #0
 8005090:	940b      	str	r4, [sp, #44]	; 0x2c
 8005092:	9322      	str	r3, [sp, #136]	; 0x88
 8005094:	f04f 3bff 	mov.w	fp, #4294967295
 8005098:	2200      	movs	r2, #0
 800509a:	2312      	movs	r3, #18
 800509c:	f8cd b008 	str.w	fp, [sp, #8]
 80050a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80050a2:	e7cf      	b.n	8005044 <_dtoa_r+0x264>
 80050a4:	f3af 8000 	nop.w
 80050a8:	636f4361 	.word	0x636f4361
 80050ac:	3fd287a7 	.word	0x3fd287a7
 80050b0:	8b60c8b3 	.word	0x8b60c8b3
 80050b4:	3fc68a28 	.word	0x3fc68a28
 80050b8:	509f79fb 	.word	0x509f79fb
 80050bc:	3fd34413 	.word	0x3fd34413
 80050c0:	08007c6e 	.word	0x08007c6e
 80050c4:	08007c85 	.word	0x08007c85
 80050c8:	7ff00000 	.word	0x7ff00000
 80050cc:	08007c6a 	.word	0x08007c6a
 80050d0:	08007c61 	.word	0x08007c61
 80050d4:	08007ae1 	.word	0x08007ae1
 80050d8:	3ff80000 	.word	0x3ff80000
 80050dc:	08007e00 	.word	0x08007e00
 80050e0:	08007ce4 	.word	0x08007ce4
 80050e4:	2301      	movs	r3, #1
 80050e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050e8:	e7d4      	b.n	8005094 <_dtoa_r+0x2b4>
 80050ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80050ee:	465b      	mov	r3, fp
 80050f0:	f8cd b008 	str.w	fp, [sp, #8]
 80050f4:	e7a6      	b.n	8005044 <_dtoa_r+0x264>
 80050f6:	3101      	adds	r1, #1
 80050f8:	6041      	str	r1, [r0, #4]
 80050fa:	0052      	lsls	r2, r2, #1
 80050fc:	e7a6      	b.n	800504c <_dtoa_r+0x26c>
 80050fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005100:	9a08      	ldr	r2, [sp, #32]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	9b02      	ldr	r3, [sp, #8]
 8005106:	2b0e      	cmp	r3, #14
 8005108:	f200 80a8 	bhi.w	800525c <_dtoa_r+0x47c>
 800510c:	2c00      	cmp	r4, #0
 800510e:	f000 80a5 	beq.w	800525c <_dtoa_r+0x47c>
 8005112:	f1b9 0f00 	cmp.w	r9, #0
 8005116:	dd34      	ble.n	8005182 <_dtoa_r+0x3a2>
 8005118:	4a9a      	ldr	r2, [pc, #616]	; (8005384 <_dtoa_r+0x5a4>)
 800511a:	f009 030f 	and.w	r3, r9, #15
 800511e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005122:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005126:	e9d3 3400 	ldrd	r3, r4, [r3]
 800512a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800512e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005132:	d016      	beq.n	8005162 <_dtoa_r+0x382>
 8005134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005138:	4b93      	ldr	r3, [pc, #588]	; (8005388 <_dtoa_r+0x5a8>)
 800513a:	2703      	movs	r7, #3
 800513c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005140:	f7fb faf4 	bl	800072c <__aeabi_ddiv>
 8005144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005148:	f004 040f 	and.w	r4, r4, #15
 800514c:	4e8e      	ldr	r6, [pc, #568]	; (8005388 <_dtoa_r+0x5a8>)
 800514e:	b954      	cbnz	r4, 8005166 <_dtoa_r+0x386>
 8005150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005158:	f7fb fae8 	bl	800072c <__aeabi_ddiv>
 800515c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005160:	e029      	b.n	80051b6 <_dtoa_r+0x3d6>
 8005162:	2702      	movs	r7, #2
 8005164:	e7f2      	b.n	800514c <_dtoa_r+0x36c>
 8005166:	07e1      	lsls	r1, r4, #31
 8005168:	d508      	bpl.n	800517c <_dtoa_r+0x39c>
 800516a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800516e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005172:	f7fb f9b1 	bl	80004d8 <__aeabi_dmul>
 8005176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800517a:	3701      	adds	r7, #1
 800517c:	1064      	asrs	r4, r4, #1
 800517e:	3608      	adds	r6, #8
 8005180:	e7e5      	b.n	800514e <_dtoa_r+0x36e>
 8005182:	f000 80a5 	beq.w	80052d0 <_dtoa_r+0x4f0>
 8005186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800518a:	f1c9 0400 	rsb	r4, r9, #0
 800518e:	4b7d      	ldr	r3, [pc, #500]	; (8005384 <_dtoa_r+0x5a4>)
 8005190:	f004 020f 	and.w	r2, r4, #15
 8005194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb f99c 	bl	80004d8 <__aeabi_dmul>
 80051a0:	2702      	movs	r7, #2
 80051a2:	2300      	movs	r3, #0
 80051a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a8:	4e77      	ldr	r6, [pc, #476]	; (8005388 <_dtoa_r+0x5a8>)
 80051aa:	1124      	asrs	r4, r4, #4
 80051ac:	2c00      	cmp	r4, #0
 80051ae:	f040 8084 	bne.w	80052ba <_dtoa_r+0x4da>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1d2      	bne.n	800515c <_dtoa_r+0x37c>
 80051b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 808b 	beq.w	80052d4 <_dtoa_r+0x4f4>
 80051be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b6f      	ldr	r3, [pc, #444]	; (800538c <_dtoa_r+0x5ac>)
 80051ce:	f7fb fbf5 	bl	80009bc <__aeabi_dcmplt>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d07e      	beq.n	80052d4 <_dtoa_r+0x4f4>
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d07b      	beq.n	80052d4 <_dtoa_r+0x4f4>
 80051dc:	f1bb 0f00 	cmp.w	fp, #0
 80051e0:	dd38      	ble.n	8005254 <_dtoa_r+0x474>
 80051e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051e6:	2200      	movs	r2, #0
 80051e8:	4b69      	ldr	r3, [pc, #420]	; (8005390 <_dtoa_r+0x5b0>)
 80051ea:	f7fb f975 	bl	80004d8 <__aeabi_dmul>
 80051ee:	465c      	mov	r4, fp
 80051f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f4:	f109 38ff 	add.w	r8, r9, #4294967295
 80051f8:	3701      	adds	r7, #1
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7fb f902 	bl	8000404 <__aeabi_i2d>
 8005200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005204:	f7fb f968 	bl	80004d8 <__aeabi_dmul>
 8005208:	2200      	movs	r2, #0
 800520a:	4b62      	ldr	r3, [pc, #392]	; (8005394 <_dtoa_r+0x5b4>)
 800520c:	f7fa ffae 	bl	800016c <__adddf3>
 8005210:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005218:	9611      	str	r6, [sp, #68]	; 0x44
 800521a:	2c00      	cmp	r4, #0
 800521c:	d15d      	bne.n	80052da <_dtoa_r+0x4fa>
 800521e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005222:	2200      	movs	r2, #0
 8005224:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <_dtoa_r+0x5b8>)
 8005226:	f7fa ff9f 	bl	8000168 <__aeabi_dsub>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005232:	4633      	mov	r3, r6
 8005234:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005236:	f7fb fbdf 	bl	80009f8 <__aeabi_dcmpgt>
 800523a:	2800      	cmp	r0, #0
 800523c:	f040 829e 	bne.w	800577c <_dtoa_r+0x99c>
 8005240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005246:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800524a:	f7fb fbb7 	bl	80009bc <__aeabi_dcmplt>
 800524e:	2800      	cmp	r0, #0
 8005250:	f040 8292 	bne.w	8005778 <_dtoa_r+0x998>
 8005254:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005258:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800525c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800525e:	2b00      	cmp	r3, #0
 8005260:	f2c0 8153 	blt.w	800550a <_dtoa_r+0x72a>
 8005264:	f1b9 0f0e 	cmp.w	r9, #14
 8005268:	f300 814f 	bgt.w	800550a <_dtoa_r+0x72a>
 800526c:	4b45      	ldr	r3, [pc, #276]	; (8005384 <_dtoa_r+0x5a4>)
 800526e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005272:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005276:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800527a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800527c:	2b00      	cmp	r3, #0
 800527e:	f280 80db 	bge.w	8005438 <_dtoa_r+0x658>
 8005282:	9b02      	ldr	r3, [sp, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f300 80d7 	bgt.w	8005438 <_dtoa_r+0x658>
 800528a:	f040 8274 	bne.w	8005776 <_dtoa_r+0x996>
 800528e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005292:	2200      	movs	r2, #0
 8005294:	4b40      	ldr	r3, [pc, #256]	; (8005398 <_dtoa_r+0x5b8>)
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529e:	f7fb fba1 	bl	80009e4 <__aeabi_dcmpge>
 80052a2:	9c02      	ldr	r4, [sp, #8]
 80052a4:	4626      	mov	r6, r4
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f040 824a 	bne.w	8005740 <_dtoa_r+0x960>
 80052ac:	2331      	movs	r3, #49	; 0x31
 80052ae:	9f08      	ldr	r7, [sp, #32]
 80052b0:	f109 0901 	add.w	r9, r9, #1
 80052b4:	f807 3b01 	strb.w	r3, [r7], #1
 80052b8:	e246      	b.n	8005748 <_dtoa_r+0x968>
 80052ba:	07e2      	lsls	r2, r4, #31
 80052bc:	d505      	bpl.n	80052ca <_dtoa_r+0x4ea>
 80052be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052c2:	f7fb f909 	bl	80004d8 <__aeabi_dmul>
 80052c6:	2301      	movs	r3, #1
 80052c8:	3701      	adds	r7, #1
 80052ca:	1064      	asrs	r4, r4, #1
 80052cc:	3608      	adds	r6, #8
 80052ce:	e76d      	b.n	80051ac <_dtoa_r+0x3cc>
 80052d0:	2702      	movs	r7, #2
 80052d2:	e770      	b.n	80051b6 <_dtoa_r+0x3d6>
 80052d4:	46c8      	mov	r8, r9
 80052d6:	9c02      	ldr	r4, [sp, #8]
 80052d8:	e78f      	b.n	80051fa <_dtoa_r+0x41a>
 80052da:	9908      	ldr	r1, [sp, #32]
 80052dc:	4b29      	ldr	r3, [pc, #164]	; (8005384 <_dtoa_r+0x5a4>)
 80052de:	4421      	add	r1, r4
 80052e0:	9112      	str	r1, [sp, #72]	; 0x48
 80052e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80052ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d055      	beq.n	80053a0 <_dtoa_r+0x5c0>
 80052f4:	2000      	movs	r0, #0
 80052f6:	4929      	ldr	r1, [pc, #164]	; (800539c <_dtoa_r+0x5bc>)
 80052f8:	f7fb fa18 	bl	800072c <__aeabi_ddiv>
 80052fc:	463b      	mov	r3, r7
 80052fe:	4632      	mov	r2, r6
 8005300:	f7fa ff32 	bl	8000168 <__aeabi_dsub>
 8005304:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005308:	9f08      	ldr	r7, [sp, #32]
 800530a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800530e:	f7fb fb93 	bl	8000a38 <__aeabi_d2iz>
 8005312:	4604      	mov	r4, r0
 8005314:	f7fb f876 	bl	8000404 <__aeabi_i2d>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005320:	f7fa ff22 	bl	8000168 <__aeabi_dsub>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	3430      	adds	r4, #48	; 0x30
 800532a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800532e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005332:	f807 4b01 	strb.w	r4, [r7], #1
 8005336:	f7fb fb41 	bl	80009bc <__aeabi_dcmplt>
 800533a:	2800      	cmp	r0, #0
 800533c:	d174      	bne.n	8005428 <_dtoa_r+0x648>
 800533e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005342:	2000      	movs	r0, #0
 8005344:	4911      	ldr	r1, [pc, #68]	; (800538c <_dtoa_r+0x5ac>)
 8005346:	f7fa ff0f 	bl	8000168 <__aeabi_dsub>
 800534a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800534e:	f7fb fb35 	bl	80009bc <__aeabi_dcmplt>
 8005352:	2800      	cmp	r0, #0
 8005354:	f040 80b6 	bne.w	80054c4 <_dtoa_r+0x6e4>
 8005358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800535a:	429f      	cmp	r7, r3
 800535c:	f43f af7a 	beq.w	8005254 <_dtoa_r+0x474>
 8005360:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005364:	2200      	movs	r2, #0
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <_dtoa_r+0x5b0>)
 8005368:	f7fb f8b6 	bl	80004d8 <__aeabi_dmul>
 800536c:	2200      	movs	r2, #0
 800536e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <_dtoa_r+0x5b0>)
 8005378:	f7fb f8ae 	bl	80004d8 <__aeabi_dmul>
 800537c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005380:	e7c3      	b.n	800530a <_dtoa_r+0x52a>
 8005382:	bf00      	nop
 8005384:	08007e00 	.word	0x08007e00
 8005388:	08007dd8 	.word	0x08007dd8
 800538c:	3ff00000 	.word	0x3ff00000
 8005390:	40240000 	.word	0x40240000
 8005394:	401c0000 	.word	0x401c0000
 8005398:	40140000 	.word	0x40140000
 800539c:	3fe00000 	.word	0x3fe00000
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fb f898 	bl	80004d8 <__aeabi_dmul>
 80053a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ae:	9c08      	ldr	r4, [sp, #32]
 80053b0:	9314      	str	r3, [sp, #80]	; 0x50
 80053b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b6:	f7fb fb3f 	bl	8000a38 <__aeabi_d2iz>
 80053ba:	9015      	str	r0, [sp, #84]	; 0x54
 80053bc:	f7fb f822 	bl	8000404 <__aeabi_i2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c8:	f7fa fece 	bl	8000168 <__aeabi_dsub>
 80053cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053ce:	4606      	mov	r6, r0
 80053d0:	3330      	adds	r3, #48	; 0x30
 80053d2:	f804 3b01 	strb.w	r3, [r4], #1
 80053d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053d8:	460f      	mov	r7, r1
 80053da:	429c      	cmp	r4, r3
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	d124      	bne.n	800542c <_dtoa_r+0x64c>
 80053e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053e6:	4bb3      	ldr	r3, [pc, #716]	; (80056b4 <_dtoa_r+0x8d4>)
 80053e8:	f7fa fec0 	bl	800016c <__adddf3>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fb fb00 	bl	80009f8 <__aeabi_dcmpgt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d162      	bne.n	80054c2 <_dtoa_r+0x6e2>
 80053fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005400:	2000      	movs	r0, #0
 8005402:	49ac      	ldr	r1, [pc, #688]	; (80056b4 <_dtoa_r+0x8d4>)
 8005404:	f7fa feb0 	bl	8000168 <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fad4 	bl	80009bc <__aeabi_dcmplt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f43f af1d 	beq.w	8005254 <_dtoa_r+0x474>
 800541a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800541c:	1e7b      	subs	r3, r7, #1
 800541e:	9314      	str	r3, [sp, #80]	; 0x50
 8005420:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d0f8      	beq.n	800541a <_dtoa_r+0x63a>
 8005428:	46c1      	mov	r9, r8
 800542a:	e03a      	b.n	80054a2 <_dtoa_r+0x6c2>
 800542c:	4ba2      	ldr	r3, [pc, #648]	; (80056b8 <_dtoa_r+0x8d8>)
 800542e:	f7fb f853 	bl	80004d8 <__aeabi_dmul>
 8005432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005436:	e7bc      	b.n	80053b2 <_dtoa_r+0x5d2>
 8005438:	9f08      	ldr	r7, [sp, #32]
 800543a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800543e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005442:	f7fb f973 	bl	800072c <__aeabi_ddiv>
 8005446:	f7fb faf7 	bl	8000a38 <__aeabi_d2iz>
 800544a:	4604      	mov	r4, r0
 800544c:	f7fa ffda 	bl	8000404 <__aeabi_i2d>
 8005450:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005454:	f7fb f840 	bl	80004d8 <__aeabi_dmul>
 8005458:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800545c:	460b      	mov	r3, r1
 800545e:	4602      	mov	r2, r0
 8005460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005464:	f7fa fe80 	bl	8000168 <__aeabi_dsub>
 8005468:	f807 6b01 	strb.w	r6, [r7], #1
 800546c:	9e08      	ldr	r6, [sp, #32]
 800546e:	9b02      	ldr	r3, [sp, #8]
 8005470:	1bbe      	subs	r6, r7, r6
 8005472:	42b3      	cmp	r3, r6
 8005474:	d13a      	bne.n	80054ec <_dtoa_r+0x70c>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	f7fa fe77 	bl	800016c <__adddf3>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800548a:	f7fb fab5 	bl	80009f8 <__aeabi_dcmpgt>
 800548e:	bb58      	cbnz	r0, 80054e8 <_dtoa_r+0x708>
 8005490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005498:	f7fb fa86 	bl	80009a8 <__aeabi_dcmpeq>
 800549c:	b108      	cbz	r0, 80054a2 <_dtoa_r+0x6c2>
 800549e:	07e1      	lsls	r1, r4, #31
 80054a0:	d422      	bmi.n	80054e8 <_dtoa_r+0x708>
 80054a2:	4628      	mov	r0, r5
 80054a4:	4651      	mov	r1, sl
 80054a6:	f000 fe69 	bl	800617c <_Bfree>
 80054aa:	2300      	movs	r3, #0
 80054ac:	703b      	strb	r3, [r7, #0]
 80054ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054b0:	f109 0001 	add.w	r0, r9, #1
 80054b4:	6018      	str	r0, [r3, #0]
 80054b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f43f acdf 	beq.w	8004e7c <_dtoa_r+0x9c>
 80054be:	601f      	str	r7, [r3, #0]
 80054c0:	e4dc      	b.n	8004e7c <_dtoa_r+0x9c>
 80054c2:	4627      	mov	r7, r4
 80054c4:	463b      	mov	r3, r7
 80054c6:	461f      	mov	r7, r3
 80054c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054cc:	2a39      	cmp	r2, #57	; 0x39
 80054ce:	d107      	bne.n	80054e0 <_dtoa_r+0x700>
 80054d0:	9a08      	ldr	r2, [sp, #32]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d1f7      	bne.n	80054c6 <_dtoa_r+0x6e6>
 80054d6:	2230      	movs	r2, #48	; 0x30
 80054d8:	9908      	ldr	r1, [sp, #32]
 80054da:	f108 0801 	add.w	r8, r8, #1
 80054de:	700a      	strb	r2, [r1, #0]
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	3201      	adds	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e79f      	b.n	8005428 <_dtoa_r+0x648>
 80054e8:	46c8      	mov	r8, r9
 80054ea:	e7eb      	b.n	80054c4 <_dtoa_r+0x6e4>
 80054ec:	2200      	movs	r2, #0
 80054ee:	4b72      	ldr	r3, [pc, #456]	; (80056b8 <_dtoa_r+0x8d8>)
 80054f0:	f7fa fff2 	bl	80004d8 <__aeabi_dmul>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2300      	movs	r3, #0
 8005500:	f7fb fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8005504:	2800      	cmp	r0, #0
 8005506:	d098      	beq.n	800543a <_dtoa_r+0x65a>
 8005508:	e7cb      	b.n	80054a2 <_dtoa_r+0x6c2>
 800550a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800550c:	2a00      	cmp	r2, #0
 800550e:	f000 80cd 	beq.w	80056ac <_dtoa_r+0x8cc>
 8005512:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005514:	2a01      	cmp	r2, #1
 8005516:	f300 80af 	bgt.w	8005678 <_dtoa_r+0x898>
 800551a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800551c:	2a00      	cmp	r2, #0
 800551e:	f000 80a7 	beq.w	8005670 <_dtoa_r+0x890>
 8005522:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005526:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005528:	9f06      	ldr	r7, [sp, #24]
 800552a:	9a06      	ldr	r2, [sp, #24]
 800552c:	2101      	movs	r1, #1
 800552e:	441a      	add	r2, r3
 8005530:	9206      	str	r2, [sp, #24]
 8005532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005534:	4628      	mov	r0, r5
 8005536:	441a      	add	r2, r3
 8005538:	9209      	str	r2, [sp, #36]	; 0x24
 800553a:	f000 ff23 	bl	8006384 <__i2b>
 800553e:	4606      	mov	r6, r0
 8005540:	2f00      	cmp	r7, #0
 8005542:	dd0c      	ble.n	800555e <_dtoa_r+0x77e>
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd09      	ble.n	800555e <_dtoa_r+0x77e>
 800554a:	42bb      	cmp	r3, r7
 800554c:	bfa8      	it	ge
 800554e:	463b      	movge	r3, r7
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	1aff      	subs	r7, r7, r3
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	9206      	str	r2, [sp, #24]
 8005558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	9309      	str	r3, [sp, #36]	; 0x24
 800555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005560:	b1f3      	cbz	r3, 80055a0 <_dtoa_r+0x7c0>
 8005562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80a9 	beq.w	80056bc <_dtoa_r+0x8dc>
 800556a:	2c00      	cmp	r4, #0
 800556c:	dd10      	ble.n	8005590 <_dtoa_r+0x7b0>
 800556e:	4631      	mov	r1, r6
 8005570:	4622      	mov	r2, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 ffc0 	bl	80064f8 <__pow5mult>
 8005578:	4652      	mov	r2, sl
 800557a:	4601      	mov	r1, r0
 800557c:	4606      	mov	r6, r0
 800557e:	4628      	mov	r0, r5
 8005580:	f000 ff16 	bl	80063b0 <__multiply>
 8005584:	4680      	mov	r8, r0
 8005586:	4651      	mov	r1, sl
 8005588:	4628      	mov	r0, r5
 800558a:	f000 fdf7 	bl	800617c <_Bfree>
 800558e:	46c2      	mov	sl, r8
 8005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005592:	1b1a      	subs	r2, r3, r4
 8005594:	d004      	beq.n	80055a0 <_dtoa_r+0x7c0>
 8005596:	4651      	mov	r1, sl
 8005598:	4628      	mov	r0, r5
 800559a:	f000 ffad 	bl	80064f8 <__pow5mult>
 800559e:	4682      	mov	sl, r0
 80055a0:	2101      	movs	r1, #1
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 feee 	bl	8006384 <__i2b>
 80055a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055aa:	4604      	mov	r4, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f340 8087 	ble.w	80056c0 <_dtoa_r+0x8e0>
 80055b2:	461a      	mov	r2, r3
 80055b4:	4601      	mov	r1, r0
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 ff9e 	bl	80064f8 <__pow5mult>
 80055bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055be:	4604      	mov	r4, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	f340 8080 	ble.w	80056c6 <_dtoa_r+0x8e6>
 80055c6:	f04f 0800 	mov.w	r8, #0
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055d0:	6918      	ldr	r0, [r3, #16]
 80055d2:	f000 fe89 	bl	80062e8 <__hi0bits>
 80055d6:	f1c0 0020 	rsb	r0, r0, #32
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	4418      	add	r0, r3
 80055de:	f010 001f 	ands.w	r0, r0, #31
 80055e2:	f000 8092 	beq.w	800570a <_dtoa_r+0x92a>
 80055e6:	f1c0 0320 	rsb	r3, r0, #32
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	f340 808a 	ble.w	8005704 <_dtoa_r+0x924>
 80055f0:	f1c0 001c 	rsb	r0, r0, #28
 80055f4:	9b06      	ldr	r3, [sp, #24]
 80055f6:	4407      	add	r7, r0
 80055f8:	4403      	add	r3, r0
 80055fa:	9306      	str	r3, [sp, #24]
 80055fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fe:	4403      	add	r3, r0
 8005600:	9309      	str	r3, [sp, #36]	; 0x24
 8005602:	9b06      	ldr	r3, [sp, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dd05      	ble.n	8005614 <_dtoa_r+0x834>
 8005608:	4651      	mov	r1, sl
 800560a:	461a      	mov	r2, r3
 800560c:	4628      	mov	r0, r5
 800560e:	f000 ffcd 	bl	80065ac <__lshift>
 8005612:	4682      	mov	sl, r0
 8005614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	dd05      	ble.n	8005626 <_dtoa_r+0x846>
 800561a:	4621      	mov	r1, r4
 800561c:	461a      	mov	r2, r3
 800561e:	4628      	mov	r0, r5
 8005620:	f000 ffc4 	bl	80065ac <__lshift>
 8005624:	4604      	mov	r4, r0
 8005626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d070      	beq.n	800570e <_dtoa_r+0x92e>
 800562c:	4621      	mov	r1, r4
 800562e:	4650      	mov	r0, sl
 8005630:	f001 f828 	bl	8006684 <__mcmp>
 8005634:	2800      	cmp	r0, #0
 8005636:	da6a      	bge.n	800570e <_dtoa_r+0x92e>
 8005638:	2300      	movs	r3, #0
 800563a:	4651      	mov	r1, sl
 800563c:	220a      	movs	r2, #10
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fdbe 	bl	80061c0 <__multadd>
 8005644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005646:	4682      	mov	sl, r0
 8005648:	f109 39ff 	add.w	r9, r9, #4294967295
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8193 	beq.w	8005978 <_dtoa_r+0xb98>
 8005652:	4631      	mov	r1, r6
 8005654:	2300      	movs	r3, #0
 8005656:	220a      	movs	r2, #10
 8005658:	4628      	mov	r0, r5
 800565a:	f000 fdb1 	bl	80061c0 <__multadd>
 800565e:	f1bb 0f00 	cmp.w	fp, #0
 8005662:	4606      	mov	r6, r0
 8005664:	f300 8093 	bgt.w	800578e <_dtoa_r+0x9ae>
 8005668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800566a:	2b02      	cmp	r3, #2
 800566c:	dc57      	bgt.n	800571e <_dtoa_r+0x93e>
 800566e:	e08e      	b.n	800578e <_dtoa_r+0x9ae>
 8005670:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005672:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005676:	e756      	b.n	8005526 <_dtoa_r+0x746>
 8005678:	9b02      	ldr	r3, [sp, #8]
 800567a:	1e5c      	subs	r4, r3, #1
 800567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567e:	42a3      	cmp	r3, r4
 8005680:	bfb7      	itett	lt
 8005682:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005684:	1b1c      	subge	r4, r3, r4
 8005686:	1ae2      	sublt	r2, r4, r3
 8005688:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800568a:	bfbe      	ittt	lt
 800568c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800568e:	189b      	addlt	r3, r3, r2
 8005690:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005692:	9b02      	ldr	r3, [sp, #8]
 8005694:	bfb8      	it	lt
 8005696:	2400      	movlt	r4, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfbb      	ittet	lt
 800569c:	9b06      	ldrlt	r3, [sp, #24]
 800569e:	9a02      	ldrlt	r2, [sp, #8]
 80056a0:	9f06      	ldrge	r7, [sp, #24]
 80056a2:	1a9f      	sublt	r7, r3, r2
 80056a4:	bfac      	ite	ge
 80056a6:	9b02      	ldrge	r3, [sp, #8]
 80056a8:	2300      	movlt	r3, #0
 80056aa:	e73e      	b.n	800552a <_dtoa_r+0x74a>
 80056ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056ae:	9f06      	ldr	r7, [sp, #24]
 80056b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80056b2:	e745      	b.n	8005540 <_dtoa_r+0x760>
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	40240000 	.word	0x40240000
 80056bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056be:	e76a      	b.n	8005596 <_dtoa_r+0x7b6>
 80056c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	dc19      	bgt.n	80056fa <_dtoa_r+0x91a>
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	b9bb      	cbnz	r3, 80056fa <_dtoa_r+0x91a>
 80056ca:	9b05      	ldr	r3, [sp, #20]
 80056cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d0:	b99b      	cbnz	r3, 80056fa <_dtoa_r+0x91a>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	0d1b      	lsrs	r3, r3, #20
 80056da:	051b      	lsls	r3, r3, #20
 80056dc:	b183      	cbz	r3, 8005700 <_dtoa_r+0x920>
 80056de:	f04f 0801 	mov.w	r8, #1
 80056e2:	9b06      	ldr	r3, [sp, #24]
 80056e4:	3301      	adds	r3, #1
 80056e6:	9306      	str	r3, [sp, #24]
 80056e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
 80056ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f af6a 	bne.w	80055ca <_dtoa_r+0x7ea>
 80056f6:	2001      	movs	r0, #1
 80056f8:	e76f      	b.n	80055da <_dtoa_r+0x7fa>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	e7f6      	b.n	80056ee <_dtoa_r+0x90e>
 8005700:	4698      	mov	r8, r3
 8005702:	e7f4      	b.n	80056ee <_dtoa_r+0x90e>
 8005704:	f43f af7d 	beq.w	8005602 <_dtoa_r+0x822>
 8005708:	4618      	mov	r0, r3
 800570a:	301c      	adds	r0, #28
 800570c:	e772      	b.n	80055f4 <_dtoa_r+0x814>
 800570e:	9b02      	ldr	r3, [sp, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc36      	bgt.n	8005782 <_dtoa_r+0x9a2>
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	2b02      	cmp	r3, #2
 8005718:	dd33      	ble.n	8005782 <_dtoa_r+0x9a2>
 800571a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800571e:	f1bb 0f00 	cmp.w	fp, #0
 8005722:	d10d      	bne.n	8005740 <_dtoa_r+0x960>
 8005724:	4621      	mov	r1, r4
 8005726:	465b      	mov	r3, fp
 8005728:	2205      	movs	r2, #5
 800572a:	4628      	mov	r0, r5
 800572c:	f000 fd48 	bl	80061c0 <__multadd>
 8005730:	4601      	mov	r1, r0
 8005732:	4604      	mov	r4, r0
 8005734:	4650      	mov	r0, sl
 8005736:	f000 ffa5 	bl	8006684 <__mcmp>
 800573a:	2800      	cmp	r0, #0
 800573c:	f73f adb6 	bgt.w	80052ac <_dtoa_r+0x4cc>
 8005740:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005742:	9f08      	ldr	r7, [sp, #32]
 8005744:	ea6f 0903 	mvn.w	r9, r3
 8005748:	f04f 0800 	mov.w	r8, #0
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 fd14 	bl	800617c <_Bfree>
 8005754:	2e00      	cmp	r6, #0
 8005756:	f43f aea4 	beq.w	80054a2 <_dtoa_r+0x6c2>
 800575a:	f1b8 0f00 	cmp.w	r8, #0
 800575e:	d005      	beq.n	800576c <_dtoa_r+0x98c>
 8005760:	45b0      	cmp	r8, r6
 8005762:	d003      	beq.n	800576c <_dtoa_r+0x98c>
 8005764:	4641      	mov	r1, r8
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fd08 	bl	800617c <_Bfree>
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	f000 fd04 	bl	800617c <_Bfree>
 8005774:	e695      	b.n	80054a2 <_dtoa_r+0x6c2>
 8005776:	2400      	movs	r4, #0
 8005778:	4626      	mov	r6, r4
 800577a:	e7e1      	b.n	8005740 <_dtoa_r+0x960>
 800577c:	46c1      	mov	r9, r8
 800577e:	4626      	mov	r6, r4
 8005780:	e594      	b.n	80052ac <_dtoa_r+0x4cc>
 8005782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005784:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80fc 	beq.w	8005986 <_dtoa_r+0xba6>
 800578e:	2f00      	cmp	r7, #0
 8005790:	dd05      	ble.n	800579e <_dtoa_r+0x9be>
 8005792:	4631      	mov	r1, r6
 8005794:	463a      	mov	r2, r7
 8005796:	4628      	mov	r0, r5
 8005798:	f000 ff08 	bl	80065ac <__lshift>
 800579c:	4606      	mov	r6, r0
 800579e:	f1b8 0f00 	cmp.w	r8, #0
 80057a2:	d05c      	beq.n	800585e <_dtoa_r+0xa7e>
 80057a4:	4628      	mov	r0, r5
 80057a6:	6871      	ldr	r1, [r6, #4]
 80057a8:	f000 fca8 	bl	80060fc <_Balloc>
 80057ac:	4607      	mov	r7, r0
 80057ae:	b928      	cbnz	r0, 80057bc <_dtoa_r+0x9dc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057b6:	4b7e      	ldr	r3, [pc, #504]	; (80059b0 <_dtoa_r+0xbd0>)
 80057b8:	f7ff bb26 	b.w	8004e08 <_dtoa_r+0x28>
 80057bc:	6932      	ldr	r2, [r6, #16]
 80057be:	f106 010c 	add.w	r1, r6, #12
 80057c2:	3202      	adds	r2, #2
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	300c      	adds	r0, #12
 80057c8:	f000 fc8a 	bl	80060e0 <memcpy>
 80057cc:	2201      	movs	r2, #1
 80057ce:	4639      	mov	r1, r7
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 feeb 	bl	80065ac <__lshift>
 80057d6:	46b0      	mov	r8, r6
 80057d8:	4606      	mov	r6, r0
 80057da:	9b08      	ldr	r3, [sp, #32]
 80057dc:	3301      	adds	r3, #1
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	9b08      	ldr	r3, [sp, #32]
 80057e2:	445b      	add	r3, fp
 80057e4:	930a      	str	r3, [sp, #40]	; 0x28
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	9309      	str	r3, [sp, #36]	; 0x24
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	4621      	mov	r1, r4
 80057f2:	4650      	mov	r0, sl
 80057f4:	f103 3bff 	add.w	fp, r3, #4294967295
 80057f8:	f7ff fa64 	bl	8004cc4 <quorem>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4641      	mov	r1, r8
 8005800:	3330      	adds	r3, #48	; 0x30
 8005802:	9004      	str	r0, [sp, #16]
 8005804:	4650      	mov	r0, sl
 8005806:	930b      	str	r3, [sp, #44]	; 0x2c
 8005808:	f000 ff3c 	bl	8006684 <__mcmp>
 800580c:	4632      	mov	r2, r6
 800580e:	9006      	str	r0, [sp, #24]
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 ff52 	bl	80066bc <__mdiff>
 8005818:	68c2      	ldr	r2, [r0, #12]
 800581a:	4607      	mov	r7, r0
 800581c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581e:	bb02      	cbnz	r2, 8005862 <_dtoa_r+0xa82>
 8005820:	4601      	mov	r1, r0
 8005822:	4650      	mov	r0, sl
 8005824:	f000 ff2e 	bl	8006684 <__mcmp>
 8005828:	4602      	mov	r2, r0
 800582a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800582c:	4639      	mov	r1, r7
 800582e:	4628      	mov	r0, r5
 8005830:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005834:	f000 fca2 	bl	800617c <_Bfree>
 8005838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800583a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800583c:	9f02      	ldr	r7, [sp, #8]
 800583e:	ea43 0102 	orr.w	r1, r3, r2
 8005842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005844:	430b      	orrs	r3, r1
 8005846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005848:	d10d      	bne.n	8005866 <_dtoa_r+0xa86>
 800584a:	2b39      	cmp	r3, #57	; 0x39
 800584c:	d027      	beq.n	800589e <_dtoa_r+0xabe>
 800584e:	9a06      	ldr	r2, [sp, #24]
 8005850:	2a00      	cmp	r2, #0
 8005852:	dd01      	ble.n	8005858 <_dtoa_r+0xa78>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	3331      	adds	r3, #49	; 0x31
 8005858:	f88b 3000 	strb.w	r3, [fp]
 800585c:	e776      	b.n	800574c <_dtoa_r+0x96c>
 800585e:	4630      	mov	r0, r6
 8005860:	e7b9      	b.n	80057d6 <_dtoa_r+0x9f6>
 8005862:	2201      	movs	r2, #1
 8005864:	e7e2      	b.n	800582c <_dtoa_r+0xa4c>
 8005866:	9906      	ldr	r1, [sp, #24]
 8005868:	2900      	cmp	r1, #0
 800586a:	db04      	blt.n	8005876 <_dtoa_r+0xa96>
 800586c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800586e:	4301      	orrs	r1, r0
 8005870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005872:	4301      	orrs	r1, r0
 8005874:	d120      	bne.n	80058b8 <_dtoa_r+0xad8>
 8005876:	2a00      	cmp	r2, #0
 8005878:	ddee      	ble.n	8005858 <_dtoa_r+0xa78>
 800587a:	4651      	mov	r1, sl
 800587c:	2201      	movs	r2, #1
 800587e:	4628      	mov	r0, r5
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	f000 fe93 	bl	80065ac <__lshift>
 8005886:	4621      	mov	r1, r4
 8005888:	4682      	mov	sl, r0
 800588a:	f000 fefb 	bl	8006684 <__mcmp>
 800588e:	2800      	cmp	r0, #0
 8005890:	9b02      	ldr	r3, [sp, #8]
 8005892:	dc02      	bgt.n	800589a <_dtoa_r+0xaba>
 8005894:	d1e0      	bne.n	8005858 <_dtoa_r+0xa78>
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d5de      	bpl.n	8005858 <_dtoa_r+0xa78>
 800589a:	2b39      	cmp	r3, #57	; 0x39
 800589c:	d1da      	bne.n	8005854 <_dtoa_r+0xa74>
 800589e:	2339      	movs	r3, #57	; 0x39
 80058a0:	f88b 3000 	strb.w	r3, [fp]
 80058a4:	463b      	mov	r3, r7
 80058a6:	461f      	mov	r7, r3
 80058a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	2a39      	cmp	r2, #57	; 0x39
 80058b0:	d050      	beq.n	8005954 <_dtoa_r+0xb74>
 80058b2:	3201      	adds	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e749      	b.n	800574c <_dtoa_r+0x96c>
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	dd03      	ble.n	80058c4 <_dtoa_r+0xae4>
 80058bc:	2b39      	cmp	r3, #57	; 0x39
 80058be:	d0ee      	beq.n	800589e <_dtoa_r+0xabe>
 80058c0:	3301      	adds	r3, #1
 80058c2:	e7c9      	b.n	8005858 <_dtoa_r+0xa78>
 80058c4:	9a02      	ldr	r2, [sp, #8]
 80058c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058cc:	428a      	cmp	r2, r1
 80058ce:	d02a      	beq.n	8005926 <_dtoa_r+0xb46>
 80058d0:	4651      	mov	r1, sl
 80058d2:	2300      	movs	r3, #0
 80058d4:	220a      	movs	r2, #10
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fc72 	bl	80061c0 <__multadd>
 80058dc:	45b0      	cmp	r8, r6
 80058de:	4682      	mov	sl, r0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	f04f 020a 	mov.w	r2, #10
 80058e8:	4641      	mov	r1, r8
 80058ea:	4628      	mov	r0, r5
 80058ec:	d107      	bne.n	80058fe <_dtoa_r+0xb1e>
 80058ee:	f000 fc67 	bl	80061c0 <__multadd>
 80058f2:	4680      	mov	r8, r0
 80058f4:	4606      	mov	r6, r0
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	3301      	adds	r3, #1
 80058fa:	9302      	str	r3, [sp, #8]
 80058fc:	e777      	b.n	80057ee <_dtoa_r+0xa0e>
 80058fe:	f000 fc5f 	bl	80061c0 <__multadd>
 8005902:	4631      	mov	r1, r6
 8005904:	4680      	mov	r8, r0
 8005906:	2300      	movs	r3, #0
 8005908:	220a      	movs	r2, #10
 800590a:	4628      	mov	r0, r5
 800590c:	f000 fc58 	bl	80061c0 <__multadd>
 8005910:	4606      	mov	r6, r0
 8005912:	e7f0      	b.n	80058f6 <_dtoa_r+0xb16>
 8005914:	f1bb 0f00 	cmp.w	fp, #0
 8005918:	bfcc      	ite	gt
 800591a:	465f      	movgt	r7, fp
 800591c:	2701      	movle	r7, #1
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	9a08      	ldr	r2, [sp, #32]
 8005924:	4417      	add	r7, r2
 8005926:	4651      	mov	r1, sl
 8005928:	2201      	movs	r2, #1
 800592a:	4628      	mov	r0, r5
 800592c:	9302      	str	r3, [sp, #8]
 800592e:	f000 fe3d 	bl	80065ac <__lshift>
 8005932:	4621      	mov	r1, r4
 8005934:	4682      	mov	sl, r0
 8005936:	f000 fea5 	bl	8006684 <__mcmp>
 800593a:	2800      	cmp	r0, #0
 800593c:	dcb2      	bgt.n	80058a4 <_dtoa_r+0xac4>
 800593e:	d102      	bne.n	8005946 <_dtoa_r+0xb66>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	07db      	lsls	r3, r3, #31
 8005944:	d4ae      	bmi.n	80058a4 <_dtoa_r+0xac4>
 8005946:	463b      	mov	r3, r7
 8005948:	461f      	mov	r7, r3
 800594a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800594e:	2a30      	cmp	r2, #48	; 0x30
 8005950:	d0fa      	beq.n	8005948 <_dtoa_r+0xb68>
 8005952:	e6fb      	b.n	800574c <_dtoa_r+0x96c>
 8005954:	9a08      	ldr	r2, [sp, #32]
 8005956:	429a      	cmp	r2, r3
 8005958:	d1a5      	bne.n	80058a6 <_dtoa_r+0xac6>
 800595a:	2331      	movs	r3, #49	; 0x31
 800595c:	f109 0901 	add.w	r9, r9, #1
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	e6f3      	b.n	800574c <_dtoa_r+0x96c>
 8005964:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <_dtoa_r+0xbd4>)
 8005966:	f7ff baa7 	b.w	8004eb8 <_dtoa_r+0xd8>
 800596a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f aa80 	bne.w	8004e72 <_dtoa_r+0x92>
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <_dtoa_r+0xbd8>)
 8005974:	f7ff baa0 	b.w	8004eb8 <_dtoa_r+0xd8>
 8005978:	f1bb 0f00 	cmp.w	fp, #0
 800597c:	dc03      	bgt.n	8005986 <_dtoa_r+0xba6>
 800597e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005980:	2b02      	cmp	r3, #2
 8005982:	f73f aecc 	bgt.w	800571e <_dtoa_r+0x93e>
 8005986:	9f08      	ldr	r7, [sp, #32]
 8005988:	4621      	mov	r1, r4
 800598a:	4650      	mov	r0, sl
 800598c:	f7ff f99a 	bl	8004cc4 <quorem>
 8005990:	9a08      	ldr	r2, [sp, #32]
 8005992:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005996:	f807 3b01 	strb.w	r3, [r7], #1
 800599a:	1aba      	subs	r2, r7, r2
 800599c:	4593      	cmp	fp, r2
 800599e:	ddb9      	ble.n	8005914 <_dtoa_r+0xb34>
 80059a0:	4651      	mov	r1, sl
 80059a2:	2300      	movs	r3, #0
 80059a4:	220a      	movs	r2, #10
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fc0a 	bl	80061c0 <__multadd>
 80059ac:	4682      	mov	sl, r0
 80059ae:	e7eb      	b.n	8005988 <_dtoa_r+0xba8>
 80059b0:	08007ce4 	.word	0x08007ce4
 80059b4:	08007ae0 	.word	0x08007ae0
 80059b8:	08007c61 	.word	0x08007c61

080059bc <rshift>:
 80059bc:	6903      	ldr	r3, [r0, #16]
 80059be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80059c6:	f100 0414 	add.w	r4, r0, #20
 80059ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80059ce:	dd46      	ble.n	8005a5e <rshift+0xa2>
 80059d0:	f011 011f 	ands.w	r1, r1, #31
 80059d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80059d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80059dc:	d10c      	bne.n	80059f8 <rshift+0x3c>
 80059de:	4629      	mov	r1, r5
 80059e0:	f100 0710 	add.w	r7, r0, #16
 80059e4:	42b1      	cmp	r1, r6
 80059e6:	d335      	bcc.n	8005a54 <rshift+0x98>
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	1eea      	subs	r2, r5, #3
 80059ee:	4296      	cmp	r6, r2
 80059f0:	bf38      	it	cc
 80059f2:	2300      	movcc	r3, #0
 80059f4:	4423      	add	r3, r4
 80059f6:	e015      	b.n	8005a24 <rshift+0x68>
 80059f8:	46a1      	mov	r9, r4
 80059fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80059fe:	f1c1 0820 	rsb	r8, r1, #32
 8005a02:	40cf      	lsrs	r7, r1
 8005a04:	f105 0e04 	add.w	lr, r5, #4
 8005a08:	4576      	cmp	r6, lr
 8005a0a:	46f4      	mov	ip, lr
 8005a0c:	d816      	bhi.n	8005a3c <rshift+0x80>
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009a      	lsls	r2, r3, #2
 8005a12:	3a04      	subs	r2, #4
 8005a14:	3501      	adds	r5, #1
 8005a16:	42ae      	cmp	r6, r5
 8005a18:	bf38      	it	cc
 8005a1a:	2200      	movcc	r2, #0
 8005a1c:	18a3      	adds	r3, r4, r2
 8005a1e:	50a7      	str	r7, [r4, r2]
 8005a20:	b107      	cbz	r7, 8005a24 <rshift+0x68>
 8005a22:	3304      	adds	r3, #4
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	eba3 0204 	sub.w	r2, r3, r4
 8005a2a:	bf08      	it	eq
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005a32:	6102      	str	r2, [r0, #16]
 8005a34:	bf08      	it	eq
 8005a36:	6143      	streq	r3, [r0, #20]
 8005a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a3c:	f8dc c000 	ldr.w	ip, [ip]
 8005a40:	fa0c fc08 	lsl.w	ip, ip, r8
 8005a44:	ea4c 0707 	orr.w	r7, ip, r7
 8005a48:	f849 7b04 	str.w	r7, [r9], #4
 8005a4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a50:	40cf      	lsrs	r7, r1
 8005a52:	e7d9      	b.n	8005a08 <rshift+0x4c>
 8005a54:	f851 cb04 	ldr.w	ip, [r1], #4
 8005a58:	f847 cf04 	str.w	ip, [r7, #4]!
 8005a5c:	e7c2      	b.n	80059e4 <rshift+0x28>
 8005a5e:	4623      	mov	r3, r4
 8005a60:	e7e0      	b.n	8005a24 <rshift+0x68>

08005a62 <__hexdig_fun>:
 8005a62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005a66:	2b09      	cmp	r3, #9
 8005a68:	d802      	bhi.n	8005a70 <__hexdig_fun+0xe>
 8005a6a:	3820      	subs	r0, #32
 8005a6c:	b2c0      	uxtb	r0, r0
 8005a6e:	4770      	bx	lr
 8005a70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d801      	bhi.n	8005a7c <__hexdig_fun+0x1a>
 8005a78:	3847      	subs	r0, #71	; 0x47
 8005a7a:	e7f7      	b.n	8005a6c <__hexdig_fun+0xa>
 8005a7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d801      	bhi.n	8005a88 <__hexdig_fun+0x26>
 8005a84:	3827      	subs	r0, #39	; 0x27
 8005a86:	e7f1      	b.n	8005a6c <__hexdig_fun+0xa>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__gethex>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	b08b      	sub	sp, #44	; 0x2c
 8005a92:	9306      	str	r3, [sp, #24]
 8005a94:	4bb9      	ldr	r3, [pc, #740]	; (8005d7c <__gethex+0x2f0>)
 8005a96:	9002      	str	r0, [sp, #8]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	f7fa fb55 	bl	8000150 <strlen>
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	f8db 2000 	ldr.w	r2, [fp]
 8005aae:	4403      	add	r3, r0
 8005ab0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005ab4:	9307      	str	r3, [sp, #28]
 8005ab6:	1c93      	adds	r3, r2, #2
 8005ab8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005abc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005ac0:	32fe      	adds	r2, #254	; 0xfe
 8005ac2:	18d1      	adds	r1, r2, r3
 8005ac4:	461f      	mov	r7, r3
 8005ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005aca:	9101      	str	r1, [sp, #4]
 8005acc:	2830      	cmp	r0, #48	; 0x30
 8005ace:	d0f8      	beq.n	8005ac2 <__gethex+0x36>
 8005ad0:	f7ff ffc7 	bl	8005a62 <__hexdig_fun>
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d13a      	bne.n	8005b50 <__gethex+0xc4>
 8005ada:	4652      	mov	r2, sl
 8005adc:	4638      	mov	r0, r7
 8005ade:	9903      	ldr	r1, [sp, #12]
 8005ae0:	f001 f9ea 	bl	8006eb8 <strncmp>
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d166      	bne.n	8005bb8 <__gethex+0x12c>
 8005aea:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005aee:	eb07 060a 	add.w	r6, r7, sl
 8005af2:	f7ff ffb6 	bl	8005a62 <__hexdig_fun>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d060      	beq.n	8005bbc <__gethex+0x130>
 8005afa:	4633      	mov	r3, r6
 8005afc:	7818      	ldrb	r0, [r3, #0]
 8005afe:	461f      	mov	r7, r3
 8005b00:	2830      	cmp	r0, #48	; 0x30
 8005b02:	f103 0301 	add.w	r3, r3, #1
 8005b06:	d0f9      	beq.n	8005afc <__gethex+0x70>
 8005b08:	f7ff ffab 	bl	8005a62 <__hexdig_fun>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	fab0 f480 	clz	r4, r0
 8005b12:	4635      	mov	r5, r6
 8005b14:	0964      	lsrs	r4, r4, #5
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	463a      	mov	r2, r7
 8005b1a:	4616      	mov	r6, r2
 8005b1c:	7830      	ldrb	r0, [r6, #0]
 8005b1e:	3201      	adds	r2, #1
 8005b20:	f7ff ff9f 	bl	8005a62 <__hexdig_fun>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d1f8      	bne.n	8005b1a <__gethex+0x8e>
 8005b28:	4652      	mov	r2, sl
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	f001 f9c3 	bl	8006eb8 <strncmp>
 8005b32:	b980      	cbnz	r0, 8005b56 <__gethex+0xca>
 8005b34:	b94d      	cbnz	r5, 8005b4a <__gethex+0xbe>
 8005b36:	eb06 050a 	add.w	r5, r6, sl
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	7830      	ldrb	r0, [r6, #0]
 8005b40:	3201      	adds	r2, #1
 8005b42:	f7ff ff8e 	bl	8005a62 <__hexdig_fun>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d1f8      	bne.n	8005b3c <__gethex+0xb0>
 8005b4a:	1bad      	subs	r5, r5, r6
 8005b4c:	00ad      	lsls	r5, r5, #2
 8005b4e:	e004      	b.n	8005b5a <__gethex+0xce>
 8005b50:	2400      	movs	r4, #0
 8005b52:	4625      	mov	r5, r4
 8005b54:	e7e0      	b.n	8005b18 <__gethex+0x8c>
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	d1f7      	bne.n	8005b4a <__gethex+0xbe>
 8005b5a:	7833      	ldrb	r3, [r6, #0]
 8005b5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b60:	2b50      	cmp	r3, #80	; 0x50
 8005b62:	d139      	bne.n	8005bd8 <__gethex+0x14c>
 8005b64:	7873      	ldrb	r3, [r6, #1]
 8005b66:	2b2b      	cmp	r3, #43	; 0x2b
 8005b68:	d02a      	beq.n	8005bc0 <__gethex+0x134>
 8005b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8005b6c:	d02c      	beq.n	8005bc8 <__gethex+0x13c>
 8005b6e:	f04f 0900 	mov.w	r9, #0
 8005b72:	1c71      	adds	r1, r6, #1
 8005b74:	7808      	ldrb	r0, [r1, #0]
 8005b76:	f7ff ff74 	bl	8005a62 <__hexdig_fun>
 8005b7a:	1e43      	subs	r3, r0, #1
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b18      	cmp	r3, #24
 8005b80:	d82a      	bhi.n	8005bd8 <__gethex+0x14c>
 8005b82:	f1a0 0210 	sub.w	r2, r0, #16
 8005b86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b8a:	f7ff ff6a 	bl	8005a62 <__hexdig_fun>
 8005b8e:	1e43      	subs	r3, r0, #1
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b18      	cmp	r3, #24
 8005b94:	d91b      	bls.n	8005bce <__gethex+0x142>
 8005b96:	f1b9 0f00 	cmp.w	r9, #0
 8005b9a:	d000      	beq.n	8005b9e <__gethex+0x112>
 8005b9c:	4252      	negs	r2, r2
 8005b9e:	4415      	add	r5, r2
 8005ba0:	f8cb 1000 	str.w	r1, [fp]
 8005ba4:	b1d4      	cbz	r4, 8005bdc <__gethex+0x150>
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf14      	ite	ne
 8005bac:	2700      	movne	r7, #0
 8005bae:	2706      	moveq	r7, #6
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	b00b      	add	sp, #44	; 0x2c
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	463e      	mov	r6, r7
 8005bba:	4625      	mov	r5, r4
 8005bbc:	2401      	movs	r4, #1
 8005bbe:	e7cc      	b.n	8005b5a <__gethex+0xce>
 8005bc0:	f04f 0900 	mov.w	r9, #0
 8005bc4:	1cb1      	adds	r1, r6, #2
 8005bc6:	e7d5      	b.n	8005b74 <__gethex+0xe8>
 8005bc8:	f04f 0901 	mov.w	r9, #1
 8005bcc:	e7fa      	b.n	8005bc4 <__gethex+0x138>
 8005bce:	230a      	movs	r3, #10
 8005bd0:	fb03 0202 	mla	r2, r3, r2, r0
 8005bd4:	3a10      	subs	r2, #16
 8005bd6:	e7d6      	b.n	8005b86 <__gethex+0xfa>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	e7e1      	b.n	8005ba0 <__gethex+0x114>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	1bf3      	subs	r3, r6, r7
 8005be0:	3b01      	subs	r3, #1
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	dc0a      	bgt.n	8005bfc <__gethex+0x170>
 8005be6:	9802      	ldr	r0, [sp, #8]
 8005be8:	f000 fa88 	bl	80060fc <_Balloc>
 8005bec:	4604      	mov	r4, r0
 8005bee:	b940      	cbnz	r0, 8005c02 <__gethex+0x176>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	21de      	movs	r1, #222	; 0xde
 8005bf4:	4b62      	ldr	r3, [pc, #392]	; (8005d80 <__gethex+0x2f4>)
 8005bf6:	4863      	ldr	r0, [pc, #396]	; (8005d84 <__gethex+0x2f8>)
 8005bf8:	f001 f97e 	bl	8006ef8 <__assert_func>
 8005bfc:	3101      	adds	r1, #1
 8005bfe:	105b      	asrs	r3, r3, #1
 8005c00:	e7ef      	b.n	8005be2 <__gethex+0x156>
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	f100 0914 	add.w	r9, r0, #20
 8005c0a:	f1ca 0301 	rsb	r3, sl, #1
 8005c0e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005c12:	f8cd b004 	str.w	fp, [sp, #4]
 8005c16:	9308      	str	r3, [sp, #32]
 8005c18:	42b7      	cmp	r7, r6
 8005c1a:	d33f      	bcc.n	8005c9c <__gethex+0x210>
 8005c1c:	9f04      	ldr	r7, [sp, #16]
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	f847 3b04 	str.w	r3, [r7], #4
 8005c24:	eba7 0709 	sub.w	r7, r7, r9
 8005c28:	10bf      	asrs	r7, r7, #2
 8005c2a:	6127      	str	r7, [r4, #16]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fb5b 	bl	80062e8 <__hi0bits>
 8005c32:	017f      	lsls	r7, r7, #5
 8005c34:	f8d8 6000 	ldr.w	r6, [r8]
 8005c38:	1a3f      	subs	r7, r7, r0
 8005c3a:	42b7      	cmp	r7, r6
 8005c3c:	dd62      	ble.n	8005d04 <__gethex+0x278>
 8005c3e:	1bbf      	subs	r7, r7, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fef1 	bl	8006a2a <__any_on>
 8005c48:	4682      	mov	sl, r0
 8005c4a:	b1a8      	cbz	r0, 8005c78 <__gethex+0x1ec>
 8005c4c:	f04f 0a01 	mov.w	sl, #1
 8005c50:	1e7b      	subs	r3, r7, #1
 8005c52:	1159      	asrs	r1, r3, #5
 8005c54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	fa0a f202 	lsl.w	r2, sl, r2
 8005c60:	420a      	tst	r2, r1
 8005c62:	d009      	beq.n	8005c78 <__gethex+0x1ec>
 8005c64:	4553      	cmp	r3, sl
 8005c66:	dd05      	ble.n	8005c74 <__gethex+0x1e8>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	1eb9      	subs	r1, r7, #2
 8005c6c:	f000 fedd 	bl	8006a2a <__any_on>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d144      	bne.n	8005cfe <__gethex+0x272>
 8005c74:	f04f 0a02 	mov.w	sl, #2
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff fe9e 	bl	80059bc <rshift>
 8005c80:	443d      	add	r5, r7
 8005c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c86:	42ab      	cmp	r3, r5
 8005c88:	da4a      	bge.n	8005d20 <__gethex+0x294>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	9802      	ldr	r0, [sp, #8]
 8005c8e:	f000 fa75 	bl	800617c <_Bfree>
 8005c92:	2300      	movs	r3, #0
 8005c94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c96:	27a3      	movs	r7, #163	; 0xa3
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e789      	b.n	8005bb0 <__gethex+0x124>
 8005c9c:	1e73      	subs	r3, r6, #1
 8005c9e:	9a07      	ldr	r2, [sp, #28]
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d019      	beq.n	8005cde <__gethex+0x252>
 8005caa:	f1bb 0f20 	cmp.w	fp, #32
 8005cae:	d107      	bne.n	8005cc0 <__gethex+0x234>
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	9a01      	ldr	r2, [sp, #4]
 8005cb4:	f843 2b04 	str.w	r2, [r3], #4
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	469b      	mov	fp, r3
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005cc4:	f7ff fecd 	bl	8005a62 <__hexdig_fun>
 8005cc8:	9b01      	ldr	r3, [sp, #4]
 8005cca:	f000 000f 	and.w	r0, r0, #15
 8005cce:	fa00 f00b 	lsl.w	r0, r0, fp
 8005cd2:	4303      	orrs	r3, r0
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	f10b 0b04 	add.w	fp, fp, #4
 8005cda:	9b05      	ldr	r3, [sp, #20]
 8005cdc:	e00d      	b.n	8005cfa <__gethex+0x26e>
 8005cde:	9b05      	ldr	r3, [sp, #20]
 8005ce0:	9a08      	ldr	r2, [sp, #32]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	42bb      	cmp	r3, r7
 8005ce6:	d3e0      	bcc.n	8005caa <__gethex+0x21e>
 8005ce8:	4618      	mov	r0, r3
 8005cea:	4652      	mov	r2, sl
 8005cec:	9903      	ldr	r1, [sp, #12]
 8005cee:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf0:	f001 f8e2 	bl	8006eb8 <strncmp>
 8005cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1d7      	bne.n	8005caa <__gethex+0x21e>
 8005cfa:	461e      	mov	r6, r3
 8005cfc:	e78c      	b.n	8005c18 <__gethex+0x18c>
 8005cfe:	f04f 0a03 	mov.w	sl, #3
 8005d02:	e7b9      	b.n	8005c78 <__gethex+0x1ec>
 8005d04:	da09      	bge.n	8005d1a <__gethex+0x28e>
 8005d06:	1bf7      	subs	r7, r6, r7
 8005d08:	4621      	mov	r1, r4
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	9802      	ldr	r0, [sp, #8]
 8005d0e:	f000 fc4d 	bl	80065ac <__lshift>
 8005d12:	4604      	mov	r4, r0
 8005d14:	1bed      	subs	r5, r5, r7
 8005d16:	f100 0914 	add.w	r9, r0, #20
 8005d1a:	f04f 0a00 	mov.w	sl, #0
 8005d1e:	e7b0      	b.n	8005c82 <__gethex+0x1f6>
 8005d20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005d24:	42a8      	cmp	r0, r5
 8005d26:	dd71      	ble.n	8005e0c <__gethex+0x380>
 8005d28:	1b45      	subs	r5, r0, r5
 8005d2a:	42ae      	cmp	r6, r5
 8005d2c:	dc34      	bgt.n	8005d98 <__gethex+0x30c>
 8005d2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d028      	beq.n	8005d88 <__gethex+0x2fc>
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d02a      	beq.n	8005d90 <__gethex+0x304>
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d115      	bne.n	8005d6a <__gethex+0x2de>
 8005d3e:	42ae      	cmp	r6, r5
 8005d40:	d113      	bne.n	8005d6a <__gethex+0x2de>
 8005d42:	2e01      	cmp	r6, #1
 8005d44:	d10b      	bne.n	8005d5e <__gethex+0x2d2>
 8005d46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005d4a:	9a06      	ldr	r2, [sp, #24]
 8005d4c:	2762      	movs	r7, #98	; 0x62
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	2301      	movs	r3, #1
 8005d52:	6123      	str	r3, [r4, #16]
 8005d54:	f8c9 3000 	str.w	r3, [r9]
 8005d58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d5a:	601c      	str	r4, [r3, #0]
 8005d5c:	e728      	b.n	8005bb0 <__gethex+0x124>
 8005d5e:	4620      	mov	r0, r4
 8005d60:	1e71      	subs	r1, r6, #1
 8005d62:	f000 fe62 	bl	8006a2a <__any_on>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1ed      	bne.n	8005d46 <__gethex+0x2ba>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	9802      	ldr	r0, [sp, #8]
 8005d6e:	f000 fa05 	bl	800617c <_Bfree>
 8005d72:	2300      	movs	r3, #0
 8005d74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d76:	2750      	movs	r7, #80	; 0x50
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e719      	b.n	8005bb0 <__gethex+0x124>
 8005d7c:	08007d60 	.word	0x08007d60
 8005d80:	08007ce4 	.word	0x08007ce4
 8005d84:	08007cf5 	.word	0x08007cf5
 8005d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1ed      	bne.n	8005d6a <__gethex+0x2de>
 8005d8e:	e7da      	b.n	8005d46 <__gethex+0x2ba>
 8005d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d7      	bne.n	8005d46 <__gethex+0x2ba>
 8005d96:	e7e8      	b.n	8005d6a <__gethex+0x2de>
 8005d98:	1e6f      	subs	r7, r5, #1
 8005d9a:	f1ba 0f00 	cmp.w	sl, #0
 8005d9e:	d132      	bne.n	8005e06 <__gethex+0x37a>
 8005da0:	b127      	cbz	r7, 8005dac <__gethex+0x320>
 8005da2:	4639      	mov	r1, r7
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 fe40 	bl	8006a2a <__any_on>
 8005daa:	4682      	mov	sl, r0
 8005dac:	2101      	movs	r1, #1
 8005dae:	117b      	asrs	r3, r7, #5
 8005db0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005db4:	f007 071f 	and.w	r7, r7, #31
 8005db8:	fa01 f707 	lsl.w	r7, r1, r7
 8005dbc:	421f      	tst	r7, r3
 8005dbe:	f04f 0702 	mov.w	r7, #2
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	bf18      	it	ne
 8005dc8:	f04a 0a02 	orrne.w	sl, sl, #2
 8005dcc:	1b76      	subs	r6, r6, r5
 8005dce:	f7ff fdf5 	bl	80059bc <rshift>
 8005dd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005dd6:	f1ba 0f00 	cmp.w	sl, #0
 8005dda:	d048      	beq.n	8005e6e <__gethex+0x3e2>
 8005ddc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d015      	beq.n	8005e10 <__gethex+0x384>
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d017      	beq.n	8005e18 <__gethex+0x38c>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d109      	bne.n	8005e00 <__gethex+0x374>
 8005dec:	f01a 0f02 	tst.w	sl, #2
 8005df0:	d006      	beq.n	8005e00 <__gethex+0x374>
 8005df2:	f8d9 0000 	ldr.w	r0, [r9]
 8005df6:	ea4a 0a00 	orr.w	sl, sl, r0
 8005dfa:	f01a 0f01 	tst.w	sl, #1
 8005dfe:	d10e      	bne.n	8005e1e <__gethex+0x392>
 8005e00:	f047 0710 	orr.w	r7, r7, #16
 8005e04:	e033      	b.n	8005e6e <__gethex+0x3e2>
 8005e06:	f04f 0a01 	mov.w	sl, #1
 8005e0a:	e7cf      	b.n	8005dac <__gethex+0x320>
 8005e0c:	2701      	movs	r7, #1
 8005e0e:	e7e2      	b.n	8005dd6 <__gethex+0x34a>
 8005e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e12:	f1c3 0301 	rsb	r3, r3, #1
 8005e16:	9315      	str	r3, [sp, #84]	; 0x54
 8005e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <__gethex+0x374>
 8005e1e:	f04f 0c00 	mov.w	ip, #0
 8005e22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005e26:	f104 0314 	add.w	r3, r4, #20
 8005e2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005e2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e38:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e3c:	d01c      	beq.n	8005e78 <__gethex+0x3ec>
 8005e3e:	3201      	adds	r2, #1
 8005e40:	6002      	str	r2, [r0, #0]
 8005e42:	2f02      	cmp	r7, #2
 8005e44:	f104 0314 	add.w	r3, r4, #20
 8005e48:	d13d      	bne.n	8005ec6 <__gethex+0x43a>
 8005e4a:	f8d8 2000 	ldr.w	r2, [r8]
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	42b2      	cmp	r2, r6
 8005e52:	d10a      	bne.n	8005e6a <__gethex+0x3de>
 8005e54:	2201      	movs	r2, #1
 8005e56:	1171      	asrs	r1, r6, #5
 8005e58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e5c:	f006 061f 	and.w	r6, r6, #31
 8005e60:	fa02 f606 	lsl.w	r6, r2, r6
 8005e64:	421e      	tst	r6, r3
 8005e66:	bf18      	it	ne
 8005e68:	4617      	movne	r7, r2
 8005e6a:	f047 0720 	orr.w	r7, r7, #32
 8005e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e70:	601c      	str	r4, [r3, #0]
 8005e72:	9b06      	ldr	r3, [sp, #24]
 8005e74:	601d      	str	r5, [r3, #0]
 8005e76:	e69b      	b.n	8005bb0 <__gethex+0x124>
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005e7e:	d8d8      	bhi.n	8005e32 <__gethex+0x3a6>
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	459b      	cmp	fp, r3
 8005e84:	db17      	blt.n	8005eb6 <__gethex+0x42a>
 8005e86:	6861      	ldr	r1, [r4, #4]
 8005e88:	9802      	ldr	r0, [sp, #8]
 8005e8a:	3101      	adds	r1, #1
 8005e8c:	f000 f936 	bl	80060fc <_Balloc>
 8005e90:	4681      	mov	r9, r0
 8005e92:	b918      	cbnz	r0, 8005e9c <__gethex+0x410>
 8005e94:	4602      	mov	r2, r0
 8005e96:	2184      	movs	r1, #132	; 0x84
 8005e98:	4b19      	ldr	r3, [pc, #100]	; (8005f00 <__gethex+0x474>)
 8005e9a:	e6ac      	b.n	8005bf6 <__gethex+0x16a>
 8005e9c:	6922      	ldr	r2, [r4, #16]
 8005e9e:	f104 010c 	add.w	r1, r4, #12
 8005ea2:	3202      	adds	r2, #2
 8005ea4:	0092      	lsls	r2, r2, #2
 8005ea6:	300c      	adds	r0, #12
 8005ea8:	f000 f91a 	bl	80060e0 <memcpy>
 8005eac:	4621      	mov	r1, r4
 8005eae:	9802      	ldr	r0, [sp, #8]
 8005eb0:	f000 f964 	bl	800617c <_Bfree>
 8005eb4:	464c      	mov	r4, r9
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	6122      	str	r2, [r4, #16]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ec2:	615a      	str	r2, [r3, #20]
 8005ec4:	e7bd      	b.n	8005e42 <__gethex+0x3b6>
 8005ec6:	6922      	ldr	r2, [r4, #16]
 8005ec8:	455a      	cmp	r2, fp
 8005eca:	dd0b      	ble.n	8005ee4 <__gethex+0x458>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff fd74 	bl	80059bc <rshift>
 8005ed4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ed8:	3501      	adds	r5, #1
 8005eda:	42ab      	cmp	r3, r5
 8005edc:	f6ff aed5 	blt.w	8005c8a <__gethex+0x1fe>
 8005ee0:	2701      	movs	r7, #1
 8005ee2:	e7c2      	b.n	8005e6a <__gethex+0x3de>
 8005ee4:	f016 061f 	ands.w	r6, r6, #31
 8005ee8:	d0fa      	beq.n	8005ee0 <__gethex+0x454>
 8005eea:	449a      	add	sl, r3
 8005eec:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005ef0:	f000 f9fa 	bl	80062e8 <__hi0bits>
 8005ef4:	f1c6 0620 	rsb	r6, r6, #32
 8005ef8:	42b0      	cmp	r0, r6
 8005efa:	dbe7      	blt.n	8005ecc <__gethex+0x440>
 8005efc:	e7f0      	b.n	8005ee0 <__gethex+0x454>
 8005efe:	bf00      	nop
 8005f00:	08007ce4 	.word	0x08007ce4

08005f04 <L_shift>:
 8005f04:	f1c2 0208 	rsb	r2, r2, #8
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	b570      	push	{r4, r5, r6, lr}
 8005f0c:	f1c2 0620 	rsb	r6, r2, #32
 8005f10:	6843      	ldr	r3, [r0, #4]
 8005f12:	6804      	ldr	r4, [r0, #0]
 8005f14:	fa03 f506 	lsl.w	r5, r3, r6
 8005f18:	432c      	orrs	r4, r5
 8005f1a:	40d3      	lsrs	r3, r2
 8005f1c:	6004      	str	r4, [r0, #0]
 8005f1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005f22:	4288      	cmp	r0, r1
 8005f24:	d3f4      	bcc.n	8005f10 <L_shift+0xc>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}

08005f28 <__match>:
 8005f28:	b530      	push	{r4, r5, lr}
 8005f2a:	6803      	ldr	r3, [r0, #0]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f32:	b914      	cbnz	r4, 8005f3a <__match+0x12>
 8005f34:	6003      	str	r3, [r0, #0]
 8005f36:	2001      	movs	r0, #1
 8005f38:	bd30      	pop	{r4, r5, pc}
 8005f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005f42:	2d19      	cmp	r5, #25
 8005f44:	bf98      	it	ls
 8005f46:	3220      	addls	r2, #32
 8005f48:	42a2      	cmp	r2, r4
 8005f4a:	d0f0      	beq.n	8005f2e <__match+0x6>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f3      	b.n	8005f38 <__match+0x10>

08005f50 <__hexnan>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	2500      	movs	r5, #0
 8005f56:	680b      	ldr	r3, [r1, #0]
 8005f58:	4682      	mov	sl, r0
 8005f5a:	115e      	asrs	r6, r3, #5
 8005f5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f60:	f013 031f 	ands.w	r3, r3, #31
 8005f64:	bf18      	it	ne
 8005f66:	3604      	addne	r6, #4
 8005f68:	1f37      	subs	r7, r6, #4
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	46b9      	mov	r9, r7
 8005f6e:	463c      	mov	r4, r7
 8005f70:	46ab      	mov	fp, r5
 8005f72:	b087      	sub	sp, #28
 8005f74:	6801      	ldr	r1, [r0, #0]
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	f846 5c04 	str.w	r5, [r6, #-4]
 8005f7c:	9502      	str	r5, [sp, #8]
 8005f7e:	784a      	ldrb	r2, [r1, #1]
 8005f80:	1c4b      	adds	r3, r1, #1
 8005f82:	9303      	str	r3, [sp, #12]
 8005f84:	b342      	cbz	r2, 8005fd8 <__hexnan+0x88>
 8005f86:	4610      	mov	r0, r2
 8005f88:	9105      	str	r1, [sp, #20]
 8005f8a:	9204      	str	r2, [sp, #16]
 8005f8c:	f7ff fd69 	bl	8005a62 <__hexdig_fun>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d14f      	bne.n	8006034 <__hexnan+0xe4>
 8005f94:	9a04      	ldr	r2, [sp, #16]
 8005f96:	9905      	ldr	r1, [sp, #20]
 8005f98:	2a20      	cmp	r2, #32
 8005f9a:	d818      	bhi.n	8005fce <__hexnan+0x7e>
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	459b      	cmp	fp, r3
 8005fa0:	dd13      	ble.n	8005fca <__hexnan+0x7a>
 8005fa2:	454c      	cmp	r4, r9
 8005fa4:	d206      	bcs.n	8005fb4 <__hexnan+0x64>
 8005fa6:	2d07      	cmp	r5, #7
 8005fa8:	dc04      	bgt.n	8005fb4 <__hexnan+0x64>
 8005faa:	462a      	mov	r2, r5
 8005fac:	4649      	mov	r1, r9
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff ffa8 	bl	8005f04 <L_shift>
 8005fb4:	4544      	cmp	r4, r8
 8005fb6:	d950      	bls.n	800605a <__hexnan+0x10a>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f1a4 0904 	sub.w	r9, r4, #4
 8005fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	464c      	mov	r4, r9
 8005fc6:	f8cd b008 	str.w	fp, [sp, #8]
 8005fca:	9903      	ldr	r1, [sp, #12]
 8005fcc:	e7d7      	b.n	8005f7e <__hexnan+0x2e>
 8005fce:	2a29      	cmp	r2, #41	; 0x29
 8005fd0:	d156      	bne.n	8006080 <__hexnan+0x130>
 8005fd2:	3102      	adds	r1, #2
 8005fd4:	f8ca 1000 	str.w	r1, [sl]
 8005fd8:	f1bb 0f00 	cmp.w	fp, #0
 8005fdc:	d050      	beq.n	8006080 <__hexnan+0x130>
 8005fde:	454c      	cmp	r4, r9
 8005fe0:	d206      	bcs.n	8005ff0 <__hexnan+0xa0>
 8005fe2:	2d07      	cmp	r5, #7
 8005fe4:	dc04      	bgt.n	8005ff0 <__hexnan+0xa0>
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4620      	mov	r0, r4
 8005fec:	f7ff ff8a 	bl	8005f04 <L_shift>
 8005ff0:	4544      	cmp	r4, r8
 8005ff2:	d934      	bls.n	800605e <__hexnan+0x10e>
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	f1a8 0204 	sub.w	r2, r8, #4
 8005ffa:	f853 1b04 	ldr.w	r1, [r3], #4
 8005ffe:	429f      	cmp	r7, r3
 8006000:	f842 1f04 	str.w	r1, [r2, #4]!
 8006004:	d2f9      	bcs.n	8005ffa <__hexnan+0xaa>
 8006006:	1b3b      	subs	r3, r7, r4
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	3304      	adds	r3, #4
 800600e:	3401      	adds	r4, #1
 8006010:	3e03      	subs	r6, #3
 8006012:	42b4      	cmp	r4, r6
 8006014:	bf88      	it	hi
 8006016:	2304      	movhi	r3, #4
 8006018:	2200      	movs	r2, #0
 800601a:	4443      	add	r3, r8
 800601c:	f843 2b04 	str.w	r2, [r3], #4
 8006020:	429f      	cmp	r7, r3
 8006022:	d2fb      	bcs.n	800601c <__hexnan+0xcc>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b91b      	cbnz	r3, 8006030 <__hexnan+0xe0>
 8006028:	4547      	cmp	r7, r8
 800602a:	d127      	bne.n	800607c <__hexnan+0x12c>
 800602c:	2301      	movs	r3, #1
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	2005      	movs	r0, #5
 8006032:	e026      	b.n	8006082 <__hexnan+0x132>
 8006034:	3501      	adds	r5, #1
 8006036:	2d08      	cmp	r5, #8
 8006038:	f10b 0b01 	add.w	fp, fp, #1
 800603c:	dd06      	ble.n	800604c <__hexnan+0xfc>
 800603e:	4544      	cmp	r4, r8
 8006040:	d9c3      	bls.n	8005fca <__hexnan+0x7a>
 8006042:	2300      	movs	r3, #0
 8006044:	2501      	movs	r5, #1
 8006046:	f844 3c04 	str.w	r3, [r4, #-4]
 800604a:	3c04      	subs	r4, #4
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	f000 000f 	and.w	r0, r0, #15
 8006052:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006056:	6022      	str	r2, [r4, #0]
 8006058:	e7b7      	b.n	8005fca <__hexnan+0x7a>
 800605a:	2508      	movs	r5, #8
 800605c:	e7b5      	b.n	8005fca <__hexnan+0x7a>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0df      	beq.n	8006024 <__hexnan+0xd4>
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	f1c3 0320 	rsb	r3, r3, #32
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006074:	401a      	ands	r2, r3
 8006076:	f846 2c04 	str.w	r2, [r6, #-4]
 800607a:	e7d3      	b.n	8006024 <__hexnan+0xd4>
 800607c:	3f04      	subs	r7, #4
 800607e:	e7d1      	b.n	8006024 <__hexnan+0xd4>
 8006080:	2004      	movs	r0, #4
 8006082:	b007      	add	sp, #28
 8006084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006088 <_localeconv_r>:
 8006088:	4800      	ldr	r0, [pc, #0]	; (800608c <_localeconv_r+0x4>)
 800608a:	4770      	bx	lr
 800608c:	20000164 	.word	0x20000164

08006090 <malloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <malloc+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f000 bd43 	b.w	8006b20 <_malloc_r>
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <__ascii_mbtowc>:
 80060a0:	b082      	sub	sp, #8
 80060a2:	b901      	cbnz	r1, 80060a6 <__ascii_mbtowc+0x6>
 80060a4:	a901      	add	r1, sp, #4
 80060a6:	b142      	cbz	r2, 80060ba <__ascii_mbtowc+0x1a>
 80060a8:	b14b      	cbz	r3, 80060be <__ascii_mbtowc+0x1e>
 80060aa:	7813      	ldrb	r3, [r2, #0]
 80060ac:	600b      	str	r3, [r1, #0]
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	1e10      	subs	r0, r2, #0
 80060b2:	bf18      	it	ne
 80060b4:	2001      	movne	r0, #1
 80060b6:	b002      	add	sp, #8
 80060b8:	4770      	bx	lr
 80060ba:	4610      	mov	r0, r2
 80060bc:	e7fb      	b.n	80060b6 <__ascii_mbtowc+0x16>
 80060be:	f06f 0001 	mvn.w	r0, #1
 80060c2:	e7f8      	b.n	80060b6 <__ascii_mbtowc+0x16>

080060c4 <memchr>:
 80060c4:	4603      	mov	r3, r0
 80060c6:	b510      	push	{r4, lr}
 80060c8:	b2c9      	uxtb	r1, r1
 80060ca:	4402      	add	r2, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	d101      	bne.n	80060d6 <memchr+0x12>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e003      	b.n	80060de <memchr+0x1a>
 80060d6:	7804      	ldrb	r4, [r0, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	428c      	cmp	r4, r1
 80060dc:	d1f6      	bne.n	80060cc <memchr+0x8>
 80060de:	bd10      	pop	{r4, pc}

080060e0 <memcpy>:
 80060e0:	440a      	add	r2, r1
 80060e2:	4291      	cmp	r1, r2
 80060e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e8:	d100      	bne.n	80060ec <memcpy+0xc>
 80060ea:	4770      	bx	lr
 80060ec:	b510      	push	{r4, lr}
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	4291      	cmp	r1, r2
 80060f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f8:	d1f9      	bne.n	80060ee <memcpy+0xe>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <_Balloc>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006100:	4604      	mov	r4, r0
 8006102:	460d      	mov	r5, r1
 8006104:	b976      	cbnz	r6, 8006124 <_Balloc+0x28>
 8006106:	2010      	movs	r0, #16
 8006108:	f7ff ffc2 	bl	8006090 <malloc>
 800610c:	4602      	mov	r2, r0
 800610e:	6260      	str	r0, [r4, #36]	; 0x24
 8006110:	b920      	cbnz	r0, 800611c <_Balloc+0x20>
 8006112:	2166      	movs	r1, #102	; 0x66
 8006114:	4b17      	ldr	r3, [pc, #92]	; (8006174 <_Balloc+0x78>)
 8006116:	4818      	ldr	r0, [pc, #96]	; (8006178 <_Balloc+0x7c>)
 8006118:	f000 feee 	bl	8006ef8 <__assert_func>
 800611c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006120:	6006      	str	r6, [r0, #0]
 8006122:	60c6      	str	r6, [r0, #12]
 8006124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006126:	68f3      	ldr	r3, [r6, #12]
 8006128:	b183      	cbz	r3, 800614c <_Balloc+0x50>
 800612a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006132:	b9b8      	cbnz	r0, 8006164 <_Balloc+0x68>
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f605 	lsl.w	r6, r1, r5
 800613a:	1d72      	adds	r2, r6, #5
 800613c:	4620      	mov	r0, r4
 800613e:	0092      	lsls	r2, r2, #2
 8006140:	f000 fc94 	bl	8006a6c <_calloc_r>
 8006144:	b160      	cbz	r0, 8006160 <_Balloc+0x64>
 8006146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800614a:	e00e      	b.n	800616a <_Balloc+0x6e>
 800614c:	2221      	movs	r2, #33	; 0x21
 800614e:	2104      	movs	r1, #4
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fc8b 	bl	8006a6c <_calloc_r>
 8006156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006158:	60f0      	str	r0, [r6, #12]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e4      	bne.n	800612a <_Balloc+0x2e>
 8006160:	2000      	movs	r0, #0
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	6802      	ldr	r2, [r0, #0]
 8006166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800616a:	2300      	movs	r3, #0
 800616c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006170:	e7f7      	b.n	8006162 <_Balloc+0x66>
 8006172:	bf00      	nop
 8006174:	08007c6e 	.word	0x08007c6e
 8006178:	08007d74 	.word	0x08007d74

0800617c <_Bfree>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b976      	cbnz	r6, 80061a4 <_Bfree+0x28>
 8006186:	2010      	movs	r0, #16
 8006188:	f7ff ff82 	bl	8006090 <malloc>
 800618c:	4602      	mov	r2, r0
 800618e:	6268      	str	r0, [r5, #36]	; 0x24
 8006190:	b920      	cbnz	r0, 800619c <_Bfree+0x20>
 8006192:	218a      	movs	r1, #138	; 0x8a
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <_Bfree+0x3c>)
 8006196:	4809      	ldr	r0, [pc, #36]	; (80061bc <_Bfree+0x40>)
 8006198:	f000 feae 	bl	8006ef8 <__assert_func>
 800619c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061a0:	6006      	str	r6, [r0, #0]
 80061a2:	60c6      	str	r6, [r0, #12]
 80061a4:	b13c      	cbz	r4, 80061b6 <_Bfree+0x3a>
 80061a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061a8:	6862      	ldr	r2, [r4, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b0:	6021      	str	r1, [r4, #0]
 80061b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	08007c6e 	.word	0x08007c6e
 80061bc:	08007d74 	.word	0x08007d74

080061c0 <__multadd>:
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c4:	4698      	mov	r8, r3
 80061c6:	460c      	mov	r4, r1
 80061c8:	2300      	movs	r3, #0
 80061ca:	690e      	ldr	r6, [r1, #16]
 80061cc:	4607      	mov	r7, r0
 80061ce:	f101 0014 	add.w	r0, r1, #20
 80061d2:	6805      	ldr	r5, [r0, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	b2a9      	uxth	r1, r5
 80061d8:	fb02 8101 	mla	r1, r2, r1, r8
 80061dc:	0c2d      	lsrs	r5, r5, #16
 80061de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80061e2:	fb02 c505 	mla	r5, r2, r5, ip
 80061e6:	b289      	uxth	r1, r1
 80061e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80061ec:	429e      	cmp	r6, r3
 80061ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80061f2:	f840 1b04 	str.w	r1, [r0], #4
 80061f6:	dcec      	bgt.n	80061d2 <__multadd+0x12>
 80061f8:	f1b8 0f00 	cmp.w	r8, #0
 80061fc:	d022      	beq.n	8006244 <__multadd+0x84>
 80061fe:	68a3      	ldr	r3, [r4, #8]
 8006200:	42b3      	cmp	r3, r6
 8006202:	dc19      	bgt.n	8006238 <__multadd+0x78>
 8006204:	6861      	ldr	r1, [r4, #4]
 8006206:	4638      	mov	r0, r7
 8006208:	3101      	adds	r1, #1
 800620a:	f7ff ff77 	bl	80060fc <_Balloc>
 800620e:	4605      	mov	r5, r0
 8006210:	b928      	cbnz	r0, 800621e <__multadd+0x5e>
 8006212:	4602      	mov	r2, r0
 8006214:	21b5      	movs	r1, #181	; 0xb5
 8006216:	4b0d      	ldr	r3, [pc, #52]	; (800624c <__multadd+0x8c>)
 8006218:	480d      	ldr	r0, [pc, #52]	; (8006250 <__multadd+0x90>)
 800621a:	f000 fe6d 	bl	8006ef8 <__assert_func>
 800621e:	6922      	ldr	r2, [r4, #16]
 8006220:	f104 010c 	add.w	r1, r4, #12
 8006224:	3202      	adds	r2, #2
 8006226:	0092      	lsls	r2, r2, #2
 8006228:	300c      	adds	r0, #12
 800622a:	f7ff ff59 	bl	80060e0 <memcpy>
 800622e:	4621      	mov	r1, r4
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff ffa3 	bl	800617c <_Bfree>
 8006236:	462c      	mov	r4, r5
 8006238:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800623c:	3601      	adds	r6, #1
 800623e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006242:	6126      	str	r6, [r4, #16]
 8006244:	4620      	mov	r0, r4
 8006246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624a:	bf00      	nop
 800624c:	08007ce4 	.word	0x08007ce4
 8006250:	08007d74 	.word	0x08007d74

08006254 <__s2b>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	4615      	mov	r5, r2
 800625a:	2209      	movs	r2, #9
 800625c:	461f      	mov	r7, r3
 800625e:	3308      	adds	r3, #8
 8006260:	460c      	mov	r4, r1
 8006262:	fb93 f3f2 	sdiv	r3, r3, r2
 8006266:	4606      	mov	r6, r0
 8006268:	2201      	movs	r2, #1
 800626a:	2100      	movs	r1, #0
 800626c:	429a      	cmp	r2, r3
 800626e:	db09      	blt.n	8006284 <__s2b+0x30>
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ff43 	bl	80060fc <_Balloc>
 8006276:	b940      	cbnz	r0, 800628a <__s2b+0x36>
 8006278:	4602      	mov	r2, r0
 800627a:	21ce      	movs	r1, #206	; 0xce
 800627c:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <__s2b+0x8c>)
 800627e:	4819      	ldr	r0, [pc, #100]	; (80062e4 <__s2b+0x90>)
 8006280:	f000 fe3a 	bl	8006ef8 <__assert_func>
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	3101      	adds	r1, #1
 8006288:	e7f0      	b.n	800626c <__s2b+0x18>
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	2d09      	cmp	r5, #9
 800628e:	6143      	str	r3, [r0, #20]
 8006290:	f04f 0301 	mov.w	r3, #1
 8006294:	6103      	str	r3, [r0, #16]
 8006296:	dd16      	ble.n	80062c6 <__s2b+0x72>
 8006298:	f104 0909 	add.w	r9, r4, #9
 800629c:	46c8      	mov	r8, r9
 800629e:	442c      	add	r4, r5
 80062a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80062a4:	4601      	mov	r1, r0
 80062a6:	220a      	movs	r2, #10
 80062a8:	4630      	mov	r0, r6
 80062aa:	3b30      	subs	r3, #48	; 0x30
 80062ac:	f7ff ff88 	bl	80061c0 <__multadd>
 80062b0:	45a0      	cmp	r8, r4
 80062b2:	d1f5      	bne.n	80062a0 <__s2b+0x4c>
 80062b4:	f1a5 0408 	sub.w	r4, r5, #8
 80062b8:	444c      	add	r4, r9
 80062ba:	1b2d      	subs	r5, r5, r4
 80062bc:	1963      	adds	r3, r4, r5
 80062be:	42bb      	cmp	r3, r7
 80062c0:	db04      	blt.n	80062cc <__s2b+0x78>
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	2509      	movs	r5, #9
 80062c8:	340a      	adds	r4, #10
 80062ca:	e7f6      	b.n	80062ba <__s2b+0x66>
 80062cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80062d0:	4601      	mov	r1, r0
 80062d2:	220a      	movs	r2, #10
 80062d4:	4630      	mov	r0, r6
 80062d6:	3b30      	subs	r3, #48	; 0x30
 80062d8:	f7ff ff72 	bl	80061c0 <__multadd>
 80062dc:	e7ee      	b.n	80062bc <__s2b+0x68>
 80062de:	bf00      	nop
 80062e0:	08007ce4 	.word	0x08007ce4
 80062e4:	08007d74 	.word	0x08007d74

080062e8 <__hi0bits>:
 80062e8:	0c02      	lsrs	r2, r0, #16
 80062ea:	0412      	lsls	r2, r2, #16
 80062ec:	4603      	mov	r3, r0
 80062ee:	b9ca      	cbnz	r2, 8006324 <__hi0bits+0x3c>
 80062f0:	0403      	lsls	r3, r0, #16
 80062f2:	2010      	movs	r0, #16
 80062f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80062f8:	bf04      	itt	eq
 80062fa:	021b      	lsleq	r3, r3, #8
 80062fc:	3008      	addeq	r0, #8
 80062fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006302:	bf04      	itt	eq
 8006304:	011b      	lsleq	r3, r3, #4
 8006306:	3004      	addeq	r0, #4
 8006308:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800630c:	bf04      	itt	eq
 800630e:	009b      	lsleq	r3, r3, #2
 8006310:	3002      	addeq	r0, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	db05      	blt.n	8006322 <__hi0bits+0x3a>
 8006316:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800631a:	f100 0001 	add.w	r0, r0, #1
 800631e:	bf08      	it	eq
 8006320:	2020      	moveq	r0, #32
 8006322:	4770      	bx	lr
 8006324:	2000      	movs	r0, #0
 8006326:	e7e5      	b.n	80062f4 <__hi0bits+0xc>

08006328 <__lo0bits>:
 8006328:	6803      	ldr	r3, [r0, #0]
 800632a:	4602      	mov	r2, r0
 800632c:	f013 0007 	ands.w	r0, r3, #7
 8006330:	d00b      	beq.n	800634a <__lo0bits+0x22>
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	d422      	bmi.n	800637c <__lo0bits+0x54>
 8006336:	0798      	lsls	r0, r3, #30
 8006338:	bf49      	itett	mi
 800633a:	085b      	lsrmi	r3, r3, #1
 800633c:	089b      	lsrpl	r3, r3, #2
 800633e:	2001      	movmi	r0, #1
 8006340:	6013      	strmi	r3, [r2, #0]
 8006342:	bf5c      	itt	pl
 8006344:	2002      	movpl	r0, #2
 8006346:	6013      	strpl	r3, [r2, #0]
 8006348:	4770      	bx	lr
 800634a:	b299      	uxth	r1, r3
 800634c:	b909      	cbnz	r1, 8006352 <__lo0bits+0x2a>
 800634e:	2010      	movs	r0, #16
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006356:	bf04      	itt	eq
 8006358:	0a1b      	lsreq	r3, r3, #8
 800635a:	3008      	addeq	r0, #8
 800635c:	0719      	lsls	r1, r3, #28
 800635e:	bf04      	itt	eq
 8006360:	091b      	lsreq	r3, r3, #4
 8006362:	3004      	addeq	r0, #4
 8006364:	0799      	lsls	r1, r3, #30
 8006366:	bf04      	itt	eq
 8006368:	089b      	lsreq	r3, r3, #2
 800636a:	3002      	addeq	r0, #2
 800636c:	07d9      	lsls	r1, r3, #31
 800636e:	d403      	bmi.n	8006378 <__lo0bits+0x50>
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	f100 0001 	add.w	r0, r0, #1
 8006376:	d003      	beq.n	8006380 <__lo0bits+0x58>
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4770      	bx	lr
 800637c:	2000      	movs	r0, #0
 800637e:	4770      	bx	lr
 8006380:	2020      	movs	r0, #32
 8006382:	4770      	bx	lr

08006384 <__i2b>:
 8006384:	b510      	push	{r4, lr}
 8006386:	460c      	mov	r4, r1
 8006388:	2101      	movs	r1, #1
 800638a:	f7ff feb7 	bl	80060fc <_Balloc>
 800638e:	4602      	mov	r2, r0
 8006390:	b928      	cbnz	r0, 800639e <__i2b+0x1a>
 8006392:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006396:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <__i2b+0x24>)
 8006398:	4804      	ldr	r0, [pc, #16]	; (80063ac <__i2b+0x28>)
 800639a:	f000 fdad 	bl	8006ef8 <__assert_func>
 800639e:	2301      	movs	r3, #1
 80063a0:	6144      	str	r4, [r0, #20]
 80063a2:	6103      	str	r3, [r0, #16]
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	bf00      	nop
 80063a8:	08007ce4 	.word	0x08007ce4
 80063ac:	08007d74 	.word	0x08007d74

080063b0 <__multiply>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	4614      	mov	r4, r2
 80063b6:	690a      	ldr	r2, [r1, #16]
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	460d      	mov	r5, r1
 80063bc:	429a      	cmp	r2, r3
 80063be:	bfbe      	ittt	lt
 80063c0:	460b      	movlt	r3, r1
 80063c2:	4625      	movlt	r5, r4
 80063c4:	461c      	movlt	r4, r3
 80063c6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80063ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80063ce:	68ab      	ldr	r3, [r5, #8]
 80063d0:	6869      	ldr	r1, [r5, #4]
 80063d2:	eb0a 0709 	add.w	r7, sl, r9
 80063d6:	42bb      	cmp	r3, r7
 80063d8:	b085      	sub	sp, #20
 80063da:	bfb8      	it	lt
 80063dc:	3101      	addlt	r1, #1
 80063de:	f7ff fe8d 	bl	80060fc <_Balloc>
 80063e2:	b930      	cbnz	r0, 80063f2 <__multiply+0x42>
 80063e4:	4602      	mov	r2, r0
 80063e6:	f240 115d 	movw	r1, #349	; 0x15d
 80063ea:	4b41      	ldr	r3, [pc, #260]	; (80064f0 <__multiply+0x140>)
 80063ec:	4841      	ldr	r0, [pc, #260]	; (80064f4 <__multiply+0x144>)
 80063ee:	f000 fd83 	bl	8006ef8 <__assert_func>
 80063f2:	f100 0614 	add.w	r6, r0, #20
 80063f6:	4633      	mov	r3, r6
 80063f8:	2200      	movs	r2, #0
 80063fa:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80063fe:	4543      	cmp	r3, r8
 8006400:	d31e      	bcc.n	8006440 <__multiply+0x90>
 8006402:	f105 0c14 	add.w	ip, r5, #20
 8006406:	f104 0314 	add.w	r3, r4, #20
 800640a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800640e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006412:	9202      	str	r2, [sp, #8]
 8006414:	ebac 0205 	sub.w	r2, ip, r5
 8006418:	3a15      	subs	r2, #21
 800641a:	f022 0203 	bic.w	r2, r2, #3
 800641e:	3204      	adds	r2, #4
 8006420:	f105 0115 	add.w	r1, r5, #21
 8006424:	458c      	cmp	ip, r1
 8006426:	bf38      	it	cc
 8006428:	2204      	movcc	r2, #4
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9a02      	ldr	r2, [sp, #8]
 800642e:	9303      	str	r3, [sp, #12]
 8006430:	429a      	cmp	r2, r3
 8006432:	d808      	bhi.n	8006446 <__multiply+0x96>
 8006434:	2f00      	cmp	r7, #0
 8006436:	dc55      	bgt.n	80064e4 <__multiply+0x134>
 8006438:	6107      	str	r7, [r0, #16]
 800643a:	b005      	add	sp, #20
 800643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	f843 2b04 	str.w	r2, [r3], #4
 8006444:	e7db      	b.n	80063fe <__multiply+0x4e>
 8006446:	f8b3 a000 	ldrh.w	sl, [r3]
 800644a:	f1ba 0f00 	cmp.w	sl, #0
 800644e:	d020      	beq.n	8006492 <__multiply+0xe2>
 8006450:	46b1      	mov	r9, r6
 8006452:	2200      	movs	r2, #0
 8006454:	f105 0e14 	add.w	lr, r5, #20
 8006458:	f85e 4b04 	ldr.w	r4, [lr], #4
 800645c:	f8d9 b000 	ldr.w	fp, [r9]
 8006460:	b2a1      	uxth	r1, r4
 8006462:	fa1f fb8b 	uxth.w	fp, fp
 8006466:	fb0a b101 	mla	r1, sl, r1, fp
 800646a:	4411      	add	r1, r2
 800646c:	f8d9 2000 	ldr.w	r2, [r9]
 8006470:	0c24      	lsrs	r4, r4, #16
 8006472:	0c12      	lsrs	r2, r2, #16
 8006474:	fb0a 2404 	mla	r4, sl, r4, r2
 8006478:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800647c:	b289      	uxth	r1, r1
 800647e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006482:	45f4      	cmp	ip, lr
 8006484:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006488:	f849 1b04 	str.w	r1, [r9], #4
 800648c:	d8e4      	bhi.n	8006458 <__multiply+0xa8>
 800648e:	9901      	ldr	r1, [sp, #4]
 8006490:	5072      	str	r2, [r6, r1]
 8006492:	9a03      	ldr	r2, [sp, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800649a:	f1b9 0f00 	cmp.w	r9, #0
 800649e:	d01f      	beq.n	80064e0 <__multiply+0x130>
 80064a0:	46b6      	mov	lr, r6
 80064a2:	f04f 0a00 	mov.w	sl, #0
 80064a6:	6834      	ldr	r4, [r6, #0]
 80064a8:	f105 0114 	add.w	r1, r5, #20
 80064ac:	880a      	ldrh	r2, [r1, #0]
 80064ae:	f8be b002 	ldrh.w	fp, [lr, #2]
 80064b2:	b2a4      	uxth	r4, r4
 80064b4:	fb09 b202 	mla	r2, r9, r2, fp
 80064b8:	4492      	add	sl, r2
 80064ba:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80064be:	f84e 4b04 	str.w	r4, [lr], #4
 80064c2:	f851 4b04 	ldr.w	r4, [r1], #4
 80064c6:	f8be 2000 	ldrh.w	r2, [lr]
 80064ca:	0c24      	lsrs	r4, r4, #16
 80064cc:	fb09 2404 	mla	r4, r9, r4, r2
 80064d0:	458c      	cmp	ip, r1
 80064d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80064d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064da:	d8e7      	bhi.n	80064ac <__multiply+0xfc>
 80064dc:	9a01      	ldr	r2, [sp, #4]
 80064de:	50b4      	str	r4, [r6, r2]
 80064e0:	3604      	adds	r6, #4
 80064e2:	e7a3      	b.n	800642c <__multiply+0x7c>
 80064e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1a5      	bne.n	8006438 <__multiply+0x88>
 80064ec:	3f01      	subs	r7, #1
 80064ee:	e7a1      	b.n	8006434 <__multiply+0x84>
 80064f0:	08007ce4 	.word	0x08007ce4
 80064f4:	08007d74 	.word	0x08007d74

080064f8 <__pow5mult>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4615      	mov	r5, r2
 80064fe:	f012 0203 	ands.w	r2, r2, #3
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	d007      	beq.n	8006518 <__pow5mult+0x20>
 8006508:	4c25      	ldr	r4, [pc, #148]	; (80065a0 <__pow5mult+0xa8>)
 800650a:	3a01      	subs	r2, #1
 800650c:	2300      	movs	r3, #0
 800650e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006512:	f7ff fe55 	bl	80061c0 <__multadd>
 8006516:	4607      	mov	r7, r0
 8006518:	10ad      	asrs	r5, r5, #2
 800651a:	d03d      	beq.n	8006598 <__pow5mult+0xa0>
 800651c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800651e:	b97c      	cbnz	r4, 8006540 <__pow5mult+0x48>
 8006520:	2010      	movs	r0, #16
 8006522:	f7ff fdb5 	bl	8006090 <malloc>
 8006526:	4602      	mov	r2, r0
 8006528:	6270      	str	r0, [r6, #36]	; 0x24
 800652a:	b928      	cbnz	r0, 8006538 <__pow5mult+0x40>
 800652c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <__pow5mult+0xac>)
 8006532:	481d      	ldr	r0, [pc, #116]	; (80065a8 <__pow5mult+0xb0>)
 8006534:	f000 fce0 	bl	8006ef8 <__assert_func>
 8006538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	60c4      	str	r4, [r0, #12]
 8006540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006548:	b94c      	cbnz	r4, 800655e <__pow5mult+0x66>
 800654a:	f240 2171 	movw	r1, #625	; 0x271
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ff18 	bl	8006384 <__i2b>
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	f8c8 0008 	str.w	r0, [r8, #8]
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	f04f 0900 	mov.w	r9, #0
 8006562:	07eb      	lsls	r3, r5, #31
 8006564:	d50a      	bpl.n	800657c <__pow5mult+0x84>
 8006566:	4639      	mov	r1, r7
 8006568:	4622      	mov	r2, r4
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ff20 	bl	80063b0 <__multiply>
 8006570:	4680      	mov	r8, r0
 8006572:	4639      	mov	r1, r7
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fe01 	bl	800617c <_Bfree>
 800657a:	4647      	mov	r7, r8
 800657c:	106d      	asrs	r5, r5, #1
 800657e:	d00b      	beq.n	8006598 <__pow5mult+0xa0>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	b938      	cbnz	r0, 8006594 <__pow5mult+0x9c>
 8006584:	4622      	mov	r2, r4
 8006586:	4621      	mov	r1, r4
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ff11 	bl	80063b0 <__multiply>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	f8c0 9000 	str.w	r9, [r0]
 8006594:	4604      	mov	r4, r0
 8006596:	e7e4      	b.n	8006562 <__pow5mult+0x6a>
 8006598:	4638      	mov	r0, r7
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	bf00      	nop
 80065a0:	08007ec8 	.word	0x08007ec8
 80065a4:	08007c6e 	.word	0x08007c6e
 80065a8:	08007d74 	.word	0x08007d74

080065ac <__lshift>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	460c      	mov	r4, r1
 80065b2:	4607      	mov	r7, r0
 80065b4:	4691      	mov	r9, r2
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	6849      	ldr	r1, [r1, #4]
 80065ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065c4:	f108 0601 	add.w	r6, r8, #1
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	db0b      	blt.n	80065e4 <__lshift+0x38>
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff fd95 	bl	80060fc <_Balloc>
 80065d2:	4605      	mov	r5, r0
 80065d4:	b948      	cbnz	r0, 80065ea <__lshift+0x3e>
 80065d6:	4602      	mov	r2, r0
 80065d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <__lshift+0xd0>)
 80065de:	4828      	ldr	r0, [pc, #160]	; (8006680 <__lshift+0xd4>)
 80065e0:	f000 fc8a 	bl	8006ef8 <__assert_func>
 80065e4:	3101      	adds	r1, #1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	e7ee      	b.n	80065c8 <__lshift+0x1c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f100 0114 	add.w	r1, r0, #20
 80065f0:	f100 0210 	add.w	r2, r0, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	4553      	cmp	r3, sl
 80065f8:	db33      	blt.n	8006662 <__lshift+0xb6>
 80065fa:	6920      	ldr	r0, [r4, #16]
 80065fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006600:	f104 0314 	add.w	r3, r4, #20
 8006604:	f019 091f 	ands.w	r9, r9, #31
 8006608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800660c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006610:	d02b      	beq.n	800666a <__lshift+0xbe>
 8006612:	468a      	mov	sl, r1
 8006614:	2200      	movs	r2, #0
 8006616:	f1c9 0e20 	rsb	lr, r9, #32
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	fa00 f009 	lsl.w	r0, r0, r9
 8006620:	4302      	orrs	r2, r0
 8006622:	f84a 2b04 	str.w	r2, [sl], #4
 8006626:	f853 2b04 	ldr.w	r2, [r3], #4
 800662a:	459c      	cmp	ip, r3
 800662c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006630:	d8f3      	bhi.n	800661a <__lshift+0x6e>
 8006632:	ebac 0304 	sub.w	r3, ip, r4
 8006636:	3b15      	subs	r3, #21
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	f104 0015 	add.w	r0, r4, #21
 8006642:	4584      	cmp	ip, r0
 8006644:	bf38      	it	cc
 8006646:	2304      	movcc	r3, #4
 8006648:	50ca      	str	r2, [r1, r3]
 800664a:	b10a      	cbz	r2, 8006650 <__lshift+0xa4>
 800664c:	f108 0602 	add.w	r6, r8, #2
 8006650:	3e01      	subs	r6, #1
 8006652:	4638      	mov	r0, r7
 8006654:	4621      	mov	r1, r4
 8006656:	612e      	str	r6, [r5, #16]
 8006658:	f7ff fd90 	bl	800617c <_Bfree>
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	f842 0f04 	str.w	r0, [r2, #4]!
 8006666:	3301      	adds	r3, #1
 8006668:	e7c5      	b.n	80065f6 <__lshift+0x4a>
 800666a:	3904      	subs	r1, #4
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	459c      	cmp	ip, r3
 8006672:	f841 2f04 	str.w	r2, [r1, #4]!
 8006676:	d8f9      	bhi.n	800666c <__lshift+0xc0>
 8006678:	e7ea      	b.n	8006650 <__lshift+0xa4>
 800667a:	bf00      	nop
 800667c:	08007ce4 	.word	0x08007ce4
 8006680:	08007d74 	.word	0x08007d74

08006684 <__mcmp>:
 8006684:	4603      	mov	r3, r0
 8006686:	690a      	ldr	r2, [r1, #16]
 8006688:	6900      	ldr	r0, [r0, #16]
 800668a:	b530      	push	{r4, r5, lr}
 800668c:	1a80      	subs	r0, r0, r2
 800668e:	d10d      	bne.n	80066ac <__mcmp+0x28>
 8006690:	3314      	adds	r3, #20
 8006692:	3114      	adds	r1, #20
 8006694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800669c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066a4:	4295      	cmp	r5, r2
 80066a6:	d002      	beq.n	80066ae <__mcmp+0x2a>
 80066a8:	d304      	bcc.n	80066b4 <__mcmp+0x30>
 80066aa:	2001      	movs	r0, #1
 80066ac:	bd30      	pop	{r4, r5, pc}
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	d3f4      	bcc.n	800669c <__mcmp+0x18>
 80066b2:	e7fb      	b.n	80066ac <__mcmp+0x28>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e7f8      	b.n	80066ac <__mcmp+0x28>
	...

080066bc <__mdiff>:
 80066bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	460c      	mov	r4, r1
 80066c2:	4606      	mov	r6, r0
 80066c4:	4611      	mov	r1, r2
 80066c6:	4620      	mov	r0, r4
 80066c8:	4692      	mov	sl, r2
 80066ca:	f7ff ffdb 	bl	8006684 <__mcmp>
 80066ce:	1e05      	subs	r5, r0, #0
 80066d0:	d111      	bne.n	80066f6 <__mdiff+0x3a>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff fd11 	bl	80060fc <_Balloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	b928      	cbnz	r0, 80066ea <__mdiff+0x2e>
 80066de:	f240 2132 	movw	r1, #562	; 0x232
 80066e2:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <__mdiff+0x118>)
 80066e4:	483c      	ldr	r0, [pc, #240]	; (80067d8 <__mdiff+0x11c>)
 80066e6:	f000 fc07 	bl	8006ef8 <__assert_func>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066f0:	4610      	mov	r0, r2
 80066f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f6:	bfa4      	itt	ge
 80066f8:	4653      	movge	r3, sl
 80066fa:	46a2      	movge	sl, r4
 80066fc:	4630      	mov	r0, r6
 80066fe:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006702:	bfa6      	itte	ge
 8006704:	461c      	movge	r4, r3
 8006706:	2500      	movge	r5, #0
 8006708:	2501      	movlt	r5, #1
 800670a:	f7ff fcf7 	bl	80060fc <_Balloc>
 800670e:	4602      	mov	r2, r0
 8006710:	b918      	cbnz	r0, 800671a <__mdiff+0x5e>
 8006712:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <__mdiff+0x118>)
 8006718:	e7e4      	b.n	80066e4 <__mdiff+0x28>
 800671a:	f100 0814 	add.w	r8, r0, #20
 800671e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006722:	60c5      	str	r5, [r0, #12]
 8006724:	f04f 0c00 	mov.w	ip, #0
 8006728:	f10a 0514 	add.w	r5, sl, #20
 800672c:	f10a 0010 	add.w	r0, sl, #16
 8006730:	46c2      	mov	sl, r8
 8006732:	6926      	ldr	r6, [r4, #16]
 8006734:	f104 0914 	add.w	r9, r4, #20
 8006738:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800673c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006740:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006744:	f859 3b04 	ldr.w	r3, [r9], #4
 8006748:	fa1f f18b 	uxth.w	r1, fp
 800674c:	4461      	add	r1, ip
 800674e:	fa1f fc83 	uxth.w	ip, r3
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	eba1 010c 	sub.w	r1, r1, ip
 8006758:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800675c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006760:	b289      	uxth	r1, r1
 8006762:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006766:	454e      	cmp	r6, r9
 8006768:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800676c:	f84a 3b04 	str.w	r3, [sl], #4
 8006770:	d8e6      	bhi.n	8006740 <__mdiff+0x84>
 8006772:	1b33      	subs	r3, r6, r4
 8006774:	3b15      	subs	r3, #21
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	3415      	adds	r4, #21
 800677c:	3304      	adds	r3, #4
 800677e:	42a6      	cmp	r6, r4
 8006780:	bf38      	it	cc
 8006782:	2304      	movcc	r3, #4
 8006784:	441d      	add	r5, r3
 8006786:	4443      	add	r3, r8
 8006788:	461e      	mov	r6, r3
 800678a:	462c      	mov	r4, r5
 800678c:	4574      	cmp	r4, lr
 800678e:	d30e      	bcc.n	80067ae <__mdiff+0xf2>
 8006790:	f10e 0103 	add.w	r1, lr, #3
 8006794:	1b49      	subs	r1, r1, r5
 8006796:	f021 0103 	bic.w	r1, r1, #3
 800679a:	3d03      	subs	r5, #3
 800679c:	45ae      	cmp	lr, r5
 800679e:	bf38      	it	cc
 80067a0:	2100      	movcc	r1, #0
 80067a2:	4419      	add	r1, r3
 80067a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80067a8:	b18b      	cbz	r3, 80067ce <__mdiff+0x112>
 80067aa:	6117      	str	r7, [r2, #16]
 80067ac:	e7a0      	b.n	80066f0 <__mdiff+0x34>
 80067ae:	f854 8b04 	ldr.w	r8, [r4], #4
 80067b2:	fa1f f188 	uxth.w	r1, r8
 80067b6:	4461      	add	r1, ip
 80067b8:	1408      	asrs	r0, r1, #16
 80067ba:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80067be:	b289      	uxth	r1, r1
 80067c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067c8:	f846 1b04 	str.w	r1, [r6], #4
 80067cc:	e7de      	b.n	800678c <__mdiff+0xd0>
 80067ce:	3f01      	subs	r7, #1
 80067d0:	e7e8      	b.n	80067a4 <__mdiff+0xe8>
 80067d2:	bf00      	nop
 80067d4:	08007ce4 	.word	0x08007ce4
 80067d8:	08007d74 	.word	0x08007d74

080067dc <__ulp>:
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <__ulp+0x48>)
 80067de:	400b      	ands	r3, r1
 80067e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dd02      	ble.n	80067ee <__ulp+0x12>
 80067e8:	2000      	movs	r0, #0
 80067ea:	4619      	mov	r1, r3
 80067ec:	4770      	bx	lr
 80067ee:	425b      	negs	r3, r3
 80067f0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	f04f 0100 	mov.w	r1, #0
 80067fc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006800:	da04      	bge.n	800680c <__ulp+0x30>
 8006802:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006806:	fa43 f102 	asr.w	r1, r3, r2
 800680a:	4770      	bx	lr
 800680c:	f1a2 0314 	sub.w	r3, r2, #20
 8006810:	2b1e      	cmp	r3, #30
 8006812:	bfd6      	itet	le
 8006814:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006818:	2301      	movgt	r3, #1
 800681a:	fa22 f303 	lsrle.w	r3, r2, r3
 800681e:	4618      	mov	r0, r3
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	7ff00000 	.word	0x7ff00000

08006828 <__b2d>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	6907      	ldr	r7, [r0, #16]
 800682e:	f100 0914 	add.w	r9, r0, #20
 8006832:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006836:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800683a:	f1a7 0804 	sub.w	r8, r7, #4
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff fd52 	bl	80062e8 <__hi0bits>
 8006844:	f1c0 0320 	rsb	r3, r0, #32
 8006848:	280a      	cmp	r0, #10
 800684a:	600b      	str	r3, [r1, #0]
 800684c:	491f      	ldr	r1, [pc, #124]	; (80068cc <__b2d+0xa4>)
 800684e:	dc17      	bgt.n	8006880 <__b2d+0x58>
 8006850:	45c1      	cmp	r9, r8
 8006852:	bf28      	it	cs
 8006854:	2200      	movcs	r2, #0
 8006856:	f1c0 0c0b 	rsb	ip, r0, #11
 800685a:	fa26 f30c 	lsr.w	r3, r6, ip
 800685e:	bf38      	it	cc
 8006860:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006864:	ea43 0501 	orr.w	r5, r3, r1
 8006868:	f100 0315 	add.w	r3, r0, #21
 800686c:	fa06 f303 	lsl.w	r3, r6, r3
 8006870:	fa22 f20c 	lsr.w	r2, r2, ip
 8006874:	ea43 0402 	orr.w	r4, r3, r2
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006880:	45c1      	cmp	r9, r8
 8006882:	bf2e      	itee	cs
 8006884:	2200      	movcs	r2, #0
 8006886:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800688a:	f1a7 0808 	subcc.w	r8, r7, #8
 800688e:	f1b0 030b 	subs.w	r3, r0, #11
 8006892:	d016      	beq.n	80068c2 <__b2d+0x9a>
 8006894:	f1c3 0720 	rsb	r7, r3, #32
 8006898:	fa22 f107 	lsr.w	r1, r2, r7
 800689c:	45c8      	cmp	r8, r9
 800689e:	fa06 f603 	lsl.w	r6, r6, r3
 80068a2:	ea46 0601 	orr.w	r6, r6, r1
 80068a6:	bf94      	ite	ls
 80068a8:	2100      	movls	r1, #0
 80068aa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80068ae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80068b2:	fa02 f003 	lsl.w	r0, r2, r3
 80068b6:	40f9      	lsrs	r1, r7
 80068b8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80068bc:	ea40 0401 	orr.w	r4, r0, r1
 80068c0:	e7da      	b.n	8006878 <__b2d+0x50>
 80068c2:	4614      	mov	r4, r2
 80068c4:	ea46 0501 	orr.w	r5, r6, r1
 80068c8:	e7d6      	b.n	8006878 <__b2d+0x50>
 80068ca:	bf00      	nop
 80068cc:	3ff00000 	.word	0x3ff00000

080068d0 <__d2b>:
 80068d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068d4:	2101      	movs	r1, #1
 80068d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80068da:	4690      	mov	r8, r2
 80068dc:	461d      	mov	r5, r3
 80068de:	f7ff fc0d 	bl	80060fc <_Balloc>
 80068e2:	4604      	mov	r4, r0
 80068e4:	b930      	cbnz	r0, 80068f4 <__d2b+0x24>
 80068e6:	4602      	mov	r2, r0
 80068e8:	f240 310a 	movw	r1, #778	; 0x30a
 80068ec:	4b24      	ldr	r3, [pc, #144]	; (8006980 <__d2b+0xb0>)
 80068ee:	4825      	ldr	r0, [pc, #148]	; (8006984 <__d2b+0xb4>)
 80068f0:	f000 fb02 	bl	8006ef8 <__assert_func>
 80068f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068fc:	bb2d      	cbnz	r5, 800694a <__d2b+0x7a>
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	f1b8 0300 	subs.w	r3, r8, #0
 8006904:	d026      	beq.n	8006954 <__d2b+0x84>
 8006906:	4668      	mov	r0, sp
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	f7ff fd0d 	bl	8006328 <__lo0bits>
 800690e:	9900      	ldr	r1, [sp, #0]
 8006910:	b1f0      	cbz	r0, 8006950 <__d2b+0x80>
 8006912:	9a01      	ldr	r2, [sp, #4]
 8006914:	f1c0 0320 	rsb	r3, r0, #32
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	430b      	orrs	r3, r1
 800691e:	40c2      	lsrs	r2, r0
 8006920:	6163      	str	r3, [r4, #20]
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2102      	movne	r1, #2
 800692c:	2101      	moveq	r1, #1
 800692e:	61a3      	str	r3, [r4, #24]
 8006930:	6121      	str	r1, [r4, #16]
 8006932:	b1c5      	cbz	r5, 8006966 <__d2b+0x96>
 8006934:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006938:	4405      	add	r5, r0
 800693a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800693e:	603d      	str	r5, [r7, #0]
 8006940:	6030      	str	r0, [r6, #0]
 8006942:	4620      	mov	r0, r4
 8006944:	b002      	add	sp, #8
 8006946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694e:	e7d6      	b.n	80068fe <__d2b+0x2e>
 8006950:	6161      	str	r1, [r4, #20]
 8006952:	e7e7      	b.n	8006924 <__d2b+0x54>
 8006954:	a801      	add	r0, sp, #4
 8006956:	f7ff fce7 	bl	8006328 <__lo0bits>
 800695a:	2101      	movs	r1, #1
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	6121      	str	r1, [r4, #16]
 8006960:	6163      	str	r3, [r4, #20]
 8006962:	3020      	adds	r0, #32
 8006964:	e7e5      	b.n	8006932 <__d2b+0x62>
 8006966:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800696a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800696e:	6038      	str	r0, [r7, #0]
 8006970:	6918      	ldr	r0, [r3, #16]
 8006972:	f7ff fcb9 	bl	80062e8 <__hi0bits>
 8006976:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800697a:	6031      	str	r1, [r6, #0]
 800697c:	e7e1      	b.n	8006942 <__d2b+0x72>
 800697e:	bf00      	nop
 8006980:	08007ce4 	.word	0x08007ce4
 8006984:	08007d74 	.word	0x08007d74

08006988 <__ratio>:
 8006988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	4688      	mov	r8, r1
 800698e:	4669      	mov	r1, sp
 8006990:	4681      	mov	r9, r0
 8006992:	f7ff ff49 	bl	8006828 <__b2d>
 8006996:	460f      	mov	r7, r1
 8006998:	4604      	mov	r4, r0
 800699a:	460d      	mov	r5, r1
 800699c:	4640      	mov	r0, r8
 800699e:	a901      	add	r1, sp, #4
 80069a0:	f7ff ff42 	bl	8006828 <__b2d>
 80069a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80069ac:	468b      	mov	fp, r1
 80069ae:	eba3 0c02 	sub.w	ip, r3, r2
 80069b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bfd5      	itete	le
 80069c0:	460a      	movle	r2, r1
 80069c2:	462a      	movgt	r2, r5
 80069c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80069c8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80069cc:	bfd8      	it	le
 80069ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80069d2:	465b      	mov	r3, fp
 80069d4:	4602      	mov	r2, r0
 80069d6:	4639      	mov	r1, r7
 80069d8:	4620      	mov	r0, r4
 80069da:	f7f9 fea7 	bl	800072c <__aeabi_ddiv>
 80069de:	b003      	add	sp, #12
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069e4 <__copybits>:
 80069e4:	3901      	subs	r1, #1
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	1149      	asrs	r1, r1, #5
 80069ea:	6914      	ldr	r4, [r2, #16]
 80069ec:	3101      	adds	r1, #1
 80069ee:	f102 0314 	add.w	r3, r2, #20
 80069f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80069f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80069fa:	1f05      	subs	r5, r0, #4
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d30c      	bcc.n	8006a1a <__copybits+0x36>
 8006a00:	1aa3      	subs	r3, r4, r2
 8006a02:	3b11      	subs	r3, #17
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	3211      	adds	r2, #17
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	bf88      	it	hi
 8006a0e:	2300      	movhi	r3, #0
 8006a10:	4418      	add	r0, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	4288      	cmp	r0, r1
 8006a16:	d305      	bcc.n	8006a24 <__copybits+0x40>
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a22:	e7eb      	b.n	80069fc <__copybits+0x18>
 8006a24:	f840 3b04 	str.w	r3, [r0], #4
 8006a28:	e7f4      	b.n	8006a14 <__copybits+0x30>

08006a2a <__any_on>:
 8006a2a:	f100 0214 	add.w	r2, r0, #20
 8006a2e:	6900      	ldr	r0, [r0, #16]
 8006a30:	114b      	asrs	r3, r1, #5
 8006a32:	4298      	cmp	r0, r3
 8006a34:	b510      	push	{r4, lr}
 8006a36:	db11      	blt.n	8006a5c <__any_on+0x32>
 8006a38:	dd0a      	ble.n	8006a50 <__any_on+0x26>
 8006a3a:	f011 011f 	ands.w	r1, r1, #31
 8006a3e:	d007      	beq.n	8006a50 <__any_on+0x26>
 8006a40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a44:	fa24 f001 	lsr.w	r0, r4, r1
 8006a48:	fa00 f101 	lsl.w	r1, r0, r1
 8006a4c:	428c      	cmp	r4, r1
 8006a4e:	d10b      	bne.n	8006a68 <__any_on+0x3e>
 8006a50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d803      	bhi.n	8006a60 <__any_on+0x36>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	bd10      	pop	{r4, pc}
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	e7f7      	b.n	8006a50 <__any_on+0x26>
 8006a60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d0f5      	beq.n	8006a54 <__any_on+0x2a>
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e7f6      	b.n	8006a5a <__any_on+0x30>

08006a6c <_calloc_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	fb02 f501 	mul.w	r5, r2, r1
 8006a72:	4629      	mov	r1, r5
 8006a74:	f000 f854 	bl	8006b20 <_malloc_r>
 8006a78:	4604      	mov	r4, r0
 8006a7a:	b118      	cbz	r0, 8006a84 <_calloc_r+0x18>
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	2100      	movs	r1, #0
 8006a80:	f7fc fbde 	bl	8003240 <memset>
 8006a84:	4620      	mov	r0, r4
 8006a86:	bd38      	pop	{r3, r4, r5, pc}

08006a88 <_free_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d043      	beq.n	8006b18 <_free_r+0x90>
 8006a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a94:	1f0c      	subs	r4, r1, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb8      	it	lt
 8006a9a:	18e4      	addlt	r4, r4, r3
 8006a9c:	f000 fa76 	bl	8006f8c <__malloc_lock>
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <_free_r+0x94>)
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	b933      	cbnz	r3, 8006ab6 <_free_r+0x2e>
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	6014      	str	r4, [r2, #0]
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab2:	f000 ba71 	b.w	8006f98 <__malloc_unlock>
 8006ab6:	42a3      	cmp	r3, r4
 8006ab8:	d90a      	bls.n	8006ad0 <_free_r+0x48>
 8006aba:	6821      	ldr	r1, [r4, #0]
 8006abc:	1862      	adds	r2, r4, r1
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bf01      	itttt	eq
 8006ac2:	681a      	ldreq	r2, [r3, #0]
 8006ac4:	685b      	ldreq	r3, [r3, #4]
 8006ac6:	1852      	addeq	r2, r2, r1
 8006ac8:	6022      	streq	r2, [r4, #0]
 8006aca:	6063      	str	r3, [r4, #4]
 8006acc:	6004      	str	r4, [r0, #0]
 8006ace:	e7ed      	b.n	8006aac <_free_r+0x24>
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b10b      	cbz	r3, 8006ada <_free_r+0x52>
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	d9fa      	bls.n	8006ad0 <_free_r+0x48>
 8006ada:	6811      	ldr	r1, [r2, #0]
 8006adc:	1850      	adds	r0, r2, r1
 8006ade:	42a0      	cmp	r0, r4
 8006ae0:	d10b      	bne.n	8006afa <_free_r+0x72>
 8006ae2:	6820      	ldr	r0, [r4, #0]
 8006ae4:	4401      	add	r1, r0
 8006ae6:	1850      	adds	r0, r2, r1
 8006ae8:	4283      	cmp	r3, r0
 8006aea:	6011      	str	r1, [r2, #0]
 8006aec:	d1de      	bne.n	8006aac <_free_r+0x24>
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4401      	add	r1, r0
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e7d8      	b.n	8006aac <_free_r+0x24>
 8006afa:	d902      	bls.n	8006b02 <_free_r+0x7a>
 8006afc:	230c      	movs	r3, #12
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	e7d4      	b.n	8006aac <_free_r+0x24>
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	1821      	adds	r1, r4, r0
 8006b06:	428b      	cmp	r3, r1
 8006b08:	bf01      	itttt	eq
 8006b0a:	6819      	ldreq	r1, [r3, #0]
 8006b0c:	685b      	ldreq	r3, [r3, #4]
 8006b0e:	1809      	addeq	r1, r1, r0
 8006b10:	6021      	streq	r1, [r4, #0]
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	6054      	str	r4, [r2, #4]
 8006b16:	e7c9      	b.n	8006aac <_free_r+0x24>
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000230 	.word	0x20000230

08006b20 <_malloc_r>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	1ccd      	adds	r5, r1, #3
 8006b24:	f025 0503 	bic.w	r5, r5, #3
 8006b28:	3508      	adds	r5, #8
 8006b2a:	2d0c      	cmp	r5, #12
 8006b2c:	bf38      	it	cc
 8006b2e:	250c      	movcc	r5, #12
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	4606      	mov	r6, r0
 8006b34:	db01      	blt.n	8006b3a <_malloc_r+0x1a>
 8006b36:	42a9      	cmp	r1, r5
 8006b38:	d903      	bls.n	8006b42 <_malloc_r+0x22>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	2000      	movs	r0, #0
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	f000 fa23 	bl	8006f8c <__malloc_lock>
 8006b46:	4921      	ldr	r1, [pc, #132]	; (8006bcc <_malloc_r+0xac>)
 8006b48:	680a      	ldr	r2, [r1, #0]
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	b99c      	cbnz	r4, 8006b76 <_malloc_r+0x56>
 8006b4e:	4f20      	ldr	r7, [pc, #128]	; (8006bd0 <_malloc_r+0xb0>)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	b923      	cbnz	r3, 8006b5e <_malloc_r+0x3e>
 8006b54:	4621      	mov	r1, r4
 8006b56:	4630      	mov	r0, r6
 8006b58:	f000 f99e 	bl	8006e98 <_sbrk_r>
 8006b5c:	6038      	str	r0, [r7, #0]
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 f999 	bl	8006e98 <_sbrk_r>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d123      	bne.n	8006bb2 <_malloc_r+0x92>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	f000 fa12 	bl	8006f98 <__malloc_unlock>
 8006b74:	e7e3      	b.n	8006b3e <_malloc_r+0x1e>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	1b5b      	subs	r3, r3, r5
 8006b7a:	d417      	bmi.n	8006bac <_malloc_r+0x8c>
 8006b7c:	2b0b      	cmp	r3, #11
 8006b7e:	d903      	bls.n	8006b88 <_malloc_r+0x68>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	441c      	add	r4, r3
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	e004      	b.n	8006b92 <_malloc_r+0x72>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	42a2      	cmp	r2, r4
 8006b8c:	bf0c      	ite	eq
 8006b8e:	600b      	streq	r3, [r1, #0]
 8006b90:	6053      	strne	r3, [r2, #4]
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 fa00 	bl	8006f98 <__malloc_unlock>
 8006b98:	f104 000b 	add.w	r0, r4, #11
 8006b9c:	1d23      	adds	r3, r4, #4
 8006b9e:	f020 0007 	bic.w	r0, r0, #7
 8006ba2:	1ac2      	subs	r2, r0, r3
 8006ba4:	d0cc      	beq.n	8006b40 <_malloc_r+0x20>
 8006ba6:	1a1b      	subs	r3, r3, r0
 8006ba8:	50a3      	str	r3, [r4, r2]
 8006baa:	e7c9      	b.n	8006b40 <_malloc_r+0x20>
 8006bac:	4622      	mov	r2, r4
 8006bae:	6864      	ldr	r4, [r4, #4]
 8006bb0:	e7cc      	b.n	8006b4c <_malloc_r+0x2c>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d0e3      	beq.n	8006b84 <_malloc_r+0x64>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f96a 	bl	8006e98 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d1dd      	bne.n	8006b84 <_malloc_r+0x64>
 8006bc8:	e7cf      	b.n	8006b6a <_malloc_r+0x4a>
 8006bca:	bf00      	nop
 8006bcc:	20000230 	.word	0x20000230
 8006bd0:	20000234 	.word	0x20000234

08006bd4 <__ssputs_r>:
 8006bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	688e      	ldr	r6, [r1, #8]
 8006bda:	4682      	mov	sl, r0
 8006bdc:	429e      	cmp	r6, r3
 8006bde:	460c      	mov	r4, r1
 8006be0:	4690      	mov	r8, r2
 8006be2:	461f      	mov	r7, r3
 8006be4:	d838      	bhi.n	8006c58 <__ssputs_r+0x84>
 8006be6:	898a      	ldrh	r2, [r1, #12]
 8006be8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bec:	d032      	beq.n	8006c54 <__ssputs_r+0x80>
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	6909      	ldr	r1, [r1, #16]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	eba5 0901 	sub.w	r9, r5, r1
 8006bf8:	6965      	ldr	r5, [r4, #20]
 8006bfa:	444b      	add	r3, r9
 8006bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c04:	106d      	asrs	r5, r5, #1
 8006c06:	429d      	cmp	r5, r3
 8006c08:	bf38      	it	cc
 8006c0a:	461d      	movcc	r5, r3
 8006c0c:	0553      	lsls	r3, r2, #21
 8006c0e:	d531      	bpl.n	8006c74 <__ssputs_r+0xa0>
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7ff ff85 	bl	8006b20 <_malloc_r>
 8006c16:	4606      	mov	r6, r0
 8006c18:	b950      	cbnz	r0, 8006c30 <__ssputs_r+0x5c>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	f8ca 3000 	str.w	r3, [sl]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c30:	464a      	mov	r2, r9
 8006c32:	6921      	ldr	r1, [r4, #16]
 8006c34:	f7ff fa54 	bl	80060e0 <memcpy>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	6126      	str	r6, [r4, #16]
 8006c46:	444e      	add	r6, r9
 8006c48:	6026      	str	r6, [r4, #0]
 8006c4a:	463e      	mov	r6, r7
 8006c4c:	6165      	str	r5, [r4, #20]
 8006c4e:	eba5 0509 	sub.w	r5, r5, r9
 8006c52:	60a5      	str	r5, [r4, #8]
 8006c54:	42be      	cmp	r6, r7
 8006c56:	d900      	bls.n	8006c5a <__ssputs_r+0x86>
 8006c58:	463e      	mov	r6, r7
 8006c5a:	4632      	mov	r2, r6
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	f000 f97a 	bl	8006f58 <memmove>
 8006c64:	68a3      	ldr	r3, [r4, #8]
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	1b9b      	subs	r3, r3, r6
 8006c6a:	4432      	add	r2, r6
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	e7db      	b.n	8006c2c <__ssputs_r+0x58>
 8006c74:	462a      	mov	r2, r5
 8006c76:	f000 f995 	bl	8006fa4 <_realloc_r>
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d1e1      	bne.n	8006c44 <__ssputs_r+0x70>
 8006c80:	4650      	mov	r0, sl
 8006c82:	6921      	ldr	r1, [r4, #16]
 8006c84:	f7ff ff00 	bl	8006a88 <_free_r>
 8006c88:	e7c7      	b.n	8006c1a <__ssputs_r+0x46>
	...

08006c8c <_svfiprintf_r>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4698      	mov	r8, r3
 8006c92:	898b      	ldrh	r3, [r1, #12]
 8006c94:	4607      	mov	r7, r0
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	460d      	mov	r5, r1
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	b09d      	sub	sp, #116	; 0x74
 8006c9e:	d50e      	bpl.n	8006cbe <_svfiprintf_r+0x32>
 8006ca0:	690b      	ldr	r3, [r1, #16]
 8006ca2:	b963      	cbnz	r3, 8006cbe <_svfiprintf_r+0x32>
 8006ca4:	2140      	movs	r1, #64	; 0x40
 8006ca6:	f7ff ff3b 	bl	8006b20 <_malloc_r>
 8006caa:	6028      	str	r0, [r5, #0]
 8006cac:	6128      	str	r0, [r5, #16]
 8006cae:	b920      	cbnz	r0, 8006cba <_svfiprintf_r+0x2e>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e0d1      	b.n	8006e5e <_svfiprintf_r+0x1d2>
 8006cba:	2340      	movs	r3, #64	; 0x40
 8006cbc:	616b      	str	r3, [r5, #20]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc2:	2320      	movs	r3, #32
 8006cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cc8:	2330      	movs	r3, #48	; 0x30
 8006cca:	f04f 0901 	mov.w	r9, #1
 8006cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e78 <_svfiprintf_r+0x1ec>
 8006cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cda:	4623      	mov	r3, r4
 8006cdc:	469a      	mov	sl, r3
 8006cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce2:	b10a      	cbz	r2, 8006ce8 <_svfiprintf_r+0x5c>
 8006ce4:	2a25      	cmp	r2, #37	; 0x25
 8006ce6:	d1f9      	bne.n	8006cdc <_svfiprintf_r+0x50>
 8006ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cec:	d00b      	beq.n	8006d06 <_svfiprintf_r+0x7a>
 8006cee:	465b      	mov	r3, fp
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff ff6d 	bl	8006bd4 <__ssputs_r>
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f000 80aa 	beq.w	8006e54 <_svfiprintf_r+0x1c8>
 8006d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d02:	445a      	add	r2, fp
 8006d04:	9209      	str	r2, [sp, #36]	; 0x24
 8006d06:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a2 	beq.w	8006e54 <_svfiprintf_r+0x1c8>
 8006d10:	2300      	movs	r3, #0
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1a:	f10a 0a01 	add.w	sl, sl, #1
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	9307      	str	r3, [sp, #28]
 8006d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d26:	931a      	str	r3, [sp, #104]	; 0x68
 8006d28:	4654      	mov	r4, sl
 8006d2a:	2205      	movs	r2, #5
 8006d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d30:	4851      	ldr	r0, [pc, #324]	; (8006e78 <_svfiprintf_r+0x1ec>)
 8006d32:	f7ff f9c7 	bl	80060c4 <memchr>
 8006d36:	9a04      	ldr	r2, [sp, #16]
 8006d38:	b9d8      	cbnz	r0, 8006d72 <_svfiprintf_r+0xe6>
 8006d3a:	06d0      	lsls	r0, r2, #27
 8006d3c:	bf44      	itt	mi
 8006d3e:	2320      	movmi	r3, #32
 8006d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d44:	0711      	lsls	r1, r2, #28
 8006d46:	bf44      	itt	mi
 8006d48:	232b      	movmi	r3, #43	; 0x2b
 8006d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d52:	2b2a      	cmp	r3, #42	; 0x2a
 8006d54:	d015      	beq.n	8006d82 <_svfiprintf_r+0xf6>
 8006d56:	4654      	mov	r4, sl
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f04f 0c0a 	mov.w	ip, #10
 8006d5e:	9a07      	ldr	r2, [sp, #28]
 8006d60:	4621      	mov	r1, r4
 8006d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d66:	3b30      	subs	r3, #48	; 0x30
 8006d68:	2b09      	cmp	r3, #9
 8006d6a:	d94e      	bls.n	8006e0a <_svfiprintf_r+0x17e>
 8006d6c:	b1b0      	cbz	r0, 8006d9c <_svfiprintf_r+0x110>
 8006d6e:	9207      	str	r2, [sp, #28]
 8006d70:	e014      	b.n	8006d9c <_svfiprintf_r+0x110>
 8006d72:	eba0 0308 	sub.w	r3, r0, r8
 8006d76:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	46a2      	mov	sl, r4
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	e7d2      	b.n	8006d28 <_svfiprintf_r+0x9c>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	1d19      	adds	r1, r3, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	9103      	str	r1, [sp, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bfbb      	ittet	lt
 8006d8e:	425b      	neglt	r3, r3
 8006d90:	f042 0202 	orrlt.w	r2, r2, #2
 8006d94:	9307      	strge	r3, [sp, #28]
 8006d96:	9307      	strlt	r3, [sp, #28]
 8006d98:	bfb8      	it	lt
 8006d9a:	9204      	strlt	r2, [sp, #16]
 8006d9c:	7823      	ldrb	r3, [r4, #0]
 8006d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006da0:	d10c      	bne.n	8006dbc <_svfiprintf_r+0x130>
 8006da2:	7863      	ldrb	r3, [r4, #1]
 8006da4:	2b2a      	cmp	r3, #42	; 0x2a
 8006da6:	d135      	bne.n	8006e14 <_svfiprintf_r+0x188>
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	3402      	adds	r4, #2
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	9203      	str	r2, [sp, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfb8      	it	lt
 8006db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e88 <_svfiprintf_r+0x1fc>
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	7821      	ldrb	r1, [r4, #0]
 8006dc6:	f7ff f97d 	bl	80060c4 <memchr>
 8006dca:	b140      	cbz	r0, 8006dde <_svfiprintf_r+0x152>
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	eba0 000a 	sub.w	r0, r0, sl
 8006dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	3401      	adds	r4, #1
 8006dda:	4303      	orrs	r3, r0
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de2:	2206      	movs	r2, #6
 8006de4:	4825      	ldr	r0, [pc, #148]	; (8006e7c <_svfiprintf_r+0x1f0>)
 8006de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dea:	f7ff f96b 	bl	80060c4 <memchr>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d038      	beq.n	8006e64 <_svfiprintf_r+0x1d8>
 8006df2:	4b23      	ldr	r3, [pc, #140]	; (8006e80 <_svfiprintf_r+0x1f4>)
 8006df4:	bb1b      	cbnz	r3, 8006e3e <_svfiprintf_r+0x1b2>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	3307      	adds	r3, #7
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	3308      	adds	r3, #8
 8006e00:	9303      	str	r3, [sp, #12]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	4433      	add	r3, r6
 8006e06:	9309      	str	r3, [sp, #36]	; 0x24
 8006e08:	e767      	b.n	8006cda <_svfiprintf_r+0x4e>
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e12:	e7a5      	b.n	8006d60 <_svfiprintf_r+0xd4>
 8006e14:	2300      	movs	r3, #0
 8006e16:	f04f 0c0a 	mov.w	ip, #10
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	3401      	adds	r4, #1
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e26:	3a30      	subs	r2, #48	; 0x30
 8006e28:	2a09      	cmp	r2, #9
 8006e2a:	d903      	bls.n	8006e34 <_svfiprintf_r+0x1a8>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0c5      	beq.n	8006dbc <_svfiprintf_r+0x130>
 8006e30:	9105      	str	r1, [sp, #20]
 8006e32:	e7c3      	b.n	8006dbc <_svfiprintf_r+0x130>
 8006e34:	4604      	mov	r4, r0
 8006e36:	2301      	movs	r3, #1
 8006e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3c:	e7f0      	b.n	8006e20 <_svfiprintf_r+0x194>
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4638      	mov	r0, r7
 8006e46:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <_svfiprintf_r+0x1f8>)
 8006e48:	a904      	add	r1, sp, #16
 8006e4a:	f7fc fa9f 	bl	800338c <_printf_float>
 8006e4e:	1c42      	adds	r2, r0, #1
 8006e50:	4606      	mov	r6, r0
 8006e52:	d1d6      	bne.n	8006e02 <_svfiprintf_r+0x176>
 8006e54:	89ab      	ldrh	r3, [r5, #12]
 8006e56:	065b      	lsls	r3, r3, #25
 8006e58:	f53f af2c 	bmi.w	8006cb4 <_svfiprintf_r+0x28>
 8006e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e5e:	b01d      	add	sp, #116	; 0x74
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <_svfiprintf_r+0x1f8>)
 8006e6e:	a904      	add	r1, sp, #16
 8006e70:	f7fc fd28 	bl	80038c4 <_printf_i>
 8006e74:	e7eb      	b.n	8006e4e <_svfiprintf_r+0x1c2>
 8006e76:	bf00      	nop
 8006e78:	08007ed4 	.word	0x08007ed4
 8006e7c:	08007ede 	.word	0x08007ede
 8006e80:	0800338d 	.word	0x0800338d
 8006e84:	08006bd5 	.word	0x08006bd5
 8006e88:	08007eda 	.word	0x08007eda

08006e8c <nan>:
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	4901      	ldr	r1, [pc, #4]	; (8006e94 <nan+0x8>)
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	7ff80000 	.word	0x7ff80000

08006e98 <_sbrk_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4d05      	ldr	r5, [pc, #20]	; (8006eb4 <_sbrk_r+0x1c>)
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	f7fa f9f0 	bl	8001288 <_sbrk>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_sbrk_r+0x1a>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_sbrk_r+0x1a>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20000358 	.word	0x20000358

08006eb8 <strncmp>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	b16a      	cbz	r2, 8006ed8 <strncmp+0x20>
 8006ebc:	3901      	subs	r1, #1
 8006ebe:	1884      	adds	r4, r0, r2
 8006ec0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ec4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d103      	bne.n	8006ed4 <strncmp+0x1c>
 8006ecc:	42a0      	cmp	r0, r4
 8006ece:	d001      	beq.n	8006ed4 <strncmp+0x1c>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f5      	bne.n	8006ec0 <strncmp+0x8>
 8006ed4:	1a98      	subs	r0, r3, r2
 8006ed6:	bd10      	pop	{r4, pc}
 8006ed8:	4610      	mov	r0, r2
 8006eda:	e7fc      	b.n	8006ed6 <strncmp+0x1e>

08006edc <__ascii_wctomb>:
 8006edc:	4603      	mov	r3, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	b141      	cbz	r1, 8006ef4 <__ascii_wctomb+0x18>
 8006ee2:	2aff      	cmp	r2, #255	; 0xff
 8006ee4:	d904      	bls.n	8006ef0 <__ascii_wctomb+0x14>
 8006ee6:	228a      	movs	r2, #138	; 0x8a
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	4770      	bx	lr
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	700a      	strb	r2, [r1, #0]
 8006ef4:	4770      	bx	lr
	...

08006ef8 <__assert_func>:
 8006ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006efa:	4614      	mov	r4, r2
 8006efc:	461a      	mov	r2, r3
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__assert_func+0x2c>)
 8006f00:	4605      	mov	r5, r0
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68d8      	ldr	r0, [r3, #12]
 8006f06:	b14c      	cbz	r4, 8006f1c <__assert_func+0x24>
 8006f08:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <__assert_func+0x30>)
 8006f0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f0e:	9100      	str	r1, [sp, #0]
 8006f10:	462b      	mov	r3, r5
 8006f12:	4906      	ldr	r1, [pc, #24]	; (8006f2c <__assert_func+0x34>)
 8006f14:	f000 f80e 	bl	8006f34 <fiprintf>
 8006f18:	f000 fa82 	bl	8007420 <abort>
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <__assert_func+0x38>)
 8006f1e:	461c      	mov	r4, r3
 8006f20:	e7f3      	b.n	8006f0a <__assert_func+0x12>
 8006f22:	bf00      	nop
 8006f24:	2000000c 	.word	0x2000000c
 8006f28:	08007ee5 	.word	0x08007ee5
 8006f2c:	08007ef2 	.word	0x08007ef2
 8006f30:	08007f20 	.word	0x08007f20

08006f34 <fiprintf>:
 8006f34:	b40e      	push	{r1, r2, r3}
 8006f36:	b503      	push	{r0, r1, lr}
 8006f38:	4601      	mov	r1, r0
 8006f3a:	ab03      	add	r3, sp, #12
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <fiprintf+0x20>)
 8006f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f42:	6800      	ldr	r0, [r0, #0]
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	f000 f87b 	bl	8007040 <_vfiprintf_r>
 8006f4a:	b002      	add	sp, #8
 8006f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f50:	b003      	add	sp, #12
 8006f52:	4770      	bx	lr
 8006f54:	2000000c 	.word	0x2000000c

08006f58 <memmove>:
 8006f58:	4288      	cmp	r0, r1
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	eb01 0402 	add.w	r4, r1, r2
 8006f60:	d902      	bls.n	8006f68 <memmove+0x10>
 8006f62:	4284      	cmp	r4, r0
 8006f64:	4623      	mov	r3, r4
 8006f66:	d807      	bhi.n	8006f78 <memmove+0x20>
 8006f68:	1e43      	subs	r3, r0, #1
 8006f6a:	42a1      	cmp	r1, r4
 8006f6c:	d008      	beq.n	8006f80 <memmove+0x28>
 8006f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f76:	e7f8      	b.n	8006f6a <memmove+0x12>
 8006f78:	4601      	mov	r1, r0
 8006f7a:	4402      	add	r2, r0
 8006f7c:	428a      	cmp	r2, r1
 8006f7e:	d100      	bne.n	8006f82 <memmove+0x2a>
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f8a:	e7f7      	b.n	8006f7c <memmove+0x24>

08006f8c <__malloc_lock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__malloc_lock+0x8>)
 8006f8e:	f000 bc07 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 8006f92:	bf00      	nop
 8006f94:	20000360 	.word	0x20000360

08006f98 <__malloc_unlock>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__malloc_unlock+0x8>)
 8006f9a:	f000 bc02 	b.w	80077a2 <__retarget_lock_release_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	20000360 	.word	0x20000360

08006fa4 <_realloc_r>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	4614      	mov	r4, r2
 8006faa:	460e      	mov	r6, r1
 8006fac:	b921      	cbnz	r1, 8006fb8 <_realloc_r+0x14>
 8006fae:	4611      	mov	r1, r2
 8006fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fb4:	f7ff bdb4 	b.w	8006b20 <_malloc_r>
 8006fb8:	b922      	cbnz	r2, 8006fc4 <_realloc_r+0x20>
 8006fba:	f7ff fd65 	bl	8006a88 <_free_r>
 8006fbe:	4625      	mov	r5, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	f000 fc52 	bl	800786c <_malloc_usable_size_r>
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d20f      	bcs.n	8006fec <_realloc_r+0x48>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff fda6 	bl	8006b20 <_malloc_r>
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0f2      	beq.n	8006fc0 <_realloc_r+0x1c>
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4622      	mov	r2, r4
 8006fde:	f7ff f87f 	bl	80060e0 <memcpy>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff fd4f 	bl	8006a88 <_free_r>
 8006fea:	e7e9      	b.n	8006fc0 <_realloc_r+0x1c>
 8006fec:	4635      	mov	r5, r6
 8006fee:	e7e7      	b.n	8006fc0 <_realloc_r+0x1c>

08006ff0 <__sfputc_r>:
 8006ff0:	6893      	ldr	r3, [r2, #8]
 8006ff2:	b410      	push	{r4}
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	6093      	str	r3, [r2, #8]
 8006ffa:	da07      	bge.n	800700c <__sfputc_r+0x1c>
 8006ffc:	6994      	ldr	r4, [r2, #24]
 8006ffe:	42a3      	cmp	r3, r4
 8007000:	db01      	blt.n	8007006 <__sfputc_r+0x16>
 8007002:	290a      	cmp	r1, #10
 8007004:	d102      	bne.n	800700c <__sfputc_r+0x1c>
 8007006:	bc10      	pop	{r4}
 8007008:	f000 b94a 	b.w	80072a0 <__swbuf_r>
 800700c:	6813      	ldr	r3, [r2, #0]
 800700e:	1c58      	adds	r0, r3, #1
 8007010:	6010      	str	r0, [r2, #0]
 8007012:	7019      	strb	r1, [r3, #0]
 8007014:	4608      	mov	r0, r1
 8007016:	bc10      	pop	{r4}
 8007018:	4770      	bx	lr

0800701a <__sfputs_r>:
 800701a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	4614      	mov	r4, r2
 8007022:	18d5      	adds	r5, r2, r3
 8007024:	42ac      	cmp	r4, r5
 8007026:	d101      	bne.n	800702c <__sfputs_r+0x12>
 8007028:	2000      	movs	r0, #0
 800702a:	e007      	b.n	800703c <__sfputs_r+0x22>
 800702c:	463a      	mov	r2, r7
 800702e:	4630      	mov	r0, r6
 8007030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007034:	f7ff ffdc 	bl	8006ff0 <__sfputc_r>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d1f3      	bne.n	8007024 <__sfputs_r+0xa>
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007040 <_vfiprintf_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	460d      	mov	r5, r1
 8007046:	4614      	mov	r4, r2
 8007048:	4698      	mov	r8, r3
 800704a:	4606      	mov	r6, r0
 800704c:	b09d      	sub	sp, #116	; 0x74
 800704e:	b118      	cbz	r0, 8007058 <_vfiprintf_r+0x18>
 8007050:	6983      	ldr	r3, [r0, #24]
 8007052:	b90b      	cbnz	r3, 8007058 <_vfiprintf_r+0x18>
 8007054:	f000 fb06 	bl	8007664 <__sinit>
 8007058:	4b89      	ldr	r3, [pc, #548]	; (8007280 <_vfiprintf_r+0x240>)
 800705a:	429d      	cmp	r5, r3
 800705c:	d11b      	bne.n	8007096 <_vfiprintf_r+0x56>
 800705e:	6875      	ldr	r5, [r6, #4]
 8007060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007062:	07d9      	lsls	r1, r3, #31
 8007064:	d405      	bmi.n	8007072 <_vfiprintf_r+0x32>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	059a      	lsls	r2, r3, #22
 800706a:	d402      	bmi.n	8007072 <_vfiprintf_r+0x32>
 800706c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706e:	f000 fb97 	bl	80077a0 <__retarget_lock_acquire_recursive>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	071b      	lsls	r3, r3, #28
 8007076:	d501      	bpl.n	800707c <_vfiprintf_r+0x3c>
 8007078:	692b      	ldr	r3, [r5, #16]
 800707a:	b9eb      	cbnz	r3, 80070b8 <_vfiprintf_r+0x78>
 800707c:	4629      	mov	r1, r5
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f960 	bl	8007344 <__swsetup_r>
 8007084:	b1c0      	cbz	r0, 80070b8 <_vfiprintf_r+0x78>
 8007086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007088:	07dc      	lsls	r4, r3, #31
 800708a:	d50e      	bpl.n	80070aa <_vfiprintf_r+0x6a>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b01d      	add	sp, #116	; 0x74
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <_vfiprintf_r+0x244>)
 8007098:	429d      	cmp	r5, r3
 800709a:	d101      	bne.n	80070a0 <_vfiprintf_r+0x60>
 800709c:	68b5      	ldr	r5, [r6, #8]
 800709e:	e7df      	b.n	8007060 <_vfiprintf_r+0x20>
 80070a0:	4b79      	ldr	r3, [pc, #484]	; (8007288 <_vfiprintf_r+0x248>)
 80070a2:	429d      	cmp	r5, r3
 80070a4:	bf08      	it	eq
 80070a6:	68f5      	ldreq	r5, [r6, #12]
 80070a8:	e7da      	b.n	8007060 <_vfiprintf_r+0x20>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	0598      	lsls	r0, r3, #22
 80070ae:	d4ed      	bmi.n	800708c <_vfiprintf_r+0x4c>
 80070b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b2:	f000 fb76 	bl	80077a2 <__retarget_lock_release_recursive>
 80070b6:	e7e9      	b.n	800708c <_vfiprintf_r+0x4c>
 80070b8:	2300      	movs	r3, #0
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	2320      	movs	r3, #32
 80070be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070c2:	2330      	movs	r3, #48	; 0x30
 80070c4:	f04f 0901 	mov.w	r9, #1
 80070c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800728c <_vfiprintf_r+0x24c>
 80070d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d4:	4623      	mov	r3, r4
 80070d6:	469a      	mov	sl, r3
 80070d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070dc:	b10a      	cbz	r2, 80070e2 <_vfiprintf_r+0xa2>
 80070de:	2a25      	cmp	r2, #37	; 0x25
 80070e0:	d1f9      	bne.n	80070d6 <_vfiprintf_r+0x96>
 80070e2:	ebba 0b04 	subs.w	fp, sl, r4
 80070e6:	d00b      	beq.n	8007100 <_vfiprintf_r+0xc0>
 80070e8:	465b      	mov	r3, fp
 80070ea:	4622      	mov	r2, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ff93 	bl	800701a <__sfputs_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	f000 80aa 	beq.w	800724e <_vfiprintf_r+0x20e>
 80070fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070fc:	445a      	add	r2, fp
 80070fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007100:	f89a 3000 	ldrb.w	r3, [sl]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80a2 	beq.w	800724e <_vfiprintf_r+0x20e>
 800710a:	2300      	movs	r3, #0
 800710c:	f04f 32ff 	mov.w	r2, #4294967295
 8007110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007114:	f10a 0a01 	add.w	sl, sl, #1
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007120:	931a      	str	r3, [sp, #104]	; 0x68
 8007122:	4654      	mov	r4, sl
 8007124:	2205      	movs	r2, #5
 8007126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712a:	4858      	ldr	r0, [pc, #352]	; (800728c <_vfiprintf_r+0x24c>)
 800712c:	f7fe ffca 	bl	80060c4 <memchr>
 8007130:	9a04      	ldr	r2, [sp, #16]
 8007132:	b9d8      	cbnz	r0, 800716c <_vfiprintf_r+0x12c>
 8007134:	06d1      	lsls	r1, r2, #27
 8007136:	bf44      	itt	mi
 8007138:	2320      	movmi	r3, #32
 800713a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713e:	0713      	lsls	r3, r2, #28
 8007140:	bf44      	itt	mi
 8007142:	232b      	movmi	r3, #43	; 0x2b
 8007144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007148:	f89a 3000 	ldrb.w	r3, [sl]
 800714c:	2b2a      	cmp	r3, #42	; 0x2a
 800714e:	d015      	beq.n	800717c <_vfiprintf_r+0x13c>
 8007150:	4654      	mov	r4, sl
 8007152:	2000      	movs	r0, #0
 8007154:	f04f 0c0a 	mov.w	ip, #10
 8007158:	9a07      	ldr	r2, [sp, #28]
 800715a:	4621      	mov	r1, r4
 800715c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007160:	3b30      	subs	r3, #48	; 0x30
 8007162:	2b09      	cmp	r3, #9
 8007164:	d94e      	bls.n	8007204 <_vfiprintf_r+0x1c4>
 8007166:	b1b0      	cbz	r0, 8007196 <_vfiprintf_r+0x156>
 8007168:	9207      	str	r2, [sp, #28]
 800716a:	e014      	b.n	8007196 <_vfiprintf_r+0x156>
 800716c:	eba0 0308 	sub.w	r3, r0, r8
 8007170:	fa09 f303 	lsl.w	r3, r9, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	46a2      	mov	sl, r4
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	e7d2      	b.n	8007122 <_vfiprintf_r+0xe2>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	1d19      	adds	r1, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	9103      	str	r1, [sp, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	bfbb      	ittet	lt
 8007188:	425b      	neglt	r3, r3
 800718a:	f042 0202 	orrlt.w	r2, r2, #2
 800718e:	9307      	strge	r3, [sp, #28]
 8007190:	9307      	strlt	r3, [sp, #28]
 8007192:	bfb8      	it	lt
 8007194:	9204      	strlt	r2, [sp, #16]
 8007196:	7823      	ldrb	r3, [r4, #0]
 8007198:	2b2e      	cmp	r3, #46	; 0x2e
 800719a:	d10c      	bne.n	80071b6 <_vfiprintf_r+0x176>
 800719c:	7863      	ldrb	r3, [r4, #1]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d135      	bne.n	800720e <_vfiprintf_r+0x1ce>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	3402      	adds	r4, #2
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfb8      	it	lt
 80071b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071b4:	9305      	str	r3, [sp, #20]
 80071b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800729c <_vfiprintf_r+0x25c>
 80071ba:	2203      	movs	r2, #3
 80071bc:	4650      	mov	r0, sl
 80071be:	7821      	ldrb	r1, [r4, #0]
 80071c0:	f7fe ff80 	bl	80060c4 <memchr>
 80071c4:	b140      	cbz	r0, 80071d8 <_vfiprintf_r+0x198>
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	eba0 000a 	sub.w	r0, r0, sl
 80071cc:	fa03 f000 	lsl.w	r0, r3, r0
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	3401      	adds	r4, #1
 80071d4:	4303      	orrs	r3, r0
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	2206      	movs	r2, #6
 80071de:	482c      	ldr	r0, [pc, #176]	; (8007290 <_vfiprintf_r+0x250>)
 80071e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071e4:	f7fe ff6e 	bl	80060c4 <memchr>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d03f      	beq.n	800726c <_vfiprintf_r+0x22c>
 80071ec:	4b29      	ldr	r3, [pc, #164]	; (8007294 <_vfiprintf_r+0x254>)
 80071ee:	bb1b      	cbnz	r3, 8007238 <_vfiprintf_r+0x1f8>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	3307      	adds	r3, #7
 80071f4:	f023 0307 	bic.w	r3, r3, #7
 80071f8:	3308      	adds	r3, #8
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	443b      	add	r3, r7
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	e767      	b.n	80070d4 <_vfiprintf_r+0x94>
 8007204:	460c      	mov	r4, r1
 8007206:	2001      	movs	r0, #1
 8007208:	fb0c 3202 	mla	r2, ip, r2, r3
 800720c:	e7a5      	b.n	800715a <_vfiprintf_r+0x11a>
 800720e:	2300      	movs	r3, #0
 8007210:	f04f 0c0a 	mov.w	ip, #10
 8007214:	4619      	mov	r1, r3
 8007216:	3401      	adds	r4, #1
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	4620      	mov	r0, r4
 800721c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007220:	3a30      	subs	r2, #48	; 0x30
 8007222:	2a09      	cmp	r2, #9
 8007224:	d903      	bls.n	800722e <_vfiprintf_r+0x1ee>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0c5      	beq.n	80071b6 <_vfiprintf_r+0x176>
 800722a:	9105      	str	r1, [sp, #20]
 800722c:	e7c3      	b.n	80071b6 <_vfiprintf_r+0x176>
 800722e:	4604      	mov	r4, r0
 8007230:	2301      	movs	r3, #1
 8007232:	fb0c 2101 	mla	r1, ip, r1, r2
 8007236:	e7f0      	b.n	800721a <_vfiprintf_r+0x1da>
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4630      	mov	r0, r6
 8007240:	4b15      	ldr	r3, [pc, #84]	; (8007298 <_vfiprintf_r+0x258>)
 8007242:	a904      	add	r1, sp, #16
 8007244:	f7fc f8a2 	bl	800338c <_printf_float>
 8007248:	4607      	mov	r7, r0
 800724a:	1c78      	adds	r0, r7, #1
 800724c:	d1d6      	bne.n	80071fc <_vfiprintf_r+0x1bc>
 800724e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007250:	07d9      	lsls	r1, r3, #31
 8007252:	d405      	bmi.n	8007260 <_vfiprintf_r+0x220>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	059a      	lsls	r2, r3, #22
 8007258:	d402      	bmi.n	8007260 <_vfiprintf_r+0x220>
 800725a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725c:	f000 faa1 	bl	80077a2 <__retarget_lock_release_recursive>
 8007260:	89ab      	ldrh	r3, [r5, #12]
 8007262:	065b      	lsls	r3, r3, #25
 8007264:	f53f af12 	bmi.w	800708c <_vfiprintf_r+0x4c>
 8007268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726a:	e711      	b.n	8007090 <_vfiprintf_r+0x50>
 800726c:	ab03      	add	r3, sp, #12
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	462a      	mov	r2, r5
 8007272:	4630      	mov	r0, r6
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <_vfiprintf_r+0x258>)
 8007276:	a904      	add	r1, sp, #16
 8007278:	f7fc fb24 	bl	80038c4 <_printf_i>
 800727c:	e7e4      	b.n	8007248 <_vfiprintf_r+0x208>
 800727e:	bf00      	nop
 8007280:	08007f44 	.word	0x08007f44
 8007284:	08007f64 	.word	0x08007f64
 8007288:	08007f24 	.word	0x08007f24
 800728c:	08007ed4 	.word	0x08007ed4
 8007290:	08007ede 	.word	0x08007ede
 8007294:	0800338d 	.word	0x0800338d
 8007298:	0800701b 	.word	0x0800701b
 800729c:	08007eda 	.word	0x08007eda

080072a0 <__swbuf_r>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	460e      	mov	r6, r1
 80072a4:	4614      	mov	r4, r2
 80072a6:	4605      	mov	r5, r0
 80072a8:	b118      	cbz	r0, 80072b2 <__swbuf_r+0x12>
 80072aa:	6983      	ldr	r3, [r0, #24]
 80072ac:	b90b      	cbnz	r3, 80072b2 <__swbuf_r+0x12>
 80072ae:	f000 f9d9 	bl	8007664 <__sinit>
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <__swbuf_r+0x98>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d12b      	bne.n	8007310 <__swbuf_r+0x70>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	69a3      	ldr	r3, [r4, #24]
 80072bc:	60a3      	str	r3, [r4, #8]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	071a      	lsls	r2, r3, #28
 80072c2:	d52f      	bpl.n	8007324 <__swbuf_r+0x84>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	b36b      	cbz	r3, 8007324 <__swbuf_r+0x84>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	6820      	ldr	r0, [r4, #0]
 80072cc:	b2f6      	uxtb	r6, r6
 80072ce:	1ac0      	subs	r0, r0, r3
 80072d0:	6963      	ldr	r3, [r4, #20]
 80072d2:	4637      	mov	r7, r6
 80072d4:	4283      	cmp	r3, r0
 80072d6:	dc04      	bgt.n	80072e2 <__swbuf_r+0x42>
 80072d8:	4621      	mov	r1, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f92e 	bl	800753c <_fflush_r>
 80072e0:	bb30      	cbnz	r0, 8007330 <__swbuf_r+0x90>
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	3001      	adds	r0, #1
 80072e6:	3b01      	subs	r3, #1
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	6022      	str	r2, [r4, #0]
 80072f0:	701e      	strb	r6, [r3, #0]
 80072f2:	6963      	ldr	r3, [r4, #20]
 80072f4:	4283      	cmp	r3, r0
 80072f6:	d004      	beq.n	8007302 <__swbuf_r+0x62>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	07db      	lsls	r3, r3, #31
 80072fc:	d506      	bpl.n	800730c <__swbuf_r+0x6c>
 80072fe:	2e0a      	cmp	r6, #10
 8007300:	d104      	bne.n	800730c <__swbuf_r+0x6c>
 8007302:	4621      	mov	r1, r4
 8007304:	4628      	mov	r0, r5
 8007306:	f000 f919 	bl	800753c <_fflush_r>
 800730a:	b988      	cbnz	r0, 8007330 <__swbuf_r+0x90>
 800730c:	4638      	mov	r0, r7
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <__swbuf_r+0x9c>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <__swbuf_r+0x7a>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7cf      	b.n	80072ba <__swbuf_r+0x1a>
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <__swbuf_r+0xa0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7ca      	b.n	80072ba <__swbuf_r+0x1a>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f80c 	bl	8007344 <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d0cb      	beq.n	80072c8 <__swbuf_r+0x28>
 8007330:	f04f 37ff 	mov.w	r7, #4294967295
 8007334:	e7ea      	b.n	800730c <__swbuf_r+0x6c>
 8007336:	bf00      	nop
 8007338:	08007f44 	.word	0x08007f44
 800733c:	08007f64 	.word	0x08007f64
 8007340:	08007f24 	.word	0x08007f24

08007344 <__swsetup_r>:
 8007344:	4b32      	ldr	r3, [pc, #200]	; (8007410 <__swsetup_r+0xcc>)
 8007346:	b570      	push	{r4, r5, r6, lr}
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	4606      	mov	r6, r0
 800734c:	460c      	mov	r4, r1
 800734e:	b125      	cbz	r5, 800735a <__swsetup_r+0x16>
 8007350:	69ab      	ldr	r3, [r5, #24]
 8007352:	b913      	cbnz	r3, 800735a <__swsetup_r+0x16>
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f985 	bl	8007664 <__sinit>
 800735a:	4b2e      	ldr	r3, [pc, #184]	; (8007414 <__swsetup_r+0xd0>)
 800735c:	429c      	cmp	r4, r3
 800735e:	d10f      	bne.n	8007380 <__swsetup_r+0x3c>
 8007360:	686c      	ldr	r4, [r5, #4]
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007368:	0719      	lsls	r1, r3, #28
 800736a:	d42c      	bmi.n	80073c6 <__swsetup_r+0x82>
 800736c:	06dd      	lsls	r5, r3, #27
 800736e:	d411      	bmi.n	8007394 <__swsetup_r+0x50>
 8007370:	2309      	movs	r3, #9
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	e03e      	b.n	80073fe <__swsetup_r+0xba>
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <__swsetup_r+0xd4>)
 8007382:	429c      	cmp	r4, r3
 8007384:	d101      	bne.n	800738a <__swsetup_r+0x46>
 8007386:	68ac      	ldr	r4, [r5, #8]
 8007388:	e7eb      	b.n	8007362 <__swsetup_r+0x1e>
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <__swsetup_r+0xd8>)
 800738c:	429c      	cmp	r4, r3
 800738e:	bf08      	it	eq
 8007390:	68ec      	ldreq	r4, [r5, #12]
 8007392:	e7e6      	b.n	8007362 <__swsetup_r+0x1e>
 8007394:	0758      	lsls	r0, r3, #29
 8007396:	d512      	bpl.n	80073be <__swsetup_r+0x7a>
 8007398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800739a:	b141      	cbz	r1, 80073ae <__swsetup_r+0x6a>
 800739c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d002      	beq.n	80073aa <__swsetup_r+0x66>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff fb6f 	bl	8006a88 <_free_r>
 80073aa:	2300      	movs	r3, #0
 80073ac:	6363      	str	r3, [r4, #52]	; 0x34
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6063      	str	r3, [r4, #4]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f043 0308 	orr.w	r3, r3, #8
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	b94b      	cbnz	r3, 80073de <__swsetup_r+0x9a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d003      	beq.n	80073de <__swsetup_r+0x9a>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 fa07 	bl	80077ec <__smakebuf_r>
 80073de:	89a0      	ldrh	r0, [r4, #12]
 80073e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e4:	f010 0301 	ands.w	r3, r0, #1
 80073e8:	d00a      	beq.n	8007400 <__swsetup_r+0xbc>
 80073ea:	2300      	movs	r3, #0
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	6963      	ldr	r3, [r4, #20]
 80073f0:	425b      	negs	r3, r3
 80073f2:	61a3      	str	r3, [r4, #24]
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b943      	cbnz	r3, 800740a <__swsetup_r+0xc6>
 80073f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073fc:	d1ba      	bne.n	8007374 <__swsetup_r+0x30>
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	0781      	lsls	r1, r0, #30
 8007402:	bf58      	it	pl
 8007404:	6963      	ldrpl	r3, [r4, #20]
 8007406:	60a3      	str	r3, [r4, #8]
 8007408:	e7f4      	b.n	80073f4 <__swsetup_r+0xb0>
 800740a:	2000      	movs	r0, #0
 800740c:	e7f7      	b.n	80073fe <__swsetup_r+0xba>
 800740e:	bf00      	nop
 8007410:	2000000c 	.word	0x2000000c
 8007414:	08007f44 	.word	0x08007f44
 8007418:	08007f64 	.word	0x08007f64
 800741c:	08007f24 	.word	0x08007f24

08007420 <abort>:
 8007420:	2006      	movs	r0, #6
 8007422:	b508      	push	{r3, lr}
 8007424:	f000 fa52 	bl	80078cc <raise>
 8007428:	2001      	movs	r0, #1
 800742a:	f7f9 feba 	bl	80011a2 <_exit>
	...

08007430 <__sflush_r>:
 8007430:	898a      	ldrh	r2, [r1, #12]
 8007432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	0710      	lsls	r0, r2, #28
 800743a:	460c      	mov	r4, r1
 800743c:	d458      	bmi.n	80074f0 <__sflush_r+0xc0>
 800743e:	684b      	ldr	r3, [r1, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc05      	bgt.n	8007450 <__sflush_r+0x20>
 8007444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc02      	bgt.n	8007450 <__sflush_r+0x20>
 800744a:	2000      	movs	r0, #0
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007452:	2e00      	cmp	r6, #0
 8007454:	d0f9      	beq.n	800744a <__sflush_r+0x1a>
 8007456:	2300      	movs	r3, #0
 8007458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800745c:	682f      	ldr	r7, [r5, #0]
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	d032      	beq.n	80074c8 <__sflush_r+0x98>
 8007462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	075a      	lsls	r2, r3, #29
 8007468:	d505      	bpl.n	8007476 <__sflush_r+0x46>
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	1ac0      	subs	r0, r0, r3
 800746e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007470:	b10b      	cbz	r3, 8007476 <__sflush_r+0x46>
 8007472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	2300      	movs	r3, #0
 8007478:	4602      	mov	r2, r0
 800747a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747c:	4628      	mov	r0, r5
 800747e:	6a21      	ldr	r1, [r4, #32]
 8007480:	47b0      	blx	r6
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	d106      	bne.n	8007496 <__sflush_r+0x66>
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	291d      	cmp	r1, #29
 800748c:	d82c      	bhi.n	80074e8 <__sflush_r+0xb8>
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <__sflush_r+0x108>)
 8007490:	40ca      	lsrs	r2, r1
 8007492:	07d6      	lsls	r6, r2, #31
 8007494:	d528      	bpl.n	80074e8 <__sflush_r+0xb8>
 8007496:	2200      	movs	r2, #0
 8007498:	6062      	str	r2, [r4, #4]
 800749a:	6922      	ldr	r2, [r4, #16]
 800749c:	04d9      	lsls	r1, r3, #19
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	d504      	bpl.n	80074ac <__sflush_r+0x7c>
 80074a2:	1c42      	adds	r2, r0, #1
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0x7a>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	b903      	cbnz	r3, 80074ac <__sflush_r+0x7c>
 80074aa:	6560      	str	r0, [r4, #84]	; 0x54
 80074ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ae:	602f      	str	r7, [r5, #0]
 80074b0:	2900      	cmp	r1, #0
 80074b2:	d0ca      	beq.n	800744a <__sflush_r+0x1a>
 80074b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b8:	4299      	cmp	r1, r3
 80074ba:	d002      	beq.n	80074c2 <__sflush_r+0x92>
 80074bc:	4628      	mov	r0, r5
 80074be:	f7ff fae3 	bl	8006a88 <_free_r>
 80074c2:	2000      	movs	r0, #0
 80074c4:	6360      	str	r0, [r4, #52]	; 0x34
 80074c6:	e7c1      	b.n	800744c <__sflush_r+0x1c>
 80074c8:	6a21      	ldr	r1, [r4, #32]
 80074ca:	2301      	movs	r3, #1
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b0      	blx	r6
 80074d0:	1c41      	adds	r1, r0, #1
 80074d2:	d1c7      	bne.n	8007464 <__sflush_r+0x34>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0c4      	beq.n	8007464 <__sflush_r+0x34>
 80074da:	2b1d      	cmp	r3, #29
 80074dc:	d001      	beq.n	80074e2 <__sflush_r+0xb2>
 80074de:	2b16      	cmp	r3, #22
 80074e0:	d101      	bne.n	80074e6 <__sflush_r+0xb6>
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	e7b1      	b.n	800744a <__sflush_r+0x1a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7ad      	b.n	800744c <__sflush_r+0x1c>
 80074f0:	690f      	ldr	r7, [r1, #16]
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	d0a9      	beq.n	800744a <__sflush_r+0x1a>
 80074f6:	0793      	lsls	r3, r2, #30
 80074f8:	bf18      	it	ne
 80074fa:	2300      	movne	r3, #0
 80074fc:	680e      	ldr	r6, [r1, #0]
 80074fe:	bf08      	it	eq
 8007500:	694b      	ldreq	r3, [r1, #20]
 8007502:	eba6 0807 	sub.w	r8, r6, r7
 8007506:	600f      	str	r7, [r1, #0]
 8007508:	608b      	str	r3, [r1, #8]
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	dd9c      	ble.n	800744a <__sflush_r+0x1a>
 8007510:	4643      	mov	r3, r8
 8007512:	463a      	mov	r2, r7
 8007514:	4628      	mov	r0, r5
 8007516:	6a21      	ldr	r1, [r4, #32]
 8007518:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800751a:	47b0      	blx	r6
 800751c:	2800      	cmp	r0, #0
 800751e:	dc06      	bgt.n	800752e <__sflush_r+0xfe>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	e78e      	b.n	800744c <__sflush_r+0x1c>
 800752e:	4407      	add	r7, r0
 8007530:	eba8 0800 	sub.w	r8, r8, r0
 8007534:	e7e9      	b.n	800750a <__sflush_r+0xda>
 8007536:	bf00      	nop
 8007538:	20400001 	.word	0x20400001

0800753c <_fflush_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b913      	cbnz	r3, 800754c <_fflush_r+0x10>
 8007546:	2500      	movs	r5, #0
 8007548:	4628      	mov	r0, r5
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	b118      	cbz	r0, 8007556 <_fflush_r+0x1a>
 800754e:	6983      	ldr	r3, [r0, #24]
 8007550:	b90b      	cbnz	r3, 8007556 <_fflush_r+0x1a>
 8007552:	f000 f887 	bl	8007664 <__sinit>
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <_fflush_r+0x6c>)
 8007558:	429c      	cmp	r4, r3
 800755a:	d11b      	bne.n	8007594 <_fflush_r+0x58>
 800755c:	686c      	ldr	r4, [r5, #4]
 800755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0ef      	beq.n	8007546 <_fflush_r+0xa>
 8007566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007568:	07d0      	lsls	r0, r2, #31
 800756a:	d404      	bmi.n	8007576 <_fflush_r+0x3a>
 800756c:	0599      	lsls	r1, r3, #22
 800756e:	d402      	bmi.n	8007576 <_fflush_r+0x3a>
 8007570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007572:	f000 f915 	bl	80077a0 <__retarget_lock_acquire_recursive>
 8007576:	4628      	mov	r0, r5
 8007578:	4621      	mov	r1, r4
 800757a:	f7ff ff59 	bl	8007430 <__sflush_r>
 800757e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007580:	4605      	mov	r5, r0
 8007582:	07da      	lsls	r2, r3, #31
 8007584:	d4e0      	bmi.n	8007548 <_fflush_r+0xc>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	059b      	lsls	r3, r3, #22
 800758a:	d4dd      	bmi.n	8007548 <_fflush_r+0xc>
 800758c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758e:	f000 f908 	bl	80077a2 <__retarget_lock_release_recursive>
 8007592:	e7d9      	b.n	8007548 <_fflush_r+0xc>
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <_fflush_r+0x70>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d101      	bne.n	800759e <_fflush_r+0x62>
 800759a:	68ac      	ldr	r4, [r5, #8]
 800759c:	e7df      	b.n	800755e <_fflush_r+0x22>
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <_fflush_r+0x74>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	bf08      	it	eq
 80075a4:	68ec      	ldreq	r4, [r5, #12]
 80075a6:	e7da      	b.n	800755e <_fflush_r+0x22>
 80075a8:	08007f44 	.word	0x08007f44
 80075ac:	08007f64 	.word	0x08007f64
 80075b0:	08007f24 	.word	0x08007f24

080075b4 <std>:
 80075b4:	2300      	movs	r3, #0
 80075b6:	b510      	push	{r4, lr}
 80075b8:	4604      	mov	r4, r0
 80075ba:	e9c0 3300 	strd	r3, r3, [r0]
 80075be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075c2:	6083      	str	r3, [r0, #8]
 80075c4:	8181      	strh	r1, [r0, #12]
 80075c6:	6643      	str	r3, [r0, #100]	; 0x64
 80075c8:	81c2      	strh	r2, [r0, #14]
 80075ca:	6183      	str	r3, [r0, #24]
 80075cc:	4619      	mov	r1, r3
 80075ce:	2208      	movs	r2, #8
 80075d0:	305c      	adds	r0, #92	; 0x5c
 80075d2:	f7fb fe35 	bl	8003240 <memset>
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <std+0x38>)
 80075d8:	6224      	str	r4, [r4, #32]
 80075da:	6263      	str	r3, [r4, #36]	; 0x24
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <std+0x3c>)
 80075de:	62a3      	str	r3, [r4, #40]	; 0x28
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <std+0x40>)
 80075e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <std+0x44>)
 80075e6:	6323      	str	r3, [r4, #48]	; 0x30
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	bf00      	nop
 80075ec:	08007905 	.word	0x08007905
 80075f0:	08007927 	.word	0x08007927
 80075f4:	0800795f 	.word	0x0800795f
 80075f8:	08007983 	.word	0x08007983

080075fc <_cleanup_r>:
 80075fc:	4901      	ldr	r1, [pc, #4]	; (8007604 <_cleanup_r+0x8>)
 80075fe:	f000 b8af 	b.w	8007760 <_fwalk_reent>
 8007602:	bf00      	nop
 8007604:	0800753d 	.word	0x0800753d

08007608 <__sfmoreglue>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	2568      	movs	r5, #104	; 0x68
 800760c:	1e4a      	subs	r2, r1, #1
 800760e:	4355      	muls	r5, r2
 8007610:	460e      	mov	r6, r1
 8007612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007616:	f7ff fa83 	bl	8006b20 <_malloc_r>
 800761a:	4604      	mov	r4, r0
 800761c:	b140      	cbz	r0, 8007630 <__sfmoreglue+0x28>
 800761e:	2100      	movs	r1, #0
 8007620:	e9c0 1600 	strd	r1, r6, [r0]
 8007624:	300c      	adds	r0, #12
 8007626:	60a0      	str	r0, [r4, #8]
 8007628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800762c:	f7fb fe08 	bl	8003240 <memset>
 8007630:	4620      	mov	r0, r4
 8007632:	bd70      	pop	{r4, r5, r6, pc}

08007634 <__sfp_lock_acquire>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sfp_lock_acquire+0x8>)
 8007636:	f000 b8b3 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 800763a:	bf00      	nop
 800763c:	20000364 	.word	0x20000364

08007640 <__sfp_lock_release>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sfp_lock_release+0x8>)
 8007642:	f000 b8ae 	b.w	80077a2 <__retarget_lock_release_recursive>
 8007646:	bf00      	nop
 8007648:	20000364 	.word	0x20000364

0800764c <__sinit_lock_acquire>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__sinit_lock_acquire+0x8>)
 800764e:	f000 b8a7 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 8007652:	bf00      	nop
 8007654:	2000035f 	.word	0x2000035f

08007658 <__sinit_lock_release>:
 8007658:	4801      	ldr	r0, [pc, #4]	; (8007660 <__sinit_lock_release+0x8>)
 800765a:	f000 b8a2 	b.w	80077a2 <__retarget_lock_release_recursive>
 800765e:	bf00      	nop
 8007660:	2000035f 	.word	0x2000035f

08007664 <__sinit>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4604      	mov	r4, r0
 8007668:	f7ff fff0 	bl	800764c <__sinit_lock_acquire>
 800766c:	69a3      	ldr	r3, [r4, #24]
 800766e:	b11b      	cbz	r3, 8007678 <__sinit+0x14>
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f7ff bff0 	b.w	8007658 <__sinit_lock_release>
 8007678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800767c:	6523      	str	r3, [r4, #80]	; 0x50
 800767e:	4b13      	ldr	r3, [pc, #76]	; (80076cc <__sinit+0x68>)
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <__sinit+0x6c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	62a2      	str	r2, [r4, #40]	; 0x28
 8007686:	42a3      	cmp	r3, r4
 8007688:	bf08      	it	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	4620      	mov	r0, r4
 800768e:	bf08      	it	eq
 8007690:	61a3      	streq	r3, [r4, #24]
 8007692:	f000 f81f 	bl	80076d4 <__sfp>
 8007696:	6060      	str	r0, [r4, #4]
 8007698:	4620      	mov	r0, r4
 800769a:	f000 f81b 	bl	80076d4 <__sfp>
 800769e:	60a0      	str	r0, [r4, #8]
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 f817 	bl	80076d4 <__sfp>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2104      	movs	r1, #4
 80076aa:	60e0      	str	r0, [r4, #12]
 80076ac:	6860      	ldr	r0, [r4, #4]
 80076ae:	f7ff ff81 	bl	80075b4 <std>
 80076b2:	2201      	movs	r2, #1
 80076b4:	2109      	movs	r1, #9
 80076b6:	68a0      	ldr	r0, [r4, #8]
 80076b8:	f7ff ff7c 	bl	80075b4 <std>
 80076bc:	2202      	movs	r2, #2
 80076be:	2112      	movs	r1, #18
 80076c0:	68e0      	ldr	r0, [r4, #12]
 80076c2:	f7ff ff77 	bl	80075b4 <std>
 80076c6:	2301      	movs	r3, #1
 80076c8:	61a3      	str	r3, [r4, #24]
 80076ca:	e7d1      	b.n	8007670 <__sinit+0xc>
 80076cc:	08007acc 	.word	0x08007acc
 80076d0:	080075fd 	.word	0x080075fd

080076d4 <__sfp>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	4607      	mov	r7, r0
 80076d8:	f7ff ffac 	bl	8007634 <__sfp_lock_acquire>
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <__sfp+0x84>)
 80076de:	681e      	ldr	r6, [r3, #0]
 80076e0:	69b3      	ldr	r3, [r6, #24]
 80076e2:	b913      	cbnz	r3, 80076ea <__sfp+0x16>
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff ffbd 	bl	8007664 <__sinit>
 80076ea:	3648      	adds	r6, #72	; 0x48
 80076ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	d503      	bpl.n	80076fc <__sfp+0x28>
 80076f4:	6833      	ldr	r3, [r6, #0]
 80076f6:	b30b      	cbz	r3, 800773c <__sfp+0x68>
 80076f8:	6836      	ldr	r6, [r6, #0]
 80076fa:	e7f7      	b.n	80076ec <__sfp+0x18>
 80076fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007700:	b9d5      	cbnz	r5, 8007738 <__sfp+0x64>
 8007702:	4b16      	ldr	r3, [pc, #88]	; (800775c <__sfp+0x88>)
 8007704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007708:	60e3      	str	r3, [r4, #12]
 800770a:	6665      	str	r5, [r4, #100]	; 0x64
 800770c:	f000 f847 	bl	800779e <__retarget_lock_init_recursive>
 8007710:	f7ff ff96 	bl	8007640 <__sfp_lock_release>
 8007714:	2208      	movs	r2, #8
 8007716:	4629      	mov	r1, r5
 8007718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800771c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007720:	6025      	str	r5, [r4, #0]
 8007722:	61a5      	str	r5, [r4, #24]
 8007724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007728:	f7fb fd8a 	bl	8003240 <memset>
 800772c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007734:	4620      	mov	r0, r4
 8007736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007738:	3468      	adds	r4, #104	; 0x68
 800773a:	e7d9      	b.n	80076f0 <__sfp+0x1c>
 800773c:	2104      	movs	r1, #4
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff ff62 	bl	8007608 <__sfmoreglue>
 8007744:	4604      	mov	r4, r0
 8007746:	6030      	str	r0, [r6, #0]
 8007748:	2800      	cmp	r0, #0
 800774a:	d1d5      	bne.n	80076f8 <__sfp+0x24>
 800774c:	f7ff ff78 	bl	8007640 <__sfp_lock_release>
 8007750:	230c      	movs	r3, #12
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	e7ee      	b.n	8007734 <__sfp+0x60>
 8007756:	bf00      	nop
 8007758:	08007acc 	.word	0x08007acc
 800775c:	ffff0001 	.word	0xffff0001

08007760 <_fwalk_reent>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	4606      	mov	r6, r0
 8007766:	4688      	mov	r8, r1
 8007768:	2700      	movs	r7, #0
 800776a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800776e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007772:	f1b9 0901 	subs.w	r9, r9, #1
 8007776:	d505      	bpl.n	8007784 <_fwalk_reent+0x24>
 8007778:	6824      	ldr	r4, [r4, #0]
 800777a:	2c00      	cmp	r4, #0
 800777c:	d1f7      	bne.n	800776e <_fwalk_reent+0xe>
 800777e:	4638      	mov	r0, r7
 8007780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007784:	89ab      	ldrh	r3, [r5, #12]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d907      	bls.n	800779a <_fwalk_reent+0x3a>
 800778a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778e:	3301      	adds	r3, #1
 8007790:	d003      	beq.n	800779a <_fwalk_reent+0x3a>
 8007792:	4629      	mov	r1, r5
 8007794:	4630      	mov	r0, r6
 8007796:	47c0      	blx	r8
 8007798:	4307      	orrs	r7, r0
 800779a:	3568      	adds	r5, #104	; 0x68
 800779c:	e7e9      	b.n	8007772 <_fwalk_reent+0x12>

0800779e <__retarget_lock_init_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__retarget_lock_acquire_recursive>:
 80077a0:	4770      	bx	lr

080077a2 <__retarget_lock_release_recursive>:
 80077a2:	4770      	bx	lr

080077a4 <__swhatbuf_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	460e      	mov	r6, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	4614      	mov	r4, r2
 80077ae:	2900      	cmp	r1, #0
 80077b0:	461d      	mov	r5, r3
 80077b2:	b096      	sub	sp, #88	; 0x58
 80077b4:	da07      	bge.n	80077c6 <__swhatbuf_r+0x22>
 80077b6:	2300      	movs	r3, #0
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	89b3      	ldrh	r3, [r6, #12]
 80077bc:	061a      	lsls	r2, r3, #24
 80077be:	d410      	bmi.n	80077e2 <__swhatbuf_r+0x3e>
 80077c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c4:	e00e      	b.n	80077e4 <__swhatbuf_r+0x40>
 80077c6:	466a      	mov	r2, sp
 80077c8:	f000 f902 	bl	80079d0 <_fstat_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dbf2      	blt.n	80077b6 <__swhatbuf_r+0x12>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077da:	425a      	negs	r2, r3
 80077dc:	415a      	adcs	r2, r3
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	e7ee      	b.n	80077c0 <__swhatbuf_r+0x1c>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	2000      	movs	r0, #0
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	b016      	add	sp, #88	; 0x58
 80077ea:	bd70      	pop	{r4, r5, r6, pc}

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b002      	add	sp, #8
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	466a      	mov	r2, sp
 800780a:	ab01      	add	r3, sp, #4
 800780c:	f7ff ffca 	bl	80077a4 <__swhatbuf_r>
 8007810:	9900      	ldr	r1, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4630      	mov	r0, r6
 8007816:	f7ff f983 	bl	8006b20 <_malloc_r>
 800781a:	b948      	cbnz	r0, 8007830 <__smakebuf_r+0x44>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d4ef      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	e7e3      	b.n	80077f8 <__smakebuf_r+0xc>
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <__smakebuf_r+0x7c>)
 8007832:	62b3      	str	r3, [r6, #40]	; 0x28
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6120      	str	r0, [r4, #16]
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x74>
 8007848:	4630      	mov	r0, r6
 800784a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784e:	f000 f8d1 	bl	80079f4 <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x74>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	4305      	orrs	r5, r0
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cd      	b.n	8007804 <__smakebuf_r+0x18>
 8007868:	080075fd 	.word	0x080075fd

0800786c <_malloc_usable_size_r>:
 800786c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007870:	1f18      	subs	r0, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfbc      	itt	lt
 8007876:	580b      	ldrlt	r3, [r1, r0]
 8007878:	18c0      	addlt	r0, r0, r3
 800787a:	4770      	bx	lr

0800787c <_raise_r>:
 800787c:	291f      	cmp	r1, #31
 800787e:	b538      	push	{r3, r4, r5, lr}
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	d904      	bls.n	8007890 <_raise_r+0x14>
 8007886:	2316      	movs	r3, #22
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	f04f 30ff 	mov.w	r0, #4294967295
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007892:	b112      	cbz	r2, 800789a <_raise_r+0x1e>
 8007894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007898:	b94b      	cbnz	r3, 80078ae <_raise_r+0x32>
 800789a:	4620      	mov	r0, r4
 800789c:	f000 f830 	bl	8007900 <_getpid_r>
 80078a0:	462a      	mov	r2, r5
 80078a2:	4601      	mov	r1, r0
 80078a4:	4620      	mov	r0, r4
 80078a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078aa:	f000 b817 	b.w	80078dc <_kill_r>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d00a      	beq.n	80078c8 <_raise_r+0x4c>
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	d103      	bne.n	80078be <_raise_r+0x42>
 80078b6:	2316      	movs	r3, #22
 80078b8:	6003      	str	r3, [r0, #0]
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7e7      	b.n	800788e <_raise_r+0x12>
 80078be:	2400      	movs	r4, #0
 80078c0:	4628      	mov	r0, r5
 80078c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078c6:	4798      	blx	r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7e0      	b.n	800788e <_raise_r+0x12>

080078cc <raise>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <raise+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7ff bfd3 	b.w	800787c <_raise_r>
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c

080078dc <_kill_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	2300      	movs	r3, #0
 80078e0:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_kill_r+0x20>)
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	f7f9 fc4a 	bl	8001182 <_kill>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d102      	bne.n	80078f8 <_kill_r+0x1c>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	b103      	cbz	r3, 80078f8 <_kill_r+0x1c>
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
 80078fa:	bf00      	nop
 80078fc:	20000358 	.word	0x20000358

08007900 <_getpid_r>:
 8007900:	f7f9 bc38 	b.w	8001174 <_getpid>

08007904 <__sread>:
 8007904:	b510      	push	{r4, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	f000 f894 	bl	8007a38 <_read_r>
 8007910:	2800      	cmp	r0, #0
 8007912:	bfab      	itete	ge
 8007914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007916:	89a3      	ldrhlt	r3, [r4, #12]
 8007918:	181b      	addge	r3, r3, r0
 800791a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800791e:	bfac      	ite	ge
 8007920:	6563      	strge	r3, [r4, #84]	; 0x54
 8007922:	81a3      	strhlt	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__swrite>:
 8007926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	461f      	mov	r7, r3
 800792c:	898b      	ldrh	r3, [r1, #12]
 800792e:	4605      	mov	r5, r0
 8007930:	05db      	lsls	r3, r3, #23
 8007932:	460c      	mov	r4, r1
 8007934:	4616      	mov	r6, r2
 8007936:	d505      	bpl.n	8007944 <__swrite+0x1e>
 8007938:	2302      	movs	r3, #2
 800793a:	2200      	movs	r2, #0
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	f000 f868 	bl	8007a14 <_lseek_r>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	4632      	mov	r2, r6
 8007948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	4628      	mov	r0, r5
 8007950:	463b      	mov	r3, r7
 8007952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	f000 b817 	b.w	800798c <_write_r>

0800795e <__sseek>:
 800795e:	b510      	push	{r4, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	f000 f855 	bl	8007a14 <_lseek_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	bf15      	itete	ne
 8007970:	6560      	strne	r0, [r4, #84]	; 0x54
 8007972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797a:	81a3      	strheq	r3, [r4, #12]
 800797c:	bf18      	it	ne
 800797e:	81a3      	strhne	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}

08007982 <__sclose>:
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f000 b813 	b.w	80079b0 <_close_r>
	...

0800798c <_write_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	4611      	mov	r1, r2
 8007994:	2200      	movs	r2, #0
 8007996:	4d05      	ldr	r5, [pc, #20]	; (80079ac <_write_r+0x20>)
 8007998:	602a      	str	r2, [r5, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f7f9 fc28 	bl	80011f0 <_write>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_write_r+0x1e>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_write_r+0x1e>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	20000358 	.word	0x20000358

080079b0 <_close_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	2300      	movs	r3, #0
 80079b4:	4d05      	ldr	r5, [pc, #20]	; (80079cc <_close_r+0x1c>)
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7f9 fc34 	bl	8001228 <_close>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_close_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_close_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	20000358 	.word	0x20000358

080079d0 <_fstat_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	2300      	movs	r3, #0
 80079d4:	4d06      	ldr	r5, [pc, #24]	; (80079f0 <_fstat_r+0x20>)
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f7f9 fc2e 	bl	800123e <_fstat>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d102      	bne.n	80079ec <_fstat_r+0x1c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b103      	cbz	r3, 80079ec <_fstat_r+0x1c>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	20000358 	.word	0x20000358

080079f4 <_isatty_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4d05      	ldr	r5, [pc, #20]	; (8007a10 <_isatty_r+0x1c>)
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7f9 fc2c 	bl	800125c <_isatty>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_isatty_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_isatty_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	20000358 	.word	0x20000358

08007a14 <_lseek_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4d05      	ldr	r5, [pc, #20]	; (8007a34 <_lseek_r+0x20>)
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 fc24 	bl	8001270 <_lseek>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_lseek_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_lseek_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000358 	.word	0x20000358

08007a38 <_read_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	2200      	movs	r2, #0
 8007a42:	4d05      	ldr	r5, [pc, #20]	; (8007a58 <_read_r+0x20>)
 8007a44:	602a      	str	r2, [r5, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f7f9 fbb5 	bl	80011b6 <_read>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_read_r+0x1e>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_read_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	20000358 	.word	0x20000358

08007a5c <_init>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

08007a68 <_fini>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr
