
final_winch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08008cc0  08008cc0  00018cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091dc  080091dc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080091dc  080091dc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091dc  080091dc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080091e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e8  080093cc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080093cc  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0bf  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002308  00000000  00000000  0002e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000305d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000313d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b0  00000000  00000000  000320f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e719  00000000  00000000  0004b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dcf  00000000  00000000  00059ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea888  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  000ea8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ca4 	.word	0x08008ca4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008ca4 	.word	0x08008ca4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <map>:
static void MX_TIM3_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	69b9      	ldr	r1, [r7, #24]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	1a8a      	subs	r2, r1, r2
 8000e0e:	fb02 f203 	mul.w	r2, r2, r3
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	4413      	add	r3, r2
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f000 fda5 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f851 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3a:	f000 fae1 	bl	8001400 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e3e:	f000 f8a9 	bl	8000f94 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e42:	f000 f979 	bl	8001138 <MX_TIM3_Init>
  MX_DMA_Init();
 8000e46:	f000 fa17 	bl	8001278 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e4a:	f000 f9eb 	bl	8001224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <main+0x84>)
 8000e52:	f002 fc0f 	bl	8003674 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  HAL_ADC_Start_DMA(&hadc1, &buffer, 10);
 8000e56:	220a      	movs	r2, #10
 8000e58:	4916      	ldr	r1, [pc, #88]	; (8000eb4 <main+0x88>)
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <main+0x8c>)
 8000e5c:	f000 feee 	bl	8001c3c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(100);
 8000e60:	2064      	movs	r0, #100	; 0x64
 8000e62:	f000 fdef 	bl	8001a44 <HAL_Delay>

	   sprintf(MSG, "Ticks = %ld,  direction=%s,adc=%d,current=%f\r\n", (long)encoderValue,Current_Dir,(int)val,current);
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <main+0x90>)
 8000e68:	681d      	ldr	r5, [r3, #0]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <main+0x94>)
 8000e6c:	681e      	ldr	r6, [r3, #0]
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x98>)
 8000e70:	681c      	ldr	r4, [r3, #0]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <main+0x9c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fad6 	bl	8000428 <__aeabi_f2d>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e84:	9400      	str	r4, [sp, #0]
 8000e86:	4633      	mov	r3, r6
 8000e88:	462a      	mov	r2, r5
 8000e8a:	4910      	ldr	r1, [pc, #64]	; (8000ecc <main+0xa0>)
 8000e8c:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <main+0xa4>)
 8000e8e:	f004 f977 	bl	8005180 <siprintf>
	     HAL_UART_Transmit(&huart1, MSG, strlen((char*)MSG), 1000);
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <main+0xa4>)
 8000e94:	f7ff f95c 	bl	8000150 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea0:	490b      	ldr	r1, [pc, #44]	; (8000ed0 <main+0xa4>)
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <main+0xa8>)
 8000ea4:	f003 f959 	bl	800415a <HAL_UART_Transmit>
	     TIM3->CCR1=80;
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <main+0xac>)
 8000eaa:	2250      	movs	r2, #80	; 0x50
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000eae:	e7d7      	b.n	8000e60 <main+0x34>
 8000eb0:	20000254 	.word	0x20000254
 8000eb4:	20000320 	.word	0x20000320
 8000eb8:	200002a4 	.word	0x200002a4
 8000ebc:	20000208 	.word	0x20000208
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	200002d4 	.word	0x200002d4
 8000ec8:	20000324 	.word	0x20000324
 8000ecc:	08008cc4 	.word	0x08008cc4
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	200002d8 	.word	0x200002d8
 8000ed8:	40000400 	.word	0x40000400

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 faca 	bl	8004484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fe26 	bl	8002b84 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f3e:	f000 fac3 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f890 	bl	8003084 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f6a:	f000 faad 	bl	80014c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fa1c 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f86:	f000 fa9f 	bl	80014c8 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <MX_ADC1_Init+0x98>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fc6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd8:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_ADC1_Init+0x94>)
 8000fda:	f000 fd57 	bl	8001a8c <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000fe4:	f000 fa70 	bl	80014c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_ADC1_Init+0x94>)
 8000ffa:	f000 ff0f 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001004:	f000 fa60 	bl	80014c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_ADC1_Init+0x94>)
 8001012:	f000 ff03 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 fa54 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200002a4 	.word	0x200002a4
 800102c:	40012400 	.word	0x40012400

08001030 <HAL_ADC_ConvCpltCallback>:
  * @retval None
  */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
   adc_val = buffer;
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_ADC_ConvCpltCallback+0xf0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a39      	ldr	r2, [pc, #228]	; (8001124 <HAL_ADC_ConvCpltCallback+0xf4>)
 800103e:	6013      	str	r3, [r2, #0]
   val=map(adc_val, 0, 255,0 , 4095);
 8001040:	4b38      	ldr	r3, [pc, #224]	; (8001124 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f640 73ff 	movw	r3, #4095	; 0xfff
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	2100      	movs	r1, #0
 8001052:	f7ff fecf 	bl	8000df4 <map>
 8001056:	4603      	mov	r3, r0
 8001058:	4a33      	ldr	r2, [pc, #204]	; (8001128 <HAL_ADC_ConvCpltCallback+0xf8>)
 800105a:	6013      	str	r3, [r2, #0]
   rawVoltage = (float) val * 3.3 * 2 / 4095;
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <HAL_ADC_ConvCpltCallback+0xf8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe3b 	bl	8000cdc <__aeabi_i2f>
 8001066:	4603      	mov	r3, r0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f9dd 	bl	8000428 <__aeabi_f2d>
 800106e:	a324      	add	r3, pc, #144	; (adr r3, 8001100 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	f7ff f872 	bl	800016c <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	a31d      	add	r3, pc, #116	; (adr r3, 8001108 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fb49 	bl	800072c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd11 	bl	8000ac8 <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <HAL_ADC_ConvCpltCallback+0xfc>)
 80010aa:	6013      	str	r3, [r2, #0]
       // If rawVoltage is not 2.5Volt, multiply by a factor.In my case it is 1.035
       // This is due to tolerance in voltage divider resister & ADC accuracy
       current =((rawVoltage - 2.503)/0.185)*1000;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_ADC_ConvCpltCallback+0xfc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9b9 	bl	8000428 <__aeabi_f2d>
 80010b6:	a316      	add	r3, pc, #88	; (adr r3, 8001110 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a313      	add	r3, pc, #76	; (adr r3, 8001118 <HAL_ADC_ConvCpltCallback+0xe8>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fb2d 	bl	800072c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_ADC_ConvCpltCallback+0x100>)
 80010e0:	f7ff f9fa 	bl	80004d8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fcec 	bl	8000ac8 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_ADC_ConvCpltCallback+0x104>)
 80010f4:	6013      	str	r3, [r2, #0]
  // HAL_ADC_Stop_DMA(&hadc1);
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	66666666 	.word	0x66666666
 8001104:	400a6666 	.word	0x400a6666
 8001108:	00000000 	.word	0x00000000
 800110c:	40affe00 	.word	0x40affe00
 8001110:	dd2f1aa0 	.word	0xdd2f1aa0
 8001114:	40040624 	.word	0x40040624
 8001118:	7ae147ae 	.word	0x7ae147ae
 800111c:	3fc7ae14 	.word	0x3fc7ae14
 8001120:	20000320 	.word	0x20000320
 8001124:	20000210 	.word	0x20000210
 8001128:	200002d4 	.word	0x200002d4
 800112c:	20000328 	.word	0x20000328
 8001130:	408f4000 	.word	0x408f4000
 8001134:	20000324 	.word	0x20000324

08001138 <MX_TIM3_Init>:
static void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <MX_TIM3_Init+0xe4>)
 800116a:	4a2d      	ldr	r2, [pc, #180]	; (8001220 <MX_TIM3_Init+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_TIM3_Init+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_TIM3_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_TIM3_Init+0xe4>)
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_TIM3_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_TIM3_Init+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <MX_TIM3_Init+0xe4>)
 8001190:	f002 f9c8 	bl	8003524 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800119a:	f000 f995 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a8:	4619      	mov	r1, r3
 80011aa:	481c      	ldr	r0, [pc, #112]	; (800121c <MX_TIM3_Init+0xe4>)
 80011ac:	f002 fbc2 	bl	8003934 <HAL_TIM_ConfigClockSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011b6:	f000 f987 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <MX_TIM3_Init+0xe4>)
 80011bc:	f002 fa01 	bl	80035c2 <HAL_TIM_PWM_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011c6:	f000 f97f 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	4619      	mov	r1, r3
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <MX_TIM3_Init+0xe4>)
 80011da:	f002 ff13 	bl	8004004 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011e4:	f000 f970 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM3_Init+0xe4>)
 8001200:	f002 fada 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800120a:	f000 f95d 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM3_Init+0xe4>)
 8001210:	f000 fa1a 	bl	8001648 <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000254 	.word	0x20000254
 8001220:	40000400 	.word	0x40000400

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART1_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800125c:	f002 ff30 	bl	80040c0 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f92f 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200002d8 	.word	0x200002d8
 8001274:	40013800 	.word	0x40013800

08001278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_DMA_Init+0x38>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <MX_DMA_Init+0x38>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_DMA_Init+0x38>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	200b      	movs	r0, #11
 800129c:	f001 f88f 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012a0:	200b      	movs	r0, #11
 80012a2:	f001 f8a8 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <updateEncoder>:
void updateEncoder(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0

//    MSB = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
//    LSB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
    encoded = (MSB << 1) | LSB;
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <updateEncoder+0x98>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	005a      	lsls	r2, r3, #1
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <updateEncoder+0x9c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <updateEncoder+0xa0>)
 80012c8:	6013      	str	r3, [r2, #0]
    int sum = (lastEncoded << 2) | encoded;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <updateEncoder+0xa4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	009a      	lsls	r2, r3, #2
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <updateEncoder+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	607b      	str	r3, [r7, #4]

    if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b0d      	cmp	r3, #13
 80012dc:	d008      	beq.n	80012f0 <updateEncoder+0x3c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d005      	beq.n	80012f0 <updateEncoder+0x3c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d002      	beq.n	80012f0 <updateEncoder+0x3c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0b      	cmp	r3, #11
 80012ee:	d107      	bne.n	8001300 <updateEncoder+0x4c>
    {
        encoderValue++;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <updateEncoder+0xa8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <updateEncoder+0xa8>)
 80012f8:	6013      	str	r3, [r2, #0]
        Current_Dir = "CCW";
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <updateEncoder+0xac>)
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <updateEncoder+0xb0>)
 80012fe:	601a      	str	r2, [r3, #0]
    }
   if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b0e      	cmp	r3, #14
 8001304:	d008      	beq.n	8001318 <updateEncoder+0x64>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b07      	cmp	r3, #7
 800130a:	d005      	beq.n	8001318 <updateEncoder+0x64>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d002      	beq.n	8001318 <updateEncoder+0x64>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d107      	bne.n	8001328 <updateEncoder+0x74>
    {
        encoderValue--;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <updateEncoder+0xa8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <updateEncoder+0xa8>)
 8001320:	6013      	str	r3, [r2, #0]
        Current_Dir = "CW";
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <updateEncoder+0xac>)
 8001324:	4a10      	ldr	r2, [pc, #64]	; (8001368 <updateEncoder+0xb4>)
 8001326:	601a      	str	r2, [r3, #0]
    }

    lastEncoded = encoded;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <updateEncoder+0xa0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <updateEncoder+0xa4>)
 800132e:	6013      	str	r3, [r2, #0]
    EncoderRatio_encoder = encoderValue / EncoderRatio;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <updateEncoder+0xa8>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <updateEncoder+0xb8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fb92 f3f3 	sdiv	r3, r2, r3
 800133c:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <updateEncoder+0xbc>)
 800133e:	6013      	str	r3, [r2, #0]

}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000031c 	.word	0x2000031c
 8001350:	200002a0 	.word	0x200002a0
 8001354:	20000370 	.word	0x20000370
 8001358:	20000204 	.word	0x20000204
 800135c:	20000208 	.word	0x20000208
 8001360:	20000000 	.word	0x20000000
 8001364:	08008cf4 	.word	0x08008cf4
 8001368:	08008cf8 	.word	0x08008cf8
 800136c:	20000004 	.word	0x20000004
 8001370:	2000020c 	.word	0x2000020c

08001374 <EXTI2_IRQHandler>:
  */



void EXTI2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	 MSB = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001378:	2104      	movs	r1, #4
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <EXTI2_IRQHandler+0x34>)
 800137c:	f001 fbc8 	bl	8002b10 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <EXTI2_IRQHandler+0x38>)
 8001386:	601a      	str	r2, [r3, #0]
	   LSB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <EXTI2_IRQHandler+0x3c>)
 800138e:	f001 fbbf 	bl	8002b10 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <EXTI2_IRQHandler+0x40>)
 8001398:	601a      	str	r2, [r3, #0]
	updateEncoder();
 800139a:	f7ff ff8b 	bl	80012b4 <updateEncoder>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800139e:	2004      	movs	r0, #4
 80013a0:	f001 fbce 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010800 	.word	0x40010800
 80013ac:	2000031c 	.word	0x2000031c
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	200002a0 	.word	0x200002a0

080013b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	 MSB = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80013bc:	2104      	movs	r1, #4
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <EXTI15_10_IRQHandler+0x38>)
 80013c0:	f001 fba6 	bl	8002b10 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <EXTI15_10_IRQHandler+0x3c>)
 80013ca:	601a      	str	r2, [r3, #0]
	   LSB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <EXTI15_10_IRQHandler+0x40>)
 80013d2:	f001 fb9d 	bl	8002b10 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <EXTI15_10_IRQHandler+0x44>)
 80013dc:	601a      	str	r2, [r3, #0]
    updateEncoder();
 80013de:	f7ff ff69 	bl	80012b4 <updateEncoder>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013e6:	f001 fbab 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40010800 	.word	0x40010800
 80013f4:	2000031c 	.word	0x2000031c
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	200002a0 	.word	0x200002a0

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_GPIO_Init+0xb8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <MX_GPIO_Init+0xb8>)
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_GPIO_Init+0xb8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_GPIO_Init+0xb8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <MX_GPIO_Init+0xb8>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_GPIO_Init+0xb8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_GPIO_Init+0xb8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <MX_GPIO_Init+0xb8>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_GPIO_Init+0xb8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145c:	2304      	movs	r3, #4
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_GPIO_Init+0xbc>)
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_GPIO_Init+0xc0>)
 8001470:	f001 f9ca 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_GPIO_Init+0xbc>)
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_GPIO_Init+0xc4>)
 800148a:	f001 f9bd 	bl	8002808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2008      	movs	r0, #8
 8001494:	f000 ff93 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001498:	2008      	movs	r0, #8
 800149a:	f000 ffac 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2028      	movs	r0, #40	; 0x28
 80014a4:	f000 ff8b 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a8:	2028      	movs	r0, #40	; 0x28
 80014aa:	f000 ffa4 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_MspInit+0x5c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_MspInit+0x5c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x5c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_MspInit+0x60>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_MspInit+0x60>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000

08001538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d14a      	bne.n	80015ee <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001588:	2318      	movs	r3, #24
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	481a      	ldr	r0, [pc, #104]	; (8001600 <HAL_ADC_MspInit+0xc8>)
 8001598:	f001 f936 	bl	8002808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_ADC_MspInit+0xd0>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80015d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015d4:	f000 ff2a 	bl	800242c <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80015de:	f7ff ff73 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015e6:	621a      	str	r2, [r3, #32]
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_ADC_MspInit+0xcc>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40012400 	.word	0x40012400
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800
 8001604:	2000032c 	.word	0x2000032c
 8001608:	40020008 	.word	0x40020008

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_TIM_Base_MspInit+0x34>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10b      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x38>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_TIM_Base_MspInit+0x38>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_TIM_Base_MspInit+0x38>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40000400 	.word	0x40000400
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_TIM_MspPostInit+0x58>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d117      	bne.n	8001698 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_TIM_MspPostInit+0x5c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_MspPostInit+0x5c>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_TIM_MspPostInit+0x5c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001680:	2340      	movs	r3, #64	; 0x40
 8001682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_TIM_MspPostInit+0x60>)
 8001694:	f001 f8b8 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_UART_MspInit+0x8c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d131      	bne.n	8001730 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_UART_MspInit+0x90>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_UART_MspInit+0x90>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x90>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x90>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_UART_MspInit+0x90>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_UART_MspInit+0x90>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <HAL_UART_MspInit+0x94>)
 8001712:	f001 f879 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0x94>)
 800172c:	f001 f86c 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013800 	.word	0x40013800
 800173c:	40021000 	.word	0x40021000
 8001740:	40010800 	.word	0x40010800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f93f 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Channel1_IRQHandler+0x10>)
 800179a:	f000 ff01 	bl	80025a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000032c 	.word	0x2000032c

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <_kill>:

int _kill(int pid, int sig)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c0:	f002 fe36 	bl	8004430 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2216      	movs	r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
	return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_exit>:

void _exit (int status)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffe7 	bl	80017b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017e8:	e7fe      	b.n	80017e8 <_exit+0x12>

080017ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e00a      	b.n	8001812 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fc:	f3af 8000 	nop.w
 8001800:	4601      	mov	r1, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf0      	blt.n	80017fc <_read+0x12>
	}

return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e009      	b.n	800184a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbf1      	blt.n	8001836 <_write+0x12>
	}
	return len;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_close>:

int _close(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	605a      	str	r2, [r3, #4]
	return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <_isatty>:

int _isatty(int file)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f002 fda0 	bl	8004430 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20005000 	.word	0x20005000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000248 	.word	0x20000248
 8001924:	20000388 	.word	0x20000388

08001928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195a:	f7ff ffe5 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f002 fd6d 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff fa63 	bl	8000e2c <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001970:	080091e4 	.word	0x080091e4
  ldr r2, =_sbss
 8001974:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001978:	20000388 	.word	0x20000388

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 fd09 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fd9a 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd21 	bl	8002412 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 fce9 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000010 	.word	0x20000010
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	20000374 	.word	0x20000374

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000374 	.word	0x20000374

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffe0 	bl	8001a30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000010 	.word	0x20000010

08001a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0be      	b.n	8001c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd34 	bl	8001538 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 faf5 	bl	80020c0 <ADC_ConversionStop_Disable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 8099 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8095 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7b1b      	ldrb	r3, [r3, #12]
 8001b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_Init+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_Init+0xa8>
 8001b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Init+0xaa>
 8001b34:	2300      	movs	r3, #0
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7d1b      	ldrb	r3, [r3, #20]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d119      	bne.n	8001b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	035a      	lsls	r2, r3, #13
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_ADC_Init+0x1a8>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_Init+0x126>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d104      	bne.n	8001bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051b      	lsls	r3, r3, #20
 8001bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_ADC_Init+0x1ac>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf6:	e018      	b.n	8001c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f023 0312 	bic.w	r3, r3, #18
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	ffe1f7fd 	.word	0xffe1f7fd
 8001c38:	ff1f0efe 	.word	0xff1f0efe

08001c3c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a64      	ldr	r2, [pc, #400]	; (8001de4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_Start_DMA+0x24>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_ADC_Start_DMA+0x1ac>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d106      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x32>
 8001c60:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 80b3 	bne.w	8001dd4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_Start_DMA+0x40>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0ae      	b.n	8001dda <HAL_ADC_Start_DMA+0x19e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f9c1 	bl	800200c <ADC_Enable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 809a 	bne.w	8001dca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a4e      	ldr	r2, [pc, #312]	; (8001de8 <HAL_ADC_Start_DMA+0x1ac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x84>
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d115      	bne.n	8001cec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d026      	beq.n	8001d28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cea:	e01d      	b.n	8001d28 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <HAL_ADC_Start_DMA+0x1a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_ADC_Start_DMA+0xd0>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a38      	ldr	r2, [pc, #224]	; (8001de8 <HAL_ADC_Start_DMA+0x1ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10d      	bne.n	8001d28 <HAL_ADC_Start_DMA+0xec>
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_ADC_Start_DMA+0x1a8>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f023 0206 	bic.w	r2, r3, #6
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <HAL_ADC_Start_DMA+0x1b0>)
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <HAL_ADC_Start_DMA+0x1b4>)
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_ADC_Start_DMA+0x1b8>)
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d80:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a18      	ldr	r0, [r3, #32]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	334c      	adds	r3, #76	; 0x4c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f000 fba5 	bl	80024e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001da0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001da4:	d108      	bne.n	8001db8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001db4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001db6:	e00f      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dc6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dc8:	e006      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001dd2:	e001      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40012400 	.word	0x40012400
 8001de8:	40012800 	.word	0x40012800
 8001dec:	08002143 	.word	0x08002143
 8001df0:	080021bf 	.word	0x080021bf
 8001df4:	080021db 	.word	0x080021db

08001df8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0dc      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x1da>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d81c      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b05      	subs	r3, #5
 8001e5e:	221f      	movs	r2, #31
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4019      	ands	r1, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b05      	subs	r3, #5
 8001e78:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
 8001e84:	e03c      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d81c      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b23      	subs	r3, #35	; 0x23
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b23      	subs	r3, #35	; 0x23
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec6:	e01b      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b41      	subs	r3, #65	; 0x41
 8001eda:	221f      	movs	r2, #31
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b41      	subs	r3, #65	; 0x41
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d91c      	bls.n	8001f42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	e019      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d003      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f82:	2b11      	cmp	r3, #17
 8001f84:	d132      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d125      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d126      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d11a      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9a      	lsrs	r2, r3, #18
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x1b2>
 8001fda:	e007      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40012400 	.word	0x40012400
 8002004:	20000008 	.word	0x20000008
 8002008:	431bde83 	.word	0x431bde83

0800200c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d040      	beq.n	80020ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <ADC_Enable+0xac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <ADC_Enable+0xb0>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002048:	e002      	b.n	8002050 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002056:	f7ff fceb 	bl	8001a30 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800205c:	e01f      	b.n	800209e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205e:	f7ff fce7 	bl	8001a30 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d918      	bls.n	800209e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d011      	beq.n	800209e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e007      	b.n	80020ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d1d8      	bne.n	800205e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d12e      	bne.n	8002138 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ea:	f7ff fca1 	bl	8001a30 <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f0:	e01b      	b.n	800212a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f2:	f7ff fc9d 	bl	8001a30 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d914      	bls.n	800212a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e007      	b.n	800213a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d0dc      	beq.n	80020f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002158:	2b00      	cmp	r3, #0
 800215a:	d127      	bne.n	80021ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002172:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002176:	d115      	bne.n	80021a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7fe ff43 	bl	8001030 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021aa:	e004      	b.n	80021b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fe13 	bl	8001df8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fe02 	bl	8001e0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4906      	ldr	r1, [pc, #24]	; (80022a8 <__NVIC_EnableIRQ+0x34>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff90 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff2d 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff42 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff90 	bl	8002300 <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5f 	bl	80022ac <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff35 	bl	8002274 <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e043      	b.n	80024ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_DMA_Init+0xa8>)
 800244a:	4413      	add	r3, r2
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_DMA_Init+0xac>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_DMA_Init+0xb0>)
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800247a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	bffdfff8 	.word	0xbffdfff8
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020000 	.word	0x40020000

080024e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Start_IT+0x20>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e04a      	b.n	8002596 <HAL_DMA_Start_IT+0xb6>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800250e:	2b01      	cmp	r3, #1
 8002510:	d13a      	bne.n	8002588 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f938 	bl	80027ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 020e 	orr.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0204 	bic.w	r2, r2, #4
 8002564:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 020a 	orr.w	r2, r2, #10
 8002574:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e005      	b.n	8002594 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2204      	movs	r2, #4
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d04f      	beq.n	8002668 <HAL_DMA_IRQHandler+0xc8>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d04a      	beq.n	8002668 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a66      	ldr	r2, [pc, #408]	; (8002790 <HAL_DMA_IRQHandler+0x1f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d029      	beq.n	800264e <HAL_DMA_IRQHandler+0xae>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_DMA_IRQHandler+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d022      	beq.n	800264a <HAL_DMA_IRQHandler+0xaa>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_DMA_IRQHandler+0x1f8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01a      	beq.n	8002644 <HAL_DMA_IRQHandler+0xa4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a62      	ldr	r2, [pc, #392]	; (800279c <HAL_DMA_IRQHandler+0x1fc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d012      	beq.n	800263e <HAL_DMA_IRQHandler+0x9e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <HAL_DMA_IRQHandler+0x200>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00a      	beq.n	8002638 <HAL_DMA_IRQHandler+0x98>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5f      	ldr	r2, [pc, #380]	; (80027a4 <HAL_DMA_IRQHandler+0x204>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d102      	bne.n	8002632 <HAL_DMA_IRQHandler+0x92>
 800262c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002630:	e00e      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 8002632:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002636:	e00b      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 8002638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800263c:	e008      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 800263e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002642:	e005      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	e002      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 800264a:	2340      	movs	r3, #64	; 0x40
 800264c:	e000      	b.n	8002650 <HAL_DMA_IRQHandler+0xb0>
 800264e:	2304      	movs	r3, #4
 8002650:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_DMA_IRQHandler+0x208>)
 8002652:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8094 	beq.w	8002786 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002666:	e08e      	b.n	8002786 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2202      	movs	r2, #2
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d056      	beq.n	8002726 <HAL_DMA_IRQHandler+0x186>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d051      	beq.n	8002726 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020a 	bic.w	r2, r2, #10
 800269e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a38      	ldr	r2, [pc, #224]	; (8002790 <HAL_DMA_IRQHandler+0x1f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d029      	beq.n	8002706 <HAL_DMA_IRQHandler+0x166>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <HAL_DMA_IRQHandler+0x1f4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_IRQHandler+0x162>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a35      	ldr	r2, [pc, #212]	; (8002798 <HAL_DMA_IRQHandler+0x1f8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x15c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_DMA_IRQHandler+0x1fc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x156>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a32      	ldr	r2, [pc, #200]	; (80027a0 <HAL_DMA_IRQHandler+0x200>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x150>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <HAL_DMA_IRQHandler+0x204>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <HAL_DMA_IRQHandler+0x14a>
 80026e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026e8:	e00e      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 80026ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ee:	e00b      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 80026f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f4:	e008      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 80026f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fa:	e005      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	e002      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 8002702:	2320      	movs	r3, #32
 8002704:	e000      	b.n	8002708 <HAL_DMA_IRQHandler+0x168>
 8002706:	2302      	movs	r3, #2
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <HAL_DMA_IRQHandler+0x208>)
 800270a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d034      	beq.n	8002786 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002724:	e02f      	b.n	8002786 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2208      	movs	r2, #8
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d028      	beq.n	8002788 <HAL_DMA_IRQHandler+0x1e8>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d023      	beq.n	8002788 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020e 	bic.w	r2, r2, #14
 800274e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
    }
  }
  return;
 8002786:	bf00      	nop
 8002788:	bf00      	nop
}
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40020008 	.word	0x40020008
 8002794:	4002001c 	.word	0x4002001c
 8002798:	40020030 	.word	0x40020030
 800279c:	40020044 	.word	0x40020044
 80027a0:	40020058 	.word	0x40020058
 80027a4:	4002006c 	.word	0x4002006c
 80027a8:	40020000 	.word	0x40020000

080027ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d108      	bne.n	80027ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ea:	e007      	b.n	80027fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b08b      	sub	sp, #44	; 0x2c
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281a:	e169      	b.n	8002af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800281c:	2201      	movs	r2, #1
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 8158 	bne.w	8002aea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a9a      	ldr	r2, [pc, #616]	; (8002aa8 <HAL_GPIO_Init+0x2a0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d05e      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
 8002844:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <HAL_GPIO_Init+0x2a0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d875      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 800284a:	4a98      	ldr	r2, [pc, #608]	; (8002aac <HAL_GPIO_Init+0x2a4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d058      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
 8002850:	4a96      	ldr	r2, [pc, #600]	; (8002aac <HAL_GPIO_Init+0x2a4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d86f      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 8002856:	4a96      	ldr	r2, [pc, #600]	; (8002ab0 <HAL_GPIO_Init+0x2a8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d052      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
 800285c:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_GPIO_Init+0x2a8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d869      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 8002862:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_GPIO_Init+0x2ac>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d04c      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
 8002868:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_GPIO_Init+0x2ac>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d863      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 800286e:	4a92      	ldr	r2, [pc, #584]	; (8002ab8 <HAL_GPIO_Init+0x2b0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d046      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
 8002874:	4a90      	ldr	r2, [pc, #576]	; (8002ab8 <HAL_GPIO_Init+0x2b0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d85d      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d82a      	bhi.n	80028d4 <HAL_GPIO_Init+0xcc>
 800287e:	2b12      	cmp	r3, #18
 8002880:	d859      	bhi.n	8002936 <HAL_GPIO_Init+0x12e>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_GPIO_Init+0x80>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002903 	.word	0x08002903
 800288c:	080028dd 	.word	0x080028dd
 8002890:	080028ef 	.word	0x080028ef
 8002894:	08002931 	.word	0x08002931
 8002898:	08002937 	.word	0x08002937
 800289c:	08002937 	.word	0x08002937
 80028a0:	08002937 	.word	0x08002937
 80028a4:	08002937 	.word	0x08002937
 80028a8:	08002937 	.word	0x08002937
 80028ac:	08002937 	.word	0x08002937
 80028b0:	08002937 	.word	0x08002937
 80028b4:	08002937 	.word	0x08002937
 80028b8:	08002937 	.word	0x08002937
 80028bc:	08002937 	.word	0x08002937
 80028c0:	08002937 	.word	0x08002937
 80028c4:	08002937 	.word	0x08002937
 80028c8:	08002937 	.word	0x08002937
 80028cc:	080028e5 	.word	0x080028e5
 80028d0:	080028f9 	.word	0x080028f9
 80028d4:	4a79      	ldr	r2, [pc, #484]	; (8002abc <HAL_GPIO_Init+0x2b4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028da:	e02c      	b.n	8002936 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	623b      	str	r3, [r7, #32]
          break;
 80028e2:	e029      	b.n	8002938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	623b      	str	r3, [r7, #32]
          break;
 80028ec:	e024      	b.n	8002938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	3308      	adds	r3, #8
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e01f      	b.n	8002938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	330c      	adds	r3, #12
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e01a      	b.n	8002938 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290a:	2304      	movs	r3, #4
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e013      	b.n	8002938 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002918:	2308      	movs	r3, #8
 800291a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	611a      	str	r2, [r3, #16]
          break;
 8002922:	e009      	b.n	8002938 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002924:	2308      	movs	r3, #8
 8002926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	615a      	str	r2, [r3, #20]
          break;
 800292e:	e003      	b.n	8002938 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e000      	b.n	8002938 <HAL_GPIO_Init+0x130>
          break;
 8002936:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2bff      	cmp	r3, #255	; 0xff
 800293c:	d801      	bhi.n	8002942 <HAL_GPIO_Init+0x13a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	e001      	b.n	8002946 <HAL_GPIO_Init+0x13e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2bff      	cmp	r3, #255	; 0xff
 800294c:	d802      	bhi.n	8002954 <HAL_GPIO_Init+0x14c>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	e002      	b.n	800295a <HAL_GPIO_Init+0x152>
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3b08      	subs	r3, #8
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	210f      	movs	r1, #15
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	6a39      	ldr	r1, [r7, #32]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	431a      	orrs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80b1 	beq.w	8002aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002988:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_GPIO_Init+0x2b8>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a4c      	ldr	r2, [pc, #304]	; (8002ac0 <HAL_GPIO_Init+0x2b8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x2b8>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a0:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_GPIO_Init+0x2bc>)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <HAL_GPIO_Init+0x2c0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_GPIO_Init+0x1ec>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <HAL_GPIO_Init+0x2c4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_Init+0x1e8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3e      	ldr	r2, [pc, #248]	; (8002ad0 <HAL_GPIO_Init+0x2c8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x1e4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3d      	ldr	r2, [pc, #244]	; (8002ad4 <HAL_GPIO_Init+0x2cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_Init+0x1e0>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029f4:	2300      	movs	r3, #0
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a06:	492f      	ldr	r1, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x2bc>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	492c      	ldr	r1, [pc, #176]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4928      	ldr	r1, [pc, #160]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4922      	ldr	r1, [pc, #136]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	491e      	ldr	r1, [pc, #120]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4918      	ldr	r1, [pc, #96]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4914      	ldr	r1, [pc, #80]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d021      	beq.n	8002adc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e021      	b.n	8002aea <HAL_GPIO_Init+0x2e2>
 8002aa6:	bf00      	nop
 8002aa8:	10320000 	.word	0x10320000
 8002aac:	10310000 	.word	0x10310000
 8002ab0:	10220000 	.word	0x10220000
 8002ab4:	10210000 	.word	0x10210000
 8002ab8:	10120000 	.word	0x10120000
 8002abc:	10110000 	.word	0x10110000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010800 	.word	0x40010800
 8002acc:	40010c00 	.word	0x40010c00
 8002ad0:	40011000 	.word	0x40011000
 8002ad4:	40011400 	.word	0x40011400
 8002ad8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4909      	ldr	r1, [pc, #36]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f47f ae8e 	bne.w	800281c <HAL_GPIO_Init+0x14>
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	372c      	adds	r7, #44	; 0x2c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40010400 	.word	0x40010400

08002b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e001      	b.n	8002b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f806 	bl	8002b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e26c      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e246      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x76>
 8002bec:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7f      	ldr	r2, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b78      	ldr	r3, [pc, #480]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xbc>
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fee6 	bl	8001a30 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fee2 	bl	8001a30 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1fa      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe4>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fed2 	bl	8001a30 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fece 	bl	8001a30 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1e6      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x10c>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1ba      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fe87 	bl	8001a30 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fe83 	bl	8001a30 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e19b      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4927      	ldr	r1, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fe66 	bl	8001a30 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe fe62 	bl	8001a30 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e17a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe fe46 	bl	8001a30 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe fe42 	bl	8001a30 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e15a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 fad8 	bl	800337c <RCC_Delay>
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fe2c 	bl	8001a30 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fe28 	bl	8001a30 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e140      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	42420000 	.word	0x42420000
 8002df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e9      	bne.n	8002ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fde9 	bl	8001a30 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe fde5 	bl	8001a30 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0fd      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a7a      	ldr	r2, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x356>
 8002ec0:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6c      	ldr	r2, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a63      	ldr	r2, [pc, #396]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fd99 	bl	8001a30 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe fd95 	bl	8001a30 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ab      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x37e>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fd83 	bl	8001a30 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe fd7f 	bl	8001a30 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e095      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8081 	beq.w	800306e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d061      	beq.n	800303c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d146      	bne.n	800300e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fd53 	bl	8001a30 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe fd4f 	bl	8001a30 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e067      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	492d      	ldr	r1, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a19      	ldr	r1, [r3, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	4927      	ldr	r1, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fd23 	bl	8001a30 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fd1f 	bl	8001a30 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e037      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
 800300c:	e02f      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fd0c 	bl	8001a30 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fd08 	bl	8001a30 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x498>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e013      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d0      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d040      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e073      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4936      	ldr	r1, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fc5c 	bl	8001a30 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fc58 	bl	8001a30 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e053      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fbba 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	08008d0c 	.word	0x08008d0c
 8003250:	20000008 	.word	0x20000008
 8003254:	2000000c 	.word	0x2000000c

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b490      	push	{r4, r7}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003260:	1d3c      	adds	r4, r7, #4
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003268:	f240 2301 	movw	r3, #513	; 0x201
 800326c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x40>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x46>
 8003296:	e02d      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329a:	623b      	str	r3, [r7, #32]
      break;
 800329c:	e02d      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c5b      	lsrs	r3, r3, #17
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d6:	fb02 f203 	mul.w	r2, r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e004      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	623b      	str	r3, [r7, #32]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f6:	623b      	str	r3, [r7, #32]
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	6a3b      	ldr	r3, [r7, #32]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3728      	adds	r7, #40	; 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc90      	pop	{r4, r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	08008cfc 	.word	0x08008cfc
 800330c:	40021000 	.word	0x40021000
 8003310:	007a1200 	.word	0x007a1200
 8003314:	003d0900 	.word	0x003d0900

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b02      	ldr	r3, [pc, #8]	; (8003328 <HAL_RCC_GetHCLKFreq+0x10>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000008 	.word	0x20000008

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff2 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08008d1c 	.word	0x08008d1c

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffde 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08008d1c 	.word	0x08008d1c

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000008 	.word	0x20000008
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d07d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340c:	4b43      	ldr	r3, [pc, #268]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a42      	ldr	r2, [pc, #264]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003416:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003418:	f7fe fb0a 	bl	8001a30 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	e008      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fb06 	bl	8001a30 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e06d      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02e      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d027      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003472:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe fad5 	bl	8001a30 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fad1 	bl	8001a30 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e036      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4917      	ldr	r1, [pc, #92]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	490b      	ldr	r1, [pc, #44]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4904      	ldr	r1, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420440 	.word	0x42420440

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f85e 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 faaa 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e041      	b.n	8003658 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f839 	bl	8003660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f000 fa5b 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x24>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e022      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e015      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e008      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e05e      	b.n	80037a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0x92>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fc48 	bl	8003fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_TIM_PWM_Start+0x138>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d107      	bne.n	8003746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_PWM_Start+0x138>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d009      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <HAL_TIM_PWM_Start+0x13c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_PWM_Start+0xfa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_TIM_PWM_Start+0x140>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d111      	bne.n	8003792 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d010      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	e007      	b.n	80037a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0ac      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x174>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	f200 809f 	bhi.w	8003920 <HAL_TIM_PWM_ConfigChannel+0x168>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003921 	.word	0x08003921
 80037f0:	08003921 	.word	0x08003921
 80037f4:	08003921 	.word	0x08003921
 80037f8:	0800385d 	.word	0x0800385d
 80037fc:	08003921 	.word	0x08003921
 8003800:	08003921 	.word	0x08003921
 8003804:	08003921 	.word	0x08003921
 8003808:	0800389f 	.word	0x0800389f
 800380c:	08003921 	.word	0x08003921
 8003810:	08003921 	.word	0x08003921
 8003814:	08003921 	.word	0x08003921
 8003818:	080038df 	.word	0x080038df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f9ac 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	619a      	str	r2, [r3, #24]
      break;
 800385a:	e062      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f9f2 	bl	8003c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      break;
 800389c:	e041      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa3b 	bl	8003d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0204 	bic.w	r2, r2, #4
 80038c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      break;
 80038dc:	e021      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fa85 	bl	8003df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	61da      	str	r2, [r3, #28]
      break;
 800391e:	e000      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_TIM_ConfigClockSource+0x18>
 8003948:	2302      	movs	r3, #2
 800394a:	e0b3      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x180>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800396a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003984:	d03e      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0xd0>
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	f200 8087 	bhi.w	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003992:	f000 8085 	beq.w	8003aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	d87f      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 800399c:	2b70      	cmp	r3, #112	; 0x70
 800399e:	d01a      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xa2>
 80039a0:	2b70      	cmp	r3, #112	; 0x70
 80039a2:	d87b      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039a4:	2b60      	cmp	r3, #96	; 0x60
 80039a6:	d050      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x116>
 80039a8:	2b60      	cmp	r3, #96	; 0x60
 80039aa:	d877      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039ac:	2b50      	cmp	r3, #80	; 0x50
 80039ae:	d03c      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xf6>
 80039b0:	2b50      	cmp	r3, #80	; 0x50
 80039b2:	d873      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d058      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x136>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d86f      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d064      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x156>
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d86b      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d060      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x156>
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d867      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05c      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x156>
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d05a      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039d4:	e062      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 faca 	bl	8003f7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	609a      	str	r2, [r3, #8]
      break;
 8003a02:	e04e      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f000 fab3 	bl	8003f7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a26:	609a      	str	r2, [r3, #8]
      break;
 8003a28:	e03b      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 fa2a 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2150      	movs	r1, #80	; 0x50
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa81 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a48:	e02b      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 fa48 	bl	8003eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2160      	movs	r1, #96	; 0x60
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fa71 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a68:	e01b      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 fa0a 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fa61 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a88:	e00b      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f000 fa58 	bl	8003f4a <TIM_ITRx_SetConfig>
        break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e000      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0302 	bic.w	r3, r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10c      	bne.n	8003bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0308 	bic.w	r3, r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00

08003c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d113      	bne.n	8003dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <TIM_OC4_SetConfig+0x98>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d109      	bne.n	8003e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 030a 	bic.w	r3, r3, #10
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f023 0210 	bic.w	r2, r3, #16
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	031b      	lsls	r3, r3, #12
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f043 0307 	orr.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	e046      	b.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d009      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10c      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4313      	orrs	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800

080040c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e03f      	b.n	8004152 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd fae0 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f905 	bl	8004314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af02      	add	r7, sp, #8
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d17c      	bne.n	8004274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_UART_Transmit+0x2c>
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e075      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UART_Transmit+0x3e>
 8004194:	2302      	movs	r3, #2
 8004196:	e06e      	b.n	8004276 <HAL_UART_Transmit+0x11c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ae:	f7fd fc3f 	bl	8001a30 <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x82>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041ec:	e02a      	b.n	8004244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f840 	bl	800427e <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e036      	b.n	8004276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cf      	bne.n	80041ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f810 	bl	800427e <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	e02c      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d028      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0x30>
 800429e:	f7fd fbc7 	bl	8001a30 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d21d      	bcs.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e00f      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d0c3      	beq.n	8004290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800434e:	f023 030c 	bic.w	r3, r3, #12
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	430b      	orrs	r3, r1
 800435a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <UART_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe ffea 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	e002      	b.n	800438a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe ffd2 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <UART_SetConfig+0x118>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	0119      	lsls	r1, r3, #4
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <UART_SetConfig+0x118>)
 80043c2:	fba3 0302 	umull	r0, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2064      	movs	r0, #100	; 0x64
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <UART_SetConfig+0x118>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	4419      	add	r1, r3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <UART_SetConfig+0x118>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a07      	ldr	r2, [pc, #28]	; (800442c <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	440a      	add	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40013800 	.word	0x40013800
 800442c:	51eb851f 	.word	0x51eb851f

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000014 	.word	0x20000014

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	2600      	movs	r6, #0
 8004440:	4d0c      	ldr	r5, [pc, #48]	; (8004474 <__libc_init_array+0x38>)
 8004442:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004444:	1b64      	subs	r4, r4, r5
 8004446:	10a4      	asrs	r4, r4, #2
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	f004 fc2a 	bl	8008ca4 <_init>
 8004450:	2600      	movs	r6, #0
 8004452:	4d0a      	ldr	r5, [pc, #40]	; (800447c <__libc_init_array+0x40>)
 8004454:	4c0a      	ldr	r4, [pc, #40]	; (8004480 <__libc_init_array+0x44>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f855 3b04 	ldr.w	r3, [r5], #4
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f855 3b04 	ldr.w	r3, [r5], #4
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	080091dc 	.word	0x080091dc
 8004478:	080091dc 	.word	0x080091dc
 800447c:	080091dc 	.word	0x080091dc
 8004480:	080091e0 	.word	0x080091e0

08004484 <memset>:
 8004484:	4603      	mov	r3, r0
 8004486:	4402      	add	r2, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <__cvt>:
 8004494:	2b00      	cmp	r3, #0
 8004496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449a:	461f      	mov	r7, r3
 800449c:	bfbb      	ittet	lt
 800449e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044a2:	461f      	movlt	r7, r3
 80044a4:	2300      	movge	r3, #0
 80044a6:	232d      	movlt	r3, #45	; 0x2d
 80044a8:	b088      	sub	sp, #32
 80044aa:	4614      	mov	r4, r2
 80044ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044b0:	7013      	strb	r3, [r2, #0]
 80044b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044b8:	f023 0820 	bic.w	r8, r3, #32
 80044bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044c0:	d005      	beq.n	80044ce <__cvt+0x3a>
 80044c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044c6:	d100      	bne.n	80044ca <__cvt+0x36>
 80044c8:	3501      	adds	r5, #1
 80044ca:	2302      	movs	r3, #2
 80044cc:	e000      	b.n	80044d0 <__cvt+0x3c>
 80044ce:	2303      	movs	r3, #3
 80044d0:	aa07      	add	r2, sp, #28
 80044d2:	9204      	str	r2, [sp, #16]
 80044d4:	aa06      	add	r2, sp, #24
 80044d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044da:	e9cd 3500 	strd	r3, r5, [sp]
 80044de:	4622      	mov	r2, r4
 80044e0:	463b      	mov	r3, r7
 80044e2:	f001 fda1 	bl	8006028 <_dtoa_r>
 80044e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044ea:	4606      	mov	r6, r0
 80044ec:	d102      	bne.n	80044f4 <__cvt+0x60>
 80044ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d522      	bpl.n	800453a <__cvt+0xa6>
 80044f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044f8:	eb06 0905 	add.w	r9, r6, r5
 80044fc:	d110      	bne.n	8004520 <__cvt+0x8c>
 80044fe:	7833      	ldrb	r3, [r6, #0]
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d10a      	bne.n	800451a <__cvt+0x86>
 8004504:	2200      	movs	r2, #0
 8004506:	2300      	movs	r3, #0
 8004508:	4620      	mov	r0, r4
 800450a:	4639      	mov	r1, r7
 800450c:	f7fc fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 8004510:	b918      	cbnz	r0, 800451a <__cvt+0x86>
 8004512:	f1c5 0501 	rsb	r5, r5, #1
 8004516:	f8ca 5000 	str.w	r5, [sl]
 800451a:	f8da 3000 	ldr.w	r3, [sl]
 800451e:	4499      	add	r9, r3
 8004520:	2200      	movs	r2, #0
 8004522:	2300      	movs	r3, #0
 8004524:	4620      	mov	r0, r4
 8004526:	4639      	mov	r1, r7
 8004528:	f7fc fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800452c:	b108      	cbz	r0, 8004532 <__cvt+0x9e>
 800452e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004532:	2230      	movs	r2, #48	; 0x30
 8004534:	9b07      	ldr	r3, [sp, #28]
 8004536:	454b      	cmp	r3, r9
 8004538:	d307      	bcc.n	800454a <__cvt+0xb6>
 800453a:	4630      	mov	r0, r6
 800453c:	9b07      	ldr	r3, [sp, #28]
 800453e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004540:	1b9b      	subs	r3, r3, r6
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	b008      	add	sp, #32
 8004546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	9107      	str	r1, [sp, #28]
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e7f0      	b.n	8004534 <__cvt+0xa0>

08004552 <__exponent>:
 8004552:	4603      	mov	r3, r0
 8004554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004556:	2900      	cmp	r1, #0
 8004558:	f803 2b02 	strb.w	r2, [r3], #2
 800455c:	bfb6      	itet	lt
 800455e:	222d      	movlt	r2, #45	; 0x2d
 8004560:	222b      	movge	r2, #43	; 0x2b
 8004562:	4249      	neglt	r1, r1
 8004564:	2909      	cmp	r1, #9
 8004566:	7042      	strb	r2, [r0, #1]
 8004568:	dd2b      	ble.n	80045c2 <__exponent+0x70>
 800456a:	f10d 0407 	add.w	r4, sp, #7
 800456e:	46a4      	mov	ip, r4
 8004570:	270a      	movs	r7, #10
 8004572:	fb91 f6f7 	sdiv	r6, r1, r7
 8004576:	460a      	mov	r2, r1
 8004578:	46a6      	mov	lr, r4
 800457a:	fb07 1516 	mls	r5, r7, r6, r1
 800457e:	2a63      	cmp	r2, #99	; 0x63
 8004580:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004584:	4631      	mov	r1, r6
 8004586:	f104 34ff 	add.w	r4, r4, #4294967295
 800458a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800458e:	dcf0      	bgt.n	8004572 <__exponent+0x20>
 8004590:	3130      	adds	r1, #48	; 0x30
 8004592:	f1ae 0502 	sub.w	r5, lr, #2
 8004596:	f804 1c01 	strb.w	r1, [r4, #-1]
 800459a:	4629      	mov	r1, r5
 800459c:	1c44      	adds	r4, r0, #1
 800459e:	4561      	cmp	r1, ip
 80045a0:	d30a      	bcc.n	80045b8 <__exponent+0x66>
 80045a2:	f10d 0209 	add.w	r2, sp, #9
 80045a6:	eba2 020e 	sub.w	r2, r2, lr
 80045aa:	4565      	cmp	r5, ip
 80045ac:	bf88      	it	hi
 80045ae:	2200      	movhi	r2, #0
 80045b0:	4413      	add	r3, r2
 80045b2:	1a18      	subs	r0, r3, r0
 80045b4:	b003      	add	sp, #12
 80045b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045c0:	e7ed      	b.n	800459e <__exponent+0x4c>
 80045c2:	2330      	movs	r3, #48	; 0x30
 80045c4:	3130      	adds	r1, #48	; 0x30
 80045c6:	7083      	strb	r3, [r0, #2]
 80045c8:	70c1      	strb	r1, [r0, #3]
 80045ca:	1d03      	adds	r3, r0, #4
 80045cc:	e7f1      	b.n	80045b2 <__exponent+0x60>
	...

080045d0 <_printf_float>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	b091      	sub	sp, #68	; 0x44
 80045d6:	460c      	mov	r4, r1
 80045d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80045dc:	4616      	mov	r6, r2
 80045de:	461f      	mov	r7, r3
 80045e0:	4605      	mov	r5, r0
 80045e2:	f002 fe75 	bl	80072d0 <_localeconv_r>
 80045e6:	6803      	ldr	r3, [r0, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	9309      	str	r3, [sp, #36]	; 0x24
 80045ec:	f7fb fdb0 	bl	8000150 <strlen>
 80045f0:	2300      	movs	r3, #0
 80045f2:	930e      	str	r3, [sp, #56]	; 0x38
 80045f4:	f8d8 3000 	ldr.w	r3, [r8]
 80045f8:	900a      	str	r0, [sp, #40]	; 0x28
 80045fa:	3307      	adds	r3, #7
 80045fc:	f023 0307 	bic.w	r3, r3, #7
 8004600:	f103 0208 	add.w	r2, r3, #8
 8004604:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004608:	f8d4 b000 	ldr.w	fp, [r4]
 800460c:	f8c8 2000 	str.w	r2, [r8]
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004618:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800461c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004620:	930b      	str	r3, [sp, #44]	; 0x2c
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	4640      	mov	r0, r8
 8004628:	4b9c      	ldr	r3, [pc, #624]	; (800489c <_printf_float+0x2cc>)
 800462a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800462c:	f7fc f9ee 	bl	8000a0c <__aeabi_dcmpun>
 8004630:	bb70      	cbnz	r0, 8004690 <_printf_float+0xc0>
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	4640      	mov	r0, r8
 8004638:	4b98      	ldr	r3, [pc, #608]	; (800489c <_printf_float+0x2cc>)
 800463a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800463c:	f7fc f9c8 	bl	80009d0 <__aeabi_dcmple>
 8004640:	bb30      	cbnz	r0, 8004690 <_printf_float+0xc0>
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	4640      	mov	r0, r8
 8004648:	4651      	mov	r1, sl
 800464a:	f7fc f9b7 	bl	80009bc <__aeabi_dcmplt>
 800464e:	b110      	cbz	r0, 8004656 <_printf_float+0x86>
 8004650:	232d      	movs	r3, #45	; 0x2d
 8004652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004656:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <_printf_float+0x2d0>)
 8004658:	4892      	ldr	r0, [pc, #584]	; (80048a4 <_printf_float+0x2d4>)
 800465a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800465e:	bf94      	ite	ls
 8004660:	4698      	movls	r8, r3
 8004662:	4680      	movhi	r8, r0
 8004664:	2303      	movs	r3, #3
 8004666:	f04f 0a00 	mov.w	sl, #0
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	f02b 0304 	bic.w	r3, fp, #4
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	4633      	mov	r3, r6
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	9700      	str	r7, [sp, #0]
 800467a:	aa0f      	add	r2, sp, #60	; 0x3c
 800467c:	f000 f9d4 	bl	8004a28 <_printf_common>
 8004680:	3001      	adds	r0, #1
 8004682:	f040 8090 	bne.w	80047a6 <_printf_float+0x1d6>
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	b011      	add	sp, #68	; 0x44
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004690:	4642      	mov	r2, r8
 8004692:	4653      	mov	r3, sl
 8004694:	4640      	mov	r0, r8
 8004696:	4651      	mov	r1, sl
 8004698:	f7fc f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800469c:	b148      	cbz	r0, 80046b2 <_printf_float+0xe2>
 800469e:	f1ba 0f00 	cmp.w	sl, #0
 80046a2:	bfb8      	it	lt
 80046a4:	232d      	movlt	r3, #45	; 0x2d
 80046a6:	4880      	ldr	r0, [pc, #512]	; (80048a8 <_printf_float+0x2d8>)
 80046a8:	bfb8      	it	lt
 80046aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046ae:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <_printf_float+0x2dc>)
 80046b0:	e7d3      	b.n	800465a <_printf_float+0x8a>
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	d142      	bne.n	8004742 <_printf_float+0x172>
 80046bc:	2306      	movs	r3, #6
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	9206      	str	r2, [sp, #24]
 80046c4:	aa0e      	add	r2, sp, #56	; 0x38
 80046c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80046ca:	aa0d      	add	r2, sp, #52	; 0x34
 80046cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80046d0:	9203      	str	r2, [sp, #12]
 80046d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80046d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	4642      	mov	r2, r8
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	4628      	mov	r0, r5
 80046e4:	4653      	mov	r3, sl
 80046e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80046e8:	f7ff fed4 	bl	8004494 <__cvt>
 80046ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ee:	4680      	mov	r8, r0
 80046f0:	2947      	cmp	r1, #71	; 0x47
 80046f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046f4:	d108      	bne.n	8004708 <_printf_float+0x138>
 80046f6:	1cc8      	adds	r0, r1, #3
 80046f8:	db02      	blt.n	8004700 <_printf_float+0x130>
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	4299      	cmp	r1, r3
 80046fe:	dd40      	ble.n	8004782 <_printf_float+0x1b2>
 8004700:	f1a9 0902 	sub.w	r9, r9, #2
 8004704:	fa5f f989 	uxtb.w	r9, r9
 8004708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800470c:	d81f      	bhi.n	800474e <_printf_float+0x17e>
 800470e:	464a      	mov	r2, r9
 8004710:	3901      	subs	r1, #1
 8004712:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004716:	910d      	str	r1, [sp, #52]	; 0x34
 8004718:	f7ff ff1b 	bl	8004552 <__exponent>
 800471c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800471e:	4682      	mov	sl, r0
 8004720:	1813      	adds	r3, r2, r0
 8004722:	2a01      	cmp	r2, #1
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	dc02      	bgt.n	800472e <_printf_float+0x15e>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	07d2      	lsls	r2, r2, #31
 800472c:	d501      	bpl.n	8004732 <_printf_float+0x162>
 800472e:	3301      	adds	r3, #1
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004736:	2b00      	cmp	r3, #0
 8004738:	d09b      	beq.n	8004672 <_printf_float+0xa2>
 800473a:	232d      	movs	r3, #45	; 0x2d
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	e797      	b.n	8004672 <_printf_float+0xa2>
 8004742:	2947      	cmp	r1, #71	; 0x47
 8004744:	d1bc      	bne.n	80046c0 <_printf_float+0xf0>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ba      	bne.n	80046c0 <_printf_float+0xf0>
 800474a:	2301      	movs	r3, #1
 800474c:	e7b7      	b.n	80046be <_printf_float+0xee>
 800474e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004752:	d118      	bne.n	8004786 <_printf_float+0x1b6>
 8004754:	2900      	cmp	r1, #0
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	dd0b      	ble.n	8004772 <_printf_float+0x1a2>
 800475a:	6121      	str	r1, [r4, #16]
 800475c:	b913      	cbnz	r3, 8004764 <_printf_float+0x194>
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	07d0      	lsls	r0, r2, #31
 8004762:	d502      	bpl.n	800476a <_printf_float+0x19a>
 8004764:	3301      	adds	r3, #1
 8004766:	440b      	add	r3, r1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	f04f 0a00 	mov.w	sl, #0
 800476e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004770:	e7df      	b.n	8004732 <_printf_float+0x162>
 8004772:	b913      	cbnz	r3, 800477a <_printf_float+0x1aa>
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	07d2      	lsls	r2, r2, #31
 8004778:	d501      	bpl.n	800477e <_printf_float+0x1ae>
 800477a:	3302      	adds	r3, #2
 800477c:	e7f4      	b.n	8004768 <_printf_float+0x198>
 800477e:	2301      	movs	r3, #1
 8004780:	e7f2      	b.n	8004768 <_printf_float+0x198>
 8004782:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	4299      	cmp	r1, r3
 800478a:	db05      	blt.n	8004798 <_printf_float+0x1c8>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	6121      	str	r1, [r4, #16]
 8004790:	07d8      	lsls	r0, r3, #31
 8004792:	d5ea      	bpl.n	800476a <_printf_float+0x19a>
 8004794:	1c4b      	adds	r3, r1, #1
 8004796:	e7e7      	b.n	8004768 <_printf_float+0x198>
 8004798:	2900      	cmp	r1, #0
 800479a:	bfcc      	ite	gt
 800479c:	2201      	movgt	r2, #1
 800479e:	f1c1 0202 	rsble	r2, r1, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	e7e0      	b.n	8004768 <_printf_float+0x198>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	055a      	lsls	r2, r3, #21
 80047aa:	d407      	bmi.n	80047bc <_printf_float+0x1ec>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	4642      	mov	r2, r8
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	d12b      	bne.n	8004812 <_printf_float+0x242>
 80047ba:	e764      	b.n	8004686 <_printf_float+0xb6>
 80047bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047c0:	f240 80dd 	bls.w	800497e <_printf_float+0x3ae>
 80047c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c8:	2200      	movs	r2, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	f7fc f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d033      	beq.n	800483c <_printf_float+0x26c>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	4a35      	ldr	r2, [pc, #212]	; (80048b0 <_printf_float+0x2e0>)
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af51 	beq.w	8004686 <_printf_float+0xb6>
 80047e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047e8:	429a      	cmp	r2, r3
 80047ea:	db02      	blt.n	80047f2 <_printf_float+0x222>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	07d8      	lsls	r0, r3, #31
 80047f0:	d50f      	bpl.n	8004812 <_printf_float+0x242>
 80047f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	f43f af42 	beq.w	8004686 <_printf_float+0xb6>
 8004802:	f04f 0800 	mov.w	r8, #0
 8004806:	f104 091a 	add.w	r9, r4, #26
 800480a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800480c:	3b01      	subs	r3, #1
 800480e:	4543      	cmp	r3, r8
 8004810:	dc09      	bgt.n	8004826 <_printf_float+0x256>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	079b      	lsls	r3, r3, #30
 8004816:	f100 8102 	bmi.w	8004a1e <_printf_float+0x44e>
 800481a:	68e0      	ldr	r0, [r4, #12]
 800481c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800481e:	4298      	cmp	r0, r3
 8004820:	bfb8      	it	lt
 8004822:	4618      	movlt	r0, r3
 8004824:	e731      	b.n	800468a <_printf_float+0xba>
 8004826:	2301      	movs	r3, #1
 8004828:	464a      	mov	r2, r9
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f af28 	beq.w	8004686 <_printf_float+0xb6>
 8004836:	f108 0801 	add.w	r8, r8, #1
 800483a:	e7e6      	b.n	800480a <_printf_float+0x23a>
 800483c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	dc38      	bgt.n	80048b4 <_printf_float+0x2e4>
 8004842:	2301      	movs	r3, #1
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <_printf_float+0x2e0>)
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f af1a 	beq.w	8004686 <_printf_float+0xb6>
 8004852:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004856:	4313      	orrs	r3, r2
 8004858:	d102      	bne.n	8004860 <_printf_float+0x290>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	07d9      	lsls	r1, r3, #31
 800485e:	d5d8      	bpl.n	8004812 <_printf_float+0x242>
 8004860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004864:	4631      	mov	r1, r6
 8004866:	4628      	mov	r0, r5
 8004868:	47b8      	blx	r7
 800486a:	3001      	adds	r0, #1
 800486c:	f43f af0b 	beq.w	8004686 <_printf_float+0xb6>
 8004870:	f04f 0900 	mov.w	r9, #0
 8004874:	f104 0a1a 	add.w	sl, r4, #26
 8004878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800487a:	425b      	negs	r3, r3
 800487c:	454b      	cmp	r3, r9
 800487e:	dc01      	bgt.n	8004884 <_printf_float+0x2b4>
 8004880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004882:	e794      	b.n	80047ae <_printf_float+0x1de>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	f43f aef9 	beq.w	8004686 <_printf_float+0xb6>
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	e7ee      	b.n	8004878 <_printf_float+0x2a8>
 800489a:	bf00      	nop
 800489c:	7fefffff 	.word	0x7fefffff
 80048a0:	08008d28 	.word	0x08008d28
 80048a4:	08008d2c 	.word	0x08008d2c
 80048a8:	08008d34 	.word	0x08008d34
 80048ac:	08008d30 	.word	0x08008d30
 80048b0:	08008d38 	.word	0x08008d38
 80048b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bfa8      	it	ge
 80048bc:	461a      	movge	r2, r3
 80048be:	2a00      	cmp	r2, #0
 80048c0:	4691      	mov	r9, r2
 80048c2:	dc37      	bgt.n	8004934 <_printf_float+0x364>
 80048c4:	f04f 0b00 	mov.w	fp, #0
 80048c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048cc:	f104 021a 	add.w	r2, r4, #26
 80048d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80048d4:	ebaa 0309 	sub.w	r3, sl, r9
 80048d8:	455b      	cmp	r3, fp
 80048da:	dc33      	bgt.n	8004944 <_printf_float+0x374>
 80048dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048e0:	429a      	cmp	r2, r3
 80048e2:	db3b      	blt.n	800495c <_printf_float+0x38c>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d438      	bmi.n	800495c <_printf_float+0x38c>
 80048ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048ee:	eba2 030a 	sub.w	r3, r2, sl
 80048f2:	eba2 0901 	sub.w	r9, r2, r1
 80048f6:	4599      	cmp	r9, r3
 80048f8:	bfa8      	it	ge
 80048fa:	4699      	movge	r9, r3
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
 8004900:	dc34      	bgt.n	800496c <_printf_float+0x39c>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490a:	f104 0a1a 	add.w	sl, r4, #26
 800490e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	eba3 0309 	sub.w	r3, r3, r9
 8004918:	4543      	cmp	r3, r8
 800491a:	f77f af7a 	ble.w	8004812 <_printf_float+0x242>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f aeac 	beq.w	8004686 <_printf_float+0xb6>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	e7ec      	b.n	800490e <_printf_float+0x33e>
 8004934:	4613      	mov	r3, r2
 8004936:	4631      	mov	r1, r6
 8004938:	4642      	mov	r2, r8
 800493a:	4628      	mov	r0, r5
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d1c0      	bne.n	80048c4 <_printf_float+0x2f4>
 8004942:	e6a0      	b.n	8004686 <_printf_float+0xb6>
 8004944:	2301      	movs	r3, #1
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	920b      	str	r2, [sp, #44]	; 0x2c
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f ae99 	beq.w	8004686 <_printf_float+0xb6>
 8004954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004956:	f10b 0b01 	add.w	fp, fp, #1
 800495a:	e7b9      	b.n	80048d0 <_printf_float+0x300>
 800495c:	4631      	mov	r1, r6
 800495e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	d1bf      	bne.n	80048ea <_printf_float+0x31a>
 800496a:	e68c      	b.n	8004686 <_printf_float+0xb6>
 800496c:	464b      	mov	r3, r9
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	eb08 020a 	add.w	r2, r8, sl
 8004976:	47b8      	blx	r7
 8004978:	3001      	adds	r0, #1
 800497a:	d1c2      	bne.n	8004902 <_printf_float+0x332>
 800497c:	e683      	b.n	8004686 <_printf_float+0xb6>
 800497e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004980:	2a01      	cmp	r2, #1
 8004982:	dc01      	bgt.n	8004988 <_printf_float+0x3b8>
 8004984:	07db      	lsls	r3, r3, #31
 8004986:	d537      	bpl.n	80049f8 <_printf_float+0x428>
 8004988:	2301      	movs	r3, #1
 800498a:	4642      	mov	r2, r8
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f ae77 	beq.w	8004686 <_printf_float+0xb6>
 8004998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f ae6f 	beq.w	8004686 <_printf_float+0xb6>
 80049a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	f7fb fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80049b4:	b9d8      	cbnz	r0, 80049ee <_printf_float+0x41e>
 80049b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b8:	f108 0201 	add.w	r2, r8, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	d10e      	bne.n	80049e6 <_printf_float+0x416>
 80049c8:	e65d      	b.n	8004686 <_printf_float+0xb6>
 80049ca:	2301      	movs	r3, #1
 80049cc:	464a      	mov	r2, r9
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f ae56 	beq.w	8004686 <_printf_float+0xb6>
 80049da:	f108 0801 	add.w	r8, r8, #1
 80049de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4543      	cmp	r3, r8
 80049e4:	dcf1      	bgt.n	80049ca <_printf_float+0x3fa>
 80049e6:	4653      	mov	r3, sl
 80049e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049ec:	e6e0      	b.n	80047b0 <_printf_float+0x1e0>
 80049ee:	f04f 0800 	mov.w	r8, #0
 80049f2:	f104 091a 	add.w	r9, r4, #26
 80049f6:	e7f2      	b.n	80049de <_printf_float+0x40e>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4642      	mov	r2, r8
 80049fc:	e7df      	b.n	80049be <_printf_float+0x3ee>
 80049fe:	2301      	movs	r3, #1
 8004a00:	464a      	mov	r2, r9
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f ae3c 	beq.w	8004686 <_printf_float+0xb6>
 8004a0e:	f108 0801 	add.w	r8, r8, #1
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	dcf0      	bgt.n	80049fe <_printf_float+0x42e>
 8004a1c:	e6fd      	b.n	800481a <_printf_float+0x24a>
 8004a1e:	f04f 0800 	mov.w	r8, #0
 8004a22:	f104 0919 	add.w	r9, r4, #25
 8004a26:	e7f4      	b.n	8004a12 <_printf_float+0x442>

08004a28 <_printf_common>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	4699      	mov	r9, r3
 8004a30:	688a      	ldr	r2, [r1, #8]
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	4607      	mov	r7, r0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bfb8      	it	lt
 8004a3a:	4613      	movlt	r3, r2
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a42:	460c      	mov	r4, r1
 8004a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a48:	b10a      	cbz	r2, 8004a4e <_printf_common+0x26>
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	0699      	lsls	r1, r3, #26
 8004a52:	bf42      	ittt	mi
 8004a54:	6833      	ldrmi	r3, [r6, #0]
 8004a56:	3302      	addmi	r3, #2
 8004a58:	6033      	strmi	r3, [r6, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	f015 0506 	ands.w	r5, r5, #6
 8004a60:	d106      	bne.n	8004a70 <_printf_common+0x48>
 8004a62:	f104 0a19 	add.w	sl, r4, #25
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	6832      	ldr	r2, [r6, #0]
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dc28      	bgt.n	8004ac2 <_printf_common+0x9a>
 8004a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a74:	1e13      	subs	r3, r2, #0
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	bf18      	it	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	0692      	lsls	r2, r2, #26
 8004a7e:	d42d      	bmi.n	8004adc <_printf_common+0xb4>
 8004a80:	4649      	mov	r1, r9
 8004a82:	4638      	mov	r0, r7
 8004a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d020      	beq.n	8004ad0 <_printf_common+0xa8>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	68e5      	ldr	r5, [r4, #12]
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	bf18      	it	ne
 8004a9a:	2500      	movne	r5, #0
 8004a9c:	6832      	ldr	r2, [r6, #0]
 8004a9e:	f04f 0600 	mov.w	r6, #0
 8004aa2:	68a3      	ldr	r3, [r4, #8]
 8004aa4:	bf08      	it	eq
 8004aa6:	1aad      	subeq	r5, r5, r2
 8004aa8:	6922      	ldr	r2, [r4, #16]
 8004aaa:	bf08      	it	eq
 8004aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bfc4      	itt	gt
 8004ab4:	1a9b      	subgt	r3, r3, r2
 8004ab6:	18ed      	addgt	r5, r5, r3
 8004ab8:	341a      	adds	r4, #26
 8004aba:	42b5      	cmp	r5, r6
 8004abc:	d11a      	bne.n	8004af4 <_printf_common+0xcc>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e008      	b.n	8004ad4 <_printf_common+0xac>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4652      	mov	r2, sl
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4638      	mov	r0, r7
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_printf_common+0xb0>
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad8:	3501      	adds	r5, #1
 8004ada:	e7c4      	b.n	8004a66 <_printf_common+0x3e>
 8004adc:	2030      	movs	r0, #48	; 0x30
 8004ade:	18e1      	adds	r1, r4, r3
 8004ae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aea:	4422      	add	r2, r4
 8004aec:	3302      	adds	r3, #2
 8004aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af2:	e7c5      	b.n	8004a80 <_printf_common+0x58>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4622      	mov	r2, r4
 8004af8:	4649      	mov	r1, r9
 8004afa:	4638      	mov	r0, r7
 8004afc:	47c0      	blx	r8
 8004afe:	3001      	adds	r0, #1
 8004b00:	d0e6      	beq.n	8004ad0 <_printf_common+0xa8>
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7d9      	b.n	8004aba <_printf_common+0x92>
	...

08004b08 <_printf_i>:
 8004b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	7e27      	ldrb	r7, [r4, #24]
 8004b10:	4691      	mov	r9, r2
 8004b12:	2f78      	cmp	r7, #120	; 0x78
 8004b14:	4680      	mov	r8, r0
 8004b16:	469a      	mov	sl, r3
 8004b18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1e:	d807      	bhi.n	8004b30 <_printf_i+0x28>
 8004b20:	2f62      	cmp	r7, #98	; 0x62
 8004b22:	d80a      	bhi.n	8004b3a <_printf_i+0x32>
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	f000 80d9 	beq.w	8004cdc <_printf_i+0x1d4>
 8004b2a:	2f58      	cmp	r7, #88	; 0x58
 8004b2c:	f000 80a4 	beq.w	8004c78 <_printf_i+0x170>
 8004b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b38:	e03a      	b.n	8004bb0 <_printf_i+0xa8>
 8004b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b3e:	2b15      	cmp	r3, #21
 8004b40:	d8f6      	bhi.n	8004b30 <_printf_i+0x28>
 8004b42:	a001      	add	r0, pc, #4	; (adr r0, 8004b48 <_printf_i+0x40>)
 8004b44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b48:	08004ba1 	.word	0x08004ba1
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004b31 	.word	0x08004b31
 8004b54:	08004b31 	.word	0x08004b31
 8004b58:	08004b31 	.word	0x08004b31
 8004b5c:	08004b31 	.word	0x08004b31
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004b31 	.word	0x08004b31
 8004b68:	08004b31 	.word	0x08004b31
 8004b6c:	08004b31 	.word	0x08004b31
 8004b70:	08004b31 	.word	0x08004b31
 8004b74:	08004cc3 	.word	0x08004cc3
 8004b78:	08004be5 	.word	0x08004be5
 8004b7c:	08004ca5 	.word	0x08004ca5
 8004b80:	08004b31 	.word	0x08004b31
 8004b84:	08004b31 	.word	0x08004b31
 8004b88:	08004ce5 	.word	0x08004ce5
 8004b8c:	08004b31 	.word	0x08004b31
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b31 	.word	0x08004b31
 8004b98:	08004b31 	.word	0x08004b31
 8004b9c:	08004cad 	.word	0x08004cad
 8004ba0:	680b      	ldr	r3, [r1, #0]
 8004ba2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	600a      	str	r2, [r1, #0]
 8004bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a4      	b.n	8004cfe <_printf_i+0x1f6>
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	6808      	ldr	r0, [r1, #0]
 8004bb8:	062e      	lsls	r6, r5, #24
 8004bba:	f100 0304 	add.w	r3, r0, #4
 8004bbe:	d50a      	bpl.n	8004bd6 <_printf_i+0xce>
 8004bc0:	6805      	ldr	r5, [r0, #0]
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	da03      	bge.n	8004bd0 <_printf_i+0xc8>
 8004bc8:	232d      	movs	r3, #45	; 0x2d
 8004bca:	426d      	negs	r5, r5
 8004bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	485e      	ldr	r0, [pc, #376]	; (8004d4c <_printf_i+0x244>)
 8004bd4:	e019      	b.n	8004c0a <_printf_i+0x102>
 8004bd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bda:	6805      	ldr	r5, [r0, #0]
 8004bdc:	600b      	str	r3, [r1, #0]
 8004bde:	bf18      	it	ne
 8004be0:	b22d      	sxthne	r5, r5
 8004be2:	e7ef      	b.n	8004bc4 <_printf_i+0xbc>
 8004be4:	680b      	ldr	r3, [r1, #0]
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	1d18      	adds	r0, r3, #4
 8004bea:	6008      	str	r0, [r1, #0]
 8004bec:	0628      	lsls	r0, r5, #24
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0xec>
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0xf2>
 8004bf4:	0669      	lsls	r1, r5, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0xe8>
 8004bf8:	881d      	ldrh	r5, [r3, #0]
 8004bfa:	2f6f      	cmp	r7, #111	; 0x6f
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2308      	moveq	r3, #8
 8004c00:	230a      	movne	r3, #10
 8004c02:	4852      	ldr	r0, [pc, #328]	; (8004d4c <_printf_i+0x244>)
 8004c04:	2100      	movs	r1, #0
 8004c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0a:	6866      	ldr	r6, [r4, #4]
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	bfa8      	it	ge
 8004c10:	6821      	ldrge	r1, [r4, #0]
 8004c12:	60a6      	str	r6, [r4, #8]
 8004c14:	bfa4      	itt	ge
 8004c16:	f021 0104 	bicge.w	r1, r1, #4
 8004c1a:	6021      	strge	r1, [r4, #0]
 8004c1c:	b90d      	cbnz	r5, 8004c22 <_printf_i+0x11a>
 8004c1e:	2e00      	cmp	r6, #0
 8004c20:	d04d      	beq.n	8004cbe <_printf_i+0x1b6>
 8004c22:	4616      	mov	r6, r2
 8004c24:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c28:	fb03 5711 	mls	r7, r3, r1, r5
 8004c2c:	5dc7      	ldrb	r7, [r0, r7]
 8004c2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c32:	462f      	mov	r7, r5
 8004c34:	42bb      	cmp	r3, r7
 8004c36:	460d      	mov	r5, r1
 8004c38:	d9f4      	bls.n	8004c24 <_printf_i+0x11c>
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d10b      	bne.n	8004c56 <_printf_i+0x14e>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	07df      	lsls	r7, r3, #31
 8004c42:	d508      	bpl.n	8004c56 <_printf_i+0x14e>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	6861      	ldr	r1, [r4, #4]
 8004c48:	4299      	cmp	r1, r3
 8004c4a:	bfde      	ittt	le
 8004c4c:	2330      	movle	r3, #48	; 0x30
 8004c4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c56:	1b92      	subs	r2, r2, r6
 8004c58:	6122      	str	r2, [r4, #16]
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f8cd a000 	str.w	sl, [sp]
 8004c64:	aa03      	add	r2, sp, #12
 8004c66:	f7ff fedf 	bl	8004a28 <_printf_common>
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d14c      	bne.n	8004d08 <_printf_i+0x200>
 8004c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c72:	b004      	add	sp, #16
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	4834      	ldr	r0, [pc, #208]	; (8004d4c <_printf_i+0x244>)
 8004c7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c7e:	680e      	ldr	r6, [r1, #0]
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c86:	061f      	lsls	r7, r3, #24
 8004c88:	600e      	str	r6, [r1, #0]
 8004c8a:	d514      	bpl.n	8004cb6 <_printf_i+0x1ae>
 8004c8c:	07d9      	lsls	r1, r3, #31
 8004c8e:	bf44      	itt	mi
 8004c90:	f043 0320 	orrmi.w	r3, r3, #32
 8004c94:	6023      	strmi	r3, [r4, #0]
 8004c96:	b91d      	cbnz	r5, 8004ca0 <_printf_i+0x198>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	e7af      	b.n	8004c04 <_printf_i+0xfc>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	f043 0320 	orr.w	r3, r3, #32
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	2378      	movs	r3, #120	; 0x78
 8004cae:	4828      	ldr	r0, [pc, #160]	; (8004d50 <_printf_i+0x248>)
 8004cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb4:	e7e3      	b.n	8004c7e <_printf_i+0x176>
 8004cb6:	065e      	lsls	r6, r3, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	e7e6      	b.n	8004c8c <_printf_i+0x184>
 8004cbe:	4616      	mov	r6, r2
 8004cc0:	e7bb      	b.n	8004c3a <_printf_i+0x132>
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	6826      	ldr	r6, [r4, #0]
 8004cc6:	1d1d      	adds	r5, r3, #4
 8004cc8:	6960      	ldr	r0, [r4, #20]
 8004cca:	600d      	str	r5, [r1, #0]
 8004ccc:	0635      	lsls	r5, r6, #24
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	d501      	bpl.n	8004cd6 <_printf_i+0x1ce>
 8004cd2:	6018      	str	r0, [r3, #0]
 8004cd4:	e002      	b.n	8004cdc <_printf_i+0x1d4>
 8004cd6:	0671      	lsls	r1, r6, #25
 8004cd8:	d5fb      	bpl.n	8004cd2 <_printf_i+0x1ca>
 8004cda:	8018      	strh	r0, [r3, #0]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4616      	mov	r6, r2
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	e7ba      	b.n	8004c5a <_printf_i+0x152>
 8004ce4:	680b      	ldr	r3, [r1, #0]
 8004ce6:	1d1a      	adds	r2, r3, #4
 8004ce8:	600a      	str	r2, [r1, #0]
 8004cea:	681e      	ldr	r6, [r3, #0]
 8004cec:	2100      	movs	r1, #0
 8004cee:	4630      	mov	r0, r6
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	f002 fb0b 	bl	800730c <memchr>
 8004cf6:	b108      	cbz	r0, 8004cfc <_printf_i+0x1f4>
 8004cf8:	1b80      	subs	r0, r0, r6
 8004cfa:	6060      	str	r0, [r4, #4]
 8004cfc:	6863      	ldr	r3, [r4, #4]
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	2300      	movs	r3, #0
 8004d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d06:	e7a8      	b.n	8004c5a <_printf_i+0x152>
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	47d0      	blx	sl
 8004d12:	3001      	adds	r0, #1
 8004d14:	d0ab      	beq.n	8004c6e <_printf_i+0x166>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	079b      	lsls	r3, r3, #30
 8004d1a:	d413      	bmi.n	8004d44 <_printf_i+0x23c>
 8004d1c:	68e0      	ldr	r0, [r4, #12]
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	4298      	cmp	r0, r3
 8004d22:	bfb8      	it	lt
 8004d24:	4618      	movlt	r0, r3
 8004d26:	e7a4      	b.n	8004c72 <_printf_i+0x16a>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4632      	mov	r2, r6
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	4640      	mov	r0, r8
 8004d30:	47d0      	blx	sl
 8004d32:	3001      	adds	r0, #1
 8004d34:	d09b      	beq.n	8004c6e <_printf_i+0x166>
 8004d36:	3501      	adds	r5, #1
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	9903      	ldr	r1, [sp, #12]
 8004d3c:	1a5b      	subs	r3, r3, r1
 8004d3e:	42ab      	cmp	r3, r5
 8004d40:	dcf2      	bgt.n	8004d28 <_printf_i+0x220>
 8004d42:	e7eb      	b.n	8004d1c <_printf_i+0x214>
 8004d44:	2500      	movs	r5, #0
 8004d46:	f104 0619 	add.w	r6, r4, #25
 8004d4a:	e7f5      	b.n	8004d38 <_printf_i+0x230>
 8004d4c:	08008d3a 	.word	0x08008d3a
 8004d50:	08008d4b 	.word	0x08008d4b

08004d54 <_scanf_float>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	688b      	ldr	r3, [r1, #8]
 8004d5e:	4617      	mov	r7, r2
 8004d60:	1e5a      	subs	r2, r3, #1
 8004d62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d66:	bf85      	ittet	hi
 8004d68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d6c:	195b      	addhi	r3, r3, r5
 8004d6e:	2300      	movls	r3, #0
 8004d70:	9302      	strhi	r3, [sp, #8]
 8004d72:	bf88      	it	hi
 8004d74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d78:	468b      	mov	fp, r1
 8004d7a:	f04f 0500 	mov.w	r5, #0
 8004d7e:	bf8c      	ite	hi
 8004d80:	608b      	strhi	r3, [r1, #8]
 8004d82:	9302      	strls	r3, [sp, #8]
 8004d84:	680b      	ldr	r3, [r1, #0]
 8004d86:	4680      	mov	r8, r0
 8004d88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d8c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d90:	460c      	mov	r4, r1
 8004d92:	465e      	mov	r6, fp
 8004d94:	46aa      	mov	sl, r5
 8004d96:	46a9      	mov	r9, r5
 8004d98:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d9c:	9501      	str	r5, [sp, #4]
 8004d9e:	68a2      	ldr	r2, [r4, #8]
 8004da0:	b152      	cbz	r2, 8004db8 <_scanf_float+0x64>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b4e      	cmp	r3, #78	; 0x4e
 8004da8:	d864      	bhi.n	8004e74 <_scanf_float+0x120>
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d83c      	bhi.n	8004e28 <_scanf_float+0xd4>
 8004dae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004db2:	b2c8      	uxtb	r0, r1
 8004db4:	280e      	cmp	r0, #14
 8004db6:	d93a      	bls.n	8004e2e <_scanf_float+0xda>
 8004db8:	f1b9 0f00 	cmp.w	r9, #0
 8004dbc:	d003      	beq.n	8004dc6 <_scanf_float+0x72>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dca:	f1ba 0f01 	cmp.w	sl, #1
 8004dce:	f200 8113 	bhi.w	8004ff8 <_scanf_float+0x2a4>
 8004dd2:	455e      	cmp	r6, fp
 8004dd4:	f200 8105 	bhi.w	8004fe2 <_scanf_float+0x28e>
 8004dd8:	2501      	movs	r5, #1
 8004dda:	4628      	mov	r0, r5
 8004ddc:	b007      	add	sp, #28
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004de6:	2a0d      	cmp	r2, #13
 8004de8:	d8e6      	bhi.n	8004db8 <_scanf_float+0x64>
 8004dea:	a101      	add	r1, pc, #4	; (adr r1, 8004df0 <_scanf_float+0x9c>)
 8004dec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004df0:	08004f2f 	.word	0x08004f2f
 8004df4:	08004db9 	.word	0x08004db9
 8004df8:	08004db9 	.word	0x08004db9
 8004dfc:	08004db9 	.word	0x08004db9
 8004e00:	08004f8f 	.word	0x08004f8f
 8004e04:	08004f67 	.word	0x08004f67
 8004e08:	08004db9 	.word	0x08004db9
 8004e0c:	08004db9 	.word	0x08004db9
 8004e10:	08004f3d 	.word	0x08004f3d
 8004e14:	08004db9 	.word	0x08004db9
 8004e18:	08004db9 	.word	0x08004db9
 8004e1c:	08004db9 	.word	0x08004db9
 8004e20:	08004db9 	.word	0x08004db9
 8004e24:	08004ef5 	.word	0x08004ef5
 8004e28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e2c:	e7db      	b.n	8004de6 <_scanf_float+0x92>
 8004e2e:	290e      	cmp	r1, #14
 8004e30:	d8c2      	bhi.n	8004db8 <_scanf_float+0x64>
 8004e32:	a001      	add	r0, pc, #4	; (adr r0, 8004e38 <_scanf_float+0xe4>)
 8004e34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e38:	08004ee7 	.word	0x08004ee7
 8004e3c:	08004db9 	.word	0x08004db9
 8004e40:	08004ee7 	.word	0x08004ee7
 8004e44:	08004f7b 	.word	0x08004f7b
 8004e48:	08004db9 	.word	0x08004db9
 8004e4c:	08004e95 	.word	0x08004e95
 8004e50:	08004ed1 	.word	0x08004ed1
 8004e54:	08004ed1 	.word	0x08004ed1
 8004e58:	08004ed1 	.word	0x08004ed1
 8004e5c:	08004ed1 	.word	0x08004ed1
 8004e60:	08004ed1 	.word	0x08004ed1
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004ed1 	.word	0x08004ed1
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	08004ed1 	.word	0x08004ed1
 8004e74:	2b6e      	cmp	r3, #110	; 0x6e
 8004e76:	d809      	bhi.n	8004e8c <_scanf_float+0x138>
 8004e78:	2b60      	cmp	r3, #96	; 0x60
 8004e7a:	d8b2      	bhi.n	8004de2 <_scanf_float+0x8e>
 8004e7c:	2b54      	cmp	r3, #84	; 0x54
 8004e7e:	d077      	beq.n	8004f70 <_scanf_float+0x21c>
 8004e80:	2b59      	cmp	r3, #89	; 0x59
 8004e82:	d199      	bne.n	8004db8 <_scanf_float+0x64>
 8004e84:	2d07      	cmp	r5, #7
 8004e86:	d197      	bne.n	8004db8 <_scanf_float+0x64>
 8004e88:	2508      	movs	r5, #8
 8004e8a:	e029      	b.n	8004ee0 <_scanf_float+0x18c>
 8004e8c:	2b74      	cmp	r3, #116	; 0x74
 8004e8e:	d06f      	beq.n	8004f70 <_scanf_float+0x21c>
 8004e90:	2b79      	cmp	r3, #121	; 0x79
 8004e92:	e7f6      	b.n	8004e82 <_scanf_float+0x12e>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	05c8      	lsls	r0, r1, #23
 8004e98:	d51a      	bpl.n	8004ed0 <_scanf_float+0x17c>
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ea0:	6021      	str	r1, [r4, #0]
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	b11b      	cbz	r3, 8004eb0 <_scanf_float+0x15c>
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	3201      	adds	r2, #1
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	60a2      	str	r2, [r4, #8]
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	f340 8084 	ble.w	8004fd0 <_scanf_float+0x27c>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	e766      	b.n	8004d9e <_scanf_float+0x4a>
 8004ed0:	eb1a 0f05 	cmn.w	sl, r5
 8004ed4:	f47f af70 	bne.w	8004db8 <_scanf_float+0x64>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ee4:	e7e4      	b.n	8004eb0 <_scanf_float+0x15c>
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	0610      	lsls	r0, r2, #24
 8004eea:	f57f af65 	bpl.w	8004db8 <_scanf_float+0x64>
 8004eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef2:	e7f4      	b.n	8004ede <_scanf_float+0x18a>
 8004ef4:	f1ba 0f00 	cmp.w	sl, #0
 8004ef8:	d10e      	bne.n	8004f18 <_scanf_float+0x1c4>
 8004efa:	f1b9 0f00 	cmp.w	r9, #0
 8004efe:	d10e      	bne.n	8004f1e <_scanf_float+0x1ca>
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f0a:	d108      	bne.n	8004f1e <_scanf_float+0x1ca>
 8004f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f10:	f04f 0a01 	mov.w	sl, #1
 8004f14:	6022      	str	r2, [r4, #0]
 8004f16:	e7e3      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f18:	f1ba 0f02 	cmp.w	sl, #2
 8004f1c:	d055      	beq.n	8004fca <_scanf_float+0x276>
 8004f1e:	2d01      	cmp	r5, #1
 8004f20:	d002      	beq.n	8004f28 <_scanf_float+0x1d4>
 8004f22:	2d04      	cmp	r5, #4
 8004f24:	f47f af48 	bne.w	8004db8 <_scanf_float+0x64>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	b2ed      	uxtb	r5, r5
 8004f2c:	e7d8      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f2e:	f1ba 0f01 	cmp.w	sl, #1
 8004f32:	f47f af41 	bne.w	8004db8 <_scanf_float+0x64>
 8004f36:	f04f 0a02 	mov.w	sl, #2
 8004f3a:	e7d1      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f3c:	b97d      	cbnz	r5, 8004f5e <_scanf_float+0x20a>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	f47f af3c 	bne.w	8004dbe <_scanf_float+0x6a>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f50:	f47f af39 	bne.w	8004dc6 <_scanf_float+0x72>
 8004f54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f58:	2501      	movs	r5, #1
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	e7c0      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f5e:	2d03      	cmp	r5, #3
 8004f60:	d0e2      	beq.n	8004f28 <_scanf_float+0x1d4>
 8004f62:	2d05      	cmp	r5, #5
 8004f64:	e7de      	b.n	8004f24 <_scanf_float+0x1d0>
 8004f66:	2d02      	cmp	r5, #2
 8004f68:	f47f af26 	bne.w	8004db8 <_scanf_float+0x64>
 8004f6c:	2503      	movs	r5, #3
 8004f6e:	e7b7      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f70:	2d06      	cmp	r5, #6
 8004f72:	f47f af21 	bne.w	8004db8 <_scanf_float+0x64>
 8004f76:	2507      	movs	r5, #7
 8004f78:	e7b2      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	0591      	lsls	r1, r2, #22
 8004f7e:	f57f af1b 	bpl.w	8004db8 <_scanf_float+0x64>
 8004f82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f86:	6022      	str	r2, [r4, #0]
 8004f88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f8c:	e7a8      	b.n	8004ee0 <_scanf_float+0x18c>
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f98:	d006      	beq.n	8004fa8 <_scanf_float+0x254>
 8004f9a:	0550      	lsls	r0, r2, #21
 8004f9c:	f57f af0c 	bpl.w	8004db8 <_scanf_float+0x64>
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	f43f af0f 	beq.w	8004dc6 <_scanf_float+0x72>
 8004fa8:	0591      	lsls	r1, r2, #22
 8004faa:	bf58      	it	pl
 8004fac:	9901      	ldrpl	r1, [sp, #4]
 8004fae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fb2:	bf58      	it	pl
 8004fb4:	eba9 0101 	subpl.w	r1, r9, r1
 8004fb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004fbc:	f04f 0900 	mov.w	r9, #0
 8004fc0:	bf58      	it	pl
 8004fc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fc6:	6022      	str	r2, [r4, #0]
 8004fc8:	e78a      	b.n	8004ee0 <_scanf_float+0x18c>
 8004fca:	f04f 0a03 	mov.w	sl, #3
 8004fce:	e787      	b.n	8004ee0 <_scanf_float+0x18c>
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fd8:	4798      	blx	r3
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f43f aedf 	beq.w	8004d9e <_scanf_float+0x4a>
 8004fe0:	e6ea      	b.n	8004db8 <_scanf_float+0x64>
 8004fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fe6:	463a      	mov	r2, r7
 8004fe8:	4640      	mov	r0, r8
 8004fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fee:	4798      	blx	r3
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	e6ec      	b.n	8004dd2 <_scanf_float+0x7e>
 8004ff8:	1e6b      	subs	r3, r5, #1
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d825      	bhi.n	800504a <_scanf_float+0x2f6>
 8004ffe:	2d02      	cmp	r5, #2
 8005000:	d836      	bhi.n	8005070 <_scanf_float+0x31c>
 8005002:	455e      	cmp	r6, fp
 8005004:	f67f aee8 	bls.w	8004dd8 <_scanf_float+0x84>
 8005008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800500c:	463a      	mov	r2, r7
 800500e:	4640      	mov	r0, r8
 8005010:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005014:	4798      	blx	r3
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	e7f1      	b.n	8005002 <_scanf_float+0x2ae>
 800501e:	9802      	ldr	r0, [sp, #8]
 8005020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005024:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005028:	463a      	mov	r2, r7
 800502a:	9002      	str	r0, [sp, #8]
 800502c:	4640      	mov	r0, r8
 800502e:	4798      	blx	r3
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	3b01      	subs	r3, #1
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800503a:	fa5f fa8a 	uxtb.w	sl, sl
 800503e:	f1ba 0f02 	cmp.w	sl, #2
 8005042:	d1ec      	bne.n	800501e <_scanf_float+0x2ca>
 8005044:	3d03      	subs	r5, #3
 8005046:	b2ed      	uxtb	r5, r5
 8005048:	1b76      	subs	r6, r6, r5
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	05da      	lsls	r2, r3, #23
 800504e:	d52f      	bpl.n	80050b0 <_scanf_float+0x35c>
 8005050:	055b      	lsls	r3, r3, #21
 8005052:	d510      	bpl.n	8005076 <_scanf_float+0x322>
 8005054:	455e      	cmp	r6, fp
 8005056:	f67f aebf 	bls.w	8004dd8 <_scanf_float+0x84>
 800505a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800505e:	463a      	mov	r2, r7
 8005060:	4640      	mov	r0, r8
 8005062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005066:	4798      	blx	r3
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	3b01      	subs	r3, #1
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	e7f1      	b.n	8005054 <_scanf_float+0x300>
 8005070:	46aa      	mov	sl, r5
 8005072:	9602      	str	r6, [sp, #8]
 8005074:	e7df      	b.n	8005036 <_scanf_float+0x2e2>
 8005076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	2965      	cmp	r1, #101	; 0x65
 800507e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005082:	f106 35ff 	add.w	r5, r6, #4294967295
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	d00c      	beq.n	80050a4 <_scanf_float+0x350>
 800508a:	2945      	cmp	r1, #69	; 0x45
 800508c:	d00a      	beq.n	80050a4 <_scanf_float+0x350>
 800508e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005092:	463a      	mov	r2, r7
 8005094:	4640      	mov	r0, r8
 8005096:	4798      	blx	r3
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800509e:	3b01      	subs	r3, #1
 80050a0:	1eb5      	subs	r5, r6, #2
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	463a      	mov	r2, r7
 80050a6:	4640      	mov	r0, r8
 80050a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050ac:	4798      	blx	r3
 80050ae:	462e      	mov	r6, r5
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	f015 0510 	ands.w	r5, r5, #16
 80050b6:	d159      	bne.n	800516c <_scanf_float+0x418>
 80050b8:	7035      	strb	r5, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c4:	d11c      	bne.n	8005100 <_scanf_float+0x3ac>
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	454b      	cmp	r3, r9
 80050ca:	eba3 0209 	sub.w	r2, r3, r9
 80050ce:	d124      	bne.n	800511a <_scanf_float+0x3c6>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4659      	mov	r1, fp
 80050d4:	4640      	mov	r0, r8
 80050d6:	f000 fe8b 	bl	8005df0 <_strtod_r>
 80050da:	f8d4 c000 	ldr.w	ip, [r4]
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	f01c 0f02 	tst.w	ip, #2
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	d021      	beq.n	8005130 <_scanf_float+0x3dc>
 80050ec:	9903      	ldr	r1, [sp, #12]
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	600a      	str	r2, [r1, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	e9c3 6700 	strd	r6, r7, [r3]
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60e3      	str	r3, [r4, #12]
 80050fe:	e66c      	b.n	8004dda <_scanf_float+0x86>
 8005100:	9b04      	ldr	r3, [sp, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0e4      	beq.n	80050d0 <_scanf_float+0x37c>
 8005106:	9905      	ldr	r1, [sp, #20]
 8005108:	230a      	movs	r3, #10
 800510a:	462a      	mov	r2, r5
 800510c:	4640      	mov	r0, r8
 800510e:	3101      	adds	r1, #1
 8005110:	f000 fefa 	bl	8005f08 <_strtol_r>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	9e05      	ldr	r6, [sp, #20]
 8005118:	1ac2      	subs	r2, r0, r3
 800511a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800511e:	429e      	cmp	r6, r3
 8005120:	bf28      	it	cs
 8005122:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005126:	4630      	mov	r0, r6
 8005128:	4911      	ldr	r1, [pc, #68]	; (8005170 <_scanf_float+0x41c>)
 800512a:	f000 f829 	bl	8005180 <siprintf>
 800512e:	e7cf      	b.n	80050d0 <_scanf_float+0x37c>
 8005130:	f01c 0f04 	tst.w	ip, #4
 8005134:	f103 0e04 	add.w	lr, r3, #4
 8005138:	d003      	beq.n	8005142 <_scanf_float+0x3ee>
 800513a:	9903      	ldr	r1, [sp, #12]
 800513c:	f8c1 e000 	str.w	lr, [r1]
 8005140:	e7d7      	b.n	80050f2 <_scanf_float+0x39e>
 8005142:	9a03      	ldr	r2, [sp, #12]
 8005144:	f8c2 e000 	str.w	lr, [r2]
 8005148:	f8d3 8000 	ldr.w	r8, [r3]
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	f7fb fc5c 	bl	8000a0c <__aeabi_dcmpun>
 8005154:	b128      	cbz	r0, 8005162 <_scanf_float+0x40e>
 8005156:	4807      	ldr	r0, [pc, #28]	; (8005174 <_scanf_float+0x420>)
 8005158:	f000 f80e 	bl	8005178 <nanf>
 800515c:	f8c8 0000 	str.w	r0, [r8]
 8005160:	e7ca      	b.n	80050f8 <_scanf_float+0x3a4>
 8005162:	4630      	mov	r0, r6
 8005164:	4639      	mov	r1, r7
 8005166:	f7fb fcaf 	bl	8000ac8 <__aeabi_d2f>
 800516a:	e7f7      	b.n	800515c <_scanf_float+0x408>
 800516c:	2500      	movs	r5, #0
 800516e:	e634      	b.n	8004dda <_scanf_float+0x86>
 8005170:	08008d5c 	.word	0x08008d5c
 8005174:	08009178 	.word	0x08009178

08005178 <nanf>:
 8005178:	4800      	ldr	r0, [pc, #0]	; (800517c <nanf+0x4>)
 800517a:	4770      	bx	lr
 800517c:	7fc00000 	.word	0x7fc00000

08005180 <siprintf>:
 8005180:	b40e      	push	{r1, r2, r3}
 8005182:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005186:	b500      	push	{lr}
 8005188:	b09c      	sub	sp, #112	; 0x70
 800518a:	ab1d      	add	r3, sp, #116	; 0x74
 800518c:	9002      	str	r0, [sp, #8]
 800518e:	9006      	str	r0, [sp, #24]
 8005190:	9107      	str	r1, [sp, #28]
 8005192:	9104      	str	r1, [sp, #16]
 8005194:	4808      	ldr	r0, [pc, #32]	; (80051b8 <siprintf+0x38>)
 8005196:	4909      	ldr	r1, [pc, #36]	; (80051bc <siprintf+0x3c>)
 8005198:	f853 2b04 	ldr.w	r2, [r3], #4
 800519c:	9105      	str	r1, [sp, #20]
 800519e:	6800      	ldr	r0, [r0, #0]
 80051a0:	a902      	add	r1, sp, #8
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	f002 fe96 	bl	8007ed4 <_svfiprintf_r>
 80051a8:	2200      	movs	r2, #0
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	b01c      	add	sp, #112	; 0x70
 80051b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b4:	b003      	add	sp, #12
 80051b6:	4770      	bx	lr
 80051b8:	20000014 	.word	0x20000014
 80051bc:	ffff0208 	.word	0xffff0208

080051c0 <sulp>:
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	460f      	mov	r7, r1
 80051c6:	4690      	mov	r8, r2
 80051c8:	f002 fc2c 	bl	8007a24 <__ulp>
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	f1b8 0f00 	cmp.w	r8, #0
 80051d4:	d011      	beq.n	80051fa <sulp+0x3a>
 80051d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80051da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dd0b      	ble.n	80051fa <sulp+0x3a>
 80051e2:	2400      	movs	r4, #0
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80051ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005202:	0000      	movs	r0, r0
 8005204:	0000      	movs	r0, r0
	...

08005208 <_strtod_l>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	469b      	mov	fp, r3
 800520e:	2300      	movs	r3, #0
 8005210:	b0a1      	sub	sp, #132	; 0x84
 8005212:	931c      	str	r3, [sp, #112]	; 0x70
 8005214:	4ba1      	ldr	r3, [pc, #644]	; (800549c <_strtod_l+0x294>)
 8005216:	4682      	mov	sl, r0
 8005218:	681f      	ldr	r7, [r3, #0]
 800521a:	460e      	mov	r6, r1
 800521c:	4638      	mov	r0, r7
 800521e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005220:	f7fa ff96 	bl	8000150 <strlen>
 8005224:	f04f 0800 	mov.w	r8, #0
 8005228:	4604      	mov	r4, r0
 800522a:	f04f 0900 	mov.w	r9, #0
 800522e:	961b      	str	r6, [sp, #108]	; 0x6c
 8005230:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	2a2b      	cmp	r2, #43	; 0x2b
 8005236:	d04c      	beq.n	80052d2 <_strtod_l+0xca>
 8005238:	d83a      	bhi.n	80052b0 <_strtod_l+0xa8>
 800523a:	2a0d      	cmp	r2, #13
 800523c:	d833      	bhi.n	80052a6 <_strtod_l+0x9e>
 800523e:	2a08      	cmp	r2, #8
 8005240:	d833      	bhi.n	80052aa <_strtod_l+0xa2>
 8005242:	2a00      	cmp	r2, #0
 8005244:	d03d      	beq.n	80052c2 <_strtod_l+0xba>
 8005246:	2300      	movs	r3, #0
 8005248:	930c      	str	r3, [sp, #48]	; 0x30
 800524a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800524c:	782b      	ldrb	r3, [r5, #0]
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	f040 80af 	bne.w	80053b2 <_strtod_l+0x1aa>
 8005254:	786b      	ldrb	r3, [r5, #1]
 8005256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800525a:	2b58      	cmp	r3, #88	; 0x58
 800525c:	d16c      	bne.n	8005338 <_strtod_l+0x130>
 800525e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005260:	4650      	mov	r0, sl
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	ab1c      	add	r3, sp, #112	; 0x70
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4a8d      	ldr	r2, [pc, #564]	; (80054a0 <_strtod_l+0x298>)
 800526a:	f8cd b008 	str.w	fp, [sp, #8]
 800526e:	ab1d      	add	r3, sp, #116	; 0x74
 8005270:	a91b      	add	r1, sp, #108	; 0x6c
 8005272:	f001 fd2f 	bl	8006cd4 <__gethex>
 8005276:	f010 0607 	ands.w	r6, r0, #7
 800527a:	4604      	mov	r4, r0
 800527c:	d005      	beq.n	800528a <_strtod_l+0x82>
 800527e:	2e06      	cmp	r6, #6
 8005280:	d129      	bne.n	80052d6 <_strtod_l+0xce>
 8005282:	2300      	movs	r3, #0
 8005284:	3501      	adds	r5, #1
 8005286:	951b      	str	r5, [sp, #108]	; 0x6c
 8005288:	930c      	str	r3, [sp, #48]	; 0x30
 800528a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8596 	bne.w	8005dbe <_strtod_l+0xbb6>
 8005292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005294:	b1d3      	cbz	r3, 80052cc <_strtod_l+0xc4>
 8005296:	4642      	mov	r2, r8
 8005298:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800529c:	4610      	mov	r0, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	b021      	add	sp, #132	; 0x84
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	2a20      	cmp	r2, #32
 80052a8:	d1cd      	bne.n	8005246 <_strtod_l+0x3e>
 80052aa:	3301      	adds	r3, #1
 80052ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80052ae:	e7bf      	b.n	8005230 <_strtod_l+0x28>
 80052b0:	2a2d      	cmp	r2, #45	; 0x2d
 80052b2:	d1c8      	bne.n	8005246 <_strtod_l+0x3e>
 80052b4:	2201      	movs	r2, #1
 80052b6:	920c      	str	r2, [sp, #48]	; 0x30
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1c3      	bne.n	800524a <_strtod_l+0x42>
 80052c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 8577 	bne.w	8005dba <_strtod_l+0xbb2>
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	e7e4      	b.n	800529c <_strtod_l+0x94>
 80052d2:	2200      	movs	r2, #0
 80052d4:	e7ef      	b.n	80052b6 <_strtod_l+0xae>
 80052d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80052d8:	b13a      	cbz	r2, 80052ea <_strtod_l+0xe2>
 80052da:	2135      	movs	r1, #53	; 0x35
 80052dc:	a81e      	add	r0, sp, #120	; 0x78
 80052de:	f002 fca5 	bl	8007c2c <__copybits>
 80052e2:	4650      	mov	r0, sl
 80052e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052e6:	f002 f86d 	bl	80073c4 <_Bfree>
 80052ea:	3e01      	subs	r6, #1
 80052ec:	2e05      	cmp	r6, #5
 80052ee:	d807      	bhi.n	8005300 <_strtod_l+0xf8>
 80052f0:	e8df f006 	tbb	[pc, r6]
 80052f4:	1d180b0e 	.word	0x1d180b0e
 80052f8:	030e      	.short	0x030e
 80052fa:	f04f 0900 	mov.w	r9, #0
 80052fe:	46c8      	mov	r8, r9
 8005300:	0721      	lsls	r1, r4, #28
 8005302:	d5c2      	bpl.n	800528a <_strtod_l+0x82>
 8005304:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005308:	e7bf      	b.n	800528a <_strtod_l+0x82>
 800530a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800530e:	e7f7      	b.n	8005300 <_strtod_l+0xf8>
 8005310:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005312:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005316:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800531a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800531e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005322:	e7ed      	b.n	8005300 <_strtod_l+0xf8>
 8005324:	f04f 0800 	mov.w	r8, #0
 8005328:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80054a4 <_strtod_l+0x29c>
 800532c:	e7e8      	b.n	8005300 <_strtod_l+0xf8>
 800532e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005332:	f04f 38ff 	mov.w	r8, #4294967295
 8005336:	e7e3      	b.n	8005300 <_strtod_l+0xf8>
 8005338:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	921b      	str	r2, [sp, #108]	; 0x6c
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d0f9      	beq.n	8005338 <_strtod_l+0x130>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0a0      	beq.n	800528a <_strtod_l+0x82>
 8005348:	2301      	movs	r3, #1
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800534e:	220a      	movs	r2, #10
 8005350:	9308      	str	r3, [sp, #32]
 8005352:	2300      	movs	r3, #0
 8005354:	469b      	mov	fp, r3
 8005356:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800535a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800535c:	7805      	ldrb	r5, [r0, #0]
 800535e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005362:	b2d9      	uxtb	r1, r3
 8005364:	2909      	cmp	r1, #9
 8005366:	d926      	bls.n	80053b6 <_strtod_l+0x1ae>
 8005368:	4622      	mov	r2, r4
 800536a:	4639      	mov	r1, r7
 800536c:	f002 fec8 	bl	8008100 <strncmp>
 8005370:	2800      	cmp	r0, #0
 8005372:	d032      	beq.n	80053da <_strtod_l+0x1d2>
 8005374:	2000      	movs	r0, #0
 8005376:	462b      	mov	r3, r5
 8005378:	465c      	mov	r4, fp
 800537a:	4602      	mov	r2, r0
 800537c:	9004      	str	r0, [sp, #16]
 800537e:	2b65      	cmp	r3, #101	; 0x65
 8005380:	d001      	beq.n	8005386 <_strtod_l+0x17e>
 8005382:	2b45      	cmp	r3, #69	; 0x45
 8005384:	d113      	bne.n	80053ae <_strtod_l+0x1a6>
 8005386:	b91c      	cbnz	r4, 8005390 <_strtod_l+0x188>
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	4303      	orrs	r3, r0
 800538c:	d099      	beq.n	80052c2 <_strtod_l+0xba>
 800538e:	2400      	movs	r4, #0
 8005390:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005392:	1c73      	adds	r3, r6, #1
 8005394:	931b      	str	r3, [sp, #108]	; 0x6c
 8005396:	7873      	ldrb	r3, [r6, #1]
 8005398:	2b2b      	cmp	r3, #43	; 0x2b
 800539a:	d078      	beq.n	800548e <_strtod_l+0x286>
 800539c:	2b2d      	cmp	r3, #45	; 0x2d
 800539e:	d07b      	beq.n	8005498 <_strtod_l+0x290>
 80053a0:	2700      	movs	r7, #0
 80053a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80053a6:	2909      	cmp	r1, #9
 80053a8:	f240 8082 	bls.w	80054b0 <_strtod_l+0x2a8>
 80053ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80053ae:	2500      	movs	r5, #0
 80053b0:	e09e      	b.n	80054f0 <_strtod_l+0x2e8>
 80053b2:	2300      	movs	r3, #0
 80053b4:	e7c9      	b.n	800534a <_strtod_l+0x142>
 80053b6:	f1bb 0f08 	cmp.w	fp, #8
 80053ba:	bfd5      	itete	le
 80053bc:	9906      	ldrle	r1, [sp, #24]
 80053be:	9905      	ldrgt	r1, [sp, #20]
 80053c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80053c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80053c8:	f100 0001 	add.w	r0, r0, #1
 80053cc:	bfd4      	ite	le
 80053ce:	9306      	strle	r3, [sp, #24]
 80053d0:	9305      	strgt	r3, [sp, #20]
 80053d2:	f10b 0b01 	add.w	fp, fp, #1
 80053d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80053d8:	e7bf      	b.n	800535a <_strtod_l+0x152>
 80053da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053dc:	191a      	adds	r2, r3, r4
 80053de:	921b      	str	r2, [sp, #108]	; 0x6c
 80053e0:	5d1b      	ldrb	r3, [r3, r4]
 80053e2:	f1bb 0f00 	cmp.w	fp, #0
 80053e6:	d036      	beq.n	8005456 <_strtod_l+0x24e>
 80053e8:	465c      	mov	r4, fp
 80053ea:	9004      	str	r0, [sp, #16]
 80053ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80053f0:	2a09      	cmp	r2, #9
 80053f2:	d912      	bls.n	800541a <_strtod_l+0x212>
 80053f4:	2201      	movs	r2, #1
 80053f6:	e7c2      	b.n	800537e <_strtod_l+0x176>
 80053f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053fa:	3001      	adds	r0, #1
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b30      	cmp	r3, #48	; 0x30
 8005404:	d0f8      	beq.n	80053f8 <_strtod_l+0x1f0>
 8005406:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800540a:	2a08      	cmp	r2, #8
 800540c:	f200 84dc 	bhi.w	8005dc8 <_strtod_l+0xbc0>
 8005410:	9004      	str	r0, [sp, #16]
 8005412:	2000      	movs	r0, #0
 8005414:	4604      	mov	r4, r0
 8005416:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005418:	9208      	str	r2, [sp, #32]
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	f100 0201 	add.w	r2, r0, #1
 8005420:	d013      	beq.n	800544a <_strtod_l+0x242>
 8005422:	9904      	ldr	r1, [sp, #16]
 8005424:	1905      	adds	r5, r0, r4
 8005426:	4411      	add	r1, r2
 8005428:	9104      	str	r1, [sp, #16]
 800542a:	4622      	mov	r2, r4
 800542c:	210a      	movs	r1, #10
 800542e:	42aa      	cmp	r2, r5
 8005430:	d113      	bne.n	800545a <_strtod_l+0x252>
 8005432:	1822      	adds	r2, r4, r0
 8005434:	2a08      	cmp	r2, #8
 8005436:	f104 0401 	add.w	r4, r4, #1
 800543a:	4404      	add	r4, r0
 800543c:	dc1b      	bgt.n	8005476 <_strtod_l+0x26e>
 800543e:	220a      	movs	r2, #10
 8005440:	9906      	ldr	r1, [sp, #24]
 8005442:	fb02 3301 	mla	r3, r2, r1, r3
 8005446:	9306      	str	r3, [sp, #24]
 8005448:	2200      	movs	r2, #0
 800544a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800544c:	4610      	mov	r0, r2
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	911b      	str	r1, [sp, #108]	; 0x6c
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	e7ca      	b.n	80053ec <_strtod_l+0x1e4>
 8005456:	4658      	mov	r0, fp
 8005458:	e7d3      	b.n	8005402 <_strtod_l+0x1fa>
 800545a:	2a08      	cmp	r2, #8
 800545c:	dc04      	bgt.n	8005468 <_strtod_l+0x260>
 800545e:	9f06      	ldr	r7, [sp, #24]
 8005460:	434f      	muls	r7, r1
 8005462:	9706      	str	r7, [sp, #24]
 8005464:	3201      	adds	r2, #1
 8005466:	e7e2      	b.n	800542e <_strtod_l+0x226>
 8005468:	1c57      	adds	r7, r2, #1
 800546a:	2f10      	cmp	r7, #16
 800546c:	bfde      	ittt	le
 800546e:	9f05      	ldrle	r7, [sp, #20]
 8005470:	434f      	mulle	r7, r1
 8005472:	9705      	strle	r7, [sp, #20]
 8005474:	e7f6      	b.n	8005464 <_strtod_l+0x25c>
 8005476:	2c10      	cmp	r4, #16
 8005478:	bfdf      	itttt	le
 800547a:	220a      	movle	r2, #10
 800547c:	9905      	ldrle	r1, [sp, #20]
 800547e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005482:	9305      	strle	r3, [sp, #20]
 8005484:	e7e0      	b.n	8005448 <_strtod_l+0x240>
 8005486:	2300      	movs	r3, #0
 8005488:	2201      	movs	r2, #1
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	e77c      	b.n	8005388 <_strtod_l+0x180>
 800548e:	2700      	movs	r7, #0
 8005490:	1cb3      	adds	r3, r6, #2
 8005492:	931b      	str	r3, [sp, #108]	; 0x6c
 8005494:	78b3      	ldrb	r3, [r6, #2]
 8005496:	e784      	b.n	80053a2 <_strtod_l+0x19a>
 8005498:	2701      	movs	r7, #1
 800549a:	e7f9      	b.n	8005490 <_strtod_l+0x288>
 800549c:	08008fb8 	.word	0x08008fb8
 80054a0:	08008d64 	.word	0x08008d64
 80054a4:	7ff00000 	.word	0x7ff00000
 80054a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d0f9      	beq.n	80054a8 <_strtod_l+0x2a0>
 80054b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80054b8:	2908      	cmp	r1, #8
 80054ba:	f63f af78 	bhi.w	80053ae <_strtod_l+0x1a6>
 80054be:	f04f 0e0a 	mov.w	lr, #10
 80054c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80054c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054c8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	911b      	str	r1, [sp, #108]	; 0x6c
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80054d6:	2d09      	cmp	r5, #9
 80054d8:	d935      	bls.n	8005546 <_strtod_l+0x33e>
 80054da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054dc:	1b49      	subs	r1, r1, r5
 80054de:	2908      	cmp	r1, #8
 80054e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80054e4:	dc02      	bgt.n	80054ec <_strtod_l+0x2e4>
 80054e6:	4565      	cmp	r5, ip
 80054e8:	bfa8      	it	ge
 80054ea:	4665      	movge	r5, ip
 80054ec:	b107      	cbz	r7, 80054f0 <_strtod_l+0x2e8>
 80054ee:	426d      	negs	r5, r5
 80054f0:	2c00      	cmp	r4, #0
 80054f2:	d14c      	bne.n	800558e <_strtod_l+0x386>
 80054f4:	9907      	ldr	r1, [sp, #28]
 80054f6:	4301      	orrs	r1, r0
 80054f8:	f47f aec7 	bne.w	800528a <_strtod_l+0x82>
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	f47f aee0 	bne.w	80052c2 <_strtod_l+0xba>
 8005502:	2b69      	cmp	r3, #105	; 0x69
 8005504:	d026      	beq.n	8005554 <_strtod_l+0x34c>
 8005506:	dc23      	bgt.n	8005550 <_strtod_l+0x348>
 8005508:	2b49      	cmp	r3, #73	; 0x49
 800550a:	d023      	beq.n	8005554 <_strtod_l+0x34c>
 800550c:	2b4e      	cmp	r3, #78	; 0x4e
 800550e:	f47f aed8 	bne.w	80052c2 <_strtod_l+0xba>
 8005512:	499c      	ldr	r1, [pc, #624]	; (8005784 <_strtod_l+0x57c>)
 8005514:	a81b      	add	r0, sp, #108	; 0x6c
 8005516:	f001 fe2b 	bl	8007170 <__match>
 800551a:	2800      	cmp	r0, #0
 800551c:	f43f aed1 	beq.w	80052c2 <_strtod_l+0xba>
 8005520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b28      	cmp	r3, #40	; 0x28
 8005526:	d12c      	bne.n	8005582 <_strtod_l+0x37a>
 8005528:	4997      	ldr	r1, [pc, #604]	; (8005788 <_strtod_l+0x580>)
 800552a:	aa1e      	add	r2, sp, #120	; 0x78
 800552c:	a81b      	add	r0, sp, #108	; 0x6c
 800552e:	f001 fe33 	bl	8007198 <__hexnan>
 8005532:	2805      	cmp	r0, #5
 8005534:	d125      	bne.n	8005582 <_strtod_l+0x37a>
 8005536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005538:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800553c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005540:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005544:	e6a1      	b.n	800528a <_strtod_l+0x82>
 8005546:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800554a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800554e:	e7bc      	b.n	80054ca <_strtod_l+0x2c2>
 8005550:	2b6e      	cmp	r3, #110	; 0x6e
 8005552:	e7dc      	b.n	800550e <_strtod_l+0x306>
 8005554:	498d      	ldr	r1, [pc, #564]	; (800578c <_strtod_l+0x584>)
 8005556:	a81b      	add	r0, sp, #108	; 0x6c
 8005558:	f001 fe0a 	bl	8007170 <__match>
 800555c:	2800      	cmp	r0, #0
 800555e:	f43f aeb0 	beq.w	80052c2 <_strtod_l+0xba>
 8005562:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005564:	498a      	ldr	r1, [pc, #552]	; (8005790 <_strtod_l+0x588>)
 8005566:	3b01      	subs	r3, #1
 8005568:	a81b      	add	r0, sp, #108	; 0x6c
 800556a:	931b      	str	r3, [sp, #108]	; 0x6c
 800556c:	f001 fe00 	bl	8007170 <__match>
 8005570:	b910      	cbnz	r0, 8005578 <_strtod_l+0x370>
 8005572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005574:	3301      	adds	r3, #1
 8005576:	931b      	str	r3, [sp, #108]	; 0x6c
 8005578:	f04f 0800 	mov.w	r8, #0
 800557c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80057a0 <_strtod_l+0x598>
 8005580:	e683      	b.n	800528a <_strtod_l+0x82>
 8005582:	4884      	ldr	r0, [pc, #528]	; (8005794 <_strtod_l+0x58c>)
 8005584:	f002 fda6 	bl	80080d4 <nan>
 8005588:	4680      	mov	r8, r0
 800558a:	4689      	mov	r9, r1
 800558c:	e67d      	b.n	800528a <_strtod_l+0x82>
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	f1bb 0f00 	cmp.w	fp, #0
 8005594:	bf08      	it	eq
 8005596:	46a3      	moveq	fp, r4
 8005598:	1aeb      	subs	r3, r5, r3
 800559a:	2c10      	cmp	r4, #16
 800559c:	9806      	ldr	r0, [sp, #24]
 800559e:	4626      	mov	r6, r4
 80055a0:	9307      	str	r3, [sp, #28]
 80055a2:	bfa8      	it	ge
 80055a4:	2610      	movge	r6, #16
 80055a6:	f7fa ff1d 	bl	80003e4 <__aeabi_ui2d>
 80055aa:	2c09      	cmp	r4, #9
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
 80055b0:	dd13      	ble.n	80055da <_strtod_l+0x3d2>
 80055b2:	4b79      	ldr	r3, [pc, #484]	; (8005798 <_strtod_l+0x590>)
 80055b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055bc:	f7fa ff8c 	bl	80004d8 <__aeabi_dmul>
 80055c0:	4680      	mov	r8, r0
 80055c2:	9805      	ldr	r0, [sp, #20]
 80055c4:	4689      	mov	r9, r1
 80055c6:	f7fa ff0d 	bl	80003e4 <__aeabi_ui2d>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4640      	mov	r0, r8
 80055d0:	4649      	mov	r1, r9
 80055d2:	f7fa fdcb 	bl	800016c <__adddf3>
 80055d6:	4680      	mov	r8, r0
 80055d8:	4689      	mov	r9, r1
 80055da:	2c0f      	cmp	r4, #15
 80055dc:	dc36      	bgt.n	800564c <_strtod_l+0x444>
 80055de:	9b07      	ldr	r3, [sp, #28]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f43f ae52 	beq.w	800528a <_strtod_l+0x82>
 80055e6:	dd22      	ble.n	800562e <_strtod_l+0x426>
 80055e8:	2b16      	cmp	r3, #22
 80055ea:	dc09      	bgt.n	8005600 <_strtod_l+0x3f8>
 80055ec:	4c6a      	ldr	r4, [pc, #424]	; (8005798 <_strtod_l+0x590>)
 80055ee:	4642      	mov	r2, r8
 80055f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80055f4:	464b      	mov	r3, r9
 80055f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80055fa:	f7fa ff6d 	bl	80004d8 <__aeabi_dmul>
 80055fe:	e7c3      	b.n	8005588 <_strtod_l+0x380>
 8005600:	9a07      	ldr	r2, [sp, #28]
 8005602:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005606:	4293      	cmp	r3, r2
 8005608:	db20      	blt.n	800564c <_strtod_l+0x444>
 800560a:	4d63      	ldr	r5, [pc, #396]	; (8005798 <_strtod_l+0x590>)
 800560c:	f1c4 040f 	rsb	r4, r4, #15
 8005610:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005614:	4642      	mov	r2, r8
 8005616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800561a:	464b      	mov	r3, r9
 800561c:	f7fa ff5c 	bl	80004d8 <__aeabi_dmul>
 8005620:	9b07      	ldr	r3, [sp, #28]
 8005622:	1b1c      	subs	r4, r3, r4
 8005624:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005628:	e9d5 2300 	ldrd	r2, r3, [r5]
 800562c:	e7e5      	b.n	80055fa <_strtod_l+0x3f2>
 800562e:	9b07      	ldr	r3, [sp, #28]
 8005630:	3316      	adds	r3, #22
 8005632:	db0b      	blt.n	800564c <_strtod_l+0x444>
 8005634:	9b04      	ldr	r3, [sp, #16]
 8005636:	4a58      	ldr	r2, [pc, #352]	; (8005798 <_strtod_l+0x590>)
 8005638:	1b5d      	subs	r5, r3, r5
 800563a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800563e:	4640      	mov	r0, r8
 8005640:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005644:	4649      	mov	r1, r9
 8005646:	f7fb f871 	bl	800072c <__aeabi_ddiv>
 800564a:	e79d      	b.n	8005588 <_strtod_l+0x380>
 800564c:	9b07      	ldr	r3, [sp, #28]
 800564e:	1ba6      	subs	r6, r4, r6
 8005650:	441e      	add	r6, r3
 8005652:	2e00      	cmp	r6, #0
 8005654:	dd71      	ble.n	800573a <_strtod_l+0x532>
 8005656:	f016 030f 	ands.w	r3, r6, #15
 800565a:	d00a      	beq.n	8005672 <_strtod_l+0x46a>
 800565c:	494e      	ldr	r1, [pc, #312]	; (8005798 <_strtod_l+0x590>)
 800565e:	4642      	mov	r2, r8
 8005660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005668:	464b      	mov	r3, r9
 800566a:	f7fa ff35 	bl	80004d8 <__aeabi_dmul>
 800566e:	4680      	mov	r8, r0
 8005670:	4689      	mov	r9, r1
 8005672:	f036 060f 	bics.w	r6, r6, #15
 8005676:	d050      	beq.n	800571a <_strtod_l+0x512>
 8005678:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800567c:	dd27      	ble.n	80056ce <_strtod_l+0x4c6>
 800567e:	f04f 0b00 	mov.w	fp, #0
 8005682:	f8cd b010 	str.w	fp, [sp, #16]
 8005686:	f8cd b020 	str.w	fp, [sp, #32]
 800568a:	f8cd b018 	str.w	fp, [sp, #24]
 800568e:	2322      	movs	r3, #34	; 0x22
 8005690:	f04f 0800 	mov.w	r8, #0
 8005694:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80057a0 <_strtod_l+0x598>
 8005698:	f8ca 3000 	str.w	r3, [sl]
 800569c:	9b08      	ldr	r3, [sp, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f43f adf3 	beq.w	800528a <_strtod_l+0x82>
 80056a4:	4650      	mov	r0, sl
 80056a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056a8:	f001 fe8c 	bl	80073c4 <_Bfree>
 80056ac:	4650      	mov	r0, sl
 80056ae:	9906      	ldr	r1, [sp, #24]
 80056b0:	f001 fe88 	bl	80073c4 <_Bfree>
 80056b4:	4650      	mov	r0, sl
 80056b6:	9904      	ldr	r1, [sp, #16]
 80056b8:	f001 fe84 	bl	80073c4 <_Bfree>
 80056bc:	4650      	mov	r0, sl
 80056be:	9908      	ldr	r1, [sp, #32]
 80056c0:	f001 fe80 	bl	80073c4 <_Bfree>
 80056c4:	4659      	mov	r1, fp
 80056c6:	4650      	mov	r0, sl
 80056c8:	f001 fe7c 	bl	80073c4 <_Bfree>
 80056cc:	e5dd      	b.n	800528a <_strtod_l+0x82>
 80056ce:	2300      	movs	r3, #0
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	461f      	mov	r7, r3
 80056d6:	1136      	asrs	r6, r6, #4
 80056d8:	2e01      	cmp	r6, #1
 80056da:	dc21      	bgt.n	8005720 <_strtod_l+0x518>
 80056dc:	b10b      	cbz	r3, 80056e2 <_strtod_l+0x4da>
 80056de:	4680      	mov	r8, r0
 80056e0:	4689      	mov	r9, r1
 80056e2:	4b2e      	ldr	r3, [pc, #184]	; (800579c <_strtod_l+0x594>)
 80056e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80056e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80056ec:	4642      	mov	r2, r8
 80056ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f2:	464b      	mov	r3, r9
 80056f4:	f7fa fef0 	bl	80004d8 <__aeabi_dmul>
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <_strtod_l+0x598>)
 80056fa:	460a      	mov	r2, r1
 80056fc:	400b      	ands	r3, r1
 80056fe:	4929      	ldr	r1, [pc, #164]	; (80057a4 <_strtod_l+0x59c>)
 8005700:	4680      	mov	r8, r0
 8005702:	428b      	cmp	r3, r1
 8005704:	d8bb      	bhi.n	800567e <_strtod_l+0x476>
 8005706:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800570a:	428b      	cmp	r3, r1
 800570c:	bf86      	itte	hi
 800570e:	f04f 38ff 	movhi.w	r8, #4294967295
 8005712:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80057a8 <_strtod_l+0x5a0>
 8005716:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800571a:	2300      	movs	r3, #0
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	e07e      	b.n	800581e <_strtod_l+0x616>
 8005720:	07f2      	lsls	r2, r6, #31
 8005722:	d507      	bpl.n	8005734 <_strtod_l+0x52c>
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <_strtod_l+0x594>)
 8005726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fed3 	bl	80004d8 <__aeabi_dmul>
 8005732:	2301      	movs	r3, #1
 8005734:	3701      	adds	r7, #1
 8005736:	1076      	asrs	r6, r6, #1
 8005738:	e7ce      	b.n	80056d8 <_strtod_l+0x4d0>
 800573a:	d0ee      	beq.n	800571a <_strtod_l+0x512>
 800573c:	4276      	negs	r6, r6
 800573e:	f016 020f 	ands.w	r2, r6, #15
 8005742:	d00a      	beq.n	800575a <_strtod_l+0x552>
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <_strtod_l+0x590>)
 8005746:	4640      	mov	r0, r8
 8005748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574c:	4649      	mov	r1, r9
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa ffeb 	bl	800072c <__aeabi_ddiv>
 8005756:	4680      	mov	r8, r0
 8005758:	4689      	mov	r9, r1
 800575a:	1136      	asrs	r6, r6, #4
 800575c:	d0dd      	beq.n	800571a <_strtod_l+0x512>
 800575e:	2e1f      	cmp	r6, #31
 8005760:	dd24      	ble.n	80057ac <_strtod_l+0x5a4>
 8005762:	f04f 0b00 	mov.w	fp, #0
 8005766:	f8cd b010 	str.w	fp, [sp, #16]
 800576a:	f8cd b020 	str.w	fp, [sp, #32]
 800576e:	f8cd b018 	str.w	fp, [sp, #24]
 8005772:	2322      	movs	r3, #34	; 0x22
 8005774:	f04f 0800 	mov.w	r8, #0
 8005778:	f04f 0900 	mov.w	r9, #0
 800577c:	f8ca 3000 	str.w	r3, [sl]
 8005780:	e78c      	b.n	800569c <_strtod_l+0x494>
 8005782:	bf00      	nop
 8005784:	08008d35 	.word	0x08008d35
 8005788:	08008d78 	.word	0x08008d78
 800578c:	08008d2d 	.word	0x08008d2d
 8005790:	08008ebc 	.word	0x08008ebc
 8005794:	08009178 	.word	0x08009178
 8005798:	08009058 	.word	0x08009058
 800579c:	08009030 	.word	0x08009030
 80057a0:	7ff00000 	.word	0x7ff00000
 80057a4:	7ca00000 	.word	0x7ca00000
 80057a8:	7fefffff 	.word	0x7fefffff
 80057ac:	f016 0310 	ands.w	r3, r6, #16
 80057b0:	bf18      	it	ne
 80057b2:	236a      	movne	r3, #106	; 0x6a
 80057b4:	4640      	mov	r0, r8
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	4649      	mov	r1, r9
 80057ba:	2300      	movs	r3, #0
 80057bc:	4fb2      	ldr	r7, [pc, #712]	; (8005a88 <_strtod_l+0x880>)
 80057be:	07f2      	lsls	r2, r6, #31
 80057c0:	d504      	bpl.n	80057cc <_strtod_l+0x5c4>
 80057c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c6:	f7fa fe87 	bl	80004d8 <__aeabi_dmul>
 80057ca:	2301      	movs	r3, #1
 80057cc:	1076      	asrs	r6, r6, #1
 80057ce:	f107 0708 	add.w	r7, r7, #8
 80057d2:	d1f4      	bne.n	80057be <_strtod_l+0x5b6>
 80057d4:	b10b      	cbz	r3, 80057da <_strtod_l+0x5d2>
 80057d6:	4680      	mov	r8, r0
 80057d8:	4689      	mov	r9, r1
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	b1bb      	cbz	r3, 800580e <_strtod_l+0x606>
 80057de:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80057e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	4649      	mov	r1, r9
 80057ea:	dd10      	ble.n	800580e <_strtod_l+0x606>
 80057ec:	2b1f      	cmp	r3, #31
 80057ee:	f340 812b 	ble.w	8005a48 <_strtod_l+0x840>
 80057f2:	2b34      	cmp	r3, #52	; 0x34
 80057f4:	bfd8      	it	le
 80057f6:	f04f 32ff 	movle.w	r2, #4294967295
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	bfcf      	iteee	gt
 8005800:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005804:	3b20      	suble	r3, #32
 8005806:	fa02 f303 	lslle.w	r3, r2, r3
 800580a:	ea03 0901 	andle.w	r9, r3, r1
 800580e:	2200      	movs	r2, #0
 8005810:	2300      	movs	r3, #0
 8005812:	4640      	mov	r0, r8
 8005814:	4649      	mov	r1, r9
 8005816:	f7fb f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800581a:	2800      	cmp	r0, #0
 800581c:	d1a1      	bne.n	8005762 <_strtod_l+0x55a>
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	465a      	mov	r2, fp
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4650      	mov	r0, sl
 8005826:	4623      	mov	r3, r4
 8005828:	9908      	ldr	r1, [sp, #32]
 800582a:	f001 fe37 	bl	800749c <__s2b>
 800582e:	9008      	str	r0, [sp, #32]
 8005830:	2800      	cmp	r0, #0
 8005832:	f43f af24 	beq.w	800567e <_strtod_l+0x476>
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	f04f 0b00 	mov.w	fp, #0
 800583c:	1b5d      	subs	r5, r3, r5
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	f8cd b010 	str.w	fp, [sp, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	bfb4      	ite	lt
 8005848:	462b      	movlt	r3, r5
 800584a:	2300      	movge	r3, #0
 800584c:	930e      	str	r3, [sp, #56]	; 0x38
 800584e:	9b07      	ldr	r3, [sp, #28]
 8005850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005854:	9316      	str	r3, [sp, #88]	; 0x58
 8005856:	9b08      	ldr	r3, [sp, #32]
 8005858:	4650      	mov	r0, sl
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	f001 fd72 	bl	8007344 <_Balloc>
 8005860:	9006      	str	r0, [sp, #24]
 8005862:	2800      	cmp	r0, #0
 8005864:	f43f af13 	beq.w	800568e <_strtod_l+0x486>
 8005868:	9b08      	ldr	r3, [sp, #32]
 800586a:	300c      	adds	r0, #12
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	f103 010c 	add.w	r1, r3, #12
 8005872:	3202      	adds	r2, #2
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	f001 fd57 	bl	8007328 <memcpy>
 800587a:	ab1e      	add	r3, sp, #120	; 0x78
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	ab1d      	add	r3, sp, #116	; 0x74
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4642      	mov	r2, r8
 8005884:	464b      	mov	r3, r9
 8005886:	4650      	mov	r0, sl
 8005888:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800588c:	f002 f944 	bl	8007b18 <__d2b>
 8005890:	901c      	str	r0, [sp, #112]	; 0x70
 8005892:	2800      	cmp	r0, #0
 8005894:	f43f aefb 	beq.w	800568e <_strtod_l+0x486>
 8005898:	2101      	movs	r1, #1
 800589a:	4650      	mov	r0, sl
 800589c:	f001 fe96 	bl	80075cc <__i2b>
 80058a0:	4603      	mov	r3, r0
 80058a2:	9004      	str	r0, [sp, #16]
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f43f aef2 	beq.w	800568e <_strtod_l+0x486>
 80058aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80058ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	bfab      	itete	ge
 80058b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80058b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80058b6:	18ee      	addge	r6, r5, r3
 80058b8:	1b5c      	sublt	r4, r3, r5
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	bfa8      	it	ge
 80058be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80058c0:	eba5 0503 	sub.w	r5, r5, r3
 80058c4:	4415      	add	r5, r2
 80058c6:	4b71      	ldr	r3, [pc, #452]	; (8005a8c <_strtod_l+0x884>)
 80058c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80058cc:	bfb8      	it	lt
 80058ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80058d0:	429d      	cmp	r5, r3
 80058d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80058d6:	f280 80c9 	bge.w	8005a6c <_strtod_l+0x864>
 80058da:	1b5b      	subs	r3, r3, r5
 80058dc:	2b1f      	cmp	r3, #31
 80058de:	f04f 0701 	mov.w	r7, #1
 80058e2:	eba2 0203 	sub.w	r2, r2, r3
 80058e6:	f300 80b6 	bgt.w	8005a56 <_strtod_l+0x84e>
 80058ea:	2500      	movs	r5, #0
 80058ec:	fa07 f303 	lsl.w	r3, r7, r3
 80058f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058f2:	18b7      	adds	r7, r6, r2
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	42be      	cmp	r6, r7
 80058f8:	4414      	add	r4, r2
 80058fa:	441c      	add	r4, r3
 80058fc:	4633      	mov	r3, r6
 80058fe:	bfa8      	it	ge
 8005900:	463b      	movge	r3, r7
 8005902:	42a3      	cmp	r3, r4
 8005904:	bfa8      	it	ge
 8005906:	4623      	movge	r3, r4
 8005908:	2b00      	cmp	r3, #0
 800590a:	bfc2      	ittt	gt
 800590c:	1aff      	subgt	r7, r7, r3
 800590e:	1ae4      	subgt	r4, r4, r3
 8005910:	1af6      	subgt	r6, r6, r3
 8005912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	dd17      	ble.n	8005948 <_strtod_l+0x740>
 8005918:	461a      	mov	r2, r3
 800591a:	4650      	mov	r0, sl
 800591c:	9904      	ldr	r1, [sp, #16]
 800591e:	f001 ff0f 	bl	8007740 <__pow5mult>
 8005922:	9004      	str	r0, [sp, #16]
 8005924:	2800      	cmp	r0, #0
 8005926:	f43f aeb2 	beq.w	800568e <_strtod_l+0x486>
 800592a:	4601      	mov	r1, r0
 800592c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800592e:	4650      	mov	r0, sl
 8005930:	f001 fe62 	bl	80075f8 <__multiply>
 8005934:	9009      	str	r0, [sp, #36]	; 0x24
 8005936:	2800      	cmp	r0, #0
 8005938:	f43f aea9 	beq.w	800568e <_strtod_l+0x486>
 800593c:	4650      	mov	r0, sl
 800593e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005940:	f001 fd40 	bl	80073c4 <_Bfree>
 8005944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005946:	931c      	str	r3, [sp, #112]	; 0x70
 8005948:	2f00      	cmp	r7, #0
 800594a:	f300 8093 	bgt.w	8005a74 <_strtod_l+0x86c>
 800594e:	9b07      	ldr	r3, [sp, #28]
 8005950:	2b00      	cmp	r3, #0
 8005952:	dd08      	ble.n	8005966 <_strtod_l+0x75e>
 8005954:	4650      	mov	r0, sl
 8005956:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005958:	9906      	ldr	r1, [sp, #24]
 800595a:	f001 fef1 	bl	8007740 <__pow5mult>
 800595e:	9006      	str	r0, [sp, #24]
 8005960:	2800      	cmp	r0, #0
 8005962:	f43f ae94 	beq.w	800568e <_strtod_l+0x486>
 8005966:	2c00      	cmp	r4, #0
 8005968:	dd08      	ble.n	800597c <_strtod_l+0x774>
 800596a:	4622      	mov	r2, r4
 800596c:	4650      	mov	r0, sl
 800596e:	9906      	ldr	r1, [sp, #24]
 8005970:	f001 ff40 	bl	80077f4 <__lshift>
 8005974:	9006      	str	r0, [sp, #24]
 8005976:	2800      	cmp	r0, #0
 8005978:	f43f ae89 	beq.w	800568e <_strtod_l+0x486>
 800597c:	2e00      	cmp	r6, #0
 800597e:	dd08      	ble.n	8005992 <_strtod_l+0x78a>
 8005980:	4632      	mov	r2, r6
 8005982:	4650      	mov	r0, sl
 8005984:	9904      	ldr	r1, [sp, #16]
 8005986:	f001 ff35 	bl	80077f4 <__lshift>
 800598a:	9004      	str	r0, [sp, #16]
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f ae7e 	beq.w	800568e <_strtod_l+0x486>
 8005992:	4650      	mov	r0, sl
 8005994:	9a06      	ldr	r2, [sp, #24]
 8005996:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005998:	f001 ffb4 	bl	8007904 <__mdiff>
 800599c:	4683      	mov	fp, r0
 800599e:	2800      	cmp	r0, #0
 80059a0:	f43f ae75 	beq.w	800568e <_strtod_l+0x486>
 80059a4:	2400      	movs	r4, #0
 80059a6:	68c3      	ldr	r3, [r0, #12]
 80059a8:	9904      	ldr	r1, [sp, #16]
 80059aa:	60c4      	str	r4, [r0, #12]
 80059ac:	930d      	str	r3, [sp, #52]	; 0x34
 80059ae:	f001 ff8d 	bl	80078cc <__mcmp>
 80059b2:	42a0      	cmp	r0, r4
 80059b4:	da70      	bge.n	8005a98 <_strtod_l+0x890>
 80059b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b8:	ea53 0308 	orrs.w	r3, r3, r8
 80059bc:	f040 8096 	bne.w	8005aec <_strtod_l+0x8e4>
 80059c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8091 	bne.w	8005aec <_strtod_l+0x8e4>
 80059ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ce:	0d1b      	lsrs	r3, r3, #20
 80059d0:	051b      	lsls	r3, r3, #20
 80059d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80059d6:	f240 8089 	bls.w	8005aec <_strtod_l+0x8e4>
 80059da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80059de:	b923      	cbnz	r3, 80059ea <_strtod_l+0x7e2>
 80059e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f340 8081 	ble.w	8005aec <_strtod_l+0x8e4>
 80059ea:	4659      	mov	r1, fp
 80059ec:	2201      	movs	r2, #1
 80059ee:	4650      	mov	r0, sl
 80059f0:	f001 ff00 	bl	80077f4 <__lshift>
 80059f4:	9904      	ldr	r1, [sp, #16]
 80059f6:	4683      	mov	fp, r0
 80059f8:	f001 ff68 	bl	80078cc <__mcmp>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	dd75      	ble.n	8005aec <_strtod_l+0x8e4>
 8005a00:	9905      	ldr	r1, [sp, #20]
 8005a02:	464b      	mov	r3, r9
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <_strtod_l+0x888>)
 8005a06:	2900      	cmp	r1, #0
 8005a08:	f000 8091 	beq.w	8005b2e <_strtod_l+0x926>
 8005a0c:	ea02 0109 	and.w	r1, r2, r9
 8005a10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a14:	f300 808b 	bgt.w	8005b2e <_strtod_l+0x926>
 8005a18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005a1c:	f77f aea9 	ble.w	8005772 <_strtod_l+0x56a>
 8005a20:	2300      	movs	r3, #0
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <_strtod_l+0x88c>)
 8005a24:	4640      	mov	r0, r8
 8005a26:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005a30:	f7fa fd52 	bl	80004d8 <__aeabi_dmul>
 8005a34:	460b      	mov	r3, r1
 8005a36:	4303      	orrs	r3, r0
 8005a38:	bf08      	it	eq
 8005a3a:	2322      	moveq	r3, #34	; 0x22
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	4689      	mov	r9, r1
 8005a40:	bf08      	it	eq
 8005a42:	f8ca 3000 	streq.w	r3, [sl]
 8005a46:	e62d      	b.n	80056a4 <_strtod_l+0x49c>
 8005a48:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	ea03 0808 	and.w	r8, r3, r8
 8005a54:	e6db      	b.n	800580e <_strtod_l+0x606>
 8005a56:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a5a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a5e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a62:	35e2      	adds	r5, #226	; 0xe2
 8005a64:	fa07 f505 	lsl.w	r5, r7, r5
 8005a68:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a6a:	e742      	b.n	80058f2 <_strtod_l+0x6ea>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	2500      	movs	r5, #0
 8005a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a72:	e73e      	b.n	80058f2 <_strtod_l+0x6ea>
 8005a74:	463a      	mov	r2, r7
 8005a76:	4650      	mov	r0, sl
 8005a78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a7a:	f001 febb 	bl	80077f4 <__lshift>
 8005a7e:	901c      	str	r0, [sp, #112]	; 0x70
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f47f af64 	bne.w	800594e <_strtod_l+0x746>
 8005a86:	e602      	b.n	800568e <_strtod_l+0x486>
 8005a88:	08008d90 	.word	0x08008d90
 8005a8c:	fffffc02 	.word	0xfffffc02
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	39500000 	.word	0x39500000
 8005a98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a9c:	d166      	bne.n	8005b6c <_strtod_l+0x964>
 8005a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005aa4:	b35a      	cbz	r2, 8005afe <_strtod_l+0x8f6>
 8005aa6:	4a9c      	ldr	r2, [pc, #624]	; (8005d18 <_strtod_l+0xb10>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d12c      	bne.n	8005b06 <_strtod_l+0x8fe>
 8005aac:	9b05      	ldr	r3, [sp, #20]
 8005aae:	4640      	mov	r0, r8
 8005ab0:	b303      	cbz	r3, 8005af4 <_strtod_l+0x8ec>
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	4a99      	ldr	r2, [pc, #612]	; (8005d1c <_strtod_l+0xb14>)
 8005ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8005aba:	401a      	ands	r2, r3
 8005abc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ac0:	d81b      	bhi.n	8005afa <_strtod_l+0x8f2>
 8005ac2:	0d12      	lsrs	r2, r2, #20
 8005ac4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	4298      	cmp	r0, r3
 8005ace:	d11a      	bne.n	8005b06 <_strtod_l+0x8fe>
 8005ad0:	4b93      	ldr	r3, [pc, #588]	; (8005d20 <_strtod_l+0xb18>)
 8005ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d102      	bne.n	8005ade <_strtod_l+0x8d6>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f add8 	beq.w	800568e <_strtod_l+0x486>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	4b8e      	ldr	r3, [pc, #568]	; (8005d1c <_strtod_l+0xb14>)
 8005ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d196      	bne.n	8005a20 <_strtod_l+0x818>
 8005af2:	e5d7      	b.n	80056a4 <_strtod_l+0x49c>
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
 8005af8:	e7e8      	b.n	8005acc <_strtod_l+0x8c4>
 8005afa:	460b      	mov	r3, r1
 8005afc:	e7e6      	b.n	8005acc <_strtod_l+0x8c4>
 8005afe:	ea53 0308 	orrs.w	r3, r3, r8
 8005b02:	f43f af7d 	beq.w	8005a00 <_strtod_l+0x7f8>
 8005b06:	b1e5      	cbz	r5, 8005b42 <_strtod_l+0x93a>
 8005b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0a:	421d      	tst	r5, r3
 8005b0c:	d0ee      	beq.n	8005aec <_strtod_l+0x8e4>
 8005b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	9a05      	ldr	r2, [sp, #20]
 8005b16:	b1c3      	cbz	r3, 8005b4a <_strtod_l+0x942>
 8005b18:	f7ff fb52 	bl	80051c0 <sulp>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b24:	f7fa fb22 	bl	800016c <__adddf3>
 8005b28:	4680      	mov	r8, r0
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	e7de      	b.n	8005aec <_strtod_l+0x8e4>
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b34:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005b38:	f04f 38ff 	mov.w	r8, #4294967295
 8005b3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005b40:	e7d4      	b.n	8005aec <_strtod_l+0x8e4>
 8005b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b44:	ea13 0f08 	tst.w	r3, r8
 8005b48:	e7e0      	b.n	8005b0c <_strtod_l+0x904>
 8005b4a:	f7ff fb39 	bl	80051c0 <sulp>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b56:	f7fa fb07 	bl	8000168 <__aeabi_dsub>
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4680      	mov	r8, r0
 8005b60:	4689      	mov	r9, r1
 8005b62:	f7fa ff21 	bl	80009a8 <__aeabi_dcmpeq>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d0c0      	beq.n	8005aec <_strtod_l+0x8e4>
 8005b6a:	e602      	b.n	8005772 <_strtod_l+0x56a>
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	9904      	ldr	r1, [sp, #16]
 8005b70:	f002 f82e 	bl	8007bd0 <__ratio>
 8005b74:	2200      	movs	r2, #0
 8005b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	f7fa ff27 	bl	80009d0 <__aeabi_dcmple>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d075      	beq.n	8005c72 <_strtod_l+0xa6a>
 8005b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d047      	beq.n	8005c1c <_strtod_l+0xa14>
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	4f65      	ldr	r7, [pc, #404]	; (8005d24 <_strtod_l+0xb1c>)
 8005b90:	4d64      	ldr	r5, [pc, #400]	; (8005d24 <_strtod_l+0xb1c>)
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	051b      	lsls	r3, r3, #20
 8005b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba0:	4b61      	ldr	r3, [pc, #388]	; (8005d28 <_strtod_l+0xb20>)
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	f040 80c8 	bne.w	8005d38 <_strtod_l+0xb30>
 8005ba8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005bb8:	4649      	mov	r1, r9
 8005bba:	f001 ff33 	bl	8007a24 <__ulp>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa fc87 	bl	80004d8 <__aeabi_dmul>
 8005bca:	4642      	mov	r2, r8
 8005bcc:	464b      	mov	r3, r9
 8005bce:	f7fa facd 	bl	800016c <__adddf3>
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4951      	ldr	r1, [pc, #324]	; (8005d1c <_strtod_l+0xb14>)
 8005bd6:	4a55      	ldr	r2, [pc, #340]	; (8005d2c <_strtod_l+0xb24>)
 8005bd8:	4019      	ands	r1, r3
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	4680      	mov	r8, r0
 8005bde:	d95e      	bls.n	8005c9e <_strtod_l+0xa96>
 8005be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d103      	bne.n	8005bf2 <_strtod_l+0x9ea>
 8005bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bec:	3301      	adds	r3, #1
 8005bee:	f43f ad4e 	beq.w	800568e <_strtod_l+0x486>
 8005bf2:	f04f 38ff 	mov.w	r8, #4294967295
 8005bf6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005d20 <_strtod_l+0xb18>
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bfe:	f001 fbe1 	bl	80073c4 <_Bfree>
 8005c02:	4650      	mov	r0, sl
 8005c04:	9906      	ldr	r1, [sp, #24]
 8005c06:	f001 fbdd 	bl	80073c4 <_Bfree>
 8005c0a:	4650      	mov	r0, sl
 8005c0c:	9904      	ldr	r1, [sp, #16]
 8005c0e:	f001 fbd9 	bl	80073c4 <_Bfree>
 8005c12:	4659      	mov	r1, fp
 8005c14:	4650      	mov	r0, sl
 8005c16:	f001 fbd5 	bl	80073c4 <_Bfree>
 8005c1a:	e61c      	b.n	8005856 <_strtod_l+0x64e>
 8005c1c:	f1b8 0f00 	cmp.w	r8, #0
 8005c20:	d119      	bne.n	8005c56 <_strtod_l+0xa4e>
 8005c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c28:	b9e3      	cbnz	r3, 8005c64 <_strtod_l+0xa5c>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4b3c      	ldr	r3, [pc, #240]	; (8005d24 <_strtod_l+0xb1c>)
 8005c32:	f7fa fec3 	bl	80009bc <__aeabi_dcmplt>
 8005c36:	b9c8      	cbnz	r0, 8005c6c <_strtod_l+0xa64>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4b3c      	ldr	r3, [pc, #240]	; (8005d30 <_strtod_l+0xb28>)
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	4604      	mov	r4, r0
 8005c46:	460d      	mov	r5, r1
 8005c48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c4c:	9418      	str	r4, [sp, #96]	; 0x60
 8005c4e:	9319      	str	r3, [sp, #100]	; 0x64
 8005c50:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005c54:	e79d      	b.n	8005b92 <_strtod_l+0x98a>
 8005c56:	f1b8 0f01 	cmp.w	r8, #1
 8005c5a:	d103      	bne.n	8005c64 <_strtod_l+0xa5c>
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f43f ad87 	beq.w	8005772 <_strtod_l+0x56a>
 8005c64:	2600      	movs	r6, #0
 8005c66:	2400      	movs	r4, #0
 8005c68:	4f32      	ldr	r7, [pc, #200]	; (8005d34 <_strtod_l+0xb2c>)
 8005c6a:	e791      	b.n	8005b90 <_strtod_l+0x988>
 8005c6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005c6e:	4d30      	ldr	r5, [pc, #192]	; (8005d30 <_strtod_l+0xb28>)
 8005c70:	e7ea      	b.n	8005c48 <_strtod_l+0xa40>
 8005c72:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <_strtod_l+0xb28>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa fc2d 	bl	80004d8 <__aeabi_dmul>
 8005c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	b933      	cbnz	r3, 8005c94 <_strtod_l+0xa8c>
 8005c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c8a:	9010      	str	r0, [sp, #64]	; 0x40
 8005c8c:	9311      	str	r3, [sp, #68]	; 0x44
 8005c8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c92:	e77e      	b.n	8005b92 <_strtod_l+0x98a>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005c9c:	e7f7      	b.n	8005c8e <_strtod_l+0xa86>
 8005c9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005ca2:	9b05      	ldr	r3, [sp, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1a8      	bne.n	8005bfa <_strtod_l+0x9f2>
 8005ca8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cae:	0d1b      	lsrs	r3, r3, #20
 8005cb0:	051b      	lsls	r3, r3, #20
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1a1      	bne.n	8005bfa <_strtod_l+0x9f2>
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fb f863 	bl	8000d84 <__aeabi_d2lz>
 8005cbe:	f7fa fbdd 	bl	800047c <__aeabi_l2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa fa4d 	bl	8000168 <__aeabi_dsub>
 8005cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cd4:	ea43 0308 	orr.w	r3, r3, r8
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	4604      	mov	r4, r0
 8005cdc:	460d      	mov	r5, r1
 8005cde:	d066      	beq.n	8005dae <_strtod_l+0xba6>
 8005ce0:	a309      	add	r3, pc, #36	; (adr r3, 8005d08 <_strtod_l+0xb00>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fe69 	bl	80009bc <__aeabi_dcmplt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f47f acda 	bne.w	80056a4 <_strtod_l+0x49c>
 8005cf0:	a307      	add	r3, pc, #28	; (adr r3, 8005d10 <_strtod_l+0xb08>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f7fa fe7d 	bl	80009f8 <__aeabi_dcmpgt>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f43f af7b 	beq.w	8005bfa <_strtod_l+0x9f2>
 8005d04:	e4ce      	b.n	80056a4 <_strtod_l+0x49c>
 8005d06:	bf00      	nop
 8005d08:	94a03595 	.word	0x94a03595
 8005d0c:	3fdfffff 	.word	0x3fdfffff
 8005d10:	35afe535 	.word	0x35afe535
 8005d14:	3fe00000 	.word	0x3fe00000
 8005d18:	000fffff 	.word	0x000fffff
 8005d1c:	7ff00000 	.word	0x7ff00000
 8005d20:	7fefffff 	.word	0x7fefffff
 8005d24:	3ff00000 	.word	0x3ff00000
 8005d28:	7fe00000 	.word	0x7fe00000
 8005d2c:	7c9fffff 	.word	0x7c9fffff
 8005d30:	3fe00000 	.word	0x3fe00000
 8005d34:	bff00000 	.word	0xbff00000
 8005d38:	9b05      	ldr	r3, [sp, #20]
 8005d3a:	b313      	cbz	r3, 8005d82 <_strtod_l+0xb7a>
 8005d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d42:	d81e      	bhi.n	8005d82 <_strtod_l+0xb7a>
 8005d44:	a326      	add	r3, pc, #152	; (adr r3, 8005de0 <_strtod_l+0xbd8>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fe3f 	bl	80009d0 <__aeabi_dcmple>
 8005d52:	b190      	cbz	r0, 8005d7a <_strtod_l+0xb72>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7fa fe96 	bl	8000a88 <__aeabi_d2uiz>
 8005d5c:	2801      	cmp	r0, #1
 8005d5e:	bf38      	it	cc
 8005d60:	2001      	movcc	r0, #1
 8005d62:	f7fa fb3f 	bl	80003e4 <__aeabi_ui2d>
 8005d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	b9d3      	cbnz	r3, 8005da4 <_strtod_l+0xb9c>
 8005d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d72:	9012      	str	r0, [sp, #72]	; 0x48
 8005d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005d7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005d80:	1a9f      	subs	r7, r3, r2
 8005d82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d86:	f001 fe4d 	bl	8007a24 <__ulp>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fba1 	bl	80004d8 <__aeabi_dmul>
 8005d96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d9a:	f7fa f9e7 	bl	800016c <__adddf3>
 8005d9e:	4680      	mov	r8, r0
 8005da0:	4689      	mov	r9, r1
 8005da2:	e77e      	b.n	8005ca2 <_strtod_l+0xa9a>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005dac:	e7e3      	b.n	8005d76 <_strtod_l+0xb6e>
 8005dae:	a30e      	add	r3, pc, #56	; (adr r3, 8005de8 <_strtod_l+0xbe0>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fe02 	bl	80009bc <__aeabi_dcmplt>
 8005db8:	e7a1      	b.n	8005cfe <_strtod_l+0xaf6>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8005dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	f7ff ba65 	b.w	8005292 <_strtod_l+0x8a>
 8005dc8:	2b65      	cmp	r3, #101	; 0x65
 8005dca:	f43f ab5c 	beq.w	8005486 <_strtod_l+0x27e>
 8005dce:	2b45      	cmp	r3, #69	; 0x45
 8005dd0:	f43f ab59 	beq.w	8005486 <_strtod_l+0x27e>
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f7ff bb8d 	b.w	80054f4 <_strtod_l+0x2ec>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	ffc00000 	.word	0xffc00000
 8005de4:	41dfffff 	.word	0x41dfffff
 8005de8:	94a03595 	.word	0x94a03595
 8005dec:	3fcfffff 	.word	0x3fcfffff

08005df0 <_strtod_r>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <_strtod_r+0x8>)
 8005df2:	f7ff ba09 	b.w	8005208 <_strtod_l>
 8005df6:	bf00      	nop
 8005df8:	2000007c 	.word	0x2000007c

08005dfc <_strtol_l.isra.0>:
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e02:	4686      	mov	lr, r0
 8005e04:	d001      	beq.n	8005e0a <_strtol_l.isra.0+0xe>
 8005e06:	2b24      	cmp	r3, #36	; 0x24
 8005e08:	d906      	bls.n	8005e18 <_strtol_l.isra.0+0x1c>
 8005e0a:	f7fe fb11 	bl	8004430 <__errno>
 8005e0e:	2316      	movs	r3, #22
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	2000      	movs	r0, #0
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	468c      	mov	ip, r1
 8005e1a:	4e3a      	ldr	r6, [pc, #232]	; (8005f04 <_strtol_l.isra.0+0x108>)
 8005e1c:	4660      	mov	r0, ip
 8005e1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005e22:	5da5      	ldrb	r5, [r4, r6]
 8005e24:	f015 0508 	ands.w	r5, r5, #8
 8005e28:	d1f8      	bne.n	8005e1c <_strtol_l.isra.0+0x20>
 8005e2a:	2c2d      	cmp	r4, #45	; 0x2d
 8005e2c:	d133      	bne.n	8005e96 <_strtol_l.isra.0+0x9a>
 8005e2e:	f04f 0801 	mov.w	r8, #1
 8005e32:	f89c 4000 	ldrb.w	r4, [ip]
 8005e36:	f100 0c02 	add.w	ip, r0, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d05d      	beq.n	8005efa <_strtol_l.isra.0+0xfe>
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d10c      	bne.n	8005e5c <_strtol_l.isra.0+0x60>
 8005e42:	2c30      	cmp	r4, #48	; 0x30
 8005e44:	d10a      	bne.n	8005e5c <_strtol_l.isra.0+0x60>
 8005e46:	f89c 0000 	ldrb.w	r0, [ip]
 8005e4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e4e:	2858      	cmp	r0, #88	; 0x58
 8005e50:	d14e      	bne.n	8005ef0 <_strtol_l.isra.0+0xf4>
 8005e52:	2310      	movs	r3, #16
 8005e54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005e58:	f10c 0c02 	add.w	ip, ip, #2
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005e62:	3f01      	subs	r7, #1
 8005e64:	fbb7 f9f3 	udiv	r9, r7, r3
 8005e68:	4628      	mov	r0, r5
 8005e6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8005e6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005e72:	2e09      	cmp	r6, #9
 8005e74:	d818      	bhi.n	8005ea8 <_strtol_l.isra.0+0xac>
 8005e76:	4634      	mov	r4, r6
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	dd24      	ble.n	8005ec6 <_strtol_l.isra.0+0xca>
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	db1f      	blt.n	8005ec0 <_strtol_l.isra.0+0xc4>
 8005e80:	4581      	cmp	r9, r0
 8005e82:	d31d      	bcc.n	8005ec0 <_strtol_l.isra.0+0xc4>
 8005e84:	d101      	bne.n	8005e8a <_strtol_l.isra.0+0x8e>
 8005e86:	45a2      	cmp	sl, r4
 8005e88:	db1a      	blt.n	8005ec0 <_strtol_l.isra.0+0xc4>
 8005e8a:	2501      	movs	r5, #1
 8005e8c:	fb00 4003 	mla	r0, r0, r3, r4
 8005e90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005e94:	e7eb      	b.n	8005e6e <_strtol_l.isra.0+0x72>
 8005e96:	2c2b      	cmp	r4, #43	; 0x2b
 8005e98:	bf08      	it	eq
 8005e9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005e9e:	46a8      	mov	r8, r5
 8005ea0:	bf08      	it	eq
 8005ea2:	f100 0c02 	addeq.w	ip, r0, #2
 8005ea6:	e7c8      	b.n	8005e3a <_strtol_l.isra.0+0x3e>
 8005ea8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005eac:	2e19      	cmp	r6, #25
 8005eae:	d801      	bhi.n	8005eb4 <_strtol_l.isra.0+0xb8>
 8005eb0:	3c37      	subs	r4, #55	; 0x37
 8005eb2:	e7e1      	b.n	8005e78 <_strtol_l.isra.0+0x7c>
 8005eb4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005eb8:	2e19      	cmp	r6, #25
 8005eba:	d804      	bhi.n	8005ec6 <_strtol_l.isra.0+0xca>
 8005ebc:	3c57      	subs	r4, #87	; 0x57
 8005ebe:	e7db      	b.n	8005e78 <_strtol_l.isra.0+0x7c>
 8005ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ec4:	e7e4      	b.n	8005e90 <_strtol_l.isra.0+0x94>
 8005ec6:	2d00      	cmp	r5, #0
 8005ec8:	da08      	bge.n	8005edc <_strtol_l.isra.0+0xe0>
 8005eca:	2322      	movs	r3, #34	; 0x22
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f8ce 3000 	str.w	r3, [lr]
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d09e      	beq.n	8005e14 <_strtol_l.isra.0+0x18>
 8005ed6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005eda:	e007      	b.n	8005eec <_strtol_l.isra.0+0xf0>
 8005edc:	f1b8 0f00 	cmp.w	r8, #0
 8005ee0:	d000      	beq.n	8005ee4 <_strtol_l.isra.0+0xe8>
 8005ee2:	4240      	negs	r0, r0
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d095      	beq.n	8005e14 <_strtol_l.isra.0+0x18>
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	d1f4      	bne.n	8005ed6 <_strtol_l.isra.0+0xda>
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	e791      	b.n	8005e14 <_strtol_l.isra.0+0x18>
 8005ef0:	2430      	movs	r4, #48	; 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1b2      	bne.n	8005e5c <_strtol_l.isra.0+0x60>
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	e7b0      	b.n	8005e5c <_strtol_l.isra.0+0x60>
 8005efa:	2c30      	cmp	r4, #48	; 0x30
 8005efc:	d0a3      	beq.n	8005e46 <_strtol_l.isra.0+0x4a>
 8005efe:	230a      	movs	r3, #10
 8005f00:	e7ac      	b.n	8005e5c <_strtol_l.isra.0+0x60>
 8005f02:	bf00      	nop
 8005f04:	08008db9 	.word	0x08008db9

08005f08 <_strtol_r>:
 8005f08:	f7ff bf78 	b.w	8005dfc <_strtol_l.isra.0>

08005f0c <quorem>:
 8005f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	6903      	ldr	r3, [r0, #16]
 8005f12:	690c      	ldr	r4, [r1, #16]
 8005f14:	4607      	mov	r7, r0
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	f2c0 8083 	blt.w	8006022 <quorem+0x116>
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	f100 0514 	add.w	r5, r0, #20
 8005f22:	f101 0814 	add.w	r8, r1, #20
 8005f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f34:	3301      	adds	r3, #1
 8005f36:	429a      	cmp	r2, r3
 8005f38:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f44:	d332      	bcc.n	8005fac <quorem+0xa0>
 8005f46:	f04f 0e00 	mov.w	lr, #0
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	46ac      	mov	ip, r5
 8005f4e:	46f2      	mov	sl, lr
 8005f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f54:	b293      	uxth	r3, r2
 8005f56:	fb06 e303 	mla	r3, r6, r3, lr
 8005f5a:	0c12      	lsrs	r2, r2, #16
 8005f5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f60:	fb06 e202 	mla	r2, r6, r2, lr
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ebaa 0303 	sub.w	r3, sl, r3
 8005f6a:	f8dc a000 	ldr.w	sl, [ip]
 8005f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f72:	fa1f fa8a 	uxth.w	sl, sl
 8005f76:	4453      	add	r3, sl
 8005f78:	fa1f fa82 	uxth.w	sl, r2
 8005f7c:	f8dc 2000 	ldr.w	r2, [ip]
 8005f80:	4581      	cmp	r9, r0
 8005f82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f94:	f84c 3b04 	str.w	r3, [ip], #4
 8005f98:	d2da      	bcs.n	8005f50 <quorem+0x44>
 8005f9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f9e:	b92b      	cbnz	r3, 8005fac <quorem+0xa0>
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	d32f      	bcc.n	800600a <quorem+0xfe>
 8005faa:	613c      	str	r4, [r7, #16]
 8005fac:	4638      	mov	r0, r7
 8005fae:	f001 fc8d 	bl	80078cc <__mcmp>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	db25      	blt.n	8006002 <quorem+0xf6>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f04f 0c00 	mov.w	ip, #0
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	f858 1b04 	ldr.w	r1, [r8], #4
 8005fc2:	f8d0 e000 	ldr.w	lr, [r0]
 8005fc6:	b28b      	uxth	r3, r1
 8005fc8:	ebac 0303 	sub.w	r3, ip, r3
 8005fcc:	fa1f f28e 	uxth.w	r2, lr
 8005fd0:	4413      	add	r3, r2
 8005fd2:	0c0a      	lsrs	r2, r1, #16
 8005fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe2:	45c1      	cmp	r9, r8
 8005fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fe8:	f840 3b04 	str.w	r3, [r0], #4
 8005fec:	d2e7      	bcs.n	8005fbe <quorem+0xb2>
 8005fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff6:	b922      	cbnz	r2, 8006002 <quorem+0xf6>
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	d30a      	bcc.n	8006016 <quorem+0x10a>
 8006000:	613c      	str	r4, [r7, #16]
 8006002:	4630      	mov	r0, r6
 8006004:	b003      	add	sp, #12
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	3b04      	subs	r3, #4
 800600e:	2a00      	cmp	r2, #0
 8006010:	d1cb      	bne.n	8005faa <quorem+0x9e>
 8006012:	3c01      	subs	r4, #1
 8006014:	e7c6      	b.n	8005fa4 <quorem+0x98>
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	3b04      	subs	r3, #4
 800601a:	2a00      	cmp	r2, #0
 800601c:	d1f0      	bne.n	8006000 <quorem+0xf4>
 800601e:	3c01      	subs	r4, #1
 8006020:	e7eb      	b.n	8005ffa <quorem+0xee>
 8006022:	2000      	movs	r0, #0
 8006024:	e7ee      	b.n	8006004 <quorem+0xf8>
	...

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	4616      	mov	r6, r2
 800602e:	461f      	mov	r7, r3
 8006030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006032:	b099      	sub	sp, #100	; 0x64
 8006034:	4605      	mov	r5, r0
 8006036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800603a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800603e:	b974      	cbnz	r4, 800605e <_dtoa_r+0x36>
 8006040:	2010      	movs	r0, #16
 8006042:	f001 f949 	bl	80072d8 <malloc>
 8006046:	4602      	mov	r2, r0
 8006048:	6268      	str	r0, [r5, #36]	; 0x24
 800604a:	b920      	cbnz	r0, 8006056 <_dtoa_r+0x2e>
 800604c:	21ea      	movs	r1, #234	; 0xea
 800604e:	4bae      	ldr	r3, [pc, #696]	; (8006308 <_dtoa_r+0x2e0>)
 8006050:	48ae      	ldr	r0, [pc, #696]	; (800630c <_dtoa_r+0x2e4>)
 8006052:	f002 f875 	bl	8008140 <__assert_func>
 8006056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800605a:	6004      	str	r4, [r0, #0]
 800605c:	60c4      	str	r4, [r0, #12]
 800605e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	b151      	cbz	r1, 800607a <_dtoa_r+0x52>
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	2301      	movs	r3, #1
 8006068:	4093      	lsls	r3, r2
 800606a:	604a      	str	r2, [r1, #4]
 800606c:	608b      	str	r3, [r1, #8]
 800606e:	4628      	mov	r0, r5
 8006070:	f001 f9a8 	bl	80073c4 <_Bfree>
 8006074:	2200      	movs	r2, #0
 8006076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	1e3b      	subs	r3, r7, #0
 800607c:	bfaf      	iteee	ge
 800607e:	2300      	movge	r3, #0
 8006080:	2201      	movlt	r2, #1
 8006082:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006086:	9305      	strlt	r3, [sp, #20]
 8006088:	bfa8      	it	ge
 800608a:	f8c8 3000 	strge.w	r3, [r8]
 800608e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006092:	4b9f      	ldr	r3, [pc, #636]	; (8006310 <_dtoa_r+0x2e8>)
 8006094:	bfb8      	it	lt
 8006096:	f8c8 2000 	strlt.w	r2, [r8]
 800609a:	ea33 0309 	bics.w	r3, r3, r9
 800609e:	d119      	bne.n	80060d4 <_dtoa_r+0xac>
 80060a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060ac:	4333      	orrs	r3, r6
 80060ae:	f000 8580 	beq.w	8006bb2 <_dtoa_r+0xb8a>
 80060b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060b4:	b953      	cbnz	r3, 80060cc <_dtoa_r+0xa4>
 80060b6:	4b97      	ldr	r3, [pc, #604]	; (8006314 <_dtoa_r+0x2ec>)
 80060b8:	e022      	b.n	8006100 <_dtoa_r+0xd8>
 80060ba:	4b97      	ldr	r3, [pc, #604]	; (8006318 <_dtoa_r+0x2f0>)
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	3308      	adds	r3, #8
 80060c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	9808      	ldr	r0, [sp, #32]
 80060c6:	b019      	add	sp, #100	; 0x64
 80060c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060cc:	4b91      	ldr	r3, [pc, #580]	; (8006314 <_dtoa_r+0x2ec>)
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	3303      	adds	r3, #3
 80060d2:	e7f5      	b.n	80060c0 <_dtoa_r+0x98>
 80060d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80060dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	2300      	movs	r3, #0
 80060e4:	f7fa fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80060e8:	4680      	mov	r8, r0
 80060ea:	b158      	cbz	r0, 8006104 <_dtoa_r+0xdc>
 80060ec:	2301      	movs	r3, #1
 80060ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8559 	beq.w	8006bac <_dtoa_r+0xb84>
 80060fa:	4888      	ldr	r0, [pc, #544]	; (800631c <_dtoa_r+0x2f4>)
 80060fc:	6018      	str	r0, [r3, #0]
 80060fe:	1e43      	subs	r3, r0, #1
 8006100:	9308      	str	r3, [sp, #32]
 8006102:	e7df      	b.n	80060c4 <_dtoa_r+0x9c>
 8006104:	ab16      	add	r3, sp, #88	; 0x58
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	ab17      	add	r3, sp, #92	; 0x5c
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4628      	mov	r0, r5
 800610e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006112:	f001 fd01 	bl	8007b18 <__d2b>
 8006116:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800611a:	4682      	mov	sl, r0
 800611c:	2c00      	cmp	r4, #0
 800611e:	d07e      	beq.n	800621e <_dtoa_r+0x1f6>
 8006120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006126:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800612a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800612e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006132:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006136:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800613a:	2200      	movs	r2, #0
 800613c:	4b78      	ldr	r3, [pc, #480]	; (8006320 <_dtoa_r+0x2f8>)
 800613e:	f7fa f813 	bl	8000168 <__aeabi_dsub>
 8006142:	a36b      	add	r3, pc, #428	; (adr r3, 80062f0 <_dtoa_r+0x2c8>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa f9c6 	bl	80004d8 <__aeabi_dmul>
 800614c:	a36a      	add	r3, pc, #424	; (adr r3, 80062f8 <_dtoa_r+0x2d0>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f80b 	bl	800016c <__adddf3>
 8006156:	4606      	mov	r6, r0
 8006158:	4620      	mov	r0, r4
 800615a:	460f      	mov	r7, r1
 800615c:	f7fa f952 	bl	8000404 <__aeabi_i2d>
 8006160:	a367      	add	r3, pc, #412	; (adr r3, 8006300 <_dtoa_r+0x2d8>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa f9b7 	bl	80004d8 <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4630      	mov	r0, r6
 8006170:	4639      	mov	r1, r7
 8006172:	f7f9 fffb 	bl	800016c <__adddf3>
 8006176:	4606      	mov	r6, r0
 8006178:	460f      	mov	r7, r1
 800617a:	f7fa fc5d 	bl	8000a38 <__aeabi_d2iz>
 800617e:	2200      	movs	r2, #0
 8006180:	4681      	mov	r9, r0
 8006182:	2300      	movs	r3, #0
 8006184:	4630      	mov	r0, r6
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa fc18 	bl	80009bc <__aeabi_dcmplt>
 800618c:	b148      	cbz	r0, 80061a2 <_dtoa_r+0x17a>
 800618e:	4648      	mov	r0, r9
 8006190:	f7fa f938 	bl	8000404 <__aeabi_i2d>
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	f7fa fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800619c:	b908      	cbnz	r0, 80061a2 <_dtoa_r+0x17a>
 800619e:	f109 39ff 	add.w	r9, r9, #4294967295
 80061a2:	f1b9 0f16 	cmp.w	r9, #22
 80061a6:	d857      	bhi.n	8006258 <_dtoa_r+0x230>
 80061a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ac:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <_dtoa_r+0x2fc>)
 80061ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7fa fc01 	bl	80009bc <__aeabi_dcmplt>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d04e      	beq.n	800625c <_dtoa_r+0x234>
 80061be:	2300      	movs	r3, #0
 80061c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80061c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061c8:	1b1c      	subs	r4, r3, r4
 80061ca:	1e63      	subs	r3, r4, #1
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	bf49      	itett	mi
 80061d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80061d4:	2300      	movpl	r3, #0
 80061d6:	9306      	strmi	r3, [sp, #24]
 80061d8:	2300      	movmi	r3, #0
 80061da:	bf54      	ite	pl
 80061dc:	9306      	strpl	r3, [sp, #24]
 80061de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061e0:	f1b9 0f00 	cmp.w	r9, #0
 80061e4:	db3c      	blt.n	8006260 <_dtoa_r+0x238>
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80061ec:	444b      	add	r3, r9
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	2300      	movs	r3, #0
 80061f2:	930a      	str	r3, [sp, #40]	; 0x28
 80061f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	d86c      	bhi.n	80062d4 <_dtoa_r+0x2ac>
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	bfc4      	itt	gt
 80061fe:	3b04      	subgt	r3, #4
 8006200:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006204:	bfc8      	it	gt
 8006206:	2400      	movgt	r4, #0
 8006208:	f1a3 0302 	sub.w	r3, r3, #2
 800620c:	bfd8      	it	le
 800620e:	2401      	movle	r4, #1
 8006210:	2b03      	cmp	r3, #3
 8006212:	f200 808b 	bhi.w	800632c <_dtoa_r+0x304>
 8006216:	e8df f003 	tbb	[pc, r3]
 800621a:	4f2d      	.short	0x4f2d
 800621c:	5b4d      	.short	0x5b4d
 800621e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006222:	441c      	add	r4, r3
 8006224:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006228:	2b20      	cmp	r3, #32
 800622a:	bfc3      	ittte	gt
 800622c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006230:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006234:	fa09 f303 	lslgt.w	r3, r9, r3
 8006238:	f1c3 0320 	rsble	r3, r3, #32
 800623c:	bfc6      	itte	gt
 800623e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006242:	4318      	orrgt	r0, r3
 8006244:	fa06 f003 	lslle.w	r0, r6, r3
 8006248:	f7fa f8cc 	bl	80003e4 <__aeabi_ui2d>
 800624c:	2301      	movs	r3, #1
 800624e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006252:	3c01      	subs	r4, #1
 8006254:	9313      	str	r3, [sp, #76]	; 0x4c
 8006256:	e770      	b.n	800613a <_dtoa_r+0x112>
 8006258:	2301      	movs	r3, #1
 800625a:	e7b3      	b.n	80061c4 <_dtoa_r+0x19c>
 800625c:	900f      	str	r0, [sp, #60]	; 0x3c
 800625e:	e7b2      	b.n	80061c6 <_dtoa_r+0x19e>
 8006260:	9b06      	ldr	r3, [sp, #24]
 8006262:	eba3 0309 	sub.w	r3, r3, r9
 8006266:	9306      	str	r3, [sp, #24]
 8006268:	f1c9 0300 	rsb	r3, r9, #0
 800626c:	930a      	str	r3, [sp, #40]	; 0x28
 800626e:	2300      	movs	r3, #0
 8006270:	930e      	str	r3, [sp, #56]	; 0x38
 8006272:	e7bf      	b.n	80061f4 <_dtoa_r+0x1cc>
 8006274:	2300      	movs	r3, #0
 8006276:	930b      	str	r3, [sp, #44]	; 0x2c
 8006278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800627a:	2b00      	cmp	r3, #0
 800627c:	dc59      	bgt.n	8006332 <_dtoa_r+0x30a>
 800627e:	f04f 0b01 	mov.w	fp, #1
 8006282:	465b      	mov	r3, fp
 8006284:	f8cd b008 	str.w	fp, [sp, #8]
 8006288:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800628c:	2200      	movs	r2, #0
 800628e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006290:	6042      	str	r2, [r0, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	f102 0614 	add.w	r6, r2, #20
 8006298:	429e      	cmp	r6, r3
 800629a:	6841      	ldr	r1, [r0, #4]
 800629c:	d94f      	bls.n	800633e <_dtoa_r+0x316>
 800629e:	4628      	mov	r0, r5
 80062a0:	f001 f850 	bl	8007344 <_Balloc>
 80062a4:	9008      	str	r0, [sp, #32]
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d14d      	bne.n	8006346 <_dtoa_r+0x31e>
 80062aa:	4602      	mov	r2, r0
 80062ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <_dtoa_r+0x300>)
 80062b2:	e6cd      	b.n	8006050 <_dtoa_r+0x28>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7de      	b.n	8006276 <_dtoa_r+0x24e>
 80062b8:	2300      	movs	r3, #0
 80062ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80062bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062be:	eb09 0b03 	add.w	fp, r9, r3
 80062c2:	f10b 0301 	add.w	r3, fp, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	bfb8      	it	lt
 80062cc:	2301      	movlt	r3, #1
 80062ce:	e7dd      	b.n	800628c <_dtoa_r+0x264>
 80062d0:	2301      	movs	r3, #1
 80062d2:	e7f2      	b.n	80062ba <_dtoa_r+0x292>
 80062d4:	2401      	movs	r4, #1
 80062d6:	2300      	movs	r3, #0
 80062d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80062da:	9322      	str	r3, [sp, #136]	; 0x88
 80062dc:	f04f 3bff 	mov.w	fp, #4294967295
 80062e0:	2200      	movs	r2, #0
 80062e2:	2312      	movs	r3, #18
 80062e4:	f8cd b008 	str.w	fp, [sp, #8]
 80062e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80062ea:	e7cf      	b.n	800628c <_dtoa_r+0x264>
 80062ec:	f3af 8000 	nop.w
 80062f0:	636f4361 	.word	0x636f4361
 80062f4:	3fd287a7 	.word	0x3fd287a7
 80062f8:	8b60c8b3 	.word	0x8b60c8b3
 80062fc:	3fc68a28 	.word	0x3fc68a28
 8006300:	509f79fb 	.word	0x509f79fb
 8006304:	3fd34413 	.word	0x3fd34413
 8006308:	08008ec6 	.word	0x08008ec6
 800630c:	08008edd 	.word	0x08008edd
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	08008ec2 	.word	0x08008ec2
 8006318:	08008eb9 	.word	0x08008eb9
 800631c:	08008d39 	.word	0x08008d39
 8006320:	3ff80000 	.word	0x3ff80000
 8006324:	08009058 	.word	0x08009058
 8006328:	08008f3c 	.word	0x08008f3c
 800632c:	2301      	movs	r3, #1
 800632e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006330:	e7d4      	b.n	80062dc <_dtoa_r+0x2b4>
 8006332:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006336:	465b      	mov	r3, fp
 8006338:	f8cd b008 	str.w	fp, [sp, #8]
 800633c:	e7a6      	b.n	800628c <_dtoa_r+0x264>
 800633e:	3101      	adds	r1, #1
 8006340:	6041      	str	r1, [r0, #4]
 8006342:	0052      	lsls	r2, r2, #1
 8006344:	e7a6      	b.n	8006294 <_dtoa_r+0x26c>
 8006346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006348:	9a08      	ldr	r2, [sp, #32]
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	2b0e      	cmp	r3, #14
 8006350:	f200 80a8 	bhi.w	80064a4 <_dtoa_r+0x47c>
 8006354:	2c00      	cmp	r4, #0
 8006356:	f000 80a5 	beq.w	80064a4 <_dtoa_r+0x47c>
 800635a:	f1b9 0f00 	cmp.w	r9, #0
 800635e:	dd34      	ble.n	80063ca <_dtoa_r+0x3a2>
 8006360:	4a9a      	ldr	r2, [pc, #616]	; (80065cc <_dtoa_r+0x5a4>)
 8006362:	f009 030f 	and.w	r3, r9, #15
 8006366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800636a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800636e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006376:	ea4f 1429 	mov.w	r4, r9, asr #4
 800637a:	d016      	beq.n	80063aa <_dtoa_r+0x382>
 800637c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006380:	4b93      	ldr	r3, [pc, #588]	; (80065d0 <_dtoa_r+0x5a8>)
 8006382:	2703      	movs	r7, #3
 8006384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006388:	f7fa f9d0 	bl	800072c <__aeabi_ddiv>
 800638c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006390:	f004 040f 	and.w	r4, r4, #15
 8006394:	4e8e      	ldr	r6, [pc, #568]	; (80065d0 <_dtoa_r+0x5a8>)
 8006396:	b954      	cbnz	r4, 80063ae <_dtoa_r+0x386>
 8006398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800639c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a0:	f7fa f9c4 	bl	800072c <__aeabi_ddiv>
 80063a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063a8:	e029      	b.n	80063fe <_dtoa_r+0x3d6>
 80063aa:	2702      	movs	r7, #2
 80063ac:	e7f2      	b.n	8006394 <_dtoa_r+0x36c>
 80063ae:	07e1      	lsls	r1, r4, #31
 80063b0:	d508      	bpl.n	80063c4 <_dtoa_r+0x39c>
 80063b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063ba:	f7fa f88d 	bl	80004d8 <__aeabi_dmul>
 80063be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063c2:	3701      	adds	r7, #1
 80063c4:	1064      	asrs	r4, r4, #1
 80063c6:	3608      	adds	r6, #8
 80063c8:	e7e5      	b.n	8006396 <_dtoa_r+0x36e>
 80063ca:	f000 80a5 	beq.w	8006518 <_dtoa_r+0x4f0>
 80063ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063d2:	f1c9 0400 	rsb	r4, r9, #0
 80063d6:	4b7d      	ldr	r3, [pc, #500]	; (80065cc <_dtoa_r+0x5a4>)
 80063d8:	f004 020f 	and.w	r2, r4, #15
 80063dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f7fa f878 	bl	80004d8 <__aeabi_dmul>
 80063e8:	2702      	movs	r7, #2
 80063ea:	2300      	movs	r3, #0
 80063ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063f0:	4e77      	ldr	r6, [pc, #476]	; (80065d0 <_dtoa_r+0x5a8>)
 80063f2:	1124      	asrs	r4, r4, #4
 80063f4:	2c00      	cmp	r4, #0
 80063f6:	f040 8084 	bne.w	8006502 <_dtoa_r+0x4da>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1d2      	bne.n	80063a4 <_dtoa_r+0x37c>
 80063fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 808b 	beq.w	800651c <_dtoa_r+0x4f4>
 8006406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800640a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800640e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006412:	2200      	movs	r2, #0
 8006414:	4b6f      	ldr	r3, [pc, #444]	; (80065d4 <_dtoa_r+0x5ac>)
 8006416:	f7fa fad1 	bl	80009bc <__aeabi_dcmplt>
 800641a:	2800      	cmp	r0, #0
 800641c:	d07e      	beq.n	800651c <_dtoa_r+0x4f4>
 800641e:	9b02      	ldr	r3, [sp, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d07b      	beq.n	800651c <_dtoa_r+0x4f4>
 8006424:	f1bb 0f00 	cmp.w	fp, #0
 8006428:	dd38      	ble.n	800649c <_dtoa_r+0x474>
 800642a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800642e:	2200      	movs	r2, #0
 8006430:	4b69      	ldr	r3, [pc, #420]	; (80065d8 <_dtoa_r+0x5b0>)
 8006432:	f7fa f851 	bl	80004d8 <__aeabi_dmul>
 8006436:	465c      	mov	r4, fp
 8006438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800643c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006440:	3701      	adds	r7, #1
 8006442:	4638      	mov	r0, r7
 8006444:	f7f9 ffde 	bl	8000404 <__aeabi_i2d>
 8006448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644c:	f7fa f844 	bl	80004d8 <__aeabi_dmul>
 8006450:	2200      	movs	r2, #0
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <_dtoa_r+0x5b4>)
 8006454:	f7f9 fe8a 	bl	800016c <__adddf3>
 8006458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800645c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006460:	9611      	str	r6, [sp, #68]	; 0x44
 8006462:	2c00      	cmp	r4, #0
 8006464:	d15d      	bne.n	8006522 <_dtoa_r+0x4fa>
 8006466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800646a:	2200      	movs	r2, #0
 800646c:	4b5c      	ldr	r3, [pc, #368]	; (80065e0 <_dtoa_r+0x5b8>)
 800646e:	f7f9 fe7b 	bl	8000168 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800647a:	4633      	mov	r3, r6
 800647c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800647e:	f7fa fabb 	bl	80009f8 <__aeabi_dcmpgt>
 8006482:	2800      	cmp	r0, #0
 8006484:	f040 829e 	bne.w	80069c4 <_dtoa_r+0x99c>
 8006488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800648c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800648e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006492:	f7fa fa93 	bl	80009bc <__aeabi_dcmplt>
 8006496:	2800      	cmp	r0, #0
 8006498:	f040 8292 	bne.w	80069c0 <_dtoa_r+0x998>
 800649c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80064a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f2c0 8153 	blt.w	8006752 <_dtoa_r+0x72a>
 80064ac:	f1b9 0f0e 	cmp.w	r9, #14
 80064b0:	f300 814f 	bgt.w	8006752 <_dtoa_r+0x72a>
 80064b4:	4b45      	ldr	r3, [pc, #276]	; (80065cc <_dtoa_r+0x5a4>)
 80064b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80064ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80064c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f280 80db 	bge.w	8006680 <_dtoa_r+0x658>
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f300 80d7 	bgt.w	8006680 <_dtoa_r+0x658>
 80064d2:	f040 8274 	bne.w	80069be <_dtoa_r+0x996>
 80064d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064da:	2200      	movs	r2, #0
 80064dc:	4b40      	ldr	r3, [pc, #256]	; (80065e0 <_dtoa_r+0x5b8>)
 80064de:	f7f9 fffb 	bl	80004d8 <__aeabi_dmul>
 80064e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e6:	f7fa fa7d 	bl	80009e4 <__aeabi_dcmpge>
 80064ea:	9c02      	ldr	r4, [sp, #8]
 80064ec:	4626      	mov	r6, r4
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f040 824a 	bne.w	8006988 <_dtoa_r+0x960>
 80064f4:	2331      	movs	r3, #49	; 0x31
 80064f6:	9f08      	ldr	r7, [sp, #32]
 80064f8:	f109 0901 	add.w	r9, r9, #1
 80064fc:	f807 3b01 	strb.w	r3, [r7], #1
 8006500:	e246      	b.n	8006990 <_dtoa_r+0x968>
 8006502:	07e2      	lsls	r2, r4, #31
 8006504:	d505      	bpl.n	8006512 <_dtoa_r+0x4ea>
 8006506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800650a:	f7f9 ffe5 	bl	80004d8 <__aeabi_dmul>
 800650e:	2301      	movs	r3, #1
 8006510:	3701      	adds	r7, #1
 8006512:	1064      	asrs	r4, r4, #1
 8006514:	3608      	adds	r6, #8
 8006516:	e76d      	b.n	80063f4 <_dtoa_r+0x3cc>
 8006518:	2702      	movs	r7, #2
 800651a:	e770      	b.n	80063fe <_dtoa_r+0x3d6>
 800651c:	46c8      	mov	r8, r9
 800651e:	9c02      	ldr	r4, [sp, #8]
 8006520:	e78f      	b.n	8006442 <_dtoa_r+0x41a>
 8006522:	9908      	ldr	r1, [sp, #32]
 8006524:	4b29      	ldr	r3, [pc, #164]	; (80065cc <_dtoa_r+0x5a4>)
 8006526:	4421      	add	r1, r4
 8006528:	9112      	str	r1, [sp, #72]	; 0x48
 800652a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800652c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006538:	2900      	cmp	r1, #0
 800653a:	d055      	beq.n	80065e8 <_dtoa_r+0x5c0>
 800653c:	2000      	movs	r0, #0
 800653e:	4929      	ldr	r1, [pc, #164]	; (80065e4 <_dtoa_r+0x5bc>)
 8006540:	f7fa f8f4 	bl	800072c <__aeabi_ddiv>
 8006544:	463b      	mov	r3, r7
 8006546:	4632      	mov	r2, r6
 8006548:	f7f9 fe0e 	bl	8000168 <__aeabi_dsub>
 800654c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006550:	9f08      	ldr	r7, [sp, #32]
 8006552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006556:	f7fa fa6f 	bl	8000a38 <__aeabi_d2iz>
 800655a:	4604      	mov	r4, r0
 800655c:	f7f9 ff52 	bl	8000404 <__aeabi_i2d>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006568:	f7f9 fdfe 	bl	8000168 <__aeabi_dsub>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	3430      	adds	r4, #48	; 0x30
 8006572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800657a:	f807 4b01 	strb.w	r4, [r7], #1
 800657e:	f7fa fa1d 	bl	80009bc <__aeabi_dcmplt>
 8006582:	2800      	cmp	r0, #0
 8006584:	d174      	bne.n	8006670 <_dtoa_r+0x648>
 8006586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658a:	2000      	movs	r0, #0
 800658c:	4911      	ldr	r1, [pc, #68]	; (80065d4 <_dtoa_r+0x5ac>)
 800658e:	f7f9 fdeb 	bl	8000168 <__aeabi_dsub>
 8006592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006596:	f7fa fa11 	bl	80009bc <__aeabi_dcmplt>
 800659a:	2800      	cmp	r0, #0
 800659c:	f040 80b6 	bne.w	800670c <_dtoa_r+0x6e4>
 80065a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a2:	429f      	cmp	r7, r3
 80065a4:	f43f af7a 	beq.w	800649c <_dtoa_r+0x474>
 80065a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ac:	2200      	movs	r2, #0
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <_dtoa_r+0x5b0>)
 80065b0:	f7f9 ff92 	bl	80004d8 <__aeabi_dmul>
 80065b4:	2200      	movs	r2, #0
 80065b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <_dtoa_r+0x5b0>)
 80065c0:	f7f9 ff8a 	bl	80004d8 <__aeabi_dmul>
 80065c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c8:	e7c3      	b.n	8006552 <_dtoa_r+0x52a>
 80065ca:	bf00      	nop
 80065cc:	08009058 	.word	0x08009058
 80065d0:	08009030 	.word	0x08009030
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	40240000 	.word	0x40240000
 80065dc:	401c0000 	.word	0x401c0000
 80065e0:	40140000 	.word	0x40140000
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065f6:	9c08      	ldr	r4, [sp, #32]
 80065f8:	9314      	str	r3, [sp, #80]	; 0x50
 80065fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fe:	f7fa fa1b 	bl	8000a38 <__aeabi_d2iz>
 8006602:	9015      	str	r0, [sp, #84]	; 0x54
 8006604:	f7f9 fefe 	bl	8000404 <__aeabi_i2d>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006616:	4606      	mov	r6, r0
 8006618:	3330      	adds	r3, #48	; 0x30
 800661a:	f804 3b01 	strb.w	r3, [r4], #1
 800661e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006620:	460f      	mov	r7, r1
 8006622:	429c      	cmp	r4, r3
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	d124      	bne.n	8006674 <_dtoa_r+0x64c>
 800662a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800662e:	4bb3      	ldr	r3, [pc, #716]	; (80068fc <_dtoa_r+0x8d4>)
 8006630:	f7f9 fd9c 	bl	800016c <__adddf3>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8006640:	2800      	cmp	r0, #0
 8006642:	d162      	bne.n	800670a <_dtoa_r+0x6e2>
 8006644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006648:	2000      	movs	r0, #0
 800664a:	49ac      	ldr	r1, [pc, #688]	; (80068fc <_dtoa_r+0x8d4>)
 800664c:	f7f9 fd8c 	bl	8000168 <__aeabi_dsub>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7fa f9b0 	bl	80009bc <__aeabi_dcmplt>
 800665c:	2800      	cmp	r0, #0
 800665e:	f43f af1d 	beq.w	800649c <_dtoa_r+0x474>
 8006662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006664:	1e7b      	subs	r3, r7, #1
 8006666:	9314      	str	r3, [sp, #80]	; 0x50
 8006668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d0f8      	beq.n	8006662 <_dtoa_r+0x63a>
 8006670:	46c1      	mov	r9, r8
 8006672:	e03a      	b.n	80066ea <_dtoa_r+0x6c2>
 8006674:	4ba2      	ldr	r3, [pc, #648]	; (8006900 <_dtoa_r+0x8d8>)
 8006676:	f7f9 ff2f 	bl	80004d8 <__aeabi_dmul>
 800667a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800667e:	e7bc      	b.n	80065fa <_dtoa_r+0x5d2>
 8006680:	9f08      	ldr	r7, [sp, #32]
 8006682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668a:	f7fa f84f 	bl	800072c <__aeabi_ddiv>
 800668e:	f7fa f9d3 	bl	8000a38 <__aeabi_d2iz>
 8006692:	4604      	mov	r4, r0
 8006694:	f7f9 feb6 	bl	8000404 <__aeabi_i2d>
 8006698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800669c:	f7f9 ff1c 	bl	80004d8 <__aeabi_dmul>
 80066a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80066a4:	460b      	mov	r3, r1
 80066a6:	4602      	mov	r2, r0
 80066a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ac:	f7f9 fd5c 	bl	8000168 <__aeabi_dsub>
 80066b0:	f807 6b01 	strb.w	r6, [r7], #1
 80066b4:	9e08      	ldr	r6, [sp, #32]
 80066b6:	9b02      	ldr	r3, [sp, #8]
 80066b8:	1bbe      	subs	r6, r7, r6
 80066ba:	42b3      	cmp	r3, r6
 80066bc:	d13a      	bne.n	8006734 <_dtoa_r+0x70c>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	f7f9 fd53 	bl	800016c <__adddf3>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066d2:	f7fa f991 	bl	80009f8 <__aeabi_dcmpgt>
 80066d6:	bb58      	cbnz	r0, 8006730 <_dtoa_r+0x708>
 80066d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e0:	f7fa f962 	bl	80009a8 <__aeabi_dcmpeq>
 80066e4:	b108      	cbz	r0, 80066ea <_dtoa_r+0x6c2>
 80066e6:	07e1      	lsls	r1, r4, #31
 80066e8:	d422      	bmi.n	8006730 <_dtoa_r+0x708>
 80066ea:	4628      	mov	r0, r5
 80066ec:	4651      	mov	r1, sl
 80066ee:	f000 fe69 	bl	80073c4 <_Bfree>
 80066f2:	2300      	movs	r3, #0
 80066f4:	703b      	strb	r3, [r7, #0]
 80066f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066f8:	f109 0001 	add.w	r0, r9, #1
 80066fc:	6018      	str	r0, [r3, #0]
 80066fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006700:	2b00      	cmp	r3, #0
 8006702:	f43f acdf 	beq.w	80060c4 <_dtoa_r+0x9c>
 8006706:	601f      	str	r7, [r3, #0]
 8006708:	e4dc      	b.n	80060c4 <_dtoa_r+0x9c>
 800670a:	4627      	mov	r7, r4
 800670c:	463b      	mov	r3, r7
 800670e:	461f      	mov	r7, r3
 8006710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006714:	2a39      	cmp	r2, #57	; 0x39
 8006716:	d107      	bne.n	8006728 <_dtoa_r+0x700>
 8006718:	9a08      	ldr	r2, [sp, #32]
 800671a:	429a      	cmp	r2, r3
 800671c:	d1f7      	bne.n	800670e <_dtoa_r+0x6e6>
 800671e:	2230      	movs	r2, #48	; 0x30
 8006720:	9908      	ldr	r1, [sp, #32]
 8006722:	f108 0801 	add.w	r8, r8, #1
 8006726:	700a      	strb	r2, [r1, #0]
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	3201      	adds	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e79f      	b.n	8006670 <_dtoa_r+0x648>
 8006730:	46c8      	mov	r8, r9
 8006732:	e7eb      	b.n	800670c <_dtoa_r+0x6e4>
 8006734:	2200      	movs	r2, #0
 8006736:	4b72      	ldr	r3, [pc, #456]	; (8006900 <_dtoa_r+0x8d8>)
 8006738:	f7f9 fece 	bl	80004d8 <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006744:	2200      	movs	r2, #0
 8006746:	2300      	movs	r3, #0
 8006748:	f7fa f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800674c:	2800      	cmp	r0, #0
 800674e:	d098      	beq.n	8006682 <_dtoa_r+0x65a>
 8006750:	e7cb      	b.n	80066ea <_dtoa_r+0x6c2>
 8006752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006754:	2a00      	cmp	r2, #0
 8006756:	f000 80cd 	beq.w	80068f4 <_dtoa_r+0x8cc>
 800675a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800675c:	2a01      	cmp	r2, #1
 800675e:	f300 80af 	bgt.w	80068c0 <_dtoa_r+0x898>
 8006762:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006764:	2a00      	cmp	r2, #0
 8006766:	f000 80a7 	beq.w	80068b8 <_dtoa_r+0x890>
 800676a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800676e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006770:	9f06      	ldr	r7, [sp, #24]
 8006772:	9a06      	ldr	r2, [sp, #24]
 8006774:	2101      	movs	r1, #1
 8006776:	441a      	add	r2, r3
 8006778:	9206      	str	r2, [sp, #24]
 800677a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677c:	4628      	mov	r0, r5
 800677e:	441a      	add	r2, r3
 8006780:	9209      	str	r2, [sp, #36]	; 0x24
 8006782:	f000 ff23 	bl	80075cc <__i2b>
 8006786:	4606      	mov	r6, r0
 8006788:	2f00      	cmp	r7, #0
 800678a:	dd0c      	ble.n	80067a6 <_dtoa_r+0x77e>
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	dd09      	ble.n	80067a6 <_dtoa_r+0x77e>
 8006792:	42bb      	cmp	r3, r7
 8006794:	bfa8      	it	ge
 8006796:	463b      	movge	r3, r7
 8006798:	9a06      	ldr	r2, [sp, #24]
 800679a:	1aff      	subs	r7, r7, r3
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	9206      	str	r2, [sp, #24]
 80067a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	b1f3      	cbz	r3, 80067e8 <_dtoa_r+0x7c0>
 80067aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80a9 	beq.w	8006904 <_dtoa_r+0x8dc>
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	dd10      	ble.n	80067d8 <_dtoa_r+0x7b0>
 80067b6:	4631      	mov	r1, r6
 80067b8:	4622      	mov	r2, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 ffc0 	bl	8007740 <__pow5mult>
 80067c0:	4652      	mov	r2, sl
 80067c2:	4601      	mov	r1, r0
 80067c4:	4606      	mov	r6, r0
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 ff16 	bl	80075f8 <__multiply>
 80067cc:	4680      	mov	r8, r0
 80067ce:	4651      	mov	r1, sl
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 fdf7 	bl	80073c4 <_Bfree>
 80067d6:	46c2      	mov	sl, r8
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	1b1a      	subs	r2, r3, r4
 80067dc:	d004      	beq.n	80067e8 <_dtoa_r+0x7c0>
 80067de:	4651      	mov	r1, sl
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 ffad 	bl	8007740 <__pow5mult>
 80067e6:	4682      	mov	sl, r0
 80067e8:	2101      	movs	r1, #1
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 feee 	bl	80075cc <__i2b>
 80067f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f2:	4604      	mov	r4, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f340 8087 	ble.w	8006908 <_dtoa_r+0x8e0>
 80067fa:	461a      	mov	r2, r3
 80067fc:	4601      	mov	r1, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 ff9e 	bl	8007740 <__pow5mult>
 8006804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006806:	4604      	mov	r4, r0
 8006808:	2b01      	cmp	r3, #1
 800680a:	f340 8080 	ble.w	800690e <_dtoa_r+0x8e6>
 800680e:	f04f 0800 	mov.w	r8, #0
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006818:	6918      	ldr	r0, [r3, #16]
 800681a:	f000 fe89 	bl	8007530 <__hi0bits>
 800681e:	f1c0 0020 	rsb	r0, r0, #32
 8006822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006824:	4418      	add	r0, r3
 8006826:	f010 001f 	ands.w	r0, r0, #31
 800682a:	f000 8092 	beq.w	8006952 <_dtoa_r+0x92a>
 800682e:	f1c0 0320 	rsb	r3, r0, #32
 8006832:	2b04      	cmp	r3, #4
 8006834:	f340 808a 	ble.w	800694c <_dtoa_r+0x924>
 8006838:	f1c0 001c 	rsb	r0, r0, #28
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	4407      	add	r7, r0
 8006840:	4403      	add	r3, r0
 8006842:	9306      	str	r3, [sp, #24]
 8006844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006846:	4403      	add	r3, r0
 8006848:	9309      	str	r3, [sp, #36]	; 0x24
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd05      	ble.n	800685c <_dtoa_r+0x834>
 8006850:	4651      	mov	r1, sl
 8006852:	461a      	mov	r2, r3
 8006854:	4628      	mov	r0, r5
 8006856:	f000 ffcd 	bl	80077f4 <__lshift>
 800685a:	4682      	mov	sl, r0
 800685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	dd05      	ble.n	800686e <_dtoa_r+0x846>
 8006862:	4621      	mov	r1, r4
 8006864:	461a      	mov	r2, r3
 8006866:	4628      	mov	r0, r5
 8006868:	f000 ffc4 	bl	80077f4 <__lshift>
 800686c:	4604      	mov	r4, r0
 800686e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d070      	beq.n	8006956 <_dtoa_r+0x92e>
 8006874:	4621      	mov	r1, r4
 8006876:	4650      	mov	r0, sl
 8006878:	f001 f828 	bl	80078cc <__mcmp>
 800687c:	2800      	cmp	r0, #0
 800687e:	da6a      	bge.n	8006956 <_dtoa_r+0x92e>
 8006880:	2300      	movs	r3, #0
 8006882:	4651      	mov	r1, sl
 8006884:	220a      	movs	r2, #10
 8006886:	4628      	mov	r0, r5
 8006888:	f000 fdbe 	bl	8007408 <__multadd>
 800688c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688e:	4682      	mov	sl, r0
 8006890:	f109 39ff 	add.w	r9, r9, #4294967295
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8193 	beq.w	8006bc0 <_dtoa_r+0xb98>
 800689a:	4631      	mov	r1, r6
 800689c:	2300      	movs	r3, #0
 800689e:	220a      	movs	r2, #10
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 fdb1 	bl	8007408 <__multadd>
 80068a6:	f1bb 0f00 	cmp.w	fp, #0
 80068aa:	4606      	mov	r6, r0
 80068ac:	f300 8093 	bgt.w	80069d6 <_dtoa_r+0x9ae>
 80068b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	dc57      	bgt.n	8006966 <_dtoa_r+0x93e>
 80068b6:	e08e      	b.n	80069d6 <_dtoa_r+0x9ae>
 80068b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068be:	e756      	b.n	800676e <_dtoa_r+0x746>
 80068c0:	9b02      	ldr	r3, [sp, #8]
 80068c2:	1e5c      	subs	r4, r3, #1
 80068c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c6:	42a3      	cmp	r3, r4
 80068c8:	bfb7      	itett	lt
 80068ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068cc:	1b1c      	subge	r4, r3, r4
 80068ce:	1ae2      	sublt	r2, r4, r3
 80068d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068d2:	bfbe      	ittt	lt
 80068d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068d6:	189b      	addlt	r3, r3, r2
 80068d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068da:	9b02      	ldr	r3, [sp, #8]
 80068dc:	bfb8      	it	lt
 80068de:	2400      	movlt	r4, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bfbb      	ittet	lt
 80068e4:	9b06      	ldrlt	r3, [sp, #24]
 80068e6:	9a02      	ldrlt	r2, [sp, #8]
 80068e8:	9f06      	ldrge	r7, [sp, #24]
 80068ea:	1a9f      	sublt	r7, r3, r2
 80068ec:	bfac      	ite	ge
 80068ee:	9b02      	ldrge	r3, [sp, #8]
 80068f0:	2300      	movlt	r3, #0
 80068f2:	e73e      	b.n	8006772 <_dtoa_r+0x74a>
 80068f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068f6:	9f06      	ldr	r7, [sp, #24]
 80068f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068fa:	e745      	b.n	8006788 <_dtoa_r+0x760>
 80068fc:	3fe00000 	.word	0x3fe00000
 8006900:	40240000 	.word	0x40240000
 8006904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006906:	e76a      	b.n	80067de <_dtoa_r+0x7b6>
 8006908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690a:	2b01      	cmp	r3, #1
 800690c:	dc19      	bgt.n	8006942 <_dtoa_r+0x91a>
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	b9bb      	cbnz	r3, 8006942 <_dtoa_r+0x91a>
 8006912:	9b05      	ldr	r3, [sp, #20]
 8006914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006918:	b99b      	cbnz	r3, 8006942 <_dtoa_r+0x91a>
 800691a:	9b05      	ldr	r3, [sp, #20]
 800691c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006920:	0d1b      	lsrs	r3, r3, #20
 8006922:	051b      	lsls	r3, r3, #20
 8006924:	b183      	cbz	r3, 8006948 <_dtoa_r+0x920>
 8006926:	f04f 0801 	mov.w	r8, #1
 800692a:	9b06      	ldr	r3, [sp, #24]
 800692c:	3301      	adds	r3, #1
 800692e:	9306      	str	r3, [sp, #24]
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	9309      	str	r3, [sp, #36]	; 0x24
 8006936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f af6a 	bne.w	8006812 <_dtoa_r+0x7ea>
 800693e:	2001      	movs	r0, #1
 8006940:	e76f      	b.n	8006822 <_dtoa_r+0x7fa>
 8006942:	f04f 0800 	mov.w	r8, #0
 8006946:	e7f6      	b.n	8006936 <_dtoa_r+0x90e>
 8006948:	4698      	mov	r8, r3
 800694a:	e7f4      	b.n	8006936 <_dtoa_r+0x90e>
 800694c:	f43f af7d 	beq.w	800684a <_dtoa_r+0x822>
 8006950:	4618      	mov	r0, r3
 8006952:	301c      	adds	r0, #28
 8006954:	e772      	b.n	800683c <_dtoa_r+0x814>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dc36      	bgt.n	80069ca <_dtoa_r+0x9a2>
 800695c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800695e:	2b02      	cmp	r3, #2
 8006960:	dd33      	ble.n	80069ca <_dtoa_r+0x9a2>
 8006962:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006966:	f1bb 0f00 	cmp.w	fp, #0
 800696a:	d10d      	bne.n	8006988 <_dtoa_r+0x960>
 800696c:	4621      	mov	r1, r4
 800696e:	465b      	mov	r3, fp
 8006970:	2205      	movs	r2, #5
 8006972:	4628      	mov	r0, r5
 8006974:	f000 fd48 	bl	8007408 <__multadd>
 8006978:	4601      	mov	r1, r0
 800697a:	4604      	mov	r4, r0
 800697c:	4650      	mov	r0, sl
 800697e:	f000 ffa5 	bl	80078cc <__mcmp>
 8006982:	2800      	cmp	r0, #0
 8006984:	f73f adb6 	bgt.w	80064f4 <_dtoa_r+0x4cc>
 8006988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800698a:	9f08      	ldr	r7, [sp, #32]
 800698c:	ea6f 0903 	mvn.w	r9, r3
 8006990:	f04f 0800 	mov.w	r8, #0
 8006994:	4621      	mov	r1, r4
 8006996:	4628      	mov	r0, r5
 8006998:	f000 fd14 	bl	80073c4 <_Bfree>
 800699c:	2e00      	cmp	r6, #0
 800699e:	f43f aea4 	beq.w	80066ea <_dtoa_r+0x6c2>
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	d005      	beq.n	80069b4 <_dtoa_r+0x98c>
 80069a8:	45b0      	cmp	r8, r6
 80069aa:	d003      	beq.n	80069b4 <_dtoa_r+0x98c>
 80069ac:	4641      	mov	r1, r8
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 fd08 	bl	80073c4 <_Bfree>
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 fd04 	bl	80073c4 <_Bfree>
 80069bc:	e695      	b.n	80066ea <_dtoa_r+0x6c2>
 80069be:	2400      	movs	r4, #0
 80069c0:	4626      	mov	r6, r4
 80069c2:	e7e1      	b.n	8006988 <_dtoa_r+0x960>
 80069c4:	46c1      	mov	r9, r8
 80069c6:	4626      	mov	r6, r4
 80069c8:	e594      	b.n	80064f4 <_dtoa_r+0x4cc>
 80069ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80fc 	beq.w	8006bce <_dtoa_r+0xba6>
 80069d6:	2f00      	cmp	r7, #0
 80069d8:	dd05      	ble.n	80069e6 <_dtoa_r+0x9be>
 80069da:	4631      	mov	r1, r6
 80069dc:	463a      	mov	r2, r7
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 ff08 	bl	80077f4 <__lshift>
 80069e4:	4606      	mov	r6, r0
 80069e6:	f1b8 0f00 	cmp.w	r8, #0
 80069ea:	d05c      	beq.n	8006aa6 <_dtoa_r+0xa7e>
 80069ec:	4628      	mov	r0, r5
 80069ee:	6871      	ldr	r1, [r6, #4]
 80069f0:	f000 fca8 	bl	8007344 <_Balloc>
 80069f4:	4607      	mov	r7, r0
 80069f6:	b928      	cbnz	r0, 8006a04 <_dtoa_r+0x9dc>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069fe:	4b7e      	ldr	r3, [pc, #504]	; (8006bf8 <_dtoa_r+0xbd0>)
 8006a00:	f7ff bb26 	b.w	8006050 <_dtoa_r+0x28>
 8006a04:	6932      	ldr	r2, [r6, #16]
 8006a06:	f106 010c 	add.w	r1, r6, #12
 8006a0a:	3202      	adds	r2, #2
 8006a0c:	0092      	lsls	r2, r2, #2
 8006a0e:	300c      	adds	r0, #12
 8006a10:	f000 fc8a 	bl	8007328 <memcpy>
 8006a14:	2201      	movs	r2, #1
 8006a16:	4639      	mov	r1, r7
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 feeb 	bl	80077f4 <__lshift>
 8006a1e:	46b0      	mov	r8, r6
 8006a20:	4606      	mov	r6, r0
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	3301      	adds	r3, #1
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	9b08      	ldr	r3, [sp, #32]
 8006a2a:	445b      	add	r3, fp
 8006a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	9309      	str	r3, [sp, #36]	; 0x24
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a40:	f7ff fa64 	bl	8005f0c <quorem>
 8006a44:	4603      	mov	r3, r0
 8006a46:	4641      	mov	r1, r8
 8006a48:	3330      	adds	r3, #48	; 0x30
 8006a4a:	9004      	str	r0, [sp, #16]
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a50:	f000 ff3c 	bl	80078cc <__mcmp>
 8006a54:	4632      	mov	r2, r6
 8006a56:	9006      	str	r0, [sp, #24]
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 ff52 	bl	8007904 <__mdiff>
 8006a60:	68c2      	ldr	r2, [r0, #12]
 8006a62:	4607      	mov	r7, r0
 8006a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a66:	bb02      	cbnz	r2, 8006aaa <_dtoa_r+0xa82>
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	f000 ff2e 	bl	80078cc <__mcmp>
 8006a70:	4602      	mov	r2, r0
 8006a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a74:	4639      	mov	r1, r7
 8006a76:	4628      	mov	r0, r5
 8006a78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a7c:	f000 fca2 	bl	80073c4 <_Bfree>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a84:	9f02      	ldr	r7, [sp, #8]
 8006a86:	ea43 0102 	orr.w	r1, r3, r2
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a90:	d10d      	bne.n	8006aae <_dtoa_r+0xa86>
 8006a92:	2b39      	cmp	r3, #57	; 0x39
 8006a94:	d027      	beq.n	8006ae6 <_dtoa_r+0xabe>
 8006a96:	9a06      	ldr	r2, [sp, #24]
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	dd01      	ble.n	8006aa0 <_dtoa_r+0xa78>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	3331      	adds	r3, #49	; 0x31
 8006aa0:	f88b 3000 	strb.w	r3, [fp]
 8006aa4:	e776      	b.n	8006994 <_dtoa_r+0x96c>
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	e7b9      	b.n	8006a1e <_dtoa_r+0x9f6>
 8006aaa:	2201      	movs	r2, #1
 8006aac:	e7e2      	b.n	8006a74 <_dtoa_r+0xa4c>
 8006aae:	9906      	ldr	r1, [sp, #24]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	db04      	blt.n	8006abe <_dtoa_r+0xa96>
 8006ab4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006ab6:	4301      	orrs	r1, r0
 8006ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aba:	4301      	orrs	r1, r0
 8006abc:	d120      	bne.n	8006b00 <_dtoa_r+0xad8>
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	ddee      	ble.n	8006aa0 <_dtoa_r+0xa78>
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	9302      	str	r3, [sp, #8]
 8006aca:	f000 fe93 	bl	80077f4 <__lshift>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4682      	mov	sl, r0
 8006ad2:	f000 fefb 	bl	80078cc <__mcmp>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	dc02      	bgt.n	8006ae2 <_dtoa_r+0xaba>
 8006adc:	d1e0      	bne.n	8006aa0 <_dtoa_r+0xa78>
 8006ade:	07da      	lsls	r2, r3, #31
 8006ae0:	d5de      	bpl.n	8006aa0 <_dtoa_r+0xa78>
 8006ae2:	2b39      	cmp	r3, #57	; 0x39
 8006ae4:	d1da      	bne.n	8006a9c <_dtoa_r+0xa74>
 8006ae6:	2339      	movs	r3, #57	; 0x39
 8006ae8:	f88b 3000 	strb.w	r3, [fp]
 8006aec:	463b      	mov	r3, r7
 8006aee:	461f      	mov	r7, r3
 8006af0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	2a39      	cmp	r2, #57	; 0x39
 8006af8:	d050      	beq.n	8006b9c <_dtoa_r+0xb74>
 8006afa:	3201      	adds	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e749      	b.n	8006994 <_dtoa_r+0x96c>
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	dd03      	ble.n	8006b0c <_dtoa_r+0xae4>
 8006b04:	2b39      	cmp	r3, #57	; 0x39
 8006b06:	d0ee      	beq.n	8006ae6 <_dtoa_r+0xabe>
 8006b08:	3301      	adds	r3, #1
 8006b0a:	e7c9      	b.n	8006aa0 <_dtoa_r+0xa78>
 8006b0c:	9a02      	ldr	r2, [sp, #8]
 8006b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b14:	428a      	cmp	r2, r1
 8006b16:	d02a      	beq.n	8006b6e <_dtoa_r+0xb46>
 8006b18:	4651      	mov	r1, sl
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fc72 	bl	8007408 <__multadd>
 8006b24:	45b0      	cmp	r8, r6
 8006b26:	4682      	mov	sl, r0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	f04f 020a 	mov.w	r2, #10
 8006b30:	4641      	mov	r1, r8
 8006b32:	4628      	mov	r0, r5
 8006b34:	d107      	bne.n	8006b46 <_dtoa_r+0xb1e>
 8006b36:	f000 fc67 	bl	8007408 <__multadd>
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	e777      	b.n	8006a36 <_dtoa_r+0xa0e>
 8006b46:	f000 fc5f 	bl	8007408 <__multadd>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	220a      	movs	r2, #10
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 fc58 	bl	8007408 <__multadd>
 8006b58:	4606      	mov	r6, r0
 8006b5a:	e7f0      	b.n	8006b3e <_dtoa_r+0xb16>
 8006b5c:	f1bb 0f00 	cmp.w	fp, #0
 8006b60:	bfcc      	ite	gt
 8006b62:	465f      	movgt	r7, fp
 8006b64:	2701      	movle	r7, #1
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	9a08      	ldr	r2, [sp, #32]
 8006b6c:	4417      	add	r7, r2
 8006b6e:	4651      	mov	r1, sl
 8006b70:	2201      	movs	r2, #1
 8006b72:	4628      	mov	r0, r5
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	f000 fe3d 	bl	80077f4 <__lshift>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	f000 fea5 	bl	80078cc <__mcmp>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	dcb2      	bgt.n	8006aec <_dtoa_r+0xac4>
 8006b86:	d102      	bne.n	8006b8e <_dtoa_r+0xb66>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	07db      	lsls	r3, r3, #31
 8006b8c:	d4ae      	bmi.n	8006aec <_dtoa_r+0xac4>
 8006b8e:	463b      	mov	r3, r7
 8006b90:	461f      	mov	r7, r3
 8006b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b96:	2a30      	cmp	r2, #48	; 0x30
 8006b98:	d0fa      	beq.n	8006b90 <_dtoa_r+0xb68>
 8006b9a:	e6fb      	b.n	8006994 <_dtoa_r+0x96c>
 8006b9c:	9a08      	ldr	r2, [sp, #32]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d1a5      	bne.n	8006aee <_dtoa_r+0xac6>
 8006ba2:	2331      	movs	r3, #49	; 0x31
 8006ba4:	f109 0901 	add.w	r9, r9, #1
 8006ba8:	7013      	strb	r3, [r2, #0]
 8006baa:	e6f3      	b.n	8006994 <_dtoa_r+0x96c>
 8006bac:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <_dtoa_r+0xbd4>)
 8006bae:	f7ff baa7 	b.w	8006100 <_dtoa_r+0xd8>
 8006bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f47f aa80 	bne.w	80060ba <_dtoa_r+0x92>
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <_dtoa_r+0xbd8>)
 8006bbc:	f7ff baa0 	b.w	8006100 <_dtoa_r+0xd8>
 8006bc0:	f1bb 0f00 	cmp.w	fp, #0
 8006bc4:	dc03      	bgt.n	8006bce <_dtoa_r+0xba6>
 8006bc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	f73f aecc 	bgt.w	8006966 <_dtoa_r+0x93e>
 8006bce:	9f08      	ldr	r7, [sp, #32]
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7ff f99a 	bl	8005f0c <quorem>
 8006bd8:	9a08      	ldr	r2, [sp, #32]
 8006bda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006bde:	f807 3b01 	strb.w	r3, [r7], #1
 8006be2:	1aba      	subs	r2, r7, r2
 8006be4:	4593      	cmp	fp, r2
 8006be6:	ddb9      	ble.n	8006b5c <_dtoa_r+0xb34>
 8006be8:	4651      	mov	r1, sl
 8006bea:	2300      	movs	r3, #0
 8006bec:	220a      	movs	r2, #10
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fc0a 	bl	8007408 <__multadd>
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	e7eb      	b.n	8006bd0 <_dtoa_r+0xba8>
 8006bf8:	08008f3c 	.word	0x08008f3c
 8006bfc:	08008d38 	.word	0x08008d38
 8006c00:	08008eb9 	.word	0x08008eb9

08006c04 <rshift>:
 8006c04:	6903      	ldr	r3, [r0, #16]
 8006c06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c0e:	f100 0414 	add.w	r4, r0, #20
 8006c12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c16:	dd46      	ble.n	8006ca6 <rshift+0xa2>
 8006c18:	f011 011f 	ands.w	r1, r1, #31
 8006c1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c24:	d10c      	bne.n	8006c40 <rshift+0x3c>
 8006c26:	4629      	mov	r1, r5
 8006c28:	f100 0710 	add.w	r7, r0, #16
 8006c2c:	42b1      	cmp	r1, r6
 8006c2e:	d335      	bcc.n	8006c9c <rshift+0x98>
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	1eea      	subs	r2, r5, #3
 8006c36:	4296      	cmp	r6, r2
 8006c38:	bf38      	it	cc
 8006c3a:	2300      	movcc	r3, #0
 8006c3c:	4423      	add	r3, r4
 8006c3e:	e015      	b.n	8006c6c <rshift+0x68>
 8006c40:	46a1      	mov	r9, r4
 8006c42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c46:	f1c1 0820 	rsb	r8, r1, #32
 8006c4a:	40cf      	lsrs	r7, r1
 8006c4c:	f105 0e04 	add.w	lr, r5, #4
 8006c50:	4576      	cmp	r6, lr
 8006c52:	46f4      	mov	ip, lr
 8006c54:	d816      	bhi.n	8006c84 <rshift+0x80>
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009a      	lsls	r2, r3, #2
 8006c5a:	3a04      	subs	r2, #4
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	42ae      	cmp	r6, r5
 8006c60:	bf38      	it	cc
 8006c62:	2200      	movcc	r2, #0
 8006c64:	18a3      	adds	r3, r4, r2
 8006c66:	50a7      	str	r7, [r4, r2]
 8006c68:	b107      	cbz	r7, 8006c6c <rshift+0x68>
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	eba3 0204 	sub.w	r2, r3, r4
 8006c72:	bf08      	it	eq
 8006c74:	2300      	moveq	r3, #0
 8006c76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c7a:	6102      	str	r2, [r0, #16]
 8006c7c:	bf08      	it	eq
 8006c7e:	6143      	streq	r3, [r0, #20]
 8006c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c84:	f8dc c000 	ldr.w	ip, [ip]
 8006c88:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c8c:	ea4c 0707 	orr.w	r7, ip, r7
 8006c90:	f849 7b04 	str.w	r7, [r9], #4
 8006c94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c98:	40cf      	lsrs	r7, r1
 8006c9a:	e7d9      	b.n	8006c50 <rshift+0x4c>
 8006c9c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ca0:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ca4:	e7c2      	b.n	8006c2c <rshift+0x28>
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	e7e0      	b.n	8006c6c <rshift+0x68>

08006caa <__hexdig_fun>:
 8006caa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d802      	bhi.n	8006cb8 <__hexdig_fun+0xe>
 8006cb2:	3820      	subs	r0, #32
 8006cb4:	b2c0      	uxtb	r0, r0
 8006cb6:	4770      	bx	lr
 8006cb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d801      	bhi.n	8006cc4 <__hexdig_fun+0x1a>
 8006cc0:	3847      	subs	r0, #71	; 0x47
 8006cc2:	e7f7      	b.n	8006cb4 <__hexdig_fun+0xa>
 8006cc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d801      	bhi.n	8006cd0 <__hexdig_fun+0x26>
 8006ccc:	3827      	subs	r0, #39	; 0x27
 8006cce:	e7f1      	b.n	8006cb4 <__hexdig_fun+0xa>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	4770      	bx	lr

08006cd4 <__gethex>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b08b      	sub	sp, #44	; 0x2c
 8006cda:	9306      	str	r3, [sp, #24]
 8006cdc:	4bb9      	ldr	r3, [pc, #740]	; (8006fc4 <__gethex+0x2f0>)
 8006cde:	9002      	str	r0, [sp, #8]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	4690      	mov	r8, r2
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	f7f9 fa31 	bl	8000150 <strlen>
 8006cee:	4682      	mov	sl, r0
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	f8db 2000 	ldr.w	r2, [fp]
 8006cf6:	4403      	add	r3, r0
 8006cf8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	1c93      	adds	r3, r2, #2
 8006d00:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d04:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d08:	32fe      	adds	r2, #254	; 0xfe
 8006d0a:	18d1      	adds	r1, r2, r3
 8006d0c:	461f      	mov	r7, r3
 8006d0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d12:	9101      	str	r1, [sp, #4]
 8006d14:	2830      	cmp	r0, #48	; 0x30
 8006d16:	d0f8      	beq.n	8006d0a <__gethex+0x36>
 8006d18:	f7ff ffc7 	bl	8006caa <__hexdig_fun>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d13a      	bne.n	8006d98 <__gethex+0xc4>
 8006d22:	4652      	mov	r2, sl
 8006d24:	4638      	mov	r0, r7
 8006d26:	9903      	ldr	r1, [sp, #12]
 8006d28:	f001 f9ea 	bl	8008100 <strncmp>
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d166      	bne.n	8006e00 <__gethex+0x12c>
 8006d32:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d36:	eb07 060a 	add.w	r6, r7, sl
 8006d3a:	f7ff ffb6 	bl	8006caa <__hexdig_fun>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d060      	beq.n	8006e04 <__gethex+0x130>
 8006d42:	4633      	mov	r3, r6
 8006d44:	7818      	ldrb	r0, [r3, #0]
 8006d46:	461f      	mov	r7, r3
 8006d48:	2830      	cmp	r0, #48	; 0x30
 8006d4a:	f103 0301 	add.w	r3, r3, #1
 8006d4e:	d0f9      	beq.n	8006d44 <__gethex+0x70>
 8006d50:	f7ff ffab 	bl	8006caa <__hexdig_fun>
 8006d54:	2301      	movs	r3, #1
 8006d56:	fab0 f480 	clz	r4, r0
 8006d5a:	4635      	mov	r5, r6
 8006d5c:	0964      	lsrs	r4, r4, #5
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	463a      	mov	r2, r7
 8006d62:	4616      	mov	r6, r2
 8006d64:	7830      	ldrb	r0, [r6, #0]
 8006d66:	3201      	adds	r2, #1
 8006d68:	f7ff ff9f 	bl	8006caa <__hexdig_fun>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d1f8      	bne.n	8006d62 <__gethex+0x8e>
 8006d70:	4652      	mov	r2, sl
 8006d72:	4630      	mov	r0, r6
 8006d74:	9903      	ldr	r1, [sp, #12]
 8006d76:	f001 f9c3 	bl	8008100 <strncmp>
 8006d7a:	b980      	cbnz	r0, 8006d9e <__gethex+0xca>
 8006d7c:	b94d      	cbnz	r5, 8006d92 <__gethex+0xbe>
 8006d7e:	eb06 050a 	add.w	r5, r6, sl
 8006d82:	462a      	mov	r2, r5
 8006d84:	4616      	mov	r6, r2
 8006d86:	7830      	ldrb	r0, [r6, #0]
 8006d88:	3201      	adds	r2, #1
 8006d8a:	f7ff ff8e 	bl	8006caa <__hexdig_fun>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d1f8      	bne.n	8006d84 <__gethex+0xb0>
 8006d92:	1bad      	subs	r5, r5, r6
 8006d94:	00ad      	lsls	r5, r5, #2
 8006d96:	e004      	b.n	8006da2 <__gethex+0xce>
 8006d98:	2400      	movs	r4, #0
 8006d9a:	4625      	mov	r5, r4
 8006d9c:	e7e0      	b.n	8006d60 <__gethex+0x8c>
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	d1f7      	bne.n	8006d92 <__gethex+0xbe>
 8006da2:	7833      	ldrb	r3, [r6, #0]
 8006da4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006da8:	2b50      	cmp	r3, #80	; 0x50
 8006daa:	d139      	bne.n	8006e20 <__gethex+0x14c>
 8006dac:	7873      	ldrb	r3, [r6, #1]
 8006dae:	2b2b      	cmp	r3, #43	; 0x2b
 8006db0:	d02a      	beq.n	8006e08 <__gethex+0x134>
 8006db2:	2b2d      	cmp	r3, #45	; 0x2d
 8006db4:	d02c      	beq.n	8006e10 <__gethex+0x13c>
 8006db6:	f04f 0900 	mov.w	r9, #0
 8006dba:	1c71      	adds	r1, r6, #1
 8006dbc:	7808      	ldrb	r0, [r1, #0]
 8006dbe:	f7ff ff74 	bl	8006caa <__hexdig_fun>
 8006dc2:	1e43      	subs	r3, r0, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b18      	cmp	r3, #24
 8006dc8:	d82a      	bhi.n	8006e20 <__gethex+0x14c>
 8006dca:	f1a0 0210 	sub.w	r2, r0, #16
 8006dce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dd2:	f7ff ff6a 	bl	8006caa <__hexdig_fun>
 8006dd6:	1e43      	subs	r3, r0, #1
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b18      	cmp	r3, #24
 8006ddc:	d91b      	bls.n	8006e16 <__gethex+0x142>
 8006dde:	f1b9 0f00 	cmp.w	r9, #0
 8006de2:	d000      	beq.n	8006de6 <__gethex+0x112>
 8006de4:	4252      	negs	r2, r2
 8006de6:	4415      	add	r5, r2
 8006de8:	f8cb 1000 	str.w	r1, [fp]
 8006dec:	b1d4      	cbz	r4, 8006e24 <__gethex+0x150>
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bf14      	ite	ne
 8006df4:	2700      	movne	r7, #0
 8006df6:	2706      	moveq	r7, #6
 8006df8:	4638      	mov	r0, r7
 8006dfa:	b00b      	add	sp, #44	; 0x2c
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	463e      	mov	r6, r7
 8006e02:	4625      	mov	r5, r4
 8006e04:	2401      	movs	r4, #1
 8006e06:	e7cc      	b.n	8006da2 <__gethex+0xce>
 8006e08:	f04f 0900 	mov.w	r9, #0
 8006e0c:	1cb1      	adds	r1, r6, #2
 8006e0e:	e7d5      	b.n	8006dbc <__gethex+0xe8>
 8006e10:	f04f 0901 	mov.w	r9, #1
 8006e14:	e7fa      	b.n	8006e0c <__gethex+0x138>
 8006e16:	230a      	movs	r3, #10
 8006e18:	fb03 0202 	mla	r2, r3, r2, r0
 8006e1c:	3a10      	subs	r2, #16
 8006e1e:	e7d6      	b.n	8006dce <__gethex+0xfa>
 8006e20:	4631      	mov	r1, r6
 8006e22:	e7e1      	b.n	8006de8 <__gethex+0x114>
 8006e24:	4621      	mov	r1, r4
 8006e26:	1bf3      	subs	r3, r6, r7
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b07      	cmp	r3, #7
 8006e2c:	dc0a      	bgt.n	8006e44 <__gethex+0x170>
 8006e2e:	9802      	ldr	r0, [sp, #8]
 8006e30:	f000 fa88 	bl	8007344 <_Balloc>
 8006e34:	4604      	mov	r4, r0
 8006e36:	b940      	cbnz	r0, 8006e4a <__gethex+0x176>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	21de      	movs	r1, #222	; 0xde
 8006e3c:	4b62      	ldr	r3, [pc, #392]	; (8006fc8 <__gethex+0x2f4>)
 8006e3e:	4863      	ldr	r0, [pc, #396]	; (8006fcc <__gethex+0x2f8>)
 8006e40:	f001 f97e 	bl	8008140 <__assert_func>
 8006e44:	3101      	adds	r1, #1
 8006e46:	105b      	asrs	r3, r3, #1
 8006e48:	e7ef      	b.n	8006e2a <__gethex+0x156>
 8006e4a:	f04f 0b00 	mov.w	fp, #0
 8006e4e:	f100 0914 	add.w	r9, r0, #20
 8006e52:	f1ca 0301 	rsb	r3, sl, #1
 8006e56:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e5a:	f8cd b004 	str.w	fp, [sp, #4]
 8006e5e:	9308      	str	r3, [sp, #32]
 8006e60:	42b7      	cmp	r7, r6
 8006e62:	d33f      	bcc.n	8006ee4 <__gethex+0x210>
 8006e64:	9f04      	ldr	r7, [sp, #16]
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	f847 3b04 	str.w	r3, [r7], #4
 8006e6c:	eba7 0709 	sub.w	r7, r7, r9
 8006e70:	10bf      	asrs	r7, r7, #2
 8006e72:	6127      	str	r7, [r4, #16]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fb5b 	bl	8007530 <__hi0bits>
 8006e7a:	017f      	lsls	r7, r7, #5
 8006e7c:	f8d8 6000 	ldr.w	r6, [r8]
 8006e80:	1a3f      	subs	r7, r7, r0
 8006e82:	42b7      	cmp	r7, r6
 8006e84:	dd62      	ble.n	8006f4c <__gethex+0x278>
 8006e86:	1bbf      	subs	r7, r7, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fef1 	bl	8007c72 <__any_on>
 8006e90:	4682      	mov	sl, r0
 8006e92:	b1a8      	cbz	r0, 8006ec0 <__gethex+0x1ec>
 8006e94:	f04f 0a01 	mov.w	sl, #1
 8006e98:	1e7b      	subs	r3, r7, #1
 8006e9a:	1159      	asrs	r1, r3, #5
 8006e9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ea0:	f003 021f 	and.w	r2, r3, #31
 8006ea4:	fa0a f202 	lsl.w	r2, sl, r2
 8006ea8:	420a      	tst	r2, r1
 8006eaa:	d009      	beq.n	8006ec0 <__gethex+0x1ec>
 8006eac:	4553      	cmp	r3, sl
 8006eae:	dd05      	ble.n	8006ebc <__gethex+0x1e8>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	1eb9      	subs	r1, r7, #2
 8006eb4:	f000 fedd 	bl	8007c72 <__any_on>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d144      	bne.n	8006f46 <__gethex+0x272>
 8006ebc:	f04f 0a02 	mov.w	sl, #2
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff fe9e 	bl	8006c04 <rshift>
 8006ec8:	443d      	add	r5, r7
 8006eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ece:	42ab      	cmp	r3, r5
 8006ed0:	da4a      	bge.n	8006f68 <__gethex+0x294>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	9802      	ldr	r0, [sp, #8]
 8006ed6:	f000 fa75 	bl	80073c4 <_Bfree>
 8006eda:	2300      	movs	r3, #0
 8006edc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ede:	27a3      	movs	r7, #163	; 0xa3
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e789      	b.n	8006df8 <__gethex+0x124>
 8006ee4:	1e73      	subs	r3, r6, #1
 8006ee6:	9a07      	ldr	r2, [sp, #28]
 8006ee8:	9305      	str	r3, [sp, #20]
 8006eea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d019      	beq.n	8006f26 <__gethex+0x252>
 8006ef2:	f1bb 0f20 	cmp.w	fp, #32
 8006ef6:	d107      	bne.n	8006f08 <__gethex+0x234>
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	f843 2b04 	str.w	r2, [r3], #4
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	2300      	movs	r3, #0
 8006f04:	469b      	mov	fp, r3
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f0c:	f7ff fecd 	bl	8006caa <__hexdig_fun>
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	f000 000f 	and.w	r0, r0, #15
 8006f16:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f1a:	4303      	orrs	r3, r0
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f10b 0b04 	add.w	fp, fp, #4
 8006f22:	9b05      	ldr	r3, [sp, #20]
 8006f24:	e00d      	b.n	8006f42 <__gethex+0x26e>
 8006f26:	9b05      	ldr	r3, [sp, #20]
 8006f28:	9a08      	ldr	r2, [sp, #32]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	42bb      	cmp	r3, r7
 8006f2e:	d3e0      	bcc.n	8006ef2 <__gethex+0x21e>
 8006f30:	4618      	mov	r0, r3
 8006f32:	4652      	mov	r2, sl
 8006f34:	9903      	ldr	r1, [sp, #12]
 8006f36:	9309      	str	r3, [sp, #36]	; 0x24
 8006f38:	f001 f8e2 	bl	8008100 <strncmp>
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d1d7      	bne.n	8006ef2 <__gethex+0x21e>
 8006f42:	461e      	mov	r6, r3
 8006f44:	e78c      	b.n	8006e60 <__gethex+0x18c>
 8006f46:	f04f 0a03 	mov.w	sl, #3
 8006f4a:	e7b9      	b.n	8006ec0 <__gethex+0x1ec>
 8006f4c:	da09      	bge.n	8006f62 <__gethex+0x28e>
 8006f4e:	1bf7      	subs	r7, r6, r7
 8006f50:	4621      	mov	r1, r4
 8006f52:	463a      	mov	r2, r7
 8006f54:	9802      	ldr	r0, [sp, #8]
 8006f56:	f000 fc4d 	bl	80077f4 <__lshift>
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	1bed      	subs	r5, r5, r7
 8006f5e:	f100 0914 	add.w	r9, r0, #20
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	e7b0      	b.n	8006eca <__gethex+0x1f6>
 8006f68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f6c:	42a8      	cmp	r0, r5
 8006f6e:	dd71      	ble.n	8007054 <__gethex+0x380>
 8006f70:	1b45      	subs	r5, r0, r5
 8006f72:	42ae      	cmp	r6, r5
 8006f74:	dc34      	bgt.n	8006fe0 <__gethex+0x30c>
 8006f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d028      	beq.n	8006fd0 <__gethex+0x2fc>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d02a      	beq.n	8006fd8 <__gethex+0x304>
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d115      	bne.n	8006fb2 <__gethex+0x2de>
 8006f86:	42ae      	cmp	r6, r5
 8006f88:	d113      	bne.n	8006fb2 <__gethex+0x2de>
 8006f8a:	2e01      	cmp	r6, #1
 8006f8c:	d10b      	bne.n	8006fa6 <__gethex+0x2d2>
 8006f8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f92:	9a06      	ldr	r2, [sp, #24]
 8006f94:	2762      	movs	r7, #98	; 0x62
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	f8c9 3000 	str.w	r3, [r9]
 8006fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fa2:	601c      	str	r4, [r3, #0]
 8006fa4:	e728      	b.n	8006df8 <__gethex+0x124>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	1e71      	subs	r1, r6, #1
 8006faa:	f000 fe62 	bl	8007c72 <__any_on>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d1ed      	bne.n	8006f8e <__gethex+0x2ba>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	9802      	ldr	r0, [sp, #8]
 8006fb6:	f000 fa05 	bl	80073c4 <_Bfree>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fbe:	2750      	movs	r7, #80	; 0x50
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e719      	b.n	8006df8 <__gethex+0x124>
 8006fc4:	08008fb8 	.word	0x08008fb8
 8006fc8:	08008f3c 	.word	0x08008f3c
 8006fcc:	08008f4d 	.word	0x08008f4d
 8006fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1ed      	bne.n	8006fb2 <__gethex+0x2de>
 8006fd6:	e7da      	b.n	8006f8e <__gethex+0x2ba>
 8006fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d7      	bne.n	8006f8e <__gethex+0x2ba>
 8006fde:	e7e8      	b.n	8006fb2 <__gethex+0x2de>
 8006fe0:	1e6f      	subs	r7, r5, #1
 8006fe2:	f1ba 0f00 	cmp.w	sl, #0
 8006fe6:	d132      	bne.n	800704e <__gethex+0x37a>
 8006fe8:	b127      	cbz	r7, 8006ff4 <__gethex+0x320>
 8006fea:	4639      	mov	r1, r7
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fe40 	bl	8007c72 <__any_on>
 8006ff2:	4682      	mov	sl, r0
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	117b      	asrs	r3, r7, #5
 8006ff8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006ffc:	f007 071f 	and.w	r7, r7, #31
 8007000:	fa01 f707 	lsl.w	r7, r1, r7
 8007004:	421f      	tst	r7, r3
 8007006:	f04f 0702 	mov.w	r7, #2
 800700a:	4629      	mov	r1, r5
 800700c:	4620      	mov	r0, r4
 800700e:	bf18      	it	ne
 8007010:	f04a 0a02 	orrne.w	sl, sl, #2
 8007014:	1b76      	subs	r6, r6, r5
 8007016:	f7ff fdf5 	bl	8006c04 <rshift>
 800701a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800701e:	f1ba 0f00 	cmp.w	sl, #0
 8007022:	d048      	beq.n	80070b6 <__gethex+0x3e2>
 8007024:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d015      	beq.n	8007058 <__gethex+0x384>
 800702c:	2b03      	cmp	r3, #3
 800702e:	d017      	beq.n	8007060 <__gethex+0x38c>
 8007030:	2b01      	cmp	r3, #1
 8007032:	d109      	bne.n	8007048 <__gethex+0x374>
 8007034:	f01a 0f02 	tst.w	sl, #2
 8007038:	d006      	beq.n	8007048 <__gethex+0x374>
 800703a:	f8d9 0000 	ldr.w	r0, [r9]
 800703e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007042:	f01a 0f01 	tst.w	sl, #1
 8007046:	d10e      	bne.n	8007066 <__gethex+0x392>
 8007048:	f047 0710 	orr.w	r7, r7, #16
 800704c:	e033      	b.n	80070b6 <__gethex+0x3e2>
 800704e:	f04f 0a01 	mov.w	sl, #1
 8007052:	e7cf      	b.n	8006ff4 <__gethex+0x320>
 8007054:	2701      	movs	r7, #1
 8007056:	e7e2      	b.n	800701e <__gethex+0x34a>
 8007058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800705a:	f1c3 0301 	rsb	r3, r3, #1
 800705e:	9315      	str	r3, [sp, #84]	; 0x54
 8007060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <__gethex+0x374>
 8007066:	f04f 0c00 	mov.w	ip, #0
 800706a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800706e:	f104 0314 	add.w	r3, r4, #20
 8007072:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007076:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800707a:	4618      	mov	r0, r3
 800707c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007080:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007084:	d01c      	beq.n	80070c0 <__gethex+0x3ec>
 8007086:	3201      	adds	r2, #1
 8007088:	6002      	str	r2, [r0, #0]
 800708a:	2f02      	cmp	r7, #2
 800708c:	f104 0314 	add.w	r3, r4, #20
 8007090:	d13d      	bne.n	800710e <__gethex+0x43a>
 8007092:	f8d8 2000 	ldr.w	r2, [r8]
 8007096:	3a01      	subs	r2, #1
 8007098:	42b2      	cmp	r2, r6
 800709a:	d10a      	bne.n	80070b2 <__gethex+0x3de>
 800709c:	2201      	movs	r2, #1
 800709e:	1171      	asrs	r1, r6, #5
 80070a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070a4:	f006 061f 	and.w	r6, r6, #31
 80070a8:	fa02 f606 	lsl.w	r6, r2, r6
 80070ac:	421e      	tst	r6, r3
 80070ae:	bf18      	it	ne
 80070b0:	4617      	movne	r7, r2
 80070b2:	f047 0720 	orr.w	r7, r7, #32
 80070b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070b8:	601c      	str	r4, [r3, #0]
 80070ba:	9b06      	ldr	r3, [sp, #24]
 80070bc:	601d      	str	r5, [r3, #0]
 80070be:	e69b      	b.n	8006df8 <__gethex+0x124>
 80070c0:	4299      	cmp	r1, r3
 80070c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80070c6:	d8d8      	bhi.n	800707a <__gethex+0x3a6>
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	459b      	cmp	fp, r3
 80070cc:	db17      	blt.n	80070fe <__gethex+0x42a>
 80070ce:	6861      	ldr	r1, [r4, #4]
 80070d0:	9802      	ldr	r0, [sp, #8]
 80070d2:	3101      	adds	r1, #1
 80070d4:	f000 f936 	bl	8007344 <_Balloc>
 80070d8:	4681      	mov	r9, r0
 80070da:	b918      	cbnz	r0, 80070e4 <__gethex+0x410>
 80070dc:	4602      	mov	r2, r0
 80070de:	2184      	movs	r1, #132	; 0x84
 80070e0:	4b19      	ldr	r3, [pc, #100]	; (8007148 <__gethex+0x474>)
 80070e2:	e6ac      	b.n	8006e3e <__gethex+0x16a>
 80070e4:	6922      	ldr	r2, [r4, #16]
 80070e6:	f104 010c 	add.w	r1, r4, #12
 80070ea:	3202      	adds	r2, #2
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	300c      	adds	r0, #12
 80070f0:	f000 f91a 	bl	8007328 <memcpy>
 80070f4:	4621      	mov	r1, r4
 80070f6:	9802      	ldr	r0, [sp, #8]
 80070f8:	f000 f964 	bl	80073c4 <_Bfree>
 80070fc:	464c      	mov	r4, r9
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	6122      	str	r2, [r4, #16]
 8007104:	2201      	movs	r2, #1
 8007106:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800710a:	615a      	str	r2, [r3, #20]
 800710c:	e7bd      	b.n	800708a <__gethex+0x3b6>
 800710e:	6922      	ldr	r2, [r4, #16]
 8007110:	455a      	cmp	r2, fp
 8007112:	dd0b      	ble.n	800712c <__gethex+0x458>
 8007114:	2101      	movs	r1, #1
 8007116:	4620      	mov	r0, r4
 8007118:	f7ff fd74 	bl	8006c04 <rshift>
 800711c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007120:	3501      	adds	r5, #1
 8007122:	42ab      	cmp	r3, r5
 8007124:	f6ff aed5 	blt.w	8006ed2 <__gethex+0x1fe>
 8007128:	2701      	movs	r7, #1
 800712a:	e7c2      	b.n	80070b2 <__gethex+0x3de>
 800712c:	f016 061f 	ands.w	r6, r6, #31
 8007130:	d0fa      	beq.n	8007128 <__gethex+0x454>
 8007132:	449a      	add	sl, r3
 8007134:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007138:	f000 f9fa 	bl	8007530 <__hi0bits>
 800713c:	f1c6 0620 	rsb	r6, r6, #32
 8007140:	42b0      	cmp	r0, r6
 8007142:	dbe7      	blt.n	8007114 <__gethex+0x440>
 8007144:	e7f0      	b.n	8007128 <__gethex+0x454>
 8007146:	bf00      	nop
 8007148:	08008f3c 	.word	0x08008f3c

0800714c <L_shift>:
 800714c:	f1c2 0208 	rsb	r2, r2, #8
 8007150:	0092      	lsls	r2, r2, #2
 8007152:	b570      	push	{r4, r5, r6, lr}
 8007154:	f1c2 0620 	rsb	r6, r2, #32
 8007158:	6843      	ldr	r3, [r0, #4]
 800715a:	6804      	ldr	r4, [r0, #0]
 800715c:	fa03 f506 	lsl.w	r5, r3, r6
 8007160:	432c      	orrs	r4, r5
 8007162:	40d3      	lsrs	r3, r2
 8007164:	6004      	str	r4, [r0, #0]
 8007166:	f840 3f04 	str.w	r3, [r0, #4]!
 800716a:	4288      	cmp	r0, r1
 800716c:	d3f4      	bcc.n	8007158 <L_shift+0xc>
 800716e:	bd70      	pop	{r4, r5, r6, pc}

08007170 <__match>:
 8007170:	b530      	push	{r4, r5, lr}
 8007172:	6803      	ldr	r3, [r0, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	b914      	cbnz	r4, 8007182 <__match+0x12>
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	2001      	movs	r0, #1
 8007180:	bd30      	pop	{r4, r5, pc}
 8007182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800718a:	2d19      	cmp	r5, #25
 800718c:	bf98      	it	ls
 800718e:	3220      	addls	r2, #32
 8007190:	42a2      	cmp	r2, r4
 8007192:	d0f0      	beq.n	8007176 <__match+0x6>
 8007194:	2000      	movs	r0, #0
 8007196:	e7f3      	b.n	8007180 <__match+0x10>

08007198 <__hexnan>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	2500      	movs	r5, #0
 800719e:	680b      	ldr	r3, [r1, #0]
 80071a0:	4682      	mov	sl, r0
 80071a2:	115e      	asrs	r6, r3, #5
 80071a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071a8:	f013 031f 	ands.w	r3, r3, #31
 80071ac:	bf18      	it	ne
 80071ae:	3604      	addne	r6, #4
 80071b0:	1f37      	subs	r7, r6, #4
 80071b2:	4690      	mov	r8, r2
 80071b4:	46b9      	mov	r9, r7
 80071b6:	463c      	mov	r4, r7
 80071b8:	46ab      	mov	fp, r5
 80071ba:	b087      	sub	sp, #28
 80071bc:	6801      	ldr	r1, [r0, #0]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80071c4:	9502      	str	r5, [sp, #8]
 80071c6:	784a      	ldrb	r2, [r1, #1]
 80071c8:	1c4b      	adds	r3, r1, #1
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	b342      	cbz	r2, 8007220 <__hexnan+0x88>
 80071ce:	4610      	mov	r0, r2
 80071d0:	9105      	str	r1, [sp, #20]
 80071d2:	9204      	str	r2, [sp, #16]
 80071d4:	f7ff fd69 	bl	8006caa <__hexdig_fun>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d14f      	bne.n	800727c <__hexnan+0xe4>
 80071dc:	9a04      	ldr	r2, [sp, #16]
 80071de:	9905      	ldr	r1, [sp, #20]
 80071e0:	2a20      	cmp	r2, #32
 80071e2:	d818      	bhi.n	8007216 <__hexnan+0x7e>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	459b      	cmp	fp, r3
 80071e8:	dd13      	ble.n	8007212 <__hexnan+0x7a>
 80071ea:	454c      	cmp	r4, r9
 80071ec:	d206      	bcs.n	80071fc <__hexnan+0x64>
 80071ee:	2d07      	cmp	r5, #7
 80071f0:	dc04      	bgt.n	80071fc <__hexnan+0x64>
 80071f2:	462a      	mov	r2, r5
 80071f4:	4649      	mov	r1, r9
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff ffa8 	bl	800714c <L_shift>
 80071fc:	4544      	cmp	r4, r8
 80071fe:	d950      	bls.n	80072a2 <__hexnan+0x10a>
 8007200:	2300      	movs	r3, #0
 8007202:	f1a4 0904 	sub.w	r9, r4, #4
 8007206:	f844 3c04 	str.w	r3, [r4, #-4]
 800720a:	461d      	mov	r5, r3
 800720c:	464c      	mov	r4, r9
 800720e:	f8cd b008 	str.w	fp, [sp, #8]
 8007212:	9903      	ldr	r1, [sp, #12]
 8007214:	e7d7      	b.n	80071c6 <__hexnan+0x2e>
 8007216:	2a29      	cmp	r2, #41	; 0x29
 8007218:	d156      	bne.n	80072c8 <__hexnan+0x130>
 800721a:	3102      	adds	r1, #2
 800721c:	f8ca 1000 	str.w	r1, [sl]
 8007220:	f1bb 0f00 	cmp.w	fp, #0
 8007224:	d050      	beq.n	80072c8 <__hexnan+0x130>
 8007226:	454c      	cmp	r4, r9
 8007228:	d206      	bcs.n	8007238 <__hexnan+0xa0>
 800722a:	2d07      	cmp	r5, #7
 800722c:	dc04      	bgt.n	8007238 <__hexnan+0xa0>
 800722e:	462a      	mov	r2, r5
 8007230:	4649      	mov	r1, r9
 8007232:	4620      	mov	r0, r4
 8007234:	f7ff ff8a 	bl	800714c <L_shift>
 8007238:	4544      	cmp	r4, r8
 800723a:	d934      	bls.n	80072a6 <__hexnan+0x10e>
 800723c:	4623      	mov	r3, r4
 800723e:	f1a8 0204 	sub.w	r2, r8, #4
 8007242:	f853 1b04 	ldr.w	r1, [r3], #4
 8007246:	429f      	cmp	r7, r3
 8007248:	f842 1f04 	str.w	r1, [r2, #4]!
 800724c:	d2f9      	bcs.n	8007242 <__hexnan+0xaa>
 800724e:	1b3b      	subs	r3, r7, r4
 8007250:	f023 0303 	bic.w	r3, r3, #3
 8007254:	3304      	adds	r3, #4
 8007256:	3401      	adds	r4, #1
 8007258:	3e03      	subs	r6, #3
 800725a:	42b4      	cmp	r4, r6
 800725c:	bf88      	it	hi
 800725e:	2304      	movhi	r3, #4
 8007260:	2200      	movs	r2, #0
 8007262:	4443      	add	r3, r8
 8007264:	f843 2b04 	str.w	r2, [r3], #4
 8007268:	429f      	cmp	r7, r3
 800726a:	d2fb      	bcs.n	8007264 <__hexnan+0xcc>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	b91b      	cbnz	r3, 8007278 <__hexnan+0xe0>
 8007270:	4547      	cmp	r7, r8
 8007272:	d127      	bne.n	80072c4 <__hexnan+0x12c>
 8007274:	2301      	movs	r3, #1
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	2005      	movs	r0, #5
 800727a:	e026      	b.n	80072ca <__hexnan+0x132>
 800727c:	3501      	adds	r5, #1
 800727e:	2d08      	cmp	r5, #8
 8007280:	f10b 0b01 	add.w	fp, fp, #1
 8007284:	dd06      	ble.n	8007294 <__hexnan+0xfc>
 8007286:	4544      	cmp	r4, r8
 8007288:	d9c3      	bls.n	8007212 <__hexnan+0x7a>
 800728a:	2300      	movs	r3, #0
 800728c:	2501      	movs	r5, #1
 800728e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007292:	3c04      	subs	r4, #4
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	f000 000f 	and.w	r0, r0, #15
 800729a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800729e:	6022      	str	r2, [r4, #0]
 80072a0:	e7b7      	b.n	8007212 <__hexnan+0x7a>
 80072a2:	2508      	movs	r5, #8
 80072a4:	e7b5      	b.n	8007212 <__hexnan+0x7a>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0df      	beq.n	800726c <__hexnan+0xd4>
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	f1c3 0320 	rsb	r3, r3, #32
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072bc:	401a      	ands	r2, r3
 80072be:	f846 2c04 	str.w	r2, [r6, #-4]
 80072c2:	e7d3      	b.n	800726c <__hexnan+0xd4>
 80072c4:	3f04      	subs	r7, #4
 80072c6:	e7d1      	b.n	800726c <__hexnan+0xd4>
 80072c8:	2004      	movs	r0, #4
 80072ca:	b007      	add	sp, #28
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072d0 <_localeconv_r>:
 80072d0:	4800      	ldr	r0, [pc, #0]	; (80072d4 <_localeconv_r+0x4>)
 80072d2:	4770      	bx	lr
 80072d4:	2000016c 	.word	0x2000016c

080072d8 <malloc>:
 80072d8:	4b02      	ldr	r3, [pc, #8]	; (80072e4 <malloc+0xc>)
 80072da:	4601      	mov	r1, r0
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	f000 bd43 	b.w	8007d68 <_malloc_r>
 80072e2:	bf00      	nop
 80072e4:	20000014 	.word	0x20000014

080072e8 <__ascii_mbtowc>:
 80072e8:	b082      	sub	sp, #8
 80072ea:	b901      	cbnz	r1, 80072ee <__ascii_mbtowc+0x6>
 80072ec:	a901      	add	r1, sp, #4
 80072ee:	b142      	cbz	r2, 8007302 <__ascii_mbtowc+0x1a>
 80072f0:	b14b      	cbz	r3, 8007306 <__ascii_mbtowc+0x1e>
 80072f2:	7813      	ldrb	r3, [r2, #0]
 80072f4:	600b      	str	r3, [r1, #0]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	1e10      	subs	r0, r2, #0
 80072fa:	bf18      	it	ne
 80072fc:	2001      	movne	r0, #1
 80072fe:	b002      	add	sp, #8
 8007300:	4770      	bx	lr
 8007302:	4610      	mov	r0, r2
 8007304:	e7fb      	b.n	80072fe <__ascii_mbtowc+0x16>
 8007306:	f06f 0001 	mvn.w	r0, #1
 800730a:	e7f8      	b.n	80072fe <__ascii_mbtowc+0x16>

0800730c <memchr>:
 800730c:	4603      	mov	r3, r0
 800730e:	b510      	push	{r4, lr}
 8007310:	b2c9      	uxtb	r1, r1
 8007312:	4402      	add	r2, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	4618      	mov	r0, r3
 8007318:	d101      	bne.n	800731e <memchr+0x12>
 800731a:	2000      	movs	r0, #0
 800731c:	e003      	b.n	8007326 <memchr+0x1a>
 800731e:	7804      	ldrb	r4, [r0, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	428c      	cmp	r4, r1
 8007324:	d1f6      	bne.n	8007314 <memchr+0x8>
 8007326:	bd10      	pop	{r4, pc}

08007328 <memcpy>:
 8007328:	440a      	add	r2, r1
 800732a:	4291      	cmp	r1, r2
 800732c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007330:	d100      	bne.n	8007334 <memcpy+0xc>
 8007332:	4770      	bx	lr
 8007334:	b510      	push	{r4, lr}
 8007336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733a:	4291      	cmp	r1, r2
 800733c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007340:	d1f9      	bne.n	8007336 <memcpy+0xe>
 8007342:	bd10      	pop	{r4, pc}

08007344 <_Balloc>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
 800734c:	b976      	cbnz	r6, 800736c <_Balloc+0x28>
 800734e:	2010      	movs	r0, #16
 8007350:	f7ff ffc2 	bl	80072d8 <malloc>
 8007354:	4602      	mov	r2, r0
 8007356:	6260      	str	r0, [r4, #36]	; 0x24
 8007358:	b920      	cbnz	r0, 8007364 <_Balloc+0x20>
 800735a:	2166      	movs	r1, #102	; 0x66
 800735c:	4b17      	ldr	r3, [pc, #92]	; (80073bc <_Balloc+0x78>)
 800735e:	4818      	ldr	r0, [pc, #96]	; (80073c0 <_Balloc+0x7c>)
 8007360:	f000 feee 	bl	8008140 <__assert_func>
 8007364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007368:	6006      	str	r6, [r0, #0]
 800736a:	60c6      	str	r6, [r0, #12]
 800736c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800736e:	68f3      	ldr	r3, [r6, #12]
 8007370:	b183      	cbz	r3, 8007394 <_Balloc+0x50>
 8007372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800737a:	b9b8      	cbnz	r0, 80073ac <_Balloc+0x68>
 800737c:	2101      	movs	r1, #1
 800737e:	fa01 f605 	lsl.w	r6, r1, r5
 8007382:	1d72      	adds	r2, r6, #5
 8007384:	4620      	mov	r0, r4
 8007386:	0092      	lsls	r2, r2, #2
 8007388:	f000 fc94 	bl	8007cb4 <_calloc_r>
 800738c:	b160      	cbz	r0, 80073a8 <_Balloc+0x64>
 800738e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007392:	e00e      	b.n	80073b2 <_Balloc+0x6e>
 8007394:	2221      	movs	r2, #33	; 0x21
 8007396:	2104      	movs	r1, #4
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fc8b 	bl	8007cb4 <_calloc_r>
 800739e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a0:	60f0      	str	r0, [r6, #12]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e4      	bne.n	8007372 <_Balloc+0x2e>
 80073a8:	2000      	movs	r0, #0
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	6802      	ldr	r2, [r0, #0]
 80073ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073b2:	2300      	movs	r3, #0
 80073b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073b8:	e7f7      	b.n	80073aa <_Balloc+0x66>
 80073ba:	bf00      	nop
 80073bc:	08008ec6 	.word	0x08008ec6
 80073c0:	08008fcc 	.word	0x08008fcc

080073c4 <_Bfree>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073c8:	4605      	mov	r5, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	b976      	cbnz	r6, 80073ec <_Bfree+0x28>
 80073ce:	2010      	movs	r0, #16
 80073d0:	f7ff ff82 	bl	80072d8 <malloc>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6268      	str	r0, [r5, #36]	; 0x24
 80073d8:	b920      	cbnz	r0, 80073e4 <_Bfree+0x20>
 80073da:	218a      	movs	r1, #138	; 0x8a
 80073dc:	4b08      	ldr	r3, [pc, #32]	; (8007400 <_Bfree+0x3c>)
 80073de:	4809      	ldr	r0, [pc, #36]	; (8007404 <_Bfree+0x40>)
 80073e0:	f000 feae 	bl	8008140 <__assert_func>
 80073e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073e8:	6006      	str	r6, [r0, #0]
 80073ea:	60c6      	str	r6, [r0, #12]
 80073ec:	b13c      	cbz	r4, 80073fe <_Bfree+0x3a>
 80073ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073f0:	6862      	ldr	r2, [r4, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073f8:	6021      	str	r1, [r4, #0]
 80073fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	08008ec6 	.word	0x08008ec6
 8007404:	08008fcc 	.word	0x08008fcc

08007408 <__multadd>:
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	4698      	mov	r8, r3
 800740e:	460c      	mov	r4, r1
 8007410:	2300      	movs	r3, #0
 8007412:	690e      	ldr	r6, [r1, #16]
 8007414:	4607      	mov	r7, r0
 8007416:	f101 0014 	add.w	r0, r1, #20
 800741a:	6805      	ldr	r5, [r0, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	b2a9      	uxth	r1, r5
 8007420:	fb02 8101 	mla	r1, r2, r1, r8
 8007424:	0c2d      	lsrs	r5, r5, #16
 8007426:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800742a:	fb02 c505 	mla	r5, r2, r5, ip
 800742e:	b289      	uxth	r1, r1
 8007430:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007434:	429e      	cmp	r6, r3
 8007436:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800743a:	f840 1b04 	str.w	r1, [r0], #4
 800743e:	dcec      	bgt.n	800741a <__multadd+0x12>
 8007440:	f1b8 0f00 	cmp.w	r8, #0
 8007444:	d022      	beq.n	800748c <__multadd+0x84>
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	42b3      	cmp	r3, r6
 800744a:	dc19      	bgt.n	8007480 <__multadd+0x78>
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	4638      	mov	r0, r7
 8007450:	3101      	adds	r1, #1
 8007452:	f7ff ff77 	bl	8007344 <_Balloc>
 8007456:	4605      	mov	r5, r0
 8007458:	b928      	cbnz	r0, 8007466 <__multadd+0x5e>
 800745a:	4602      	mov	r2, r0
 800745c:	21b5      	movs	r1, #181	; 0xb5
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <__multadd+0x8c>)
 8007460:	480d      	ldr	r0, [pc, #52]	; (8007498 <__multadd+0x90>)
 8007462:	f000 fe6d 	bl	8008140 <__assert_func>
 8007466:	6922      	ldr	r2, [r4, #16]
 8007468:	f104 010c 	add.w	r1, r4, #12
 800746c:	3202      	adds	r2, #2
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	300c      	adds	r0, #12
 8007472:	f7ff ff59 	bl	8007328 <memcpy>
 8007476:	4621      	mov	r1, r4
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff ffa3 	bl	80073c4 <_Bfree>
 800747e:	462c      	mov	r4, r5
 8007480:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007484:	3601      	adds	r6, #1
 8007486:	f8c3 8014 	str.w	r8, [r3, #20]
 800748a:	6126      	str	r6, [r4, #16]
 800748c:	4620      	mov	r0, r4
 800748e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007492:	bf00      	nop
 8007494:	08008f3c 	.word	0x08008f3c
 8007498:	08008fcc 	.word	0x08008fcc

0800749c <__s2b>:
 800749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	4615      	mov	r5, r2
 80074a2:	2209      	movs	r2, #9
 80074a4:	461f      	mov	r7, r3
 80074a6:	3308      	adds	r3, #8
 80074a8:	460c      	mov	r4, r1
 80074aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ae:	4606      	mov	r6, r0
 80074b0:	2201      	movs	r2, #1
 80074b2:	2100      	movs	r1, #0
 80074b4:	429a      	cmp	r2, r3
 80074b6:	db09      	blt.n	80074cc <__s2b+0x30>
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff43 	bl	8007344 <_Balloc>
 80074be:	b940      	cbnz	r0, 80074d2 <__s2b+0x36>
 80074c0:	4602      	mov	r2, r0
 80074c2:	21ce      	movs	r1, #206	; 0xce
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <__s2b+0x8c>)
 80074c6:	4819      	ldr	r0, [pc, #100]	; (800752c <__s2b+0x90>)
 80074c8:	f000 fe3a 	bl	8008140 <__assert_func>
 80074cc:	0052      	lsls	r2, r2, #1
 80074ce:	3101      	adds	r1, #1
 80074d0:	e7f0      	b.n	80074b4 <__s2b+0x18>
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	2d09      	cmp	r5, #9
 80074d6:	6143      	str	r3, [r0, #20]
 80074d8:	f04f 0301 	mov.w	r3, #1
 80074dc:	6103      	str	r3, [r0, #16]
 80074de:	dd16      	ble.n	800750e <__s2b+0x72>
 80074e0:	f104 0909 	add.w	r9, r4, #9
 80074e4:	46c8      	mov	r8, r9
 80074e6:	442c      	add	r4, r5
 80074e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074ec:	4601      	mov	r1, r0
 80074ee:	220a      	movs	r2, #10
 80074f0:	4630      	mov	r0, r6
 80074f2:	3b30      	subs	r3, #48	; 0x30
 80074f4:	f7ff ff88 	bl	8007408 <__multadd>
 80074f8:	45a0      	cmp	r8, r4
 80074fa:	d1f5      	bne.n	80074e8 <__s2b+0x4c>
 80074fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007500:	444c      	add	r4, r9
 8007502:	1b2d      	subs	r5, r5, r4
 8007504:	1963      	adds	r3, r4, r5
 8007506:	42bb      	cmp	r3, r7
 8007508:	db04      	blt.n	8007514 <__s2b+0x78>
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	2509      	movs	r5, #9
 8007510:	340a      	adds	r4, #10
 8007512:	e7f6      	b.n	8007502 <__s2b+0x66>
 8007514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007518:	4601      	mov	r1, r0
 800751a:	220a      	movs	r2, #10
 800751c:	4630      	mov	r0, r6
 800751e:	3b30      	subs	r3, #48	; 0x30
 8007520:	f7ff ff72 	bl	8007408 <__multadd>
 8007524:	e7ee      	b.n	8007504 <__s2b+0x68>
 8007526:	bf00      	nop
 8007528:	08008f3c 	.word	0x08008f3c
 800752c:	08008fcc 	.word	0x08008fcc

08007530 <__hi0bits>:
 8007530:	0c02      	lsrs	r2, r0, #16
 8007532:	0412      	lsls	r2, r2, #16
 8007534:	4603      	mov	r3, r0
 8007536:	b9ca      	cbnz	r2, 800756c <__hi0bits+0x3c>
 8007538:	0403      	lsls	r3, r0, #16
 800753a:	2010      	movs	r0, #16
 800753c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007540:	bf04      	itt	eq
 8007542:	021b      	lsleq	r3, r3, #8
 8007544:	3008      	addeq	r0, #8
 8007546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800754a:	bf04      	itt	eq
 800754c:	011b      	lsleq	r3, r3, #4
 800754e:	3004      	addeq	r0, #4
 8007550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007554:	bf04      	itt	eq
 8007556:	009b      	lsleq	r3, r3, #2
 8007558:	3002      	addeq	r0, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	db05      	blt.n	800756a <__hi0bits+0x3a>
 800755e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007562:	f100 0001 	add.w	r0, r0, #1
 8007566:	bf08      	it	eq
 8007568:	2020      	moveq	r0, #32
 800756a:	4770      	bx	lr
 800756c:	2000      	movs	r0, #0
 800756e:	e7e5      	b.n	800753c <__hi0bits+0xc>

08007570 <__lo0bits>:
 8007570:	6803      	ldr	r3, [r0, #0]
 8007572:	4602      	mov	r2, r0
 8007574:	f013 0007 	ands.w	r0, r3, #7
 8007578:	d00b      	beq.n	8007592 <__lo0bits+0x22>
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	d422      	bmi.n	80075c4 <__lo0bits+0x54>
 800757e:	0798      	lsls	r0, r3, #30
 8007580:	bf49      	itett	mi
 8007582:	085b      	lsrmi	r3, r3, #1
 8007584:	089b      	lsrpl	r3, r3, #2
 8007586:	2001      	movmi	r0, #1
 8007588:	6013      	strmi	r3, [r2, #0]
 800758a:	bf5c      	itt	pl
 800758c:	2002      	movpl	r0, #2
 800758e:	6013      	strpl	r3, [r2, #0]
 8007590:	4770      	bx	lr
 8007592:	b299      	uxth	r1, r3
 8007594:	b909      	cbnz	r1, 800759a <__lo0bits+0x2a>
 8007596:	2010      	movs	r0, #16
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800759e:	bf04      	itt	eq
 80075a0:	0a1b      	lsreq	r3, r3, #8
 80075a2:	3008      	addeq	r0, #8
 80075a4:	0719      	lsls	r1, r3, #28
 80075a6:	bf04      	itt	eq
 80075a8:	091b      	lsreq	r3, r3, #4
 80075aa:	3004      	addeq	r0, #4
 80075ac:	0799      	lsls	r1, r3, #30
 80075ae:	bf04      	itt	eq
 80075b0:	089b      	lsreq	r3, r3, #2
 80075b2:	3002      	addeq	r0, #2
 80075b4:	07d9      	lsls	r1, r3, #31
 80075b6:	d403      	bmi.n	80075c0 <__lo0bits+0x50>
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	f100 0001 	add.w	r0, r0, #1
 80075be:	d003      	beq.n	80075c8 <__lo0bits+0x58>
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4770      	bx	lr
 80075c4:	2000      	movs	r0, #0
 80075c6:	4770      	bx	lr
 80075c8:	2020      	movs	r0, #32
 80075ca:	4770      	bx	lr

080075cc <__i2b>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	460c      	mov	r4, r1
 80075d0:	2101      	movs	r1, #1
 80075d2:	f7ff feb7 	bl	8007344 <_Balloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	b928      	cbnz	r0, 80075e6 <__i2b+0x1a>
 80075da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <__i2b+0x24>)
 80075e0:	4804      	ldr	r0, [pc, #16]	; (80075f4 <__i2b+0x28>)
 80075e2:	f000 fdad 	bl	8008140 <__assert_func>
 80075e6:	2301      	movs	r3, #1
 80075e8:	6144      	str	r4, [r0, #20]
 80075ea:	6103      	str	r3, [r0, #16]
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop
 80075f0:	08008f3c 	.word	0x08008f3c
 80075f4:	08008fcc 	.word	0x08008fcc

080075f8 <__multiply>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	4614      	mov	r4, r2
 80075fe:	690a      	ldr	r2, [r1, #16]
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	460d      	mov	r5, r1
 8007604:	429a      	cmp	r2, r3
 8007606:	bfbe      	ittt	lt
 8007608:	460b      	movlt	r3, r1
 800760a:	4625      	movlt	r5, r4
 800760c:	461c      	movlt	r4, r3
 800760e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007612:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007616:	68ab      	ldr	r3, [r5, #8]
 8007618:	6869      	ldr	r1, [r5, #4]
 800761a:	eb0a 0709 	add.w	r7, sl, r9
 800761e:	42bb      	cmp	r3, r7
 8007620:	b085      	sub	sp, #20
 8007622:	bfb8      	it	lt
 8007624:	3101      	addlt	r1, #1
 8007626:	f7ff fe8d 	bl	8007344 <_Balloc>
 800762a:	b930      	cbnz	r0, 800763a <__multiply+0x42>
 800762c:	4602      	mov	r2, r0
 800762e:	f240 115d 	movw	r1, #349	; 0x15d
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <__multiply+0x140>)
 8007634:	4841      	ldr	r0, [pc, #260]	; (800773c <__multiply+0x144>)
 8007636:	f000 fd83 	bl	8008140 <__assert_func>
 800763a:	f100 0614 	add.w	r6, r0, #20
 800763e:	4633      	mov	r3, r6
 8007640:	2200      	movs	r2, #0
 8007642:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007646:	4543      	cmp	r3, r8
 8007648:	d31e      	bcc.n	8007688 <__multiply+0x90>
 800764a:	f105 0c14 	add.w	ip, r5, #20
 800764e:	f104 0314 	add.w	r3, r4, #20
 8007652:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007656:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	ebac 0205 	sub.w	r2, ip, r5
 8007660:	3a15      	subs	r2, #21
 8007662:	f022 0203 	bic.w	r2, r2, #3
 8007666:	3204      	adds	r2, #4
 8007668:	f105 0115 	add.w	r1, r5, #21
 800766c:	458c      	cmp	ip, r1
 800766e:	bf38      	it	cc
 8007670:	2204      	movcc	r2, #4
 8007672:	9201      	str	r2, [sp, #4]
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	429a      	cmp	r2, r3
 800767a:	d808      	bhi.n	800768e <__multiply+0x96>
 800767c:	2f00      	cmp	r7, #0
 800767e:	dc55      	bgt.n	800772c <__multiply+0x134>
 8007680:	6107      	str	r7, [r0, #16]
 8007682:	b005      	add	sp, #20
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	f843 2b04 	str.w	r2, [r3], #4
 800768c:	e7db      	b.n	8007646 <__multiply+0x4e>
 800768e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007692:	f1ba 0f00 	cmp.w	sl, #0
 8007696:	d020      	beq.n	80076da <__multiply+0xe2>
 8007698:	46b1      	mov	r9, r6
 800769a:	2200      	movs	r2, #0
 800769c:	f105 0e14 	add.w	lr, r5, #20
 80076a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076a4:	f8d9 b000 	ldr.w	fp, [r9]
 80076a8:	b2a1      	uxth	r1, r4
 80076aa:	fa1f fb8b 	uxth.w	fp, fp
 80076ae:	fb0a b101 	mla	r1, sl, r1, fp
 80076b2:	4411      	add	r1, r2
 80076b4:	f8d9 2000 	ldr.w	r2, [r9]
 80076b8:	0c24      	lsrs	r4, r4, #16
 80076ba:	0c12      	lsrs	r2, r2, #16
 80076bc:	fb0a 2404 	mla	r4, sl, r4, r2
 80076c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80076c4:	b289      	uxth	r1, r1
 80076c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076ca:	45f4      	cmp	ip, lr
 80076cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80076d0:	f849 1b04 	str.w	r1, [r9], #4
 80076d4:	d8e4      	bhi.n	80076a0 <__multiply+0xa8>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	5072      	str	r2, [r6, r1]
 80076da:	9a03      	ldr	r2, [sp, #12]
 80076dc:	3304      	adds	r3, #4
 80076de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	d01f      	beq.n	8007728 <__multiply+0x130>
 80076e8:	46b6      	mov	lr, r6
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	6834      	ldr	r4, [r6, #0]
 80076f0:	f105 0114 	add.w	r1, r5, #20
 80076f4:	880a      	ldrh	r2, [r1, #0]
 80076f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80076fa:	b2a4      	uxth	r4, r4
 80076fc:	fb09 b202 	mla	r2, r9, r2, fp
 8007700:	4492      	add	sl, r2
 8007702:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007706:	f84e 4b04 	str.w	r4, [lr], #4
 800770a:	f851 4b04 	ldr.w	r4, [r1], #4
 800770e:	f8be 2000 	ldrh.w	r2, [lr]
 8007712:	0c24      	lsrs	r4, r4, #16
 8007714:	fb09 2404 	mla	r4, r9, r4, r2
 8007718:	458c      	cmp	ip, r1
 800771a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800771e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007722:	d8e7      	bhi.n	80076f4 <__multiply+0xfc>
 8007724:	9a01      	ldr	r2, [sp, #4]
 8007726:	50b4      	str	r4, [r6, r2]
 8007728:	3604      	adds	r6, #4
 800772a:	e7a3      	b.n	8007674 <__multiply+0x7c>
 800772c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1a5      	bne.n	8007680 <__multiply+0x88>
 8007734:	3f01      	subs	r7, #1
 8007736:	e7a1      	b.n	800767c <__multiply+0x84>
 8007738:	08008f3c 	.word	0x08008f3c
 800773c:	08008fcc 	.word	0x08008fcc

08007740 <__pow5mult>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	4615      	mov	r5, r2
 8007746:	f012 0203 	ands.w	r2, r2, #3
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	d007      	beq.n	8007760 <__pow5mult+0x20>
 8007750:	4c25      	ldr	r4, [pc, #148]	; (80077e8 <__pow5mult+0xa8>)
 8007752:	3a01      	subs	r2, #1
 8007754:	2300      	movs	r3, #0
 8007756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800775a:	f7ff fe55 	bl	8007408 <__multadd>
 800775e:	4607      	mov	r7, r0
 8007760:	10ad      	asrs	r5, r5, #2
 8007762:	d03d      	beq.n	80077e0 <__pow5mult+0xa0>
 8007764:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007766:	b97c      	cbnz	r4, 8007788 <__pow5mult+0x48>
 8007768:	2010      	movs	r0, #16
 800776a:	f7ff fdb5 	bl	80072d8 <malloc>
 800776e:	4602      	mov	r2, r0
 8007770:	6270      	str	r0, [r6, #36]	; 0x24
 8007772:	b928      	cbnz	r0, 8007780 <__pow5mult+0x40>
 8007774:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007778:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <__pow5mult+0xac>)
 800777a:	481d      	ldr	r0, [pc, #116]	; (80077f0 <__pow5mult+0xb0>)
 800777c:	f000 fce0 	bl	8008140 <__assert_func>
 8007780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007784:	6004      	str	r4, [r0, #0]
 8007786:	60c4      	str	r4, [r0, #12]
 8007788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800778c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007790:	b94c      	cbnz	r4, 80077a6 <__pow5mult+0x66>
 8007792:	f240 2171 	movw	r1, #625	; 0x271
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff ff18 	bl	80075cc <__i2b>
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077a4:	6003      	str	r3, [r0, #0]
 80077a6:	f04f 0900 	mov.w	r9, #0
 80077aa:	07eb      	lsls	r3, r5, #31
 80077ac:	d50a      	bpl.n	80077c4 <__pow5mult+0x84>
 80077ae:	4639      	mov	r1, r7
 80077b0:	4622      	mov	r2, r4
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff20 	bl	80075f8 <__multiply>
 80077b8:	4680      	mov	r8, r0
 80077ba:	4639      	mov	r1, r7
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fe01 	bl	80073c4 <_Bfree>
 80077c2:	4647      	mov	r7, r8
 80077c4:	106d      	asrs	r5, r5, #1
 80077c6:	d00b      	beq.n	80077e0 <__pow5mult+0xa0>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	b938      	cbnz	r0, 80077dc <__pow5mult+0x9c>
 80077cc:	4622      	mov	r2, r4
 80077ce:	4621      	mov	r1, r4
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ff11 	bl	80075f8 <__multiply>
 80077d6:	6020      	str	r0, [r4, #0]
 80077d8:	f8c0 9000 	str.w	r9, [r0]
 80077dc:	4604      	mov	r4, r0
 80077de:	e7e4      	b.n	80077aa <__pow5mult+0x6a>
 80077e0:	4638      	mov	r0, r7
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	bf00      	nop
 80077e8:	08009120 	.word	0x08009120
 80077ec:	08008ec6 	.word	0x08008ec6
 80077f0:	08008fcc 	.word	0x08008fcc

080077f4 <__lshift>:
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	460c      	mov	r4, r1
 80077fa:	4607      	mov	r7, r0
 80077fc:	4691      	mov	r9, r2
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	6849      	ldr	r1, [r1, #4]
 8007802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800780c:	f108 0601 	add.w	r6, r8, #1
 8007810:	42b3      	cmp	r3, r6
 8007812:	db0b      	blt.n	800782c <__lshift+0x38>
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff fd95 	bl	8007344 <_Balloc>
 800781a:	4605      	mov	r5, r0
 800781c:	b948      	cbnz	r0, 8007832 <__lshift+0x3e>
 800781e:	4602      	mov	r2, r0
 8007820:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007824:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <__lshift+0xd0>)
 8007826:	4828      	ldr	r0, [pc, #160]	; (80078c8 <__lshift+0xd4>)
 8007828:	f000 fc8a 	bl	8008140 <__assert_func>
 800782c:	3101      	adds	r1, #1
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	e7ee      	b.n	8007810 <__lshift+0x1c>
 8007832:	2300      	movs	r3, #0
 8007834:	f100 0114 	add.w	r1, r0, #20
 8007838:	f100 0210 	add.w	r2, r0, #16
 800783c:	4618      	mov	r0, r3
 800783e:	4553      	cmp	r3, sl
 8007840:	db33      	blt.n	80078aa <__lshift+0xb6>
 8007842:	6920      	ldr	r0, [r4, #16]
 8007844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007848:	f104 0314 	add.w	r3, r4, #20
 800784c:	f019 091f 	ands.w	r9, r9, #31
 8007850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007858:	d02b      	beq.n	80078b2 <__lshift+0xbe>
 800785a:	468a      	mov	sl, r1
 800785c:	2200      	movs	r2, #0
 800785e:	f1c9 0e20 	rsb	lr, r9, #32
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	fa00 f009 	lsl.w	r0, r0, r9
 8007868:	4302      	orrs	r2, r0
 800786a:	f84a 2b04 	str.w	r2, [sl], #4
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	459c      	cmp	ip, r3
 8007874:	fa22 f20e 	lsr.w	r2, r2, lr
 8007878:	d8f3      	bhi.n	8007862 <__lshift+0x6e>
 800787a:	ebac 0304 	sub.w	r3, ip, r4
 800787e:	3b15      	subs	r3, #21
 8007880:	f023 0303 	bic.w	r3, r3, #3
 8007884:	3304      	adds	r3, #4
 8007886:	f104 0015 	add.w	r0, r4, #21
 800788a:	4584      	cmp	ip, r0
 800788c:	bf38      	it	cc
 800788e:	2304      	movcc	r3, #4
 8007890:	50ca      	str	r2, [r1, r3]
 8007892:	b10a      	cbz	r2, 8007898 <__lshift+0xa4>
 8007894:	f108 0602 	add.w	r6, r8, #2
 8007898:	3e01      	subs	r6, #1
 800789a:	4638      	mov	r0, r7
 800789c:	4621      	mov	r1, r4
 800789e:	612e      	str	r6, [r5, #16]
 80078a0:	f7ff fd90 	bl	80073c4 <_Bfree>
 80078a4:	4628      	mov	r0, r5
 80078a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ae:	3301      	adds	r3, #1
 80078b0:	e7c5      	b.n	800783e <__lshift+0x4a>
 80078b2:	3904      	subs	r1, #4
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	459c      	cmp	ip, r3
 80078ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80078be:	d8f9      	bhi.n	80078b4 <__lshift+0xc0>
 80078c0:	e7ea      	b.n	8007898 <__lshift+0xa4>
 80078c2:	bf00      	nop
 80078c4:	08008f3c 	.word	0x08008f3c
 80078c8:	08008fcc 	.word	0x08008fcc

080078cc <__mcmp>:
 80078cc:	4603      	mov	r3, r0
 80078ce:	690a      	ldr	r2, [r1, #16]
 80078d0:	6900      	ldr	r0, [r0, #16]
 80078d2:	b530      	push	{r4, r5, lr}
 80078d4:	1a80      	subs	r0, r0, r2
 80078d6:	d10d      	bne.n	80078f4 <__mcmp+0x28>
 80078d8:	3314      	adds	r3, #20
 80078da:	3114      	adds	r1, #20
 80078dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078ec:	4295      	cmp	r5, r2
 80078ee:	d002      	beq.n	80078f6 <__mcmp+0x2a>
 80078f0:	d304      	bcc.n	80078fc <__mcmp+0x30>
 80078f2:	2001      	movs	r0, #1
 80078f4:	bd30      	pop	{r4, r5, pc}
 80078f6:	42a3      	cmp	r3, r4
 80078f8:	d3f4      	bcc.n	80078e4 <__mcmp+0x18>
 80078fa:	e7fb      	b.n	80078f4 <__mcmp+0x28>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e7f8      	b.n	80078f4 <__mcmp+0x28>
	...

08007904 <__mdiff>:
 8007904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	4606      	mov	r6, r0
 800790c:	4611      	mov	r1, r2
 800790e:	4620      	mov	r0, r4
 8007910:	4692      	mov	sl, r2
 8007912:	f7ff ffdb 	bl	80078cc <__mcmp>
 8007916:	1e05      	subs	r5, r0, #0
 8007918:	d111      	bne.n	800793e <__mdiff+0x3a>
 800791a:	4629      	mov	r1, r5
 800791c:	4630      	mov	r0, r6
 800791e:	f7ff fd11 	bl	8007344 <_Balloc>
 8007922:	4602      	mov	r2, r0
 8007924:	b928      	cbnz	r0, 8007932 <__mdiff+0x2e>
 8007926:	f240 2132 	movw	r1, #562	; 0x232
 800792a:	4b3c      	ldr	r3, [pc, #240]	; (8007a1c <__mdiff+0x118>)
 800792c:	483c      	ldr	r0, [pc, #240]	; (8007a20 <__mdiff+0x11c>)
 800792e:	f000 fc07 	bl	8008140 <__assert_func>
 8007932:	2301      	movs	r3, #1
 8007934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007938:	4610      	mov	r0, r2
 800793a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	bfa4      	itt	ge
 8007940:	4653      	movge	r3, sl
 8007942:	46a2      	movge	sl, r4
 8007944:	4630      	mov	r0, r6
 8007946:	f8da 1004 	ldr.w	r1, [sl, #4]
 800794a:	bfa6      	itte	ge
 800794c:	461c      	movge	r4, r3
 800794e:	2500      	movge	r5, #0
 8007950:	2501      	movlt	r5, #1
 8007952:	f7ff fcf7 	bl	8007344 <_Balloc>
 8007956:	4602      	mov	r2, r0
 8007958:	b918      	cbnz	r0, 8007962 <__mdiff+0x5e>
 800795a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800795e:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <__mdiff+0x118>)
 8007960:	e7e4      	b.n	800792c <__mdiff+0x28>
 8007962:	f100 0814 	add.w	r8, r0, #20
 8007966:	f8da 7010 	ldr.w	r7, [sl, #16]
 800796a:	60c5      	str	r5, [r0, #12]
 800796c:	f04f 0c00 	mov.w	ip, #0
 8007970:	f10a 0514 	add.w	r5, sl, #20
 8007974:	f10a 0010 	add.w	r0, sl, #16
 8007978:	46c2      	mov	sl, r8
 800797a:	6926      	ldr	r6, [r4, #16]
 800797c:	f104 0914 	add.w	r9, r4, #20
 8007980:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007988:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800798c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007990:	fa1f f18b 	uxth.w	r1, fp
 8007994:	4461      	add	r1, ip
 8007996:	fa1f fc83 	uxth.w	ip, r3
 800799a:	0c1b      	lsrs	r3, r3, #16
 800799c:	eba1 010c 	sub.w	r1, r1, ip
 80079a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079a8:	b289      	uxth	r1, r1
 80079aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079ae:	454e      	cmp	r6, r9
 80079b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079b4:	f84a 3b04 	str.w	r3, [sl], #4
 80079b8:	d8e6      	bhi.n	8007988 <__mdiff+0x84>
 80079ba:	1b33      	subs	r3, r6, r4
 80079bc:	3b15      	subs	r3, #21
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	3415      	adds	r4, #21
 80079c4:	3304      	adds	r3, #4
 80079c6:	42a6      	cmp	r6, r4
 80079c8:	bf38      	it	cc
 80079ca:	2304      	movcc	r3, #4
 80079cc:	441d      	add	r5, r3
 80079ce:	4443      	add	r3, r8
 80079d0:	461e      	mov	r6, r3
 80079d2:	462c      	mov	r4, r5
 80079d4:	4574      	cmp	r4, lr
 80079d6:	d30e      	bcc.n	80079f6 <__mdiff+0xf2>
 80079d8:	f10e 0103 	add.w	r1, lr, #3
 80079dc:	1b49      	subs	r1, r1, r5
 80079de:	f021 0103 	bic.w	r1, r1, #3
 80079e2:	3d03      	subs	r5, #3
 80079e4:	45ae      	cmp	lr, r5
 80079e6:	bf38      	it	cc
 80079e8:	2100      	movcc	r1, #0
 80079ea:	4419      	add	r1, r3
 80079ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80079f0:	b18b      	cbz	r3, 8007a16 <__mdiff+0x112>
 80079f2:	6117      	str	r7, [r2, #16]
 80079f4:	e7a0      	b.n	8007938 <__mdiff+0x34>
 80079f6:	f854 8b04 	ldr.w	r8, [r4], #4
 80079fa:	fa1f f188 	uxth.w	r1, r8
 80079fe:	4461      	add	r1, ip
 8007a00:	1408      	asrs	r0, r1, #16
 8007a02:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007a06:	b289      	uxth	r1, r1
 8007a08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a10:	f846 1b04 	str.w	r1, [r6], #4
 8007a14:	e7de      	b.n	80079d4 <__mdiff+0xd0>
 8007a16:	3f01      	subs	r7, #1
 8007a18:	e7e8      	b.n	80079ec <__mdiff+0xe8>
 8007a1a:	bf00      	nop
 8007a1c:	08008f3c 	.word	0x08008f3c
 8007a20:	08008fcc 	.word	0x08008fcc

08007a24 <__ulp>:
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <__ulp+0x48>)
 8007a26:	400b      	ands	r3, r1
 8007a28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dd02      	ble.n	8007a36 <__ulp+0x12>
 8007a30:	2000      	movs	r0, #0
 8007a32:	4619      	mov	r1, r3
 8007a34:	4770      	bx	lr
 8007a36:	425b      	negs	r3, r3
 8007a38:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a3c:	f04f 0000 	mov.w	r0, #0
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a48:	da04      	bge.n	8007a54 <__ulp+0x30>
 8007a4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a4e:	fa43 f102 	asr.w	r1, r3, r2
 8007a52:	4770      	bx	lr
 8007a54:	f1a2 0314 	sub.w	r3, r2, #20
 8007a58:	2b1e      	cmp	r3, #30
 8007a5a:	bfd6      	itet	le
 8007a5c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a60:	2301      	movgt	r3, #1
 8007a62:	fa22 f303 	lsrle.w	r3, r2, r3
 8007a66:	4618      	mov	r0, r3
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	7ff00000 	.word	0x7ff00000

08007a70 <__b2d>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	6907      	ldr	r7, [r0, #16]
 8007a76:	f100 0914 	add.w	r9, r0, #20
 8007a7a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007a7e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007a82:	f1a7 0804 	sub.w	r8, r7, #4
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7ff fd52 	bl	8007530 <__hi0bits>
 8007a8c:	f1c0 0320 	rsb	r3, r0, #32
 8007a90:	280a      	cmp	r0, #10
 8007a92:	600b      	str	r3, [r1, #0]
 8007a94:	491f      	ldr	r1, [pc, #124]	; (8007b14 <__b2d+0xa4>)
 8007a96:	dc17      	bgt.n	8007ac8 <__b2d+0x58>
 8007a98:	45c1      	cmp	r9, r8
 8007a9a:	bf28      	it	cs
 8007a9c:	2200      	movcs	r2, #0
 8007a9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007aa2:	fa26 f30c 	lsr.w	r3, r6, ip
 8007aa6:	bf38      	it	cc
 8007aa8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007aac:	ea43 0501 	orr.w	r5, r3, r1
 8007ab0:	f100 0315 	add.w	r3, r0, #21
 8007ab4:	fa06 f303 	lsl.w	r3, r6, r3
 8007ab8:	fa22 f20c 	lsr.w	r2, r2, ip
 8007abc:	ea43 0402 	orr.w	r4, r3, r2
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac8:	45c1      	cmp	r9, r8
 8007aca:	bf2e      	itee	cs
 8007acc:	2200      	movcs	r2, #0
 8007ace:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ad2:	f1a7 0808 	subcc.w	r8, r7, #8
 8007ad6:	f1b0 030b 	subs.w	r3, r0, #11
 8007ada:	d016      	beq.n	8007b0a <__b2d+0x9a>
 8007adc:	f1c3 0720 	rsb	r7, r3, #32
 8007ae0:	fa22 f107 	lsr.w	r1, r2, r7
 8007ae4:	45c8      	cmp	r8, r9
 8007ae6:	fa06 f603 	lsl.w	r6, r6, r3
 8007aea:	ea46 0601 	orr.w	r6, r6, r1
 8007aee:	bf94      	ite	ls
 8007af0:	2100      	movls	r1, #0
 8007af2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007af6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007afa:	fa02 f003 	lsl.w	r0, r2, r3
 8007afe:	40f9      	lsrs	r1, r7
 8007b00:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b04:	ea40 0401 	orr.w	r4, r0, r1
 8007b08:	e7da      	b.n	8007ac0 <__b2d+0x50>
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	ea46 0501 	orr.w	r5, r6, r1
 8007b10:	e7d6      	b.n	8007ac0 <__b2d+0x50>
 8007b12:	bf00      	nop
 8007b14:	3ff00000 	.word	0x3ff00000

08007b18 <__d2b>:
 8007b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b22:	4690      	mov	r8, r2
 8007b24:	461d      	mov	r5, r3
 8007b26:	f7ff fc0d 	bl	8007344 <_Balloc>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	b930      	cbnz	r0, 8007b3c <__d2b+0x24>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	f240 310a 	movw	r1, #778	; 0x30a
 8007b34:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <__d2b+0xb0>)
 8007b36:	4825      	ldr	r0, [pc, #148]	; (8007bcc <__d2b+0xb4>)
 8007b38:	f000 fb02 	bl	8008140 <__assert_func>
 8007b3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b44:	bb2d      	cbnz	r5, 8007b92 <__d2b+0x7a>
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	f1b8 0300 	subs.w	r3, r8, #0
 8007b4c:	d026      	beq.n	8007b9c <__d2b+0x84>
 8007b4e:	4668      	mov	r0, sp
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	f7ff fd0d 	bl	8007570 <__lo0bits>
 8007b56:	9900      	ldr	r1, [sp, #0]
 8007b58:	b1f0      	cbz	r0, 8007b98 <__d2b+0x80>
 8007b5a:	9a01      	ldr	r2, [sp, #4]
 8007b5c:	f1c0 0320 	rsb	r3, r0, #32
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	430b      	orrs	r3, r1
 8007b66:	40c2      	lsrs	r2, r0
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bf14      	ite	ne
 8007b72:	2102      	movne	r1, #2
 8007b74:	2101      	moveq	r1, #1
 8007b76:	61a3      	str	r3, [r4, #24]
 8007b78:	6121      	str	r1, [r4, #16]
 8007b7a:	b1c5      	cbz	r5, 8007bae <__d2b+0x96>
 8007b7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b80:	4405      	add	r5, r0
 8007b82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b86:	603d      	str	r5, [r7, #0]
 8007b88:	6030      	str	r0, [r6, #0]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	b002      	add	sp, #8
 8007b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b96:	e7d6      	b.n	8007b46 <__d2b+0x2e>
 8007b98:	6161      	str	r1, [r4, #20]
 8007b9a:	e7e7      	b.n	8007b6c <__d2b+0x54>
 8007b9c:	a801      	add	r0, sp, #4
 8007b9e:	f7ff fce7 	bl	8007570 <__lo0bits>
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	9b01      	ldr	r3, [sp, #4]
 8007ba6:	6121      	str	r1, [r4, #16]
 8007ba8:	6163      	str	r3, [r4, #20]
 8007baa:	3020      	adds	r0, #32
 8007bac:	e7e5      	b.n	8007b7a <__d2b+0x62>
 8007bae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007bb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bb6:	6038      	str	r0, [r7, #0]
 8007bb8:	6918      	ldr	r0, [r3, #16]
 8007bba:	f7ff fcb9 	bl	8007530 <__hi0bits>
 8007bbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007bc2:	6031      	str	r1, [r6, #0]
 8007bc4:	e7e1      	b.n	8007b8a <__d2b+0x72>
 8007bc6:	bf00      	nop
 8007bc8:	08008f3c 	.word	0x08008f3c
 8007bcc:	08008fcc 	.word	0x08008fcc

08007bd0 <__ratio>:
 8007bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	4688      	mov	r8, r1
 8007bd6:	4669      	mov	r1, sp
 8007bd8:	4681      	mov	r9, r0
 8007bda:	f7ff ff49 	bl	8007a70 <__b2d>
 8007bde:	460f      	mov	r7, r1
 8007be0:	4604      	mov	r4, r0
 8007be2:	460d      	mov	r5, r1
 8007be4:	4640      	mov	r0, r8
 8007be6:	a901      	add	r1, sp, #4
 8007be8:	f7ff ff42 	bl	8007a70 <__b2d>
 8007bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bf0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007bf4:	468b      	mov	fp, r1
 8007bf6:	eba3 0c02 	sub.w	ip, r3, r2
 8007bfa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfd5      	itete	le
 8007c08:	460a      	movle	r2, r1
 8007c0a:	462a      	movgt	r2, r5
 8007c0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c14:	bfd8      	it	le
 8007c16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c1a:	465b      	mov	r3, fp
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4639      	mov	r1, r7
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7f8 fd83 	bl	800072c <__aeabi_ddiv>
 8007c26:	b003      	add	sp, #12
 8007c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c2c <__copybits>:
 8007c2c:	3901      	subs	r1, #1
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	1149      	asrs	r1, r1, #5
 8007c32:	6914      	ldr	r4, [r2, #16]
 8007c34:	3101      	adds	r1, #1
 8007c36:	f102 0314 	add.w	r3, r2, #20
 8007c3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c42:	1f05      	subs	r5, r0, #4
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d30c      	bcc.n	8007c62 <__copybits+0x36>
 8007c48:	1aa3      	subs	r3, r4, r2
 8007c4a:	3b11      	subs	r3, #17
 8007c4c:	f023 0303 	bic.w	r3, r3, #3
 8007c50:	3211      	adds	r2, #17
 8007c52:	42a2      	cmp	r2, r4
 8007c54:	bf88      	it	hi
 8007c56:	2300      	movhi	r3, #0
 8007c58:	4418      	add	r0, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4288      	cmp	r0, r1
 8007c5e:	d305      	bcc.n	8007c6c <__copybits+0x40>
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
 8007c62:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c66:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c6a:	e7eb      	b.n	8007c44 <__copybits+0x18>
 8007c6c:	f840 3b04 	str.w	r3, [r0], #4
 8007c70:	e7f4      	b.n	8007c5c <__copybits+0x30>

08007c72 <__any_on>:
 8007c72:	f100 0214 	add.w	r2, r0, #20
 8007c76:	6900      	ldr	r0, [r0, #16]
 8007c78:	114b      	asrs	r3, r1, #5
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	db11      	blt.n	8007ca4 <__any_on+0x32>
 8007c80:	dd0a      	ble.n	8007c98 <__any_on+0x26>
 8007c82:	f011 011f 	ands.w	r1, r1, #31
 8007c86:	d007      	beq.n	8007c98 <__any_on+0x26>
 8007c88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c8c:	fa24 f001 	lsr.w	r0, r4, r1
 8007c90:	fa00 f101 	lsl.w	r1, r0, r1
 8007c94:	428c      	cmp	r4, r1
 8007c96:	d10b      	bne.n	8007cb0 <__any_on+0x3e>
 8007c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d803      	bhi.n	8007ca8 <__any_on+0x36>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd10      	pop	{r4, pc}
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	e7f7      	b.n	8007c98 <__any_on+0x26>
 8007ca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d0f5      	beq.n	8007c9c <__any_on+0x2a>
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	e7f6      	b.n	8007ca2 <__any_on+0x30>

08007cb4 <_calloc_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	fb02 f501 	mul.w	r5, r2, r1
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f000 f854 	bl	8007d68 <_malloc_r>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	b118      	cbz	r0, 8007ccc <_calloc_r+0x18>
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	f7fc fbdc 	bl	8004484 <memset>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	bd38      	pop	{r3, r4, r5, pc}

08007cd0 <_free_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d043      	beq.n	8007d60 <_free_r+0x90>
 8007cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cdc:	1f0c      	subs	r4, r1, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfb8      	it	lt
 8007ce2:	18e4      	addlt	r4, r4, r3
 8007ce4:	f000 fa76 	bl	80081d4 <__malloc_lock>
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <_free_r+0x94>)
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	4610      	mov	r0, r2
 8007cee:	b933      	cbnz	r3, 8007cfe <_free_r+0x2e>
 8007cf0:	6063      	str	r3, [r4, #4]
 8007cf2:	6014      	str	r4, [r2, #0]
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfa:	f000 ba71 	b.w	80081e0 <__malloc_unlock>
 8007cfe:	42a3      	cmp	r3, r4
 8007d00:	d90a      	bls.n	8007d18 <_free_r+0x48>
 8007d02:	6821      	ldr	r1, [r4, #0]
 8007d04:	1862      	adds	r2, r4, r1
 8007d06:	4293      	cmp	r3, r2
 8007d08:	bf01      	itttt	eq
 8007d0a:	681a      	ldreq	r2, [r3, #0]
 8007d0c:	685b      	ldreq	r3, [r3, #4]
 8007d0e:	1852      	addeq	r2, r2, r1
 8007d10:	6022      	streq	r2, [r4, #0]
 8007d12:	6063      	str	r3, [r4, #4]
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	e7ed      	b.n	8007cf4 <_free_r+0x24>
 8007d18:	461a      	mov	r2, r3
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	b10b      	cbz	r3, 8007d22 <_free_r+0x52>
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	d9fa      	bls.n	8007d18 <_free_r+0x48>
 8007d22:	6811      	ldr	r1, [r2, #0]
 8007d24:	1850      	adds	r0, r2, r1
 8007d26:	42a0      	cmp	r0, r4
 8007d28:	d10b      	bne.n	8007d42 <_free_r+0x72>
 8007d2a:	6820      	ldr	r0, [r4, #0]
 8007d2c:	4401      	add	r1, r0
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	4283      	cmp	r3, r0
 8007d32:	6011      	str	r1, [r2, #0]
 8007d34:	d1de      	bne.n	8007cf4 <_free_r+0x24>
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	4401      	add	r1, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	6053      	str	r3, [r2, #4]
 8007d40:	e7d8      	b.n	8007cf4 <_free_r+0x24>
 8007d42:	d902      	bls.n	8007d4a <_free_r+0x7a>
 8007d44:	230c      	movs	r3, #12
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	e7d4      	b.n	8007cf4 <_free_r+0x24>
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	1821      	adds	r1, r4, r0
 8007d4e:	428b      	cmp	r3, r1
 8007d50:	bf01      	itttt	eq
 8007d52:	6819      	ldreq	r1, [r3, #0]
 8007d54:	685b      	ldreq	r3, [r3, #4]
 8007d56:	1809      	addeq	r1, r1, r0
 8007d58:	6021      	streq	r1, [r4, #0]
 8007d5a:	6063      	str	r3, [r4, #4]
 8007d5c:	6054      	str	r4, [r2, #4]
 8007d5e:	e7c9      	b.n	8007cf4 <_free_r+0x24>
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	2000024c 	.word	0x2000024c

08007d68 <_malloc_r>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	1ccd      	adds	r5, r1, #3
 8007d6c:	f025 0503 	bic.w	r5, r5, #3
 8007d70:	3508      	adds	r5, #8
 8007d72:	2d0c      	cmp	r5, #12
 8007d74:	bf38      	it	cc
 8007d76:	250c      	movcc	r5, #12
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	db01      	blt.n	8007d82 <_malloc_r+0x1a>
 8007d7e:	42a9      	cmp	r1, r5
 8007d80:	d903      	bls.n	8007d8a <_malloc_r+0x22>
 8007d82:	230c      	movs	r3, #12
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	2000      	movs	r0, #0
 8007d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8a:	f000 fa23 	bl	80081d4 <__malloc_lock>
 8007d8e:	4921      	ldr	r1, [pc, #132]	; (8007e14 <_malloc_r+0xac>)
 8007d90:	680a      	ldr	r2, [r1, #0]
 8007d92:	4614      	mov	r4, r2
 8007d94:	b99c      	cbnz	r4, 8007dbe <_malloc_r+0x56>
 8007d96:	4f20      	ldr	r7, [pc, #128]	; (8007e18 <_malloc_r+0xb0>)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	b923      	cbnz	r3, 8007da6 <_malloc_r+0x3e>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f000 f99e 	bl	80080e0 <_sbrk_r>
 8007da4:	6038      	str	r0, [r7, #0]
 8007da6:	4629      	mov	r1, r5
 8007da8:	4630      	mov	r0, r6
 8007daa:	f000 f999 	bl	80080e0 <_sbrk_r>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d123      	bne.n	8007dfa <_malloc_r+0x92>
 8007db2:	230c      	movs	r3, #12
 8007db4:	4630      	mov	r0, r6
 8007db6:	6033      	str	r3, [r6, #0]
 8007db8:	f000 fa12 	bl	80081e0 <__malloc_unlock>
 8007dbc:	e7e3      	b.n	8007d86 <_malloc_r+0x1e>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	1b5b      	subs	r3, r3, r5
 8007dc2:	d417      	bmi.n	8007df4 <_malloc_r+0x8c>
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d903      	bls.n	8007dd0 <_malloc_r+0x68>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	441c      	add	r4, r3
 8007dcc:	6025      	str	r5, [r4, #0]
 8007dce:	e004      	b.n	8007dda <_malloc_r+0x72>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	42a2      	cmp	r2, r4
 8007dd4:	bf0c      	ite	eq
 8007dd6:	600b      	streq	r3, [r1, #0]
 8007dd8:	6053      	strne	r3, [r2, #4]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 fa00 	bl	80081e0 <__malloc_unlock>
 8007de0:	f104 000b 	add.w	r0, r4, #11
 8007de4:	1d23      	adds	r3, r4, #4
 8007de6:	f020 0007 	bic.w	r0, r0, #7
 8007dea:	1ac2      	subs	r2, r0, r3
 8007dec:	d0cc      	beq.n	8007d88 <_malloc_r+0x20>
 8007dee:	1a1b      	subs	r3, r3, r0
 8007df0:	50a3      	str	r3, [r4, r2]
 8007df2:	e7c9      	b.n	8007d88 <_malloc_r+0x20>
 8007df4:	4622      	mov	r2, r4
 8007df6:	6864      	ldr	r4, [r4, #4]
 8007df8:	e7cc      	b.n	8007d94 <_malloc_r+0x2c>
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d0e3      	beq.n	8007dcc <_malloc_r+0x64>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f96a 	bl	80080e0 <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1dd      	bne.n	8007dcc <_malloc_r+0x64>
 8007e10:	e7cf      	b.n	8007db2 <_malloc_r+0x4a>
 8007e12:	bf00      	nop
 8007e14:	2000024c 	.word	0x2000024c
 8007e18:	20000250 	.word	0x20000250

08007e1c <__ssputs_r>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	688e      	ldr	r6, [r1, #8]
 8007e22:	4682      	mov	sl, r0
 8007e24:	429e      	cmp	r6, r3
 8007e26:	460c      	mov	r4, r1
 8007e28:	4690      	mov	r8, r2
 8007e2a:	461f      	mov	r7, r3
 8007e2c:	d838      	bhi.n	8007ea0 <__ssputs_r+0x84>
 8007e2e:	898a      	ldrh	r2, [r1, #12]
 8007e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e34:	d032      	beq.n	8007e9c <__ssputs_r+0x80>
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	6909      	ldr	r1, [r1, #16]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	eba5 0901 	sub.w	r9, r5, r1
 8007e40:	6965      	ldr	r5, [r4, #20]
 8007e42:	444b      	add	r3, r9
 8007e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	bf38      	it	cc
 8007e52:	461d      	movcc	r5, r3
 8007e54:	0553      	lsls	r3, r2, #21
 8007e56:	d531      	bpl.n	8007ebc <__ssputs_r+0xa0>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7ff ff85 	bl	8007d68 <_malloc_r>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b950      	cbnz	r0, 8007e78 <__ssputs_r+0x5c>
 8007e62:	230c      	movs	r3, #12
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	f8ca 3000 	str.w	r3, [sl]
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	464a      	mov	r2, r9
 8007e7a:	6921      	ldr	r1, [r4, #16]
 8007e7c:	f7ff fa54 	bl	8007328 <memcpy>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	6126      	str	r6, [r4, #16]
 8007e8e:	444e      	add	r6, r9
 8007e90:	6026      	str	r6, [r4, #0]
 8007e92:	463e      	mov	r6, r7
 8007e94:	6165      	str	r5, [r4, #20]
 8007e96:	eba5 0509 	sub.w	r5, r5, r9
 8007e9a:	60a5      	str	r5, [r4, #8]
 8007e9c:	42be      	cmp	r6, r7
 8007e9e:	d900      	bls.n	8007ea2 <__ssputs_r+0x86>
 8007ea0:	463e      	mov	r6, r7
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	6820      	ldr	r0, [r4, #0]
 8007ea8:	f000 f97a 	bl	80081a0 <memmove>
 8007eac:	68a3      	ldr	r3, [r4, #8]
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	1b9b      	subs	r3, r3, r6
 8007eb2:	4432      	add	r2, r6
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	60a3      	str	r3, [r4, #8]
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	e7db      	b.n	8007e74 <__ssputs_r+0x58>
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	f000 f995 	bl	80081ec <_realloc_r>
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1e1      	bne.n	8007e8c <__ssputs_r+0x70>
 8007ec8:	4650      	mov	r0, sl
 8007eca:	6921      	ldr	r1, [r4, #16]
 8007ecc:	f7ff ff00 	bl	8007cd0 <_free_r>
 8007ed0:	e7c7      	b.n	8007e62 <__ssputs_r+0x46>
	...

08007ed4 <_svfiprintf_r>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	4698      	mov	r8, r3
 8007eda:	898b      	ldrh	r3, [r1, #12]
 8007edc:	4607      	mov	r7, r0
 8007ede:	061b      	lsls	r3, r3, #24
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	4614      	mov	r4, r2
 8007ee4:	b09d      	sub	sp, #116	; 0x74
 8007ee6:	d50e      	bpl.n	8007f06 <_svfiprintf_r+0x32>
 8007ee8:	690b      	ldr	r3, [r1, #16]
 8007eea:	b963      	cbnz	r3, 8007f06 <_svfiprintf_r+0x32>
 8007eec:	2140      	movs	r1, #64	; 0x40
 8007eee:	f7ff ff3b 	bl	8007d68 <_malloc_r>
 8007ef2:	6028      	str	r0, [r5, #0]
 8007ef4:	6128      	str	r0, [r5, #16]
 8007ef6:	b920      	cbnz	r0, 8007f02 <_svfiprintf_r+0x2e>
 8007ef8:	230c      	movs	r3, #12
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e0d1      	b.n	80080a6 <_svfiprintf_r+0x1d2>
 8007f02:	2340      	movs	r3, #64	; 0x40
 8007f04:	616b      	str	r3, [r5, #20]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	2320      	movs	r3, #32
 8007f0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f10:	2330      	movs	r3, #48	; 0x30
 8007f12:	f04f 0901 	mov.w	r9, #1
 8007f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080c0 <_svfiprintf_r+0x1ec>
 8007f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f22:	4623      	mov	r3, r4
 8007f24:	469a      	mov	sl, r3
 8007f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f2a:	b10a      	cbz	r2, 8007f30 <_svfiprintf_r+0x5c>
 8007f2c:	2a25      	cmp	r2, #37	; 0x25
 8007f2e:	d1f9      	bne.n	8007f24 <_svfiprintf_r+0x50>
 8007f30:	ebba 0b04 	subs.w	fp, sl, r4
 8007f34:	d00b      	beq.n	8007f4e <_svfiprintf_r+0x7a>
 8007f36:	465b      	mov	r3, fp
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ff6d 	bl	8007e1c <__ssputs_r>
 8007f42:	3001      	adds	r0, #1
 8007f44:	f000 80aa 	beq.w	800809c <_svfiprintf_r+0x1c8>
 8007f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f4a:	445a      	add	r2, fp
 8007f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80a2 	beq.w	800809c <_svfiprintf_r+0x1c8>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f62:	f10a 0a01 	add.w	sl, sl, #1
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	9307      	str	r3, [sp, #28]
 8007f6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f70:	4654      	mov	r4, sl
 8007f72:	2205      	movs	r2, #5
 8007f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f78:	4851      	ldr	r0, [pc, #324]	; (80080c0 <_svfiprintf_r+0x1ec>)
 8007f7a:	f7ff f9c7 	bl	800730c <memchr>
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	b9d8      	cbnz	r0, 8007fba <_svfiprintf_r+0xe6>
 8007f82:	06d0      	lsls	r0, r2, #27
 8007f84:	bf44      	itt	mi
 8007f86:	2320      	movmi	r3, #32
 8007f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8c:	0711      	lsls	r1, r2, #28
 8007f8e:	bf44      	itt	mi
 8007f90:	232b      	movmi	r3, #43	; 0x2b
 8007f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f96:	f89a 3000 	ldrb.w	r3, [sl]
 8007f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f9c:	d015      	beq.n	8007fca <_svfiprintf_r+0xf6>
 8007f9e:	4654      	mov	r4, sl
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f04f 0c0a 	mov.w	ip, #10
 8007fa6:	9a07      	ldr	r2, [sp, #28]
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fae:	3b30      	subs	r3, #48	; 0x30
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	d94e      	bls.n	8008052 <_svfiprintf_r+0x17e>
 8007fb4:	b1b0      	cbz	r0, 8007fe4 <_svfiprintf_r+0x110>
 8007fb6:	9207      	str	r2, [sp, #28]
 8007fb8:	e014      	b.n	8007fe4 <_svfiprintf_r+0x110>
 8007fba:	eba0 0308 	sub.w	r3, r0, r8
 8007fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	46a2      	mov	sl, r4
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	e7d2      	b.n	8007f70 <_svfiprintf_r+0x9c>
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	9103      	str	r1, [sp, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	425b      	neglt	r3, r3
 8007fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fdc:	9307      	strge	r3, [sp, #28]
 8007fde:	9307      	strlt	r3, [sp, #28]
 8007fe0:	bfb8      	it	lt
 8007fe2:	9204      	strlt	r2, [sp, #16]
 8007fe4:	7823      	ldrb	r3, [r4, #0]
 8007fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe8:	d10c      	bne.n	8008004 <_svfiprintf_r+0x130>
 8007fea:	7863      	ldrb	r3, [r4, #1]
 8007fec:	2b2a      	cmp	r3, #42	; 0x2a
 8007fee:	d135      	bne.n	800805c <_svfiprintf_r+0x188>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3402      	adds	r4, #2
 8007ff4:	1d1a      	adds	r2, r3, #4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	9203      	str	r2, [sp, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bfb8      	it	lt
 8007ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080d0 <_svfiprintf_r+0x1fc>
 8008008:	2203      	movs	r2, #3
 800800a:	4650      	mov	r0, sl
 800800c:	7821      	ldrb	r1, [r4, #0]
 800800e:	f7ff f97d 	bl	800730c <memchr>
 8008012:	b140      	cbz	r0, 8008026 <_svfiprintf_r+0x152>
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	eba0 000a 	sub.w	r0, r0, sl
 800801a:	fa03 f000 	lsl.w	r0, r3, r0
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	3401      	adds	r4, #1
 8008022:	4303      	orrs	r3, r0
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802a:	2206      	movs	r2, #6
 800802c:	4825      	ldr	r0, [pc, #148]	; (80080c4 <_svfiprintf_r+0x1f0>)
 800802e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008032:	f7ff f96b 	bl	800730c <memchr>
 8008036:	2800      	cmp	r0, #0
 8008038:	d038      	beq.n	80080ac <_svfiprintf_r+0x1d8>
 800803a:	4b23      	ldr	r3, [pc, #140]	; (80080c8 <_svfiprintf_r+0x1f4>)
 800803c:	bb1b      	cbnz	r3, 8008086 <_svfiprintf_r+0x1b2>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	3307      	adds	r3, #7
 8008042:	f023 0307 	bic.w	r3, r3, #7
 8008046:	3308      	adds	r3, #8
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804c:	4433      	add	r3, r6
 800804e:	9309      	str	r3, [sp, #36]	; 0x24
 8008050:	e767      	b.n	8007f22 <_svfiprintf_r+0x4e>
 8008052:	460c      	mov	r4, r1
 8008054:	2001      	movs	r0, #1
 8008056:	fb0c 3202 	mla	r2, ip, r2, r3
 800805a:	e7a5      	b.n	8007fa8 <_svfiprintf_r+0xd4>
 800805c:	2300      	movs	r3, #0
 800805e:	f04f 0c0a 	mov.w	ip, #10
 8008062:	4619      	mov	r1, r3
 8008064:	3401      	adds	r4, #1
 8008066:	9305      	str	r3, [sp, #20]
 8008068:	4620      	mov	r0, r4
 800806a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800806e:	3a30      	subs	r2, #48	; 0x30
 8008070:	2a09      	cmp	r2, #9
 8008072:	d903      	bls.n	800807c <_svfiprintf_r+0x1a8>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0c5      	beq.n	8008004 <_svfiprintf_r+0x130>
 8008078:	9105      	str	r1, [sp, #20]
 800807a:	e7c3      	b.n	8008004 <_svfiprintf_r+0x130>
 800807c:	4604      	mov	r4, r0
 800807e:	2301      	movs	r3, #1
 8008080:	fb0c 2101 	mla	r1, ip, r1, r2
 8008084:	e7f0      	b.n	8008068 <_svfiprintf_r+0x194>
 8008086:	ab03      	add	r3, sp, #12
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	462a      	mov	r2, r5
 800808c:	4638      	mov	r0, r7
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <_svfiprintf_r+0x1f8>)
 8008090:	a904      	add	r1, sp, #16
 8008092:	f7fc fa9d 	bl	80045d0 <_printf_float>
 8008096:	1c42      	adds	r2, r0, #1
 8008098:	4606      	mov	r6, r0
 800809a:	d1d6      	bne.n	800804a <_svfiprintf_r+0x176>
 800809c:	89ab      	ldrh	r3, [r5, #12]
 800809e:	065b      	lsls	r3, r3, #25
 80080a0:	f53f af2c 	bmi.w	8007efc <_svfiprintf_r+0x28>
 80080a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a6:	b01d      	add	sp, #116	; 0x74
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	ab03      	add	r3, sp, #12
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	462a      	mov	r2, r5
 80080b2:	4638      	mov	r0, r7
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <_svfiprintf_r+0x1f8>)
 80080b6:	a904      	add	r1, sp, #16
 80080b8:	f7fc fd26 	bl	8004b08 <_printf_i>
 80080bc:	e7eb      	b.n	8008096 <_svfiprintf_r+0x1c2>
 80080be:	bf00      	nop
 80080c0:	0800912c 	.word	0x0800912c
 80080c4:	08009136 	.word	0x08009136
 80080c8:	080045d1 	.word	0x080045d1
 80080cc:	08007e1d 	.word	0x08007e1d
 80080d0:	08009132 	.word	0x08009132

080080d4 <nan>:
 80080d4:	2000      	movs	r0, #0
 80080d6:	4901      	ldr	r1, [pc, #4]	; (80080dc <nan+0x8>)
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	7ff80000 	.word	0x7ff80000

080080e0 <_sbrk_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	2300      	movs	r3, #0
 80080e4:	4d05      	ldr	r5, [pc, #20]	; (80080fc <_sbrk_r+0x1c>)
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	f7f9 fbe6 	bl	80018bc <_sbrk>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_sbrk_r+0x1a>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_sbrk_r+0x1a>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20000378 	.word	0x20000378

08008100 <strncmp>:
 8008100:	b510      	push	{r4, lr}
 8008102:	b16a      	cbz	r2, 8008120 <strncmp+0x20>
 8008104:	3901      	subs	r1, #1
 8008106:	1884      	adds	r4, r0, r2
 8008108:	f810 3b01 	ldrb.w	r3, [r0], #1
 800810c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008110:	4293      	cmp	r3, r2
 8008112:	d103      	bne.n	800811c <strncmp+0x1c>
 8008114:	42a0      	cmp	r0, r4
 8008116:	d001      	beq.n	800811c <strncmp+0x1c>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f5      	bne.n	8008108 <strncmp+0x8>
 800811c:	1a98      	subs	r0, r3, r2
 800811e:	bd10      	pop	{r4, pc}
 8008120:	4610      	mov	r0, r2
 8008122:	e7fc      	b.n	800811e <strncmp+0x1e>

08008124 <__ascii_wctomb>:
 8008124:	4603      	mov	r3, r0
 8008126:	4608      	mov	r0, r1
 8008128:	b141      	cbz	r1, 800813c <__ascii_wctomb+0x18>
 800812a:	2aff      	cmp	r2, #255	; 0xff
 800812c:	d904      	bls.n	8008138 <__ascii_wctomb+0x14>
 800812e:	228a      	movs	r2, #138	; 0x8a
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	4770      	bx	lr
 8008138:	2001      	movs	r0, #1
 800813a:	700a      	strb	r2, [r1, #0]
 800813c:	4770      	bx	lr
	...

08008140 <__assert_func>:
 8008140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008142:	4614      	mov	r4, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4b09      	ldr	r3, [pc, #36]	; (800816c <__assert_func+0x2c>)
 8008148:	4605      	mov	r5, r0
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68d8      	ldr	r0, [r3, #12]
 800814e:	b14c      	cbz	r4, 8008164 <__assert_func+0x24>
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <__assert_func+0x30>)
 8008152:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008156:	9100      	str	r1, [sp, #0]
 8008158:	462b      	mov	r3, r5
 800815a:	4906      	ldr	r1, [pc, #24]	; (8008174 <__assert_func+0x34>)
 800815c:	f000 f80e 	bl	800817c <fiprintf>
 8008160:	f000 fa82 	bl	8008668 <abort>
 8008164:	4b04      	ldr	r3, [pc, #16]	; (8008178 <__assert_func+0x38>)
 8008166:	461c      	mov	r4, r3
 8008168:	e7f3      	b.n	8008152 <__assert_func+0x12>
 800816a:	bf00      	nop
 800816c:	20000014 	.word	0x20000014
 8008170:	0800913d 	.word	0x0800913d
 8008174:	0800914a 	.word	0x0800914a
 8008178:	08009178 	.word	0x08009178

0800817c <fiprintf>:
 800817c:	b40e      	push	{r1, r2, r3}
 800817e:	b503      	push	{r0, r1, lr}
 8008180:	4601      	mov	r1, r0
 8008182:	ab03      	add	r3, sp, #12
 8008184:	4805      	ldr	r0, [pc, #20]	; (800819c <fiprintf+0x20>)
 8008186:	f853 2b04 	ldr.w	r2, [r3], #4
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	f000 f87b 	bl	8008288 <_vfiprintf_r>
 8008192:	b002      	add	sp, #8
 8008194:	f85d eb04 	ldr.w	lr, [sp], #4
 8008198:	b003      	add	sp, #12
 800819a:	4770      	bx	lr
 800819c:	20000014 	.word	0x20000014

080081a0 <memmove>:
 80081a0:	4288      	cmp	r0, r1
 80081a2:	b510      	push	{r4, lr}
 80081a4:	eb01 0402 	add.w	r4, r1, r2
 80081a8:	d902      	bls.n	80081b0 <memmove+0x10>
 80081aa:	4284      	cmp	r4, r0
 80081ac:	4623      	mov	r3, r4
 80081ae:	d807      	bhi.n	80081c0 <memmove+0x20>
 80081b0:	1e43      	subs	r3, r0, #1
 80081b2:	42a1      	cmp	r1, r4
 80081b4:	d008      	beq.n	80081c8 <memmove+0x28>
 80081b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081be:	e7f8      	b.n	80081b2 <memmove+0x12>
 80081c0:	4601      	mov	r1, r0
 80081c2:	4402      	add	r2, r0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	d100      	bne.n	80081ca <memmove+0x2a>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081d2:	e7f7      	b.n	80081c4 <memmove+0x24>

080081d4 <__malloc_lock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_lock+0x8>)
 80081d6:	f000 bc07 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	20000380 	.word	0x20000380

080081e0 <__malloc_unlock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_unlock+0x8>)
 80081e2:	f000 bc02 	b.w	80089ea <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	20000380 	.word	0x20000380

080081ec <_realloc_r>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	4607      	mov	r7, r0
 80081f0:	4614      	mov	r4, r2
 80081f2:	460e      	mov	r6, r1
 80081f4:	b921      	cbnz	r1, 8008200 <_realloc_r+0x14>
 80081f6:	4611      	mov	r1, r2
 80081f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081fc:	f7ff bdb4 	b.w	8007d68 <_malloc_r>
 8008200:	b922      	cbnz	r2, 800820c <_realloc_r+0x20>
 8008202:	f7ff fd65 	bl	8007cd0 <_free_r>
 8008206:	4625      	mov	r5, r4
 8008208:	4628      	mov	r0, r5
 800820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820c:	f000 fc52 	bl	8008ab4 <_malloc_usable_size_r>
 8008210:	42a0      	cmp	r0, r4
 8008212:	d20f      	bcs.n	8008234 <_realloc_r+0x48>
 8008214:	4621      	mov	r1, r4
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff fda6 	bl	8007d68 <_malloc_r>
 800821c:	4605      	mov	r5, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0f2      	beq.n	8008208 <_realloc_r+0x1c>
 8008222:	4631      	mov	r1, r6
 8008224:	4622      	mov	r2, r4
 8008226:	f7ff f87f 	bl	8007328 <memcpy>
 800822a:	4631      	mov	r1, r6
 800822c:	4638      	mov	r0, r7
 800822e:	f7ff fd4f 	bl	8007cd0 <_free_r>
 8008232:	e7e9      	b.n	8008208 <_realloc_r+0x1c>
 8008234:	4635      	mov	r5, r6
 8008236:	e7e7      	b.n	8008208 <_realloc_r+0x1c>

08008238 <__sfputc_r>:
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	b410      	push	{r4}
 800823c:	3b01      	subs	r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	6093      	str	r3, [r2, #8]
 8008242:	da07      	bge.n	8008254 <__sfputc_r+0x1c>
 8008244:	6994      	ldr	r4, [r2, #24]
 8008246:	42a3      	cmp	r3, r4
 8008248:	db01      	blt.n	800824e <__sfputc_r+0x16>
 800824a:	290a      	cmp	r1, #10
 800824c:	d102      	bne.n	8008254 <__sfputc_r+0x1c>
 800824e:	bc10      	pop	{r4}
 8008250:	f000 b94a 	b.w	80084e8 <__swbuf_r>
 8008254:	6813      	ldr	r3, [r2, #0]
 8008256:	1c58      	adds	r0, r3, #1
 8008258:	6010      	str	r0, [r2, #0]
 800825a:	7019      	strb	r1, [r3, #0]
 800825c:	4608      	mov	r0, r1
 800825e:	bc10      	pop	{r4}
 8008260:	4770      	bx	lr

08008262 <__sfputs_r>:
 8008262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	4614      	mov	r4, r2
 800826a:	18d5      	adds	r5, r2, r3
 800826c:	42ac      	cmp	r4, r5
 800826e:	d101      	bne.n	8008274 <__sfputs_r+0x12>
 8008270:	2000      	movs	r0, #0
 8008272:	e007      	b.n	8008284 <__sfputs_r+0x22>
 8008274:	463a      	mov	r2, r7
 8008276:	4630      	mov	r0, r6
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	f7ff ffdc 	bl	8008238 <__sfputc_r>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d1f3      	bne.n	800826c <__sfputs_r+0xa>
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008288 <_vfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460d      	mov	r5, r1
 800828e:	4614      	mov	r4, r2
 8008290:	4698      	mov	r8, r3
 8008292:	4606      	mov	r6, r0
 8008294:	b09d      	sub	sp, #116	; 0x74
 8008296:	b118      	cbz	r0, 80082a0 <_vfiprintf_r+0x18>
 8008298:	6983      	ldr	r3, [r0, #24]
 800829a:	b90b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x18>
 800829c:	f000 fb06 	bl	80088ac <__sinit>
 80082a0:	4b89      	ldr	r3, [pc, #548]	; (80084c8 <_vfiprintf_r+0x240>)
 80082a2:	429d      	cmp	r5, r3
 80082a4:	d11b      	bne.n	80082de <_vfiprintf_r+0x56>
 80082a6:	6875      	ldr	r5, [r6, #4]
 80082a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b6:	f000 fb97 	bl	80089e8 <__retarget_lock_acquire_recursive>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	071b      	lsls	r3, r3, #28
 80082be:	d501      	bpl.n	80082c4 <_vfiprintf_r+0x3c>
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	b9eb      	cbnz	r3, 8008300 <_vfiprintf_r+0x78>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f960 	bl	800858c <__swsetup_r>
 80082cc:	b1c0      	cbz	r0, 8008300 <_vfiprintf_r+0x78>
 80082ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d0:	07dc      	lsls	r4, r3, #31
 80082d2:	d50e      	bpl.n	80082f2 <_vfiprintf_r+0x6a>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b01d      	add	sp, #116	; 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <_vfiprintf_r+0x244>)
 80082e0:	429d      	cmp	r5, r3
 80082e2:	d101      	bne.n	80082e8 <_vfiprintf_r+0x60>
 80082e4:	68b5      	ldr	r5, [r6, #8]
 80082e6:	e7df      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082e8:	4b79      	ldr	r3, [pc, #484]	; (80084d0 <_vfiprintf_r+0x248>)
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf08      	it	eq
 80082ee:	68f5      	ldreq	r5, [r6, #12]
 80082f0:	e7da      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	0598      	lsls	r0, r3, #22
 80082f6:	d4ed      	bmi.n	80082d4 <_vfiprintf_r+0x4c>
 80082f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fa:	f000 fb76 	bl	80089ea <__retarget_lock_release_recursive>
 80082fe:	e7e9      	b.n	80082d4 <_vfiprintf_r+0x4c>
 8008300:	2300      	movs	r3, #0
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	2320      	movs	r3, #32
 8008306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830a:	2330      	movs	r3, #48	; 0x30
 800830c:	f04f 0901 	mov.w	r9, #1
 8008310:	f8cd 800c 	str.w	r8, [sp, #12]
 8008314:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80084d4 <_vfiprintf_r+0x24c>
 8008318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800831c:	4623      	mov	r3, r4
 800831e:	469a      	mov	sl, r3
 8008320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008324:	b10a      	cbz	r2, 800832a <_vfiprintf_r+0xa2>
 8008326:	2a25      	cmp	r2, #37	; 0x25
 8008328:	d1f9      	bne.n	800831e <_vfiprintf_r+0x96>
 800832a:	ebba 0b04 	subs.w	fp, sl, r4
 800832e:	d00b      	beq.n	8008348 <_vfiprintf_r+0xc0>
 8008330:	465b      	mov	r3, fp
 8008332:	4622      	mov	r2, r4
 8008334:	4629      	mov	r1, r5
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff ff93 	bl	8008262 <__sfputs_r>
 800833c:	3001      	adds	r0, #1
 800833e:	f000 80aa 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008344:	445a      	add	r2, fp
 8008346:	9209      	str	r2, [sp, #36]	; 0x24
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 80a2 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008352:	2300      	movs	r3, #0
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835c:	f10a 0a01 	add.w	sl, sl, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008368:	931a      	str	r3, [sp, #104]	; 0x68
 800836a:	4654      	mov	r4, sl
 800836c:	2205      	movs	r2, #5
 800836e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008372:	4858      	ldr	r0, [pc, #352]	; (80084d4 <_vfiprintf_r+0x24c>)
 8008374:	f7fe ffca 	bl	800730c <memchr>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	b9d8      	cbnz	r0, 80083b4 <_vfiprintf_r+0x12c>
 800837c:	06d1      	lsls	r1, r2, #27
 800837e:	bf44      	itt	mi
 8008380:	2320      	movmi	r3, #32
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008386:	0713      	lsls	r3, r2, #28
 8008388:	bf44      	itt	mi
 800838a:	232b      	movmi	r3, #43	; 0x2b
 800838c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008390:	f89a 3000 	ldrb.w	r3, [sl]
 8008394:	2b2a      	cmp	r3, #42	; 0x2a
 8008396:	d015      	beq.n	80083c4 <_vfiprintf_r+0x13c>
 8008398:	4654      	mov	r4, sl
 800839a:	2000      	movs	r0, #0
 800839c:	f04f 0c0a 	mov.w	ip, #10
 80083a0:	9a07      	ldr	r2, [sp, #28]
 80083a2:	4621      	mov	r1, r4
 80083a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a8:	3b30      	subs	r3, #48	; 0x30
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d94e      	bls.n	800844c <_vfiprintf_r+0x1c4>
 80083ae:	b1b0      	cbz	r0, 80083de <_vfiprintf_r+0x156>
 80083b0:	9207      	str	r2, [sp, #28]
 80083b2:	e014      	b.n	80083de <_vfiprintf_r+0x156>
 80083b4:	eba0 0308 	sub.w	r3, r0, r8
 80083b8:	fa09 f303 	lsl.w	r3, r9, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	46a2      	mov	sl, r4
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	e7d2      	b.n	800836a <_vfiprintf_r+0xe2>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	1d19      	adds	r1, r3, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfbb      	ittet	lt
 80083d0:	425b      	neglt	r3, r3
 80083d2:	f042 0202 	orrlt.w	r2, r2, #2
 80083d6:	9307      	strge	r3, [sp, #28]
 80083d8:	9307      	strlt	r3, [sp, #28]
 80083da:	bfb8      	it	lt
 80083dc:	9204      	strlt	r2, [sp, #16]
 80083de:	7823      	ldrb	r3, [r4, #0]
 80083e0:	2b2e      	cmp	r3, #46	; 0x2e
 80083e2:	d10c      	bne.n	80083fe <_vfiprintf_r+0x176>
 80083e4:	7863      	ldrb	r3, [r4, #1]
 80083e6:	2b2a      	cmp	r3, #42	; 0x2a
 80083e8:	d135      	bne.n	8008456 <_vfiprintf_r+0x1ce>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	3402      	adds	r4, #2
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	9203      	str	r2, [sp, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb8      	it	lt
 80083f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084e4 <_vfiprintf_r+0x25c>
 8008402:	2203      	movs	r2, #3
 8008404:	4650      	mov	r0, sl
 8008406:	7821      	ldrb	r1, [r4, #0]
 8008408:	f7fe ff80 	bl	800730c <memchr>
 800840c:	b140      	cbz	r0, 8008420 <_vfiprintf_r+0x198>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	eba0 000a 	sub.w	r0, r0, sl
 8008414:	fa03 f000 	lsl.w	r0, r3, r0
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	3401      	adds	r4, #1
 800841c:	4303      	orrs	r3, r0
 800841e:	9304      	str	r3, [sp, #16]
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	2206      	movs	r2, #6
 8008426:	482c      	ldr	r0, [pc, #176]	; (80084d8 <_vfiprintf_r+0x250>)
 8008428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800842c:	f7fe ff6e 	bl	800730c <memchr>
 8008430:	2800      	cmp	r0, #0
 8008432:	d03f      	beq.n	80084b4 <_vfiprintf_r+0x22c>
 8008434:	4b29      	ldr	r3, [pc, #164]	; (80084dc <_vfiprintf_r+0x254>)
 8008436:	bb1b      	cbnz	r3, 8008480 <_vfiprintf_r+0x1f8>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	3307      	adds	r3, #7
 800843c:	f023 0307 	bic.w	r3, r3, #7
 8008440:	3308      	adds	r3, #8
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	443b      	add	r3, r7
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	e767      	b.n	800831c <_vfiprintf_r+0x94>
 800844c:	460c      	mov	r4, r1
 800844e:	2001      	movs	r0, #1
 8008450:	fb0c 3202 	mla	r2, ip, r2, r3
 8008454:	e7a5      	b.n	80083a2 <_vfiprintf_r+0x11a>
 8008456:	2300      	movs	r3, #0
 8008458:	f04f 0c0a 	mov.w	ip, #10
 800845c:	4619      	mov	r1, r3
 800845e:	3401      	adds	r4, #1
 8008460:	9305      	str	r3, [sp, #20]
 8008462:	4620      	mov	r0, r4
 8008464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008468:	3a30      	subs	r2, #48	; 0x30
 800846a:	2a09      	cmp	r2, #9
 800846c:	d903      	bls.n	8008476 <_vfiprintf_r+0x1ee>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0c5      	beq.n	80083fe <_vfiprintf_r+0x176>
 8008472:	9105      	str	r1, [sp, #20]
 8008474:	e7c3      	b.n	80083fe <_vfiprintf_r+0x176>
 8008476:	4604      	mov	r4, r0
 8008478:	2301      	movs	r3, #1
 800847a:	fb0c 2101 	mla	r1, ip, r1, r2
 800847e:	e7f0      	b.n	8008462 <_vfiprintf_r+0x1da>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462a      	mov	r2, r5
 8008486:	4630      	mov	r0, r6
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <_vfiprintf_r+0x258>)
 800848a:	a904      	add	r1, sp, #16
 800848c:	f7fc f8a0 	bl	80045d0 <_printf_float>
 8008490:	4607      	mov	r7, r0
 8008492:	1c78      	adds	r0, r7, #1
 8008494:	d1d6      	bne.n	8008444 <_vfiprintf_r+0x1bc>
 8008496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008498:	07d9      	lsls	r1, r3, #31
 800849a:	d405      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 800849c:	89ab      	ldrh	r3, [r5, #12]
 800849e:	059a      	lsls	r2, r3, #22
 80084a0:	d402      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 80084a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a4:	f000 faa1 	bl	80089ea <__retarget_lock_release_recursive>
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	065b      	lsls	r3, r3, #25
 80084ac:	f53f af12 	bmi.w	80082d4 <_vfiprintf_r+0x4c>
 80084b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b2:	e711      	b.n	80082d8 <_vfiprintf_r+0x50>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <_vfiprintf_r+0x258>)
 80084be:	a904      	add	r1, sp, #16
 80084c0:	f7fc fb22 	bl	8004b08 <_printf_i>
 80084c4:	e7e4      	b.n	8008490 <_vfiprintf_r+0x208>
 80084c6:	bf00      	nop
 80084c8:	0800919c 	.word	0x0800919c
 80084cc:	080091bc 	.word	0x080091bc
 80084d0:	0800917c 	.word	0x0800917c
 80084d4:	0800912c 	.word	0x0800912c
 80084d8:	08009136 	.word	0x08009136
 80084dc:	080045d1 	.word	0x080045d1
 80084e0:	08008263 	.word	0x08008263
 80084e4:	08009132 	.word	0x08009132

080084e8 <__swbuf_r>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	460e      	mov	r6, r1
 80084ec:	4614      	mov	r4, r2
 80084ee:	4605      	mov	r5, r0
 80084f0:	b118      	cbz	r0, 80084fa <__swbuf_r+0x12>
 80084f2:	6983      	ldr	r3, [r0, #24]
 80084f4:	b90b      	cbnz	r3, 80084fa <__swbuf_r+0x12>
 80084f6:	f000 f9d9 	bl	80088ac <__sinit>
 80084fa:	4b21      	ldr	r3, [pc, #132]	; (8008580 <__swbuf_r+0x98>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d12b      	bne.n	8008558 <__swbuf_r+0x70>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	69a3      	ldr	r3, [r4, #24]
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	071a      	lsls	r2, r3, #28
 800850a:	d52f      	bpl.n	800856c <__swbuf_r+0x84>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	b36b      	cbz	r3, 800856c <__swbuf_r+0x84>
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	6820      	ldr	r0, [r4, #0]
 8008514:	b2f6      	uxtb	r6, r6
 8008516:	1ac0      	subs	r0, r0, r3
 8008518:	6963      	ldr	r3, [r4, #20]
 800851a:	4637      	mov	r7, r6
 800851c:	4283      	cmp	r3, r0
 800851e:	dc04      	bgt.n	800852a <__swbuf_r+0x42>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 f92e 	bl	8008784 <_fflush_r>
 8008528:	bb30      	cbnz	r0, 8008578 <__swbuf_r+0x90>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	3001      	adds	r0, #1
 800852e:	3b01      	subs	r3, #1
 8008530:	60a3      	str	r3, [r4, #8]
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	701e      	strb	r6, [r3, #0]
 800853a:	6963      	ldr	r3, [r4, #20]
 800853c:	4283      	cmp	r3, r0
 800853e:	d004      	beq.n	800854a <__swbuf_r+0x62>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	07db      	lsls	r3, r3, #31
 8008544:	d506      	bpl.n	8008554 <__swbuf_r+0x6c>
 8008546:	2e0a      	cmp	r6, #10
 8008548:	d104      	bne.n	8008554 <__swbuf_r+0x6c>
 800854a:	4621      	mov	r1, r4
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f919 	bl	8008784 <_fflush_r>
 8008552:	b988      	cbnz	r0, 8008578 <__swbuf_r+0x90>
 8008554:	4638      	mov	r0, r7
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <__swbuf_r+0x9c>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <__swbuf_r+0x7a>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7cf      	b.n	8008502 <__swbuf_r+0x1a>
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <__swbuf_r+0xa0>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7ca      	b.n	8008502 <__swbuf_r+0x1a>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f80c 	bl	800858c <__swsetup_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0cb      	beq.n	8008510 <__swbuf_r+0x28>
 8008578:	f04f 37ff 	mov.w	r7, #4294967295
 800857c:	e7ea      	b.n	8008554 <__swbuf_r+0x6c>
 800857e:	bf00      	nop
 8008580:	0800919c 	.word	0x0800919c
 8008584:	080091bc 	.word	0x080091bc
 8008588:	0800917c 	.word	0x0800917c

0800858c <__swsetup_r>:
 800858c:	4b32      	ldr	r3, [pc, #200]	; (8008658 <__swsetup_r+0xcc>)
 800858e:	b570      	push	{r4, r5, r6, lr}
 8008590:	681d      	ldr	r5, [r3, #0]
 8008592:	4606      	mov	r6, r0
 8008594:	460c      	mov	r4, r1
 8008596:	b125      	cbz	r5, 80085a2 <__swsetup_r+0x16>
 8008598:	69ab      	ldr	r3, [r5, #24]
 800859a:	b913      	cbnz	r3, 80085a2 <__swsetup_r+0x16>
 800859c:	4628      	mov	r0, r5
 800859e:	f000 f985 	bl	80088ac <__sinit>
 80085a2:	4b2e      	ldr	r3, [pc, #184]	; (800865c <__swsetup_r+0xd0>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d10f      	bne.n	80085c8 <__swsetup_r+0x3c>
 80085a8:	686c      	ldr	r4, [r5, #4]
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085b0:	0719      	lsls	r1, r3, #28
 80085b2:	d42c      	bmi.n	800860e <__swsetup_r+0x82>
 80085b4:	06dd      	lsls	r5, r3, #27
 80085b6:	d411      	bmi.n	80085dc <__swsetup_r+0x50>
 80085b8:	2309      	movs	r3, #9
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	e03e      	b.n	8008646 <__swsetup_r+0xba>
 80085c8:	4b25      	ldr	r3, [pc, #148]	; (8008660 <__swsetup_r+0xd4>)
 80085ca:	429c      	cmp	r4, r3
 80085cc:	d101      	bne.n	80085d2 <__swsetup_r+0x46>
 80085ce:	68ac      	ldr	r4, [r5, #8]
 80085d0:	e7eb      	b.n	80085aa <__swsetup_r+0x1e>
 80085d2:	4b24      	ldr	r3, [pc, #144]	; (8008664 <__swsetup_r+0xd8>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	bf08      	it	eq
 80085d8:	68ec      	ldreq	r4, [r5, #12]
 80085da:	e7e6      	b.n	80085aa <__swsetup_r+0x1e>
 80085dc:	0758      	lsls	r0, r3, #29
 80085de:	d512      	bpl.n	8008606 <__swsetup_r+0x7a>
 80085e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085e2:	b141      	cbz	r1, 80085f6 <__swsetup_r+0x6a>
 80085e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085e8:	4299      	cmp	r1, r3
 80085ea:	d002      	beq.n	80085f2 <__swsetup_r+0x66>
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff fb6f 	bl	8007cd0 <_free_r>
 80085f2:	2300      	movs	r3, #0
 80085f4:	6363      	str	r3, [r4, #52]	; 0x34
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f043 0308 	orr.w	r3, r3, #8
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	b94b      	cbnz	r3, 8008626 <__swsetup_r+0x9a>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861c:	d003      	beq.n	8008626 <__swsetup_r+0x9a>
 800861e:	4621      	mov	r1, r4
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fa07 	bl	8008a34 <__smakebuf_r>
 8008626:	89a0      	ldrh	r0, [r4, #12]
 8008628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800862c:	f010 0301 	ands.w	r3, r0, #1
 8008630:	d00a      	beq.n	8008648 <__swsetup_r+0xbc>
 8008632:	2300      	movs	r3, #0
 8008634:	60a3      	str	r3, [r4, #8]
 8008636:	6963      	ldr	r3, [r4, #20]
 8008638:	425b      	negs	r3, r3
 800863a:	61a3      	str	r3, [r4, #24]
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	b943      	cbnz	r3, 8008652 <__swsetup_r+0xc6>
 8008640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008644:	d1ba      	bne.n	80085bc <__swsetup_r+0x30>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	0781      	lsls	r1, r0, #30
 800864a:	bf58      	it	pl
 800864c:	6963      	ldrpl	r3, [r4, #20]
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	e7f4      	b.n	800863c <__swsetup_r+0xb0>
 8008652:	2000      	movs	r0, #0
 8008654:	e7f7      	b.n	8008646 <__swsetup_r+0xba>
 8008656:	bf00      	nop
 8008658:	20000014 	.word	0x20000014
 800865c:	0800919c 	.word	0x0800919c
 8008660:	080091bc 	.word	0x080091bc
 8008664:	0800917c 	.word	0x0800917c

08008668 <abort>:
 8008668:	2006      	movs	r0, #6
 800866a:	b508      	push	{r3, lr}
 800866c:	f000 fa52 	bl	8008b14 <raise>
 8008670:	2001      	movs	r0, #1
 8008672:	f7f9 f8b0 	bl	80017d6 <_exit>
	...

08008678 <__sflush_r>:
 8008678:	898a      	ldrh	r2, [r1, #12]
 800867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	4605      	mov	r5, r0
 8008680:	0710      	lsls	r0, r2, #28
 8008682:	460c      	mov	r4, r1
 8008684:	d458      	bmi.n	8008738 <__sflush_r+0xc0>
 8008686:	684b      	ldr	r3, [r1, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc05      	bgt.n	8008698 <__sflush_r+0x20>
 800868c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	dc02      	bgt.n	8008698 <__sflush_r+0x20>
 8008692:	2000      	movs	r0, #0
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800869a:	2e00      	cmp	r6, #0
 800869c:	d0f9      	beq.n	8008692 <__sflush_r+0x1a>
 800869e:	2300      	movs	r3, #0
 80086a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086a4:	682f      	ldr	r7, [r5, #0]
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	d032      	beq.n	8008710 <__sflush_r+0x98>
 80086aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	075a      	lsls	r2, r3, #29
 80086b0:	d505      	bpl.n	80086be <__sflush_r+0x46>
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	1ac0      	subs	r0, r0, r3
 80086b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086b8:	b10b      	cbz	r3, 80086be <__sflush_r+0x46>
 80086ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086bc:	1ac0      	subs	r0, r0, r3
 80086be:	2300      	movs	r3, #0
 80086c0:	4602      	mov	r2, r0
 80086c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086c4:	4628      	mov	r0, r5
 80086c6:	6a21      	ldr	r1, [r4, #32]
 80086c8:	47b0      	blx	r6
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	d106      	bne.n	80086de <__sflush_r+0x66>
 80086d0:	6829      	ldr	r1, [r5, #0]
 80086d2:	291d      	cmp	r1, #29
 80086d4:	d82c      	bhi.n	8008730 <__sflush_r+0xb8>
 80086d6:	4a2a      	ldr	r2, [pc, #168]	; (8008780 <__sflush_r+0x108>)
 80086d8:	40ca      	lsrs	r2, r1
 80086da:	07d6      	lsls	r6, r2, #31
 80086dc:	d528      	bpl.n	8008730 <__sflush_r+0xb8>
 80086de:	2200      	movs	r2, #0
 80086e0:	6062      	str	r2, [r4, #4]
 80086e2:	6922      	ldr	r2, [r4, #16]
 80086e4:	04d9      	lsls	r1, r3, #19
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	d504      	bpl.n	80086f4 <__sflush_r+0x7c>
 80086ea:	1c42      	adds	r2, r0, #1
 80086ec:	d101      	bne.n	80086f2 <__sflush_r+0x7a>
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	b903      	cbnz	r3, 80086f4 <__sflush_r+0x7c>
 80086f2:	6560      	str	r0, [r4, #84]	; 0x54
 80086f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f6:	602f      	str	r7, [r5, #0]
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d0ca      	beq.n	8008692 <__sflush_r+0x1a>
 80086fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008700:	4299      	cmp	r1, r3
 8008702:	d002      	beq.n	800870a <__sflush_r+0x92>
 8008704:	4628      	mov	r0, r5
 8008706:	f7ff fae3 	bl	8007cd0 <_free_r>
 800870a:	2000      	movs	r0, #0
 800870c:	6360      	str	r0, [r4, #52]	; 0x34
 800870e:	e7c1      	b.n	8008694 <__sflush_r+0x1c>
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	2301      	movs	r3, #1
 8008714:	4628      	mov	r0, r5
 8008716:	47b0      	blx	r6
 8008718:	1c41      	adds	r1, r0, #1
 800871a:	d1c7      	bne.n	80086ac <__sflush_r+0x34>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c4      	beq.n	80086ac <__sflush_r+0x34>
 8008722:	2b1d      	cmp	r3, #29
 8008724:	d001      	beq.n	800872a <__sflush_r+0xb2>
 8008726:	2b16      	cmp	r3, #22
 8008728:	d101      	bne.n	800872e <__sflush_r+0xb6>
 800872a:	602f      	str	r7, [r5, #0]
 800872c:	e7b1      	b.n	8008692 <__sflush_r+0x1a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	e7ad      	b.n	8008694 <__sflush_r+0x1c>
 8008738:	690f      	ldr	r7, [r1, #16]
 800873a:	2f00      	cmp	r7, #0
 800873c:	d0a9      	beq.n	8008692 <__sflush_r+0x1a>
 800873e:	0793      	lsls	r3, r2, #30
 8008740:	bf18      	it	ne
 8008742:	2300      	movne	r3, #0
 8008744:	680e      	ldr	r6, [r1, #0]
 8008746:	bf08      	it	eq
 8008748:	694b      	ldreq	r3, [r1, #20]
 800874a:	eba6 0807 	sub.w	r8, r6, r7
 800874e:	600f      	str	r7, [r1, #0]
 8008750:	608b      	str	r3, [r1, #8]
 8008752:	f1b8 0f00 	cmp.w	r8, #0
 8008756:	dd9c      	ble.n	8008692 <__sflush_r+0x1a>
 8008758:	4643      	mov	r3, r8
 800875a:	463a      	mov	r2, r7
 800875c:	4628      	mov	r0, r5
 800875e:	6a21      	ldr	r1, [r4, #32]
 8008760:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008762:	47b0      	blx	r6
 8008764:	2800      	cmp	r0, #0
 8008766:	dc06      	bgt.n	8008776 <__sflush_r+0xfe>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	e78e      	b.n	8008694 <__sflush_r+0x1c>
 8008776:	4407      	add	r7, r0
 8008778:	eba8 0800 	sub.w	r8, r8, r0
 800877c:	e7e9      	b.n	8008752 <__sflush_r+0xda>
 800877e:	bf00      	nop
 8008780:	20400001 	.word	0x20400001

08008784 <_fflush_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	4605      	mov	r5, r0
 800878a:	460c      	mov	r4, r1
 800878c:	b913      	cbnz	r3, 8008794 <_fflush_r+0x10>
 800878e:	2500      	movs	r5, #0
 8008790:	4628      	mov	r0, r5
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	b118      	cbz	r0, 800879e <_fflush_r+0x1a>
 8008796:	6983      	ldr	r3, [r0, #24]
 8008798:	b90b      	cbnz	r3, 800879e <_fflush_r+0x1a>
 800879a:	f000 f887 	bl	80088ac <__sinit>
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <_fflush_r+0x6c>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d11b      	bne.n	80087dc <_fflush_r+0x58>
 80087a4:	686c      	ldr	r4, [r5, #4]
 80087a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <_fflush_r+0xa>
 80087ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087b0:	07d0      	lsls	r0, r2, #31
 80087b2:	d404      	bmi.n	80087be <_fflush_r+0x3a>
 80087b4:	0599      	lsls	r1, r3, #22
 80087b6:	d402      	bmi.n	80087be <_fflush_r+0x3a>
 80087b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ba:	f000 f915 	bl	80089e8 <__retarget_lock_acquire_recursive>
 80087be:	4628      	mov	r0, r5
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7ff ff59 	bl	8008678 <__sflush_r>
 80087c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c8:	4605      	mov	r5, r0
 80087ca:	07da      	lsls	r2, r3, #31
 80087cc:	d4e0      	bmi.n	8008790 <_fflush_r+0xc>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	059b      	lsls	r3, r3, #22
 80087d2:	d4dd      	bmi.n	8008790 <_fflush_r+0xc>
 80087d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d6:	f000 f908 	bl	80089ea <__retarget_lock_release_recursive>
 80087da:	e7d9      	b.n	8008790 <_fflush_r+0xc>
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <_fflush_r+0x70>)
 80087de:	429c      	cmp	r4, r3
 80087e0:	d101      	bne.n	80087e6 <_fflush_r+0x62>
 80087e2:	68ac      	ldr	r4, [r5, #8]
 80087e4:	e7df      	b.n	80087a6 <_fflush_r+0x22>
 80087e6:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <_fflush_r+0x74>)
 80087e8:	429c      	cmp	r4, r3
 80087ea:	bf08      	it	eq
 80087ec:	68ec      	ldreq	r4, [r5, #12]
 80087ee:	e7da      	b.n	80087a6 <_fflush_r+0x22>
 80087f0:	0800919c 	.word	0x0800919c
 80087f4:	080091bc 	.word	0x080091bc
 80087f8:	0800917c 	.word	0x0800917c

080087fc <std>:
 80087fc:	2300      	movs	r3, #0
 80087fe:	b510      	push	{r4, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	e9c0 3300 	strd	r3, r3, [r0]
 8008806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800880a:	6083      	str	r3, [r0, #8]
 800880c:	8181      	strh	r1, [r0, #12]
 800880e:	6643      	str	r3, [r0, #100]	; 0x64
 8008810:	81c2      	strh	r2, [r0, #14]
 8008812:	6183      	str	r3, [r0, #24]
 8008814:	4619      	mov	r1, r3
 8008816:	2208      	movs	r2, #8
 8008818:	305c      	adds	r0, #92	; 0x5c
 800881a:	f7fb fe33 	bl	8004484 <memset>
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <std+0x38>)
 8008820:	6224      	str	r4, [r4, #32]
 8008822:	6263      	str	r3, [r4, #36]	; 0x24
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <std+0x3c>)
 8008826:	62a3      	str	r3, [r4, #40]	; 0x28
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <std+0x40>)
 800882a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800882c:	4b04      	ldr	r3, [pc, #16]	; (8008840 <std+0x44>)
 800882e:	6323      	str	r3, [r4, #48]	; 0x30
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	08008b4d 	.word	0x08008b4d
 8008838:	08008b6f 	.word	0x08008b6f
 800883c:	08008ba7 	.word	0x08008ba7
 8008840:	08008bcb 	.word	0x08008bcb

08008844 <_cleanup_r>:
 8008844:	4901      	ldr	r1, [pc, #4]	; (800884c <_cleanup_r+0x8>)
 8008846:	f000 b8af 	b.w	80089a8 <_fwalk_reent>
 800884a:	bf00      	nop
 800884c:	08008785 	.word	0x08008785

08008850 <__sfmoreglue>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	2568      	movs	r5, #104	; 0x68
 8008854:	1e4a      	subs	r2, r1, #1
 8008856:	4355      	muls	r5, r2
 8008858:	460e      	mov	r6, r1
 800885a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800885e:	f7ff fa83 	bl	8007d68 <_malloc_r>
 8008862:	4604      	mov	r4, r0
 8008864:	b140      	cbz	r0, 8008878 <__sfmoreglue+0x28>
 8008866:	2100      	movs	r1, #0
 8008868:	e9c0 1600 	strd	r1, r6, [r0]
 800886c:	300c      	adds	r0, #12
 800886e:	60a0      	str	r0, [r4, #8]
 8008870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008874:	f7fb fe06 	bl	8004484 <memset>
 8008878:	4620      	mov	r0, r4
 800887a:	bd70      	pop	{r4, r5, r6, pc}

0800887c <__sfp_lock_acquire>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__sfp_lock_acquire+0x8>)
 800887e:	f000 b8b3 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	20000384 	.word	0x20000384

08008888 <__sfp_lock_release>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_release+0x8>)
 800888a:	f000 b8ae 	b.w	80089ea <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	20000384 	.word	0x20000384

08008894 <__sinit_lock_acquire>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sinit_lock_acquire+0x8>)
 8008896:	f000 b8a7 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	2000037f 	.word	0x2000037f

080088a0 <__sinit_lock_release>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__sinit_lock_release+0x8>)
 80088a2:	f000 b8a2 	b.w	80089ea <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	2000037f 	.word	0x2000037f

080088ac <__sinit>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4604      	mov	r4, r0
 80088b0:	f7ff fff0 	bl	8008894 <__sinit_lock_acquire>
 80088b4:	69a3      	ldr	r3, [r4, #24]
 80088b6:	b11b      	cbz	r3, 80088c0 <__sinit+0x14>
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f7ff bff0 	b.w	80088a0 <__sinit_lock_release>
 80088c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088c4:	6523      	str	r3, [r4, #80]	; 0x50
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <__sinit+0x68>)
 80088c8:	4a13      	ldr	r2, [pc, #76]	; (8008918 <__sinit+0x6c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	bf08      	it	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	4620      	mov	r0, r4
 80088d6:	bf08      	it	eq
 80088d8:	61a3      	streq	r3, [r4, #24]
 80088da:	f000 f81f 	bl	800891c <__sfp>
 80088de:	6060      	str	r0, [r4, #4]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f81b 	bl	800891c <__sfp>
 80088e6:	60a0      	str	r0, [r4, #8]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 f817 	bl	800891c <__sfp>
 80088ee:	2200      	movs	r2, #0
 80088f0:	2104      	movs	r1, #4
 80088f2:	60e0      	str	r0, [r4, #12]
 80088f4:	6860      	ldr	r0, [r4, #4]
 80088f6:	f7ff ff81 	bl	80087fc <std>
 80088fa:	2201      	movs	r2, #1
 80088fc:	2109      	movs	r1, #9
 80088fe:	68a0      	ldr	r0, [r4, #8]
 8008900:	f7ff ff7c 	bl	80087fc <std>
 8008904:	2202      	movs	r2, #2
 8008906:	2112      	movs	r1, #18
 8008908:	68e0      	ldr	r0, [r4, #12]
 800890a:	f7ff ff77 	bl	80087fc <std>
 800890e:	2301      	movs	r3, #1
 8008910:	61a3      	str	r3, [r4, #24]
 8008912:	e7d1      	b.n	80088b8 <__sinit+0xc>
 8008914:	08008d24 	.word	0x08008d24
 8008918:	08008845 	.word	0x08008845

0800891c <__sfp>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	4607      	mov	r7, r0
 8008920:	f7ff ffac 	bl	800887c <__sfp_lock_acquire>
 8008924:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <__sfp+0x84>)
 8008926:	681e      	ldr	r6, [r3, #0]
 8008928:	69b3      	ldr	r3, [r6, #24]
 800892a:	b913      	cbnz	r3, 8008932 <__sfp+0x16>
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff ffbd 	bl	80088ac <__sinit>
 8008932:	3648      	adds	r6, #72	; 0x48
 8008934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008938:	3b01      	subs	r3, #1
 800893a:	d503      	bpl.n	8008944 <__sfp+0x28>
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	b30b      	cbz	r3, 8008984 <__sfp+0x68>
 8008940:	6836      	ldr	r6, [r6, #0]
 8008942:	e7f7      	b.n	8008934 <__sfp+0x18>
 8008944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008948:	b9d5      	cbnz	r5, 8008980 <__sfp+0x64>
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <__sfp+0x88>)
 800894c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008950:	60e3      	str	r3, [r4, #12]
 8008952:	6665      	str	r5, [r4, #100]	; 0x64
 8008954:	f000 f847 	bl	80089e6 <__retarget_lock_init_recursive>
 8008958:	f7ff ff96 	bl	8008888 <__sfp_lock_release>
 800895c:	2208      	movs	r2, #8
 800895e:	4629      	mov	r1, r5
 8008960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008968:	6025      	str	r5, [r4, #0]
 800896a:	61a5      	str	r5, [r4, #24]
 800896c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008970:	f7fb fd88 	bl	8004484 <memset>
 8008974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800897c:	4620      	mov	r0, r4
 800897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008980:	3468      	adds	r4, #104	; 0x68
 8008982:	e7d9      	b.n	8008938 <__sfp+0x1c>
 8008984:	2104      	movs	r1, #4
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff ff62 	bl	8008850 <__sfmoreglue>
 800898c:	4604      	mov	r4, r0
 800898e:	6030      	str	r0, [r6, #0]
 8008990:	2800      	cmp	r0, #0
 8008992:	d1d5      	bne.n	8008940 <__sfp+0x24>
 8008994:	f7ff ff78 	bl	8008888 <__sfp_lock_release>
 8008998:	230c      	movs	r3, #12
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	e7ee      	b.n	800897c <__sfp+0x60>
 800899e:	bf00      	nop
 80089a0:	08008d24 	.word	0x08008d24
 80089a4:	ffff0001 	.word	0xffff0001

080089a8 <_fwalk_reent>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4606      	mov	r6, r0
 80089ae:	4688      	mov	r8, r1
 80089b0:	2700      	movs	r7, #0
 80089b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ba:	f1b9 0901 	subs.w	r9, r9, #1
 80089be:	d505      	bpl.n	80089cc <_fwalk_reent+0x24>
 80089c0:	6824      	ldr	r4, [r4, #0]
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d1f7      	bne.n	80089b6 <_fwalk_reent+0xe>
 80089c6:	4638      	mov	r0, r7
 80089c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d907      	bls.n	80089e2 <_fwalk_reent+0x3a>
 80089d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089d6:	3301      	adds	r3, #1
 80089d8:	d003      	beq.n	80089e2 <_fwalk_reent+0x3a>
 80089da:	4629      	mov	r1, r5
 80089dc:	4630      	mov	r0, r6
 80089de:	47c0      	blx	r8
 80089e0:	4307      	orrs	r7, r0
 80089e2:	3568      	adds	r5, #104	; 0x68
 80089e4:	e7e9      	b.n	80089ba <_fwalk_reent+0x12>

080089e6 <__retarget_lock_init_recursive>:
 80089e6:	4770      	bx	lr

080089e8 <__retarget_lock_acquire_recursive>:
 80089e8:	4770      	bx	lr

080089ea <__retarget_lock_release_recursive>:
 80089ea:	4770      	bx	lr

080089ec <__swhatbuf_r>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	460e      	mov	r6, r1
 80089f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f4:	4614      	mov	r4, r2
 80089f6:	2900      	cmp	r1, #0
 80089f8:	461d      	mov	r5, r3
 80089fa:	b096      	sub	sp, #88	; 0x58
 80089fc:	da07      	bge.n	8008a0e <__swhatbuf_r+0x22>
 80089fe:	2300      	movs	r3, #0
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	89b3      	ldrh	r3, [r6, #12]
 8008a04:	061a      	lsls	r2, r3, #24
 8008a06:	d410      	bmi.n	8008a2a <__swhatbuf_r+0x3e>
 8008a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0c:	e00e      	b.n	8008a2c <__swhatbuf_r+0x40>
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f000 f902 	bl	8008c18 <_fstat_r>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	dbf2      	blt.n	80089fe <__swhatbuf_r+0x12>
 8008a18:	9a01      	ldr	r2, [sp, #4]
 8008a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a22:	425a      	negs	r2, r3
 8008a24:	415a      	adcs	r2, r3
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	e7ee      	b.n	8008a08 <__swhatbuf_r+0x1c>
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	b016      	add	sp, #88	; 0x58
 8008a32:	bd70      	pop	{r4, r5, r6, pc}

08008a34 <__smakebuf_r>:
 8008a34:	898b      	ldrh	r3, [r1, #12]
 8008a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a38:	079d      	lsls	r5, r3, #30
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	d507      	bpl.n	8008a50 <__smakebuf_r+0x1c>
 8008a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	2301      	movs	r3, #1
 8008a4a:	6163      	str	r3, [r4, #20]
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	466a      	mov	r2, sp
 8008a52:	ab01      	add	r3, sp, #4
 8008a54:	f7ff ffca 	bl	80089ec <__swhatbuf_r>
 8008a58:	9900      	ldr	r1, [sp, #0]
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7ff f983 	bl	8007d68 <_malloc_r>
 8008a62:	b948      	cbnz	r0, 8008a78 <__smakebuf_r+0x44>
 8008a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a68:	059a      	lsls	r2, r3, #22
 8008a6a:	d4ef      	bmi.n	8008a4c <__smakebuf_r+0x18>
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	f043 0302 	orr.w	r3, r3, #2
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	e7e3      	b.n	8008a40 <__smakebuf_r+0xc>
 8008a78:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <__smakebuf_r+0x7c>)
 8008a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	6020      	str	r0, [r4, #0]
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	6120      	str	r0, [r4, #16]
 8008a8a:	6163      	str	r3, [r4, #20]
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	b15b      	cbz	r3, 8008aa8 <__smakebuf_r+0x74>
 8008a90:	4630      	mov	r0, r6
 8008a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a96:	f000 f8d1 	bl	8008c3c <_isatty_r>
 8008a9a:	b128      	cbz	r0, 8008aa8 <__smakebuf_r+0x74>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f023 0303 	bic.w	r3, r3, #3
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	89a0      	ldrh	r0, [r4, #12]
 8008aaa:	4305      	orrs	r5, r0
 8008aac:	81a5      	strh	r5, [r4, #12]
 8008aae:	e7cd      	b.n	8008a4c <__smakebuf_r+0x18>
 8008ab0:	08008845 	.word	0x08008845

08008ab4 <_malloc_usable_size_r>:
 8008ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab8:	1f18      	subs	r0, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfbc      	itt	lt
 8008abe:	580b      	ldrlt	r3, [r1, r0]
 8008ac0:	18c0      	addlt	r0, r0, r3
 8008ac2:	4770      	bx	lr

08008ac4 <_raise_r>:
 8008ac4:	291f      	cmp	r1, #31
 8008ac6:	b538      	push	{r3, r4, r5, lr}
 8008ac8:	4604      	mov	r4, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	d904      	bls.n	8008ad8 <_raise_r+0x14>
 8008ace:	2316      	movs	r3, #22
 8008ad0:	6003      	str	r3, [r0, #0]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ada:	b112      	cbz	r2, 8008ae2 <_raise_r+0x1e>
 8008adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ae0:	b94b      	cbnz	r3, 8008af6 <_raise_r+0x32>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 f830 	bl	8008b48 <_getpid_r>
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4601      	mov	r1, r0
 8008aec:	4620      	mov	r0, r4
 8008aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af2:	f000 b817 	b.w	8008b24 <_kill_r>
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d00a      	beq.n	8008b10 <_raise_r+0x4c>
 8008afa:	1c59      	adds	r1, r3, #1
 8008afc:	d103      	bne.n	8008b06 <_raise_r+0x42>
 8008afe:	2316      	movs	r3, #22
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	2001      	movs	r0, #1
 8008b04:	e7e7      	b.n	8008ad6 <_raise_r+0x12>
 8008b06:	2400      	movs	r4, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b0e:	4798      	blx	r3
 8008b10:	2000      	movs	r0, #0
 8008b12:	e7e0      	b.n	8008ad6 <_raise_r+0x12>

08008b14 <raise>:
 8008b14:	4b02      	ldr	r3, [pc, #8]	; (8008b20 <raise+0xc>)
 8008b16:	4601      	mov	r1, r0
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	f7ff bfd3 	b.w	8008ac4 <_raise_r>
 8008b1e:	bf00      	nop
 8008b20:	20000014 	.word	0x20000014

08008b24 <_kill_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	2300      	movs	r3, #0
 8008b28:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_kill_r+0x20>)
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	f7f8 fe40 	bl	80017b6 <_kill>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	d102      	bne.n	8008b40 <_kill_r+0x1c>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	b103      	cbz	r3, 8008b40 <_kill_r+0x1c>
 8008b3e:	6023      	str	r3, [r4, #0]
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	bf00      	nop
 8008b44:	20000378 	.word	0x20000378

08008b48 <_getpid_r>:
 8008b48:	f7f8 be2e 	b.w	80017a8 <_getpid>

08008b4c <__sread>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	f000 f894 	bl	8008c80 <_read_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bfab      	itete	ge
 8008b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b60:	181b      	addge	r3, r3, r0
 8008b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b66:	bfac      	ite	ge
 8008b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b6a:	81a3      	strhlt	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__swrite>:
 8008b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	461f      	mov	r7, r3
 8008b74:	898b      	ldrh	r3, [r1, #12]
 8008b76:	4605      	mov	r5, r0
 8008b78:	05db      	lsls	r3, r3, #23
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	d505      	bpl.n	8008b8c <__swrite+0x1e>
 8008b80:	2302      	movs	r3, #2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	f000 f868 	bl	8008c5c <_lseek_r>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	4632      	mov	r2, r6
 8008b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	4628      	mov	r0, r5
 8008b98:	463b      	mov	r3, r7
 8008b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	f000 b817 	b.w	8008bd4 <_write_r>

08008ba6 <__sseek>:
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	460c      	mov	r4, r1
 8008baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bae:	f000 f855 	bl	8008c5c <_lseek_r>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	bf15      	itete	ne
 8008bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bc2:	81a3      	strheq	r3, [r4, #12]
 8008bc4:	bf18      	it	ne
 8008bc6:	81a3      	strhne	r3, [r4, #12]
 8008bc8:	bd10      	pop	{r4, pc}

08008bca <__sclose>:
 8008bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bce:	f000 b813 	b.w	8008bf8 <_close_r>
	...

08008bd4 <_write_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4d05      	ldr	r5, [pc, #20]	; (8008bf4 <_write_r+0x20>)
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f8 fe1e 	bl	8001824 <_write>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_write_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_write_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000378 	.word	0x20000378

08008bf8 <_close_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4d05      	ldr	r5, [pc, #20]	; (8008c14 <_close_r+0x1c>)
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f8 fe2a 	bl	800185c <_close>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_close_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_close_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000378 	.word	0x20000378

08008c18 <_fstat_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_fstat_r+0x20>)
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	4611      	mov	r1, r2
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	f7f8 fe24 	bl	8001872 <_fstat>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d102      	bne.n	8008c34 <_fstat_r+0x1c>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	b103      	cbz	r3, 8008c34 <_fstat_r+0x1c>
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	bf00      	nop
 8008c38:	20000378 	.word	0x20000378

08008c3c <_isatty_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4d05      	ldr	r5, [pc, #20]	; (8008c58 <_isatty_r+0x1c>)
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	f7f8 fe22 	bl	8001890 <_isatty>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_isatty_r+0x1a>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_isatty_r+0x1a>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	20000378 	.word	0x20000378

08008c5c <_lseek_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	2200      	movs	r2, #0
 8008c66:	4d05      	ldr	r5, [pc, #20]	; (8008c7c <_lseek_r+0x20>)
 8008c68:	602a      	str	r2, [r5, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f7f8 fe1a 	bl	80018a4 <_lseek>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_lseek_r+0x1e>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_lseek_r+0x1e>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000378 	.word	0x20000378

08008c80 <_read_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4d05      	ldr	r5, [pc, #20]	; (8008ca0 <_read_r+0x20>)
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7f8 fdab 	bl	80017ea <_read>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_read_r+0x1e>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_read_r+0x1e>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20000378 	.word	0x20000378

08008ca4 <_init>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr

08008cb0 <_fini>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	bf00      	nop
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr
