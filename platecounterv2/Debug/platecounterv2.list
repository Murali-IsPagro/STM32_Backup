
platecounterv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08008170  08008170  00018170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086cc  080086cc  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d4  080086d4  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  080086dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b4  2**0
                  CONTENTS
 10 .bss          000000e4  200002b4  200002b4  000202b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  000202b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d211  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b92  00000000  00000000  0002d4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021698  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c82b  00000000  00000000  00051a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6572  00000000  00000000  0005e26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001247dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003db8  00000000  00000000  00124830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008158 	.word	0x08008158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	08008158 	.word	0x08008158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f023 030f 	bic.w	r3, r3, #15
 8000ffc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 030c 	orr.w	r3, r3, #12
 800100a:	b2db      	uxtb	r3, r3
 800100c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	b2db      	uxtb	r3, r3
 8001016:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	f043 030c 	orr.w	r3, r3, #12
 800101e:	b2db      	uxtb	r3, r3
 8001020:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	b2db      	uxtb	r3, r3
 800102a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2304      	movs	r3, #4
 8001036:	217e      	movs	r1, #126	; 0x7e
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <lcd_send_cmd+0x5c>)
 800103a:	f001 f9d1 	bl	80023e0 <HAL_I2C_Master_Transmit>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002ec 	.word	0x200002ec

0800104c <lcd_send_data>:

void lcd_send_data (char data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f043 030d 	orr.w	r3, r3, #13
 800106a:	b2db      	uxtb	r3, r3
 800106c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f043 0309 	orr.w	r3, r3, #9
 8001074:	b2db      	uxtb	r3, r3
 8001076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	f043 030d 	orr.w	r3, r3, #13
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f043 0309 	orr.w	r3, r3, #9
 8001088:	b2db      	uxtb	r3, r3
 800108a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800108c:	f107 0208 	add.w	r2, r7, #8
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2304      	movs	r3, #4
 8001096:	217e      	movs	r1, #126	; 0x7e
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <lcd_send_data+0x5c>)
 800109a:	f001 f9a1 	bl	80023e0 <HAL_I2C_Master_Transmit>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002ec 	.word	0x200002ec

080010ac <lcd_clear>:

void lcd_clear (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff ff9a 	bl	8000fec <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	e005      	b.n	80010ca <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010be:	2020      	movs	r0, #32
 80010c0:	f7ff ffc4 	bl	800104c <lcd_send_data>
	for (int i=0; i<100; i++)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b63      	cmp	r3, #99	; 0x63
 80010ce:	ddf6      	ble.n	80010be <lcd_clear+0x12>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <lcd_init>:

void lcd_init (void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010de:	2032      	movs	r0, #50	; 0x32
 80010e0:	f000 fd48 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010e4:	2030      	movs	r0, #48	; 0x30
 80010e6:	f7ff ff81 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010ea:	2005      	movs	r0, #5
 80010ec:	f000 fd42 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010f0:	2030      	movs	r0, #48	; 0x30
 80010f2:	f7ff ff7b 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fd3c 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fc:	2030      	movs	r0, #48	; 0x30
 80010fe:	f7ff ff75 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f000 fd36 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001108:	2020      	movs	r0, #32
 800110a:	f7ff ff6f 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(10);
 800110e:	200a      	movs	r0, #10
 8001110:	f000 fd30 	bl	8001b74 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f7ff ff69 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fd2a 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001120:	2008      	movs	r0, #8
 8001122:	f7ff ff63 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fd24 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ff5d 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 fd1e 	bl	8001b74 <HAL_Delay>
	HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fd1b 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800113e:	2006      	movs	r0, #6
 8001140:	f7ff ff54 	bl	8000fec <lcd_send_cmd>
	HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 fd15 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800114a:	200c      	movs	r0, #12
 800114c:	f7ff ff4e 	bl	8000fec <lcd_send_cmd>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <setCursor>:


void setCursor(int a, int b)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	int i=0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d81b      	bhi.n	80011a0 <setCursor+0x4c>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <setCursor+0x1c>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001181 	.word	0x08001181
 8001174:	08001189 	.word	0x08001189
 8001178:	08001191 	.word	0x08001191
 800117c:	08001199 	.word	0x08001199
	switch(b){
	case 0:lcd_send_cmd(0x80);break;
 8001180:	2080      	movs	r0, #128	; 0x80
 8001182:	f7ff ff33 	bl	8000fec <lcd_send_cmd>
 8001186:	e00b      	b.n	80011a0 <setCursor+0x4c>
	case 1:lcd_send_cmd(0xC0);break;
 8001188:	20c0      	movs	r0, #192	; 0xc0
 800118a:	f7ff ff2f 	bl	8000fec <lcd_send_cmd>
 800118e:	e007      	b.n	80011a0 <setCursor+0x4c>
	case 2:lcd_send_cmd(0x94);break;
 8001190:	2094      	movs	r0, #148	; 0x94
 8001192:	f7ff ff2b 	bl	8000fec <lcd_send_cmd>
 8001196:	e003      	b.n	80011a0 <setCursor+0x4c>
	case 3:lcd_send_cmd(0xd4);break;}
 8001198:	20d4      	movs	r0, #212	; 0xd4
 800119a:	f7ff ff27 	bl	8000fec <lcd_send_cmd>
 800119e:	bf00      	nop
	for(i=0;i<a;i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e005      	b.n	80011b2 <setCursor+0x5e>
	lcd_send_cmd(0x14);
 80011a6:	2014      	movs	r0, #20
 80011a8:	f7ff ff20 	bl	8000fec <lcd_send_cmd>
	for(i=0;i<a;i++)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf5      	blt.n	80011a6 <setCursor+0x52>
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011cc:	e006      	b.n	80011dc <lcd_send_string+0x18>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff38 	bl	800104c <lcd_send_data>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f4      	bne.n	80011ce <lcd_send_string+0xa>
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f4:	f000 fc4c 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f8:	f000 f932 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f000 f9f2 	bl	80015e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001200:	f000 f9c6 	bl	8001590 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001204:	f000 f996 	bl	8001534 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,"hello\n", 10, 100);
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	220a      	movs	r2, #10
 800120c:	497e      	ldr	r1, [pc, #504]	; (8001408 <main+0x218>)
 800120e:	487f      	ldr	r0, [pc, #508]	; (800140c <main+0x21c>)
 8001210:	f002 f883 	bl	800331a <HAL_UART_Transmit>
  /* USER CODE END 2 */
 // lcd_init();
  	//	lcd_send_cmd(0x80 | 0x00);
  	//setCursor(0, 0);
 // 	lcd_send_string("ANGULAIR");
  lcd_init();
 8001214:	f7ff ff61 	bl	80010da <lcd_init>

  lcd_send_cmd (0x80|0x00);
 8001218:	2080      	movs	r0, #128	; 0x80
 800121a:	f7ff fee7 	bl	8000fec <lcd_send_cmd>
  lcd_send_string("HELLO WORLD");
 800121e:	487c      	ldr	r0, [pc, #496]	; (8001410 <main+0x220>)
 8001220:	f7ff ffd0 	bl	80011c4 <lcd_send_string>

  lcd_send_cmd (0x80|0x40);
 8001224:	20c0      	movs	r0, #192	; 0xc0
 8001226:	f7ff fee1 	bl	8000fec <lcd_send_cmd>
  lcd_send_string("LCD 20x4 DEMO");
 800122a:	487a      	ldr	r0, [pc, #488]	; (8001414 <main+0x224>)
 800122c:	f7ff ffca 	bl	80011c4 <lcd_send_string>

  lcd_send_cmd (0x80|0x1C);
 8001230:	209c      	movs	r0, #156	; 0x9c
 8001232:	f7ff fedb 	bl	8000fec <lcd_send_cmd>
  lcd_send_string("BY");
 8001236:	4878      	ldr	r0, [pc, #480]	; (8001418 <main+0x228>)
 8001238:	f7ff ffc4 	bl	80011c4 <lcd_send_string>

  lcd_send_cmd (0x80|0x54);
 800123c:	20d4      	movs	r0, #212	; 0xd4
 800123e:	f7ff fed5 	bl	8000fec <lcd_send_cmd>
    lcd_send_string("ControllersTech");
 8001242:	4876      	ldr	r0, [pc, #472]	; (800141c <main+0x22c>)
 8001244:	f7ff ffbe 	bl	80011c4 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(START_BUTTON==GPIO_PIN_SET){
 8001248:	2101      	movs	r1, #1
 800124a:	4875      	ldr	r0, [pc, #468]	; (8001420 <main+0x230>)
 800124c:	f000 ff52 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d104      	bne.n	8001260 <main+0x70>
	 			  trigger=true;
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <main+0x234>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
	 			 lcd_clear();
 800125c:	f7ff ff26 	bl	80010ac <lcd_clear>
///////////////////////////
	 			 // HAL_Delay(1000);
	 		  }
	 		  if(SYSTEM_RESET_BUTTON==GPIO_PIN_SET){
 8001260:	2104      	movs	r1, #4
 8001262:	486f      	ldr	r0, [pc, #444]	; (8001420 <main+0x230>)
 8001264:	f000 ff46 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d17b      	bne.n	8001366 <main+0x176>
	 			  HAL_NVIC_SystemReset();
 800126e:	f000 fd94 	bl	8001d9a <HAL_NVIC_SystemReset>
	 		  }
	 	    /* USER CODE END WHILE */
	 		  	  while(trigger && set_counter!=SET_OF_VALUES){
 8001272:	e078      	b.n	8001366 <main+0x176>
	 		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2102      	movs	r1, #2
 8001278:	486b      	ldr	r0, [pc, #428]	; (8001428 <main+0x238>)
 800127a:	f000 ff53 	bl	8002124 <HAL_GPIO_WritePin>

	 		  		  /*Laser1 operation*/
	 		  		  if(LASER_1_INPUT==GPIO_PIN_RESET && state){
 800127e:	2108      	movs	r1, #8
 8001280:	4867      	ldr	r0, [pc, #412]	; (8001420 <main+0x230>)
 8001282:	f000 ff37 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10b      	bne.n	80012a4 <main+0xb4>
 800128c:	4b67      	ldr	r3, [pc, #412]	; (800142c <main+0x23c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <main+0xb4>
	 		  			  set_counter++;
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <main+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <main+0x240>)
 800129c:	6013      	str	r3, [r2, #0]
	 		  			  state=false;
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <main+0x23c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	 		  		  }
	 		  		  if(LASER_1_INPUT==GPIO_PIN_SET){
 80012a4:	2108      	movs	r1, #8
 80012a6:	485e      	ldr	r0, [pc, #376]	; (8001420 <main+0x230>)
 80012a8:	f000 ff24 	bl	80020f4 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <main+0xc8>
	 		  			  state=true;
 80012b2:	4b5e      	ldr	r3, [pc, #376]	; (800142c <main+0x23c>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
	 		  		  }


	 		  		  /*Laser2 operation calculates total count*/
	 		  		  if(LASER_2_INPUT==GPIO_PIN_RESET && confirm){
 80012b8:	2110      	movs	r1, #16
 80012ba:	4859      	ldr	r0, [pc, #356]	; (8001420 <main+0x230>)
 80012bc:	f000 ff1a 	bl	80020f4 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <main+0xf6>
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <main+0x244>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <main+0xf6>
	 		  			  total_count++;
 80012ce:	4b5a      	ldr	r3, [pc, #360]	; (8001438 <main+0x248>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <main+0x248>)
 80012d6:	6013      	str	r3, [r2, #0]
	 		  			  recheck=set_counter;
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <main+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <main+0x24c>)
 80012de:	6013      	str	r3, [r2, #0]
	 		  			  confirm=false;
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <main+0x244>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	 		  		  }
	 		  		  if(LASER_2_INPUT==GPIO_PIN_SET){
 80012e6:	2110      	movs	r1, #16
 80012e8:	484d      	ldr	r0, [pc, #308]	; (8001420 <main+0x230>)
 80012ea:	f000 ff03 	bl	80020f4 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <main+0x10a>
	 		  			  confirm=true;
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <main+0x244>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	 		  		  }


	 		  		  /*Transmitting data to computer*/
	 		  		  sprintf(MSG," inside SET_value:%d,Total_count=%d \n",set_counter,total_count);
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <main+0x240>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <main+0x248>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	494f      	ldr	r1, [pc, #316]	; (8001440 <main+0x250>)
 8001304:	484f      	ldr	r0, [pc, #316]	; (8001444 <main+0x254>)
 8001306:	f003 f983 	bl	8004610 <siprintf>
	 		  		  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	2232      	movs	r2, #50	; 0x32
 800130e:	494d      	ldr	r1, [pc, #308]	; (8001444 <main+0x254>)
 8001310:	483e      	ldr	r0, [pc, #248]	; (800140c <main+0x21c>)
 8001312:	f002 f802 	bl	800331a <HAL_UART_Transmit>



	 		  		/*----------------Transmitting to LCD Display------------------*/
	 		 	//	lcd_clear();
		 		 		setCursor(0, 0);//(column, row)
 8001316:	2100      	movs	r1, #0
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff1b 	bl	8001154 <setCursor>
		 		 		sprintf(str0, "SET_VALUE:%d", SET_OF_VALUES);
 800131e:	220a      	movs	r2, #10
 8001320:	4949      	ldr	r1, [pc, #292]	; (8001448 <main+0x258>)
 8001322:	484a      	ldr	r0, [pc, #296]	; (800144c <main+0x25c>)
 8001324:	f003 f974 	bl	8004610 <siprintf>
		 		 		lcd_send_string(str0);
 8001328:	4848      	ldr	r0, [pc, #288]	; (800144c <main+0x25c>)
 800132a:	f7ff ff4b 	bl	80011c4 <lcd_send_string>
	 		 		setCursor(0, 1);//(column, row)
 800132e:	2101      	movs	r1, #1
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff0f 	bl	8001154 <setCursor>
	 		 		sprintf(str1, "Set_count:%d", set_counter);
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <main+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4944      	ldr	r1, [pc, #272]	; (8001450 <main+0x260>)
 800133e:	4845      	ldr	r0, [pc, #276]	; (8001454 <main+0x264>)
 8001340:	f003 f966 	bl	8004610 <siprintf>
	 		 		lcd_send_string(str1);
 8001344:	4843      	ldr	r0, [pc, #268]	; (8001454 <main+0x264>)
 8001346:	f7ff ff3d 	bl	80011c4 <lcd_send_string>
	 		 		setCursor(0, 2);
 800134a:	2102      	movs	r1, #2
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff ff01 	bl	8001154 <setCursor>
	 		 		sprintf(str2, "Total_count:%d", total_count);
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <main+0x248>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	493f      	ldr	r1, [pc, #252]	; (8001458 <main+0x268>)
 800135a:	4840      	ldr	r0, [pc, #256]	; (800145c <main+0x26c>)
 800135c:	f003 f958 	bl	8004610 <siprintf>
	 		 		lcd_send_string(str2);
 8001360:	483e      	ldr	r0, [pc, #248]	; (800145c <main+0x26c>)
 8001362:	f7ff ff2f 	bl	80011c4 <lcd_send_string>
	 		  	  while(trigger && set_counter!=SET_OF_VALUES){
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <main+0x234>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <main+0x188>
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <main+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b0a      	cmp	r3, #10
 8001374:	f47f af7e 	bne.w	8001274 <main+0x84>
	 		  	  }

	 		  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//turn off conveyor once the loop exit and waiting for reset button
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	482a      	ldr	r0, [pc, #168]	; (8001428 <main+0x238>)
 800137e:	f000 fed1 	bl	8002124 <HAL_GPIO_WritePin>



	 	/*Reset the set_counter value to zero and push the actuator*/
	 		  	if(set_counter==SET_OF_VALUES && SET_RESET_BUTTON==GPIO_PIN_SET){
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <main+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d114      	bne.n	80013b4 <main+0x1c4>
 800138a:	2102      	movs	r1, #2
 800138c:	4824      	ldr	r0, [pc, #144]	; (8001420 <main+0x230>)
 800138e:	f000 feb1 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10d      	bne.n	80013b4 <main+0x1c4>
	 		  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // push the actuator relay
 8001398:	2201      	movs	r2, #1
 800139a:	2104      	movs	r1, #4
 800139c:	4822      	ldr	r0, [pc, #136]	; (8001428 <main+0x238>)
 800139e:	f000 fec1 	bl	8002124 <HAL_GPIO_WritePin>
	 		  	set_counter=0;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <main+0x240>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
	 		  	recheck=0;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <main+0x24c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	 		  	trigger=false;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <main+0x234>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
	 		  	}


 		 		setCursor(0, 0);//(column, row)
 80013b4:	2100      	movs	r1, #0
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fecc 	bl	8001154 <setCursor>
 		 		sprintf(str0, "SET_VALUE:%d", SET_OF_VALUES);
 80013bc:	220a      	movs	r2, #10
 80013be:	4922      	ldr	r1, [pc, #136]	; (8001448 <main+0x258>)
 80013c0:	4822      	ldr	r0, [pc, #136]	; (800144c <main+0x25c>)
 80013c2:	f003 f925 	bl	8004610 <siprintf>
 		 		lcd_send_string(str0);
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <main+0x25c>)
 80013c8:	f7ff fefc 	bl	80011c4 <lcd_send_string>
		 		setCursor(0, 1);//(column, row)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fec0 	bl	8001154 <setCursor>
		 		sprintf(str1, "Set_count:%d", set_counter);
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <main+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	491d      	ldr	r1, [pc, #116]	; (8001450 <main+0x260>)
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <main+0x264>)
 80013de:	f003 f917 	bl	8004610 <siprintf>
		 		lcd_send_string(str1);
 80013e2:	481c      	ldr	r0, [pc, #112]	; (8001454 <main+0x264>)
 80013e4:	f7ff feee 	bl	80011c4 <lcd_send_string>
		 		setCursor(0, 2);
 80013e8:	2102      	movs	r1, #2
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff feb2 	bl	8001154 <setCursor>
		 		sprintf(str2, "Total_count:%d", total_count);
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <main+0x248>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4918      	ldr	r1, [pc, #96]	; (8001458 <main+0x268>)
 80013f8:	4818      	ldr	r0, [pc, #96]	; (800145c <main+0x26c>)
 80013fa:	f003 f909 	bl	8004610 <siprintf>
		 		lcd_send_string(str2);
 80013fe:	4817      	ldr	r0, [pc, #92]	; (800145c <main+0x26c>)
 8001400:	f7ff fee0 	bl	80011c4 <lcd_send_string>
	  if(START_BUTTON==GPIO_PIN_SET){
 8001404:	e720      	b.n	8001248 <main+0x58>
 8001406:	bf00      	nop
 8001408:	08008170 	.word	0x08008170
 800140c:	20000340 	.word	0x20000340
 8001410:	08008178 	.word	0x08008178
 8001414:	08008184 	.word	0x08008184
 8001418:	08008194 	.word	0x08008194
 800141c:	08008198 	.word	0x08008198
 8001420:	40020c00 	.word	0x40020c00
 8001424:	200002dc 	.word	0x200002dc
 8001428:	40020000 	.word	0x40020000
 800142c:	20000000 	.word	0x20000000
 8001430:	200002d0 	.word	0x200002d0
 8001434:	20000001 	.word	0x20000001
 8001438:	200002d4 	.word	0x200002d4
 800143c:	200002d8 	.word	0x200002d8
 8001440:	080081a8 	.word	0x080081a8
 8001444:	20000004 	.word	0x20000004
 8001448:	080081d0 	.word	0x080081d0
 800144c:	20000038 	.word	0x20000038
 8001450:	080081e0 	.word	0x080081e0
 8001454:	2000006c 	.word	0x2000006c
 8001458:	080081f0 	.word	0x080081f0
 800145c:	200000a0 	.word	0x200000a0

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fa46 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <SystemClock_Config+0xcc>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SystemClock_Config+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <SystemClock_Config+0xd0>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <SystemClock_Config+0xd0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	2302      	movs	r3, #2
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c4:	2310      	movs	r3, #16
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c8:	2302      	movs	r3, #2
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014d4:	23a8      	movs	r3, #168	; 0xa8
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fa83 	bl	80029f0 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f0:	f000 f8e4 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2105      	movs	r1, #5
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fce4 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800151e:	f000 f8cd 	bl	80016bc <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	; 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C1_Init+0x50>)
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <MX_I2C1_Init+0x54>)
 800153c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C1_Init+0x50>)
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_I2C1_Init+0x58>)
 8001542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_I2C1_Init+0x50>)
 8001552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001556:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_I2C1_Init+0x50>)
 8001572:	f000 fdf1 	bl	8002158 <HAL_I2C_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800157c:	f000 f89e 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002ec 	.word	0x200002ec
 8001588:	40005400 	.word	0x40005400
 800158c:	000186a0 	.word	0x000186a0

08001590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_USART1_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c8:	f001 fe5a 	bl	8003280 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 f873 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000340 	.word	0x20000340
 80015e0:	40011000 	.word	0x40011000

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <MX_GPIO_Init+0xcc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MX_GPIO_Init+0xcc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <MX_GPIO_Init+0xcc>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_GPIO_Init+0xcc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	210e      	movs	r1, #14
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <MX_GPIO_Init+0xd0>)
 8001670:	f000 fd58 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001674:	230e      	movs	r3, #14
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <MX_GPIO_Init+0xd0>)
 800168c:	f000 fb96 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001690:	231f      	movs	r3, #31
 8001692:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_GPIO_Init+0xd4>)
 80016a4:	f000 fb8a 	bl	8001dbc <HAL_GPIO_Init>

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020c00 	.word	0x40020c00

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_I2C_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12b      	bne.n	8001792 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001766:	2304      	movs	r3, #4
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <HAL_I2C_MspInit+0x8c>)
 8001772:	f000 fb23 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40005400 	.word	0x40005400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_UART_MspInit+0x84>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12c      	bne.n	8001824 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001814:	2307      	movs	r3, #7
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0x8c>)
 8001820:	f000 facc 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40011000 	.word	0x40011000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f956 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a6:	f002 f801 	bl	80038ac <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
	return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
	}

return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
	}
	return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f001 ff66 	bl	80038ac <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200002e0 	.word	0x200002e0
 8001a14:	20000398 	.word	0x20000398

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f001 ff25 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fbbf 	bl	80011f0 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8001a80:	080086dc 	.word	0x080086dc
  ldr r2, =_sbss
 8001a84:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001a88:	20000398 	.word	0x20000398

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f947 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f000 f808 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fe00 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x54>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x58>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f955 	bl	8001da2 <HAL_SYSTICK_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00e      	b.n	8001b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d80a      	bhi.n	8001b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 f927 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_InitTick+0x5c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000d4 	.word	0x200000d4
 8001b2c:	200000dc 	.word	0x200000dc
 8001b30:	200000d8 	.word	0x200000d8

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200000dc 	.word	0x200000dc
 8001b58:	20000384 	.word	0x20000384

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000384 	.word	0x20000384

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff ffee 	bl	8001b5c <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000dc 	.word	0x200000dc

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce0:	f3bf 8f4f 	dsb	sy
}
 8001ce4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <__NVIC_SystemReset+0x24>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cee:	4904      	ldr	r1, [pc, #16]	; (8001d00 <__NVIC_SystemReset+0x24>)
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_SystemReset+0x28>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf6:	f3bf 8f4f 	dsb	sy
}
 8001cfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <__NVIC_SystemReset+0x20>
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	05fa0004 	.word	0x05fa0004

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff78 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff46 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff78 	bl	8001c74 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff47 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001d9e:	f7ff ff9d 	bl	8001cdc <__NVIC_SystemReset>

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffac 	bl	8001d08 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e16b      	b.n	80020b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 815a 	bne.w	80020aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80b4 	beq.w	80020aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5e:	4a5b      	ldr	r2, [pc, #364]	; (80020cc <HAL_GPIO_Init+0x310>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_GPIO_Init+0x314>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d02b      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_GPIO_Init+0x318>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d025      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x31c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_GPIO_Init+0x320>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_GPIO_Init+0x324>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_GPIO_Init+0x328>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_GPIO_Init+0x32c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_GPIO_Init+0x330>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x20a>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00e      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e00c      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e00a      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff4:	4935      	ldr	r1, [pc, #212]	; (80020cc <HAL_GPIO_Init+0x310>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002026:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_GPIO_Init+0x334>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_GPIO_Init+0x334>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_GPIO_Init+0x334>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	f67f ae90 	bls.w	8001dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40021400 	.word	0x40021400
 80020e8:	40021800 	.word	0x40021800
 80020ec:	40021c00 	.word	0x40021c00
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e12b      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff faca 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021bc:	f001 f838 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a81      	ldr	r2, [pc, #516]	; (80023cc <HAL_I2C_Init+0x274>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d807      	bhi.n	80021dc <HAL_I2C_Init+0x84>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a80      	ldr	r2, [pc, #512]	; (80023d0 <HAL_I2C_Init+0x278>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e006      	b.n	80021ea <HAL_I2C_Init+0x92>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a7d      	ldr	r2, [pc, #500]	; (80023d4 <HAL_I2C_Init+0x27c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf94      	ite	ls
 80021e4:	2301      	movls	r3, #1
 80021e6:	2300      	movhi	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0e7      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a78      	ldr	r2, [pc, #480]	; (80023d8 <HAL_I2C_Init+0x280>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_I2C_Init+0x274>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d802      	bhi.n	800222c <HAL_I2C_Init+0xd4>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	e009      	b.n	8002240 <HAL_I2C_Init+0xe8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_I2C_Init+0x284>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	3301      	adds	r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	495c      	ldr	r1, [pc, #368]	; (80023cc <HAL_I2C_Init+0x274>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d819      	bhi.n	8002294 <HAL_I2C_Init+0x13c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e59      	subs	r1, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fbb1 f3f3 	udiv	r3, r1, r3
 800226e:	1c59      	adds	r1, r3, #1
 8002270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_I2C_Init+0x138>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fbb1 f3f3 	udiv	r3, r1, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	e051      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002290:	2304      	movs	r3, #4
 8002292:	e04f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_I2C_Init+0x168>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e012      	b.n	80022e6 <HAL_I2C_Init+0x18e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Init+0x196>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e022      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <HAL_I2C_Init+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e58      	subs	r0, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	440b      	add	r3, r1
 8002304:	fbb0 f3f3 	udiv	r3, r0, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002312:	e00f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6809      	ldr	r1, [r1, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6911      	ldr	r1, [r2, #16]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	000186a0 	.word	0x000186a0
 80023d0:	001e847f 	.word	0x001e847f
 80023d4:	003d08ff 	.word	0x003d08ff
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	10624dd3 	.word	0x10624dd3

080023e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	461a      	mov	r2, r3
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
 80023f0:	4613      	mov	r3, r2
 80023f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff fbb2 	bl	8001b5c <HAL_GetTick>
 80023f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b20      	cmp	r3, #32
 8002404:	f040 80e0 	bne.w	80025c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2319      	movs	r3, #25
 800240e:	2201      	movs	r2, #1
 8002410:	4970      	ldr	r1, [pc, #448]	; (80025d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f964 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	e0d3      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x50>
 800242c:	2302      	movs	r3, #2
 800242e:	e0cc      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d007      	beq.n	8002456 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2221      	movs	r2, #33	; 0x21
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2210      	movs	r2, #16
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	893a      	ldrh	r2, [r7, #8]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f89c 	bl	80025dc <I2C_MasterRequestWrite>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e08d      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024c4:	e066      	b.n	8002594 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f9de 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d107      	bne.n	80024ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06b      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b04      	cmp	r3, #4
 800252e:	d11b      	bne.n	8002568 <HAL_I2C_Master_Transmit+0x188>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d017      	beq.n	8002568 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6a39      	ldr	r1, [r7, #32]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f9ce 	bl	800290e <I2C_WaitOnBTFFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e01a      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d194      	bne.n	80024c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	00100002 	.word	0x00100002
 80025d8:	ffff0000 	.word	0xffff0000

080025dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	460b      	mov	r3, r1
 80025ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d006      	beq.n	8002606 <I2C_MasterRequestWrite+0x2a>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d003      	beq.n	8002606 <I2C_MasterRequestWrite+0x2a>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00b      	b.n	8002630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b12      	cmp	r3, #18
 800261e:	d107      	bne.n	8002630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f84f 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002656:	d103      	bne.n	8002660 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e035      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d108      	bne.n	8002680 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e01b      	b.n	80026b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	11db      	asrs	r3, r3, #7
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0306 	and.w	r3, r3, #6
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f063 030f 	orn	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <I2C_MasterRequestWrite+0xfc>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f875 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e010      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <I2C_MasterRequestWrite+0x100>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f865 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00010008 	.word	0x00010008
 80026dc:	00010002 	.word	0x00010002

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e025      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d021      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7ff fa2f 	bl	8001b5c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e023      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10d      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	e00c      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	429a      	cmp	r2, r3
 8002782:	d0b6      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279c:	e051      	b.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ac:	d123      	bne.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e046      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d021      	beq.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7ff f9ad 	bl	8001b5c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e020      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d10c      	bne.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e00b      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d18d      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002898:	e02d      	b.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f878 	bl	8002990 <I2C_IsAcknowledgeFailed>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02d      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d021      	beq.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7ff f953 	bl	8001b5c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d1ca      	bne.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800291a:	e02d      	b.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f837 	bl	8002990 <I2C_IsAcknowledgeFailed>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e02d      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d021      	beq.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7ff f912 	bl	8001b5c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e007      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d1ca      	bne.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d11b      	bne.n	80029e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e264      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b9d      	ldr	r3, [pc, #628]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e23f      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4b91      	ldr	r3, [pc, #580]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a83      	ldr	r2, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f858 	bl	8001b5c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f854 	bl	8001b5c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e204      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f844 	bl	8001b5c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f840 	bl	8001b5c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1f0      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1c4      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4952      	ldr	r1, [pc, #328]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fff9 	bl	8001b5c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fff5 	bl	8001b5c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1a5      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4940      	ldr	r1, [pc, #256]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ffd8 	bl	8001b5c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe ffd4 	bl	8001b5c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e184      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe ffb8 	bl	8001b5c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe ffb4 	bl	8001b5c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e164      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fe ffa1 	bl	8001b5c <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fe ff9d 	bl	8001b5c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e14d      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a0 	beq.w	8002d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe ff63 	bl	8001b5c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e011      	b.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
 8002ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe ff56 	bl	8001b5c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e106      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCC_OscConfig+0x4e4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002cd2:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002ce8:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	4b78      	ldr	r3, [pc, #480]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002d02:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a74      	ldr	r2, [pc, #464]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe ff1b 	bl	8001b5c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe ff17 	bl	8001b5c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0c5      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x33a>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff05 	bl	8001b5c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe ff01 	bl	8001b5c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0af      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 809b 	beq.w	8002eca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d05c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d141      	bne.n	8002e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fed5 	bl	8001b5c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fed1 	bl	8001b5c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e081      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe feaa 	bl	8001b5c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fea6 	bl	8001b5c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e056      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x41c>
 8002e2a:	e04e      	b.n	8002eca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fe93 	bl	8001b5c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe fe8f 	bl	8001b5c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e03f      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002e58:	e037      	b.n	8002eca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e032      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d028      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d121      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d11a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d111      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470060 	.word	0x42470060

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cc      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b68      	ldr	r3, [pc, #416]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d90c      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d044      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4934      	ldr	r1, [pc, #208]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe fdc4 	bl	8001b5c <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe fdc0 	bl	8001b5c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fd24 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00
 800309c:	40023800 	.word	0x40023800
 80030a0:	08008200 	.word	0x08008200
 80030a4:	200000d4 	.word	0x200000d4
 80030a8:	200000d8 	.word	0x200000d8

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b2:	2100      	movs	r1, #0
 80030b4:	6079      	str	r1, [r7, #4]
 80030b6:	2100      	movs	r1, #0
 80030b8:	60f9      	str	r1, [r7, #12]
 80030ba:	2100      	movs	r1, #0
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030be:	2100      	movs	r1, #0
 80030c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c2:	4952      	ldr	r1, [pc, #328]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 80030c4:	6889      	ldr	r1, [r1, #8]
 80030c6:	f001 010c 	and.w	r1, r1, #12
 80030ca:	2908      	cmp	r1, #8
 80030cc:	d00d      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x3e>
 80030ce:	2908      	cmp	r1, #8
 80030d0:	f200 8094 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x150>
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d002      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x32>
 80030d8:	2904      	cmp	r1, #4
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x38>
 80030dc:	e08e      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030de:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <HAL_RCC_GetSysClockFreq+0x164>)
 80030e0:	60bb      	str	r3, [r7, #8]
       break;
 80030e2:	e08e      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCC_GetSysClockFreq+0x168>)
 80030e6:	60bb      	str	r3, [r7, #8]
      break;
 80030e8:	e08b      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ea:	4948      	ldr	r1, [pc, #288]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 80030ec:	6849      	ldr	r1, [r1, #4]
 80030ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f4:	4945      	ldr	r1, [pc, #276]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 80030f6:	6849      	ldr	r1, [r1, #4]
 80030f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d024      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003100:	4942      	ldr	r1, [pc, #264]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 8003102:	6849      	ldr	r1, [r1, #4]
 8003104:	0989      	lsrs	r1, r1, #6
 8003106:	4608      	mov	r0, r1
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003110:	f04f 0500 	mov.w	r5, #0
 8003114:	ea00 0204 	and.w	r2, r0, r4
 8003118:	ea01 0305 	and.w	r3, r1, r5
 800311c:	493d      	ldr	r1, [pc, #244]	; (8003214 <HAL_RCC_GetSysClockFreq+0x168>)
 800311e:	fb01 f003 	mul.w	r0, r1, r3
 8003122:	2100      	movs	r1, #0
 8003124:	fb01 f102 	mul.w	r1, r1, r2
 8003128:	1844      	adds	r4, r0, r1
 800312a:	493a      	ldr	r1, [pc, #232]	; (8003214 <HAL_RCC_GetSysClockFreq+0x168>)
 800312c:	fba2 0101 	umull	r0, r1, r2, r1
 8003130:	1863      	adds	r3, r4, r1
 8003132:	4619      	mov	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f7fd fda4 	bl	8000c88 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e04a      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	461a      	mov	r2, r3
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	ea02 0400 	and.w	r4, r2, r0
 8003162:	ea03 0501 	and.w	r5, r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	014b      	lsls	r3, r1, #5
 8003174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003178:	0142      	lsls	r2, r0, #5
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	1b00      	subs	r0, r0, r4
 8003180:	eb61 0105 	sbc.w	r1, r1, r5
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	018b      	lsls	r3, r1, #6
 800318e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003192:	0182      	lsls	r2, r0, #6
 8003194:	1a12      	subs	r2, r2, r0
 8003196:	eb63 0301 	sbc.w	r3, r3, r1
 800319a:	f04f 0000 	mov.w	r0, #0
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	00d9      	lsls	r1, r3, #3
 80031a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a8:	00d0      	lsls	r0, r2, #3
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1912      	adds	r2, r2, r4
 80031b0:	eb45 0303 	adc.w	r3, r5, r3
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0299      	lsls	r1, r3, #10
 80031be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031c2:	0290      	lsls	r0, r2, #10
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	f7fd fd58 	bl	8000c88 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_GetSysClockFreq+0x160>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	60bb      	str	r3, [r7, #8]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <HAL_RCC_GetSysClockFreq+0x164>)
 80031fe:	60bb      	str	r3, [r7, #8]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	68bb      	ldr	r3, [r7, #8]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	017d7840 	.word	0x017d7840

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_GetHCLKFreq+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200000d4 	.word	0x200000d4

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003234:	f7ff fff0 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0a9b      	lsrs	r3, r3, #10
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	08008210 	.word	0x08008210

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800325c:	f7ff ffdc 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0b5b      	lsrs	r3, r3, #13
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	08008210 	.word	0x08008210

08003280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e03f      	b.n	8003312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe fa7e 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f929 	bl	800351c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af02      	add	r7, sp, #8
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	d17c      	bne.n	8003434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Transmit+0x2c>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e075      	b.n	8003436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit+0x3e>
 8003354:	2302      	movs	r3, #2
 8003356:	e06e      	b.n	8003436 <HAL_UART_Transmit+0x11c>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336e:	f7fe fbf5 	bl	8001b5c <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x82>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033ac:	e02a      	b.n	8003404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f840 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e036      	b.n	8003436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e007      	b.n	80033f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1cf      	bne.n	80033ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f810 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b090      	sub	sp, #64	; 0x40
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344e:	e050      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d04c      	beq.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x30>
 800345e:	f7fe fb7d 	bl	8001b5c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800346a:	429a      	cmp	r2, r3
 800346c:	d241      	bcs.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348e:	637a      	str	r2, [r7, #52]	; 0x34
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3314      	adds	r3, #20
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	613b      	str	r3, [r7, #16]
   return(result);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c2:	623a      	str	r2, [r7, #32]
 80034c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	69f9      	ldr	r1, [r7, #28]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e5      	bne.n	80034a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	429a      	cmp	r2, r3
 800350e:	d09f      	beq.n	8003450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3740      	adds	r7, #64	; 0x40
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	b09f      	sub	sp, #124	; 0x7c
 8003522:	af00      	add	r7, sp, #0
 8003524:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	ea40 0301 	orr.w	r3, r0, r1
 800353c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	431a      	orrs	r2, r3
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003560:	f021 010c 	bic.w	r1, r1, #12
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356a:	430b      	orrs	r3, r1
 800356c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	6999      	ldr	r1, [r3, #24]
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	ea40 0301 	orr.w	r3, r0, r1
 8003584:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4bc5      	ldr	r3, [pc, #788]	; (80038a0 <UART_SetConfig+0x384>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d004      	beq.n	800359a <UART_SetConfig+0x7e>
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4bc3      	ldr	r3, [pc, #780]	; (80038a4 <UART_SetConfig+0x388>)
 8003596:	429a      	cmp	r2, r3
 8003598:	d103      	bne.n	80035a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800359a:	f7ff fe5d 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 800359e:	6778      	str	r0, [r7, #116]	; 0x74
 80035a0:	e002      	b.n	80035a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7ff fe45 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 80035a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	f040 80b6 	bne.w	8003720 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	461c      	mov	r4, r3
 80035b8:	f04f 0500 	mov.w	r5, #0
 80035bc:	4622      	mov	r2, r4
 80035be:	462b      	mov	r3, r5
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	6439      	str	r1, [r7, #64]	; 0x40
 80035c4:	415b      	adcs	r3, r3
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
 80035c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035cc:	1912      	adds	r2, r2, r4
 80035ce:	eb45 0303 	adc.w	r3, r5, r3
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	00d9      	lsls	r1, r3, #3
 80035dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e0:	00d0      	lsls	r0, r2, #3
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	1911      	adds	r1, r2, r4
 80035e8:	6639      	str	r1, [r7, #96]	; 0x60
 80035ea:	416b      	adcs	r3, r5
 80035ec:	667b      	str	r3, [r7, #100]	; 0x64
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80035fc:	415b      	adcs	r3, r3
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003604:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003608:	f7fd fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4ba5      	ldr	r3, [pc, #660]	; (80038a8 <UART_SetConfig+0x38c>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011e      	lsls	r6, r3, #4
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	461c      	mov	r4, r3
 800361e:	f04f 0500 	mov.w	r5, #0
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6339      	str	r1, [r7, #48]	; 0x30
 800362a:	415b      	adcs	r3, r3
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003632:	1912      	adds	r2, r2, r4
 8003634:	eb45 0303 	adc.w	r3, r5, r3
 8003638:	f04f 0000 	mov.w	r0, #0
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	00d9      	lsls	r1, r3, #3
 8003642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003646:	00d0      	lsls	r0, r2, #3
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	1911      	adds	r1, r2, r4
 800364e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003650:	416b      	adcs	r3, r5
 8003652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	461a      	mov	r2, r3
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	1891      	adds	r1, r2, r2
 8003660:	62b9      	str	r1, [r7, #40]	; 0x28
 8003662:	415b      	adcs	r3, r3
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800366e:	f7fd fb0b 	bl	8000c88 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <UART_SetConfig+0x38c>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a87      	ldr	r2, [pc, #540]	; (80038a8 <UART_SetConfig+0x38c>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	441e      	add	r6, r3
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	4618      	mov	r0, r3
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	1894      	adds	r4, r2, r2
 80036a8:	623c      	str	r4, [r7, #32]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036b2:	1812      	adds	r2, r2, r0
 80036b4:	eb41 0303 	adc.w	r3, r1, r3
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	f04f 0500 	mov.w	r5, #0
 80036c0:	00dd      	lsls	r5, r3, #3
 80036c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036c6:	00d4      	lsls	r4, r2, #3
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	1814      	adds	r4, r2, r0
 80036ce:	653c      	str	r4, [r7, #80]	; 0x50
 80036d0:	414b      	adcs	r3, r1
 80036d2:	657b      	str	r3, [r7, #84]	; 0x54
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	461a      	mov	r2, r3
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036ee:	f7fd facb 	bl	8000c88 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <UART_SetConfig+0x38c>)
 80036f8:	fba3 1302 	umull	r1, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	3332      	adds	r3, #50	; 0x32
 800370a:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <UART_SetConfig+0x38c>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4432      	add	r2, r6
 800371c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800371e:	e0b9      	b.n	8003894 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003722:	461c      	mov	r4, r3
 8003724:	f04f 0500 	mov.w	r5, #0
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	1891      	adds	r1, r2, r2
 800372e:	6139      	str	r1, [r7, #16]
 8003730:	415b      	adcs	r3, r3
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003738:	1912      	adds	r2, r2, r4
 800373a:	eb45 0303 	adc.w	r3, r5, r3
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	00d9      	lsls	r1, r3, #3
 8003748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800374c:	00d0      	lsls	r0, r2, #3
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	eb12 0804 	adds.w	r8, r2, r4
 8003756:	eb43 0905 	adc.w	r9, r3, r5
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003772:	0082      	lsls	r2, r0, #2
 8003774:	4640      	mov	r0, r8
 8003776:	4649      	mov	r1, r9
 8003778:	f7fd fa86 	bl	8000c88 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <UART_SetConfig+0x38c>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011e      	lsls	r6, r3, #4
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	4618      	mov	r0, r3
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	1894      	adds	r4, r2, r2
 8003798:	60bc      	str	r4, [r7, #8]
 800379a:	415b      	adcs	r3, r3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a2:	1812      	adds	r2, r2, r0
 80037a4:	eb41 0303 	adc.w	r3, r1, r3
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f04f 0500 	mov.w	r5, #0
 80037b0:	00dd      	lsls	r5, r3, #3
 80037b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037b6:	00d4      	lsls	r4, r2, #3
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	1814      	adds	r4, r2, r0
 80037be:	64bc      	str	r4, [r7, #72]	; 0x48
 80037c0:	414b      	adcs	r3, r1
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	008b      	lsls	r3, r1, #2
 80037d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037dc:	0082      	lsls	r2, r0, #2
 80037de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037e2:	f7fd fa51 	bl	8000c88 <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <UART_SetConfig+0x38c>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <UART_SetConfig+0x38c>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380a:	441e      	add	r6, r3
 800380c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380e:	4618      	mov	r0, r3
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	1894      	adds	r4, r2, r2
 800381a:	603c      	str	r4, [r7, #0]
 800381c:	415b      	adcs	r3, r3
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003824:	1812      	adds	r2, r2, r0
 8003826:	eb41 0303 	adc.w	r3, r1, r3
 800382a:	f04f 0400 	mov.w	r4, #0
 800382e:	f04f 0500 	mov.w	r5, #0
 8003832:	00dd      	lsls	r5, r3, #3
 8003834:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003838:	00d4      	lsls	r4, r2, #3
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	eb12 0a00 	adds.w	sl, r2, r0
 8003842:	eb43 0b01 	adc.w	fp, r3, r1
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	008b      	lsls	r3, r1, #2
 800385a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800385e:	0082      	lsls	r2, r0, #2
 8003860:	4650      	mov	r0, sl
 8003862:	4659      	mov	r1, fp
 8003864:	f7fd fa10 	bl	8000c88 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <UART_SetConfig+0x38c>)
 800386e:	fba3 1302 	umull	r1, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	3332      	adds	r3, #50	; 0x32
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <UART_SetConfig+0x38c>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4432      	add	r2, r6
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	377c      	adds	r7, #124	; 0x7c
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	40011000 	.word	0x40011000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <__errno>:
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <__errno+0x8>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	200000e0 	.word	0x200000e0

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f004 fc44 	bl	8008158 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	080086d4 	.word	0x080086d4
 80038f4:	080086d4 	.word	0x080086d4
 80038f8:	080086d4 	.word	0x080086d4
 80038fc:	080086d8 	.word	0x080086d8

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <__cvt>:
 8003910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	ec55 4b10 	vmov	r4, r5, d0
 8003918:	2d00      	cmp	r5, #0
 800391a:	460e      	mov	r6, r1
 800391c:	4619      	mov	r1, r3
 800391e:	462b      	mov	r3, r5
 8003920:	bfbb      	ittet	lt
 8003922:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003926:	461d      	movlt	r5, r3
 8003928:	2300      	movge	r3, #0
 800392a:	232d      	movlt	r3, #45	; 0x2d
 800392c:	700b      	strb	r3, [r1, #0]
 800392e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003930:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003934:	4691      	mov	r9, r2
 8003936:	f023 0820 	bic.w	r8, r3, #32
 800393a:	bfbc      	itt	lt
 800393c:	4622      	movlt	r2, r4
 800393e:	4614      	movlt	r4, r2
 8003940:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003944:	d005      	beq.n	8003952 <__cvt+0x42>
 8003946:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800394a:	d100      	bne.n	800394e <__cvt+0x3e>
 800394c:	3601      	adds	r6, #1
 800394e:	2102      	movs	r1, #2
 8003950:	e000      	b.n	8003954 <__cvt+0x44>
 8003952:	2103      	movs	r1, #3
 8003954:	ab03      	add	r3, sp, #12
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	ab02      	add	r3, sp, #8
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	ec45 4b10 	vmov	d0, r4, r5
 8003960:	4653      	mov	r3, sl
 8003962:	4632      	mov	r2, r6
 8003964:	f001 fdb4 	bl	80054d0 <_dtoa_r>
 8003968:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800396c:	4607      	mov	r7, r0
 800396e:	d102      	bne.n	8003976 <__cvt+0x66>
 8003970:	f019 0f01 	tst.w	r9, #1
 8003974:	d022      	beq.n	80039bc <__cvt+0xac>
 8003976:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800397a:	eb07 0906 	add.w	r9, r7, r6
 800397e:	d110      	bne.n	80039a2 <__cvt+0x92>
 8003980:	783b      	ldrb	r3, [r7, #0]
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d10a      	bne.n	800399c <__cvt+0x8c>
 8003986:	2200      	movs	r2, #0
 8003988:	2300      	movs	r3, #0
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fd f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003992:	b918      	cbnz	r0, 800399c <__cvt+0x8c>
 8003994:	f1c6 0601 	rsb	r6, r6, #1
 8003998:	f8ca 6000 	str.w	r6, [sl]
 800399c:	f8da 3000 	ldr.w	r3, [sl]
 80039a0:	4499      	add	r9, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	2300      	movs	r3, #0
 80039a6:	4620      	mov	r0, r4
 80039a8:	4629      	mov	r1, r5
 80039aa:	f7fd f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ae:	b108      	cbz	r0, 80039b4 <__cvt+0xa4>
 80039b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80039b4:	2230      	movs	r2, #48	; 0x30
 80039b6:	9b03      	ldr	r3, [sp, #12]
 80039b8:	454b      	cmp	r3, r9
 80039ba:	d307      	bcc.n	80039cc <__cvt+0xbc>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039c0:	1bdb      	subs	r3, r3, r7
 80039c2:	4638      	mov	r0, r7
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	b004      	add	sp, #16
 80039c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039cc:	1c59      	adds	r1, r3, #1
 80039ce:	9103      	str	r1, [sp, #12]
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e7f0      	b.n	80039b6 <__cvt+0xa6>

080039d4 <__exponent>:
 80039d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039d6:	4603      	mov	r3, r0
 80039d8:	2900      	cmp	r1, #0
 80039da:	bfb8      	it	lt
 80039dc:	4249      	neglt	r1, r1
 80039de:	f803 2b02 	strb.w	r2, [r3], #2
 80039e2:	bfb4      	ite	lt
 80039e4:	222d      	movlt	r2, #45	; 0x2d
 80039e6:	222b      	movge	r2, #43	; 0x2b
 80039e8:	2909      	cmp	r1, #9
 80039ea:	7042      	strb	r2, [r0, #1]
 80039ec:	dd2a      	ble.n	8003a44 <__exponent+0x70>
 80039ee:	f10d 0407 	add.w	r4, sp, #7
 80039f2:	46a4      	mov	ip, r4
 80039f4:	270a      	movs	r7, #10
 80039f6:	46a6      	mov	lr, r4
 80039f8:	460a      	mov	r2, r1
 80039fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80039fe:	fb07 1516 	mls	r5, r7, r6, r1
 8003a02:	3530      	adds	r5, #48	; 0x30
 8003a04:	2a63      	cmp	r2, #99	; 0x63
 8003a06:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a0e:	4631      	mov	r1, r6
 8003a10:	dcf1      	bgt.n	80039f6 <__exponent+0x22>
 8003a12:	3130      	adds	r1, #48	; 0x30
 8003a14:	f1ae 0502 	sub.w	r5, lr, #2
 8003a18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a1c:	1c44      	adds	r4, r0, #1
 8003a1e:	4629      	mov	r1, r5
 8003a20:	4561      	cmp	r1, ip
 8003a22:	d30a      	bcc.n	8003a3a <__exponent+0x66>
 8003a24:	f10d 0209 	add.w	r2, sp, #9
 8003a28:	eba2 020e 	sub.w	r2, r2, lr
 8003a2c:	4565      	cmp	r5, ip
 8003a2e:	bf88      	it	hi
 8003a30:	2200      	movhi	r2, #0
 8003a32:	4413      	add	r3, r2
 8003a34:	1a18      	subs	r0, r3, r0
 8003a36:	b003      	add	sp, #12
 8003a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a42:	e7ed      	b.n	8003a20 <__exponent+0x4c>
 8003a44:	2330      	movs	r3, #48	; 0x30
 8003a46:	3130      	adds	r1, #48	; 0x30
 8003a48:	7083      	strb	r3, [r0, #2]
 8003a4a:	70c1      	strb	r1, [r0, #3]
 8003a4c:	1d03      	adds	r3, r0, #4
 8003a4e:	e7f1      	b.n	8003a34 <__exponent+0x60>

08003a50 <_printf_float>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	ed2d 8b02 	vpush	{d8}
 8003a58:	b08d      	sub	sp, #52	; 0x34
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a60:	4616      	mov	r6, r2
 8003a62:	461f      	mov	r7, r3
 8003a64:	4605      	mov	r5, r0
 8003a66:	f002 fe8f 	bl	8006788 <_localeconv_r>
 8003a6a:	f8d0 a000 	ldr.w	sl, [r0]
 8003a6e:	4650      	mov	r0, sl
 8003a70:	f7fc fbae 	bl	80001d0 <strlen>
 8003a74:	2300      	movs	r3, #0
 8003a76:	930a      	str	r3, [sp, #40]	; 0x28
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a84:	3307      	adds	r3, #7
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	f103 0208 	add.w	r2, r3, #8
 8003a8e:	f8c8 2000 	str.w	r2, [r8]
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aa2:	9307      	str	r3, [sp, #28]
 8003aa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8003aa8:	ee08 0a10 	vmov	s16, r0
 8003aac:	4b9f      	ldr	r3, [pc, #636]	; (8003d2c <_printf_float+0x2dc>)
 8003aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab6:	f7fd f839 	bl	8000b2c <__aeabi_dcmpun>
 8003aba:	bb88      	cbnz	r0, 8003b20 <_printf_float+0xd0>
 8003abc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ac0:	4b9a      	ldr	r3, [pc, #616]	; (8003d2c <_printf_float+0x2dc>)
 8003ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac6:	f7fd f813 	bl	8000af0 <__aeabi_dcmple>
 8003aca:	bb48      	cbnz	r0, 8003b20 <_printf_float+0xd0>
 8003acc:	2200      	movs	r2, #0
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fd f802 	bl	8000adc <__aeabi_dcmplt>
 8003ad8:	b110      	cbz	r0, 8003ae0 <_printf_float+0x90>
 8003ada:	232d      	movs	r3, #45	; 0x2d
 8003adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae0:	4b93      	ldr	r3, [pc, #588]	; (8003d30 <_printf_float+0x2e0>)
 8003ae2:	4894      	ldr	r0, [pc, #592]	; (8003d34 <_printf_float+0x2e4>)
 8003ae4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ae8:	bf94      	ite	ls
 8003aea:	4698      	movls	r8, r3
 8003aec:	4680      	movhi	r8, r0
 8003aee:	2303      	movs	r3, #3
 8003af0:	6123      	str	r3, [r4, #16]
 8003af2:	9b05      	ldr	r3, [sp, #20]
 8003af4:	f023 0204 	bic.w	r2, r3, #4
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	f04f 0900 	mov.w	r9, #0
 8003afe:	9700      	str	r7, [sp, #0]
 8003b00:	4633      	mov	r3, r6
 8003b02:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b04:	4621      	mov	r1, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 f9d8 	bl	8003ebc <_printf_common>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f040 8090 	bne.w	8003c32 <_printf_float+0x1e2>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	b00d      	add	sp, #52	; 0x34
 8003b18:	ecbd 8b02 	vpop	{d8}
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fd f800 	bl	8000b2c <__aeabi_dcmpun>
 8003b2c:	b140      	cbz	r0, 8003b40 <_printf_float+0xf0>
 8003b2e:	464b      	mov	r3, r9
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bfbc      	itt	lt
 8003b34:	232d      	movlt	r3, #45	; 0x2d
 8003b36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b3a:	487f      	ldr	r0, [pc, #508]	; (8003d38 <_printf_float+0x2e8>)
 8003b3c:	4b7f      	ldr	r3, [pc, #508]	; (8003d3c <_printf_float+0x2ec>)
 8003b3e:	e7d1      	b.n	8003ae4 <_printf_float+0x94>
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b46:	9206      	str	r2, [sp, #24]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	d13f      	bne.n	8003bcc <_printf_float+0x17c>
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	6063      	str	r3, [r4, #4]
 8003b50:	9b05      	ldr	r3, [sp, #20]
 8003b52:	6861      	ldr	r1, [r4, #4]
 8003b54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	ab0a      	add	r3, sp, #40	; 0x28
 8003b5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b62:	ab09      	add	r3, sp, #36	; 0x24
 8003b64:	ec49 8b10 	vmov	d0, r8, r9
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6022      	str	r2, [r4, #0]
 8003b6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7ff fecd 	bl	8003910 <__cvt>
 8003b76:	9b06      	ldr	r3, [sp, #24]
 8003b78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b7a:	2b47      	cmp	r3, #71	; 0x47
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	d108      	bne.n	8003b92 <_printf_float+0x142>
 8003b80:	1cc8      	adds	r0, r1, #3
 8003b82:	db02      	blt.n	8003b8a <_printf_float+0x13a>
 8003b84:	6863      	ldr	r3, [r4, #4]
 8003b86:	4299      	cmp	r1, r3
 8003b88:	dd41      	ble.n	8003c0e <_printf_float+0x1be>
 8003b8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003b8e:	fa5f fb8b 	uxtb.w	fp, fp
 8003b92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b96:	d820      	bhi.n	8003bda <_printf_float+0x18a>
 8003b98:	3901      	subs	r1, #1
 8003b9a:	465a      	mov	r2, fp
 8003b9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ba0:	9109      	str	r1, [sp, #36]	; 0x24
 8003ba2:	f7ff ff17 	bl	80039d4 <__exponent>
 8003ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ba8:	1813      	adds	r3, r2, r0
 8003baa:	2a01      	cmp	r2, #1
 8003bac:	4681      	mov	r9, r0
 8003bae:	6123      	str	r3, [r4, #16]
 8003bb0:	dc02      	bgt.n	8003bb8 <_printf_float+0x168>
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	07d2      	lsls	r2, r2, #31
 8003bb6:	d501      	bpl.n	8003bbc <_printf_float+0x16c>
 8003bb8:	3301      	adds	r3, #1
 8003bba:	6123      	str	r3, [r4, #16]
 8003bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d09c      	beq.n	8003afe <_printf_float+0xae>
 8003bc4:	232d      	movs	r3, #45	; 0x2d
 8003bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bca:	e798      	b.n	8003afe <_printf_float+0xae>
 8003bcc:	9a06      	ldr	r2, [sp, #24]
 8003bce:	2a47      	cmp	r2, #71	; 0x47
 8003bd0:	d1be      	bne.n	8003b50 <_printf_float+0x100>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1bc      	bne.n	8003b50 <_printf_float+0x100>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e7b9      	b.n	8003b4e <_printf_float+0xfe>
 8003bda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003bde:	d118      	bne.n	8003c12 <_printf_float+0x1c2>
 8003be0:	2900      	cmp	r1, #0
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	dd0b      	ble.n	8003bfe <_printf_float+0x1ae>
 8003be6:	6121      	str	r1, [r4, #16]
 8003be8:	b913      	cbnz	r3, 8003bf0 <_printf_float+0x1a0>
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	07d0      	lsls	r0, r2, #31
 8003bee:	d502      	bpl.n	8003bf6 <_printf_float+0x1a6>
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	440b      	add	r3, r1
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003bf8:	f04f 0900 	mov.w	r9, #0
 8003bfc:	e7de      	b.n	8003bbc <_printf_float+0x16c>
 8003bfe:	b913      	cbnz	r3, 8003c06 <_printf_float+0x1b6>
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	07d2      	lsls	r2, r2, #31
 8003c04:	d501      	bpl.n	8003c0a <_printf_float+0x1ba>
 8003c06:	3302      	adds	r3, #2
 8003c08:	e7f4      	b.n	8003bf4 <_printf_float+0x1a4>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e7f2      	b.n	8003bf4 <_printf_float+0x1a4>
 8003c0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c14:	4299      	cmp	r1, r3
 8003c16:	db05      	blt.n	8003c24 <_printf_float+0x1d4>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	6121      	str	r1, [r4, #16]
 8003c1c:	07d8      	lsls	r0, r3, #31
 8003c1e:	d5ea      	bpl.n	8003bf6 <_printf_float+0x1a6>
 8003c20:	1c4b      	adds	r3, r1, #1
 8003c22:	e7e7      	b.n	8003bf4 <_printf_float+0x1a4>
 8003c24:	2900      	cmp	r1, #0
 8003c26:	bfd4      	ite	le
 8003c28:	f1c1 0202 	rsble	r2, r1, #2
 8003c2c:	2201      	movgt	r2, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	e7e0      	b.n	8003bf4 <_printf_float+0x1a4>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	055a      	lsls	r2, r3, #21
 8003c36:	d407      	bmi.n	8003c48 <_printf_float+0x1f8>
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	4628      	mov	r0, r5
 8003c40:	47b8      	blx	r7
 8003c42:	3001      	adds	r0, #1
 8003c44:	d12c      	bne.n	8003ca0 <_printf_float+0x250>
 8003c46:	e764      	b.n	8003b12 <_printf_float+0xc2>
 8003c48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c4c:	f240 80e0 	bls.w	8003e10 <_printf_float+0x3c0>
 8003c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c54:	2200      	movs	r2, #0
 8003c56:	2300      	movs	r3, #0
 8003c58:	f7fc ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d034      	beq.n	8003cca <_printf_float+0x27a>
 8003c60:	4a37      	ldr	r2, [pc, #220]	; (8003d40 <_printf_float+0x2f0>)
 8003c62:	2301      	movs	r3, #1
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f af51 	beq.w	8003b12 <_printf_float+0xc2>
 8003c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c74:	429a      	cmp	r2, r3
 8003c76:	db02      	blt.n	8003c7e <_printf_float+0x22e>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	07d8      	lsls	r0, r3, #31
 8003c7c:	d510      	bpl.n	8003ca0 <_printf_float+0x250>
 8003c7e:	ee18 3a10 	vmov	r3, s16
 8003c82:	4652      	mov	r2, sl
 8003c84:	4631      	mov	r1, r6
 8003c86:	4628      	mov	r0, r5
 8003c88:	47b8      	blx	r7
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	f43f af41 	beq.w	8003b12 <_printf_float+0xc2>
 8003c90:	f04f 0800 	mov.w	r8, #0
 8003c94:	f104 091a 	add.w	r9, r4, #26
 8003c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4543      	cmp	r3, r8
 8003c9e:	dc09      	bgt.n	8003cb4 <_printf_float+0x264>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	079b      	lsls	r3, r3, #30
 8003ca4:	f100 8105 	bmi.w	8003eb2 <_printf_float+0x462>
 8003ca8:	68e0      	ldr	r0, [r4, #12]
 8003caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cac:	4298      	cmp	r0, r3
 8003cae:	bfb8      	it	lt
 8003cb0:	4618      	movlt	r0, r3
 8003cb2:	e730      	b.n	8003b16 <_printf_float+0xc6>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	464a      	mov	r2, r9
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b8      	blx	r7
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	f43f af27 	beq.w	8003b12 <_printf_float+0xc2>
 8003cc4:	f108 0801 	add.w	r8, r8, #1
 8003cc8:	e7e6      	b.n	8003c98 <_printf_float+0x248>
 8003cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dc39      	bgt.n	8003d44 <_printf_float+0x2f4>
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <_printf_float+0x2f0>)
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	47b8      	blx	r7
 8003cda:	3001      	adds	r0, #1
 8003cdc:	f43f af19 	beq.w	8003b12 <_printf_float+0xc2>
 8003ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d102      	bne.n	8003cee <_printf_float+0x29e>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	07d9      	lsls	r1, r3, #31
 8003cec:	d5d8      	bpl.n	8003ca0 <_printf_float+0x250>
 8003cee:	ee18 3a10 	vmov	r3, s16
 8003cf2:	4652      	mov	r2, sl
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f af09 	beq.w	8003b12 <_printf_float+0xc2>
 8003d00:	f04f 0900 	mov.w	r9, #0
 8003d04:	f104 0a1a 	add.w	sl, r4, #26
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	425b      	negs	r3, r3
 8003d0c:	454b      	cmp	r3, r9
 8003d0e:	dc01      	bgt.n	8003d14 <_printf_float+0x2c4>
 8003d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d12:	e792      	b.n	8003c3a <_printf_float+0x1ea>
 8003d14:	2301      	movs	r3, #1
 8003d16:	4652      	mov	r2, sl
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f aef7 	beq.w	8003b12 <_printf_float+0xc2>
 8003d24:	f109 0901 	add.w	r9, r9, #1
 8003d28:	e7ee      	b.n	8003d08 <_printf_float+0x2b8>
 8003d2a:	bf00      	nop
 8003d2c:	7fefffff 	.word	0x7fefffff
 8003d30:	0800821c 	.word	0x0800821c
 8003d34:	08008220 	.word	0x08008220
 8003d38:	08008228 	.word	0x08008228
 8003d3c:	08008224 	.word	0x08008224
 8003d40:	0800822c 	.word	0x0800822c
 8003d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bfa8      	it	ge
 8003d4c:	461a      	movge	r2, r3
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	4691      	mov	r9, r2
 8003d52:	dc37      	bgt.n	8003dc4 <_printf_float+0x374>
 8003d54:	f04f 0b00 	mov.w	fp, #0
 8003d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d5c:	f104 021a 	add.w	r2, r4, #26
 8003d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	eba3 0309 	sub.w	r3, r3, r9
 8003d68:	455b      	cmp	r3, fp
 8003d6a:	dc33      	bgt.n	8003dd4 <_printf_float+0x384>
 8003d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d70:	429a      	cmp	r2, r3
 8003d72:	db3b      	blt.n	8003dec <_printf_float+0x39c>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	07da      	lsls	r2, r3, #31
 8003d78:	d438      	bmi.n	8003dec <_printf_float+0x39c>
 8003d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	eba2 0901 	sub.w	r9, r2, r1
 8003d86:	4599      	cmp	r9, r3
 8003d88:	bfa8      	it	ge
 8003d8a:	4699      	movge	r9, r3
 8003d8c:	f1b9 0f00 	cmp.w	r9, #0
 8003d90:	dc35      	bgt.n	8003dfe <_printf_float+0x3ae>
 8003d92:	f04f 0800 	mov.w	r8, #0
 8003d96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d9a:	f104 0a1a 	add.w	sl, r4, #26
 8003d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	eba3 0309 	sub.w	r3, r3, r9
 8003da8:	4543      	cmp	r3, r8
 8003daa:	f77f af79 	ble.w	8003ca0 <_printf_float+0x250>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4652      	mov	r2, sl
 8003db2:	4631      	mov	r1, r6
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b8      	blx	r7
 8003db8:	3001      	adds	r0, #1
 8003dba:	f43f aeaa 	beq.w	8003b12 <_printf_float+0xc2>
 8003dbe:	f108 0801 	add.w	r8, r8, #1
 8003dc2:	e7ec      	b.n	8003d9e <_printf_float+0x34e>
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4642      	mov	r2, r8
 8003dca:	4628      	mov	r0, r5
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d1c0      	bne.n	8003d54 <_printf_float+0x304>
 8003dd2:	e69e      	b.n	8003b12 <_printf_float+0xc2>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4628      	mov	r0, r5
 8003dda:	9205      	str	r2, [sp, #20]
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	f43f ae97 	beq.w	8003b12 <_printf_float+0xc2>
 8003de4:	9a05      	ldr	r2, [sp, #20]
 8003de6:	f10b 0b01 	add.w	fp, fp, #1
 8003dea:	e7b9      	b.n	8003d60 <_printf_float+0x310>
 8003dec:	ee18 3a10 	vmov	r3, s16
 8003df0:	4652      	mov	r2, sl
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	47b8      	blx	r7
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1be      	bne.n	8003d7a <_printf_float+0x32a>
 8003dfc:	e689      	b.n	8003b12 <_printf_float+0xc2>
 8003dfe:	9a05      	ldr	r2, [sp, #20]
 8003e00:	464b      	mov	r3, r9
 8003e02:	4442      	add	r2, r8
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d1c1      	bne.n	8003d92 <_printf_float+0x342>
 8003e0e:	e680      	b.n	8003b12 <_printf_float+0xc2>
 8003e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e12:	2a01      	cmp	r2, #1
 8003e14:	dc01      	bgt.n	8003e1a <_printf_float+0x3ca>
 8003e16:	07db      	lsls	r3, r3, #31
 8003e18:	d538      	bpl.n	8003e8c <_printf_float+0x43c>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	f43f ae74 	beq.w	8003b12 <_printf_float+0xc2>
 8003e2a:	ee18 3a10 	vmov	r3, s16
 8003e2e:	4652      	mov	r2, sl
 8003e30:	4631      	mov	r1, r6
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b8      	blx	r7
 8003e36:	3001      	adds	r0, #1
 8003e38:	f43f ae6b 	beq.w	8003b12 <_printf_float+0xc2>
 8003e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e40:	2200      	movs	r2, #0
 8003e42:	2300      	movs	r3, #0
 8003e44:	f7fc fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e48:	b9d8      	cbnz	r0, 8003e82 <_printf_float+0x432>
 8003e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4c:	f108 0201 	add.w	r2, r8, #1
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4631      	mov	r1, r6
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d10e      	bne.n	8003e7a <_printf_float+0x42a>
 8003e5c:	e659      	b.n	8003b12 <_printf_float+0xc2>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4652      	mov	r2, sl
 8003e62:	4631      	mov	r1, r6
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b8      	blx	r7
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f43f ae52 	beq.w	8003b12 <_printf_float+0xc2>
 8003e6e:	f108 0801 	add.w	r8, r8, #1
 8003e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4543      	cmp	r3, r8
 8003e78:	dcf1      	bgt.n	8003e5e <_printf_float+0x40e>
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e80:	e6dc      	b.n	8003c3c <_printf_float+0x1ec>
 8003e82:	f04f 0800 	mov.w	r8, #0
 8003e86:	f104 0a1a 	add.w	sl, r4, #26
 8003e8a:	e7f2      	b.n	8003e72 <_printf_float+0x422>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4642      	mov	r2, r8
 8003e90:	e7df      	b.n	8003e52 <_printf_float+0x402>
 8003e92:	2301      	movs	r3, #1
 8003e94:	464a      	mov	r2, r9
 8003e96:	4631      	mov	r1, r6
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f43f ae38 	beq.w	8003b12 <_printf_float+0xc2>
 8003ea2:	f108 0801 	add.w	r8, r8, #1
 8003ea6:	68e3      	ldr	r3, [r4, #12]
 8003ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eaa:	1a5b      	subs	r3, r3, r1
 8003eac:	4543      	cmp	r3, r8
 8003eae:	dcf0      	bgt.n	8003e92 <_printf_float+0x442>
 8003eb0:	e6fa      	b.n	8003ca8 <_printf_float+0x258>
 8003eb2:	f04f 0800 	mov.w	r8, #0
 8003eb6:	f104 0919 	add.w	r9, r4, #25
 8003eba:	e7f4      	b.n	8003ea6 <_printf_float+0x456>

08003ebc <_printf_common>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	4699      	mov	r9, r3
 8003ec4:	688a      	ldr	r2, [r1, #8]
 8003ec6:	690b      	ldr	r3, [r1, #16]
 8003ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bfb8      	it	lt
 8003ed0:	4613      	movlt	r3, r2
 8003ed2:	6033      	str	r3, [r6, #0]
 8003ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ed8:	4607      	mov	r7, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	b10a      	cbz	r2, 8003ee2 <_printf_common+0x26>
 8003ede:	3301      	adds	r3, #1
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	0699      	lsls	r1, r3, #26
 8003ee6:	bf42      	ittt	mi
 8003ee8:	6833      	ldrmi	r3, [r6, #0]
 8003eea:	3302      	addmi	r3, #2
 8003eec:	6033      	strmi	r3, [r6, #0]
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	f015 0506 	ands.w	r5, r5, #6
 8003ef4:	d106      	bne.n	8003f04 <_printf_common+0x48>
 8003ef6:	f104 0a19 	add.w	sl, r4, #25
 8003efa:	68e3      	ldr	r3, [r4, #12]
 8003efc:	6832      	ldr	r2, [r6, #0]
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	42ab      	cmp	r3, r5
 8003f02:	dc26      	bgt.n	8003f52 <_printf_common+0x96>
 8003f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f08:	1e13      	subs	r3, r2, #0
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	bf18      	it	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	0692      	lsls	r2, r2, #26
 8003f12:	d42b      	bmi.n	8003f6c <_printf_common+0xb0>
 8003f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f18:	4649      	mov	r1, r9
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	47c0      	blx	r8
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d01e      	beq.n	8003f60 <_printf_common+0xa4>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	68e5      	ldr	r5, [r4, #12]
 8003f26:	6832      	ldr	r2, [r6, #0]
 8003f28:	f003 0306 	and.w	r3, r3, #6
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	bf08      	it	eq
 8003f30:	1aad      	subeq	r5, r5, r2
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	6922      	ldr	r2, [r4, #16]
 8003f36:	bf0c      	ite	eq
 8003f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f3c:	2500      	movne	r5, #0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bfc4      	itt	gt
 8003f42:	1a9b      	subgt	r3, r3, r2
 8003f44:	18ed      	addgt	r5, r5, r3
 8003f46:	2600      	movs	r6, #0
 8003f48:	341a      	adds	r4, #26
 8003f4a:	42b5      	cmp	r5, r6
 8003f4c:	d11a      	bne.n	8003f84 <_printf_common+0xc8>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e008      	b.n	8003f64 <_printf_common+0xa8>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4652      	mov	r2, sl
 8003f56:	4649      	mov	r1, r9
 8003f58:	4638      	mov	r0, r7
 8003f5a:	47c0      	blx	r8
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d103      	bne.n	8003f68 <_printf_common+0xac>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f68:	3501      	adds	r5, #1
 8003f6a:	e7c6      	b.n	8003efa <_printf_common+0x3e>
 8003f6c:	18e1      	adds	r1, r4, r3
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	2030      	movs	r0, #48	; 0x30
 8003f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f76:	4422      	add	r2, r4
 8003f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f80:	3302      	adds	r3, #2
 8003f82:	e7c7      	b.n	8003f14 <_printf_common+0x58>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4622      	mov	r2, r4
 8003f88:	4649      	mov	r1, r9
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c0      	blx	r8
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d0e6      	beq.n	8003f60 <_printf_common+0xa4>
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7d9      	b.n	8003f4a <_printf_common+0x8e>
	...

08003f98 <_printf_i>:
 8003f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	4691      	mov	r9, r2
 8003fa0:	7e27      	ldrb	r7, [r4, #24]
 8003fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fa4:	2f78      	cmp	r7, #120	; 0x78
 8003fa6:	4680      	mov	r8, r0
 8003fa8:	469a      	mov	sl, r3
 8003faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fae:	d807      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fb0:	2f62      	cmp	r7, #98	; 0x62
 8003fb2:	d80a      	bhi.n	8003fca <_printf_i+0x32>
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f000 80d8 	beq.w	800416a <_printf_i+0x1d2>
 8003fba:	2f58      	cmp	r7, #88	; 0x58
 8003fbc:	f000 80a3 	beq.w	8004106 <_printf_i+0x16e>
 8003fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fc8:	e03a      	b.n	8004040 <_printf_i+0xa8>
 8003fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fce:	2b15      	cmp	r3, #21
 8003fd0:	d8f6      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fd2:	a001      	add	r0, pc, #4	; (adr r0, 8003fd8 <_printf_i+0x40>)
 8003fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fd8:	08004031 	.word	0x08004031
 8003fdc:	08004045 	.word	0x08004045
 8003fe0:	08003fc1 	.word	0x08003fc1
 8003fe4:	08003fc1 	.word	0x08003fc1
 8003fe8:	08003fc1 	.word	0x08003fc1
 8003fec:	08003fc1 	.word	0x08003fc1
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08003fc1 	.word	0x08003fc1
 8003ff8:	08003fc1 	.word	0x08003fc1
 8003ffc:	08003fc1 	.word	0x08003fc1
 8004000:	08003fc1 	.word	0x08003fc1
 8004004:	08004151 	.word	0x08004151
 8004008:	08004075 	.word	0x08004075
 800400c:	08004133 	.word	0x08004133
 8004010:	08003fc1 	.word	0x08003fc1
 8004014:	08003fc1 	.word	0x08003fc1
 8004018:	08004173 	.word	0x08004173
 800401c:	08003fc1 	.word	0x08003fc1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003fc1 	.word	0x08003fc1
 8004028:	08003fc1 	.word	0x08003fc1
 800402c:	0800413b 	.word	0x0800413b
 8004030:	680b      	ldr	r3, [r1, #0]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	600a      	str	r2, [r1, #0]
 8004038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800403c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004040:	2301      	movs	r3, #1
 8004042:	e0a3      	b.n	800418c <_printf_i+0x1f4>
 8004044:	6825      	ldr	r5, [r4, #0]
 8004046:	6808      	ldr	r0, [r1, #0]
 8004048:	062e      	lsls	r6, r5, #24
 800404a:	f100 0304 	add.w	r3, r0, #4
 800404e:	d50a      	bpl.n	8004066 <_printf_i+0xce>
 8004050:	6805      	ldr	r5, [r0, #0]
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	2d00      	cmp	r5, #0
 8004056:	da03      	bge.n	8004060 <_printf_i+0xc8>
 8004058:	232d      	movs	r3, #45	; 0x2d
 800405a:	426d      	negs	r5, r5
 800405c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004060:	485e      	ldr	r0, [pc, #376]	; (80041dc <_printf_i+0x244>)
 8004062:	230a      	movs	r3, #10
 8004064:	e019      	b.n	800409a <_printf_i+0x102>
 8004066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800406a:	6805      	ldr	r5, [r0, #0]
 800406c:	600b      	str	r3, [r1, #0]
 800406e:	bf18      	it	ne
 8004070:	b22d      	sxthne	r5, r5
 8004072:	e7ef      	b.n	8004054 <_printf_i+0xbc>
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	6825      	ldr	r5, [r4, #0]
 8004078:	1d18      	adds	r0, r3, #4
 800407a:	6008      	str	r0, [r1, #0]
 800407c:	0628      	lsls	r0, r5, #24
 800407e:	d501      	bpl.n	8004084 <_printf_i+0xec>
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	e002      	b.n	800408a <_printf_i+0xf2>
 8004084:	0669      	lsls	r1, r5, #25
 8004086:	d5fb      	bpl.n	8004080 <_printf_i+0xe8>
 8004088:	881d      	ldrh	r5, [r3, #0]
 800408a:	4854      	ldr	r0, [pc, #336]	; (80041dc <_printf_i+0x244>)
 800408c:	2f6f      	cmp	r7, #111	; 0x6f
 800408e:	bf0c      	ite	eq
 8004090:	2308      	moveq	r3, #8
 8004092:	230a      	movne	r3, #10
 8004094:	2100      	movs	r1, #0
 8004096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800409a:	6866      	ldr	r6, [r4, #4]
 800409c:	60a6      	str	r6, [r4, #8]
 800409e:	2e00      	cmp	r6, #0
 80040a0:	bfa2      	ittt	ge
 80040a2:	6821      	ldrge	r1, [r4, #0]
 80040a4:	f021 0104 	bicge.w	r1, r1, #4
 80040a8:	6021      	strge	r1, [r4, #0]
 80040aa:	b90d      	cbnz	r5, 80040b0 <_printf_i+0x118>
 80040ac:	2e00      	cmp	r6, #0
 80040ae:	d04d      	beq.n	800414c <_printf_i+0x1b4>
 80040b0:	4616      	mov	r6, r2
 80040b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80040b6:	fb03 5711 	mls	r7, r3, r1, r5
 80040ba:	5dc7      	ldrb	r7, [r0, r7]
 80040bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040c0:	462f      	mov	r7, r5
 80040c2:	42bb      	cmp	r3, r7
 80040c4:	460d      	mov	r5, r1
 80040c6:	d9f4      	bls.n	80040b2 <_printf_i+0x11a>
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d10b      	bne.n	80040e4 <_printf_i+0x14c>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	07df      	lsls	r7, r3, #31
 80040d0:	d508      	bpl.n	80040e4 <_printf_i+0x14c>
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	6861      	ldr	r1, [r4, #4]
 80040d6:	4299      	cmp	r1, r3
 80040d8:	bfde      	ittt	le
 80040da:	2330      	movle	r3, #48	; 0x30
 80040dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040e4:	1b92      	subs	r2, r2, r6
 80040e6:	6122      	str	r2, [r4, #16]
 80040e8:	f8cd a000 	str.w	sl, [sp]
 80040ec:	464b      	mov	r3, r9
 80040ee:	aa03      	add	r2, sp, #12
 80040f0:	4621      	mov	r1, r4
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff fee2 	bl	8003ebc <_printf_common>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d14c      	bne.n	8004196 <_printf_i+0x1fe>
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	b004      	add	sp, #16
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004106:	4835      	ldr	r0, [pc, #212]	; (80041dc <_printf_i+0x244>)
 8004108:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	680e      	ldr	r6, [r1, #0]
 8004110:	061f      	lsls	r7, r3, #24
 8004112:	f856 5b04 	ldr.w	r5, [r6], #4
 8004116:	600e      	str	r6, [r1, #0]
 8004118:	d514      	bpl.n	8004144 <_printf_i+0x1ac>
 800411a:	07d9      	lsls	r1, r3, #31
 800411c:	bf44      	itt	mi
 800411e:	f043 0320 	orrmi.w	r3, r3, #32
 8004122:	6023      	strmi	r3, [r4, #0]
 8004124:	b91d      	cbnz	r5, 800412e <_printf_i+0x196>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f023 0320 	bic.w	r3, r3, #32
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	2310      	movs	r3, #16
 8004130:	e7b0      	b.n	8004094 <_printf_i+0xfc>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	2378      	movs	r3, #120	; 0x78
 800413c:	4828      	ldr	r0, [pc, #160]	; (80041e0 <_printf_i+0x248>)
 800413e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004142:	e7e3      	b.n	800410c <_printf_i+0x174>
 8004144:	065e      	lsls	r6, r3, #25
 8004146:	bf48      	it	mi
 8004148:	b2ad      	uxthmi	r5, r5
 800414a:	e7e6      	b.n	800411a <_printf_i+0x182>
 800414c:	4616      	mov	r6, r2
 800414e:	e7bb      	b.n	80040c8 <_printf_i+0x130>
 8004150:	680b      	ldr	r3, [r1, #0]
 8004152:	6826      	ldr	r6, [r4, #0]
 8004154:	6960      	ldr	r0, [r4, #20]
 8004156:	1d1d      	adds	r5, r3, #4
 8004158:	600d      	str	r5, [r1, #0]
 800415a:	0635      	lsls	r5, r6, #24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	d501      	bpl.n	8004164 <_printf_i+0x1cc>
 8004160:	6018      	str	r0, [r3, #0]
 8004162:	e002      	b.n	800416a <_printf_i+0x1d2>
 8004164:	0671      	lsls	r1, r6, #25
 8004166:	d5fb      	bpl.n	8004160 <_printf_i+0x1c8>
 8004168:	8018      	strh	r0, [r3, #0]
 800416a:	2300      	movs	r3, #0
 800416c:	6123      	str	r3, [r4, #16]
 800416e:	4616      	mov	r6, r2
 8004170:	e7ba      	b.n	80040e8 <_printf_i+0x150>
 8004172:	680b      	ldr	r3, [r1, #0]
 8004174:	1d1a      	adds	r2, r3, #4
 8004176:	600a      	str	r2, [r1, #0]
 8004178:	681e      	ldr	r6, [r3, #0]
 800417a:	6862      	ldr	r2, [r4, #4]
 800417c:	2100      	movs	r1, #0
 800417e:	4630      	mov	r0, r6
 8004180:	f7fc f82e 	bl	80001e0 <memchr>
 8004184:	b108      	cbz	r0, 800418a <_printf_i+0x1f2>
 8004186:	1b80      	subs	r0, r0, r6
 8004188:	6060      	str	r0, [r4, #4]
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	6123      	str	r3, [r4, #16]
 800418e:	2300      	movs	r3, #0
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004194:	e7a8      	b.n	80040e8 <_printf_i+0x150>
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	4632      	mov	r2, r6
 800419a:	4649      	mov	r1, r9
 800419c:	4640      	mov	r0, r8
 800419e:	47d0      	blx	sl
 80041a0:	3001      	adds	r0, #1
 80041a2:	d0ab      	beq.n	80040fc <_printf_i+0x164>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	079b      	lsls	r3, r3, #30
 80041a8:	d413      	bmi.n	80041d2 <_printf_i+0x23a>
 80041aa:	68e0      	ldr	r0, [r4, #12]
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	4298      	cmp	r0, r3
 80041b0:	bfb8      	it	lt
 80041b2:	4618      	movlt	r0, r3
 80041b4:	e7a4      	b.n	8004100 <_printf_i+0x168>
 80041b6:	2301      	movs	r3, #1
 80041b8:	4632      	mov	r2, r6
 80041ba:	4649      	mov	r1, r9
 80041bc:	4640      	mov	r0, r8
 80041be:	47d0      	blx	sl
 80041c0:	3001      	adds	r0, #1
 80041c2:	d09b      	beq.n	80040fc <_printf_i+0x164>
 80041c4:	3501      	adds	r5, #1
 80041c6:	68e3      	ldr	r3, [r4, #12]
 80041c8:	9903      	ldr	r1, [sp, #12]
 80041ca:	1a5b      	subs	r3, r3, r1
 80041cc:	42ab      	cmp	r3, r5
 80041ce:	dcf2      	bgt.n	80041b6 <_printf_i+0x21e>
 80041d0:	e7eb      	b.n	80041aa <_printf_i+0x212>
 80041d2:	2500      	movs	r5, #0
 80041d4:	f104 0619 	add.w	r6, r4, #25
 80041d8:	e7f5      	b.n	80041c6 <_printf_i+0x22e>
 80041da:	bf00      	nop
 80041dc:	0800822e 	.word	0x0800822e
 80041e0:	0800823f 	.word	0x0800823f

080041e4 <_scanf_float>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	b087      	sub	sp, #28
 80041ea:	4617      	mov	r7, r2
 80041ec:	9303      	str	r3, [sp, #12]
 80041ee:	688b      	ldr	r3, [r1, #8]
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80041f6:	bf83      	ittte	hi
 80041f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80041fc:	195b      	addhi	r3, r3, r5
 80041fe:	9302      	strhi	r3, [sp, #8]
 8004200:	2300      	movls	r3, #0
 8004202:	bf86      	itte	hi
 8004204:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004208:	608b      	strhi	r3, [r1, #8]
 800420a:	9302      	strls	r3, [sp, #8]
 800420c:	680b      	ldr	r3, [r1, #0]
 800420e:	468b      	mov	fp, r1
 8004210:	2500      	movs	r5, #0
 8004212:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004216:	f84b 3b1c 	str.w	r3, [fp], #28
 800421a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800421e:	4680      	mov	r8, r0
 8004220:	460c      	mov	r4, r1
 8004222:	465e      	mov	r6, fp
 8004224:	46aa      	mov	sl, r5
 8004226:	46a9      	mov	r9, r5
 8004228:	9501      	str	r5, [sp, #4]
 800422a:	68a2      	ldr	r2, [r4, #8]
 800422c:	b152      	cbz	r2, 8004244 <_scanf_float+0x60>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b4e      	cmp	r3, #78	; 0x4e
 8004234:	d864      	bhi.n	8004300 <_scanf_float+0x11c>
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d83c      	bhi.n	80042b4 <_scanf_float+0xd0>
 800423a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800423e:	b2c8      	uxtb	r0, r1
 8004240:	280e      	cmp	r0, #14
 8004242:	d93a      	bls.n	80042ba <_scanf_float+0xd6>
 8004244:	f1b9 0f00 	cmp.w	r9, #0
 8004248:	d003      	beq.n	8004252 <_scanf_float+0x6e>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004256:	f1ba 0f01 	cmp.w	sl, #1
 800425a:	f200 8113 	bhi.w	8004484 <_scanf_float+0x2a0>
 800425e:	455e      	cmp	r6, fp
 8004260:	f200 8105 	bhi.w	800446e <_scanf_float+0x28a>
 8004264:	2501      	movs	r5, #1
 8004266:	4628      	mov	r0, r5
 8004268:	b007      	add	sp, #28
 800426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004272:	2a0d      	cmp	r2, #13
 8004274:	d8e6      	bhi.n	8004244 <_scanf_float+0x60>
 8004276:	a101      	add	r1, pc, #4	; (adr r1, 800427c <_scanf_float+0x98>)
 8004278:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800427c:	080043bb 	.word	0x080043bb
 8004280:	08004245 	.word	0x08004245
 8004284:	08004245 	.word	0x08004245
 8004288:	08004245 	.word	0x08004245
 800428c:	0800441b 	.word	0x0800441b
 8004290:	080043f3 	.word	0x080043f3
 8004294:	08004245 	.word	0x08004245
 8004298:	08004245 	.word	0x08004245
 800429c:	080043c9 	.word	0x080043c9
 80042a0:	08004245 	.word	0x08004245
 80042a4:	08004245 	.word	0x08004245
 80042a8:	08004245 	.word	0x08004245
 80042ac:	08004245 	.word	0x08004245
 80042b0:	08004381 	.word	0x08004381
 80042b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80042b8:	e7db      	b.n	8004272 <_scanf_float+0x8e>
 80042ba:	290e      	cmp	r1, #14
 80042bc:	d8c2      	bhi.n	8004244 <_scanf_float+0x60>
 80042be:	a001      	add	r0, pc, #4	; (adr r0, 80042c4 <_scanf_float+0xe0>)
 80042c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80042c4:	08004373 	.word	0x08004373
 80042c8:	08004245 	.word	0x08004245
 80042cc:	08004373 	.word	0x08004373
 80042d0:	08004407 	.word	0x08004407
 80042d4:	08004245 	.word	0x08004245
 80042d8:	08004321 	.word	0x08004321
 80042dc:	0800435d 	.word	0x0800435d
 80042e0:	0800435d 	.word	0x0800435d
 80042e4:	0800435d 	.word	0x0800435d
 80042e8:	0800435d 	.word	0x0800435d
 80042ec:	0800435d 	.word	0x0800435d
 80042f0:	0800435d 	.word	0x0800435d
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	0800435d 	.word	0x0800435d
 80042fc:	0800435d 	.word	0x0800435d
 8004300:	2b6e      	cmp	r3, #110	; 0x6e
 8004302:	d809      	bhi.n	8004318 <_scanf_float+0x134>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d8b2      	bhi.n	800426e <_scanf_float+0x8a>
 8004308:	2b54      	cmp	r3, #84	; 0x54
 800430a:	d077      	beq.n	80043fc <_scanf_float+0x218>
 800430c:	2b59      	cmp	r3, #89	; 0x59
 800430e:	d199      	bne.n	8004244 <_scanf_float+0x60>
 8004310:	2d07      	cmp	r5, #7
 8004312:	d197      	bne.n	8004244 <_scanf_float+0x60>
 8004314:	2508      	movs	r5, #8
 8004316:	e029      	b.n	800436c <_scanf_float+0x188>
 8004318:	2b74      	cmp	r3, #116	; 0x74
 800431a:	d06f      	beq.n	80043fc <_scanf_float+0x218>
 800431c:	2b79      	cmp	r3, #121	; 0x79
 800431e:	e7f6      	b.n	800430e <_scanf_float+0x12a>
 8004320:	6821      	ldr	r1, [r4, #0]
 8004322:	05c8      	lsls	r0, r1, #23
 8004324:	d51a      	bpl.n	800435c <_scanf_float+0x178>
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800432c:	6021      	str	r1, [r4, #0]
 800432e:	f109 0901 	add.w	r9, r9, #1
 8004332:	b11b      	cbz	r3, 800433c <_scanf_float+0x158>
 8004334:	3b01      	subs	r3, #1
 8004336:	3201      	adds	r2, #1
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	60a2      	str	r2, [r4, #8]
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	3b01      	subs	r3, #1
 8004340:	60a3      	str	r3, [r4, #8]
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b01      	subs	r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	f340 8084 	ble.w	800445c <_scanf_float+0x278>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	e766      	b.n	800422a <_scanf_float+0x46>
 800435c:	eb1a 0f05 	cmn.w	sl, r5
 8004360:	f47f af70 	bne.w	8004244 <_scanf_float+0x60>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800436a:	6022      	str	r2, [r4, #0]
 800436c:	f806 3b01 	strb.w	r3, [r6], #1
 8004370:	e7e4      	b.n	800433c <_scanf_float+0x158>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	0610      	lsls	r0, r2, #24
 8004376:	f57f af65 	bpl.w	8004244 <_scanf_float+0x60>
 800437a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800437e:	e7f4      	b.n	800436a <_scanf_float+0x186>
 8004380:	f1ba 0f00 	cmp.w	sl, #0
 8004384:	d10e      	bne.n	80043a4 <_scanf_float+0x1c0>
 8004386:	f1b9 0f00 	cmp.w	r9, #0
 800438a:	d10e      	bne.n	80043aa <_scanf_float+0x1c6>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004392:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004396:	d108      	bne.n	80043aa <_scanf_float+0x1c6>
 8004398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800439c:	6022      	str	r2, [r4, #0]
 800439e:	f04f 0a01 	mov.w	sl, #1
 80043a2:	e7e3      	b.n	800436c <_scanf_float+0x188>
 80043a4:	f1ba 0f02 	cmp.w	sl, #2
 80043a8:	d055      	beq.n	8004456 <_scanf_float+0x272>
 80043aa:	2d01      	cmp	r5, #1
 80043ac:	d002      	beq.n	80043b4 <_scanf_float+0x1d0>
 80043ae:	2d04      	cmp	r5, #4
 80043b0:	f47f af48 	bne.w	8004244 <_scanf_float+0x60>
 80043b4:	3501      	adds	r5, #1
 80043b6:	b2ed      	uxtb	r5, r5
 80043b8:	e7d8      	b.n	800436c <_scanf_float+0x188>
 80043ba:	f1ba 0f01 	cmp.w	sl, #1
 80043be:	f47f af41 	bne.w	8004244 <_scanf_float+0x60>
 80043c2:	f04f 0a02 	mov.w	sl, #2
 80043c6:	e7d1      	b.n	800436c <_scanf_float+0x188>
 80043c8:	b97d      	cbnz	r5, 80043ea <_scanf_float+0x206>
 80043ca:	f1b9 0f00 	cmp.w	r9, #0
 80043ce:	f47f af3c 	bne.w	800424a <_scanf_float+0x66>
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043dc:	f47f af39 	bne.w	8004252 <_scanf_float+0x6e>
 80043e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	2501      	movs	r5, #1
 80043e8:	e7c0      	b.n	800436c <_scanf_float+0x188>
 80043ea:	2d03      	cmp	r5, #3
 80043ec:	d0e2      	beq.n	80043b4 <_scanf_float+0x1d0>
 80043ee:	2d05      	cmp	r5, #5
 80043f0:	e7de      	b.n	80043b0 <_scanf_float+0x1cc>
 80043f2:	2d02      	cmp	r5, #2
 80043f4:	f47f af26 	bne.w	8004244 <_scanf_float+0x60>
 80043f8:	2503      	movs	r5, #3
 80043fa:	e7b7      	b.n	800436c <_scanf_float+0x188>
 80043fc:	2d06      	cmp	r5, #6
 80043fe:	f47f af21 	bne.w	8004244 <_scanf_float+0x60>
 8004402:	2507      	movs	r5, #7
 8004404:	e7b2      	b.n	800436c <_scanf_float+0x188>
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	0591      	lsls	r1, r2, #22
 800440a:	f57f af1b 	bpl.w	8004244 <_scanf_float+0x60>
 800440e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004412:	6022      	str	r2, [r4, #0]
 8004414:	f8cd 9004 	str.w	r9, [sp, #4]
 8004418:	e7a8      	b.n	800436c <_scanf_float+0x188>
 800441a:	6822      	ldr	r2, [r4, #0]
 800441c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004420:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004424:	d006      	beq.n	8004434 <_scanf_float+0x250>
 8004426:	0550      	lsls	r0, r2, #21
 8004428:	f57f af0c 	bpl.w	8004244 <_scanf_float+0x60>
 800442c:	f1b9 0f00 	cmp.w	r9, #0
 8004430:	f43f af0f 	beq.w	8004252 <_scanf_float+0x6e>
 8004434:	0591      	lsls	r1, r2, #22
 8004436:	bf58      	it	pl
 8004438:	9901      	ldrpl	r1, [sp, #4]
 800443a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800443e:	bf58      	it	pl
 8004440:	eba9 0101 	subpl.w	r1, r9, r1
 8004444:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004448:	bf58      	it	pl
 800444a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800444e:	6022      	str	r2, [r4, #0]
 8004450:	f04f 0900 	mov.w	r9, #0
 8004454:	e78a      	b.n	800436c <_scanf_float+0x188>
 8004456:	f04f 0a03 	mov.w	sl, #3
 800445a:	e787      	b.n	800436c <_scanf_float+0x188>
 800445c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004460:	4639      	mov	r1, r7
 8004462:	4640      	mov	r0, r8
 8004464:	4798      	blx	r3
 8004466:	2800      	cmp	r0, #0
 8004468:	f43f aedf 	beq.w	800422a <_scanf_float+0x46>
 800446c:	e6ea      	b.n	8004244 <_scanf_float+0x60>
 800446e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004476:	463a      	mov	r2, r7
 8004478:	4640      	mov	r0, r8
 800447a:	4798      	blx	r3
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	3b01      	subs	r3, #1
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	e6ec      	b.n	800425e <_scanf_float+0x7a>
 8004484:	1e6b      	subs	r3, r5, #1
 8004486:	2b06      	cmp	r3, #6
 8004488:	d825      	bhi.n	80044d6 <_scanf_float+0x2f2>
 800448a:	2d02      	cmp	r5, #2
 800448c:	d836      	bhi.n	80044fc <_scanf_float+0x318>
 800448e:	455e      	cmp	r6, fp
 8004490:	f67f aee8 	bls.w	8004264 <_scanf_float+0x80>
 8004494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004498:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800449c:	463a      	mov	r2, r7
 800449e:	4640      	mov	r0, r8
 80044a0:	4798      	blx	r3
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	e7f1      	b.n	800448e <_scanf_float+0x2aa>
 80044aa:	9802      	ldr	r0, [sp, #8]
 80044ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80044b4:	9002      	str	r0, [sp, #8]
 80044b6:	463a      	mov	r2, r7
 80044b8:	4640      	mov	r0, r8
 80044ba:	4798      	blx	r3
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	3b01      	subs	r3, #1
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044c6:	fa5f fa8a 	uxtb.w	sl, sl
 80044ca:	f1ba 0f02 	cmp.w	sl, #2
 80044ce:	d1ec      	bne.n	80044aa <_scanf_float+0x2c6>
 80044d0:	3d03      	subs	r5, #3
 80044d2:	b2ed      	uxtb	r5, r5
 80044d4:	1b76      	subs	r6, r6, r5
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	05da      	lsls	r2, r3, #23
 80044da:	d52f      	bpl.n	800453c <_scanf_float+0x358>
 80044dc:	055b      	lsls	r3, r3, #21
 80044de:	d510      	bpl.n	8004502 <_scanf_float+0x31e>
 80044e0:	455e      	cmp	r6, fp
 80044e2:	f67f aebf 	bls.w	8004264 <_scanf_float+0x80>
 80044e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044ee:	463a      	mov	r2, r7
 80044f0:	4640      	mov	r0, r8
 80044f2:	4798      	blx	r3
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	e7f1      	b.n	80044e0 <_scanf_float+0x2fc>
 80044fc:	46aa      	mov	sl, r5
 80044fe:	9602      	str	r6, [sp, #8]
 8004500:	e7df      	b.n	80044c2 <_scanf_float+0x2de>
 8004502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	2965      	cmp	r1, #101	; 0x65
 800450a:	f103 33ff 	add.w	r3, r3, #4294967295
 800450e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	d00c      	beq.n	8004530 <_scanf_float+0x34c>
 8004516:	2945      	cmp	r1, #69	; 0x45
 8004518:	d00a      	beq.n	8004530 <_scanf_float+0x34c>
 800451a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800451e:	463a      	mov	r2, r7
 8004520:	4640      	mov	r0, r8
 8004522:	4798      	blx	r3
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800452a:	3b01      	subs	r3, #1
 800452c:	1eb5      	subs	r5, r6, #2
 800452e:	6123      	str	r3, [r4, #16]
 8004530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004534:	463a      	mov	r2, r7
 8004536:	4640      	mov	r0, r8
 8004538:	4798      	blx	r3
 800453a:	462e      	mov	r6, r5
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	f015 0510 	ands.w	r5, r5, #16
 8004542:	d158      	bne.n	80045f6 <_scanf_float+0x412>
 8004544:	7035      	strb	r5, [r6, #0]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d11c      	bne.n	800458c <_scanf_float+0x3a8>
 8004552:	9b01      	ldr	r3, [sp, #4]
 8004554:	454b      	cmp	r3, r9
 8004556:	eba3 0209 	sub.w	r2, r3, r9
 800455a:	d124      	bne.n	80045a6 <_scanf_float+0x3c2>
 800455c:	2200      	movs	r2, #0
 800455e:	4659      	mov	r1, fp
 8004560:	4640      	mov	r0, r8
 8004562:	f000 fe9b 	bl	800529c <_strtod_r>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f011 0f02 	tst.w	r1, #2
 8004570:	ec57 6b10 	vmov	r6, r7, d0
 8004574:	f103 0204 	add.w	r2, r3, #4
 8004578:	d020      	beq.n	80045bc <_scanf_float+0x3d8>
 800457a:	9903      	ldr	r1, [sp, #12]
 800457c:	600a      	str	r2, [r1, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	e9c3 6700 	strd	r6, r7, [r3]
 8004584:	68e3      	ldr	r3, [r4, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60e3      	str	r3, [r4, #12]
 800458a:	e66c      	b.n	8004266 <_scanf_float+0x82>
 800458c:	9b04      	ldr	r3, [sp, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0e4      	beq.n	800455c <_scanf_float+0x378>
 8004592:	9905      	ldr	r1, [sp, #20]
 8004594:	230a      	movs	r3, #10
 8004596:	462a      	mov	r2, r5
 8004598:	3101      	adds	r1, #1
 800459a:	4640      	mov	r0, r8
 800459c:	f000 ff08 	bl	80053b0 <_strtol_r>
 80045a0:	9b04      	ldr	r3, [sp, #16]
 80045a2:	9e05      	ldr	r6, [sp, #20]
 80045a4:	1ac2      	subs	r2, r0, r3
 80045a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80045aa:	429e      	cmp	r6, r3
 80045ac:	bf28      	it	cs
 80045ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80045b2:	4912      	ldr	r1, [pc, #72]	; (80045fc <_scanf_float+0x418>)
 80045b4:	4630      	mov	r0, r6
 80045b6:	f000 f82b 	bl	8004610 <siprintf>
 80045ba:	e7cf      	b.n	800455c <_scanf_float+0x378>
 80045bc:	f011 0f04 	tst.w	r1, #4
 80045c0:	9903      	ldr	r1, [sp, #12]
 80045c2:	600a      	str	r2, [r1, #0]
 80045c4:	d1db      	bne.n	800457e <_scanf_float+0x39a>
 80045c6:	f8d3 8000 	ldr.w	r8, [r3]
 80045ca:	ee10 2a10 	vmov	r2, s0
 80045ce:	ee10 0a10 	vmov	r0, s0
 80045d2:	463b      	mov	r3, r7
 80045d4:	4639      	mov	r1, r7
 80045d6:	f7fc faa9 	bl	8000b2c <__aeabi_dcmpun>
 80045da:	b128      	cbz	r0, 80045e8 <_scanf_float+0x404>
 80045dc:	4808      	ldr	r0, [pc, #32]	; (8004600 <_scanf_float+0x41c>)
 80045de:	f000 f811 	bl	8004604 <nanf>
 80045e2:	ed88 0a00 	vstr	s0, [r8]
 80045e6:	e7cd      	b.n	8004584 <_scanf_float+0x3a0>
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fc fafc 	bl	8000be8 <__aeabi_d2f>
 80045f0:	f8c8 0000 	str.w	r0, [r8]
 80045f4:	e7c6      	b.n	8004584 <_scanf_float+0x3a0>
 80045f6:	2500      	movs	r5, #0
 80045f8:	e635      	b.n	8004266 <_scanf_float+0x82>
 80045fa:	bf00      	nop
 80045fc:	08008250 	.word	0x08008250
 8004600:	08008668 	.word	0x08008668

08004604 <nanf>:
 8004604:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800460c <nanf+0x8>
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	7fc00000 	.word	0x7fc00000

08004610 <siprintf>:
 8004610:	b40e      	push	{r1, r2, r3}
 8004612:	b500      	push	{lr}
 8004614:	b09c      	sub	sp, #112	; 0x70
 8004616:	ab1d      	add	r3, sp, #116	; 0x74
 8004618:	9002      	str	r0, [sp, #8]
 800461a:	9006      	str	r0, [sp, #24]
 800461c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004620:	4809      	ldr	r0, [pc, #36]	; (8004648 <siprintf+0x38>)
 8004622:	9107      	str	r1, [sp, #28]
 8004624:	9104      	str	r1, [sp, #16]
 8004626:	4909      	ldr	r1, [pc, #36]	; (800464c <siprintf+0x3c>)
 8004628:	f853 2b04 	ldr.w	r2, [r3], #4
 800462c:	9105      	str	r1, [sp, #20]
 800462e:	6800      	ldr	r0, [r0, #0]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	a902      	add	r1, sp, #8
 8004634:	f002 fea4 	bl	8007380 <_svfiprintf_r>
 8004638:	9b02      	ldr	r3, [sp, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	b01c      	add	sp, #112	; 0x70
 8004640:	f85d eb04 	ldr.w	lr, [sp], #4
 8004644:	b003      	add	sp, #12
 8004646:	4770      	bx	lr
 8004648:	200000e0 	.word	0x200000e0
 800464c:	ffff0208 	.word	0xffff0208

08004650 <sulp>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4604      	mov	r4, r0
 8004654:	460d      	mov	r5, r1
 8004656:	ec45 4b10 	vmov	d0, r4, r5
 800465a:	4616      	mov	r6, r2
 800465c:	f002 fc2c 	bl	8006eb8 <__ulp>
 8004660:	ec51 0b10 	vmov	r0, r1, d0
 8004664:	b17e      	cbz	r6, 8004686 <sulp+0x36>
 8004666:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800466a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800466e:	2b00      	cmp	r3, #0
 8004670:	dd09      	ble.n	8004686 <sulp+0x36>
 8004672:	051b      	lsls	r3, r3, #20
 8004674:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004678:	2400      	movs	r4, #0
 800467a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	f7fb ffb9 	bl	80005f8 <__aeabi_dmul>
 8004686:	bd70      	pop	{r4, r5, r6, pc}

08004688 <_strtod_l>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b0a3      	sub	sp, #140	; 0x8c
 800468e:	461f      	mov	r7, r3
 8004690:	2300      	movs	r3, #0
 8004692:	931e      	str	r3, [sp, #120]	; 0x78
 8004694:	4ba4      	ldr	r3, [pc, #656]	; (8004928 <_strtod_l+0x2a0>)
 8004696:	9219      	str	r2, [sp, #100]	; 0x64
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	9307      	str	r3, [sp, #28]
 800469c:	4604      	mov	r4, r0
 800469e:	4618      	mov	r0, r3
 80046a0:	4688      	mov	r8, r1
 80046a2:	f7fb fd95 	bl	80001d0 <strlen>
 80046a6:	f04f 0a00 	mov.w	sl, #0
 80046aa:	4605      	mov	r5, r0
 80046ac:	f04f 0b00 	mov.w	fp, #0
 80046b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80046b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	2a2b      	cmp	r2, #43	; 0x2b
 80046ba:	d04c      	beq.n	8004756 <_strtod_l+0xce>
 80046bc:	d839      	bhi.n	8004732 <_strtod_l+0xaa>
 80046be:	2a0d      	cmp	r2, #13
 80046c0:	d832      	bhi.n	8004728 <_strtod_l+0xa0>
 80046c2:	2a08      	cmp	r2, #8
 80046c4:	d832      	bhi.n	800472c <_strtod_l+0xa4>
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	d03c      	beq.n	8004744 <_strtod_l+0xbc>
 80046ca:	2300      	movs	r3, #0
 80046cc:	930e      	str	r3, [sp, #56]	; 0x38
 80046ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80046d0:	7833      	ldrb	r3, [r6, #0]
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	f040 80b4 	bne.w	8004840 <_strtod_l+0x1b8>
 80046d8:	7873      	ldrb	r3, [r6, #1]
 80046da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80046de:	2b58      	cmp	r3, #88	; 0x58
 80046e0:	d16c      	bne.n	80047bc <_strtod_l+0x134>
 80046e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	ab1e      	add	r3, sp, #120	; 0x78
 80046e8:	9702      	str	r7, [sp, #8]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4a8f      	ldr	r2, [pc, #572]	; (800492c <_strtod_l+0x2a4>)
 80046ee:	ab1f      	add	r3, sp, #124	; 0x7c
 80046f0:	a91d      	add	r1, sp, #116	; 0x74
 80046f2:	4620      	mov	r0, r4
 80046f4:	f001 fd40 	bl	8006178 <__gethex>
 80046f8:	f010 0707 	ands.w	r7, r0, #7
 80046fc:	4605      	mov	r5, r0
 80046fe:	d005      	beq.n	800470c <_strtod_l+0x84>
 8004700:	2f06      	cmp	r7, #6
 8004702:	d12a      	bne.n	800475a <_strtod_l+0xd2>
 8004704:	3601      	adds	r6, #1
 8004706:	2300      	movs	r3, #0
 8004708:	961d      	str	r6, [sp, #116]	; 0x74
 800470a:	930e      	str	r3, [sp, #56]	; 0x38
 800470c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 8596 	bne.w	8005240 <_strtod_l+0xbb8>
 8004714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004716:	b1db      	cbz	r3, 8004750 <_strtod_l+0xc8>
 8004718:	4652      	mov	r2, sl
 800471a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800471e:	ec43 2b10 	vmov	d0, r2, r3
 8004722:	b023      	add	sp, #140	; 0x8c
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	2a20      	cmp	r2, #32
 800472a:	d1ce      	bne.n	80046ca <_strtod_l+0x42>
 800472c:	3301      	adds	r3, #1
 800472e:	931d      	str	r3, [sp, #116]	; 0x74
 8004730:	e7c0      	b.n	80046b4 <_strtod_l+0x2c>
 8004732:	2a2d      	cmp	r2, #45	; 0x2d
 8004734:	d1c9      	bne.n	80046ca <_strtod_l+0x42>
 8004736:	2201      	movs	r2, #1
 8004738:	920e      	str	r2, [sp, #56]	; 0x38
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	921d      	str	r2, [sp, #116]	; 0x74
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1c4      	bne.n	80046ce <_strtod_l+0x46>
 8004744:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004746:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8576 	bne.w	800523c <_strtod_l+0xbb4>
 8004750:	4652      	mov	r2, sl
 8004752:	465b      	mov	r3, fp
 8004754:	e7e3      	b.n	800471e <_strtod_l+0x96>
 8004756:	2200      	movs	r2, #0
 8004758:	e7ee      	b.n	8004738 <_strtod_l+0xb0>
 800475a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800475c:	b13a      	cbz	r2, 800476e <_strtod_l+0xe6>
 800475e:	2135      	movs	r1, #53	; 0x35
 8004760:	a820      	add	r0, sp, #128	; 0x80
 8004762:	f002 fcb4 	bl	80070ce <__copybits>
 8004766:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004768:	4620      	mov	r0, r4
 800476a:	f002 f879 	bl	8006860 <_Bfree>
 800476e:	3f01      	subs	r7, #1
 8004770:	2f05      	cmp	r7, #5
 8004772:	d807      	bhi.n	8004784 <_strtod_l+0xfc>
 8004774:	e8df f007 	tbb	[pc, r7]
 8004778:	1d180b0e 	.word	0x1d180b0e
 800477c:	030e      	.short	0x030e
 800477e:	f04f 0b00 	mov.w	fp, #0
 8004782:	46da      	mov	sl, fp
 8004784:	0728      	lsls	r0, r5, #28
 8004786:	d5c1      	bpl.n	800470c <_strtod_l+0x84>
 8004788:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800478c:	e7be      	b.n	800470c <_strtod_l+0x84>
 800478e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004792:	e7f7      	b.n	8004784 <_strtod_l+0xfc>
 8004794:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004798:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800479a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800479e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80047a6:	e7ed      	b.n	8004784 <_strtod_l+0xfc>
 80047a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004930 <_strtod_l+0x2a8>
 80047ac:	f04f 0a00 	mov.w	sl, #0
 80047b0:	e7e8      	b.n	8004784 <_strtod_l+0xfc>
 80047b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80047b6:	f04f 3aff 	mov.w	sl, #4294967295
 80047ba:	e7e3      	b.n	8004784 <_strtod_l+0xfc>
 80047bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	921d      	str	r2, [sp, #116]	; 0x74
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d0f9      	beq.n	80047bc <_strtod_l+0x134>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d09f      	beq.n	800470c <_strtod_l+0x84>
 80047cc:	2301      	movs	r3, #1
 80047ce:	f04f 0900 	mov.w	r9, #0
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047d6:	930a      	str	r3, [sp, #40]	; 0x28
 80047d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047dc:	464f      	mov	r7, r9
 80047de:	220a      	movs	r2, #10
 80047e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80047e2:	7806      	ldrb	r6, [r0, #0]
 80047e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80047e8:	b2d9      	uxtb	r1, r3
 80047ea:	2909      	cmp	r1, #9
 80047ec:	d92a      	bls.n	8004844 <_strtod_l+0x1bc>
 80047ee:	9907      	ldr	r1, [sp, #28]
 80047f0:	462a      	mov	r2, r5
 80047f2:	f002 fedd 	bl	80075b0 <strncmp>
 80047f6:	b398      	cbz	r0, 8004860 <_strtod_l+0x1d8>
 80047f8:	2000      	movs	r0, #0
 80047fa:	4633      	mov	r3, r6
 80047fc:	463d      	mov	r5, r7
 80047fe:	9007      	str	r0, [sp, #28]
 8004800:	4602      	mov	r2, r0
 8004802:	2b65      	cmp	r3, #101	; 0x65
 8004804:	d001      	beq.n	800480a <_strtod_l+0x182>
 8004806:	2b45      	cmp	r3, #69	; 0x45
 8004808:	d118      	bne.n	800483c <_strtod_l+0x1b4>
 800480a:	b91d      	cbnz	r5, 8004814 <_strtod_l+0x18c>
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	4303      	orrs	r3, r0
 8004810:	d098      	beq.n	8004744 <_strtod_l+0xbc>
 8004812:	2500      	movs	r5, #0
 8004814:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004818:	f108 0301 	add.w	r3, r8, #1
 800481c:	931d      	str	r3, [sp, #116]	; 0x74
 800481e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004822:	2b2b      	cmp	r3, #43	; 0x2b
 8004824:	d075      	beq.n	8004912 <_strtod_l+0x28a>
 8004826:	2b2d      	cmp	r3, #45	; 0x2d
 8004828:	d07b      	beq.n	8004922 <_strtod_l+0x29a>
 800482a:	f04f 0c00 	mov.w	ip, #0
 800482e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004832:	2909      	cmp	r1, #9
 8004834:	f240 8082 	bls.w	800493c <_strtod_l+0x2b4>
 8004838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800483c:	2600      	movs	r6, #0
 800483e:	e09d      	b.n	800497c <_strtod_l+0x2f4>
 8004840:	2300      	movs	r3, #0
 8004842:	e7c4      	b.n	80047ce <_strtod_l+0x146>
 8004844:	2f08      	cmp	r7, #8
 8004846:	bfd8      	it	le
 8004848:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800484a:	f100 0001 	add.w	r0, r0, #1
 800484e:	bfda      	itte	le
 8004850:	fb02 3301 	mlale	r3, r2, r1, r3
 8004854:	9309      	strle	r3, [sp, #36]	; 0x24
 8004856:	fb02 3909 	mlagt	r9, r2, r9, r3
 800485a:	3701      	adds	r7, #1
 800485c:	901d      	str	r0, [sp, #116]	; 0x74
 800485e:	e7bf      	b.n	80047e0 <_strtod_l+0x158>
 8004860:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004862:	195a      	adds	r2, r3, r5
 8004864:	921d      	str	r2, [sp, #116]	; 0x74
 8004866:	5d5b      	ldrb	r3, [r3, r5]
 8004868:	2f00      	cmp	r7, #0
 800486a:	d037      	beq.n	80048dc <_strtod_l+0x254>
 800486c:	9007      	str	r0, [sp, #28]
 800486e:	463d      	mov	r5, r7
 8004870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004874:	2a09      	cmp	r2, #9
 8004876:	d912      	bls.n	800489e <_strtod_l+0x216>
 8004878:	2201      	movs	r2, #1
 800487a:	e7c2      	b.n	8004802 <_strtod_l+0x17a>
 800487c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	921d      	str	r2, [sp, #116]	; 0x74
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	3001      	adds	r0, #1
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d0f8      	beq.n	800487c <_strtod_l+0x1f4>
 800488a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800488e:	2a08      	cmp	r2, #8
 8004890:	f200 84db 	bhi.w	800524a <_strtod_l+0xbc2>
 8004894:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004896:	9007      	str	r0, [sp, #28]
 8004898:	2000      	movs	r0, #0
 800489a:	920a      	str	r2, [sp, #40]	; 0x28
 800489c:	4605      	mov	r5, r0
 800489e:	3b30      	subs	r3, #48	; 0x30
 80048a0:	f100 0201 	add.w	r2, r0, #1
 80048a4:	d014      	beq.n	80048d0 <_strtod_l+0x248>
 80048a6:	9907      	ldr	r1, [sp, #28]
 80048a8:	4411      	add	r1, r2
 80048aa:	9107      	str	r1, [sp, #28]
 80048ac:	462a      	mov	r2, r5
 80048ae:	eb00 0e05 	add.w	lr, r0, r5
 80048b2:	210a      	movs	r1, #10
 80048b4:	4572      	cmp	r2, lr
 80048b6:	d113      	bne.n	80048e0 <_strtod_l+0x258>
 80048b8:	182a      	adds	r2, r5, r0
 80048ba:	2a08      	cmp	r2, #8
 80048bc:	f105 0501 	add.w	r5, r5, #1
 80048c0:	4405      	add	r5, r0
 80048c2:	dc1c      	bgt.n	80048fe <_strtod_l+0x276>
 80048c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c6:	220a      	movs	r2, #10
 80048c8:	fb02 3301 	mla	r3, r2, r1, r3
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	2200      	movs	r2, #0
 80048d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	911d      	str	r1, [sp, #116]	; 0x74
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	4610      	mov	r0, r2
 80048da:	e7c9      	b.n	8004870 <_strtod_l+0x1e8>
 80048dc:	4638      	mov	r0, r7
 80048de:	e7d2      	b.n	8004886 <_strtod_l+0x1fe>
 80048e0:	2a08      	cmp	r2, #8
 80048e2:	dc04      	bgt.n	80048ee <_strtod_l+0x266>
 80048e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048e6:	434e      	muls	r6, r1
 80048e8:	9609      	str	r6, [sp, #36]	; 0x24
 80048ea:	3201      	adds	r2, #1
 80048ec:	e7e2      	b.n	80048b4 <_strtod_l+0x22c>
 80048ee:	f102 0c01 	add.w	ip, r2, #1
 80048f2:	f1bc 0f10 	cmp.w	ip, #16
 80048f6:	bfd8      	it	le
 80048f8:	fb01 f909 	mulle.w	r9, r1, r9
 80048fc:	e7f5      	b.n	80048ea <_strtod_l+0x262>
 80048fe:	2d10      	cmp	r5, #16
 8004900:	bfdc      	itt	le
 8004902:	220a      	movle	r2, #10
 8004904:	fb02 3909 	mlale	r9, r2, r9, r3
 8004908:	e7e1      	b.n	80048ce <_strtod_l+0x246>
 800490a:	2300      	movs	r3, #0
 800490c:	9307      	str	r3, [sp, #28]
 800490e:	2201      	movs	r2, #1
 8004910:	e77c      	b.n	800480c <_strtod_l+0x184>
 8004912:	f04f 0c00 	mov.w	ip, #0
 8004916:	f108 0302 	add.w	r3, r8, #2
 800491a:	931d      	str	r3, [sp, #116]	; 0x74
 800491c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004920:	e785      	b.n	800482e <_strtod_l+0x1a6>
 8004922:	f04f 0c01 	mov.w	ip, #1
 8004926:	e7f6      	b.n	8004916 <_strtod_l+0x28e>
 8004928:	080084a8 	.word	0x080084a8
 800492c:	08008258 	.word	0x08008258
 8004930:	7ff00000 	.word	0x7ff00000
 8004934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	911d      	str	r1, [sp, #116]	; 0x74
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d0f9      	beq.n	8004934 <_strtod_l+0x2ac>
 8004940:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004944:	2908      	cmp	r1, #8
 8004946:	f63f af79 	bhi.w	800483c <_strtod_l+0x1b4>
 800494a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800494e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004950:	9308      	str	r3, [sp, #32]
 8004952:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004954:	1c59      	adds	r1, r3, #1
 8004956:	911d      	str	r1, [sp, #116]	; 0x74
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800495e:	2e09      	cmp	r6, #9
 8004960:	d937      	bls.n	80049d2 <_strtod_l+0x34a>
 8004962:	9e08      	ldr	r6, [sp, #32]
 8004964:	1b89      	subs	r1, r1, r6
 8004966:	2908      	cmp	r1, #8
 8004968:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800496c:	dc02      	bgt.n	8004974 <_strtod_l+0x2ec>
 800496e:	4576      	cmp	r6, lr
 8004970:	bfa8      	it	ge
 8004972:	4676      	movge	r6, lr
 8004974:	f1bc 0f00 	cmp.w	ip, #0
 8004978:	d000      	beq.n	800497c <_strtod_l+0x2f4>
 800497a:	4276      	negs	r6, r6
 800497c:	2d00      	cmp	r5, #0
 800497e:	d14f      	bne.n	8004a20 <_strtod_l+0x398>
 8004980:	9904      	ldr	r1, [sp, #16]
 8004982:	4301      	orrs	r1, r0
 8004984:	f47f aec2 	bne.w	800470c <_strtod_l+0x84>
 8004988:	2a00      	cmp	r2, #0
 800498a:	f47f aedb 	bne.w	8004744 <_strtod_l+0xbc>
 800498e:	2b69      	cmp	r3, #105	; 0x69
 8004990:	d027      	beq.n	80049e2 <_strtod_l+0x35a>
 8004992:	dc24      	bgt.n	80049de <_strtod_l+0x356>
 8004994:	2b49      	cmp	r3, #73	; 0x49
 8004996:	d024      	beq.n	80049e2 <_strtod_l+0x35a>
 8004998:	2b4e      	cmp	r3, #78	; 0x4e
 800499a:	f47f aed3 	bne.w	8004744 <_strtod_l+0xbc>
 800499e:	499e      	ldr	r1, [pc, #632]	; (8004c18 <_strtod_l+0x590>)
 80049a0:	a81d      	add	r0, sp, #116	; 0x74
 80049a2:	f001 fe41 	bl	8006628 <__match>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f43f aecc 	beq.w	8004744 <_strtod_l+0xbc>
 80049ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b28      	cmp	r3, #40	; 0x28
 80049b2:	d12d      	bne.n	8004a10 <_strtod_l+0x388>
 80049b4:	4999      	ldr	r1, [pc, #612]	; (8004c1c <_strtod_l+0x594>)
 80049b6:	aa20      	add	r2, sp, #128	; 0x80
 80049b8:	a81d      	add	r0, sp, #116	; 0x74
 80049ba:	f001 fe49 	bl	8006650 <__hexnan>
 80049be:	2805      	cmp	r0, #5
 80049c0:	d126      	bne.n	8004a10 <_strtod_l+0x388>
 80049c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80049c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80049cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80049d0:	e69c      	b.n	800470c <_strtod_l+0x84>
 80049d2:	210a      	movs	r1, #10
 80049d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80049d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80049dc:	e7b9      	b.n	8004952 <_strtod_l+0x2ca>
 80049de:	2b6e      	cmp	r3, #110	; 0x6e
 80049e0:	e7db      	b.n	800499a <_strtod_l+0x312>
 80049e2:	498f      	ldr	r1, [pc, #572]	; (8004c20 <_strtod_l+0x598>)
 80049e4:	a81d      	add	r0, sp, #116	; 0x74
 80049e6:	f001 fe1f 	bl	8006628 <__match>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	f43f aeaa 	beq.w	8004744 <_strtod_l+0xbc>
 80049f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049f2:	498c      	ldr	r1, [pc, #560]	; (8004c24 <_strtod_l+0x59c>)
 80049f4:	3b01      	subs	r3, #1
 80049f6:	a81d      	add	r0, sp, #116	; 0x74
 80049f8:	931d      	str	r3, [sp, #116]	; 0x74
 80049fa:	f001 fe15 	bl	8006628 <__match>
 80049fe:	b910      	cbnz	r0, 8004a06 <_strtod_l+0x37e>
 8004a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a02:	3301      	adds	r3, #1
 8004a04:	931d      	str	r3, [sp, #116]	; 0x74
 8004a06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004c34 <_strtod_l+0x5ac>
 8004a0a:	f04f 0a00 	mov.w	sl, #0
 8004a0e:	e67d      	b.n	800470c <_strtod_l+0x84>
 8004a10:	4885      	ldr	r0, [pc, #532]	; (8004c28 <_strtod_l+0x5a0>)
 8004a12:	f002 fdb5 	bl	8007580 <nan>
 8004a16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004a1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004a1e:	e675      	b.n	800470c <_strtod_l+0x84>
 8004a20:	9b07      	ldr	r3, [sp, #28]
 8004a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a24:	1af3      	subs	r3, r6, r3
 8004a26:	2f00      	cmp	r7, #0
 8004a28:	bf08      	it	eq
 8004a2a:	462f      	moveq	r7, r5
 8004a2c:	2d10      	cmp	r5, #16
 8004a2e:	9308      	str	r3, [sp, #32]
 8004a30:	46a8      	mov	r8, r5
 8004a32:	bfa8      	it	ge
 8004a34:	f04f 0810 	movge.w	r8, #16
 8004a38:	f7fb fd64 	bl	8000504 <__aeabi_ui2d>
 8004a3c:	2d09      	cmp	r5, #9
 8004a3e:	4682      	mov	sl, r0
 8004a40:	468b      	mov	fp, r1
 8004a42:	dd13      	ble.n	8004a6c <_strtod_l+0x3e4>
 8004a44:	4b79      	ldr	r3, [pc, #484]	; (8004c2c <_strtod_l+0x5a4>)
 8004a46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a4e:	f7fb fdd3 	bl	80005f8 <__aeabi_dmul>
 8004a52:	4682      	mov	sl, r0
 8004a54:	4648      	mov	r0, r9
 8004a56:	468b      	mov	fp, r1
 8004a58:	f7fb fd54 	bl	8000504 <__aeabi_ui2d>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4650      	mov	r0, sl
 8004a62:	4659      	mov	r1, fp
 8004a64:	f7fb fc12 	bl	800028c <__adddf3>
 8004a68:	4682      	mov	sl, r0
 8004a6a:	468b      	mov	fp, r1
 8004a6c:	2d0f      	cmp	r5, #15
 8004a6e:	dc38      	bgt.n	8004ae2 <_strtod_l+0x45a>
 8004a70:	9b08      	ldr	r3, [sp, #32]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f43f ae4a 	beq.w	800470c <_strtod_l+0x84>
 8004a78:	dd24      	ble.n	8004ac4 <_strtod_l+0x43c>
 8004a7a:	2b16      	cmp	r3, #22
 8004a7c:	dc0b      	bgt.n	8004a96 <_strtod_l+0x40e>
 8004a7e:	4d6b      	ldr	r5, [pc, #428]	; (8004c2c <_strtod_l+0x5a4>)
 8004a80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004a84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004a88:	4652      	mov	r2, sl
 8004a8a:	465b      	mov	r3, fp
 8004a8c:	f7fb fdb4 	bl	80005f8 <__aeabi_dmul>
 8004a90:	4682      	mov	sl, r0
 8004a92:	468b      	mov	fp, r1
 8004a94:	e63a      	b.n	800470c <_strtod_l+0x84>
 8004a96:	9a08      	ldr	r2, [sp, #32]
 8004a98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	db20      	blt.n	8004ae2 <_strtod_l+0x45a>
 8004aa0:	4c62      	ldr	r4, [pc, #392]	; (8004c2c <_strtod_l+0x5a4>)
 8004aa2:	f1c5 050f 	rsb	r5, r5, #15
 8004aa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004aaa:	4652      	mov	r2, sl
 8004aac:	465b      	mov	r3, fp
 8004aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab2:	f7fb fda1 	bl	80005f8 <__aeabi_dmul>
 8004ab6:	9b08      	ldr	r3, [sp, #32]
 8004ab8:	1b5d      	subs	r5, r3, r5
 8004aba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004abe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ac2:	e7e3      	b.n	8004a8c <_strtod_l+0x404>
 8004ac4:	9b08      	ldr	r3, [sp, #32]
 8004ac6:	3316      	adds	r3, #22
 8004ac8:	db0b      	blt.n	8004ae2 <_strtod_l+0x45a>
 8004aca:	9b07      	ldr	r3, [sp, #28]
 8004acc:	4a57      	ldr	r2, [pc, #348]	; (8004c2c <_strtod_l+0x5a4>)
 8004ace:	1b9e      	subs	r6, r3, r6
 8004ad0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ad8:	4650      	mov	r0, sl
 8004ada:	4659      	mov	r1, fp
 8004adc:	f7fb feb6 	bl	800084c <__aeabi_ddiv>
 8004ae0:	e7d6      	b.n	8004a90 <_strtod_l+0x408>
 8004ae2:	9b08      	ldr	r3, [sp, #32]
 8004ae4:	eba5 0808 	sub.w	r8, r5, r8
 8004ae8:	4498      	add	r8, r3
 8004aea:	f1b8 0f00 	cmp.w	r8, #0
 8004aee:	dd71      	ble.n	8004bd4 <_strtod_l+0x54c>
 8004af0:	f018 030f 	ands.w	r3, r8, #15
 8004af4:	d00a      	beq.n	8004b0c <_strtod_l+0x484>
 8004af6:	494d      	ldr	r1, [pc, #308]	; (8004c2c <_strtod_l+0x5a4>)
 8004af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004afc:	4652      	mov	r2, sl
 8004afe:	465b      	mov	r3, fp
 8004b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b04:	f7fb fd78 	bl	80005f8 <__aeabi_dmul>
 8004b08:	4682      	mov	sl, r0
 8004b0a:	468b      	mov	fp, r1
 8004b0c:	f038 080f 	bics.w	r8, r8, #15
 8004b10:	d04d      	beq.n	8004bae <_strtod_l+0x526>
 8004b12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b16:	dd22      	ble.n	8004b5e <_strtod_l+0x4d6>
 8004b18:	2500      	movs	r5, #0
 8004b1a:	462e      	mov	r6, r5
 8004b1c:	9509      	str	r5, [sp, #36]	; 0x24
 8004b1e:	9507      	str	r5, [sp, #28]
 8004b20:	2322      	movs	r3, #34	; 0x22
 8004b22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004c34 <_strtod_l+0x5ac>
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f43f adec 	beq.w	800470c <_strtod_l+0x84>
 8004b34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004b36:	4620      	mov	r0, r4
 8004b38:	f001 fe92 	bl	8006860 <_Bfree>
 8004b3c:	9907      	ldr	r1, [sp, #28]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f001 fe8e 	bl	8006860 <_Bfree>
 8004b44:	4631      	mov	r1, r6
 8004b46:	4620      	mov	r0, r4
 8004b48:	f001 fe8a 	bl	8006860 <_Bfree>
 8004b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f001 fe86 	bl	8006860 <_Bfree>
 8004b54:	4629      	mov	r1, r5
 8004b56:	4620      	mov	r0, r4
 8004b58:	f001 fe82 	bl	8006860 <_Bfree>
 8004b5c:	e5d6      	b.n	800470c <_strtod_l+0x84>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004b64:	4650      	mov	r0, sl
 8004b66:	4659      	mov	r1, fp
 8004b68:	4699      	mov	r9, r3
 8004b6a:	f1b8 0f01 	cmp.w	r8, #1
 8004b6e:	dc21      	bgt.n	8004bb4 <_strtod_l+0x52c>
 8004b70:	b10b      	cbz	r3, 8004b76 <_strtod_l+0x4ee>
 8004b72:	4682      	mov	sl, r0
 8004b74:	468b      	mov	fp, r1
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <_strtod_l+0x5a8>)
 8004b78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004b80:	4652      	mov	r2, sl
 8004b82:	465b      	mov	r3, fp
 8004b84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004b88:	f7fb fd36 	bl	80005f8 <__aeabi_dmul>
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <_strtod_l+0x5ac>)
 8004b8e:	460a      	mov	r2, r1
 8004b90:	400b      	ands	r3, r1
 8004b92:	4929      	ldr	r1, [pc, #164]	; (8004c38 <_strtod_l+0x5b0>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	4682      	mov	sl, r0
 8004b98:	d8be      	bhi.n	8004b18 <_strtod_l+0x490>
 8004b9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004b9e:	428b      	cmp	r3, r1
 8004ba0:	bf86      	itte	hi
 8004ba2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004c3c <_strtod_l+0x5b4>
 8004ba6:	f04f 3aff 	movhi.w	sl, #4294967295
 8004baa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	e081      	b.n	8004cb8 <_strtod_l+0x630>
 8004bb4:	f018 0f01 	tst.w	r8, #1
 8004bb8:	d007      	beq.n	8004bca <_strtod_l+0x542>
 8004bba:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <_strtod_l+0x5a8>)
 8004bbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb fd18 	bl	80005f8 <__aeabi_dmul>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f109 0901 	add.w	r9, r9, #1
 8004bce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bd2:	e7ca      	b.n	8004b6a <_strtod_l+0x4e2>
 8004bd4:	d0eb      	beq.n	8004bae <_strtod_l+0x526>
 8004bd6:	f1c8 0800 	rsb	r8, r8, #0
 8004bda:	f018 020f 	ands.w	r2, r8, #15
 8004bde:	d00a      	beq.n	8004bf6 <_strtod_l+0x56e>
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <_strtod_l+0x5a4>)
 8004be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be6:	4650      	mov	r0, sl
 8004be8:	4659      	mov	r1, fp
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fe2d 	bl	800084c <__aeabi_ddiv>
 8004bf2:	4682      	mov	sl, r0
 8004bf4:	468b      	mov	fp, r1
 8004bf6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004bfa:	d0d8      	beq.n	8004bae <_strtod_l+0x526>
 8004bfc:	f1b8 0f1f 	cmp.w	r8, #31
 8004c00:	dd1e      	ble.n	8004c40 <_strtod_l+0x5b8>
 8004c02:	2500      	movs	r5, #0
 8004c04:	462e      	mov	r6, r5
 8004c06:	9509      	str	r5, [sp, #36]	; 0x24
 8004c08:	9507      	str	r5, [sp, #28]
 8004c0a:	2322      	movs	r3, #34	; 0x22
 8004c0c:	f04f 0a00 	mov.w	sl, #0
 8004c10:	f04f 0b00 	mov.w	fp, #0
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	e789      	b.n	8004b2c <_strtod_l+0x4a4>
 8004c18:	08008229 	.word	0x08008229
 8004c1c:	0800826c 	.word	0x0800826c
 8004c20:	08008221 	.word	0x08008221
 8004c24:	080083ac 	.word	0x080083ac
 8004c28:	08008668 	.word	0x08008668
 8004c2c:	08008548 	.word	0x08008548
 8004c30:	08008520 	.word	0x08008520
 8004c34:	7ff00000 	.word	0x7ff00000
 8004c38:	7ca00000 	.word	0x7ca00000
 8004c3c:	7fefffff 	.word	0x7fefffff
 8004c40:	f018 0310 	ands.w	r3, r8, #16
 8004c44:	bf18      	it	ne
 8004c46:	236a      	movne	r3, #106	; 0x6a
 8004c48:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005000 <_strtod_l+0x978>
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	4650      	mov	r0, sl
 8004c50:	4659      	mov	r1, fp
 8004c52:	2300      	movs	r3, #0
 8004c54:	f018 0f01 	tst.w	r8, #1
 8004c58:	d004      	beq.n	8004c64 <_strtod_l+0x5dc>
 8004c5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004c5e:	f7fb fccb 	bl	80005f8 <__aeabi_dmul>
 8004c62:	2301      	movs	r3, #1
 8004c64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004c68:	f109 0908 	add.w	r9, r9, #8
 8004c6c:	d1f2      	bne.n	8004c54 <_strtod_l+0x5cc>
 8004c6e:	b10b      	cbz	r3, 8004c74 <_strtod_l+0x5ec>
 8004c70:	4682      	mov	sl, r0
 8004c72:	468b      	mov	fp, r1
 8004c74:	9b04      	ldr	r3, [sp, #16]
 8004c76:	b1bb      	cbz	r3, 8004ca8 <_strtod_l+0x620>
 8004c78:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004c7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	4659      	mov	r1, fp
 8004c84:	dd10      	ble.n	8004ca8 <_strtod_l+0x620>
 8004c86:	2b1f      	cmp	r3, #31
 8004c88:	f340 8128 	ble.w	8004edc <_strtod_l+0x854>
 8004c8c:	2b34      	cmp	r3, #52	; 0x34
 8004c8e:	bfde      	ittt	le
 8004c90:	3b20      	suble	r3, #32
 8004c92:	f04f 32ff 	movle.w	r2, #4294967295
 8004c96:	fa02 f303 	lslle.w	r3, r2, r3
 8004c9a:	f04f 0a00 	mov.w	sl, #0
 8004c9e:	bfcc      	ite	gt
 8004ca0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ca4:	ea03 0b01 	andle.w	fp, r3, r1
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2300      	movs	r3, #0
 8004cac:	4650      	mov	r0, sl
 8004cae:	4659      	mov	r1, fp
 8004cb0:	f7fb ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1a4      	bne.n	8004c02 <_strtod_l+0x57a>
 8004cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	463a      	mov	r2, r7
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f001 fe38 	bl	8006938 <__s2b>
 8004cc8:	9009      	str	r0, [sp, #36]	; 0x24
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f43f af24 	beq.w	8004b18 <_strtod_l+0x490>
 8004cd0:	9b07      	ldr	r3, [sp, #28]
 8004cd2:	1b9e      	subs	r6, r3, r6
 8004cd4:	9b08      	ldr	r3, [sp, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfb4      	ite	lt
 8004cda:	4633      	movlt	r3, r6
 8004cdc:	2300      	movge	r3, #0
 8004cde:	9310      	str	r3, [sp, #64]	; 0x40
 8004ce0:	9b08      	ldr	r3, [sp, #32]
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8004cea:	462e      	mov	r6, r5
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	4620      	mov	r0, r4
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	f001 fd75 	bl	80067e0 <_Balloc>
 8004cf6:	9007      	str	r0, [sp, #28]
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	f43f af11 	beq.w	8004b20 <_strtod_l+0x498>
 8004cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	3202      	adds	r2, #2
 8004d04:	f103 010c 	add.w	r1, r3, #12
 8004d08:	0092      	lsls	r2, r2, #2
 8004d0a:	300c      	adds	r0, #12
 8004d0c:	f001 fd5a 	bl	80067c4 <memcpy>
 8004d10:	ec4b ab10 	vmov	d0, sl, fp
 8004d14:	aa20      	add	r2, sp, #128	; 0x80
 8004d16:	a91f      	add	r1, sp, #124	; 0x7c
 8004d18:	4620      	mov	r0, r4
 8004d1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004d1e:	f002 f947 	bl	8006fb0 <__d2b>
 8004d22:	901e      	str	r0, [sp, #120]	; 0x78
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f43f aefb 	beq.w	8004b20 <_strtod_l+0x498>
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f001 fe9d 	bl	8006a6c <__i2b>
 8004d32:	4606      	mov	r6, r0
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f43f aef3 	beq.w	8004b20 <_strtod_l+0x498>
 8004d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d3c:	9904      	ldr	r1, [sp, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfab      	itete	ge
 8004d42:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004d44:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004d46:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004d48:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004d4c:	bfac      	ite	ge
 8004d4e:	eb03 0902 	addge.w	r9, r3, r2
 8004d52:	1ad7      	sublt	r7, r2, r3
 8004d54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d56:	eba3 0801 	sub.w	r8, r3, r1
 8004d5a:	4490      	add	r8, r2
 8004d5c:	4ba3      	ldr	r3, [pc, #652]	; (8004fec <_strtod_l+0x964>)
 8004d5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d62:	4598      	cmp	r8, r3
 8004d64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d68:	f280 80cc 	bge.w	8004f04 <_strtod_l+0x87c>
 8004d6c:	eba3 0308 	sub.w	r3, r3, r8
 8004d70:	2b1f      	cmp	r3, #31
 8004d72:	eba2 0203 	sub.w	r2, r2, r3
 8004d76:	f04f 0101 	mov.w	r1, #1
 8004d7a:	f300 80b6 	bgt.w	8004eea <_strtod_l+0x862>
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	9311      	str	r3, [sp, #68]	; 0x44
 8004d84:	2300      	movs	r3, #0
 8004d86:	930c      	str	r3, [sp, #48]	; 0x30
 8004d88:	eb09 0802 	add.w	r8, r9, r2
 8004d8c:	9b04      	ldr	r3, [sp, #16]
 8004d8e:	45c1      	cmp	r9, r8
 8004d90:	4417      	add	r7, r2
 8004d92:	441f      	add	r7, r3
 8004d94:	464b      	mov	r3, r9
 8004d96:	bfa8      	it	ge
 8004d98:	4643      	movge	r3, r8
 8004d9a:	42bb      	cmp	r3, r7
 8004d9c:	bfa8      	it	ge
 8004d9e:	463b      	movge	r3, r7
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfc2      	ittt	gt
 8004da4:	eba8 0803 	subgt.w	r8, r8, r3
 8004da8:	1aff      	subgt	r7, r7, r3
 8004daa:	eba9 0903 	subgt.w	r9, r9, r3
 8004dae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	dd17      	ble.n	8004de4 <_strtod_l+0x75c>
 8004db4:	4631      	mov	r1, r6
 8004db6:	461a      	mov	r2, r3
 8004db8:	4620      	mov	r0, r4
 8004dba:	f001 ff13 	bl	8006be4 <__pow5mult>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f43f aead 	beq.w	8004b20 <_strtod_l+0x498>
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f001 fe64 	bl	8006a98 <__multiply>
 8004dd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f43f aea4 	beq.w	8004b20 <_strtod_l+0x498>
 8004dd8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f001 fd40 	bl	8006860 <_Bfree>
 8004de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004de2:	931e      	str	r3, [sp, #120]	; 0x78
 8004de4:	f1b8 0f00 	cmp.w	r8, #0
 8004de8:	f300 8091 	bgt.w	8004f0e <_strtod_l+0x886>
 8004dec:	9b08      	ldr	r3, [sp, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd08      	ble.n	8004e04 <_strtod_l+0x77c>
 8004df2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004df4:	9907      	ldr	r1, [sp, #28]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f001 fef4 	bl	8006be4 <__pow5mult>
 8004dfc:	9007      	str	r0, [sp, #28]
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	f43f ae8e 	beq.w	8004b20 <_strtod_l+0x498>
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	dd08      	ble.n	8004e1a <_strtod_l+0x792>
 8004e08:	9907      	ldr	r1, [sp, #28]
 8004e0a:	463a      	mov	r2, r7
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f001 ff43 	bl	8006c98 <__lshift>
 8004e12:	9007      	str	r0, [sp, #28]
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f43f ae83 	beq.w	8004b20 <_strtod_l+0x498>
 8004e1a:	f1b9 0f00 	cmp.w	r9, #0
 8004e1e:	dd08      	ble.n	8004e32 <_strtod_l+0x7aa>
 8004e20:	4631      	mov	r1, r6
 8004e22:	464a      	mov	r2, r9
 8004e24:	4620      	mov	r0, r4
 8004e26:	f001 ff37 	bl	8006c98 <__lshift>
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f43f ae77 	beq.w	8004b20 <_strtod_l+0x498>
 8004e32:	9a07      	ldr	r2, [sp, #28]
 8004e34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e36:	4620      	mov	r0, r4
 8004e38:	f001 ffb6 	bl	8006da8 <__mdiff>
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f43f ae6e 	beq.w	8004b20 <_strtod_l+0x498>
 8004e44:	68c3      	ldr	r3, [r0, #12]
 8004e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60c3      	str	r3, [r0, #12]
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	f001 ff8f 	bl	8006d70 <__mcmp>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	da65      	bge.n	8004f22 <_strtod_l+0x89a>
 8004e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e58:	ea53 030a 	orrs.w	r3, r3, sl
 8004e5c:	f040 8087 	bne.w	8004f6e <_strtod_l+0x8e6>
 8004e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 8082 	bne.w	8004f6e <_strtod_l+0x8e6>
 8004e6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e6e:	0d1b      	lsrs	r3, r3, #20
 8004e70:	051b      	lsls	r3, r3, #20
 8004e72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e76:	d97a      	bls.n	8004f6e <_strtod_l+0x8e6>
 8004e78:	696b      	ldr	r3, [r5, #20]
 8004e7a:	b913      	cbnz	r3, 8004e82 <_strtod_l+0x7fa>
 8004e7c:	692b      	ldr	r3, [r5, #16]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	dd75      	ble.n	8004f6e <_strtod_l+0x8e6>
 8004e82:	4629      	mov	r1, r5
 8004e84:	2201      	movs	r2, #1
 8004e86:	4620      	mov	r0, r4
 8004e88:	f001 ff06 	bl	8006c98 <__lshift>
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4605      	mov	r5, r0
 8004e90:	f001 ff6e 	bl	8006d70 <__mcmp>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	dd6a      	ble.n	8004f6e <_strtod_l+0x8e6>
 8004e98:	9904      	ldr	r1, [sp, #16]
 8004e9a:	4a55      	ldr	r2, [pc, #340]	; (8004ff0 <_strtod_l+0x968>)
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	f000 8085 	beq.w	8004fae <_strtod_l+0x926>
 8004ea4:	ea02 010b 	and.w	r1, r2, fp
 8004ea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004eac:	dc7f      	bgt.n	8004fae <_strtod_l+0x926>
 8004eae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004eb2:	f77f aeaa 	ble.w	8004c0a <_strtod_l+0x582>
 8004eb6:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <_strtod_l+0x96c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004ebe:	4650      	mov	r0, sl
 8004ec0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f7fb fb97 	bl	80005f8 <__aeabi_dmul>
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	bf08      	it	eq
 8004ed0:	2322      	moveq	r3, #34	; 0x22
 8004ed2:	4682      	mov	sl, r0
 8004ed4:	468b      	mov	fp, r1
 8004ed6:	bf08      	it	eq
 8004ed8:	6023      	streq	r3, [r4, #0]
 8004eda:	e62b      	b.n	8004b34 <_strtod_l+0x4ac>
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8004ee8:	e6de      	b.n	8004ca8 <_strtod_l+0x620>
 8004eea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004eee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004ef2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004ef6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004efa:	fa01 f308 	lsl.w	r3, r1, r8
 8004efe:	930c      	str	r3, [sp, #48]	; 0x30
 8004f00:	9111      	str	r1, [sp, #68]	; 0x44
 8004f02:	e741      	b.n	8004d88 <_strtod_l+0x700>
 8004f04:	2300      	movs	r3, #0
 8004f06:	930c      	str	r3, [sp, #48]	; 0x30
 8004f08:	2301      	movs	r3, #1
 8004f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f0c:	e73c      	b.n	8004d88 <_strtod_l+0x700>
 8004f0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f10:	4642      	mov	r2, r8
 8004f12:	4620      	mov	r0, r4
 8004f14:	f001 fec0 	bl	8006c98 <__lshift>
 8004f18:	901e      	str	r0, [sp, #120]	; 0x78
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f47f af66 	bne.w	8004dec <_strtod_l+0x764>
 8004f20:	e5fe      	b.n	8004b20 <_strtod_l+0x498>
 8004f22:	465f      	mov	r7, fp
 8004f24:	d16e      	bne.n	8005004 <_strtod_l+0x97c>
 8004f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f2c:	b342      	cbz	r2, 8004f80 <_strtod_l+0x8f8>
 8004f2e:	4a32      	ldr	r2, [pc, #200]	; (8004ff8 <_strtod_l+0x970>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d128      	bne.n	8004f86 <_strtod_l+0x8fe>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	4650      	mov	r0, sl
 8004f38:	b1eb      	cbz	r3, 8004f76 <_strtod_l+0x8ee>
 8004f3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ff0 <_strtod_l+0x968>)
 8004f3c:	403a      	ands	r2, r7
 8004f3e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004f42:	f04f 31ff 	mov.w	r1, #4294967295
 8004f46:	d819      	bhi.n	8004f7c <_strtod_l+0x8f4>
 8004f48:	0d12      	lsrs	r2, r2, #20
 8004f4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	4298      	cmp	r0, r3
 8004f54:	d117      	bne.n	8004f86 <_strtod_l+0x8fe>
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <_strtod_l+0x974>)
 8004f58:	429f      	cmp	r7, r3
 8004f5a:	d102      	bne.n	8004f62 <_strtod_l+0x8da>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f addf 	beq.w	8004b20 <_strtod_l+0x498>
 8004f62:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <_strtod_l+0x968>)
 8004f64:	403b      	ands	r3, r7
 8004f66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f6a:	f04f 0a00 	mov.w	sl, #0
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1a0      	bne.n	8004eb6 <_strtod_l+0x82e>
 8004f74:	e5de      	b.n	8004b34 <_strtod_l+0x4ac>
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7a:	e7ea      	b.n	8004f52 <_strtod_l+0x8ca>
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	e7e8      	b.n	8004f52 <_strtod_l+0x8ca>
 8004f80:	ea53 030a 	orrs.w	r3, r3, sl
 8004f84:	d088      	beq.n	8004e98 <_strtod_l+0x810>
 8004f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f88:	b1db      	cbz	r3, 8004fc2 <_strtod_l+0x93a>
 8004f8a:	423b      	tst	r3, r7
 8004f8c:	d0ef      	beq.n	8004f6e <_strtod_l+0x8e6>
 8004f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f90:	9a04      	ldr	r2, [sp, #16]
 8004f92:	4650      	mov	r0, sl
 8004f94:	4659      	mov	r1, fp
 8004f96:	b1c3      	cbz	r3, 8004fca <_strtod_l+0x942>
 8004f98:	f7ff fb5a 	bl	8004650 <sulp>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fa4:	f7fb f972 	bl	800028c <__adddf3>
 8004fa8:	4682      	mov	sl, r0
 8004faa:	468b      	mov	fp, r1
 8004fac:	e7df      	b.n	8004f6e <_strtod_l+0x8e6>
 8004fae:	4013      	ands	r3, r2
 8004fb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004fb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8004fc0:	e7d5      	b.n	8004f6e <_strtod_l+0x8e6>
 8004fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fc4:	ea13 0f0a 	tst.w	r3, sl
 8004fc8:	e7e0      	b.n	8004f8c <_strtod_l+0x904>
 8004fca:	f7ff fb41 	bl	8004650 <sulp>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fd6:	f7fb f957 	bl	8000288 <__aeabi_dsub>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4682      	mov	sl, r0
 8004fe0:	468b      	mov	fp, r1
 8004fe2:	f7fb fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d0c1      	beq.n	8004f6e <_strtod_l+0x8e6>
 8004fea:	e60e      	b.n	8004c0a <_strtod_l+0x582>
 8004fec:	fffffc02 	.word	0xfffffc02
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	39500000 	.word	0x39500000
 8004ff8:	000fffff 	.word	0x000fffff
 8004ffc:	7fefffff 	.word	0x7fefffff
 8005000:	08008280 	.word	0x08008280
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	f002 f82e 	bl	8007068 <__ratio>
 800500c:	ec59 8b10 	vmov	r8, r9, d0
 8005010:	ee10 0a10 	vmov	r0, s0
 8005014:	2200      	movs	r2, #0
 8005016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb fd68 	bl	8000af0 <__aeabi_dcmple>
 8005020:	2800      	cmp	r0, #0
 8005022:	d07c      	beq.n	800511e <_strtod_l+0xa96>
 8005024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04c      	beq.n	80050c4 <_strtod_l+0xa3c>
 800502a:	4b95      	ldr	r3, [pc, #596]	; (8005280 <_strtod_l+0xbf8>)
 800502c:	2200      	movs	r2, #0
 800502e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005032:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005280 <_strtod_l+0xbf8>
 8005036:	f04f 0800 	mov.w	r8, #0
 800503a:	4b92      	ldr	r3, [pc, #584]	; (8005284 <_strtod_l+0xbfc>)
 800503c:	403b      	ands	r3, r7
 800503e:	9311      	str	r3, [sp, #68]	; 0x44
 8005040:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005042:	4b91      	ldr	r3, [pc, #580]	; (8005288 <_strtod_l+0xc00>)
 8005044:	429a      	cmp	r2, r3
 8005046:	f040 80b2 	bne.w	80051ae <_strtod_l+0xb26>
 800504a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800504e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005052:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005056:	ec4b ab10 	vmov	d0, sl, fp
 800505a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800505e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005062:	f001 ff29 	bl	8006eb8 <__ulp>
 8005066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800506a:	ec53 2b10 	vmov	r2, r3, d0
 800506e:	f7fb fac3 	bl	80005f8 <__aeabi_dmul>
 8005072:	4652      	mov	r2, sl
 8005074:	465b      	mov	r3, fp
 8005076:	f7fb f909 	bl	800028c <__adddf3>
 800507a:	460b      	mov	r3, r1
 800507c:	4981      	ldr	r1, [pc, #516]	; (8005284 <_strtod_l+0xbfc>)
 800507e:	4a83      	ldr	r2, [pc, #524]	; (800528c <_strtod_l+0xc04>)
 8005080:	4019      	ands	r1, r3
 8005082:	4291      	cmp	r1, r2
 8005084:	4682      	mov	sl, r0
 8005086:	d95e      	bls.n	8005146 <_strtod_l+0xabe>
 8005088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800508e:	4293      	cmp	r3, r2
 8005090:	d103      	bne.n	800509a <_strtod_l+0xa12>
 8005092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005094:	3301      	adds	r3, #1
 8005096:	f43f ad43 	beq.w	8004b20 <_strtod_l+0x498>
 800509a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005298 <_strtod_l+0xc10>
 800509e:	f04f 3aff 	mov.w	sl, #4294967295
 80050a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80050a4:	4620      	mov	r0, r4
 80050a6:	f001 fbdb 	bl	8006860 <_Bfree>
 80050aa:	9907      	ldr	r1, [sp, #28]
 80050ac:	4620      	mov	r0, r4
 80050ae:	f001 fbd7 	bl	8006860 <_Bfree>
 80050b2:	4631      	mov	r1, r6
 80050b4:	4620      	mov	r0, r4
 80050b6:	f001 fbd3 	bl	8006860 <_Bfree>
 80050ba:	4629      	mov	r1, r5
 80050bc:	4620      	mov	r0, r4
 80050be:	f001 fbcf 	bl	8006860 <_Bfree>
 80050c2:	e613      	b.n	8004cec <_strtod_l+0x664>
 80050c4:	f1ba 0f00 	cmp.w	sl, #0
 80050c8:	d11b      	bne.n	8005102 <_strtod_l+0xa7a>
 80050ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050ce:	b9f3      	cbnz	r3, 800510e <_strtod_l+0xa86>
 80050d0:	4b6b      	ldr	r3, [pc, #428]	; (8005280 <_strtod_l+0xbf8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb fd00 	bl	8000adc <__aeabi_dcmplt>
 80050dc:	b9d0      	cbnz	r0, 8005114 <_strtod_l+0xa8c>
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	4b6b      	ldr	r3, [pc, #428]	; (8005290 <_strtod_l+0xc08>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	f7fb fa87 	bl	80005f8 <__aeabi_dmul>
 80050ea:	4680      	mov	r8, r0
 80050ec:	4689      	mov	r9, r1
 80050ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80050f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80050f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80050f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80050fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005100:	e79b      	b.n	800503a <_strtod_l+0x9b2>
 8005102:	f1ba 0f01 	cmp.w	sl, #1
 8005106:	d102      	bne.n	800510e <_strtod_l+0xa86>
 8005108:	2f00      	cmp	r7, #0
 800510a:	f43f ad7e 	beq.w	8004c0a <_strtod_l+0x582>
 800510e:	4b61      	ldr	r3, [pc, #388]	; (8005294 <_strtod_l+0xc0c>)
 8005110:	2200      	movs	r2, #0
 8005112:	e78c      	b.n	800502e <_strtod_l+0x9a6>
 8005114:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005290 <_strtod_l+0xc08>
 8005118:	f04f 0800 	mov.w	r8, #0
 800511c:	e7e7      	b.n	80050ee <_strtod_l+0xa66>
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <_strtod_l+0xc08>)
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	2200      	movs	r2, #0
 8005126:	f7fb fa67 	bl	80005f8 <__aeabi_dmul>
 800512a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800512c:	4680      	mov	r8, r0
 800512e:	4689      	mov	r9, r1
 8005130:	b933      	cbnz	r3, 8005140 <_strtod_l+0xab8>
 8005132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005136:	9012      	str	r0, [sp, #72]	; 0x48
 8005138:	9313      	str	r3, [sp, #76]	; 0x4c
 800513a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800513e:	e7dd      	b.n	80050fc <_strtod_l+0xa74>
 8005140:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005144:	e7f9      	b.n	800513a <_strtod_l+0xab2>
 8005146:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1a8      	bne.n	80050a2 <_strtod_l+0xa1a>
 8005150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005154:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	429a      	cmp	r2, r3
 800515c:	d1a1      	bne.n	80050a2 <_strtod_l+0xa1a>
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb fda9 	bl	8000cb8 <__aeabi_d2lz>
 8005166:	f7fb fa19 	bl	800059c <__aeabi_l2d>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb f889 	bl	8000288 <__aeabi_dsub>
 8005176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800517c:	ea43 030a 	orr.w	r3, r3, sl
 8005180:	4313      	orrs	r3, r2
 8005182:	4680      	mov	r8, r0
 8005184:	4689      	mov	r9, r1
 8005186:	d053      	beq.n	8005230 <_strtod_l+0xba8>
 8005188:	a335      	add	r3, pc, #212	; (adr r3, 8005260 <_strtod_l+0xbd8>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fca5 	bl	8000adc <__aeabi_dcmplt>
 8005192:	2800      	cmp	r0, #0
 8005194:	f47f acce 	bne.w	8004b34 <_strtod_l+0x4ac>
 8005198:	a333      	add	r3, pc, #204	; (adr r3, 8005268 <_strtod_l+0xbe0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f af7b 	beq.w	80050a2 <_strtod_l+0xa1a>
 80051ac:	e4c2      	b.n	8004b34 <_strtod_l+0x4ac>
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	b333      	cbz	r3, 8005200 <_strtod_l+0xb78>
 80051b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051b8:	d822      	bhi.n	8005200 <_strtod_l+0xb78>
 80051ba:	a32d      	add	r3, pc, #180	; (adr r3, 8005270 <_strtod_l+0xbe8>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	4640      	mov	r0, r8
 80051c2:	4649      	mov	r1, r9
 80051c4:	f7fb fc94 	bl	8000af0 <__aeabi_dcmple>
 80051c8:	b1a0      	cbz	r0, 80051f4 <_strtod_l+0xb6c>
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	f7fb fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80051d2:	2801      	cmp	r0, #1
 80051d4:	bf38      	it	cc
 80051d6:	2001      	movcc	r0, #1
 80051d8:	f7fb f994 	bl	8000504 <__aeabi_ui2d>
 80051dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051de:	4680      	mov	r8, r0
 80051e0:	4689      	mov	r9, r1
 80051e2:	bb13      	cbnz	r3, 800522a <_strtod_l+0xba2>
 80051e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051e8:	9014      	str	r0, [sp, #80]	; 0x50
 80051ea:	9315      	str	r3, [sp, #84]	; 0x54
 80051ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80051f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80051f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	930d      	str	r3, [sp, #52]	; 0x34
 8005200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005204:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800520c:	f001 fe54 	bl	8006eb8 <__ulp>
 8005210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005214:	ec53 2b10 	vmov	r2, r3, d0
 8005218:	f7fb f9ee 	bl	80005f8 <__aeabi_dmul>
 800521c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005220:	f7fb f834 	bl	800028c <__adddf3>
 8005224:	4682      	mov	sl, r0
 8005226:	468b      	mov	fp, r1
 8005228:	e78f      	b.n	800514a <_strtod_l+0xac2>
 800522a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800522e:	e7dd      	b.n	80051ec <_strtod_l+0xb64>
 8005230:	a311      	add	r3, pc, #68	; (adr r3, 8005278 <_strtod_l+0xbf0>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f7fb fc51 	bl	8000adc <__aeabi_dcmplt>
 800523a:	e7b4      	b.n	80051a6 <_strtod_l+0xb1e>
 800523c:	2300      	movs	r3, #0
 800523e:	930e      	str	r3, [sp, #56]	; 0x38
 8005240:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	f7ff ba65 	b.w	8004714 <_strtod_l+0x8c>
 800524a:	2b65      	cmp	r3, #101	; 0x65
 800524c:	f43f ab5d 	beq.w	800490a <_strtod_l+0x282>
 8005250:	2b45      	cmp	r3, #69	; 0x45
 8005252:	f43f ab5a 	beq.w	800490a <_strtod_l+0x282>
 8005256:	2201      	movs	r2, #1
 8005258:	f7ff bb92 	b.w	8004980 <_strtod_l+0x2f8>
 800525c:	f3af 8000 	nop.w
 8005260:	94a03595 	.word	0x94a03595
 8005264:	3fdfffff 	.word	0x3fdfffff
 8005268:	35afe535 	.word	0x35afe535
 800526c:	3fe00000 	.word	0x3fe00000
 8005270:	ffc00000 	.word	0xffc00000
 8005274:	41dfffff 	.word	0x41dfffff
 8005278:	94a03595 	.word	0x94a03595
 800527c:	3fcfffff 	.word	0x3fcfffff
 8005280:	3ff00000 	.word	0x3ff00000
 8005284:	7ff00000 	.word	0x7ff00000
 8005288:	7fe00000 	.word	0x7fe00000
 800528c:	7c9fffff 	.word	0x7c9fffff
 8005290:	3fe00000 	.word	0x3fe00000
 8005294:	bff00000 	.word	0xbff00000
 8005298:	7fefffff 	.word	0x7fefffff

0800529c <_strtod_r>:
 800529c:	4b01      	ldr	r3, [pc, #4]	; (80052a4 <_strtod_r+0x8>)
 800529e:	f7ff b9f3 	b.w	8004688 <_strtod_l>
 80052a2:	bf00      	nop
 80052a4:	20000148 	.word	0x20000148

080052a8 <_strtol_l.isra.0>:
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ae:	d001      	beq.n	80052b4 <_strtol_l.isra.0+0xc>
 80052b0:	2b24      	cmp	r3, #36	; 0x24
 80052b2:	d906      	bls.n	80052c2 <_strtol_l.isra.0+0x1a>
 80052b4:	f7fe fafa 	bl	80038ac <__errno>
 80052b8:	2316      	movs	r3, #22
 80052ba:	6003      	str	r3, [r0, #0]
 80052bc:	2000      	movs	r0, #0
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c2:	4f3a      	ldr	r7, [pc, #232]	; (80053ac <_strtol_l.isra.0+0x104>)
 80052c4:	468e      	mov	lr, r1
 80052c6:	4676      	mov	r6, lr
 80052c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80052cc:	5de5      	ldrb	r5, [r4, r7]
 80052ce:	f015 0508 	ands.w	r5, r5, #8
 80052d2:	d1f8      	bne.n	80052c6 <_strtol_l.isra.0+0x1e>
 80052d4:	2c2d      	cmp	r4, #45	; 0x2d
 80052d6:	d134      	bne.n	8005342 <_strtol_l.isra.0+0x9a>
 80052d8:	f89e 4000 	ldrb.w	r4, [lr]
 80052dc:	f04f 0801 	mov.w	r8, #1
 80052e0:	f106 0e02 	add.w	lr, r6, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05c      	beq.n	80053a2 <_strtol_l.isra.0+0xfa>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d10c      	bne.n	8005306 <_strtol_l.isra.0+0x5e>
 80052ec:	2c30      	cmp	r4, #48	; 0x30
 80052ee:	d10a      	bne.n	8005306 <_strtol_l.isra.0+0x5e>
 80052f0:	f89e 4000 	ldrb.w	r4, [lr]
 80052f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052f8:	2c58      	cmp	r4, #88	; 0x58
 80052fa:	d14d      	bne.n	8005398 <_strtol_l.isra.0+0xf0>
 80052fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005300:	2310      	movs	r3, #16
 8005302:	f10e 0e02 	add.w	lr, lr, #2
 8005306:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800530a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800530e:	2600      	movs	r6, #0
 8005310:	fbbc f9f3 	udiv	r9, ip, r3
 8005314:	4635      	mov	r5, r6
 8005316:	fb03 ca19 	mls	sl, r3, r9, ip
 800531a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800531e:	2f09      	cmp	r7, #9
 8005320:	d818      	bhi.n	8005354 <_strtol_l.isra.0+0xac>
 8005322:	463c      	mov	r4, r7
 8005324:	42a3      	cmp	r3, r4
 8005326:	dd24      	ble.n	8005372 <_strtol_l.isra.0+0xca>
 8005328:	2e00      	cmp	r6, #0
 800532a:	db1f      	blt.n	800536c <_strtol_l.isra.0+0xc4>
 800532c:	45a9      	cmp	r9, r5
 800532e:	d31d      	bcc.n	800536c <_strtol_l.isra.0+0xc4>
 8005330:	d101      	bne.n	8005336 <_strtol_l.isra.0+0x8e>
 8005332:	45a2      	cmp	sl, r4
 8005334:	db1a      	blt.n	800536c <_strtol_l.isra.0+0xc4>
 8005336:	fb05 4503 	mla	r5, r5, r3, r4
 800533a:	2601      	movs	r6, #1
 800533c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005340:	e7eb      	b.n	800531a <_strtol_l.isra.0+0x72>
 8005342:	2c2b      	cmp	r4, #43	; 0x2b
 8005344:	bf08      	it	eq
 8005346:	f89e 4000 	ldrbeq.w	r4, [lr]
 800534a:	46a8      	mov	r8, r5
 800534c:	bf08      	it	eq
 800534e:	f106 0e02 	addeq.w	lr, r6, #2
 8005352:	e7c7      	b.n	80052e4 <_strtol_l.isra.0+0x3c>
 8005354:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005358:	2f19      	cmp	r7, #25
 800535a:	d801      	bhi.n	8005360 <_strtol_l.isra.0+0xb8>
 800535c:	3c37      	subs	r4, #55	; 0x37
 800535e:	e7e1      	b.n	8005324 <_strtol_l.isra.0+0x7c>
 8005360:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005364:	2f19      	cmp	r7, #25
 8005366:	d804      	bhi.n	8005372 <_strtol_l.isra.0+0xca>
 8005368:	3c57      	subs	r4, #87	; 0x57
 800536a:	e7db      	b.n	8005324 <_strtol_l.isra.0+0x7c>
 800536c:	f04f 36ff 	mov.w	r6, #4294967295
 8005370:	e7e4      	b.n	800533c <_strtol_l.isra.0+0x94>
 8005372:	2e00      	cmp	r6, #0
 8005374:	da05      	bge.n	8005382 <_strtol_l.isra.0+0xda>
 8005376:	2322      	movs	r3, #34	; 0x22
 8005378:	6003      	str	r3, [r0, #0]
 800537a:	4665      	mov	r5, ip
 800537c:	b942      	cbnz	r2, 8005390 <_strtol_l.isra.0+0xe8>
 800537e:	4628      	mov	r0, r5
 8005380:	e79d      	b.n	80052be <_strtol_l.isra.0+0x16>
 8005382:	f1b8 0f00 	cmp.w	r8, #0
 8005386:	d000      	beq.n	800538a <_strtol_l.isra.0+0xe2>
 8005388:	426d      	negs	r5, r5
 800538a:	2a00      	cmp	r2, #0
 800538c:	d0f7      	beq.n	800537e <_strtol_l.isra.0+0xd6>
 800538e:	b10e      	cbz	r6, 8005394 <_strtol_l.isra.0+0xec>
 8005390:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	e7f2      	b.n	800537e <_strtol_l.isra.0+0xd6>
 8005398:	2430      	movs	r4, #48	; 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1b3      	bne.n	8005306 <_strtol_l.isra.0+0x5e>
 800539e:	2308      	movs	r3, #8
 80053a0:	e7b1      	b.n	8005306 <_strtol_l.isra.0+0x5e>
 80053a2:	2c30      	cmp	r4, #48	; 0x30
 80053a4:	d0a4      	beq.n	80052f0 <_strtol_l.isra.0+0x48>
 80053a6:	230a      	movs	r3, #10
 80053a8:	e7ad      	b.n	8005306 <_strtol_l.isra.0+0x5e>
 80053aa:	bf00      	nop
 80053ac:	080082a9 	.word	0x080082a9

080053b0 <_strtol_r>:
 80053b0:	f7ff bf7a 	b.w	80052a8 <_strtol_l.isra.0>

080053b4 <quorem>:
 80053b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	6903      	ldr	r3, [r0, #16]
 80053ba:	690c      	ldr	r4, [r1, #16]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	4607      	mov	r7, r0
 80053c0:	f2c0 8081 	blt.w	80054c6 <quorem+0x112>
 80053c4:	3c01      	subs	r4, #1
 80053c6:	f101 0814 	add.w	r8, r1, #20
 80053ca:	f100 0514 	add.w	r5, r0, #20
 80053ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053dc:	3301      	adds	r3, #1
 80053de:	429a      	cmp	r2, r3
 80053e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80053ec:	d331      	bcc.n	8005452 <quorem+0x9e>
 80053ee:	f04f 0e00 	mov.w	lr, #0
 80053f2:	4640      	mov	r0, r8
 80053f4:	46ac      	mov	ip, r5
 80053f6:	46f2      	mov	sl, lr
 80053f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80053fc:	b293      	uxth	r3, r2
 80053fe:	fb06 e303 	mla	r3, r6, r3, lr
 8005402:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005406:	b29b      	uxth	r3, r3
 8005408:	ebaa 0303 	sub.w	r3, sl, r3
 800540c:	0c12      	lsrs	r2, r2, #16
 800540e:	f8dc a000 	ldr.w	sl, [ip]
 8005412:	fb06 e202 	mla	r2, r6, r2, lr
 8005416:	fa13 f38a 	uxtah	r3, r3, sl
 800541a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800541e:	fa1f fa82 	uxth.w	sl, r2
 8005422:	f8dc 2000 	ldr.w	r2, [ip]
 8005426:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800542a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800542e:	b29b      	uxth	r3, r3
 8005430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005434:	4581      	cmp	r9, r0
 8005436:	f84c 3b04 	str.w	r3, [ip], #4
 800543a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800543e:	d2db      	bcs.n	80053f8 <quorem+0x44>
 8005440:	f855 300b 	ldr.w	r3, [r5, fp]
 8005444:	b92b      	cbnz	r3, 8005452 <quorem+0x9e>
 8005446:	9b01      	ldr	r3, [sp, #4]
 8005448:	3b04      	subs	r3, #4
 800544a:	429d      	cmp	r5, r3
 800544c:	461a      	mov	r2, r3
 800544e:	d32e      	bcc.n	80054ae <quorem+0xfa>
 8005450:	613c      	str	r4, [r7, #16]
 8005452:	4638      	mov	r0, r7
 8005454:	f001 fc8c 	bl	8006d70 <__mcmp>
 8005458:	2800      	cmp	r0, #0
 800545a:	db24      	blt.n	80054a6 <quorem+0xf2>
 800545c:	3601      	adds	r6, #1
 800545e:	4628      	mov	r0, r5
 8005460:	f04f 0c00 	mov.w	ip, #0
 8005464:	f858 2b04 	ldr.w	r2, [r8], #4
 8005468:	f8d0 e000 	ldr.w	lr, [r0]
 800546c:	b293      	uxth	r3, r2
 800546e:	ebac 0303 	sub.w	r3, ip, r3
 8005472:	0c12      	lsrs	r2, r2, #16
 8005474:	fa13 f38e 	uxtah	r3, r3, lr
 8005478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800547c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005480:	b29b      	uxth	r3, r3
 8005482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005486:	45c1      	cmp	r9, r8
 8005488:	f840 3b04 	str.w	r3, [r0], #4
 800548c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005490:	d2e8      	bcs.n	8005464 <quorem+0xb0>
 8005492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800549a:	b922      	cbnz	r2, 80054a6 <quorem+0xf2>
 800549c:	3b04      	subs	r3, #4
 800549e:	429d      	cmp	r5, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	d30a      	bcc.n	80054ba <quorem+0x106>
 80054a4:	613c      	str	r4, [r7, #16]
 80054a6:	4630      	mov	r0, r6
 80054a8:	b003      	add	sp, #12
 80054aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	d1cc      	bne.n	8005450 <quorem+0x9c>
 80054b6:	3c01      	subs	r4, #1
 80054b8:	e7c7      	b.n	800544a <quorem+0x96>
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	3b04      	subs	r3, #4
 80054be:	2a00      	cmp	r2, #0
 80054c0:	d1f0      	bne.n	80054a4 <quorem+0xf0>
 80054c2:	3c01      	subs	r4, #1
 80054c4:	e7eb      	b.n	800549e <quorem+0xea>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e7ee      	b.n	80054a8 <quorem+0xf4>
 80054ca:	0000      	movs	r0, r0
 80054cc:	0000      	movs	r0, r0
	...

080054d0 <_dtoa_r>:
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	ed2d 8b02 	vpush	{d8}
 80054d8:	ec57 6b10 	vmov	r6, r7, d0
 80054dc:	b095      	sub	sp, #84	; 0x54
 80054de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80054ea:	4604      	mov	r4, r0
 80054ec:	9209      	str	r2, [sp, #36]	; 0x24
 80054ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f0:	b975      	cbnz	r5, 8005510 <_dtoa_r+0x40>
 80054f2:	2010      	movs	r0, #16
 80054f4:	f001 f94c 	bl	8006790 <malloc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6260      	str	r0, [r4, #36]	; 0x24
 80054fc:	b920      	cbnz	r0, 8005508 <_dtoa_r+0x38>
 80054fe:	4bb2      	ldr	r3, [pc, #712]	; (80057c8 <_dtoa_r+0x2f8>)
 8005500:	21ea      	movs	r1, #234	; 0xea
 8005502:	48b2      	ldr	r0, [pc, #712]	; (80057cc <_dtoa_r+0x2fc>)
 8005504:	f002 f874 	bl	80075f0 <__assert_func>
 8005508:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800550c:	6005      	str	r5, [r0, #0]
 800550e:	60c5      	str	r5, [r0, #12]
 8005510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	b151      	cbz	r1, 800552c <_dtoa_r+0x5c>
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	604a      	str	r2, [r1, #4]
 800551a:	2301      	movs	r3, #1
 800551c:	4093      	lsls	r3, r2
 800551e:	608b      	str	r3, [r1, #8]
 8005520:	4620      	mov	r0, r4
 8005522:	f001 f99d 	bl	8006860 <_Bfree>
 8005526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	1e3b      	subs	r3, r7, #0
 800552e:	bfb9      	ittee	lt
 8005530:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005534:	9303      	strlt	r3, [sp, #12]
 8005536:	2300      	movge	r3, #0
 8005538:	f8c8 3000 	strge.w	r3, [r8]
 800553c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005540:	4ba3      	ldr	r3, [pc, #652]	; (80057d0 <_dtoa_r+0x300>)
 8005542:	bfbc      	itt	lt
 8005544:	2201      	movlt	r2, #1
 8005546:	f8c8 2000 	strlt.w	r2, [r8]
 800554a:	ea33 0309 	bics.w	r3, r3, r9
 800554e:	d11b      	bne.n	8005588 <_dtoa_r+0xb8>
 8005550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005552:	f242 730f 	movw	r3, #9999	; 0x270f
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800555c:	4333      	orrs	r3, r6
 800555e:	f000 857a 	beq.w	8006056 <_dtoa_r+0xb86>
 8005562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005564:	b963      	cbnz	r3, 8005580 <_dtoa_r+0xb0>
 8005566:	4b9b      	ldr	r3, [pc, #620]	; (80057d4 <_dtoa_r+0x304>)
 8005568:	e024      	b.n	80055b4 <_dtoa_r+0xe4>
 800556a:	4b9b      	ldr	r3, [pc, #620]	; (80057d8 <_dtoa_r+0x308>)
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	9800      	ldr	r0, [sp, #0]
 8005576:	b015      	add	sp, #84	; 0x54
 8005578:	ecbd 8b02 	vpop	{d8}
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	4b94      	ldr	r3, [pc, #592]	; (80057d4 <_dtoa_r+0x304>)
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	3303      	adds	r3, #3
 8005586:	e7f3      	b.n	8005570 <_dtoa_r+0xa0>
 8005588:	ed9d 7b02 	vldr	d7, [sp, #8]
 800558c:	2200      	movs	r2, #0
 800558e:	ec51 0b17 	vmov	r0, r1, d7
 8005592:	2300      	movs	r3, #0
 8005594:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005598:	f7fb fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800559c:	4680      	mov	r8, r0
 800559e:	b158      	cbz	r0, 80055b8 <_dtoa_r+0xe8>
 80055a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055a2:	2301      	movs	r3, #1
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8551 	beq.w	8006050 <_dtoa_r+0xb80>
 80055ae:	488b      	ldr	r0, [pc, #556]	; (80057dc <_dtoa_r+0x30c>)
 80055b0:	6018      	str	r0, [r3, #0]
 80055b2:	1e43      	subs	r3, r0, #1
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	e7dd      	b.n	8005574 <_dtoa_r+0xa4>
 80055b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80055bc:	aa12      	add	r2, sp, #72	; 0x48
 80055be:	a913      	add	r1, sp, #76	; 0x4c
 80055c0:	4620      	mov	r0, r4
 80055c2:	f001 fcf5 	bl	8006fb0 <__d2b>
 80055c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055ca:	4683      	mov	fp, r0
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	d07c      	beq.n	80056ca <_dtoa_r+0x1fa>
 80055d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80055d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80055de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055ea:	4b7d      	ldr	r3, [pc, #500]	; (80057e0 <_dtoa_r+0x310>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	4630      	mov	r0, r6
 80055f0:	4639      	mov	r1, r7
 80055f2:	f7fa fe49 	bl	8000288 <__aeabi_dsub>
 80055f6:	a36e      	add	r3, pc, #440	; (adr r3, 80057b0 <_dtoa_r+0x2e0>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fa fffc 	bl	80005f8 <__aeabi_dmul>
 8005600:	a36d      	add	r3, pc, #436	; (adr r3, 80057b8 <_dtoa_r+0x2e8>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fe41 	bl	800028c <__adddf3>
 800560a:	4606      	mov	r6, r0
 800560c:	4628      	mov	r0, r5
 800560e:	460f      	mov	r7, r1
 8005610:	f7fa ff88 	bl	8000524 <__aeabi_i2d>
 8005614:	a36a      	add	r3, pc, #424	; (adr r3, 80057c0 <_dtoa_r+0x2f0>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa ffed 	bl	80005f8 <__aeabi_dmul>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4630      	mov	r0, r6
 8005624:	4639      	mov	r1, r7
 8005626:	f7fa fe31 	bl	800028c <__adddf3>
 800562a:	4606      	mov	r6, r0
 800562c:	460f      	mov	r7, r1
 800562e:	f7fb fa93 	bl	8000b58 <__aeabi_d2iz>
 8005632:	2200      	movs	r2, #0
 8005634:	4682      	mov	sl, r0
 8005636:	2300      	movs	r3, #0
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fb fa4e 	bl	8000adc <__aeabi_dcmplt>
 8005640:	b148      	cbz	r0, 8005656 <_dtoa_r+0x186>
 8005642:	4650      	mov	r0, sl
 8005644:	f7fa ff6e 	bl	8000524 <__aeabi_i2d>
 8005648:	4632      	mov	r2, r6
 800564a:	463b      	mov	r3, r7
 800564c:	f7fb fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005650:	b908      	cbnz	r0, 8005656 <_dtoa_r+0x186>
 8005652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005656:	f1ba 0f16 	cmp.w	sl, #22
 800565a:	d854      	bhi.n	8005706 <_dtoa_r+0x236>
 800565c:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <_dtoa_r+0x314>)
 800565e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800566a:	f7fb fa37 	bl	8000adc <__aeabi_dcmplt>
 800566e:	2800      	cmp	r0, #0
 8005670:	d04b      	beq.n	800570a <_dtoa_r+0x23a>
 8005672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005676:	2300      	movs	r3, #0
 8005678:	930e      	str	r3, [sp, #56]	; 0x38
 800567a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800567c:	1b5d      	subs	r5, r3, r5
 800567e:	1e6b      	subs	r3, r5, #1
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	bf43      	ittte	mi
 8005684:	2300      	movmi	r3, #0
 8005686:	f1c5 0801 	rsbmi	r8, r5, #1
 800568a:	9304      	strmi	r3, [sp, #16]
 800568c:	f04f 0800 	movpl.w	r8, #0
 8005690:	f1ba 0f00 	cmp.w	sl, #0
 8005694:	db3b      	blt.n	800570e <_dtoa_r+0x23e>
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800569c:	4453      	add	r3, sl
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	2300      	movs	r3, #0
 80056a2:	9306      	str	r3, [sp, #24]
 80056a4:	9b05      	ldr	r3, [sp, #20]
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	d869      	bhi.n	800577e <_dtoa_r+0x2ae>
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	bfc4      	itt	gt
 80056ae:	3b04      	subgt	r3, #4
 80056b0:	9305      	strgt	r3, [sp, #20]
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	f1a3 0302 	sub.w	r3, r3, #2
 80056b8:	bfcc      	ite	gt
 80056ba:	2500      	movgt	r5, #0
 80056bc:	2501      	movle	r5, #1
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d869      	bhi.n	8005796 <_dtoa_r+0x2c6>
 80056c2:	e8df f003 	tbb	[pc, r3]
 80056c6:	4e2c      	.short	0x4e2c
 80056c8:	5a4c      	.short	0x5a4c
 80056ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80056ce:	441d      	add	r5, r3
 80056d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	bfc1      	itttt	gt
 80056d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80056e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056e8:	bfda      	itte	le
 80056ea:	f1c3 0320 	rsble	r3, r3, #32
 80056ee:	fa06 f003 	lslle.w	r0, r6, r3
 80056f2:	4318      	orrgt	r0, r3
 80056f4:	f7fa ff06 	bl	8000504 <__aeabi_ui2d>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4606      	mov	r6, r0
 80056fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005700:	3d01      	subs	r5, #1
 8005702:	9310      	str	r3, [sp, #64]	; 0x40
 8005704:	e771      	b.n	80055ea <_dtoa_r+0x11a>
 8005706:	2301      	movs	r3, #1
 8005708:	e7b6      	b.n	8005678 <_dtoa_r+0x1a8>
 800570a:	900e      	str	r0, [sp, #56]	; 0x38
 800570c:	e7b5      	b.n	800567a <_dtoa_r+0x1aa>
 800570e:	f1ca 0300 	rsb	r3, sl, #0
 8005712:	9306      	str	r3, [sp, #24]
 8005714:	2300      	movs	r3, #0
 8005716:	eba8 080a 	sub.w	r8, r8, sl
 800571a:	930d      	str	r3, [sp, #52]	; 0x34
 800571c:	e7c2      	b.n	80056a4 <_dtoa_r+0x1d4>
 800571e:	2300      	movs	r3, #0
 8005720:	9308      	str	r3, [sp, #32]
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	dc39      	bgt.n	800579c <_dtoa_r+0x2cc>
 8005728:	f04f 0901 	mov.w	r9, #1
 800572c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005730:	464b      	mov	r3, r9
 8005732:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005736:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	6042      	str	r2, [r0, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	f102 0614 	add.w	r6, r2, #20
 8005742:	429e      	cmp	r6, r3
 8005744:	6841      	ldr	r1, [r0, #4]
 8005746:	d92f      	bls.n	80057a8 <_dtoa_r+0x2d8>
 8005748:	4620      	mov	r0, r4
 800574a:	f001 f849 	bl	80067e0 <_Balloc>
 800574e:	9000      	str	r0, [sp, #0]
 8005750:	2800      	cmp	r0, #0
 8005752:	d14b      	bne.n	80057ec <_dtoa_r+0x31c>
 8005754:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <_dtoa_r+0x318>)
 8005756:	4602      	mov	r2, r0
 8005758:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800575c:	e6d1      	b.n	8005502 <_dtoa_r+0x32>
 800575e:	2301      	movs	r3, #1
 8005760:	e7de      	b.n	8005720 <_dtoa_r+0x250>
 8005762:	2300      	movs	r3, #0
 8005764:	9308      	str	r3, [sp, #32]
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	eb0a 0903 	add.w	r9, sl, r3
 800576c:	f109 0301 	add.w	r3, r9, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	bfb8      	it	lt
 8005776:	2301      	movlt	r3, #1
 8005778:	e7dd      	b.n	8005736 <_dtoa_r+0x266>
 800577a:	2301      	movs	r3, #1
 800577c:	e7f2      	b.n	8005764 <_dtoa_r+0x294>
 800577e:	2501      	movs	r5, #1
 8005780:	2300      	movs	r3, #0
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	9508      	str	r5, [sp, #32]
 8005786:	f04f 39ff 	mov.w	r9, #4294967295
 800578a:	2200      	movs	r2, #0
 800578c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005790:	2312      	movs	r3, #18
 8005792:	9209      	str	r2, [sp, #36]	; 0x24
 8005794:	e7cf      	b.n	8005736 <_dtoa_r+0x266>
 8005796:	2301      	movs	r3, #1
 8005798:	9308      	str	r3, [sp, #32]
 800579a:	e7f4      	b.n	8005786 <_dtoa_r+0x2b6>
 800579c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80057a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80057a4:	464b      	mov	r3, r9
 80057a6:	e7c6      	b.n	8005736 <_dtoa_r+0x266>
 80057a8:	3101      	adds	r1, #1
 80057aa:	6041      	str	r1, [r0, #4]
 80057ac:	0052      	lsls	r2, r2, #1
 80057ae:	e7c6      	b.n	800573e <_dtoa_r+0x26e>
 80057b0:	636f4361 	.word	0x636f4361
 80057b4:	3fd287a7 	.word	0x3fd287a7
 80057b8:	8b60c8b3 	.word	0x8b60c8b3
 80057bc:	3fc68a28 	.word	0x3fc68a28
 80057c0:	509f79fb 	.word	0x509f79fb
 80057c4:	3fd34413 	.word	0x3fd34413
 80057c8:	080083b6 	.word	0x080083b6
 80057cc:	080083cd 	.word	0x080083cd
 80057d0:	7ff00000 	.word	0x7ff00000
 80057d4:	080083b2 	.word	0x080083b2
 80057d8:	080083a9 	.word	0x080083a9
 80057dc:	0800822d 	.word	0x0800822d
 80057e0:	3ff80000 	.word	0x3ff80000
 80057e4:	08008548 	.word	0x08008548
 80057e8:	0800842c 	.word	0x0800842c
 80057ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ee:	9a00      	ldr	r2, [sp, #0]
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	9b01      	ldr	r3, [sp, #4]
 80057f4:	2b0e      	cmp	r3, #14
 80057f6:	f200 80ad 	bhi.w	8005954 <_dtoa_r+0x484>
 80057fa:	2d00      	cmp	r5, #0
 80057fc:	f000 80aa 	beq.w	8005954 <_dtoa_r+0x484>
 8005800:	f1ba 0f00 	cmp.w	sl, #0
 8005804:	dd36      	ble.n	8005874 <_dtoa_r+0x3a4>
 8005806:	4ac3      	ldr	r2, [pc, #780]	; (8005b14 <_dtoa_r+0x644>)
 8005808:	f00a 030f 	and.w	r3, sl, #15
 800580c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005810:	ed93 7b00 	vldr	d7, [r3]
 8005814:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005818:	ea4f 172a 	mov.w	r7, sl, asr #4
 800581c:	eeb0 8a47 	vmov.f32	s16, s14
 8005820:	eef0 8a67 	vmov.f32	s17, s15
 8005824:	d016      	beq.n	8005854 <_dtoa_r+0x384>
 8005826:	4bbc      	ldr	r3, [pc, #752]	; (8005b18 <_dtoa_r+0x648>)
 8005828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800582c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005830:	f7fb f80c 	bl	800084c <__aeabi_ddiv>
 8005834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005838:	f007 070f 	and.w	r7, r7, #15
 800583c:	2503      	movs	r5, #3
 800583e:	4eb6      	ldr	r6, [pc, #728]	; (8005b18 <_dtoa_r+0x648>)
 8005840:	b957      	cbnz	r7, 8005858 <_dtoa_r+0x388>
 8005842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005846:	ec53 2b18 	vmov	r2, r3, d8
 800584a:	f7fa ffff 	bl	800084c <__aeabi_ddiv>
 800584e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005852:	e029      	b.n	80058a8 <_dtoa_r+0x3d8>
 8005854:	2502      	movs	r5, #2
 8005856:	e7f2      	b.n	800583e <_dtoa_r+0x36e>
 8005858:	07f9      	lsls	r1, r7, #31
 800585a:	d508      	bpl.n	800586e <_dtoa_r+0x39e>
 800585c:	ec51 0b18 	vmov	r0, r1, d8
 8005860:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005864:	f7fa fec8 	bl	80005f8 <__aeabi_dmul>
 8005868:	ec41 0b18 	vmov	d8, r0, r1
 800586c:	3501      	adds	r5, #1
 800586e:	107f      	asrs	r7, r7, #1
 8005870:	3608      	adds	r6, #8
 8005872:	e7e5      	b.n	8005840 <_dtoa_r+0x370>
 8005874:	f000 80a6 	beq.w	80059c4 <_dtoa_r+0x4f4>
 8005878:	f1ca 0600 	rsb	r6, sl, #0
 800587c:	4ba5      	ldr	r3, [pc, #660]	; (8005b14 <_dtoa_r+0x644>)
 800587e:	4fa6      	ldr	r7, [pc, #664]	; (8005b18 <_dtoa_r+0x648>)
 8005880:	f006 020f 	and.w	r2, r6, #15
 8005884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005890:	f7fa feb2 	bl	80005f8 <__aeabi_dmul>
 8005894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005898:	1136      	asrs	r6, r6, #4
 800589a:	2300      	movs	r3, #0
 800589c:	2502      	movs	r5, #2
 800589e:	2e00      	cmp	r6, #0
 80058a0:	f040 8085 	bne.w	80059ae <_dtoa_r+0x4de>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1d2      	bne.n	800584e <_dtoa_r+0x37e>
 80058a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 808c 	beq.w	80059c8 <_dtoa_r+0x4f8>
 80058b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058b4:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <_dtoa_r+0x64c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f90e 	bl	8000adc <__aeabi_dcmplt>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f000 8081 	beq.w	80059c8 <_dtoa_r+0x4f8>
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d07d      	beq.n	80059c8 <_dtoa_r+0x4f8>
 80058cc:	f1b9 0f00 	cmp.w	r9, #0
 80058d0:	dd3c      	ble.n	800594c <_dtoa_r+0x47c>
 80058d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	2200      	movs	r2, #0
 80058da:	4b91      	ldr	r3, [pc, #580]	; (8005b20 <_dtoa_r+0x650>)
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fe8a 	bl	80005f8 <__aeabi_dmul>
 80058e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058e8:	3501      	adds	r5, #1
 80058ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80058ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7fa fe16 	bl	8000524 <__aeabi_i2d>
 80058f8:	4632      	mov	r2, r6
 80058fa:	463b      	mov	r3, r7
 80058fc:	f7fa fe7c 	bl	80005f8 <__aeabi_dmul>
 8005900:	4b88      	ldr	r3, [pc, #544]	; (8005b24 <_dtoa_r+0x654>)
 8005902:	2200      	movs	r2, #0
 8005904:	f7fa fcc2 	bl	800028c <__adddf3>
 8005908:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800590c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005910:	9303      	str	r3, [sp, #12]
 8005912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005914:	2b00      	cmp	r3, #0
 8005916:	d15c      	bne.n	80059d2 <_dtoa_r+0x502>
 8005918:	4b83      	ldr	r3, [pc, #524]	; (8005b28 <_dtoa_r+0x658>)
 800591a:	2200      	movs	r2, #0
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fa fcb2 	bl	8000288 <__aeabi_dsub>
 8005924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	f7fb f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 8005930:	2800      	cmp	r0, #0
 8005932:	f040 8296 	bne.w	8005e62 <_dtoa_r+0x992>
 8005936:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800593a:	4630      	mov	r0, r6
 800593c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005940:	4639      	mov	r1, r7
 8005942:	f7fb f8cb 	bl	8000adc <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f040 8288 	bne.w	8005e5c <_dtoa_r+0x98c>
 800594c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005950:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005954:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f2c0 8158 	blt.w	8005c0c <_dtoa_r+0x73c>
 800595c:	f1ba 0f0e 	cmp.w	sl, #14
 8005960:	f300 8154 	bgt.w	8005c0c <_dtoa_r+0x73c>
 8005964:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <_dtoa_r+0x644>)
 8005966:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800596a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	f280 80e3 	bge.w	8005b3c <_dtoa_r+0x66c>
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f300 80df 	bgt.w	8005b3c <_dtoa_r+0x66c>
 800597e:	f040 826d 	bne.w	8005e5c <_dtoa_r+0x98c>
 8005982:	4b69      	ldr	r3, [pc, #420]	; (8005b28 <_dtoa_r+0x658>)
 8005984:	2200      	movs	r2, #0
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f7fa fe35 	bl	80005f8 <__aeabi_dmul>
 800598e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005992:	f7fb f8b7 	bl	8000b04 <__aeabi_dcmpge>
 8005996:	9e01      	ldr	r6, [sp, #4]
 8005998:	4637      	mov	r7, r6
 800599a:	2800      	cmp	r0, #0
 800599c:	f040 8243 	bne.w	8005e26 <_dtoa_r+0x956>
 80059a0:	9d00      	ldr	r5, [sp, #0]
 80059a2:	2331      	movs	r3, #49	; 0x31
 80059a4:	f805 3b01 	strb.w	r3, [r5], #1
 80059a8:	f10a 0a01 	add.w	sl, sl, #1
 80059ac:	e23f      	b.n	8005e2e <_dtoa_r+0x95e>
 80059ae:	07f2      	lsls	r2, r6, #31
 80059b0:	d505      	bpl.n	80059be <_dtoa_r+0x4ee>
 80059b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b6:	f7fa fe1f 	bl	80005f8 <__aeabi_dmul>
 80059ba:	3501      	adds	r5, #1
 80059bc:	2301      	movs	r3, #1
 80059be:	1076      	asrs	r6, r6, #1
 80059c0:	3708      	adds	r7, #8
 80059c2:	e76c      	b.n	800589e <_dtoa_r+0x3ce>
 80059c4:	2502      	movs	r5, #2
 80059c6:	e76f      	b.n	80058a8 <_dtoa_r+0x3d8>
 80059c8:	9b01      	ldr	r3, [sp, #4]
 80059ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80059ce:	930c      	str	r3, [sp, #48]	; 0x30
 80059d0:	e78d      	b.n	80058ee <_dtoa_r+0x41e>
 80059d2:	9900      	ldr	r1, [sp, #0]
 80059d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059d8:	4b4e      	ldr	r3, [pc, #312]	; (8005b14 <_dtoa_r+0x644>)
 80059da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059de:	4401      	add	r1, r0
 80059e0:	9102      	str	r1, [sp, #8]
 80059e2:	9908      	ldr	r1, [sp, #32]
 80059e4:	eeb0 8a47 	vmov.f32	s16, s14
 80059e8:	eef0 8a67 	vmov.f32	s17, s15
 80059ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d045      	beq.n	8005a84 <_dtoa_r+0x5b4>
 80059f8:	494c      	ldr	r1, [pc, #304]	; (8005b2c <_dtoa_r+0x65c>)
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7fa ff26 	bl	800084c <__aeabi_ddiv>
 8005a00:	ec53 2b18 	vmov	r2, r3, d8
 8005a04:	f7fa fc40 	bl	8000288 <__aeabi_dsub>
 8005a08:	9d00      	ldr	r5, [sp, #0]
 8005a0a:	ec41 0b18 	vmov	d8, r0, r1
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7fb f8a1 	bl	8000b58 <__aeabi_d2iz>
 8005a16:	900c      	str	r0, [sp, #48]	; 0x30
 8005a18:	f7fa fd84 	bl	8000524 <__aeabi_i2d>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa fc30 	bl	8000288 <__aeabi_dsub>
 8005a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a2a:	3330      	adds	r3, #48	; 0x30
 8005a2c:	f805 3b01 	strb.w	r3, [r5], #1
 8005a30:	ec53 2b18 	vmov	r2, r3, d8
 8005a34:	4606      	mov	r6, r0
 8005a36:	460f      	mov	r7, r1
 8005a38:	f7fb f850 	bl	8000adc <__aeabi_dcmplt>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d165      	bne.n	8005b0c <_dtoa_r+0x63c>
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	4935      	ldr	r1, [pc, #212]	; (8005b1c <_dtoa_r+0x64c>)
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fa fc1e 	bl	8000288 <__aeabi_dsub>
 8005a4c:	ec53 2b18 	vmov	r2, r3, d8
 8005a50:	f7fb f844 	bl	8000adc <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f040 80b9 	bne.w	8005bcc <_dtoa_r+0x6fc>
 8005a5a:	9b02      	ldr	r3, [sp, #8]
 8005a5c:	429d      	cmp	r5, r3
 8005a5e:	f43f af75 	beq.w	800594c <_dtoa_r+0x47c>
 8005a62:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <_dtoa_r+0x650>)
 8005a64:	ec51 0b18 	vmov	r0, r1, d8
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f7fa fdc5 	bl	80005f8 <__aeabi_dmul>
 8005a6e:	4b2c      	ldr	r3, [pc, #176]	; (8005b20 <_dtoa_r+0x650>)
 8005a70:	ec41 0b18 	vmov	d8, r0, r1
 8005a74:	2200      	movs	r2, #0
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa fdbd 	bl	80005f8 <__aeabi_dmul>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	e7c4      	b.n	8005a0e <_dtoa_r+0x53e>
 8005a84:	ec51 0b17 	vmov	r0, r1, d7
 8005a88:	f7fa fdb6 	bl	80005f8 <__aeabi_dmul>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	9d00      	ldr	r5, [sp, #0]
 8005a90:	930c      	str	r3, [sp, #48]	; 0x30
 8005a92:	ec41 0b18 	vmov	d8, r0, r1
 8005a96:	4639      	mov	r1, r7
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7fb f85d 	bl	8000b58 <__aeabi_d2iz>
 8005a9e:	9011      	str	r0, [sp, #68]	; 0x44
 8005aa0:	f7fa fd40 	bl	8000524 <__aeabi_i2d>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa fbec 	bl	8000288 <__aeabi_dsub>
 8005ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ab2:	3330      	adds	r3, #48	; 0x30
 8005ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	429d      	cmp	r5, r3
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	d134      	bne.n	8005b30 <_dtoa_r+0x660>
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <_dtoa_r+0x65c>)
 8005ac8:	ec51 0b18 	vmov	r0, r1, d8
 8005acc:	f7fa fbde 	bl	800028c <__adddf3>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f7fb f81e 	bl	8000b18 <__aeabi_dcmpgt>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d175      	bne.n	8005bcc <_dtoa_r+0x6fc>
 8005ae0:	ec53 2b18 	vmov	r2, r3, d8
 8005ae4:	4911      	ldr	r1, [pc, #68]	; (8005b2c <_dtoa_r+0x65c>)
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f7fa fbce 	bl	8000288 <__aeabi_dsub>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fff2 	bl	8000adc <__aeabi_dcmplt>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f43f af27 	beq.w	800594c <_dtoa_r+0x47c>
 8005afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b00:	1e6b      	subs	r3, r5, #1
 8005b02:	930c      	str	r3, [sp, #48]	; 0x30
 8005b04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d0f8      	beq.n	8005afe <_dtoa_r+0x62e>
 8005b0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005b10:	e04a      	b.n	8005ba8 <_dtoa_r+0x6d8>
 8005b12:	bf00      	nop
 8005b14:	08008548 	.word	0x08008548
 8005b18:	08008520 	.word	0x08008520
 8005b1c:	3ff00000 	.word	0x3ff00000
 8005b20:	40240000 	.word	0x40240000
 8005b24:	401c0000 	.word	0x401c0000
 8005b28:	40140000 	.word	0x40140000
 8005b2c:	3fe00000 	.word	0x3fe00000
 8005b30:	4baf      	ldr	r3, [pc, #700]	; (8005df0 <_dtoa_r+0x920>)
 8005b32:	f7fa fd61 	bl	80005f8 <__aeabi_dmul>
 8005b36:	4606      	mov	r6, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	e7ac      	b.n	8005a96 <_dtoa_r+0x5c6>
 8005b3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b40:	9d00      	ldr	r5, [sp, #0]
 8005b42:	4642      	mov	r2, r8
 8005b44:	464b      	mov	r3, r9
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa fe7f 	bl	800084c <__aeabi_ddiv>
 8005b4e:	f7fb f803 	bl	8000b58 <__aeabi_d2iz>
 8005b52:	9002      	str	r0, [sp, #8]
 8005b54:	f7fa fce6 	bl	8000524 <__aeabi_i2d>
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	f7fa fd4c 	bl	80005f8 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa fb8e 	bl	8000288 <__aeabi_dsub>
 8005b6c:	9e02      	ldr	r6, [sp, #8]
 8005b6e:	9f01      	ldr	r7, [sp, #4]
 8005b70:	3630      	adds	r6, #48	; 0x30
 8005b72:	f805 6b01 	strb.w	r6, [r5], #1
 8005b76:	9e00      	ldr	r6, [sp, #0]
 8005b78:	1bae      	subs	r6, r5, r6
 8005b7a:	42b7      	cmp	r7, r6
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	d137      	bne.n	8005bf2 <_dtoa_r+0x722>
 8005b82:	f7fa fb83 	bl	800028c <__adddf3>
 8005b86:	4642      	mov	r2, r8
 8005b88:	464b      	mov	r3, r9
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	f7fa ffc3 	bl	8000b18 <__aeabi_dcmpgt>
 8005b92:	b9c8      	cbnz	r0, 8005bc8 <_dtoa_r+0x6f8>
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba0:	b110      	cbz	r0, 8005ba8 <_dtoa_r+0x6d8>
 8005ba2:	9b02      	ldr	r3, [sp, #8]
 8005ba4:	07d9      	lsls	r1, r3, #31
 8005ba6:	d40f      	bmi.n	8005bc8 <_dtoa_r+0x6f8>
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4659      	mov	r1, fp
 8005bac:	f000 fe58 	bl	8006860 <_Bfree>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	702b      	strb	r3, [r5, #0]
 8005bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bb6:	f10a 0001 	add.w	r0, sl, #1
 8005bba:	6018      	str	r0, [r3, #0]
 8005bbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f43f acd8 	beq.w	8005574 <_dtoa_r+0xa4>
 8005bc4:	601d      	str	r5, [r3, #0]
 8005bc6:	e4d5      	b.n	8005574 <_dtoa_r+0xa4>
 8005bc8:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bcc:	462b      	mov	r3, r5
 8005bce:	461d      	mov	r5, r3
 8005bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bd4:	2a39      	cmp	r2, #57	; 0x39
 8005bd6:	d108      	bne.n	8005bea <_dtoa_r+0x71a>
 8005bd8:	9a00      	ldr	r2, [sp, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1f7      	bne.n	8005bce <_dtoa_r+0x6fe>
 8005bde:	9a07      	ldr	r2, [sp, #28]
 8005be0:	9900      	ldr	r1, [sp, #0]
 8005be2:	3201      	adds	r2, #1
 8005be4:	9207      	str	r2, [sp, #28]
 8005be6:	2230      	movs	r2, #48	; 0x30
 8005be8:	700a      	strb	r2, [r1, #0]
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	3201      	adds	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	e78c      	b.n	8005b0c <_dtoa_r+0x63c>
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	; (8005df0 <_dtoa_r+0x920>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	f7fa ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d09b      	beq.n	8005b42 <_dtoa_r+0x672>
 8005c0a:	e7cd      	b.n	8005ba8 <_dtoa_r+0x6d8>
 8005c0c:	9a08      	ldr	r2, [sp, #32]
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	f000 80c4 	beq.w	8005d9c <_dtoa_r+0x8cc>
 8005c14:	9a05      	ldr	r2, [sp, #20]
 8005c16:	2a01      	cmp	r2, #1
 8005c18:	f300 80a8 	bgt.w	8005d6c <_dtoa_r+0x89c>
 8005c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	f000 80a0 	beq.w	8005d64 <_dtoa_r+0x894>
 8005c24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c28:	9e06      	ldr	r6, [sp, #24]
 8005c2a:	4645      	mov	r5, r8
 8005c2c:	9a04      	ldr	r2, [sp, #16]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	441a      	add	r2, r3
 8005c32:	4620      	mov	r0, r4
 8005c34:	4498      	add	r8, r3
 8005c36:	9204      	str	r2, [sp, #16]
 8005c38:	f000 ff18 	bl	8006a6c <__i2b>
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	dd0b      	ble.n	8005c5a <_dtoa_r+0x78a>
 8005c42:	9b04      	ldr	r3, [sp, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	dd08      	ble.n	8005c5a <_dtoa_r+0x78a>
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	bfa8      	it	ge
 8005c4e:	462b      	movge	r3, r5
 8005c50:	eba8 0803 	sub.w	r8, r8, r3
 8005c54:	1aed      	subs	r5, r5, r3
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	b1fb      	cbz	r3, 8005c9e <_dtoa_r+0x7ce>
 8005c5e:	9b08      	ldr	r3, [sp, #32]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 809f 	beq.w	8005da4 <_dtoa_r+0x8d4>
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	dd11      	ble.n	8005c8e <_dtoa_r+0x7be>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 ffb8 	bl	8006be4 <__pow5mult>
 8005c74:	465a      	mov	r2, fp
 8005c76:	4601      	mov	r1, r0
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 ff0c 	bl	8006a98 <__multiply>
 8005c80:	4659      	mov	r1, fp
 8005c82:	9007      	str	r0, [sp, #28]
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 fdeb 	bl	8006860 <_Bfree>
 8005c8a:	9b07      	ldr	r3, [sp, #28]
 8005c8c:	469b      	mov	fp, r3
 8005c8e:	9b06      	ldr	r3, [sp, #24]
 8005c90:	1b9a      	subs	r2, r3, r6
 8005c92:	d004      	beq.n	8005c9e <_dtoa_r+0x7ce>
 8005c94:	4659      	mov	r1, fp
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 ffa4 	bl	8006be4 <__pow5mult>
 8005c9c:	4683      	mov	fp, r0
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fee3 	bl	8006a6c <__i2b>
 8005ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	4606      	mov	r6, r0
 8005cac:	dd7c      	ble.n	8005da8 <_dtoa_r+0x8d8>
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4601      	mov	r1, r0
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 ff96 	bl	8006be4 <__pow5mult>
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	dd76      	ble.n	8005dae <_dtoa_r+0x8de>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9306      	str	r3, [sp, #24]
 8005cc4:	6933      	ldr	r3, [r6, #16]
 8005cc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cca:	6918      	ldr	r0, [r3, #16]
 8005ccc:	f000 fe7e 	bl	80069cc <__hi0bits>
 8005cd0:	f1c0 0020 	rsb	r0, r0, #32
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	4418      	add	r0, r3
 8005cd8:	f010 001f 	ands.w	r0, r0, #31
 8005cdc:	f000 8086 	beq.w	8005dec <_dtoa_r+0x91c>
 8005ce0:	f1c0 0320 	rsb	r3, r0, #32
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	dd7f      	ble.n	8005de8 <_dtoa_r+0x918>
 8005ce8:	f1c0 001c 	rsb	r0, r0, #28
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	4403      	add	r3, r0
 8005cf0:	4480      	add	r8, r0
 8005cf2:	4405      	add	r5, r0
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	dd05      	ble.n	8005d08 <_dtoa_r+0x838>
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	4642      	mov	r2, r8
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 ffc9 	bl	8006c98 <__lshift>
 8005d06:	4683      	mov	fp, r0
 8005d08:	9b04      	ldr	r3, [sp, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dd05      	ble.n	8005d1a <_dtoa_r+0x84a>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	461a      	mov	r2, r3
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 ffc0 	bl	8006c98 <__lshift>
 8005d18:	4606      	mov	r6, r0
 8005d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d069      	beq.n	8005df4 <_dtoa_r+0x924>
 8005d20:	4631      	mov	r1, r6
 8005d22:	4658      	mov	r0, fp
 8005d24:	f001 f824 	bl	8006d70 <__mcmp>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	da63      	bge.n	8005df4 <_dtoa_r+0x924>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4659      	mov	r1, fp
 8005d30:	220a      	movs	r2, #10
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 fdb6 	bl	80068a4 <__multadd>
 8005d38:	9b08      	ldr	r3, [sp, #32]
 8005d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d3e:	4683      	mov	fp, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 818f 	beq.w	8006064 <_dtoa_r+0xb94>
 8005d46:	4639      	mov	r1, r7
 8005d48:	2300      	movs	r3, #0
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fda9 	bl	80068a4 <__multadd>
 8005d52:	f1b9 0f00 	cmp.w	r9, #0
 8005d56:	4607      	mov	r7, r0
 8005d58:	f300 808e 	bgt.w	8005e78 <_dtoa_r+0x9a8>
 8005d5c:	9b05      	ldr	r3, [sp, #20]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	dc50      	bgt.n	8005e04 <_dtoa_r+0x934>
 8005d62:	e089      	b.n	8005e78 <_dtoa_r+0x9a8>
 8005d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d6a:	e75d      	b.n	8005c28 <_dtoa_r+0x758>
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	1e5e      	subs	r6, r3, #1
 8005d70:	9b06      	ldr	r3, [sp, #24]
 8005d72:	42b3      	cmp	r3, r6
 8005d74:	bfbf      	itttt	lt
 8005d76:	9b06      	ldrlt	r3, [sp, #24]
 8005d78:	9606      	strlt	r6, [sp, #24]
 8005d7a:	1af2      	sublt	r2, r6, r3
 8005d7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005d7e:	bfb6      	itet	lt
 8005d80:	189b      	addlt	r3, r3, r2
 8005d82:	1b9e      	subge	r6, r3, r6
 8005d84:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005d86:	9b01      	ldr	r3, [sp, #4]
 8005d88:	bfb8      	it	lt
 8005d8a:	2600      	movlt	r6, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bfb5      	itete	lt
 8005d90:	eba8 0503 	sublt.w	r5, r8, r3
 8005d94:	9b01      	ldrge	r3, [sp, #4]
 8005d96:	2300      	movlt	r3, #0
 8005d98:	4645      	movge	r5, r8
 8005d9a:	e747      	b.n	8005c2c <_dtoa_r+0x75c>
 8005d9c:	9e06      	ldr	r6, [sp, #24]
 8005d9e:	9f08      	ldr	r7, [sp, #32]
 8005da0:	4645      	mov	r5, r8
 8005da2:	e74c      	b.n	8005c3e <_dtoa_r+0x76e>
 8005da4:	9a06      	ldr	r2, [sp, #24]
 8005da6:	e775      	b.n	8005c94 <_dtoa_r+0x7c4>
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	dc18      	bgt.n	8005de0 <_dtoa_r+0x910>
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	b9b3      	cbnz	r3, 8005de0 <_dtoa_r+0x910>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db8:	b9a3      	cbnz	r3, 8005de4 <_dtoa_r+0x914>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dc0:	0d1b      	lsrs	r3, r3, #20
 8005dc2:	051b      	lsls	r3, r3, #20
 8005dc4:	b12b      	cbz	r3, 8005dd2 <_dtoa_r+0x902>
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	f108 0801 	add.w	r8, r8, #1
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f af74 	bne.w	8005cc4 <_dtoa_r+0x7f4>
 8005ddc:	2001      	movs	r0, #1
 8005dde:	e779      	b.n	8005cd4 <_dtoa_r+0x804>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e7f6      	b.n	8005dd2 <_dtoa_r+0x902>
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	e7f4      	b.n	8005dd2 <_dtoa_r+0x902>
 8005de8:	d085      	beq.n	8005cf6 <_dtoa_r+0x826>
 8005dea:	4618      	mov	r0, r3
 8005dec:	301c      	adds	r0, #28
 8005dee:	e77d      	b.n	8005cec <_dtoa_r+0x81c>
 8005df0:	40240000 	.word	0x40240000
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dc38      	bgt.n	8005e6c <_dtoa_r+0x99c>
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	dd35      	ble.n	8005e6c <_dtoa_r+0x99c>
 8005e00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	d10d      	bne.n	8005e26 <_dtoa_r+0x956>
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	2205      	movs	r2, #5
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fd47 	bl	80068a4 <__multadd>
 8005e16:	4601      	mov	r1, r0
 8005e18:	4606      	mov	r6, r0
 8005e1a:	4658      	mov	r0, fp
 8005e1c:	f000 ffa8 	bl	8006d70 <__mcmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f73f adbd 	bgt.w	80059a0 <_dtoa_r+0x4d0>
 8005e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e28:	9d00      	ldr	r5, [sp, #0]
 8005e2a:	ea6f 0a03 	mvn.w	sl, r3
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	4631      	mov	r1, r6
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fd13 	bl	8006860 <_Bfree>
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	f43f aeb4 	beq.w	8005ba8 <_dtoa_r+0x6d8>
 8005e40:	f1b8 0f00 	cmp.w	r8, #0
 8005e44:	d005      	beq.n	8005e52 <_dtoa_r+0x982>
 8005e46:	45b8      	cmp	r8, r7
 8005e48:	d003      	beq.n	8005e52 <_dtoa_r+0x982>
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 fd07 	bl	8006860 <_Bfree>
 8005e52:	4639      	mov	r1, r7
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fd03 	bl	8006860 <_Bfree>
 8005e5a:	e6a5      	b.n	8005ba8 <_dtoa_r+0x6d8>
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	4637      	mov	r7, r6
 8005e60:	e7e1      	b.n	8005e26 <_dtoa_r+0x956>
 8005e62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e68:	4637      	mov	r7, r6
 8005e6a:	e599      	b.n	80059a0 <_dtoa_r+0x4d0>
 8005e6c:	9b08      	ldr	r3, [sp, #32]
 8005e6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80fd 	beq.w	8006072 <_dtoa_r+0xba2>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	dd05      	ble.n	8005e88 <_dtoa_r+0x9b8>
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 ff09 	bl	8006c98 <__lshift>
 8005e86:	4607      	mov	r7, r0
 8005e88:	9b06      	ldr	r3, [sp, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d05c      	beq.n	8005f48 <_dtoa_r+0xa78>
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fca5 	bl	80067e0 <_Balloc>
 8005e96:	4605      	mov	r5, r0
 8005e98:	b928      	cbnz	r0, 8005ea6 <_dtoa_r+0x9d6>
 8005e9a:	4b80      	ldr	r3, [pc, #512]	; (800609c <_dtoa_r+0xbcc>)
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ea2:	f7ff bb2e 	b.w	8005502 <_dtoa_r+0x32>
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	3202      	adds	r2, #2
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	f107 010c 	add.w	r1, r7, #12
 8005eb0:	300c      	adds	r0, #12
 8005eb2:	f000 fc87 	bl	80067c4 <memcpy>
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 feec 	bl	8006c98 <__lshift>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	444b      	add	r3, r9
 8005eca:	9307      	str	r3, [sp, #28]
 8005ecc:	9b02      	ldr	r3, [sp, #8]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	46b8      	mov	r8, r7
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	4631      	mov	r1, r6
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4658      	mov	r0, fp
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	f7ff fa67 	bl	80053b4 <quorem>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	3330      	adds	r3, #48	; 0x30
 8005eea:	9004      	str	r0, [sp, #16]
 8005eec:	4641      	mov	r1, r8
 8005eee:	4658      	mov	r0, fp
 8005ef0:	9308      	str	r3, [sp, #32]
 8005ef2:	f000 ff3d 	bl	8006d70 <__mcmp>
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4681      	mov	r9, r0
 8005efa:	4631      	mov	r1, r6
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 ff53 	bl	8006da8 <__mdiff>
 8005f02:	68c2      	ldr	r2, [r0, #12]
 8005f04:	9b08      	ldr	r3, [sp, #32]
 8005f06:	4605      	mov	r5, r0
 8005f08:	bb02      	cbnz	r2, 8005f4c <_dtoa_r+0xa7c>
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	f000 ff2f 	bl	8006d70 <__mcmp>
 8005f12:	9b08      	ldr	r3, [sp, #32]
 8005f14:	4602      	mov	r2, r0
 8005f16:	4629      	mov	r1, r5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005f1e:	f000 fc9f 	bl	8006860 <_Bfree>
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f26:	9d01      	ldr	r5, [sp, #4]
 8005f28:	ea43 0102 	orr.w	r1, r3, r2
 8005f2c:	9b06      	ldr	r3, [sp, #24]
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	d10d      	bne.n	8005f50 <_dtoa_r+0xa80>
 8005f34:	2b39      	cmp	r3, #57	; 0x39
 8005f36:	d029      	beq.n	8005f8c <_dtoa_r+0xabc>
 8005f38:	f1b9 0f00 	cmp.w	r9, #0
 8005f3c:	dd01      	ble.n	8005f42 <_dtoa_r+0xa72>
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	3331      	adds	r3, #49	; 0x31
 8005f42:	9a02      	ldr	r2, [sp, #8]
 8005f44:	7013      	strb	r3, [r2, #0]
 8005f46:	e774      	b.n	8005e32 <_dtoa_r+0x962>
 8005f48:	4638      	mov	r0, r7
 8005f4a:	e7b9      	b.n	8005ec0 <_dtoa_r+0x9f0>
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	e7e2      	b.n	8005f16 <_dtoa_r+0xa46>
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	db06      	blt.n	8005f64 <_dtoa_r+0xa94>
 8005f56:	9905      	ldr	r1, [sp, #20]
 8005f58:	ea41 0909 	orr.w	r9, r1, r9
 8005f5c:	9906      	ldr	r1, [sp, #24]
 8005f5e:	ea59 0101 	orrs.w	r1, r9, r1
 8005f62:	d120      	bne.n	8005fa6 <_dtoa_r+0xad6>
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	ddec      	ble.n	8005f42 <_dtoa_r+0xa72>
 8005f68:	4659      	mov	r1, fp
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	f000 fe92 	bl	8006c98 <__lshift>
 8005f74:	4631      	mov	r1, r6
 8005f76:	4683      	mov	fp, r0
 8005f78:	f000 fefa 	bl	8006d70 <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	dc02      	bgt.n	8005f88 <_dtoa_r+0xab8>
 8005f82:	d1de      	bne.n	8005f42 <_dtoa_r+0xa72>
 8005f84:	07da      	lsls	r2, r3, #31
 8005f86:	d5dc      	bpl.n	8005f42 <_dtoa_r+0xa72>
 8005f88:	2b39      	cmp	r3, #57	; 0x39
 8005f8a:	d1d8      	bne.n	8005f3e <_dtoa_r+0xa6e>
 8005f8c:	9a02      	ldr	r2, [sp, #8]
 8005f8e:	2339      	movs	r3, #57	; 0x39
 8005f90:	7013      	strb	r3, [r2, #0]
 8005f92:	462b      	mov	r3, r5
 8005f94:	461d      	mov	r5, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f9c:	2a39      	cmp	r2, #57	; 0x39
 8005f9e:	d050      	beq.n	8006042 <_dtoa_r+0xb72>
 8005fa0:	3201      	adds	r2, #1
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	e745      	b.n	8005e32 <_dtoa_r+0x962>
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	dd03      	ble.n	8005fb2 <_dtoa_r+0xae2>
 8005faa:	2b39      	cmp	r3, #57	; 0x39
 8005fac:	d0ee      	beq.n	8005f8c <_dtoa_r+0xabc>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	e7c7      	b.n	8005f42 <_dtoa_r+0xa72>
 8005fb2:	9a01      	ldr	r2, [sp, #4]
 8005fb4:	9907      	ldr	r1, [sp, #28]
 8005fb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fba:	428a      	cmp	r2, r1
 8005fbc:	d02a      	beq.n	8006014 <_dtoa_r+0xb44>
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	220a      	movs	r2, #10
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fc6d 	bl	80068a4 <__multadd>
 8005fca:	45b8      	cmp	r8, r7
 8005fcc:	4683      	mov	fp, r0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	f04f 020a 	mov.w	r2, #10
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	4620      	mov	r0, r4
 8005fda:	d107      	bne.n	8005fec <_dtoa_r+0xb1c>
 8005fdc:	f000 fc62 	bl	80068a4 <__multadd>
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	e775      	b.n	8005ed8 <_dtoa_r+0xa08>
 8005fec:	f000 fc5a 	bl	80068a4 <__multadd>
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	220a      	movs	r2, #10
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fc53 	bl	80068a4 <__multadd>
 8005ffe:	4607      	mov	r7, r0
 8006000:	e7f0      	b.n	8005fe4 <_dtoa_r+0xb14>
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	9a00      	ldr	r2, [sp, #0]
 8006008:	bfcc      	ite	gt
 800600a:	464d      	movgt	r5, r9
 800600c:	2501      	movle	r5, #1
 800600e:	4415      	add	r5, r2
 8006010:	f04f 0800 	mov.w	r8, #0
 8006014:	4659      	mov	r1, fp
 8006016:	2201      	movs	r2, #1
 8006018:	4620      	mov	r0, r4
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	f000 fe3c 	bl	8006c98 <__lshift>
 8006020:	4631      	mov	r1, r6
 8006022:	4683      	mov	fp, r0
 8006024:	f000 fea4 	bl	8006d70 <__mcmp>
 8006028:	2800      	cmp	r0, #0
 800602a:	dcb2      	bgt.n	8005f92 <_dtoa_r+0xac2>
 800602c:	d102      	bne.n	8006034 <_dtoa_r+0xb64>
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d4ae      	bmi.n	8005f92 <_dtoa_r+0xac2>
 8006034:	462b      	mov	r3, r5
 8006036:	461d      	mov	r5, r3
 8006038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800603c:	2a30      	cmp	r2, #48	; 0x30
 800603e:	d0fa      	beq.n	8006036 <_dtoa_r+0xb66>
 8006040:	e6f7      	b.n	8005e32 <_dtoa_r+0x962>
 8006042:	9a00      	ldr	r2, [sp, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d1a5      	bne.n	8005f94 <_dtoa_r+0xac4>
 8006048:	f10a 0a01 	add.w	sl, sl, #1
 800604c:	2331      	movs	r3, #49	; 0x31
 800604e:	e779      	b.n	8005f44 <_dtoa_r+0xa74>
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <_dtoa_r+0xbd0>)
 8006052:	f7ff baaf 	b.w	80055b4 <_dtoa_r+0xe4>
 8006056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f aa86 	bne.w	800556a <_dtoa_r+0x9a>
 800605e:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <_dtoa_r+0xbd4>)
 8006060:	f7ff baa8 	b.w	80055b4 <_dtoa_r+0xe4>
 8006064:	f1b9 0f00 	cmp.w	r9, #0
 8006068:	dc03      	bgt.n	8006072 <_dtoa_r+0xba2>
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	2b02      	cmp	r3, #2
 800606e:	f73f aec9 	bgt.w	8005e04 <_dtoa_r+0x934>
 8006072:	9d00      	ldr	r5, [sp, #0]
 8006074:	4631      	mov	r1, r6
 8006076:	4658      	mov	r0, fp
 8006078:	f7ff f99c 	bl	80053b4 <quorem>
 800607c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006080:	f805 3b01 	strb.w	r3, [r5], #1
 8006084:	9a00      	ldr	r2, [sp, #0]
 8006086:	1aaa      	subs	r2, r5, r2
 8006088:	4591      	cmp	r9, r2
 800608a:	ddba      	ble.n	8006002 <_dtoa_r+0xb32>
 800608c:	4659      	mov	r1, fp
 800608e:	2300      	movs	r3, #0
 8006090:	220a      	movs	r2, #10
 8006092:	4620      	mov	r0, r4
 8006094:	f000 fc06 	bl	80068a4 <__multadd>
 8006098:	4683      	mov	fp, r0
 800609a:	e7eb      	b.n	8006074 <_dtoa_r+0xba4>
 800609c:	0800842c 	.word	0x0800842c
 80060a0:	0800822c 	.word	0x0800822c
 80060a4:	080083a9 	.word	0x080083a9

080060a8 <rshift>:
 80060a8:	6903      	ldr	r3, [r0, #16]
 80060aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060b6:	f100 0414 	add.w	r4, r0, #20
 80060ba:	dd45      	ble.n	8006148 <rshift+0xa0>
 80060bc:	f011 011f 	ands.w	r1, r1, #31
 80060c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060c8:	d10c      	bne.n	80060e4 <rshift+0x3c>
 80060ca:	f100 0710 	add.w	r7, r0, #16
 80060ce:	4629      	mov	r1, r5
 80060d0:	42b1      	cmp	r1, r6
 80060d2:	d334      	bcc.n	800613e <rshift+0x96>
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	1eea      	subs	r2, r5, #3
 80060da:	4296      	cmp	r6, r2
 80060dc:	bf38      	it	cc
 80060de:	2300      	movcc	r3, #0
 80060e0:	4423      	add	r3, r4
 80060e2:	e015      	b.n	8006110 <rshift+0x68>
 80060e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80060e8:	f1c1 0820 	rsb	r8, r1, #32
 80060ec:	40cf      	lsrs	r7, r1
 80060ee:	f105 0e04 	add.w	lr, r5, #4
 80060f2:	46a1      	mov	r9, r4
 80060f4:	4576      	cmp	r6, lr
 80060f6:	46f4      	mov	ip, lr
 80060f8:	d815      	bhi.n	8006126 <rshift+0x7e>
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	009a      	lsls	r2, r3, #2
 80060fe:	3a04      	subs	r2, #4
 8006100:	3501      	adds	r5, #1
 8006102:	42ae      	cmp	r6, r5
 8006104:	bf38      	it	cc
 8006106:	2200      	movcc	r2, #0
 8006108:	18a3      	adds	r3, r4, r2
 800610a:	50a7      	str	r7, [r4, r2]
 800610c:	b107      	cbz	r7, 8006110 <rshift+0x68>
 800610e:	3304      	adds	r3, #4
 8006110:	1b1a      	subs	r2, r3, r4
 8006112:	42a3      	cmp	r3, r4
 8006114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006118:	bf08      	it	eq
 800611a:	2300      	moveq	r3, #0
 800611c:	6102      	str	r2, [r0, #16]
 800611e:	bf08      	it	eq
 8006120:	6143      	streq	r3, [r0, #20]
 8006122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006126:	f8dc c000 	ldr.w	ip, [ip]
 800612a:	fa0c fc08 	lsl.w	ip, ip, r8
 800612e:	ea4c 0707 	orr.w	r7, ip, r7
 8006132:	f849 7b04 	str.w	r7, [r9], #4
 8006136:	f85e 7b04 	ldr.w	r7, [lr], #4
 800613a:	40cf      	lsrs	r7, r1
 800613c:	e7da      	b.n	80060f4 <rshift+0x4c>
 800613e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006142:	f847 cf04 	str.w	ip, [r7, #4]!
 8006146:	e7c3      	b.n	80060d0 <rshift+0x28>
 8006148:	4623      	mov	r3, r4
 800614a:	e7e1      	b.n	8006110 <rshift+0x68>

0800614c <__hexdig_fun>:
 800614c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006150:	2b09      	cmp	r3, #9
 8006152:	d802      	bhi.n	800615a <__hexdig_fun+0xe>
 8006154:	3820      	subs	r0, #32
 8006156:	b2c0      	uxtb	r0, r0
 8006158:	4770      	bx	lr
 800615a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800615e:	2b05      	cmp	r3, #5
 8006160:	d801      	bhi.n	8006166 <__hexdig_fun+0x1a>
 8006162:	3847      	subs	r0, #71	; 0x47
 8006164:	e7f7      	b.n	8006156 <__hexdig_fun+0xa>
 8006166:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800616a:	2b05      	cmp	r3, #5
 800616c:	d801      	bhi.n	8006172 <__hexdig_fun+0x26>
 800616e:	3827      	subs	r0, #39	; 0x27
 8006170:	e7f1      	b.n	8006156 <__hexdig_fun+0xa>
 8006172:	2000      	movs	r0, #0
 8006174:	4770      	bx	lr
	...

08006178 <__gethex>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	ed2d 8b02 	vpush	{d8}
 8006180:	b089      	sub	sp, #36	; 0x24
 8006182:	ee08 0a10 	vmov	s16, r0
 8006186:	9304      	str	r3, [sp, #16]
 8006188:	4bbc      	ldr	r3, [pc, #752]	; (800647c <__gethex+0x304>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	4618      	mov	r0, r3
 8006190:	468b      	mov	fp, r1
 8006192:	4690      	mov	r8, r2
 8006194:	f7fa f81c 	bl	80001d0 <strlen>
 8006198:	9b01      	ldr	r3, [sp, #4]
 800619a:	f8db 2000 	ldr.w	r2, [fp]
 800619e:	4403      	add	r3, r0
 80061a0:	4682      	mov	sl, r0
 80061a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	1c93      	adds	r3, r2, #2
 80061aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061b2:	32fe      	adds	r2, #254	; 0xfe
 80061b4:	18d1      	adds	r1, r2, r3
 80061b6:	461f      	mov	r7, r3
 80061b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061bc:	9100      	str	r1, [sp, #0]
 80061be:	2830      	cmp	r0, #48	; 0x30
 80061c0:	d0f8      	beq.n	80061b4 <__gethex+0x3c>
 80061c2:	f7ff ffc3 	bl	800614c <__hexdig_fun>
 80061c6:	4604      	mov	r4, r0
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d13a      	bne.n	8006242 <__gethex+0xca>
 80061cc:	9901      	ldr	r1, [sp, #4]
 80061ce:	4652      	mov	r2, sl
 80061d0:	4638      	mov	r0, r7
 80061d2:	f001 f9ed 	bl	80075b0 <strncmp>
 80061d6:	4605      	mov	r5, r0
 80061d8:	2800      	cmp	r0, #0
 80061da:	d168      	bne.n	80062ae <__gethex+0x136>
 80061dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80061e0:	eb07 060a 	add.w	r6, r7, sl
 80061e4:	f7ff ffb2 	bl	800614c <__hexdig_fun>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d062      	beq.n	80062b2 <__gethex+0x13a>
 80061ec:	4633      	mov	r3, r6
 80061ee:	7818      	ldrb	r0, [r3, #0]
 80061f0:	2830      	cmp	r0, #48	; 0x30
 80061f2:	461f      	mov	r7, r3
 80061f4:	f103 0301 	add.w	r3, r3, #1
 80061f8:	d0f9      	beq.n	80061ee <__gethex+0x76>
 80061fa:	f7ff ffa7 	bl	800614c <__hexdig_fun>
 80061fe:	2301      	movs	r3, #1
 8006200:	fab0 f480 	clz	r4, r0
 8006204:	0964      	lsrs	r4, r4, #5
 8006206:	4635      	mov	r5, r6
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	463a      	mov	r2, r7
 800620c:	4616      	mov	r6, r2
 800620e:	3201      	adds	r2, #1
 8006210:	7830      	ldrb	r0, [r6, #0]
 8006212:	f7ff ff9b 	bl	800614c <__hexdig_fun>
 8006216:	2800      	cmp	r0, #0
 8006218:	d1f8      	bne.n	800620c <__gethex+0x94>
 800621a:	9901      	ldr	r1, [sp, #4]
 800621c:	4652      	mov	r2, sl
 800621e:	4630      	mov	r0, r6
 8006220:	f001 f9c6 	bl	80075b0 <strncmp>
 8006224:	b980      	cbnz	r0, 8006248 <__gethex+0xd0>
 8006226:	b94d      	cbnz	r5, 800623c <__gethex+0xc4>
 8006228:	eb06 050a 	add.w	r5, r6, sl
 800622c:	462a      	mov	r2, r5
 800622e:	4616      	mov	r6, r2
 8006230:	3201      	adds	r2, #1
 8006232:	7830      	ldrb	r0, [r6, #0]
 8006234:	f7ff ff8a 	bl	800614c <__hexdig_fun>
 8006238:	2800      	cmp	r0, #0
 800623a:	d1f8      	bne.n	800622e <__gethex+0xb6>
 800623c:	1bad      	subs	r5, r5, r6
 800623e:	00ad      	lsls	r5, r5, #2
 8006240:	e004      	b.n	800624c <__gethex+0xd4>
 8006242:	2400      	movs	r4, #0
 8006244:	4625      	mov	r5, r4
 8006246:	e7e0      	b.n	800620a <__gethex+0x92>
 8006248:	2d00      	cmp	r5, #0
 800624a:	d1f7      	bne.n	800623c <__gethex+0xc4>
 800624c:	7833      	ldrb	r3, [r6, #0]
 800624e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006252:	2b50      	cmp	r3, #80	; 0x50
 8006254:	d13b      	bne.n	80062ce <__gethex+0x156>
 8006256:	7873      	ldrb	r3, [r6, #1]
 8006258:	2b2b      	cmp	r3, #43	; 0x2b
 800625a:	d02c      	beq.n	80062b6 <__gethex+0x13e>
 800625c:	2b2d      	cmp	r3, #45	; 0x2d
 800625e:	d02e      	beq.n	80062be <__gethex+0x146>
 8006260:	1c71      	adds	r1, r6, #1
 8006262:	f04f 0900 	mov.w	r9, #0
 8006266:	7808      	ldrb	r0, [r1, #0]
 8006268:	f7ff ff70 	bl	800614c <__hexdig_fun>
 800626c:	1e43      	subs	r3, r0, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b18      	cmp	r3, #24
 8006272:	d82c      	bhi.n	80062ce <__gethex+0x156>
 8006274:	f1a0 0210 	sub.w	r2, r0, #16
 8006278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800627c:	f7ff ff66 	bl	800614c <__hexdig_fun>
 8006280:	1e43      	subs	r3, r0, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b18      	cmp	r3, #24
 8006286:	d91d      	bls.n	80062c4 <__gethex+0x14c>
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	d000      	beq.n	8006290 <__gethex+0x118>
 800628e:	4252      	negs	r2, r2
 8006290:	4415      	add	r5, r2
 8006292:	f8cb 1000 	str.w	r1, [fp]
 8006296:	b1e4      	cbz	r4, 80062d2 <__gethex+0x15a>
 8006298:	9b00      	ldr	r3, [sp, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2700      	movne	r7, #0
 80062a0:	2706      	moveq	r7, #6
 80062a2:	4638      	mov	r0, r7
 80062a4:	b009      	add	sp, #36	; 0x24
 80062a6:	ecbd 8b02 	vpop	{d8}
 80062aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	463e      	mov	r6, r7
 80062b0:	4625      	mov	r5, r4
 80062b2:	2401      	movs	r4, #1
 80062b4:	e7ca      	b.n	800624c <__gethex+0xd4>
 80062b6:	f04f 0900 	mov.w	r9, #0
 80062ba:	1cb1      	adds	r1, r6, #2
 80062bc:	e7d3      	b.n	8006266 <__gethex+0xee>
 80062be:	f04f 0901 	mov.w	r9, #1
 80062c2:	e7fa      	b.n	80062ba <__gethex+0x142>
 80062c4:	230a      	movs	r3, #10
 80062c6:	fb03 0202 	mla	r2, r3, r2, r0
 80062ca:	3a10      	subs	r2, #16
 80062cc:	e7d4      	b.n	8006278 <__gethex+0x100>
 80062ce:	4631      	mov	r1, r6
 80062d0:	e7df      	b.n	8006292 <__gethex+0x11a>
 80062d2:	1bf3      	subs	r3, r6, r7
 80062d4:	3b01      	subs	r3, #1
 80062d6:	4621      	mov	r1, r4
 80062d8:	2b07      	cmp	r3, #7
 80062da:	dc0b      	bgt.n	80062f4 <__gethex+0x17c>
 80062dc:	ee18 0a10 	vmov	r0, s16
 80062e0:	f000 fa7e 	bl	80067e0 <_Balloc>
 80062e4:	4604      	mov	r4, r0
 80062e6:	b940      	cbnz	r0, 80062fa <__gethex+0x182>
 80062e8:	4b65      	ldr	r3, [pc, #404]	; (8006480 <__gethex+0x308>)
 80062ea:	4602      	mov	r2, r0
 80062ec:	21de      	movs	r1, #222	; 0xde
 80062ee:	4865      	ldr	r0, [pc, #404]	; (8006484 <__gethex+0x30c>)
 80062f0:	f001 f97e 	bl	80075f0 <__assert_func>
 80062f4:	3101      	adds	r1, #1
 80062f6:	105b      	asrs	r3, r3, #1
 80062f8:	e7ee      	b.n	80062d8 <__gethex+0x160>
 80062fa:	f100 0914 	add.w	r9, r0, #20
 80062fe:	f04f 0b00 	mov.w	fp, #0
 8006302:	f1ca 0301 	rsb	r3, sl, #1
 8006306:	f8cd 9008 	str.w	r9, [sp, #8]
 800630a:	f8cd b000 	str.w	fp, [sp]
 800630e:	9306      	str	r3, [sp, #24]
 8006310:	42b7      	cmp	r7, r6
 8006312:	d340      	bcc.n	8006396 <__gethex+0x21e>
 8006314:	9802      	ldr	r0, [sp, #8]
 8006316:	9b00      	ldr	r3, [sp, #0]
 8006318:	f840 3b04 	str.w	r3, [r0], #4
 800631c:	eba0 0009 	sub.w	r0, r0, r9
 8006320:	1080      	asrs	r0, r0, #2
 8006322:	0146      	lsls	r6, r0, #5
 8006324:	6120      	str	r0, [r4, #16]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fb50 	bl	80069cc <__hi0bits>
 800632c:	1a30      	subs	r0, r6, r0
 800632e:	f8d8 6000 	ldr.w	r6, [r8]
 8006332:	42b0      	cmp	r0, r6
 8006334:	dd63      	ble.n	80063fe <__gethex+0x286>
 8006336:	1b87      	subs	r7, r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	4620      	mov	r0, r4
 800633c:	f000 feea 	bl	8007114 <__any_on>
 8006340:	4682      	mov	sl, r0
 8006342:	b1a8      	cbz	r0, 8006370 <__gethex+0x1f8>
 8006344:	1e7b      	subs	r3, r7, #1
 8006346:	1159      	asrs	r1, r3, #5
 8006348:	f003 021f 	and.w	r2, r3, #31
 800634c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006350:	f04f 0a01 	mov.w	sl, #1
 8006354:	fa0a f202 	lsl.w	r2, sl, r2
 8006358:	420a      	tst	r2, r1
 800635a:	d009      	beq.n	8006370 <__gethex+0x1f8>
 800635c:	4553      	cmp	r3, sl
 800635e:	dd05      	ble.n	800636c <__gethex+0x1f4>
 8006360:	1eb9      	subs	r1, r7, #2
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fed6 	bl	8007114 <__any_on>
 8006368:	2800      	cmp	r0, #0
 800636a:	d145      	bne.n	80063f8 <__gethex+0x280>
 800636c:	f04f 0a02 	mov.w	sl, #2
 8006370:	4639      	mov	r1, r7
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff fe98 	bl	80060a8 <rshift>
 8006378:	443d      	add	r5, r7
 800637a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800637e:	42ab      	cmp	r3, r5
 8006380:	da4c      	bge.n	800641c <__gethex+0x2a4>
 8006382:	ee18 0a10 	vmov	r0, s16
 8006386:	4621      	mov	r1, r4
 8006388:	f000 fa6a 	bl	8006860 <_Bfree>
 800638c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800638e:	2300      	movs	r3, #0
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	27a3      	movs	r7, #163	; 0xa3
 8006394:	e785      	b.n	80062a2 <__gethex+0x12a>
 8006396:	1e73      	subs	r3, r6, #1
 8006398:	9a05      	ldr	r2, [sp, #20]
 800639a:	9303      	str	r3, [sp, #12]
 800639c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d019      	beq.n	80063d8 <__gethex+0x260>
 80063a4:	f1bb 0f20 	cmp.w	fp, #32
 80063a8:	d107      	bne.n	80063ba <__gethex+0x242>
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	9a00      	ldr	r2, [sp, #0]
 80063ae:	f843 2b04 	str.w	r2, [r3], #4
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	2300      	movs	r3, #0
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	469b      	mov	fp, r3
 80063ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063be:	f7ff fec5 	bl	800614c <__hexdig_fun>
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	f000 000f 	and.w	r0, r0, #15
 80063c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80063cc:	4303      	orrs	r3, r0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	f10b 0b04 	add.w	fp, fp, #4
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	e00d      	b.n	80063f4 <__gethex+0x27c>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	9a06      	ldr	r2, [sp, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	42bb      	cmp	r3, r7
 80063e0:	d3e0      	bcc.n	80063a4 <__gethex+0x22c>
 80063e2:	4618      	mov	r0, r3
 80063e4:	9901      	ldr	r1, [sp, #4]
 80063e6:	9307      	str	r3, [sp, #28]
 80063e8:	4652      	mov	r2, sl
 80063ea:	f001 f8e1 	bl	80075b0 <strncmp>
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d1d7      	bne.n	80063a4 <__gethex+0x22c>
 80063f4:	461e      	mov	r6, r3
 80063f6:	e78b      	b.n	8006310 <__gethex+0x198>
 80063f8:	f04f 0a03 	mov.w	sl, #3
 80063fc:	e7b8      	b.n	8006370 <__gethex+0x1f8>
 80063fe:	da0a      	bge.n	8006416 <__gethex+0x29e>
 8006400:	1a37      	subs	r7, r6, r0
 8006402:	4621      	mov	r1, r4
 8006404:	ee18 0a10 	vmov	r0, s16
 8006408:	463a      	mov	r2, r7
 800640a:	f000 fc45 	bl	8006c98 <__lshift>
 800640e:	1bed      	subs	r5, r5, r7
 8006410:	4604      	mov	r4, r0
 8006412:	f100 0914 	add.w	r9, r0, #20
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	e7ae      	b.n	800637a <__gethex+0x202>
 800641c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006420:	42a8      	cmp	r0, r5
 8006422:	dd72      	ble.n	800650a <__gethex+0x392>
 8006424:	1b45      	subs	r5, r0, r5
 8006426:	42ae      	cmp	r6, r5
 8006428:	dc36      	bgt.n	8006498 <__gethex+0x320>
 800642a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d02a      	beq.n	8006488 <__gethex+0x310>
 8006432:	2b03      	cmp	r3, #3
 8006434:	d02c      	beq.n	8006490 <__gethex+0x318>
 8006436:	2b01      	cmp	r3, #1
 8006438:	d115      	bne.n	8006466 <__gethex+0x2ee>
 800643a:	42ae      	cmp	r6, r5
 800643c:	d113      	bne.n	8006466 <__gethex+0x2ee>
 800643e:	2e01      	cmp	r6, #1
 8006440:	d10b      	bne.n	800645a <__gethex+0x2e2>
 8006442:	9a04      	ldr	r2, [sp, #16]
 8006444:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	2301      	movs	r3, #1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	f8c9 3000 	str.w	r3, [r9]
 8006452:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006454:	2762      	movs	r7, #98	; 0x62
 8006456:	601c      	str	r4, [r3, #0]
 8006458:	e723      	b.n	80062a2 <__gethex+0x12a>
 800645a:	1e71      	subs	r1, r6, #1
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fe59 	bl	8007114 <__any_on>
 8006462:	2800      	cmp	r0, #0
 8006464:	d1ed      	bne.n	8006442 <__gethex+0x2ca>
 8006466:	ee18 0a10 	vmov	r0, s16
 800646a:	4621      	mov	r1, r4
 800646c:	f000 f9f8 	bl	8006860 <_Bfree>
 8006470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006472:	2300      	movs	r3, #0
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	2750      	movs	r7, #80	; 0x50
 8006478:	e713      	b.n	80062a2 <__gethex+0x12a>
 800647a:	bf00      	nop
 800647c:	080084a8 	.word	0x080084a8
 8006480:	0800842c 	.word	0x0800842c
 8006484:	0800843d 	.word	0x0800843d
 8006488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1eb      	bne.n	8006466 <__gethex+0x2ee>
 800648e:	e7d8      	b.n	8006442 <__gethex+0x2ca>
 8006490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1d5      	bne.n	8006442 <__gethex+0x2ca>
 8006496:	e7e6      	b.n	8006466 <__gethex+0x2ee>
 8006498:	1e6f      	subs	r7, r5, #1
 800649a:	f1ba 0f00 	cmp.w	sl, #0
 800649e:	d131      	bne.n	8006504 <__gethex+0x38c>
 80064a0:	b127      	cbz	r7, 80064ac <__gethex+0x334>
 80064a2:	4639      	mov	r1, r7
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fe35 	bl	8007114 <__any_on>
 80064aa:	4682      	mov	sl, r0
 80064ac:	117b      	asrs	r3, r7, #5
 80064ae:	2101      	movs	r1, #1
 80064b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064b4:	f007 071f 	and.w	r7, r7, #31
 80064b8:	fa01 f707 	lsl.w	r7, r1, r7
 80064bc:	421f      	tst	r7, r3
 80064be:	4629      	mov	r1, r5
 80064c0:	4620      	mov	r0, r4
 80064c2:	bf18      	it	ne
 80064c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80064c8:	1b76      	subs	r6, r6, r5
 80064ca:	f7ff fded 	bl	80060a8 <rshift>
 80064ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064d2:	2702      	movs	r7, #2
 80064d4:	f1ba 0f00 	cmp.w	sl, #0
 80064d8:	d048      	beq.n	800656c <__gethex+0x3f4>
 80064da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d015      	beq.n	800650e <__gethex+0x396>
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d017      	beq.n	8006516 <__gethex+0x39e>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d109      	bne.n	80064fe <__gethex+0x386>
 80064ea:	f01a 0f02 	tst.w	sl, #2
 80064ee:	d006      	beq.n	80064fe <__gethex+0x386>
 80064f0:	f8d9 0000 	ldr.w	r0, [r9]
 80064f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80064f8:	f01a 0f01 	tst.w	sl, #1
 80064fc:	d10e      	bne.n	800651c <__gethex+0x3a4>
 80064fe:	f047 0710 	orr.w	r7, r7, #16
 8006502:	e033      	b.n	800656c <__gethex+0x3f4>
 8006504:	f04f 0a01 	mov.w	sl, #1
 8006508:	e7d0      	b.n	80064ac <__gethex+0x334>
 800650a:	2701      	movs	r7, #1
 800650c:	e7e2      	b.n	80064d4 <__gethex+0x35c>
 800650e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006510:	f1c3 0301 	rsb	r3, r3, #1
 8006514:	9315      	str	r3, [sp, #84]	; 0x54
 8006516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <__gethex+0x386>
 800651c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006520:	f104 0314 	add.w	r3, r4, #20
 8006524:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006528:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800652c:	f04f 0c00 	mov.w	ip, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f853 2b04 	ldr.w	r2, [r3], #4
 8006536:	f1b2 3fff 	cmp.w	r2, #4294967295
 800653a:	d01c      	beq.n	8006576 <__gethex+0x3fe>
 800653c:	3201      	adds	r2, #1
 800653e:	6002      	str	r2, [r0, #0]
 8006540:	2f02      	cmp	r7, #2
 8006542:	f104 0314 	add.w	r3, r4, #20
 8006546:	d13f      	bne.n	80065c8 <__gethex+0x450>
 8006548:	f8d8 2000 	ldr.w	r2, [r8]
 800654c:	3a01      	subs	r2, #1
 800654e:	42b2      	cmp	r2, r6
 8006550:	d10a      	bne.n	8006568 <__gethex+0x3f0>
 8006552:	1171      	asrs	r1, r6, #5
 8006554:	2201      	movs	r2, #1
 8006556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800655a:	f006 061f 	and.w	r6, r6, #31
 800655e:	fa02 f606 	lsl.w	r6, r2, r6
 8006562:	421e      	tst	r6, r3
 8006564:	bf18      	it	ne
 8006566:	4617      	movne	r7, r2
 8006568:	f047 0720 	orr.w	r7, r7, #32
 800656c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800656e:	601c      	str	r4, [r3, #0]
 8006570:	9b04      	ldr	r3, [sp, #16]
 8006572:	601d      	str	r5, [r3, #0]
 8006574:	e695      	b.n	80062a2 <__gethex+0x12a>
 8006576:	4299      	cmp	r1, r3
 8006578:	f843 cc04 	str.w	ip, [r3, #-4]
 800657c:	d8d8      	bhi.n	8006530 <__gethex+0x3b8>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	459b      	cmp	fp, r3
 8006582:	db19      	blt.n	80065b8 <__gethex+0x440>
 8006584:	6861      	ldr	r1, [r4, #4]
 8006586:	ee18 0a10 	vmov	r0, s16
 800658a:	3101      	adds	r1, #1
 800658c:	f000 f928 	bl	80067e0 <_Balloc>
 8006590:	4681      	mov	r9, r0
 8006592:	b918      	cbnz	r0, 800659c <__gethex+0x424>
 8006594:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <__gethex+0x488>)
 8006596:	4602      	mov	r2, r0
 8006598:	2184      	movs	r1, #132	; 0x84
 800659a:	e6a8      	b.n	80062ee <__gethex+0x176>
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	3202      	adds	r2, #2
 80065a0:	f104 010c 	add.w	r1, r4, #12
 80065a4:	0092      	lsls	r2, r2, #2
 80065a6:	300c      	adds	r0, #12
 80065a8:	f000 f90c 	bl	80067c4 <memcpy>
 80065ac:	4621      	mov	r1, r4
 80065ae:	ee18 0a10 	vmov	r0, s16
 80065b2:	f000 f955 	bl	8006860 <_Bfree>
 80065b6:	464c      	mov	r4, r9
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065c0:	6122      	str	r2, [r4, #16]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
 80065c6:	e7bb      	b.n	8006540 <__gethex+0x3c8>
 80065c8:	6922      	ldr	r2, [r4, #16]
 80065ca:	455a      	cmp	r2, fp
 80065cc:	dd0b      	ble.n	80065e6 <__gethex+0x46e>
 80065ce:	2101      	movs	r1, #1
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff fd69 	bl	80060a8 <rshift>
 80065d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065da:	3501      	adds	r5, #1
 80065dc:	42ab      	cmp	r3, r5
 80065de:	f6ff aed0 	blt.w	8006382 <__gethex+0x20a>
 80065e2:	2701      	movs	r7, #1
 80065e4:	e7c0      	b.n	8006568 <__gethex+0x3f0>
 80065e6:	f016 061f 	ands.w	r6, r6, #31
 80065ea:	d0fa      	beq.n	80065e2 <__gethex+0x46a>
 80065ec:	449a      	add	sl, r3
 80065ee:	f1c6 0620 	rsb	r6, r6, #32
 80065f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80065f6:	f000 f9e9 	bl	80069cc <__hi0bits>
 80065fa:	42b0      	cmp	r0, r6
 80065fc:	dbe7      	blt.n	80065ce <__gethex+0x456>
 80065fe:	e7f0      	b.n	80065e2 <__gethex+0x46a>
 8006600:	0800842c 	.word	0x0800842c

08006604 <L_shift>:
 8006604:	f1c2 0208 	rsb	r2, r2, #8
 8006608:	0092      	lsls	r2, r2, #2
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	f1c2 0620 	rsb	r6, r2, #32
 8006610:	6843      	ldr	r3, [r0, #4]
 8006612:	6804      	ldr	r4, [r0, #0]
 8006614:	fa03 f506 	lsl.w	r5, r3, r6
 8006618:	432c      	orrs	r4, r5
 800661a:	40d3      	lsrs	r3, r2
 800661c:	6004      	str	r4, [r0, #0]
 800661e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006622:	4288      	cmp	r0, r1
 8006624:	d3f4      	bcc.n	8006610 <L_shift+0xc>
 8006626:	bd70      	pop	{r4, r5, r6, pc}

08006628 <__match>:
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	6803      	ldr	r3, [r0, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006632:	b914      	cbnz	r4, 800663a <__match+0x12>
 8006634:	6003      	str	r3, [r0, #0]
 8006636:	2001      	movs	r0, #1
 8006638:	bd30      	pop	{r4, r5, pc}
 800663a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006642:	2d19      	cmp	r5, #25
 8006644:	bf98      	it	ls
 8006646:	3220      	addls	r2, #32
 8006648:	42a2      	cmp	r2, r4
 800664a:	d0f0      	beq.n	800662e <__match+0x6>
 800664c:	2000      	movs	r0, #0
 800664e:	e7f3      	b.n	8006638 <__match+0x10>

08006650 <__hexnan>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	680b      	ldr	r3, [r1, #0]
 8006656:	6801      	ldr	r1, [r0, #0]
 8006658:	115e      	asrs	r6, r3, #5
 800665a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800665e:	f013 031f 	ands.w	r3, r3, #31
 8006662:	b087      	sub	sp, #28
 8006664:	bf18      	it	ne
 8006666:	3604      	addne	r6, #4
 8006668:	2500      	movs	r5, #0
 800666a:	1f37      	subs	r7, r6, #4
 800666c:	4682      	mov	sl, r0
 800666e:	4690      	mov	r8, r2
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f846 5c04 	str.w	r5, [r6, #-4]
 8006676:	46b9      	mov	r9, r7
 8006678:	463c      	mov	r4, r7
 800667a:	9502      	str	r5, [sp, #8]
 800667c:	46ab      	mov	fp, r5
 800667e:	784a      	ldrb	r2, [r1, #1]
 8006680:	1c4b      	adds	r3, r1, #1
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	b342      	cbz	r2, 80066d8 <__hexnan+0x88>
 8006686:	4610      	mov	r0, r2
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	9204      	str	r2, [sp, #16]
 800668c:	f7ff fd5e 	bl	800614c <__hexdig_fun>
 8006690:	2800      	cmp	r0, #0
 8006692:	d14f      	bne.n	8006734 <__hexnan+0xe4>
 8006694:	9a04      	ldr	r2, [sp, #16]
 8006696:	9905      	ldr	r1, [sp, #20]
 8006698:	2a20      	cmp	r2, #32
 800669a:	d818      	bhi.n	80066ce <__hexnan+0x7e>
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	459b      	cmp	fp, r3
 80066a0:	dd13      	ble.n	80066ca <__hexnan+0x7a>
 80066a2:	454c      	cmp	r4, r9
 80066a4:	d206      	bcs.n	80066b4 <__hexnan+0x64>
 80066a6:	2d07      	cmp	r5, #7
 80066a8:	dc04      	bgt.n	80066b4 <__hexnan+0x64>
 80066aa:	462a      	mov	r2, r5
 80066ac:	4649      	mov	r1, r9
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff ffa8 	bl	8006604 <L_shift>
 80066b4:	4544      	cmp	r4, r8
 80066b6:	d950      	bls.n	800675a <__hexnan+0x10a>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f1a4 0904 	sub.w	r9, r4, #4
 80066be:	f844 3c04 	str.w	r3, [r4, #-4]
 80066c2:	f8cd b008 	str.w	fp, [sp, #8]
 80066c6:	464c      	mov	r4, r9
 80066c8:	461d      	mov	r5, r3
 80066ca:	9903      	ldr	r1, [sp, #12]
 80066cc:	e7d7      	b.n	800667e <__hexnan+0x2e>
 80066ce:	2a29      	cmp	r2, #41	; 0x29
 80066d0:	d156      	bne.n	8006780 <__hexnan+0x130>
 80066d2:	3102      	adds	r1, #2
 80066d4:	f8ca 1000 	str.w	r1, [sl]
 80066d8:	f1bb 0f00 	cmp.w	fp, #0
 80066dc:	d050      	beq.n	8006780 <__hexnan+0x130>
 80066de:	454c      	cmp	r4, r9
 80066e0:	d206      	bcs.n	80066f0 <__hexnan+0xa0>
 80066e2:	2d07      	cmp	r5, #7
 80066e4:	dc04      	bgt.n	80066f0 <__hexnan+0xa0>
 80066e6:	462a      	mov	r2, r5
 80066e8:	4649      	mov	r1, r9
 80066ea:	4620      	mov	r0, r4
 80066ec:	f7ff ff8a 	bl	8006604 <L_shift>
 80066f0:	4544      	cmp	r4, r8
 80066f2:	d934      	bls.n	800675e <__hexnan+0x10e>
 80066f4:	f1a8 0204 	sub.w	r2, r8, #4
 80066f8:	4623      	mov	r3, r4
 80066fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80066fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8006702:	429f      	cmp	r7, r3
 8006704:	d2f9      	bcs.n	80066fa <__hexnan+0xaa>
 8006706:	1b3b      	subs	r3, r7, r4
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	3304      	adds	r3, #4
 800670e:	3401      	adds	r4, #1
 8006710:	3e03      	subs	r6, #3
 8006712:	42b4      	cmp	r4, r6
 8006714:	bf88      	it	hi
 8006716:	2304      	movhi	r3, #4
 8006718:	4443      	add	r3, r8
 800671a:	2200      	movs	r2, #0
 800671c:	f843 2b04 	str.w	r2, [r3], #4
 8006720:	429f      	cmp	r7, r3
 8006722:	d2fb      	bcs.n	800671c <__hexnan+0xcc>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	b91b      	cbnz	r3, 8006730 <__hexnan+0xe0>
 8006728:	4547      	cmp	r7, r8
 800672a:	d127      	bne.n	800677c <__hexnan+0x12c>
 800672c:	2301      	movs	r3, #1
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	2005      	movs	r0, #5
 8006732:	e026      	b.n	8006782 <__hexnan+0x132>
 8006734:	3501      	adds	r5, #1
 8006736:	2d08      	cmp	r5, #8
 8006738:	f10b 0b01 	add.w	fp, fp, #1
 800673c:	dd06      	ble.n	800674c <__hexnan+0xfc>
 800673e:	4544      	cmp	r4, r8
 8006740:	d9c3      	bls.n	80066ca <__hexnan+0x7a>
 8006742:	2300      	movs	r3, #0
 8006744:	f844 3c04 	str.w	r3, [r4, #-4]
 8006748:	2501      	movs	r5, #1
 800674a:	3c04      	subs	r4, #4
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	f000 000f 	and.w	r0, r0, #15
 8006752:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006756:	6022      	str	r2, [r4, #0]
 8006758:	e7b7      	b.n	80066ca <__hexnan+0x7a>
 800675a:	2508      	movs	r5, #8
 800675c:	e7b5      	b.n	80066ca <__hexnan+0x7a>
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0df      	beq.n	8006724 <__hexnan+0xd4>
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	f1c3 0320 	rsb	r3, r3, #32
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006774:	401a      	ands	r2, r3
 8006776:	f846 2c04 	str.w	r2, [r6, #-4]
 800677a:	e7d3      	b.n	8006724 <__hexnan+0xd4>
 800677c:	3f04      	subs	r7, #4
 800677e:	e7d1      	b.n	8006724 <__hexnan+0xd4>
 8006780:	2004      	movs	r0, #4
 8006782:	b007      	add	sp, #28
 8006784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006788 <_localeconv_r>:
 8006788:	4800      	ldr	r0, [pc, #0]	; (800678c <_localeconv_r+0x4>)
 800678a:	4770      	bx	lr
 800678c:	20000238 	.word	0x20000238

08006790 <malloc>:
 8006790:	4b02      	ldr	r3, [pc, #8]	; (800679c <malloc+0xc>)
 8006792:	4601      	mov	r1, r0
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	f000 bd3d 	b.w	8007214 <_malloc_r>
 800679a:	bf00      	nop
 800679c:	200000e0 	.word	0x200000e0

080067a0 <__ascii_mbtowc>:
 80067a0:	b082      	sub	sp, #8
 80067a2:	b901      	cbnz	r1, 80067a6 <__ascii_mbtowc+0x6>
 80067a4:	a901      	add	r1, sp, #4
 80067a6:	b142      	cbz	r2, 80067ba <__ascii_mbtowc+0x1a>
 80067a8:	b14b      	cbz	r3, 80067be <__ascii_mbtowc+0x1e>
 80067aa:	7813      	ldrb	r3, [r2, #0]
 80067ac:	600b      	str	r3, [r1, #0]
 80067ae:	7812      	ldrb	r2, [r2, #0]
 80067b0:	1e10      	subs	r0, r2, #0
 80067b2:	bf18      	it	ne
 80067b4:	2001      	movne	r0, #1
 80067b6:	b002      	add	sp, #8
 80067b8:	4770      	bx	lr
 80067ba:	4610      	mov	r0, r2
 80067bc:	e7fb      	b.n	80067b6 <__ascii_mbtowc+0x16>
 80067be:	f06f 0001 	mvn.w	r0, #1
 80067c2:	e7f8      	b.n	80067b6 <__ascii_mbtowc+0x16>

080067c4 <memcpy>:
 80067c4:	440a      	add	r2, r1
 80067c6:	4291      	cmp	r1, r2
 80067c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067cc:	d100      	bne.n	80067d0 <memcpy+0xc>
 80067ce:	4770      	bx	lr
 80067d0:	b510      	push	{r4, lr}
 80067d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067da:	4291      	cmp	r1, r2
 80067dc:	d1f9      	bne.n	80067d2 <memcpy+0xe>
 80067de:	bd10      	pop	{r4, pc}

080067e0 <_Balloc>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067e4:	4604      	mov	r4, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	b976      	cbnz	r6, 8006808 <_Balloc+0x28>
 80067ea:	2010      	movs	r0, #16
 80067ec:	f7ff ffd0 	bl	8006790 <malloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6260      	str	r0, [r4, #36]	; 0x24
 80067f4:	b920      	cbnz	r0, 8006800 <_Balloc+0x20>
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <_Balloc+0x78>)
 80067f8:	4818      	ldr	r0, [pc, #96]	; (800685c <_Balloc+0x7c>)
 80067fa:	2166      	movs	r1, #102	; 0x66
 80067fc:	f000 fef8 	bl	80075f0 <__assert_func>
 8006800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006804:	6006      	str	r6, [r0, #0]
 8006806:	60c6      	str	r6, [r0, #12]
 8006808:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800680a:	68f3      	ldr	r3, [r6, #12]
 800680c:	b183      	cbz	r3, 8006830 <_Balloc+0x50>
 800680e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006816:	b9b8      	cbnz	r0, 8006848 <_Balloc+0x68>
 8006818:	2101      	movs	r1, #1
 800681a:	fa01 f605 	lsl.w	r6, r1, r5
 800681e:	1d72      	adds	r2, r6, #5
 8006820:	0092      	lsls	r2, r2, #2
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fc97 	bl	8007156 <_calloc_r>
 8006828:	b160      	cbz	r0, 8006844 <_Balloc+0x64>
 800682a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800682e:	e00e      	b.n	800684e <_Balloc+0x6e>
 8006830:	2221      	movs	r2, #33	; 0x21
 8006832:	2104      	movs	r1, #4
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fc8e 	bl	8007156 <_calloc_r>
 800683a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800683c:	60f0      	str	r0, [r6, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e4      	bne.n	800680e <_Balloc+0x2e>
 8006844:	2000      	movs	r0, #0
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	6802      	ldr	r2, [r0, #0]
 800684a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800684e:	2300      	movs	r3, #0
 8006850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006854:	e7f7      	b.n	8006846 <_Balloc+0x66>
 8006856:	bf00      	nop
 8006858:	080083b6 	.word	0x080083b6
 800685c:	080084bc 	.word	0x080084bc

08006860 <_Bfree>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006864:	4605      	mov	r5, r0
 8006866:	460c      	mov	r4, r1
 8006868:	b976      	cbnz	r6, 8006888 <_Bfree+0x28>
 800686a:	2010      	movs	r0, #16
 800686c:	f7ff ff90 	bl	8006790 <malloc>
 8006870:	4602      	mov	r2, r0
 8006872:	6268      	str	r0, [r5, #36]	; 0x24
 8006874:	b920      	cbnz	r0, 8006880 <_Bfree+0x20>
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <_Bfree+0x3c>)
 8006878:	4809      	ldr	r0, [pc, #36]	; (80068a0 <_Bfree+0x40>)
 800687a:	218a      	movs	r1, #138	; 0x8a
 800687c:	f000 feb8 	bl	80075f0 <__assert_func>
 8006880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006884:	6006      	str	r6, [r0, #0]
 8006886:	60c6      	str	r6, [r0, #12]
 8006888:	b13c      	cbz	r4, 800689a <_Bfree+0x3a>
 800688a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800688c:	6862      	ldr	r2, [r4, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006894:	6021      	str	r1, [r4, #0]
 8006896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	080083b6 	.word	0x080083b6
 80068a0:	080084bc 	.word	0x080084bc

080068a4 <__multadd>:
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	690e      	ldr	r6, [r1, #16]
 80068aa:	4607      	mov	r7, r0
 80068ac:	4698      	mov	r8, r3
 80068ae:	460c      	mov	r4, r1
 80068b0:	f101 0014 	add.w	r0, r1, #20
 80068b4:	2300      	movs	r3, #0
 80068b6:	6805      	ldr	r5, [r0, #0]
 80068b8:	b2a9      	uxth	r1, r5
 80068ba:	fb02 8101 	mla	r1, r2, r1, r8
 80068be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068c2:	0c2d      	lsrs	r5, r5, #16
 80068c4:	fb02 c505 	mla	r5, r2, r5, ip
 80068c8:	b289      	uxth	r1, r1
 80068ca:	3301      	adds	r3, #1
 80068cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068d0:	429e      	cmp	r6, r3
 80068d2:	f840 1b04 	str.w	r1, [r0], #4
 80068d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80068da:	dcec      	bgt.n	80068b6 <__multadd+0x12>
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	d022      	beq.n	8006928 <__multadd+0x84>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	dc19      	bgt.n	800691c <__multadd+0x78>
 80068e8:	6861      	ldr	r1, [r4, #4]
 80068ea:	4638      	mov	r0, r7
 80068ec:	3101      	adds	r1, #1
 80068ee:	f7ff ff77 	bl	80067e0 <_Balloc>
 80068f2:	4605      	mov	r5, r0
 80068f4:	b928      	cbnz	r0, 8006902 <__multadd+0x5e>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <__multadd+0x8c>)
 80068fa:	480e      	ldr	r0, [pc, #56]	; (8006934 <__multadd+0x90>)
 80068fc:	21b5      	movs	r1, #181	; 0xb5
 80068fe:	f000 fe77 	bl	80075f0 <__assert_func>
 8006902:	6922      	ldr	r2, [r4, #16]
 8006904:	3202      	adds	r2, #2
 8006906:	f104 010c 	add.w	r1, r4, #12
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	300c      	adds	r0, #12
 800690e:	f7ff ff59 	bl	80067c4 <memcpy>
 8006912:	4621      	mov	r1, r4
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff ffa3 	bl	8006860 <_Bfree>
 800691a:	462c      	mov	r4, r5
 800691c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006920:	3601      	adds	r6, #1
 8006922:	f8c3 8014 	str.w	r8, [r3, #20]
 8006926:	6126      	str	r6, [r4, #16]
 8006928:	4620      	mov	r0, r4
 800692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800692e:	bf00      	nop
 8006930:	0800842c 	.word	0x0800842c
 8006934:	080084bc 	.word	0x080084bc

08006938 <__s2b>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	460c      	mov	r4, r1
 800693e:	4615      	mov	r5, r2
 8006940:	461f      	mov	r7, r3
 8006942:	2209      	movs	r2, #9
 8006944:	3308      	adds	r3, #8
 8006946:	4606      	mov	r6, r0
 8006948:	fb93 f3f2 	sdiv	r3, r3, r2
 800694c:	2100      	movs	r1, #0
 800694e:	2201      	movs	r2, #1
 8006950:	429a      	cmp	r2, r3
 8006952:	db09      	blt.n	8006968 <__s2b+0x30>
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff ff43 	bl	80067e0 <_Balloc>
 800695a:	b940      	cbnz	r0, 800696e <__s2b+0x36>
 800695c:	4602      	mov	r2, r0
 800695e:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <__s2b+0x8c>)
 8006960:	4819      	ldr	r0, [pc, #100]	; (80069c8 <__s2b+0x90>)
 8006962:	21ce      	movs	r1, #206	; 0xce
 8006964:	f000 fe44 	bl	80075f0 <__assert_func>
 8006968:	0052      	lsls	r2, r2, #1
 800696a:	3101      	adds	r1, #1
 800696c:	e7f0      	b.n	8006950 <__s2b+0x18>
 800696e:	9b08      	ldr	r3, [sp, #32]
 8006970:	6143      	str	r3, [r0, #20]
 8006972:	2d09      	cmp	r5, #9
 8006974:	f04f 0301 	mov.w	r3, #1
 8006978:	6103      	str	r3, [r0, #16]
 800697a:	dd16      	ble.n	80069aa <__s2b+0x72>
 800697c:	f104 0909 	add.w	r9, r4, #9
 8006980:	46c8      	mov	r8, r9
 8006982:	442c      	add	r4, r5
 8006984:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006988:	4601      	mov	r1, r0
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	220a      	movs	r2, #10
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ff88 	bl	80068a4 <__multadd>
 8006994:	45a0      	cmp	r8, r4
 8006996:	d1f5      	bne.n	8006984 <__s2b+0x4c>
 8006998:	f1a5 0408 	sub.w	r4, r5, #8
 800699c:	444c      	add	r4, r9
 800699e:	1b2d      	subs	r5, r5, r4
 80069a0:	1963      	adds	r3, r4, r5
 80069a2:	42bb      	cmp	r3, r7
 80069a4:	db04      	blt.n	80069b0 <__s2b+0x78>
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	340a      	adds	r4, #10
 80069ac:	2509      	movs	r5, #9
 80069ae:	e7f6      	b.n	800699e <__s2b+0x66>
 80069b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069b4:	4601      	mov	r1, r0
 80069b6:	3b30      	subs	r3, #48	; 0x30
 80069b8:	220a      	movs	r2, #10
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff72 	bl	80068a4 <__multadd>
 80069c0:	e7ee      	b.n	80069a0 <__s2b+0x68>
 80069c2:	bf00      	nop
 80069c4:	0800842c 	.word	0x0800842c
 80069c8:	080084bc 	.word	0x080084bc

080069cc <__hi0bits>:
 80069cc:	0c03      	lsrs	r3, r0, #16
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	b9d3      	cbnz	r3, 8006a08 <__hi0bits+0x3c>
 80069d2:	0400      	lsls	r0, r0, #16
 80069d4:	2310      	movs	r3, #16
 80069d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069da:	bf04      	itt	eq
 80069dc:	0200      	lsleq	r0, r0, #8
 80069de:	3308      	addeq	r3, #8
 80069e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069e4:	bf04      	itt	eq
 80069e6:	0100      	lsleq	r0, r0, #4
 80069e8:	3304      	addeq	r3, #4
 80069ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069ee:	bf04      	itt	eq
 80069f0:	0080      	lsleq	r0, r0, #2
 80069f2:	3302      	addeq	r3, #2
 80069f4:	2800      	cmp	r0, #0
 80069f6:	db05      	blt.n	8006a04 <__hi0bits+0x38>
 80069f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069fc:	f103 0301 	add.w	r3, r3, #1
 8006a00:	bf08      	it	eq
 8006a02:	2320      	moveq	r3, #32
 8006a04:	4618      	mov	r0, r3
 8006a06:	4770      	bx	lr
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e7e4      	b.n	80069d6 <__hi0bits+0xa>

08006a0c <__lo0bits>:
 8006a0c:	6803      	ldr	r3, [r0, #0]
 8006a0e:	f013 0207 	ands.w	r2, r3, #7
 8006a12:	4601      	mov	r1, r0
 8006a14:	d00b      	beq.n	8006a2e <__lo0bits+0x22>
 8006a16:	07da      	lsls	r2, r3, #31
 8006a18:	d424      	bmi.n	8006a64 <__lo0bits+0x58>
 8006a1a:	0798      	lsls	r0, r3, #30
 8006a1c:	bf49      	itett	mi
 8006a1e:	085b      	lsrmi	r3, r3, #1
 8006a20:	089b      	lsrpl	r3, r3, #2
 8006a22:	2001      	movmi	r0, #1
 8006a24:	600b      	strmi	r3, [r1, #0]
 8006a26:	bf5c      	itt	pl
 8006a28:	600b      	strpl	r3, [r1, #0]
 8006a2a:	2002      	movpl	r0, #2
 8006a2c:	4770      	bx	lr
 8006a2e:	b298      	uxth	r0, r3
 8006a30:	b9b0      	cbnz	r0, 8006a60 <__lo0bits+0x54>
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	2010      	movs	r0, #16
 8006a36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a3a:	bf04      	itt	eq
 8006a3c:	0a1b      	lsreq	r3, r3, #8
 8006a3e:	3008      	addeq	r0, #8
 8006a40:	071a      	lsls	r2, r3, #28
 8006a42:	bf04      	itt	eq
 8006a44:	091b      	lsreq	r3, r3, #4
 8006a46:	3004      	addeq	r0, #4
 8006a48:	079a      	lsls	r2, r3, #30
 8006a4a:	bf04      	itt	eq
 8006a4c:	089b      	lsreq	r3, r3, #2
 8006a4e:	3002      	addeq	r0, #2
 8006a50:	07da      	lsls	r2, r3, #31
 8006a52:	d403      	bmi.n	8006a5c <__lo0bits+0x50>
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	f100 0001 	add.w	r0, r0, #1
 8006a5a:	d005      	beq.n	8006a68 <__lo0bits+0x5c>
 8006a5c:	600b      	str	r3, [r1, #0]
 8006a5e:	4770      	bx	lr
 8006a60:	4610      	mov	r0, r2
 8006a62:	e7e8      	b.n	8006a36 <__lo0bits+0x2a>
 8006a64:	2000      	movs	r0, #0
 8006a66:	4770      	bx	lr
 8006a68:	2020      	movs	r0, #32
 8006a6a:	4770      	bx	lr

08006a6c <__i2b>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	460c      	mov	r4, r1
 8006a70:	2101      	movs	r1, #1
 8006a72:	f7ff feb5 	bl	80067e0 <_Balloc>
 8006a76:	4602      	mov	r2, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <__i2b+0x1a>
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <__i2b+0x24>)
 8006a7c:	4805      	ldr	r0, [pc, #20]	; (8006a94 <__i2b+0x28>)
 8006a7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a82:	f000 fdb5 	bl	80075f0 <__assert_func>
 8006a86:	2301      	movs	r3, #1
 8006a88:	6144      	str	r4, [r0, #20]
 8006a8a:	6103      	str	r3, [r0, #16]
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	0800842c 	.word	0x0800842c
 8006a94:	080084bc 	.word	0x080084bc

08006a98 <__multiply>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	690a      	ldr	r2, [r1, #16]
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	bfb8      	it	lt
 8006aa6:	460b      	movlt	r3, r1
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	bfbc      	itt	lt
 8006aac:	4625      	movlt	r5, r4
 8006aae:	461c      	movlt	r4, r3
 8006ab0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ab4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ab8:	68ab      	ldr	r3, [r5, #8]
 8006aba:	6869      	ldr	r1, [r5, #4]
 8006abc:	eb0a 0709 	add.w	r7, sl, r9
 8006ac0:	42bb      	cmp	r3, r7
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	bfb8      	it	lt
 8006ac6:	3101      	addlt	r1, #1
 8006ac8:	f7ff fe8a 	bl	80067e0 <_Balloc>
 8006acc:	b930      	cbnz	r0, 8006adc <__multiply+0x44>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <__multiply+0x144>)
 8006ad2:	4843      	ldr	r0, [pc, #268]	; (8006be0 <__multiply+0x148>)
 8006ad4:	f240 115d 	movw	r1, #349	; 0x15d
 8006ad8:	f000 fd8a 	bl	80075f0 <__assert_func>
 8006adc:	f100 0614 	add.w	r6, r0, #20
 8006ae0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4543      	cmp	r3, r8
 8006aea:	d31e      	bcc.n	8006b2a <__multiply+0x92>
 8006aec:	f105 0c14 	add.w	ip, r5, #20
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006af8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006afc:	9202      	str	r2, [sp, #8]
 8006afe:	ebac 0205 	sub.w	r2, ip, r5
 8006b02:	3a15      	subs	r2, #21
 8006b04:	f022 0203 	bic.w	r2, r2, #3
 8006b08:	3204      	adds	r2, #4
 8006b0a:	f105 0115 	add.w	r1, r5, #21
 8006b0e:	458c      	cmp	ip, r1
 8006b10:	bf38      	it	cc
 8006b12:	2204      	movcc	r2, #4
 8006b14:	9201      	str	r2, [sp, #4]
 8006b16:	9a02      	ldr	r2, [sp, #8]
 8006b18:	9303      	str	r3, [sp, #12]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d808      	bhi.n	8006b30 <__multiply+0x98>
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	dc55      	bgt.n	8006bce <__multiply+0x136>
 8006b22:	6107      	str	r7, [r0, #16]
 8006b24:	b005      	add	sp, #20
 8006b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2a:	f843 2b04 	str.w	r2, [r3], #4
 8006b2e:	e7db      	b.n	8006ae8 <__multiply+0x50>
 8006b30:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b34:	f1ba 0f00 	cmp.w	sl, #0
 8006b38:	d020      	beq.n	8006b7c <__multiply+0xe4>
 8006b3a:	f105 0e14 	add.w	lr, r5, #20
 8006b3e:	46b1      	mov	r9, r6
 8006b40:	2200      	movs	r2, #0
 8006b42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b46:	f8d9 b000 	ldr.w	fp, [r9]
 8006b4a:	b2a1      	uxth	r1, r4
 8006b4c:	fa1f fb8b 	uxth.w	fp, fp
 8006b50:	fb0a b101 	mla	r1, sl, r1, fp
 8006b54:	4411      	add	r1, r2
 8006b56:	f8d9 2000 	ldr.w	r2, [r9]
 8006b5a:	0c24      	lsrs	r4, r4, #16
 8006b5c:	0c12      	lsrs	r2, r2, #16
 8006b5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b66:	b289      	uxth	r1, r1
 8006b68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b6c:	45f4      	cmp	ip, lr
 8006b6e:	f849 1b04 	str.w	r1, [r9], #4
 8006b72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b76:	d8e4      	bhi.n	8006b42 <__multiply+0xaa>
 8006b78:	9901      	ldr	r1, [sp, #4]
 8006b7a:	5072      	str	r2, [r6, r1]
 8006b7c:	9a03      	ldr	r2, [sp, #12]
 8006b7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b82:	3304      	adds	r3, #4
 8006b84:	f1b9 0f00 	cmp.w	r9, #0
 8006b88:	d01f      	beq.n	8006bca <__multiply+0x132>
 8006b8a:	6834      	ldr	r4, [r6, #0]
 8006b8c:	f105 0114 	add.w	r1, r5, #20
 8006b90:	46b6      	mov	lr, r6
 8006b92:	f04f 0a00 	mov.w	sl, #0
 8006b96:	880a      	ldrh	r2, [r1, #0]
 8006b98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b9c:	fb09 b202 	mla	r2, r9, r2, fp
 8006ba0:	4492      	add	sl, r2
 8006ba2:	b2a4      	uxth	r4, r4
 8006ba4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ba8:	f84e 4b04 	str.w	r4, [lr], #4
 8006bac:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bb0:	f8be 2000 	ldrh.w	r2, [lr]
 8006bb4:	0c24      	lsrs	r4, r4, #16
 8006bb6:	fb09 2404 	mla	r4, r9, r4, r2
 8006bba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006bbe:	458c      	cmp	ip, r1
 8006bc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bc4:	d8e7      	bhi.n	8006b96 <__multiply+0xfe>
 8006bc6:	9a01      	ldr	r2, [sp, #4]
 8006bc8:	50b4      	str	r4, [r6, r2]
 8006bca:	3604      	adds	r6, #4
 8006bcc:	e7a3      	b.n	8006b16 <__multiply+0x7e>
 8006bce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1a5      	bne.n	8006b22 <__multiply+0x8a>
 8006bd6:	3f01      	subs	r7, #1
 8006bd8:	e7a1      	b.n	8006b1e <__multiply+0x86>
 8006bda:	bf00      	nop
 8006bdc:	0800842c 	.word	0x0800842c
 8006be0:	080084bc 	.word	0x080084bc

08006be4 <__pow5mult>:
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be8:	4615      	mov	r5, r2
 8006bea:	f012 0203 	ands.w	r2, r2, #3
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	d007      	beq.n	8006c04 <__pow5mult+0x20>
 8006bf4:	4c25      	ldr	r4, [pc, #148]	; (8006c8c <__pow5mult+0xa8>)
 8006bf6:	3a01      	subs	r2, #1
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bfe:	f7ff fe51 	bl	80068a4 <__multadd>
 8006c02:	4607      	mov	r7, r0
 8006c04:	10ad      	asrs	r5, r5, #2
 8006c06:	d03d      	beq.n	8006c84 <__pow5mult+0xa0>
 8006c08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c0a:	b97c      	cbnz	r4, 8006c2c <__pow5mult+0x48>
 8006c0c:	2010      	movs	r0, #16
 8006c0e:	f7ff fdbf 	bl	8006790 <malloc>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6270      	str	r0, [r6, #36]	; 0x24
 8006c16:	b928      	cbnz	r0, 8006c24 <__pow5mult+0x40>
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <__pow5mult+0xac>)
 8006c1a:	481e      	ldr	r0, [pc, #120]	; (8006c94 <__pow5mult+0xb0>)
 8006c1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c20:	f000 fce6 	bl	80075f0 <__assert_func>
 8006c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c28:	6004      	str	r4, [r0, #0]
 8006c2a:	60c4      	str	r4, [r0, #12]
 8006c2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c34:	b94c      	cbnz	r4, 8006c4a <__pow5mult+0x66>
 8006c36:	f240 2171 	movw	r1, #625	; 0x271
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ff16 	bl	8006a6c <__i2b>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c46:	4604      	mov	r4, r0
 8006c48:	6003      	str	r3, [r0, #0]
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	07eb      	lsls	r3, r5, #31
 8006c50:	d50a      	bpl.n	8006c68 <__pow5mult+0x84>
 8006c52:	4639      	mov	r1, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ff1e 	bl	8006a98 <__multiply>
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4630      	mov	r0, r6
 8006c62:	f7ff fdfd 	bl	8006860 <_Bfree>
 8006c66:	4647      	mov	r7, r8
 8006c68:	106d      	asrs	r5, r5, #1
 8006c6a:	d00b      	beq.n	8006c84 <__pow5mult+0xa0>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	b938      	cbnz	r0, 8006c80 <__pow5mult+0x9c>
 8006c70:	4622      	mov	r2, r4
 8006c72:	4621      	mov	r1, r4
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff ff0f 	bl	8006a98 <__multiply>
 8006c7a:	6020      	str	r0, [r4, #0]
 8006c7c:	f8c0 9000 	str.w	r9, [r0]
 8006c80:	4604      	mov	r4, r0
 8006c82:	e7e4      	b.n	8006c4e <__pow5mult+0x6a>
 8006c84:	4638      	mov	r0, r7
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	bf00      	nop
 8006c8c:	08008610 	.word	0x08008610
 8006c90:	080083b6 	.word	0x080083b6
 8006c94:	080084bc 	.word	0x080084bc

08006c98 <__lshift>:
 8006c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	6849      	ldr	r1, [r1, #4]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ca6:	68a3      	ldr	r3, [r4, #8]
 8006ca8:	4607      	mov	r7, r0
 8006caa:	4691      	mov	r9, r2
 8006cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cb0:	f108 0601 	add.w	r6, r8, #1
 8006cb4:	42b3      	cmp	r3, r6
 8006cb6:	db0b      	blt.n	8006cd0 <__lshift+0x38>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff fd91 	bl	80067e0 <_Balloc>
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b948      	cbnz	r0, 8006cd6 <__lshift+0x3e>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <__lshift+0xd0>)
 8006cc6:	4829      	ldr	r0, [pc, #164]	; (8006d6c <__lshift+0xd4>)
 8006cc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ccc:	f000 fc90 	bl	80075f0 <__assert_func>
 8006cd0:	3101      	adds	r1, #1
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__lshift+0x1c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f100 0114 	add.w	r1, r0, #20
 8006cdc:	f100 0210 	add.w	r2, r0, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	4553      	cmp	r3, sl
 8006ce4:	db33      	blt.n	8006d4e <__lshift+0xb6>
 8006ce6:	6920      	ldr	r0, [r4, #16]
 8006ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cec:	f104 0314 	add.w	r3, r4, #20
 8006cf0:	f019 091f 	ands.w	r9, r9, #31
 8006cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cfc:	d02b      	beq.n	8006d56 <__lshift+0xbe>
 8006cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8006d02:	468a      	mov	sl, r1
 8006d04:	2200      	movs	r2, #0
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	fa00 f009 	lsl.w	r0, r0, r9
 8006d0c:	4302      	orrs	r2, r0
 8006d0e:	f84a 2b04 	str.w	r2, [sl], #4
 8006d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d16:	459c      	cmp	ip, r3
 8006d18:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d1c:	d8f3      	bhi.n	8006d06 <__lshift+0x6e>
 8006d1e:	ebac 0304 	sub.w	r3, ip, r4
 8006d22:	3b15      	subs	r3, #21
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	3304      	adds	r3, #4
 8006d2a:	f104 0015 	add.w	r0, r4, #21
 8006d2e:	4584      	cmp	ip, r0
 8006d30:	bf38      	it	cc
 8006d32:	2304      	movcc	r3, #4
 8006d34:	50ca      	str	r2, [r1, r3]
 8006d36:	b10a      	cbz	r2, 8006d3c <__lshift+0xa4>
 8006d38:	f108 0602 	add.w	r6, r8, #2
 8006d3c:	3e01      	subs	r6, #1
 8006d3e:	4638      	mov	r0, r7
 8006d40:	612e      	str	r6, [r5, #16]
 8006d42:	4621      	mov	r1, r4
 8006d44:	f7ff fd8c 	bl	8006860 <_Bfree>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d52:	3301      	adds	r3, #1
 8006d54:	e7c5      	b.n	8006ce2 <__lshift+0x4a>
 8006d56:	3904      	subs	r1, #4
 8006d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d60:	459c      	cmp	ip, r3
 8006d62:	d8f9      	bhi.n	8006d58 <__lshift+0xc0>
 8006d64:	e7ea      	b.n	8006d3c <__lshift+0xa4>
 8006d66:	bf00      	nop
 8006d68:	0800842c 	.word	0x0800842c
 8006d6c:	080084bc 	.word	0x080084bc

08006d70 <__mcmp>:
 8006d70:	b530      	push	{r4, r5, lr}
 8006d72:	6902      	ldr	r2, [r0, #16]
 8006d74:	690c      	ldr	r4, [r1, #16]
 8006d76:	1b12      	subs	r2, r2, r4
 8006d78:	d10e      	bne.n	8006d98 <__mcmp+0x28>
 8006d7a:	f100 0314 	add.w	r3, r0, #20
 8006d7e:	3114      	adds	r1, #20
 8006d80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d90:	42a5      	cmp	r5, r4
 8006d92:	d003      	beq.n	8006d9c <__mcmp+0x2c>
 8006d94:	d305      	bcc.n	8006da2 <__mcmp+0x32>
 8006d96:	2201      	movs	r2, #1
 8006d98:	4610      	mov	r0, r2
 8006d9a:	bd30      	pop	{r4, r5, pc}
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d3f3      	bcc.n	8006d88 <__mcmp+0x18>
 8006da0:	e7fa      	b.n	8006d98 <__mcmp+0x28>
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	e7f7      	b.n	8006d98 <__mcmp+0x28>

08006da8 <__mdiff>:
 8006da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	460c      	mov	r4, r1
 8006dae:	4606      	mov	r6, r0
 8006db0:	4611      	mov	r1, r2
 8006db2:	4620      	mov	r0, r4
 8006db4:	4617      	mov	r7, r2
 8006db6:	f7ff ffdb 	bl	8006d70 <__mcmp>
 8006dba:	1e05      	subs	r5, r0, #0
 8006dbc:	d110      	bne.n	8006de0 <__mdiff+0x38>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff fd0d 	bl	80067e0 <_Balloc>
 8006dc6:	b930      	cbnz	r0, 8006dd6 <__mdiff+0x2e>
 8006dc8:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <__mdiff+0x108>)
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f240 2132 	movw	r1, #562	; 0x232
 8006dd0:	4838      	ldr	r0, [pc, #224]	; (8006eb4 <__mdiff+0x10c>)
 8006dd2:	f000 fc0d 	bl	80075f0 <__assert_func>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	bfa4      	itt	ge
 8006de2:	463b      	movge	r3, r7
 8006de4:	4627      	movge	r7, r4
 8006de6:	4630      	mov	r0, r6
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	bfa6      	itte	ge
 8006dec:	461c      	movge	r4, r3
 8006dee:	2500      	movge	r5, #0
 8006df0:	2501      	movlt	r5, #1
 8006df2:	f7ff fcf5 	bl	80067e0 <_Balloc>
 8006df6:	b920      	cbnz	r0, 8006e02 <__mdiff+0x5a>
 8006df8:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <__mdiff+0x108>)
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e00:	e7e6      	b.n	8006dd0 <__mdiff+0x28>
 8006e02:	693e      	ldr	r6, [r7, #16]
 8006e04:	60c5      	str	r5, [r0, #12]
 8006e06:	6925      	ldr	r5, [r4, #16]
 8006e08:	f107 0114 	add.w	r1, r7, #20
 8006e0c:	f104 0914 	add.w	r9, r4, #20
 8006e10:	f100 0e14 	add.w	lr, r0, #20
 8006e14:	f107 0210 	add.w	r2, r7, #16
 8006e18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e20:	46f2      	mov	sl, lr
 8006e22:	2700      	movs	r7, #0
 8006e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e2c:	fa1f f883 	uxth.w	r8, r3
 8006e30:	fa17 f78b 	uxtah	r7, r7, fp
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	eba7 0808 	sub.w	r8, r7, r8
 8006e3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e42:	fa1f f888 	uxth.w	r8, r8
 8006e46:	141f      	asrs	r7, r3, #16
 8006e48:	454d      	cmp	r5, r9
 8006e4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e4e:	f84a 3b04 	str.w	r3, [sl], #4
 8006e52:	d8e7      	bhi.n	8006e24 <__mdiff+0x7c>
 8006e54:	1b2b      	subs	r3, r5, r4
 8006e56:	3b15      	subs	r3, #21
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	3415      	adds	r4, #21
 8006e60:	42a5      	cmp	r5, r4
 8006e62:	bf38      	it	cc
 8006e64:	2304      	movcc	r3, #4
 8006e66:	4419      	add	r1, r3
 8006e68:	4473      	add	r3, lr
 8006e6a:	469e      	mov	lr, r3
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4565      	cmp	r5, ip
 8006e70:	d30e      	bcc.n	8006e90 <__mdiff+0xe8>
 8006e72:	f10c 0203 	add.w	r2, ip, #3
 8006e76:	1a52      	subs	r2, r2, r1
 8006e78:	f022 0203 	bic.w	r2, r2, #3
 8006e7c:	3903      	subs	r1, #3
 8006e7e:	458c      	cmp	ip, r1
 8006e80:	bf38      	it	cc
 8006e82:	2200      	movcc	r2, #0
 8006e84:	441a      	add	r2, r3
 8006e86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e8a:	b17b      	cbz	r3, 8006eac <__mdiff+0x104>
 8006e8c:	6106      	str	r6, [r0, #16]
 8006e8e:	e7a5      	b.n	8006ddc <__mdiff+0x34>
 8006e90:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e94:	fa17 f488 	uxtah	r4, r7, r8
 8006e98:	1422      	asrs	r2, r4, #16
 8006e9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006e9e:	b2a4      	uxth	r4, r4
 8006ea0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ea4:	f84e 4b04 	str.w	r4, [lr], #4
 8006ea8:	1417      	asrs	r7, r2, #16
 8006eaa:	e7e0      	b.n	8006e6e <__mdiff+0xc6>
 8006eac:	3e01      	subs	r6, #1
 8006eae:	e7ea      	b.n	8006e86 <__mdiff+0xde>
 8006eb0:	0800842c 	.word	0x0800842c
 8006eb4:	080084bc 	.word	0x080084bc

08006eb8 <__ulp>:
 8006eb8:	b082      	sub	sp, #8
 8006eba:	ed8d 0b00 	vstr	d0, [sp]
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	4912      	ldr	r1, [pc, #72]	; (8006f0c <__ulp+0x54>)
 8006ec2:	4019      	ands	r1, r3
 8006ec4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	dd05      	ble.n	8006ed8 <__ulp+0x20>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	ec43 2b10 	vmov	d0, r2, r3
 8006ed4:	b002      	add	sp, #8
 8006ed6:	4770      	bx	lr
 8006ed8:	4249      	negs	r1, r1
 8006eda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006ede:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	da04      	bge.n	8006ef6 <__ulp+0x3e>
 8006eec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006ef0:	fa41 f300 	asr.w	r3, r1, r0
 8006ef4:	e7ec      	b.n	8006ed0 <__ulp+0x18>
 8006ef6:	f1a0 0114 	sub.w	r1, r0, #20
 8006efa:	291e      	cmp	r1, #30
 8006efc:	bfda      	itte	le
 8006efe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006f02:	fa20 f101 	lsrle.w	r1, r0, r1
 8006f06:	2101      	movgt	r1, #1
 8006f08:	460a      	mov	r2, r1
 8006f0a:	e7e1      	b.n	8006ed0 <__ulp+0x18>
 8006f0c:	7ff00000 	.word	0x7ff00000

08006f10 <__b2d>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	6905      	ldr	r5, [r0, #16]
 8006f14:	f100 0714 	add.w	r7, r0, #20
 8006f18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f1c:	1f2e      	subs	r6, r5, #4
 8006f1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fd52 	bl	80069cc <__hi0bits>
 8006f28:	f1c0 0320 	rsb	r3, r0, #32
 8006f2c:	280a      	cmp	r0, #10
 8006f2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006fac <__b2d+0x9c>
 8006f32:	600b      	str	r3, [r1, #0]
 8006f34:	dc14      	bgt.n	8006f60 <__b2d+0x50>
 8006f36:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8006f3e:	42b7      	cmp	r7, r6
 8006f40:	ea41 030c 	orr.w	r3, r1, ip
 8006f44:	bf34      	ite	cc
 8006f46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f4a:	2100      	movcs	r1, #0
 8006f4c:	3015      	adds	r0, #21
 8006f4e:	fa04 f000 	lsl.w	r0, r4, r0
 8006f52:	fa21 f10e 	lsr.w	r1, r1, lr
 8006f56:	ea40 0201 	orr.w	r2, r0, r1
 8006f5a:	ec43 2b10 	vmov	d0, r2, r3
 8006f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f60:	42b7      	cmp	r7, r6
 8006f62:	bf3a      	itte	cc
 8006f64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f68:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f6c:	2100      	movcs	r1, #0
 8006f6e:	380b      	subs	r0, #11
 8006f70:	d017      	beq.n	8006fa2 <__b2d+0x92>
 8006f72:	f1c0 0c20 	rsb	ip, r0, #32
 8006f76:	fa04 f500 	lsl.w	r5, r4, r0
 8006f7a:	42be      	cmp	r6, r7
 8006f7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8006f80:	ea45 0504 	orr.w	r5, r5, r4
 8006f84:	bf8c      	ite	hi
 8006f86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f8a:	2400      	movls	r4, #0
 8006f8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006f90:	fa01 f000 	lsl.w	r0, r1, r0
 8006f94:	fa24 f40c 	lsr.w	r4, r4, ip
 8006f98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f9c:	ea40 0204 	orr.w	r2, r0, r4
 8006fa0:	e7db      	b.n	8006f5a <__b2d+0x4a>
 8006fa2:	ea44 030c 	orr.w	r3, r4, ip
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	e7d7      	b.n	8006f5a <__b2d+0x4a>
 8006faa:	bf00      	nop
 8006fac:	3ff00000 	.word	0x3ff00000

08006fb0 <__d2b>:
 8006fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	ec57 6b10 	vmov	r6, r7, d0
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	f7ff fc0f 	bl	80067e0 <_Balloc>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	b930      	cbnz	r0, 8006fd4 <__d2b+0x24>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <__d2b+0xb0>)
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <__d2b+0xb4>)
 8006fcc:	f240 310a 	movw	r1, #778	; 0x30a
 8006fd0:	f000 fb0e 	bl	80075f0 <__assert_func>
 8006fd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fdc:	bb35      	cbnz	r5, 800702c <__d2b+0x7c>
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	d028      	beq.n	8007036 <__d2b+0x86>
 8006fe4:	4668      	mov	r0, sp
 8006fe6:	9600      	str	r6, [sp, #0]
 8006fe8:	f7ff fd10 	bl	8006a0c <__lo0bits>
 8006fec:	9900      	ldr	r1, [sp, #0]
 8006fee:	b300      	cbz	r0, 8007032 <__d2b+0x82>
 8006ff0:	9a01      	ldr	r2, [sp, #4]
 8006ff2:	f1c0 0320 	rsb	r3, r0, #32
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	40c2      	lsrs	r2, r0
 8006ffe:	6163      	str	r3, [r4, #20]
 8007000:	9201      	str	r2, [sp, #4]
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	61a3      	str	r3, [r4, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2202      	movne	r2, #2
 800700c:	2201      	moveq	r2, #1
 800700e:	6122      	str	r2, [r4, #16]
 8007010:	b1d5      	cbz	r5, 8007048 <__d2b+0x98>
 8007012:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007016:	4405      	add	r5, r0
 8007018:	f8c9 5000 	str.w	r5, [r9]
 800701c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007020:	f8c8 0000 	str.w	r0, [r8]
 8007024:	4620      	mov	r0, r4
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800702c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007030:	e7d5      	b.n	8006fde <__d2b+0x2e>
 8007032:	6161      	str	r1, [r4, #20]
 8007034:	e7e5      	b.n	8007002 <__d2b+0x52>
 8007036:	a801      	add	r0, sp, #4
 8007038:	f7ff fce8 	bl	8006a0c <__lo0bits>
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	2201      	movs	r2, #1
 8007042:	6122      	str	r2, [r4, #16]
 8007044:	3020      	adds	r0, #32
 8007046:	e7e3      	b.n	8007010 <__d2b+0x60>
 8007048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800704c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007050:	f8c9 0000 	str.w	r0, [r9]
 8007054:	6918      	ldr	r0, [r3, #16]
 8007056:	f7ff fcb9 	bl	80069cc <__hi0bits>
 800705a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800705e:	e7df      	b.n	8007020 <__d2b+0x70>
 8007060:	0800842c 	.word	0x0800842c
 8007064:	080084bc 	.word	0x080084bc

08007068 <__ratio>:
 8007068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4688      	mov	r8, r1
 800706e:	4669      	mov	r1, sp
 8007070:	4681      	mov	r9, r0
 8007072:	f7ff ff4d 	bl	8006f10 <__b2d>
 8007076:	a901      	add	r1, sp, #4
 8007078:	4640      	mov	r0, r8
 800707a:	ec55 4b10 	vmov	r4, r5, d0
 800707e:	f7ff ff47 	bl	8006f10 <__b2d>
 8007082:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007086:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800708a:	eba3 0c02 	sub.w	ip, r3, r2
 800708e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007098:	ec51 0b10 	vmov	r0, r1, d0
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfd6      	itet	le
 80070a0:	460a      	movle	r2, r1
 80070a2:	462a      	movgt	r2, r5
 80070a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070a8:	468b      	mov	fp, r1
 80070aa:	462f      	mov	r7, r5
 80070ac:	bfd4      	ite	le
 80070ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070b6:	4620      	mov	r0, r4
 80070b8:	ee10 2a10 	vmov	r2, s0
 80070bc:	465b      	mov	r3, fp
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fbc4 	bl	800084c <__aeabi_ddiv>
 80070c4:	ec41 0b10 	vmov	d0, r0, r1
 80070c8:	b003      	add	sp, #12
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070ce <__copybits>:
 80070ce:	3901      	subs	r1, #1
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	1149      	asrs	r1, r1, #5
 80070d4:	6914      	ldr	r4, [r2, #16]
 80070d6:	3101      	adds	r1, #1
 80070d8:	f102 0314 	add.w	r3, r2, #20
 80070dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070e4:	1f05      	subs	r5, r0, #4
 80070e6:	42a3      	cmp	r3, r4
 80070e8:	d30c      	bcc.n	8007104 <__copybits+0x36>
 80070ea:	1aa3      	subs	r3, r4, r2
 80070ec:	3b11      	subs	r3, #17
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	3211      	adds	r2, #17
 80070f4:	42a2      	cmp	r2, r4
 80070f6:	bf88      	it	hi
 80070f8:	2300      	movhi	r3, #0
 80070fa:	4418      	add	r0, r3
 80070fc:	2300      	movs	r3, #0
 80070fe:	4288      	cmp	r0, r1
 8007100:	d305      	bcc.n	800710e <__copybits+0x40>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f853 6b04 	ldr.w	r6, [r3], #4
 8007108:	f845 6f04 	str.w	r6, [r5, #4]!
 800710c:	e7eb      	b.n	80070e6 <__copybits+0x18>
 800710e:	f840 3b04 	str.w	r3, [r0], #4
 8007112:	e7f4      	b.n	80070fe <__copybits+0x30>

08007114 <__any_on>:
 8007114:	f100 0214 	add.w	r2, r0, #20
 8007118:	6900      	ldr	r0, [r0, #16]
 800711a:	114b      	asrs	r3, r1, #5
 800711c:	4298      	cmp	r0, r3
 800711e:	b510      	push	{r4, lr}
 8007120:	db11      	blt.n	8007146 <__any_on+0x32>
 8007122:	dd0a      	ble.n	800713a <__any_on+0x26>
 8007124:	f011 011f 	ands.w	r1, r1, #31
 8007128:	d007      	beq.n	800713a <__any_on+0x26>
 800712a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800712e:	fa24 f001 	lsr.w	r0, r4, r1
 8007132:	fa00 f101 	lsl.w	r1, r0, r1
 8007136:	428c      	cmp	r4, r1
 8007138:	d10b      	bne.n	8007152 <__any_on+0x3e>
 800713a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800713e:	4293      	cmp	r3, r2
 8007140:	d803      	bhi.n	800714a <__any_on+0x36>
 8007142:	2000      	movs	r0, #0
 8007144:	bd10      	pop	{r4, pc}
 8007146:	4603      	mov	r3, r0
 8007148:	e7f7      	b.n	800713a <__any_on+0x26>
 800714a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800714e:	2900      	cmp	r1, #0
 8007150:	d0f5      	beq.n	800713e <__any_on+0x2a>
 8007152:	2001      	movs	r0, #1
 8007154:	e7f6      	b.n	8007144 <__any_on+0x30>

08007156 <_calloc_r>:
 8007156:	b513      	push	{r0, r1, r4, lr}
 8007158:	434a      	muls	r2, r1
 800715a:	4611      	mov	r1, r2
 800715c:	9201      	str	r2, [sp, #4]
 800715e:	f000 f859 	bl	8007214 <_malloc_r>
 8007162:	4604      	mov	r4, r0
 8007164:	b118      	cbz	r0, 800716e <_calloc_r+0x18>
 8007166:	9a01      	ldr	r2, [sp, #4]
 8007168:	2100      	movs	r1, #0
 800716a:	f7fc fbc9 	bl	8003900 <memset>
 800716e:	4620      	mov	r0, r4
 8007170:	b002      	add	sp, #8
 8007172:	bd10      	pop	{r4, pc}

08007174 <_free_r>:
 8007174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007176:	2900      	cmp	r1, #0
 8007178:	d048      	beq.n	800720c <_free_r+0x98>
 800717a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717e:	9001      	str	r0, [sp, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f1a1 0404 	sub.w	r4, r1, #4
 8007186:	bfb8      	it	lt
 8007188:	18e4      	addlt	r4, r4, r3
 800718a:	f000 fa7b 	bl	8007684 <__malloc_lock>
 800718e:	4a20      	ldr	r2, [pc, #128]	; (8007210 <_free_r+0x9c>)
 8007190:	9801      	ldr	r0, [sp, #4]
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	4615      	mov	r5, r2
 8007196:	b933      	cbnz	r3, 80071a6 <_free_r+0x32>
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	6014      	str	r4, [r2, #0]
 800719c:	b003      	add	sp, #12
 800719e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071a2:	f000 ba75 	b.w	8007690 <__malloc_unlock>
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	d90b      	bls.n	80071c2 <_free_r+0x4e>
 80071aa:	6821      	ldr	r1, [r4, #0]
 80071ac:	1862      	adds	r2, r4, r1
 80071ae:	4293      	cmp	r3, r2
 80071b0:	bf04      	itt	eq
 80071b2:	681a      	ldreq	r2, [r3, #0]
 80071b4:	685b      	ldreq	r3, [r3, #4]
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	bf04      	itt	eq
 80071ba:	1852      	addeq	r2, r2, r1
 80071bc:	6022      	streq	r2, [r4, #0]
 80071be:	602c      	str	r4, [r5, #0]
 80071c0:	e7ec      	b.n	800719c <_free_r+0x28>
 80071c2:	461a      	mov	r2, r3
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b10b      	cbz	r3, 80071cc <_free_r+0x58>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d9fa      	bls.n	80071c2 <_free_r+0x4e>
 80071cc:	6811      	ldr	r1, [r2, #0]
 80071ce:	1855      	adds	r5, r2, r1
 80071d0:	42a5      	cmp	r5, r4
 80071d2:	d10b      	bne.n	80071ec <_free_r+0x78>
 80071d4:	6824      	ldr	r4, [r4, #0]
 80071d6:	4421      	add	r1, r4
 80071d8:	1854      	adds	r4, r2, r1
 80071da:	42a3      	cmp	r3, r4
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	d1dd      	bne.n	800719c <_free_r+0x28>
 80071e0:	681c      	ldr	r4, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	6053      	str	r3, [r2, #4]
 80071e6:	4421      	add	r1, r4
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	e7d7      	b.n	800719c <_free_r+0x28>
 80071ec:	d902      	bls.n	80071f4 <_free_r+0x80>
 80071ee:	230c      	movs	r3, #12
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	e7d3      	b.n	800719c <_free_r+0x28>
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf04      	itt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	bf04      	itt	eq
 8007204:	1949      	addeq	r1, r1, r5
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	6054      	str	r4, [r2, #4]
 800720a:	e7c7      	b.n	800719c <_free_r+0x28>
 800720c:	b003      	add	sp, #12
 800720e:	bd30      	pop	{r4, r5, pc}
 8007210:	200002e4 	.word	0x200002e4

08007214 <_malloc_r>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	1ccd      	adds	r5, r1, #3
 8007218:	f025 0503 	bic.w	r5, r5, #3
 800721c:	3508      	adds	r5, #8
 800721e:	2d0c      	cmp	r5, #12
 8007220:	bf38      	it	cc
 8007222:	250c      	movcc	r5, #12
 8007224:	2d00      	cmp	r5, #0
 8007226:	4606      	mov	r6, r0
 8007228:	db01      	blt.n	800722e <_malloc_r+0x1a>
 800722a:	42a9      	cmp	r1, r5
 800722c:	d903      	bls.n	8007236 <_malloc_r+0x22>
 800722e:	230c      	movs	r3, #12
 8007230:	6033      	str	r3, [r6, #0]
 8007232:	2000      	movs	r0, #0
 8007234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007236:	f000 fa25 	bl	8007684 <__malloc_lock>
 800723a:	4921      	ldr	r1, [pc, #132]	; (80072c0 <_malloc_r+0xac>)
 800723c:	680a      	ldr	r2, [r1, #0]
 800723e:	4614      	mov	r4, r2
 8007240:	b99c      	cbnz	r4, 800726a <_malloc_r+0x56>
 8007242:	4f20      	ldr	r7, [pc, #128]	; (80072c4 <_malloc_r+0xb0>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	b923      	cbnz	r3, 8007252 <_malloc_r+0x3e>
 8007248:	4621      	mov	r1, r4
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f9a0 	bl	8007590 <_sbrk_r>
 8007250:	6038      	str	r0, [r7, #0]
 8007252:	4629      	mov	r1, r5
 8007254:	4630      	mov	r0, r6
 8007256:	f000 f99b 	bl	8007590 <_sbrk_r>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d123      	bne.n	80072a6 <_malloc_r+0x92>
 800725e:	230c      	movs	r3, #12
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	4630      	mov	r0, r6
 8007264:	f000 fa14 	bl	8007690 <__malloc_unlock>
 8007268:	e7e3      	b.n	8007232 <_malloc_r+0x1e>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	1b5b      	subs	r3, r3, r5
 800726e:	d417      	bmi.n	80072a0 <_malloc_r+0x8c>
 8007270:	2b0b      	cmp	r3, #11
 8007272:	d903      	bls.n	800727c <_malloc_r+0x68>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	441c      	add	r4, r3
 8007278:	6025      	str	r5, [r4, #0]
 800727a:	e004      	b.n	8007286 <_malloc_r+0x72>
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	42a2      	cmp	r2, r4
 8007280:	bf0c      	ite	eq
 8007282:	600b      	streq	r3, [r1, #0]
 8007284:	6053      	strne	r3, [r2, #4]
 8007286:	4630      	mov	r0, r6
 8007288:	f000 fa02 	bl	8007690 <__malloc_unlock>
 800728c:	f104 000b 	add.w	r0, r4, #11
 8007290:	1d23      	adds	r3, r4, #4
 8007292:	f020 0007 	bic.w	r0, r0, #7
 8007296:	1ac2      	subs	r2, r0, r3
 8007298:	d0cc      	beq.n	8007234 <_malloc_r+0x20>
 800729a:	1a1b      	subs	r3, r3, r0
 800729c:	50a3      	str	r3, [r4, r2]
 800729e:	e7c9      	b.n	8007234 <_malloc_r+0x20>
 80072a0:	4622      	mov	r2, r4
 80072a2:	6864      	ldr	r4, [r4, #4]
 80072a4:	e7cc      	b.n	8007240 <_malloc_r+0x2c>
 80072a6:	1cc4      	adds	r4, r0, #3
 80072a8:	f024 0403 	bic.w	r4, r4, #3
 80072ac:	42a0      	cmp	r0, r4
 80072ae:	d0e3      	beq.n	8007278 <_malloc_r+0x64>
 80072b0:	1a21      	subs	r1, r4, r0
 80072b2:	4630      	mov	r0, r6
 80072b4:	f000 f96c 	bl	8007590 <_sbrk_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d1dd      	bne.n	8007278 <_malloc_r+0x64>
 80072bc:	e7cf      	b.n	800725e <_malloc_r+0x4a>
 80072be:	bf00      	nop
 80072c0:	200002e4 	.word	0x200002e4
 80072c4:	200002e8 	.word	0x200002e8

080072c8 <__ssputs_r>:
 80072c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	688e      	ldr	r6, [r1, #8]
 80072ce:	429e      	cmp	r6, r3
 80072d0:	4682      	mov	sl, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4690      	mov	r8, r2
 80072d6:	461f      	mov	r7, r3
 80072d8:	d838      	bhi.n	800734c <__ssputs_r+0x84>
 80072da:	898a      	ldrh	r2, [r1, #12]
 80072dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072e0:	d032      	beq.n	8007348 <__ssputs_r+0x80>
 80072e2:	6825      	ldr	r5, [r4, #0]
 80072e4:	6909      	ldr	r1, [r1, #16]
 80072e6:	eba5 0901 	sub.w	r9, r5, r1
 80072ea:	6965      	ldr	r5, [r4, #20]
 80072ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072f4:	3301      	adds	r3, #1
 80072f6:	444b      	add	r3, r9
 80072f8:	106d      	asrs	r5, r5, #1
 80072fa:	429d      	cmp	r5, r3
 80072fc:	bf38      	it	cc
 80072fe:	461d      	movcc	r5, r3
 8007300:	0553      	lsls	r3, r2, #21
 8007302:	d531      	bpl.n	8007368 <__ssputs_r+0xa0>
 8007304:	4629      	mov	r1, r5
 8007306:	f7ff ff85 	bl	8007214 <_malloc_r>
 800730a:	4606      	mov	r6, r0
 800730c:	b950      	cbnz	r0, 8007324 <__ssputs_r+0x5c>
 800730e:	230c      	movs	r3, #12
 8007310:	f8ca 3000 	str.w	r3, [sl]
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	6921      	ldr	r1, [r4, #16]
 8007326:	464a      	mov	r2, r9
 8007328:	f7ff fa4c 	bl	80067c4 <memcpy>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	6126      	str	r6, [r4, #16]
 800733a:	6165      	str	r5, [r4, #20]
 800733c:	444e      	add	r6, r9
 800733e:	eba5 0509 	sub.w	r5, r5, r9
 8007342:	6026      	str	r6, [r4, #0]
 8007344:	60a5      	str	r5, [r4, #8]
 8007346:	463e      	mov	r6, r7
 8007348:	42be      	cmp	r6, r7
 800734a:	d900      	bls.n	800734e <__ssputs_r+0x86>
 800734c:	463e      	mov	r6, r7
 800734e:	4632      	mov	r2, r6
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	4641      	mov	r1, r8
 8007354:	f000 f97c 	bl	8007650 <memmove>
 8007358:	68a3      	ldr	r3, [r4, #8]
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	1b9b      	subs	r3, r3, r6
 800735e:	4432      	add	r2, r6
 8007360:	60a3      	str	r3, [r4, #8]
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	2000      	movs	r0, #0
 8007366:	e7db      	b.n	8007320 <__ssputs_r+0x58>
 8007368:	462a      	mov	r2, r5
 800736a:	f000 f997 	bl	800769c <_realloc_r>
 800736e:	4606      	mov	r6, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	d1e1      	bne.n	8007338 <__ssputs_r+0x70>
 8007374:	6921      	ldr	r1, [r4, #16]
 8007376:	4650      	mov	r0, sl
 8007378:	f7ff fefc 	bl	8007174 <_free_r>
 800737c:	e7c7      	b.n	800730e <__ssputs_r+0x46>
	...

08007380 <_svfiprintf_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	4698      	mov	r8, r3
 8007386:	898b      	ldrh	r3, [r1, #12]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	b09d      	sub	sp, #116	; 0x74
 800738c:	4607      	mov	r7, r0
 800738e:	460d      	mov	r5, r1
 8007390:	4614      	mov	r4, r2
 8007392:	d50e      	bpl.n	80073b2 <_svfiprintf_r+0x32>
 8007394:	690b      	ldr	r3, [r1, #16]
 8007396:	b963      	cbnz	r3, 80073b2 <_svfiprintf_r+0x32>
 8007398:	2140      	movs	r1, #64	; 0x40
 800739a:	f7ff ff3b 	bl	8007214 <_malloc_r>
 800739e:	6028      	str	r0, [r5, #0]
 80073a0:	6128      	str	r0, [r5, #16]
 80073a2:	b920      	cbnz	r0, 80073ae <_svfiprintf_r+0x2e>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e0d1      	b.n	8007552 <_svfiprintf_r+0x1d2>
 80073ae:	2340      	movs	r3, #64	; 0x40
 80073b0:	616b      	str	r3, [r5, #20]
 80073b2:	2300      	movs	r3, #0
 80073b4:	9309      	str	r3, [sp, #36]	; 0x24
 80073b6:	2320      	movs	r3, #32
 80073b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80073c0:	2330      	movs	r3, #48	; 0x30
 80073c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800756c <_svfiprintf_r+0x1ec>
 80073c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073ca:	f04f 0901 	mov.w	r9, #1
 80073ce:	4623      	mov	r3, r4
 80073d0:	469a      	mov	sl, r3
 80073d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073d6:	b10a      	cbz	r2, 80073dc <_svfiprintf_r+0x5c>
 80073d8:	2a25      	cmp	r2, #37	; 0x25
 80073da:	d1f9      	bne.n	80073d0 <_svfiprintf_r+0x50>
 80073dc:	ebba 0b04 	subs.w	fp, sl, r4
 80073e0:	d00b      	beq.n	80073fa <_svfiprintf_r+0x7a>
 80073e2:	465b      	mov	r3, fp
 80073e4:	4622      	mov	r2, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff ff6d 	bl	80072c8 <__ssputs_r>
 80073ee:	3001      	adds	r0, #1
 80073f0:	f000 80aa 	beq.w	8007548 <_svfiprintf_r+0x1c8>
 80073f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f6:	445a      	add	r2, fp
 80073f8:	9209      	str	r2, [sp, #36]	; 0x24
 80073fa:	f89a 3000 	ldrb.w	r3, [sl]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80a2 	beq.w	8007548 <_svfiprintf_r+0x1c8>
 8007404:	2300      	movs	r3, #0
 8007406:	f04f 32ff 	mov.w	r2, #4294967295
 800740a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800740e:	f10a 0a01 	add.w	sl, sl, #1
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800741a:	931a      	str	r3, [sp, #104]	; 0x68
 800741c:	4654      	mov	r4, sl
 800741e:	2205      	movs	r2, #5
 8007420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007424:	4851      	ldr	r0, [pc, #324]	; (800756c <_svfiprintf_r+0x1ec>)
 8007426:	f7f8 fedb 	bl	80001e0 <memchr>
 800742a:	9a04      	ldr	r2, [sp, #16]
 800742c:	b9d8      	cbnz	r0, 8007466 <_svfiprintf_r+0xe6>
 800742e:	06d0      	lsls	r0, r2, #27
 8007430:	bf44      	itt	mi
 8007432:	2320      	movmi	r3, #32
 8007434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007438:	0711      	lsls	r1, r2, #28
 800743a:	bf44      	itt	mi
 800743c:	232b      	movmi	r3, #43	; 0x2b
 800743e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007442:	f89a 3000 	ldrb.w	r3, [sl]
 8007446:	2b2a      	cmp	r3, #42	; 0x2a
 8007448:	d015      	beq.n	8007476 <_svfiprintf_r+0xf6>
 800744a:	9a07      	ldr	r2, [sp, #28]
 800744c:	4654      	mov	r4, sl
 800744e:	2000      	movs	r0, #0
 8007450:	f04f 0c0a 	mov.w	ip, #10
 8007454:	4621      	mov	r1, r4
 8007456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800745a:	3b30      	subs	r3, #48	; 0x30
 800745c:	2b09      	cmp	r3, #9
 800745e:	d94e      	bls.n	80074fe <_svfiprintf_r+0x17e>
 8007460:	b1b0      	cbz	r0, 8007490 <_svfiprintf_r+0x110>
 8007462:	9207      	str	r2, [sp, #28]
 8007464:	e014      	b.n	8007490 <_svfiprintf_r+0x110>
 8007466:	eba0 0308 	sub.w	r3, r0, r8
 800746a:	fa09 f303 	lsl.w	r3, r9, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	46a2      	mov	sl, r4
 8007474:	e7d2      	b.n	800741c <_svfiprintf_r+0x9c>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	1d19      	adds	r1, r3, #4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	9103      	str	r1, [sp, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfbb      	ittet	lt
 8007482:	425b      	neglt	r3, r3
 8007484:	f042 0202 	orrlt.w	r2, r2, #2
 8007488:	9307      	strge	r3, [sp, #28]
 800748a:	9307      	strlt	r3, [sp, #28]
 800748c:	bfb8      	it	lt
 800748e:	9204      	strlt	r2, [sp, #16]
 8007490:	7823      	ldrb	r3, [r4, #0]
 8007492:	2b2e      	cmp	r3, #46	; 0x2e
 8007494:	d10c      	bne.n	80074b0 <_svfiprintf_r+0x130>
 8007496:	7863      	ldrb	r3, [r4, #1]
 8007498:	2b2a      	cmp	r3, #42	; 0x2a
 800749a:	d135      	bne.n	8007508 <_svfiprintf_r+0x188>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9203      	str	r2, [sp, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfb8      	it	lt
 80074a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074ac:	3402      	adds	r4, #2
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800757c <_svfiprintf_r+0x1fc>
 80074b4:	7821      	ldrb	r1, [r4, #0]
 80074b6:	2203      	movs	r2, #3
 80074b8:	4650      	mov	r0, sl
 80074ba:	f7f8 fe91 	bl	80001e0 <memchr>
 80074be:	b140      	cbz	r0, 80074d2 <_svfiprintf_r+0x152>
 80074c0:	2340      	movs	r3, #64	; 0x40
 80074c2:	eba0 000a 	sub.w	r0, r0, sl
 80074c6:	fa03 f000 	lsl.w	r0, r3, r0
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	4303      	orrs	r3, r0
 80074ce:	3401      	adds	r4, #1
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d6:	4826      	ldr	r0, [pc, #152]	; (8007570 <_svfiprintf_r+0x1f0>)
 80074d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074dc:	2206      	movs	r2, #6
 80074de:	f7f8 fe7f 	bl	80001e0 <memchr>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d038      	beq.n	8007558 <_svfiprintf_r+0x1d8>
 80074e6:	4b23      	ldr	r3, [pc, #140]	; (8007574 <_svfiprintf_r+0x1f4>)
 80074e8:	bb1b      	cbnz	r3, 8007532 <_svfiprintf_r+0x1b2>
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	3307      	adds	r3, #7
 80074ee:	f023 0307 	bic.w	r3, r3, #7
 80074f2:	3308      	adds	r3, #8
 80074f4:	9303      	str	r3, [sp, #12]
 80074f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f8:	4433      	add	r3, r6
 80074fa:	9309      	str	r3, [sp, #36]	; 0x24
 80074fc:	e767      	b.n	80073ce <_svfiprintf_r+0x4e>
 80074fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007502:	460c      	mov	r4, r1
 8007504:	2001      	movs	r0, #1
 8007506:	e7a5      	b.n	8007454 <_svfiprintf_r+0xd4>
 8007508:	2300      	movs	r3, #0
 800750a:	3401      	adds	r4, #1
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	4619      	mov	r1, r3
 8007510:	f04f 0c0a 	mov.w	ip, #10
 8007514:	4620      	mov	r0, r4
 8007516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800751a:	3a30      	subs	r2, #48	; 0x30
 800751c:	2a09      	cmp	r2, #9
 800751e:	d903      	bls.n	8007528 <_svfiprintf_r+0x1a8>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0c5      	beq.n	80074b0 <_svfiprintf_r+0x130>
 8007524:	9105      	str	r1, [sp, #20]
 8007526:	e7c3      	b.n	80074b0 <_svfiprintf_r+0x130>
 8007528:	fb0c 2101 	mla	r1, ip, r1, r2
 800752c:	4604      	mov	r4, r0
 800752e:	2301      	movs	r3, #1
 8007530:	e7f0      	b.n	8007514 <_svfiprintf_r+0x194>
 8007532:	ab03      	add	r3, sp, #12
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	462a      	mov	r2, r5
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <_svfiprintf_r+0x1f8>)
 800753a:	a904      	add	r1, sp, #16
 800753c:	4638      	mov	r0, r7
 800753e:	f7fc fa87 	bl	8003a50 <_printf_float>
 8007542:	1c42      	adds	r2, r0, #1
 8007544:	4606      	mov	r6, r0
 8007546:	d1d6      	bne.n	80074f6 <_svfiprintf_r+0x176>
 8007548:	89ab      	ldrh	r3, [r5, #12]
 800754a:	065b      	lsls	r3, r3, #25
 800754c:	f53f af2c 	bmi.w	80073a8 <_svfiprintf_r+0x28>
 8007550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007552:	b01d      	add	sp, #116	; 0x74
 8007554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007558:	ab03      	add	r3, sp, #12
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	462a      	mov	r2, r5
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <_svfiprintf_r+0x1f8>)
 8007560:	a904      	add	r1, sp, #16
 8007562:	4638      	mov	r0, r7
 8007564:	f7fc fd18 	bl	8003f98 <_printf_i>
 8007568:	e7eb      	b.n	8007542 <_svfiprintf_r+0x1c2>
 800756a:	bf00      	nop
 800756c:	0800861c 	.word	0x0800861c
 8007570:	08008626 	.word	0x08008626
 8007574:	08003a51 	.word	0x08003a51
 8007578:	080072c9 	.word	0x080072c9
 800757c:	08008622 	.word	0x08008622

08007580 <nan>:
 8007580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007588 <nan+0x8>
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	00000000 	.word	0x00000000
 800758c:	7ff80000 	.word	0x7ff80000

08007590 <_sbrk_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_sbrk_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7fa fa06 	bl	80019ac <_sbrk>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_sbrk_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_sbrk_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000388 	.word	0x20000388

080075b0 <strncmp>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	b16a      	cbz	r2, 80075d0 <strncmp+0x20>
 80075b4:	3901      	subs	r1, #1
 80075b6:	1884      	adds	r4, r0, r2
 80075b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d103      	bne.n	80075cc <strncmp+0x1c>
 80075c4:	42a0      	cmp	r0, r4
 80075c6:	d001      	beq.n	80075cc <strncmp+0x1c>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f5      	bne.n	80075b8 <strncmp+0x8>
 80075cc:	1a98      	subs	r0, r3, r2
 80075ce:	bd10      	pop	{r4, pc}
 80075d0:	4610      	mov	r0, r2
 80075d2:	e7fc      	b.n	80075ce <strncmp+0x1e>

080075d4 <__ascii_wctomb>:
 80075d4:	b149      	cbz	r1, 80075ea <__ascii_wctomb+0x16>
 80075d6:	2aff      	cmp	r2, #255	; 0xff
 80075d8:	bf85      	ittet	hi
 80075da:	238a      	movhi	r3, #138	; 0x8a
 80075dc:	6003      	strhi	r3, [r0, #0]
 80075de:	700a      	strbls	r2, [r1, #0]
 80075e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80075e4:	bf98      	it	ls
 80075e6:	2001      	movls	r0, #1
 80075e8:	4770      	bx	lr
 80075ea:	4608      	mov	r0, r1
 80075ec:	4770      	bx	lr
	...

080075f0 <__assert_func>:
 80075f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f2:	4614      	mov	r4, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <__assert_func+0x2c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4605      	mov	r5, r0
 80075fc:	68d8      	ldr	r0, [r3, #12]
 80075fe:	b14c      	cbz	r4, 8007614 <__assert_func+0x24>
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <__assert_func+0x30>)
 8007602:	9100      	str	r1, [sp, #0]
 8007604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007608:	4906      	ldr	r1, [pc, #24]	; (8007624 <__assert_func+0x34>)
 800760a:	462b      	mov	r3, r5
 800760c:	f000 f80e 	bl	800762c <fiprintf>
 8007610:	f000 fa84 	bl	8007b1c <abort>
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <__assert_func+0x38>)
 8007616:	461c      	mov	r4, r3
 8007618:	e7f3      	b.n	8007602 <__assert_func+0x12>
 800761a:	bf00      	nop
 800761c:	200000e0 	.word	0x200000e0
 8007620:	0800862d 	.word	0x0800862d
 8007624:	0800863a 	.word	0x0800863a
 8007628:	08008668 	.word	0x08008668

0800762c <fiprintf>:
 800762c:	b40e      	push	{r1, r2, r3}
 800762e:	b503      	push	{r0, r1, lr}
 8007630:	4601      	mov	r1, r0
 8007632:	ab03      	add	r3, sp, #12
 8007634:	4805      	ldr	r0, [pc, #20]	; (800764c <fiprintf+0x20>)
 8007636:	f853 2b04 	ldr.w	r2, [r3], #4
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	f000 f87d 	bl	800773c <_vfiprintf_r>
 8007642:	b002      	add	sp, #8
 8007644:	f85d eb04 	ldr.w	lr, [sp], #4
 8007648:	b003      	add	sp, #12
 800764a:	4770      	bx	lr
 800764c:	200000e0 	.word	0x200000e0

08007650 <memmove>:
 8007650:	4288      	cmp	r0, r1
 8007652:	b510      	push	{r4, lr}
 8007654:	eb01 0402 	add.w	r4, r1, r2
 8007658:	d902      	bls.n	8007660 <memmove+0x10>
 800765a:	4284      	cmp	r4, r0
 800765c:	4623      	mov	r3, r4
 800765e:	d807      	bhi.n	8007670 <memmove+0x20>
 8007660:	1e43      	subs	r3, r0, #1
 8007662:	42a1      	cmp	r1, r4
 8007664:	d008      	beq.n	8007678 <memmove+0x28>
 8007666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800766a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800766e:	e7f8      	b.n	8007662 <memmove+0x12>
 8007670:	4402      	add	r2, r0
 8007672:	4601      	mov	r1, r0
 8007674:	428a      	cmp	r2, r1
 8007676:	d100      	bne.n	800767a <memmove+0x2a>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007682:	e7f7      	b.n	8007674 <memmove+0x24>

08007684 <__malloc_lock>:
 8007684:	4801      	ldr	r0, [pc, #4]	; (800768c <__malloc_lock+0x8>)
 8007686:	f000 bc09 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	20000390 	.word	0x20000390

08007690 <__malloc_unlock>:
 8007690:	4801      	ldr	r0, [pc, #4]	; (8007698 <__malloc_unlock+0x8>)
 8007692:	f000 bc04 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	20000390 	.word	0x20000390

0800769c <_realloc_r>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	4607      	mov	r7, r0
 80076a0:	4614      	mov	r4, r2
 80076a2:	460e      	mov	r6, r1
 80076a4:	b921      	cbnz	r1, 80076b0 <_realloc_r+0x14>
 80076a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076aa:	4611      	mov	r1, r2
 80076ac:	f7ff bdb2 	b.w	8007214 <_malloc_r>
 80076b0:	b922      	cbnz	r2, 80076bc <_realloc_r+0x20>
 80076b2:	f7ff fd5f 	bl	8007174 <_free_r>
 80076b6:	4625      	mov	r5, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076bc:	f000 fc54 	bl	8007f68 <_malloc_usable_size_r>
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d20f      	bcs.n	80076e4 <_realloc_r+0x48>
 80076c4:	4621      	mov	r1, r4
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff fda4 	bl	8007214 <_malloc_r>
 80076cc:	4605      	mov	r5, r0
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d0f2      	beq.n	80076b8 <_realloc_r+0x1c>
 80076d2:	4631      	mov	r1, r6
 80076d4:	4622      	mov	r2, r4
 80076d6:	f7ff f875 	bl	80067c4 <memcpy>
 80076da:	4631      	mov	r1, r6
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff fd49 	bl	8007174 <_free_r>
 80076e2:	e7e9      	b.n	80076b8 <_realloc_r+0x1c>
 80076e4:	4635      	mov	r5, r6
 80076e6:	e7e7      	b.n	80076b8 <_realloc_r+0x1c>

080076e8 <__sfputc_r>:
 80076e8:	6893      	ldr	r3, [r2, #8]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	b410      	push	{r4}
 80076f0:	6093      	str	r3, [r2, #8]
 80076f2:	da08      	bge.n	8007706 <__sfputc_r+0x1e>
 80076f4:	6994      	ldr	r4, [r2, #24]
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	db01      	blt.n	80076fe <__sfputc_r+0x16>
 80076fa:	290a      	cmp	r1, #10
 80076fc:	d103      	bne.n	8007706 <__sfputc_r+0x1e>
 80076fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007702:	f000 b94b 	b.w	800799c <__swbuf_r>
 8007706:	6813      	ldr	r3, [r2, #0]
 8007708:	1c58      	adds	r0, r3, #1
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	7019      	strb	r1, [r3, #0]
 800770e:	4608      	mov	r0, r1
 8007710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007714:	4770      	bx	lr

08007716 <__sfputs_r>:
 8007716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	4614      	mov	r4, r2
 800771e:	18d5      	adds	r5, r2, r3
 8007720:	42ac      	cmp	r4, r5
 8007722:	d101      	bne.n	8007728 <__sfputs_r+0x12>
 8007724:	2000      	movs	r0, #0
 8007726:	e007      	b.n	8007738 <__sfputs_r+0x22>
 8007728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772c:	463a      	mov	r2, r7
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff ffda 	bl	80076e8 <__sfputc_r>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d1f3      	bne.n	8007720 <__sfputs_r+0xa>
 8007738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800773c <_vfiprintf_r>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	460d      	mov	r5, r1
 8007742:	b09d      	sub	sp, #116	; 0x74
 8007744:	4614      	mov	r4, r2
 8007746:	4698      	mov	r8, r3
 8007748:	4606      	mov	r6, r0
 800774a:	b118      	cbz	r0, 8007754 <_vfiprintf_r+0x18>
 800774c:	6983      	ldr	r3, [r0, #24]
 800774e:	b90b      	cbnz	r3, 8007754 <_vfiprintf_r+0x18>
 8007750:	f000 fb06 	bl	8007d60 <__sinit>
 8007754:	4b89      	ldr	r3, [pc, #548]	; (800797c <_vfiprintf_r+0x240>)
 8007756:	429d      	cmp	r5, r3
 8007758:	d11b      	bne.n	8007792 <_vfiprintf_r+0x56>
 800775a:	6875      	ldr	r5, [r6, #4]
 800775c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	d405      	bmi.n	800776e <_vfiprintf_r+0x32>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	059a      	lsls	r2, r3, #22
 8007766:	d402      	bmi.n	800776e <_vfiprintf_r+0x32>
 8007768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776a:	f000 fb97 	bl	8007e9c <__retarget_lock_acquire_recursive>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	071b      	lsls	r3, r3, #28
 8007772:	d501      	bpl.n	8007778 <_vfiprintf_r+0x3c>
 8007774:	692b      	ldr	r3, [r5, #16]
 8007776:	b9eb      	cbnz	r3, 80077b4 <_vfiprintf_r+0x78>
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f000 f960 	bl	8007a40 <__swsetup_r>
 8007780:	b1c0      	cbz	r0, 80077b4 <_vfiprintf_r+0x78>
 8007782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007784:	07dc      	lsls	r4, r3, #31
 8007786:	d50e      	bpl.n	80077a6 <_vfiprintf_r+0x6a>
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	b01d      	add	sp, #116	; 0x74
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	4b7b      	ldr	r3, [pc, #492]	; (8007980 <_vfiprintf_r+0x244>)
 8007794:	429d      	cmp	r5, r3
 8007796:	d101      	bne.n	800779c <_vfiprintf_r+0x60>
 8007798:	68b5      	ldr	r5, [r6, #8]
 800779a:	e7df      	b.n	800775c <_vfiprintf_r+0x20>
 800779c:	4b79      	ldr	r3, [pc, #484]	; (8007984 <_vfiprintf_r+0x248>)
 800779e:	429d      	cmp	r5, r3
 80077a0:	bf08      	it	eq
 80077a2:	68f5      	ldreq	r5, [r6, #12]
 80077a4:	e7da      	b.n	800775c <_vfiprintf_r+0x20>
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	0598      	lsls	r0, r3, #22
 80077aa:	d4ed      	bmi.n	8007788 <_vfiprintf_r+0x4c>
 80077ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ae:	f000 fb76 	bl	8007e9e <__retarget_lock_release_recursive>
 80077b2:	e7e9      	b.n	8007788 <_vfiprintf_r+0x4c>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	2320      	movs	r3, #32
 80077ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077be:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c2:	2330      	movs	r3, #48	; 0x30
 80077c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007988 <_vfiprintf_r+0x24c>
 80077c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077cc:	f04f 0901 	mov.w	r9, #1
 80077d0:	4623      	mov	r3, r4
 80077d2:	469a      	mov	sl, r3
 80077d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d8:	b10a      	cbz	r2, 80077de <_vfiprintf_r+0xa2>
 80077da:	2a25      	cmp	r2, #37	; 0x25
 80077dc:	d1f9      	bne.n	80077d2 <_vfiprintf_r+0x96>
 80077de:	ebba 0b04 	subs.w	fp, sl, r4
 80077e2:	d00b      	beq.n	80077fc <_vfiprintf_r+0xc0>
 80077e4:	465b      	mov	r3, fp
 80077e6:	4622      	mov	r2, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ff93 	bl	8007716 <__sfputs_r>
 80077f0:	3001      	adds	r0, #1
 80077f2:	f000 80aa 	beq.w	800794a <_vfiprintf_r+0x20e>
 80077f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f8:	445a      	add	r2, fp
 80077fa:	9209      	str	r2, [sp, #36]	; 0x24
 80077fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80a2 	beq.w	800794a <_vfiprintf_r+0x20e>
 8007806:	2300      	movs	r3, #0
 8007808:	f04f 32ff 	mov.w	r2, #4294967295
 800780c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007810:	f10a 0a01 	add.w	sl, sl, #1
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	9307      	str	r3, [sp, #28]
 8007818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800781c:	931a      	str	r3, [sp, #104]	; 0x68
 800781e:	4654      	mov	r4, sl
 8007820:	2205      	movs	r2, #5
 8007822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007826:	4858      	ldr	r0, [pc, #352]	; (8007988 <_vfiprintf_r+0x24c>)
 8007828:	f7f8 fcda 	bl	80001e0 <memchr>
 800782c:	9a04      	ldr	r2, [sp, #16]
 800782e:	b9d8      	cbnz	r0, 8007868 <_vfiprintf_r+0x12c>
 8007830:	06d1      	lsls	r1, r2, #27
 8007832:	bf44      	itt	mi
 8007834:	2320      	movmi	r3, #32
 8007836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800783a:	0713      	lsls	r3, r2, #28
 800783c:	bf44      	itt	mi
 800783e:	232b      	movmi	r3, #43	; 0x2b
 8007840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007844:	f89a 3000 	ldrb.w	r3, [sl]
 8007848:	2b2a      	cmp	r3, #42	; 0x2a
 800784a:	d015      	beq.n	8007878 <_vfiprintf_r+0x13c>
 800784c:	9a07      	ldr	r2, [sp, #28]
 800784e:	4654      	mov	r4, sl
 8007850:	2000      	movs	r0, #0
 8007852:	f04f 0c0a 	mov.w	ip, #10
 8007856:	4621      	mov	r1, r4
 8007858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800785c:	3b30      	subs	r3, #48	; 0x30
 800785e:	2b09      	cmp	r3, #9
 8007860:	d94e      	bls.n	8007900 <_vfiprintf_r+0x1c4>
 8007862:	b1b0      	cbz	r0, 8007892 <_vfiprintf_r+0x156>
 8007864:	9207      	str	r2, [sp, #28]
 8007866:	e014      	b.n	8007892 <_vfiprintf_r+0x156>
 8007868:	eba0 0308 	sub.w	r3, r0, r8
 800786c:	fa09 f303 	lsl.w	r3, r9, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	9304      	str	r3, [sp, #16]
 8007874:	46a2      	mov	sl, r4
 8007876:	e7d2      	b.n	800781e <_vfiprintf_r+0xe2>
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	1d19      	adds	r1, r3, #4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	bfbb      	ittet	lt
 8007884:	425b      	neglt	r3, r3
 8007886:	f042 0202 	orrlt.w	r2, r2, #2
 800788a:	9307      	strge	r3, [sp, #28]
 800788c:	9307      	strlt	r3, [sp, #28]
 800788e:	bfb8      	it	lt
 8007890:	9204      	strlt	r2, [sp, #16]
 8007892:	7823      	ldrb	r3, [r4, #0]
 8007894:	2b2e      	cmp	r3, #46	; 0x2e
 8007896:	d10c      	bne.n	80078b2 <_vfiprintf_r+0x176>
 8007898:	7863      	ldrb	r3, [r4, #1]
 800789a:	2b2a      	cmp	r3, #42	; 0x2a
 800789c:	d135      	bne.n	800790a <_vfiprintf_r+0x1ce>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	9203      	str	r2, [sp, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bfb8      	it	lt
 80078aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ae:	3402      	adds	r4, #2
 80078b0:	9305      	str	r3, [sp, #20]
 80078b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007998 <_vfiprintf_r+0x25c>
 80078b6:	7821      	ldrb	r1, [r4, #0]
 80078b8:	2203      	movs	r2, #3
 80078ba:	4650      	mov	r0, sl
 80078bc:	f7f8 fc90 	bl	80001e0 <memchr>
 80078c0:	b140      	cbz	r0, 80078d4 <_vfiprintf_r+0x198>
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	eba0 000a 	sub.w	r0, r0, sl
 80078c8:	fa03 f000 	lsl.w	r0, r3, r0
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	4303      	orrs	r3, r0
 80078d0:	3401      	adds	r4, #1
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d8:	482c      	ldr	r0, [pc, #176]	; (800798c <_vfiprintf_r+0x250>)
 80078da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078de:	2206      	movs	r2, #6
 80078e0:	f7f8 fc7e 	bl	80001e0 <memchr>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d03f      	beq.n	8007968 <_vfiprintf_r+0x22c>
 80078e8:	4b29      	ldr	r3, [pc, #164]	; (8007990 <_vfiprintf_r+0x254>)
 80078ea:	bb1b      	cbnz	r3, 8007934 <_vfiprintf_r+0x1f8>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	3307      	adds	r3, #7
 80078f0:	f023 0307 	bic.w	r3, r3, #7
 80078f4:	3308      	adds	r3, #8
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	443b      	add	r3, r7
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	e767      	b.n	80077d0 <_vfiprintf_r+0x94>
 8007900:	fb0c 3202 	mla	r2, ip, r2, r3
 8007904:	460c      	mov	r4, r1
 8007906:	2001      	movs	r0, #1
 8007908:	e7a5      	b.n	8007856 <_vfiprintf_r+0x11a>
 800790a:	2300      	movs	r3, #0
 800790c:	3401      	adds	r4, #1
 800790e:	9305      	str	r3, [sp, #20]
 8007910:	4619      	mov	r1, r3
 8007912:	f04f 0c0a 	mov.w	ip, #10
 8007916:	4620      	mov	r0, r4
 8007918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791c:	3a30      	subs	r2, #48	; 0x30
 800791e:	2a09      	cmp	r2, #9
 8007920:	d903      	bls.n	800792a <_vfiprintf_r+0x1ee>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0c5      	beq.n	80078b2 <_vfiprintf_r+0x176>
 8007926:	9105      	str	r1, [sp, #20]
 8007928:	e7c3      	b.n	80078b2 <_vfiprintf_r+0x176>
 800792a:	fb0c 2101 	mla	r1, ip, r1, r2
 800792e:	4604      	mov	r4, r0
 8007930:	2301      	movs	r3, #1
 8007932:	e7f0      	b.n	8007916 <_vfiprintf_r+0x1da>
 8007934:	ab03      	add	r3, sp, #12
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	462a      	mov	r2, r5
 800793a:	4b16      	ldr	r3, [pc, #88]	; (8007994 <_vfiprintf_r+0x258>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	4630      	mov	r0, r6
 8007940:	f7fc f886 	bl	8003a50 <_printf_float>
 8007944:	4607      	mov	r7, r0
 8007946:	1c78      	adds	r0, r7, #1
 8007948:	d1d6      	bne.n	80078f8 <_vfiprintf_r+0x1bc>
 800794a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794c:	07d9      	lsls	r1, r3, #31
 800794e:	d405      	bmi.n	800795c <_vfiprintf_r+0x220>
 8007950:	89ab      	ldrh	r3, [r5, #12]
 8007952:	059a      	lsls	r2, r3, #22
 8007954:	d402      	bmi.n	800795c <_vfiprintf_r+0x220>
 8007956:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007958:	f000 faa1 	bl	8007e9e <__retarget_lock_release_recursive>
 800795c:	89ab      	ldrh	r3, [r5, #12]
 800795e:	065b      	lsls	r3, r3, #25
 8007960:	f53f af12 	bmi.w	8007788 <_vfiprintf_r+0x4c>
 8007964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007966:	e711      	b.n	800778c <_vfiprintf_r+0x50>
 8007968:	ab03      	add	r3, sp, #12
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	462a      	mov	r2, r5
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <_vfiprintf_r+0x258>)
 8007970:	a904      	add	r1, sp, #16
 8007972:	4630      	mov	r0, r6
 8007974:	f7fc fb10 	bl	8003f98 <_printf_i>
 8007978:	e7e4      	b.n	8007944 <_vfiprintf_r+0x208>
 800797a:	bf00      	nop
 800797c:	0800868c 	.word	0x0800868c
 8007980:	080086ac 	.word	0x080086ac
 8007984:	0800866c 	.word	0x0800866c
 8007988:	0800861c 	.word	0x0800861c
 800798c:	08008626 	.word	0x08008626
 8007990:	08003a51 	.word	0x08003a51
 8007994:	08007717 	.word	0x08007717
 8007998:	08008622 	.word	0x08008622

0800799c <__swbuf_r>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	460e      	mov	r6, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	4605      	mov	r5, r0
 80079a4:	b118      	cbz	r0, 80079ae <__swbuf_r+0x12>
 80079a6:	6983      	ldr	r3, [r0, #24]
 80079a8:	b90b      	cbnz	r3, 80079ae <__swbuf_r+0x12>
 80079aa:	f000 f9d9 	bl	8007d60 <__sinit>
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <__swbuf_r+0x98>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d12b      	bne.n	8007a0c <__swbuf_r+0x70>
 80079b4:	686c      	ldr	r4, [r5, #4]
 80079b6:	69a3      	ldr	r3, [r4, #24]
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	071a      	lsls	r2, r3, #28
 80079be:	d52f      	bpl.n	8007a20 <__swbuf_r+0x84>
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	b36b      	cbz	r3, 8007a20 <__swbuf_r+0x84>
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	1ac0      	subs	r0, r0, r3
 80079ca:	6963      	ldr	r3, [r4, #20]
 80079cc:	b2f6      	uxtb	r6, r6
 80079ce:	4283      	cmp	r3, r0
 80079d0:	4637      	mov	r7, r6
 80079d2:	dc04      	bgt.n	80079de <__swbuf_r+0x42>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f92e 	bl	8007c38 <_fflush_r>
 80079dc:	bb30      	cbnz	r0, 8007a2c <__swbuf_r+0x90>
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	60a3      	str	r3, [r4, #8]
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	701e      	strb	r6, [r3, #0]
 80079ec:	6963      	ldr	r3, [r4, #20]
 80079ee:	3001      	adds	r0, #1
 80079f0:	4283      	cmp	r3, r0
 80079f2:	d004      	beq.n	80079fe <__swbuf_r+0x62>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	07db      	lsls	r3, r3, #31
 80079f8:	d506      	bpl.n	8007a08 <__swbuf_r+0x6c>
 80079fa:	2e0a      	cmp	r6, #10
 80079fc:	d104      	bne.n	8007a08 <__swbuf_r+0x6c>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f919 	bl	8007c38 <_fflush_r>
 8007a06:	b988      	cbnz	r0, 8007a2c <__swbuf_r+0x90>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <__swbuf_r+0x9c>)
 8007a0e:	429c      	cmp	r4, r3
 8007a10:	d101      	bne.n	8007a16 <__swbuf_r+0x7a>
 8007a12:	68ac      	ldr	r4, [r5, #8]
 8007a14:	e7cf      	b.n	80079b6 <__swbuf_r+0x1a>
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <__swbuf_r+0xa0>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	bf08      	it	eq
 8007a1c:	68ec      	ldreq	r4, [r5, #12]
 8007a1e:	e7ca      	b.n	80079b6 <__swbuf_r+0x1a>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f80c 	bl	8007a40 <__swsetup_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0cb      	beq.n	80079c4 <__swbuf_r+0x28>
 8007a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a30:	e7ea      	b.n	8007a08 <__swbuf_r+0x6c>
 8007a32:	bf00      	nop
 8007a34:	0800868c 	.word	0x0800868c
 8007a38:	080086ac 	.word	0x080086ac
 8007a3c:	0800866c 	.word	0x0800866c

08007a40 <__swsetup_r>:
 8007a40:	4b32      	ldr	r3, [pc, #200]	; (8007b0c <__swsetup_r+0xcc>)
 8007a42:	b570      	push	{r4, r5, r6, lr}
 8007a44:	681d      	ldr	r5, [r3, #0]
 8007a46:	4606      	mov	r6, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	b125      	cbz	r5, 8007a56 <__swsetup_r+0x16>
 8007a4c:	69ab      	ldr	r3, [r5, #24]
 8007a4e:	b913      	cbnz	r3, 8007a56 <__swsetup_r+0x16>
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f985 	bl	8007d60 <__sinit>
 8007a56:	4b2e      	ldr	r3, [pc, #184]	; (8007b10 <__swsetup_r+0xd0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d10f      	bne.n	8007a7c <__swsetup_r+0x3c>
 8007a5c:	686c      	ldr	r4, [r5, #4]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d42c      	bmi.n	8007ac2 <__swsetup_r+0x82>
 8007a68:	06dd      	lsls	r5, r3, #27
 8007a6a:	d411      	bmi.n	8007a90 <__swsetup_r+0x50>
 8007a6c:	2309      	movs	r3, #9
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e03e      	b.n	8007afa <__swsetup_r+0xba>
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <__swsetup_r+0xd4>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swsetup_r+0x46>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7eb      	b.n	8007a5e <__swsetup_r+0x1e>
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <__swsetup_r+0xd8>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7e6      	b.n	8007a5e <__swsetup_r+0x1e>
 8007a90:	0758      	lsls	r0, r3, #29
 8007a92:	d512      	bpl.n	8007aba <__swsetup_r+0x7a>
 8007a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a96:	b141      	cbz	r1, 8007aaa <__swsetup_r+0x6a>
 8007a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <__swsetup_r+0x66>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff fb67 	bl	8007174 <_free_r>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0308 	orr.w	r3, r3, #8
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	b94b      	cbnz	r3, 8007ada <__swsetup_r+0x9a>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad0:	d003      	beq.n	8007ada <__swsetup_r+0x9a>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 fa07 	bl	8007ee8 <__smakebuf_r>
 8007ada:	89a0      	ldrh	r0, [r4, #12]
 8007adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae0:	f010 0301 	ands.w	r3, r0, #1
 8007ae4:	d00a      	beq.n	8007afc <__swsetup_r+0xbc>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6963      	ldr	r3, [r4, #20]
 8007aec:	425b      	negs	r3, r3
 8007aee:	61a3      	str	r3, [r4, #24]
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b943      	cbnz	r3, 8007b06 <__swsetup_r+0xc6>
 8007af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007af8:	d1ba      	bne.n	8007a70 <__swsetup_r+0x30>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	0781      	lsls	r1, r0, #30
 8007afe:	bf58      	it	pl
 8007b00:	6963      	ldrpl	r3, [r4, #20]
 8007b02:	60a3      	str	r3, [r4, #8]
 8007b04:	e7f4      	b.n	8007af0 <__swsetup_r+0xb0>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7f7      	b.n	8007afa <__swsetup_r+0xba>
 8007b0a:	bf00      	nop
 8007b0c:	200000e0 	.word	0x200000e0
 8007b10:	0800868c 	.word	0x0800868c
 8007b14:	080086ac 	.word	0x080086ac
 8007b18:	0800866c 	.word	0x0800866c

08007b1c <abort>:
 8007b1c:	b508      	push	{r3, lr}
 8007b1e:	2006      	movs	r0, #6
 8007b20:	f000 fa52 	bl	8007fc8 <raise>
 8007b24:	2001      	movs	r0, #1
 8007b26:	f7f9 fec9 	bl	80018bc <_exit>
	...

08007b2c <__sflush_r>:
 8007b2c:	898a      	ldrh	r2, [r1, #12]
 8007b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	4605      	mov	r5, r0
 8007b34:	0710      	lsls	r0, r2, #28
 8007b36:	460c      	mov	r4, r1
 8007b38:	d458      	bmi.n	8007bec <__sflush_r+0xc0>
 8007b3a:	684b      	ldr	r3, [r1, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dc05      	bgt.n	8007b4c <__sflush_r+0x20>
 8007b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dc02      	bgt.n	8007b4c <__sflush_r+0x20>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	d0f9      	beq.n	8007b46 <__sflush_r+0x1a>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b58:	682f      	ldr	r7, [r5, #0]
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	d032      	beq.n	8007bc4 <__sflush_r+0x98>
 8007b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	075a      	lsls	r2, r3, #29
 8007b64:	d505      	bpl.n	8007b72 <__sflush_r+0x46>
 8007b66:	6863      	ldr	r3, [r4, #4]
 8007b68:	1ac0      	subs	r0, r0, r3
 8007b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b6c:	b10b      	cbz	r3, 8007b72 <__sflush_r+0x46>
 8007b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	2300      	movs	r3, #0
 8007b74:	4602      	mov	r2, r0
 8007b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b78:	6a21      	ldr	r1, [r4, #32]
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b0      	blx	r6
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	d106      	bne.n	8007b92 <__sflush_r+0x66>
 8007b84:	6829      	ldr	r1, [r5, #0]
 8007b86:	291d      	cmp	r1, #29
 8007b88:	d82c      	bhi.n	8007be4 <__sflush_r+0xb8>
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <__sflush_r+0x108>)
 8007b8c:	40ca      	lsrs	r2, r1
 8007b8e:	07d6      	lsls	r6, r2, #31
 8007b90:	d528      	bpl.n	8007be4 <__sflush_r+0xb8>
 8007b92:	2200      	movs	r2, #0
 8007b94:	6062      	str	r2, [r4, #4]
 8007b96:	04d9      	lsls	r1, r3, #19
 8007b98:	6922      	ldr	r2, [r4, #16]
 8007b9a:	6022      	str	r2, [r4, #0]
 8007b9c:	d504      	bpl.n	8007ba8 <__sflush_r+0x7c>
 8007b9e:	1c42      	adds	r2, r0, #1
 8007ba0:	d101      	bne.n	8007ba6 <__sflush_r+0x7a>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	b903      	cbnz	r3, 8007ba8 <__sflush_r+0x7c>
 8007ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007baa:	602f      	str	r7, [r5, #0]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d0ca      	beq.n	8007b46 <__sflush_r+0x1a>
 8007bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	d002      	beq.n	8007bbe <__sflush_r+0x92>
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7ff fadb 	bl	8007174 <_free_r>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007bc2:	e7c1      	b.n	8007b48 <__sflush_r+0x1c>
 8007bc4:	6a21      	ldr	r1, [r4, #32]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b0      	blx	r6
 8007bcc:	1c41      	adds	r1, r0, #1
 8007bce:	d1c7      	bne.n	8007b60 <__sflush_r+0x34>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0c4      	beq.n	8007b60 <__sflush_r+0x34>
 8007bd6:	2b1d      	cmp	r3, #29
 8007bd8:	d001      	beq.n	8007bde <__sflush_r+0xb2>
 8007bda:	2b16      	cmp	r3, #22
 8007bdc:	d101      	bne.n	8007be2 <__sflush_r+0xb6>
 8007bde:	602f      	str	r7, [r5, #0]
 8007be0:	e7b1      	b.n	8007b46 <__sflush_r+0x1a>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	e7ad      	b.n	8007b48 <__sflush_r+0x1c>
 8007bec:	690f      	ldr	r7, [r1, #16]
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	d0a9      	beq.n	8007b46 <__sflush_r+0x1a>
 8007bf2:	0793      	lsls	r3, r2, #30
 8007bf4:	680e      	ldr	r6, [r1, #0]
 8007bf6:	bf08      	it	eq
 8007bf8:	694b      	ldreq	r3, [r1, #20]
 8007bfa:	600f      	str	r7, [r1, #0]
 8007bfc:	bf18      	it	ne
 8007bfe:	2300      	movne	r3, #0
 8007c00:	eba6 0807 	sub.w	r8, r6, r7
 8007c04:	608b      	str	r3, [r1, #8]
 8007c06:	f1b8 0f00 	cmp.w	r8, #0
 8007c0a:	dd9c      	ble.n	8007b46 <__sflush_r+0x1a>
 8007c0c:	6a21      	ldr	r1, [r4, #32]
 8007c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c10:	4643      	mov	r3, r8
 8007c12:	463a      	mov	r2, r7
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b0      	blx	r6
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dc06      	bgt.n	8007c2a <__sflush_r+0xfe>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c22:	81a3      	strh	r3, [r4, #12]
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	e78e      	b.n	8007b48 <__sflush_r+0x1c>
 8007c2a:	4407      	add	r7, r0
 8007c2c:	eba8 0800 	sub.w	r8, r8, r0
 8007c30:	e7e9      	b.n	8007c06 <__sflush_r+0xda>
 8007c32:	bf00      	nop
 8007c34:	20400001 	.word	0x20400001

08007c38 <_fflush_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	690b      	ldr	r3, [r1, #16]
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	b913      	cbnz	r3, 8007c48 <_fflush_r+0x10>
 8007c42:	2500      	movs	r5, #0
 8007c44:	4628      	mov	r0, r5
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	b118      	cbz	r0, 8007c52 <_fflush_r+0x1a>
 8007c4a:	6983      	ldr	r3, [r0, #24]
 8007c4c:	b90b      	cbnz	r3, 8007c52 <_fflush_r+0x1a>
 8007c4e:	f000 f887 	bl	8007d60 <__sinit>
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <_fflush_r+0x6c>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d11b      	bne.n	8007c90 <_fflush_r+0x58>
 8007c58:	686c      	ldr	r4, [r5, #4]
 8007c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ef      	beq.n	8007c42 <_fflush_r+0xa>
 8007c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c64:	07d0      	lsls	r0, r2, #31
 8007c66:	d404      	bmi.n	8007c72 <_fflush_r+0x3a>
 8007c68:	0599      	lsls	r1, r3, #22
 8007c6a:	d402      	bmi.n	8007c72 <_fflush_r+0x3a>
 8007c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6e:	f000 f915 	bl	8007e9c <__retarget_lock_acquire_recursive>
 8007c72:	4628      	mov	r0, r5
 8007c74:	4621      	mov	r1, r4
 8007c76:	f7ff ff59 	bl	8007b2c <__sflush_r>
 8007c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c7c:	07da      	lsls	r2, r3, #31
 8007c7e:	4605      	mov	r5, r0
 8007c80:	d4e0      	bmi.n	8007c44 <_fflush_r+0xc>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	059b      	lsls	r3, r3, #22
 8007c86:	d4dd      	bmi.n	8007c44 <_fflush_r+0xc>
 8007c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8a:	f000 f908 	bl	8007e9e <__retarget_lock_release_recursive>
 8007c8e:	e7d9      	b.n	8007c44 <_fflush_r+0xc>
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <_fflush_r+0x70>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <_fflush_r+0x62>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7df      	b.n	8007c5a <_fflush_r+0x22>
 8007c9a:	4b04      	ldr	r3, [pc, #16]	; (8007cac <_fflush_r+0x74>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7da      	b.n	8007c5a <_fflush_r+0x22>
 8007ca4:	0800868c 	.word	0x0800868c
 8007ca8:	080086ac 	.word	0x080086ac
 8007cac:	0800866c 	.word	0x0800866c

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	; 0x5c
 8007cce:	f7fb fe17 	bl	8003900 <memset>
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x38>)
 8007cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <std+0x3c>)
 8007cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <std+0x40>)
 8007cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <std+0x44>)
 8007ce0:	6224      	str	r4, [r4, #32]
 8007ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08008001 	.word	0x08008001
 8007cec:	08008023 	.word	0x08008023
 8007cf0:	0800805b 	.word	0x0800805b
 8007cf4:	0800807f 	.word	0x0800807f

08007cf8 <_cleanup_r>:
 8007cf8:	4901      	ldr	r1, [pc, #4]	; (8007d00 <_cleanup_r+0x8>)
 8007cfa:	f000 b8af 	b.w	8007e5c <_fwalk_reent>
 8007cfe:	bf00      	nop
 8007d00:	08007c39 	.word	0x08007c39

08007d04 <__sfmoreglue>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	1e4a      	subs	r2, r1, #1
 8007d08:	2568      	movs	r5, #104	; 0x68
 8007d0a:	4355      	muls	r5, r2
 8007d0c:	460e      	mov	r6, r1
 8007d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d12:	f7ff fa7f 	bl	8007214 <_malloc_r>
 8007d16:	4604      	mov	r4, r0
 8007d18:	b140      	cbz	r0, 8007d2c <__sfmoreglue+0x28>
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d20:	300c      	adds	r0, #12
 8007d22:	60a0      	str	r0, [r4, #8]
 8007d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d28:	f7fb fdea 	bl	8003900 <memset>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}

08007d30 <__sfp_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_acquire+0x8>)
 8007d32:	f000 b8b3 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	20000394 	.word	0x20000394

08007d3c <__sfp_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sfp_lock_release+0x8>)
 8007d3e:	f000 b8ae 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	20000394 	.word	0x20000394

08007d48 <__sinit_lock_acquire>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sinit_lock_acquire+0x8>)
 8007d4a:	f000 b8a7 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	2000038f 	.word	0x2000038f

08007d54 <__sinit_lock_release>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__sinit_lock_release+0x8>)
 8007d56:	f000 b8a2 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	2000038f 	.word	0x2000038f

08007d60 <__sinit>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	f7ff fff0 	bl	8007d48 <__sinit_lock_acquire>
 8007d68:	69a3      	ldr	r3, [r4, #24]
 8007d6a:	b11b      	cbz	r3, 8007d74 <__sinit+0x14>
 8007d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d70:	f7ff bff0 	b.w	8007d54 <__sinit_lock_release>
 8007d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d78:	6523      	str	r3, [r4, #80]	; 0x50
 8007d7a:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <__sinit+0x68>)
 8007d7c:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <__sinit+0x6c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	bf04      	itt	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	61a3      	streq	r3, [r4, #24]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f820 	bl	8007dd0 <__sfp>
 8007d90:	6060      	str	r0, [r4, #4]
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f81c 	bl	8007dd0 <__sfp>
 8007d98:	60a0      	str	r0, [r4, #8]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 f818 	bl	8007dd0 <__sfp>
 8007da0:	2200      	movs	r2, #0
 8007da2:	60e0      	str	r0, [r4, #12]
 8007da4:	2104      	movs	r1, #4
 8007da6:	6860      	ldr	r0, [r4, #4]
 8007da8:	f7ff ff82 	bl	8007cb0 <std>
 8007dac:	68a0      	ldr	r0, [r4, #8]
 8007dae:	2201      	movs	r2, #1
 8007db0:	2109      	movs	r1, #9
 8007db2:	f7ff ff7d 	bl	8007cb0 <std>
 8007db6:	68e0      	ldr	r0, [r4, #12]
 8007db8:	2202      	movs	r2, #2
 8007dba:	2112      	movs	r1, #18
 8007dbc:	f7ff ff78 	bl	8007cb0 <std>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	61a3      	str	r3, [r4, #24]
 8007dc4:	e7d2      	b.n	8007d6c <__sinit+0xc>
 8007dc6:	bf00      	nop
 8007dc8:	08008218 	.word	0x08008218
 8007dcc:	08007cf9 	.word	0x08007cf9

08007dd0 <__sfp>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	f7ff ffac 	bl	8007d30 <__sfp_lock_acquire>
 8007dd8:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <__sfp+0x84>)
 8007dda:	681e      	ldr	r6, [r3, #0]
 8007ddc:	69b3      	ldr	r3, [r6, #24]
 8007dde:	b913      	cbnz	r3, 8007de6 <__sfp+0x16>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ffbd 	bl	8007d60 <__sinit>
 8007de6:	3648      	adds	r6, #72	; 0x48
 8007de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	d503      	bpl.n	8007df8 <__sfp+0x28>
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	b30b      	cbz	r3, 8007e38 <__sfp+0x68>
 8007df4:	6836      	ldr	r6, [r6, #0]
 8007df6:	e7f7      	b.n	8007de8 <__sfp+0x18>
 8007df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dfc:	b9d5      	cbnz	r5, 8007e34 <__sfp+0x64>
 8007dfe:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <__sfp+0x88>)
 8007e00:	60e3      	str	r3, [r4, #12]
 8007e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e06:	6665      	str	r5, [r4, #100]	; 0x64
 8007e08:	f000 f847 	bl	8007e9a <__retarget_lock_init_recursive>
 8007e0c:	f7ff ff96 	bl	8007d3c <__sfp_lock_release>
 8007e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e18:	6025      	str	r5, [r4, #0]
 8007e1a:	61a5      	str	r5, [r4, #24]
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	4629      	mov	r1, r5
 8007e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e24:	f7fb fd6c 	bl	8003900 <memset>
 8007e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e30:	4620      	mov	r0, r4
 8007e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e34:	3468      	adds	r4, #104	; 0x68
 8007e36:	e7d9      	b.n	8007dec <__sfp+0x1c>
 8007e38:	2104      	movs	r1, #4
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	f7ff ff62 	bl	8007d04 <__sfmoreglue>
 8007e40:	4604      	mov	r4, r0
 8007e42:	6030      	str	r0, [r6, #0]
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1d5      	bne.n	8007df4 <__sfp+0x24>
 8007e48:	f7ff ff78 	bl	8007d3c <__sfp_lock_release>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	e7ee      	b.n	8007e30 <__sfp+0x60>
 8007e52:	bf00      	nop
 8007e54:	08008218 	.word	0x08008218
 8007e58:	ffff0001 	.word	0xffff0001

08007e5c <_fwalk_reent>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	4606      	mov	r6, r0
 8007e62:	4688      	mov	r8, r1
 8007e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e68:	2700      	movs	r7, #0
 8007e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e72:	d505      	bpl.n	8007e80 <_fwalk_reent+0x24>
 8007e74:	6824      	ldr	r4, [r4, #0]
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	d1f7      	bne.n	8007e6a <_fwalk_reent+0xe>
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e80:	89ab      	ldrh	r3, [r5, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d907      	bls.n	8007e96 <_fwalk_reent+0x3a>
 8007e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	d003      	beq.n	8007e96 <_fwalk_reent+0x3a>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	47c0      	blx	r8
 8007e94:	4307      	orrs	r7, r0
 8007e96:	3568      	adds	r5, #104	; 0x68
 8007e98:	e7e9      	b.n	8007e6e <_fwalk_reent+0x12>

08007e9a <__retarget_lock_init_recursive>:
 8007e9a:	4770      	bx	lr

08007e9c <__retarget_lock_acquire_recursive>:
 8007e9c:	4770      	bx	lr

08007e9e <__retarget_lock_release_recursive>:
 8007e9e:	4770      	bx	lr

08007ea0 <__swhatbuf_r>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	b096      	sub	sp, #88	; 0x58
 8007eac:	4614      	mov	r4, r2
 8007eae:	461d      	mov	r5, r3
 8007eb0:	da07      	bge.n	8007ec2 <__swhatbuf_r+0x22>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	602b      	str	r3, [r5, #0]
 8007eb6:	89b3      	ldrh	r3, [r6, #12]
 8007eb8:	061a      	lsls	r2, r3, #24
 8007eba:	d410      	bmi.n	8007ede <__swhatbuf_r+0x3e>
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	e00e      	b.n	8007ee0 <__swhatbuf_r+0x40>
 8007ec2:	466a      	mov	r2, sp
 8007ec4:	f000 f902 	bl	80080cc <_fstat_r>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dbf2      	blt.n	8007eb2 <__swhatbuf_r+0x12>
 8007ecc:	9a01      	ldr	r2, [sp, #4]
 8007ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ed6:	425a      	negs	r2, r3
 8007ed8:	415a      	adcs	r2, r3
 8007eda:	602a      	str	r2, [r5, #0]
 8007edc:	e7ee      	b.n	8007ebc <__swhatbuf_r+0x1c>
 8007ede:	2340      	movs	r3, #64	; 0x40
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	b016      	add	sp, #88	; 0x58
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}

08007ee8 <__smakebuf_r>:
 8007ee8:	898b      	ldrh	r3, [r1, #12]
 8007eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eec:	079d      	lsls	r5, r3, #30
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	d507      	bpl.n	8007f04 <__smakebuf_r+0x1c>
 8007ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	2301      	movs	r3, #1
 8007efe:	6163      	str	r3, [r4, #20]
 8007f00:	b002      	add	sp, #8
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	ab01      	add	r3, sp, #4
 8007f06:	466a      	mov	r2, sp
 8007f08:	f7ff ffca 	bl	8007ea0 <__swhatbuf_r>
 8007f0c:	9900      	ldr	r1, [sp, #0]
 8007f0e:	4605      	mov	r5, r0
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff f97f 	bl	8007214 <_malloc_r>
 8007f16:	b948      	cbnz	r0, 8007f2c <__smakebuf_r+0x44>
 8007f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1c:	059a      	lsls	r2, r3, #22
 8007f1e:	d4ef      	bmi.n	8007f00 <__smakebuf_r+0x18>
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7e3      	b.n	8007ef4 <__smakebuf_r+0xc>
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <__smakebuf_r+0x7c>)
 8007f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	6020      	str	r0, [r4, #0]
 8007f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	9b00      	ldr	r3, [sp, #0]
 8007f3c:	6163      	str	r3, [r4, #20]
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	6120      	str	r0, [r4, #16]
 8007f42:	b15b      	cbz	r3, 8007f5c <__smakebuf_r+0x74>
 8007f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f8d1 	bl	80080f0 <_isatty_r>
 8007f4e:	b128      	cbz	r0, 8007f5c <__smakebuf_r+0x74>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	89a0      	ldrh	r0, [r4, #12]
 8007f5e:	4305      	orrs	r5, r0
 8007f60:	81a5      	strh	r5, [r4, #12]
 8007f62:	e7cd      	b.n	8007f00 <__smakebuf_r+0x18>
 8007f64:	08007cf9 	.word	0x08007cf9

08007f68 <_malloc_usable_size_r>:
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f18      	subs	r0, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfbc      	itt	lt
 8007f72:	580b      	ldrlt	r3, [r1, r0]
 8007f74:	18c0      	addlt	r0, r0, r3
 8007f76:	4770      	bx	lr

08007f78 <_raise_r>:
 8007f78:	291f      	cmp	r1, #31
 8007f7a:	b538      	push	{r3, r4, r5, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	460d      	mov	r5, r1
 8007f80:	d904      	bls.n	8007f8c <_raise_r+0x14>
 8007f82:	2316      	movs	r3, #22
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f8e:	b112      	cbz	r2, 8007f96 <_raise_r+0x1e>
 8007f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f94:	b94b      	cbnz	r3, 8007faa <_raise_r+0x32>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f830 	bl	8007ffc <_getpid_r>
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa6:	f000 b817 	b.w	8007fd8 <_kill_r>
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d00a      	beq.n	8007fc4 <_raise_r+0x4c>
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	d103      	bne.n	8007fba <_raise_r+0x42>
 8007fb2:	2316      	movs	r3, #22
 8007fb4:	6003      	str	r3, [r0, #0]
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7e7      	b.n	8007f8a <_raise_r+0x12>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	4798      	blx	r3
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e7e0      	b.n	8007f8a <_raise_r+0x12>

08007fc8 <raise>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <raise+0xc>)
 8007fca:	4601      	mov	r1, r0
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f7ff bfd3 	b.w	8007f78 <_raise_r>
 8007fd2:	bf00      	nop
 8007fd4:	200000e0 	.word	0x200000e0

08007fd8 <_kill_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_kill_r+0x20>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	f7f9 fc59 	bl	800189c <_kill>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	d102      	bne.n	8007ff4 <_kill_r+0x1c>
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	b103      	cbz	r3, 8007ff4 <_kill_r+0x1c>
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000388 	.word	0x20000388

08007ffc <_getpid_r>:
 8007ffc:	f7f9 bc46 	b.w	800188c <_getpid>

08008000 <__sread>:
 8008000:	b510      	push	{r4, lr}
 8008002:	460c      	mov	r4, r1
 8008004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008008:	f000 f894 	bl	8008134 <_read_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	bfab      	itete	ge
 8008010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008012:	89a3      	ldrhlt	r3, [r4, #12]
 8008014:	181b      	addge	r3, r3, r0
 8008016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800801a:	bfac      	ite	ge
 800801c:	6563      	strge	r3, [r4, #84]	; 0x54
 800801e:	81a3      	strhlt	r3, [r4, #12]
 8008020:	bd10      	pop	{r4, pc}

08008022 <__swrite>:
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	461f      	mov	r7, r3
 8008028:	898b      	ldrh	r3, [r1, #12]
 800802a:	05db      	lsls	r3, r3, #23
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	4616      	mov	r6, r2
 8008032:	d505      	bpl.n	8008040 <__swrite+0x1e>
 8008034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008038:	2302      	movs	r3, #2
 800803a:	2200      	movs	r2, #0
 800803c:	f000 f868 	bl	8008110 <_lseek_r>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	4628      	mov	r0, r5
 8008052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	f000 b817 	b.w	8008088 <_write_r>

0800805a <__sseek>:
 800805a:	b510      	push	{r4, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 f855 	bl	8008110 <_lseek_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	bf15      	itete	ne
 800806c:	6560      	strne	r0, [r4, #84]	; 0x54
 800806e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008076:	81a3      	strheq	r3, [r4, #12]
 8008078:	bf18      	it	ne
 800807a:	81a3      	strhne	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__sclose>:
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 b813 	b.w	80080ac <_close_r>
	...

08008088 <_write_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	; (80080a8 <_write_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f9 fc37 	bl	800190a <_write>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_write_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_write_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20000388 	.word	0x20000388

080080ac <_close_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d06      	ldr	r5, [pc, #24]	; (80080c8 <_close_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	602b      	str	r3, [r5, #0]
 80080b8:	f7f9 fc43 	bl	8001942 <_close>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_close_r+0x1a>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_close_r+0x1a>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20000388 	.word	0x20000388

080080cc <_fstat_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_fstat_r+0x20>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	f7f9 fc3e 	bl	800195a <_fstat>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d102      	bne.n	80080e8 <_fstat_r+0x1c>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	b103      	cbz	r3, 80080e8 <_fstat_r+0x1c>
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	20000388 	.word	0x20000388

080080f0 <_isatty_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d06      	ldr	r5, [pc, #24]	; (800810c <_isatty_r+0x1c>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	f7f9 fc3d 	bl	800197a <_isatty>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_isatty_r+0x1a>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_isatty_r+0x1a>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20000388 	.word	0x20000388

08008110 <_lseek_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d07      	ldr	r5, [pc, #28]	; (8008130 <_lseek_r+0x20>)
 8008114:	4604      	mov	r4, r0
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	2200      	movs	r2, #0
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7f9 fc36 	bl	8001990 <_lseek>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_lseek_r+0x1e>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_lseek_r+0x1e>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20000388 	.word	0x20000388

08008134 <_read_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	; (8008154 <_read_r+0x20>)
 8008138:	4604      	mov	r4, r0
 800813a:	4608      	mov	r0, r1
 800813c:	4611      	mov	r1, r2
 800813e:	2200      	movs	r2, #0
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f7f9 fbc4 	bl	80018d0 <_read>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_read_r+0x1e>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_read_r+0x1e>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20000388 	.word	0x20000388

08008158 <_init>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr

08008164 <_fini>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr
