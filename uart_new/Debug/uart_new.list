
uart_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032dc  080032dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e4  080032e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000158  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000990c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016cd  00000000  00000000  000299ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209b5  00000000  00000000  0002be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009075  00000000  00000000  0004c81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd06d  00000000  00000000  00055892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001228ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002078  00000000  00000000  00122954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800325c 	.word	0x0800325c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800325c 	.word	0x0800325c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbb9 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f853 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f97f 	bl	8000878 <MX_GPIO_Init>
  MX_UART4_Init();
 800057a:	f000 f8ff 	bl	800077c <MX_UART4_Init>
  MX_UART5_Init();
 800057e:	f000 f927 	bl	80007d0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f94f 	bl	8000824 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000586:	f000 f8a7 	bl	80006d8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t Test[] = "Hello World !!!\n";
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x98>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	682b      	ldr	r3, [r5, #0]
 8000596:	7023      	strb	r3, [r4, #0]
	  	  HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f000 fc14 	bl	8000dc8 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <main+0x9c>)
 80005a8:	f001 fa80 	bl	8001aac <HAL_GPIO_WritePin>
	  	      HAL_ADC_Start(&hadc1);
 80005ac:	4816      	ldr	r0, [pc, #88]	; (8000608 <main+0xa0>)
 80005ae:	f000 fc73 	bl	8000e98 <HAL_ADC_Start>
	  	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005b2:	f04f 31ff 	mov.w	r1, #4294967295
 80005b6:	4814      	ldr	r0, [pc, #80]	; (8000608 <main+0xa0>)
 80005b8:	f000 fd40 	bl	800103c <HAL_ADC_PollForConversion>
	  	      raw = HAL_ADC_GetValue(&hadc1);
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0xa0>)
 80005be:	f000 fdc8 	bl	8001152 <HAL_ADC_GetValue>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <main+0xa4>)
 80005c8:	601a      	str	r2, [r3, #0]
	  	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <main+0x9c>)
 80005d2:	f001 fa6b 	bl	8001aac <HAL_GPIO_WritePin>
	  	      sprintf(msg, "%h\r\n", raw);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0xa8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <main+0xa4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <main+0xac>)
 80005e4:	f002 fa0c 	bl	8002a00 <siprintf>
	  	      HAL_UART_Transmit(&huart4,msg,sizeof(msg),10);
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <main+0xa8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	230a      	movs	r3, #10
 80005f0:	2204      	movs	r2, #4
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <main+0xb0>)
 80005f4:	f001 ff09 	bl	800240a <HAL_UART_Transmit>

	  	      // Pretend we have to do something else for a while
	  	      HAL_Delay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fbe5 	bl	8000dc8 <HAL_Delay>
  {
 80005fe:	e7c4      	b.n	800058a <main+0x22>
 8000600:	0800327c 	.word	0x0800327c
 8000604:	40020000 	.word	0x40020000
 8000608:	200000e0 	.word	0x200000e0
 800060c:	20000128 	.word	0x20000128
 8000610:	20000098 	.word	0x20000098
 8000614:	08003274 	.word	0x08003274
 8000618:	2000012c 	.word	0x2000012c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f9e0 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fa27 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 f924 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fc8a 	bl	8001fd0 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 f90f 	bl	80008e4 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC1_Init+0x98>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <MX_ADC1_Init+0x9c>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_ADC1_Init+0x98>)
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_ADC1_Init+0xa0>)
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_ADC1_Init+0x98>)
 8000724:	2201      	movs	r2, #1
 8000726:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <MX_ADC1_Init+0x98>)
 8000738:	f000 fb6a 	bl	8000e10 <HAL_ADC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f8cf 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0x98>)
 8000758:	f000 fd08 	bl	800116c <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000762:	f000 f8bf 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000e0 	.word	0x200000e0
 8000774:	40012000 	.word	0x40012000
 8000778:	0f000001 	.word	0x0f000001

0800077c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_UART4_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_UART4_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_UART4_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_UART4_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_UART4_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_UART4_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_UART4_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_UART4_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_UART4_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_UART4_Init+0x4c>)
 80007b4:	f001 fddc 	bl	8002370 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f891 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	40004c00 	.word	0x40004c00

080007d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_UART5_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_UART5_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_UART5_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_UART5_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_UART5_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_UART5_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_UART5_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_UART5_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_UART5_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_UART5_Init+0x4c>)
 8000808:	f001 fdb2 	bl	8002370 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f867 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000009c 	.word	0x2000009c
 8000820:	40005000 	.word	0x40005000

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f001 fd88 	bl	8002370 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f83d 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000170 	.word	0x20000170
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_GPIO_Init+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <MX_GPIO_Init+0x68>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x68>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_ADC_MspInit+0x7c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d127      	bne.n	80009b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 800096c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099e:	2303      	movs	r3, #3
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_ADC_MspInit+0x84>)
 80009ae:	f000 fee1 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40012000 	.word	0x40012000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a6a      	ldr	r2, [pc, #424]	; (8000b90 <HAL_UART_MspInit+0x1c8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d14b      	bne.n	8000a82 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ee:	4b69      	ldr	r3, [pc, #420]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a68      	ldr	r2, [pc, #416]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 80009f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b66      	ldr	r3, [pc, #408]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a61      	ldr	r2, [pc, #388]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b5f      	ldr	r3, [pc, #380]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a5a      	ldr	r2, [pc, #360]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a56:	4619      	mov	r1, r3
 8000a58:	484f      	ldr	r0, [pc, #316]	; (8000b98 <HAL_UART_MspInit+0x1d0>)
 8000a5a:	f000 fe8b 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a70:	2308      	movs	r3, #8
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4848      	ldr	r0, [pc, #288]	; (8000b9c <HAL_UART_MspInit+0x1d4>)
 8000a7c:	f000 fe7a 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a80:	e081      	b.n	8000b86 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==UART5)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_UART_MspInit+0x1d8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d14b      	bne.n	8000b24 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000af2:	2308      	movs	r3, #8
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <HAL_UART_MspInit+0x1d4>)
 8000afe:	f000 fe39 	bl	8001774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b02:	2304      	movs	r3, #4
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b12:	2308      	movs	r3, #8
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <HAL_UART_MspInit+0x1dc>)
 8000b1e:	f000 fe29 	bl	8001774 <HAL_GPIO_Init>
}
 8000b22:	e030      	b.n	8000b86 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <HAL_UART_MspInit+0x1e0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x1cc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x1d0>)
 8000b82:	f000 fdf7 	bl	8001774 <HAL_GPIO_Init>
}
 8000b86:	bf00      	nop
 8000b88:	3740      	adds	r7, #64	; 0x40
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004c00 	.word	0x40004c00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40005000 	.word	0x40005000
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40004400 	.word	0x40004400

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8c6 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f001 feb4 	bl	800299c <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	2000008c 	.word	0x2000008c
 8000c68:	200001c8 	.word	0x200001c8

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f001 fe73 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc51 	bl	8000568 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd4:	080032ec 	.word	0x080032ec
  ldr r2, =_sbss
 8000cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cdc:	200001c8 	.word	0x200001c8

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 fcfd 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fdea 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd07 	bl	800175a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 fcdd 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200001b4 	.word	0x200001b4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200001b4 	.word	0x200001b4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e033      	b.n	8000e8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fd86 	bl	8000940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d118      	bne.n	8000e80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e56:	f023 0302 	bic.w	r3, r3, #2
 8000e5a:	f043 0202 	orr.w	r2, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 faa4 	bl	80013b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f023 0303 	bic.w	r3, r3, #3
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7e:	e001      	b.n	8000e84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Start+0x1a>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e0b2      	b.n	8001018 <HAL_ADC_Start+0x180>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d018      	beq.n	8000efa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_ADC_Start+0x18c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_ADC_Start+0x190>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9a      	lsrs	r2, r3, #18
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000eec:	e002      	b.n	8000ef4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f9      	bne.n	8000eee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d17a      	bne.n	8000ffe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f46:	d106      	bne.n	8000f56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	f023 0206 	bic.w	r2, r3, #6
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	645a      	str	r2, [r3, #68]	; 0x44
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <HAL_ADC_Start+0x194>)
 8000f66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d12a      	bne.n	8000fd4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2b      	ldr	r2, [pc, #172]	; (8001030 <HAL_ADC_Start+0x198>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d015      	beq.n	8000fb4 <HAL_ADC_Start+0x11c>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <HAL_ADC_Start+0x19c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d105      	bne.n	8000f9e <HAL_ADC_Start+0x106>
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_ADC_Start+0x194>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00a      	beq.n	8000fb4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a25      	ldr	r2, [pc, #148]	; (8001038 <HAL_ADC_Start+0x1a0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d136      	bne.n	8001016 <HAL_ADC_Start+0x17e>
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_ADC_Start+0x194>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d130      	bne.n	8001016 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d129      	bne.n	8001016 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	e020      	b.n	8001016 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_Start+0x198>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d11b      	bne.n	8001016 <HAL_ADC_Start+0x17e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d114      	bne.n	8001016 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	e00b      	b.n	8001016 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f043 0210 	orr.w	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000000 	.word	0x20000000
 8001028:	431bde83 	.word	0x431bde83
 800102c:	40012300 	.word	0x40012300
 8001030:	40012000 	.word	0x40012000
 8001034:	40012100 	.word	0x40012100
 8001038:	40012200 	.word	0x40012200

0800103c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001058:	d113      	bne.n	8001082 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001068:	d10b      	bne.n	8001082 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f043 0220 	orr.w	r2, r3, #32
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e063      	b.n	800114a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001082:	f7ff fe95 	bl	8000db0 <HAL_GetTick>
 8001086:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001088:	e021      	b.n	80010ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d01d      	beq.n	80010ce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_ADC_PollForConversion+0x6c>
 8001098:	f7ff fe8a 	bl	8000db0 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d212      	bcs.n	80010ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d00b      	beq.n	80010ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f043 0204 	orr.w	r2, r3, #4
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e03d      	b.n	800114a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d1d6      	bne.n	800108a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f06f 0212 	mvn.w	r2, #18
 80010e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d123      	bne.n	8001148 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11f      	bne.n	8001148 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001120:	2b00      	cmp	r3, #0
 8001122:	d111      	bne.n	8001148 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1c>
 8001184:	2302      	movs	r3, #2
 8001186:	e105      	b.n	8001394 <HAL_ADC_ConfigChannel+0x228>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b09      	cmp	r3, #9
 8001196:	d925      	bls.n	80011e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68d9      	ldr	r1, [r3, #12]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	2207      	movs	r2, #7
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43da      	mvns	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	400a      	ands	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68d9      	ldr	r1, [r3, #12]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	4603      	mov	r3, r0
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4403      	add	r3, r0
 80011d6:	3b1e      	subs	r3, #30
 80011d8:	409a      	lsls	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	e022      	b.n	800122a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6919      	ldr	r1, [r3, #16]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	2207      	movs	r2, #7
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6919      	ldr	r1, [r3, #16]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	4603      	mov	r3, r0
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4403      	add	r3, r0
 8001220:	409a      	lsls	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b06      	cmp	r3, #6
 8001230:	d824      	bhi.n	800127c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b05      	subs	r3, #5
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b05      	subs	r3, #5
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
 800127a:	e04c      	b.n	8001316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b0c      	cmp	r3, #12
 8001282:	d824      	bhi.n	80012ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	; 0x23
 8001296:	221f      	movs	r2, #31
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43da      	mvns	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	400a      	ands	r2, r1
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b23      	subs	r3, #35	; 0x23
 80012c0:	fa00 f203 	lsl.w	r2, r0, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
 80012cc:	e023      	b.n	8001316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b41      	subs	r3, #65	; 0x41
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	400a      	ands	r2, r1
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b41      	subs	r3, #65	; 0x41
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_ADC_ConfigChannel+0x234>)
 8001318:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <HAL_ADC_ConfigChannel+0x238>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d109      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1cc>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d105      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_ADC_ConfigChannel+0x238>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d123      	bne.n	800138a <HAL_ADC_ConfigChannel+0x21e>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d003      	beq.n	8001352 <HAL_ADC_ConfigChannel+0x1e6>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b11      	cmp	r3, #17
 8001350:	d11b      	bne.n	800138a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d111      	bne.n	800138a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_ADC_ConfigChannel+0x240>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9a      	lsrs	r2, r3, #18
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800137c:	e002      	b.n	8001384 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3b01      	subs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f9      	bne.n	800137e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40012300 	.word	0x40012300
 80013a4:	40012000 	.word	0x40012000
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b8:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <ADC_Init+0x1f0>)
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	021a      	lsls	r2, r3, #8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800142a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6899      	ldr	r1, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <ADC_Init+0x1f4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d022      	beq.n	800148e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e00f      	b.n	80014ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800149c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0202 	bic.w	r2, r2, #2
 80014bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7e1b      	ldrb	r3, [r3, #24]
 80014c8:	005a      	lsls	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d01b      	beq.n	8001514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	3b01      	subs	r3, #1
 8001508:	035a      	lsls	r2, r3, #13
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	e007      	b.n	8001524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	3b01      	subs	r3, #1
 8001540:	051a      	lsls	r2, r3, #20
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001566:	025a      	lsls	r2, r3, #9
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800157e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6899      	ldr	r1, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	029a      	lsls	r2, r3, #10
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40012300 	.word	0x40012300
 80015a4:	0f000001 	.word	0x0f000001

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff47 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5c 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e16b      	b.n	8001a68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 815a 	bne.w	8001a62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80b4 	beq.w	8001a62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_GPIO_Init+0x310>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_GPIO_Init+0x314>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02b      	beq.n	800199a <HAL_GPIO_Init+0x226>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x318>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x222>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a50      	ldr	r2, [pc, #320]	; (8001a90 <HAL_GPIO_Init+0x31c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x21e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4f      	ldr	r2, [pc, #316]	; (8001a94 <HAL_GPIO_Init+0x320>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x21a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_GPIO_Init+0x324>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x216>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x328>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x212>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x20a>
 800197a:	2307      	movs	r3, #7
 800197c:	e00e      	b.n	800199c <HAL_GPIO_Init+0x228>
 800197e:	2308      	movs	r3, #8
 8001980:	e00c      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001982:	2306      	movs	r3, #6
 8001984:	e00a      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001986:	2305      	movs	r3, #5
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x228>
 800198a:	2304      	movs	r3, #4
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x228>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x228>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x310>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f ae90 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e264      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	4ba3      	ldr	r3, [pc, #652]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4ba0      	ldr	r3, [pc, #640]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b9d      	ldr	r3, [pc, #628]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b99      	ldr	r3, [pc, #612]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e23f      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a8a      	ldr	r2, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a87      	ldr	r2, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b84      	ldr	r3, [pc, #528]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a83      	ldr	r2, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a80      	ldr	r2, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f90a 	bl	8000db0 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f906 	bl	8000db0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e204      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f8f6 	bl	8000db0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f8f2 	bl	8000db0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f0      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c4      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4952      	ldr	r1, [pc, #328]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_OscConfig+0x2b0>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f8ab 	bl	8000db0 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff f8a7 	bl	8000db0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a5      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4940      	ldr	r1, [pc, #256]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x2b0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f88a 	bl	8000db0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f886 	bl	8000db0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e184      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d030      	beq.n	8001d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_OscConfig+0x2b4>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f86a 	bl	8000db0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f866 	bl	8000db0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e164      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x2b4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff f853 	bl	8000db0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f84f 	bl	8000db0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e14d      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a0 	beq.w	8001e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d121      	bne.n	8001dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f815 	bl	8000db0 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e011      	b.n	8001dae <HAL_RCC_OscConfig+0x2ce>
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	42470000 	.word	0x42470000
 8001d94:	42470e80 	.word	0x42470e80
 8001d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7ff f808 	bl	8000db0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e106      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x4e4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
 8001dc2:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a80      	ldr	r2, [pc, #512]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	e01c      	b.n	8001e0a <HAL_RCC_OscConfig+0x32a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a7a      	ldr	r2, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a77      	ldr	r2, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x32a>
 8001df2:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a74      	ldr	r2, [pc, #464]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a71      	ldr	r2, [pc, #452]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7fe ffcd 	bl	8000db0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe ffc9 	bl	8000db0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0c5      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b65      	ldr	r3, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ee      	beq.n	8001e1a <HAL_RCC_OscConfig+0x33a>
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe ffb7 	bl	8000db0 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe ffb3 	bl	8000db0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0af      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a55      	ldr	r2, [pc, #340]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 809b 	beq.w	8001fba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d05c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d141      	bne.n	8001f1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe ff87 	bl	8000db0 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe ff83 	bl	8000db0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e081      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	019b      	lsls	r3, r3, #6
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff5c 	bl	8000db0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe ff58 	bl	8000db0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e056      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x41c>
 8001f1a:	e04e      	b.n	8001fba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe ff45 	bl	8000db0 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe ff41 	bl	8000db0 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e03f      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x44a>
 8001f48:	e037      	b.n	8001fba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e032      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d028      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d11a      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d111      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	42470060 	.word	0x42470060

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fe76 	bl	8000db0 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7fe fe72 	bl	8000db0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fdd6 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08003290 	.word	0x08003290
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a2:	2100      	movs	r1, #0
 80021a4:	6079      	str	r1, [r7, #4]
 80021a6:	2100      	movs	r1, #0
 80021a8:	60f9      	str	r1, [r7, #12]
 80021aa:	2100      	movs	r1, #0
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ae:	2100      	movs	r1, #0
 80021b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b2:	4952      	ldr	r1, [pc, #328]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021b4:	6889      	ldr	r1, [r1, #8]
 80021b6:	f001 010c 	and.w	r1, r1, #12
 80021ba:	2908      	cmp	r1, #8
 80021bc:	d00d      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3e>
 80021be:	2908      	cmp	r1, #8
 80021c0:	f200 8094 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x150>
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d002      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x32>
 80021c8:	2904      	cmp	r1, #4
 80021ca:	d003      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x38>
 80021cc:	e08e      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCC_GetSysClockFreq+0x164>)
 80021d0:	60bb      	str	r3, [r7, #8]
       break;
 80021d2:	e08e      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_GetSysClockFreq+0x168>)
 80021d6:	60bb      	str	r3, [r7, #8]
      break;
 80021d8:	e08b      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021da:	4948      	ldr	r1, [pc, #288]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021dc:	6849      	ldr	r1, [r1, #4]
 80021de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e4:	4945      	ldr	r1, [pc, #276]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021e6:	6849      	ldr	r1, [r1, #4]
 80021e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021ec:	2900      	cmp	r1, #0
 80021ee:	d024      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4942      	ldr	r1, [pc, #264]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021f2:	6849      	ldr	r1, [r1, #4]
 80021f4:	0989      	lsrs	r1, r1, #6
 80021f6:	4608      	mov	r0, r1
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002200:	f04f 0500 	mov.w	r5, #0
 8002204:	ea00 0204 	and.w	r2, r0, r4
 8002208:	ea01 0305 	and.w	r3, r1, r5
 800220c:	493d      	ldr	r1, [pc, #244]	; (8002304 <HAL_RCC_GetSysClockFreq+0x168>)
 800220e:	fb01 f003 	mul.w	r0, r1, r3
 8002212:	2100      	movs	r1, #0
 8002214:	fb01 f102 	mul.w	r1, r1, r2
 8002218:	1844      	adds	r4, r0, r1
 800221a:	493a      	ldr	r1, [pc, #232]	; (8002304 <HAL_RCC_GetSysClockFreq+0x168>)
 800221c:	fba2 0101 	umull	r0, r1, r2, r1
 8002220:	1863      	adds	r3, r4, r1
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	f7fe f820 	bl	8000270 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4613      	mov	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e04a      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	461a      	mov	r2, r3
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	ea02 0400 	and.w	r4, r2, r0
 8002252:	ea03 0501 	and.w	r5, r3, r1
 8002256:	4620      	mov	r0, r4
 8002258:	4629      	mov	r1, r5
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	014b      	lsls	r3, r1, #5
 8002264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002268:	0142      	lsls	r2, r0, #5
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	1b00      	subs	r0, r0, r4
 8002270:	eb61 0105 	sbc.w	r1, r1, r5
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	018b      	lsls	r3, r1, #6
 800227e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002282:	0182      	lsls	r2, r0, #6
 8002284:	1a12      	subs	r2, r2, r0
 8002286:	eb63 0301 	sbc.w	r3, r3, r1
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	00d9      	lsls	r1, r3, #3
 8002294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002298:	00d0      	lsls	r0, r2, #3
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	1912      	adds	r2, r2, r4
 80022a0:	eb45 0303 	adc.w	r3, r5, r3
 80022a4:	f04f 0000 	mov.w	r0, #0
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	0299      	lsls	r1, r3, #10
 80022ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022b2:	0290      	lsls	r0, r2, #10
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fd ffd4 	bl	8000270 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	60bb      	str	r3, [r7, #8]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RCC_GetSysClockFreq+0x164>)
 80022ee:	60bb      	str	r3, [r7, #8]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	68bb      	ldr	r3, [r7, #8]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bdb0      	pop	{r4, r5, r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	00f42400 	.word	0x00f42400
 8002304:	017d7840 	.word	0x017d7840

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	080032a0 	.word	0x080032a0

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffdc 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0b5b      	lsrs	r3, r3, #13
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	080032a0 	.word	0x080032a0

08002370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e03f      	b.n	8002402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fb16 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f929 	bl	800260c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b08a      	sub	sp, #40	; 0x28
 800240e:	af02      	add	r7, sp, #8
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d17c      	bne.n	8002524 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_UART_Transmit+0x2c>
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e075      	b.n	8002526 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_UART_Transmit+0x3e>
 8002444:	2302      	movs	r3, #2
 8002446:	e06e      	b.n	8002526 <HAL_UART_Transmit+0x11c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245e:	f7fe fca7 	bl	8000db0 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d108      	bne.n	800248c <HAL_UART_Transmit+0x82>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e003      	b.n	8002494 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800249c:	e02a      	b.n	80024f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f840 	bl	800252e <UART_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e036      	b.n	8002526 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	3302      	adds	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e007      	b.n	80024e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1cf      	bne.n	800249e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f810 	bl	800252e <UART_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e006      	b.n	8002526 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b090      	sub	sp, #64	; 0x40
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253e:	e050      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d04c      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x30>
 800254e:	f7fe fc2f 	bl	8000db0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800255a:	429a      	cmp	r2, r3
 800255c:	d241      	bcs.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	330c      	adds	r3, #12
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800257e:	637a      	str	r2, [r7, #52]	; 0x34
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002586:	e841 2300 	strex	r3, r2, [r1]
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e5      	bne.n	800255e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	e853 3f00 	ldrex	r3, [r3]
 80025a0:	613b      	str	r3, [r7, #16]
   return(result);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3314      	adds	r3, #20
 80025b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b2:	623a      	str	r2, [r7, #32]
 80025b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	e841 2300 	strex	r3, r2, [r1]
 80025be:	61bb      	str	r3, [r7, #24]
   return(result);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1e5      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d09f      	beq.n	8002540 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3740      	adds	r7, #64	; 0x40
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002610:	b09f      	sub	sp, #124	; 0x7c
 8002612:	af00      	add	r7, sp, #0
 8002614:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	ea40 0301 	orr.w	r3, r0, r1
 800262c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	431a      	orrs	r2, r3
 8002638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	431a      	orrs	r2, r3
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
 8002644:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002650:	f021 010c 	bic.w	r1, r1, #12
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265a:	430b      	orrs	r3, r1
 800265c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	6999      	ldr	r1, [r3, #24]
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	ea40 0301 	orr.w	r3, r0, r1
 8002674:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4bc5      	ldr	r3, [pc, #788]	; (8002990 <UART_SetConfig+0x384>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d004      	beq.n	800268a <UART_SetConfig+0x7e>
 8002680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4bc3      	ldr	r3, [pc, #780]	; (8002994 <UART_SetConfig+0x388>)
 8002686:	429a      	cmp	r2, r3
 8002688:	d103      	bne.n	8002692 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800268a:	f7ff fe5d 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 800268e:	6778      	str	r0, [r7, #116]	; 0x74
 8002690:	e002      	b.n	8002698 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002692:	f7ff fe45 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002696:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a0:	f040 80b6 	bne.w	8002810 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a6:	461c      	mov	r4, r3
 80026a8:	f04f 0500 	mov.w	r5, #0
 80026ac:	4622      	mov	r2, r4
 80026ae:	462b      	mov	r3, r5
 80026b0:	1891      	adds	r1, r2, r2
 80026b2:	6439      	str	r1, [r7, #64]	; 0x40
 80026b4:	415b      	adcs	r3, r3
 80026b6:	647b      	str	r3, [r7, #68]	; 0x44
 80026b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026bc:	1912      	adds	r2, r2, r4
 80026be:	eb45 0303 	adc.w	r3, r5, r3
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	00d9      	lsls	r1, r3, #3
 80026cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d0:	00d0      	lsls	r0, r2, #3
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	1911      	adds	r1, r2, r4
 80026d8:	6639      	str	r1, [r7, #96]	; 0x60
 80026da:	416b      	adcs	r3, r5
 80026dc:	667b      	str	r3, [r7, #100]	; 0x64
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	1891      	adds	r1, r2, r2
 80026ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80026ec:	415b      	adcs	r3, r3
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026f8:	f7fd fdba 	bl	8000270 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4ba5      	ldr	r3, [pc, #660]	; (8002998 <UART_SetConfig+0x38c>)
 8002702:	fba3 2302 	umull	r2, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	011e      	lsls	r6, r3, #4
 800270a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270c:	461c      	mov	r4, r3
 800270e:	f04f 0500 	mov.w	r5, #0
 8002712:	4622      	mov	r2, r4
 8002714:	462b      	mov	r3, r5
 8002716:	1891      	adds	r1, r2, r2
 8002718:	6339      	str	r1, [r7, #48]	; 0x30
 800271a:	415b      	adcs	r3, r3
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
 800271e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002722:	1912      	adds	r2, r2, r4
 8002724:	eb45 0303 	adc.w	r3, r5, r3
 8002728:	f04f 0000 	mov.w	r0, #0
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	00d9      	lsls	r1, r3, #3
 8002732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002736:	00d0      	lsls	r0, r2, #3
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	1911      	adds	r1, r2, r4
 800273e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002740:	416b      	adcs	r3, r5
 8002742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	1891      	adds	r1, r2, r2
 8002750:	62b9      	str	r1, [r7, #40]	; 0x28
 8002752:	415b      	adcs	r3, r3
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800275a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800275e:	f7fd fd87 	bl	8000270 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <UART_SetConfig+0x38c>)
 8002768:	fba3 1302 	umull	r1, r3, r3, r2
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	2164      	movs	r1, #100	; 0x64
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	3332      	adds	r3, #50	; 0x32
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <UART_SetConfig+0x38c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002788:	441e      	add	r6, r3
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	4618      	mov	r0, r3
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	1894      	adds	r4, r2, r2
 8002798:	623c      	str	r4, [r7, #32]
 800279a:	415b      	adcs	r3, r3
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a2:	1812      	adds	r2, r2, r0
 80027a4:	eb41 0303 	adc.w	r3, r1, r3
 80027a8:	f04f 0400 	mov.w	r4, #0
 80027ac:	f04f 0500 	mov.w	r5, #0
 80027b0:	00dd      	lsls	r5, r3, #3
 80027b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027b6:	00d4      	lsls	r4, r2, #3
 80027b8:	4622      	mov	r2, r4
 80027ba:	462b      	mov	r3, r5
 80027bc:	1814      	adds	r4, r2, r0
 80027be:	653c      	str	r4, [r7, #80]	; 0x50
 80027c0:	414b      	adcs	r3, r1
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	1891      	adds	r1, r2, r2
 80027d0:	61b9      	str	r1, [r7, #24]
 80027d2:	415b      	adcs	r3, r3
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027de:	f7fd fd47 	bl	8000270 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <UART_SetConfig+0x38c>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	3332      	adds	r3, #50	; 0x32
 80027fa:	4a67      	ldr	r2, [pc, #412]	; (8002998 <UART_SetConfig+0x38c>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4432      	add	r2, r6
 800280c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800280e:	e0b9      	b.n	8002984 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002812:	461c      	mov	r4, r3
 8002814:	f04f 0500 	mov.w	r5, #0
 8002818:	4622      	mov	r2, r4
 800281a:	462b      	mov	r3, r5
 800281c:	1891      	adds	r1, r2, r2
 800281e:	6139      	str	r1, [r7, #16]
 8002820:	415b      	adcs	r3, r3
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002828:	1912      	adds	r2, r2, r4
 800282a:	eb45 0303 	adc.w	r3, r5, r3
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	00d9      	lsls	r1, r3, #3
 8002838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800283c:	00d0      	lsls	r0, r2, #3
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	eb12 0804 	adds.w	r8, r2, r4
 8002846:	eb43 0905 	adc.w	r9, r3, r5
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	008b      	lsls	r3, r1, #2
 800285e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002862:	0082      	lsls	r2, r0, #2
 8002864:	4640      	mov	r0, r8
 8002866:	4649      	mov	r1, r9
 8002868:	f7fd fd02 	bl	8000270 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4b49      	ldr	r3, [pc, #292]	; (8002998 <UART_SetConfig+0x38c>)
 8002872:	fba3 2302 	umull	r2, r3, r3, r2
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	011e      	lsls	r6, r3, #4
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	4618      	mov	r0, r3
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	1894      	adds	r4, r2, r2
 8002888:	60bc      	str	r4, [r7, #8]
 800288a:	415b      	adcs	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002892:	1812      	adds	r2, r2, r0
 8002894:	eb41 0303 	adc.w	r3, r1, r3
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	f04f 0500 	mov.w	r5, #0
 80028a0:	00dd      	lsls	r5, r3, #3
 80028a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028a6:	00d4      	lsls	r4, r2, #3
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	1814      	adds	r4, r2, r0
 80028ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80028b0:	414b      	adcs	r3, r1
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	008b      	lsls	r3, r1, #2
 80028c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028cc:	0082      	lsls	r2, r0, #2
 80028ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028d2:	f7fd fccd 	bl	8000270 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <UART_SetConfig+0x38c>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <UART_SetConfig+0x38c>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fa:	441e      	add	r6, r3
 80028fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fe:	4618      	mov	r0, r3
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	1894      	adds	r4, r2, r2
 800290a:	603c      	str	r4, [r7, #0]
 800290c:	415b      	adcs	r3, r3
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002914:	1812      	adds	r2, r2, r0
 8002916:	eb41 0303 	adc.w	r3, r1, r3
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	f04f 0500 	mov.w	r5, #0
 8002922:	00dd      	lsls	r5, r3, #3
 8002924:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002928:	00d4      	lsls	r4, r2, #3
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	eb12 0a00 	adds.w	sl, r2, r0
 8002932:	eb43 0b01 	adc.w	fp, r3, r1
 8002936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	008b      	lsls	r3, r1, #2
 800294a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800294e:	0082      	lsls	r2, r0, #2
 8002950:	4650      	mov	r0, sl
 8002952:	4659      	mov	r1, fp
 8002954:	f7fd fc8c 	bl	8000270 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <UART_SetConfig+0x38c>)
 800295e:	fba3 1302 	umull	r1, r3, r3, r2
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2164      	movs	r1, #100	; 0x64
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	3332      	adds	r3, #50	; 0x32
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <UART_SetConfig+0x38c>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4432      	add	r2, r6
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	377c      	adds	r7, #124	; 0x7c
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f

0800299c <__errno>:
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <__errno+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	; (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	; (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	; (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 fc4e 	bl	800325c <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	080032e4 	.word	0x080032e4
 80029e4:	080032e4 	.word	0x080032e4
 80029e8:	080032e4 	.word	0x080032e4
 80029ec:	080032e8 	.word	0x080032e8

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <siprintf>:
 8002a00:	b40e      	push	{r1, r2, r3}
 8002a02:	b500      	push	{lr}
 8002a04:	b09c      	sub	sp, #112	; 0x70
 8002a06:	ab1d      	add	r3, sp, #116	; 0x74
 8002a08:	9002      	str	r0, [sp, #8]
 8002a0a:	9006      	str	r0, [sp, #24]
 8002a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <siprintf+0x38>)
 8002a12:	9107      	str	r1, [sp, #28]
 8002a14:	9104      	str	r1, [sp, #16]
 8002a16:	4909      	ldr	r1, [pc, #36]	; (8002a3c <siprintf+0x3c>)
 8002a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a1c:	9105      	str	r1, [sp, #20]
 8002a1e:	6800      	ldr	r0, [r0, #0]
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	a902      	add	r1, sp, #8
 8002a24:	f000 f868 	bl	8002af8 <_svfiprintf_r>
 8002a28:	9b02      	ldr	r3, [sp, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	b01c      	add	sp, #112	; 0x70
 8002a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a34:	b003      	add	sp, #12
 8002a36:	4770      	bx	lr
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	ffff0208 	.word	0xffff0208

08002a40 <__ssputs_r>:
 8002a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	688e      	ldr	r6, [r1, #8]
 8002a46:	429e      	cmp	r6, r3
 8002a48:	4682      	mov	sl, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	461f      	mov	r7, r3
 8002a50:	d838      	bhi.n	8002ac4 <__ssputs_r+0x84>
 8002a52:	898a      	ldrh	r2, [r1, #12]
 8002a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a58:	d032      	beq.n	8002ac0 <__ssputs_r+0x80>
 8002a5a:	6825      	ldr	r5, [r4, #0]
 8002a5c:	6909      	ldr	r1, [r1, #16]
 8002a5e:	eba5 0901 	sub.w	r9, r5, r1
 8002a62:	6965      	ldr	r5, [r4, #20]
 8002a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	444b      	add	r3, r9
 8002a70:	106d      	asrs	r5, r5, #1
 8002a72:	429d      	cmp	r5, r3
 8002a74:	bf38      	it	cc
 8002a76:	461d      	movcc	r5, r3
 8002a78:	0553      	lsls	r3, r2, #21
 8002a7a:	d531      	bpl.n	8002ae0 <__ssputs_r+0xa0>
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f000 fb47 	bl	8003110 <_malloc_r>
 8002a82:	4606      	mov	r6, r0
 8002a84:	b950      	cbnz	r0, 8002a9c <__ssputs_r+0x5c>
 8002a86:	230c      	movs	r3, #12
 8002a88:	f8ca 3000 	str.w	r3, [sl]
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9c:	6921      	ldr	r1, [r4, #16]
 8002a9e:	464a      	mov	r2, r9
 8002aa0:	f000 fabe 	bl	8003020 <memcpy>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	6126      	str	r6, [r4, #16]
 8002ab2:	6165      	str	r5, [r4, #20]
 8002ab4:	444e      	add	r6, r9
 8002ab6:	eba5 0509 	sub.w	r5, r5, r9
 8002aba:	6026      	str	r6, [r4, #0]
 8002abc:	60a5      	str	r5, [r4, #8]
 8002abe:	463e      	mov	r6, r7
 8002ac0:	42be      	cmp	r6, r7
 8002ac2:	d900      	bls.n	8002ac6 <__ssputs_r+0x86>
 8002ac4:	463e      	mov	r6, r7
 8002ac6:	4632      	mov	r2, r6
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	4641      	mov	r1, r8
 8002acc:	f000 fab6 	bl	800303c <memmove>
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	6822      	ldr	r2, [r4, #0]
 8002ad4:	1b9b      	subs	r3, r3, r6
 8002ad6:	4432      	add	r2, r6
 8002ad8:	60a3      	str	r3, [r4, #8]
 8002ada:	6022      	str	r2, [r4, #0]
 8002adc:	2000      	movs	r0, #0
 8002ade:	e7db      	b.n	8002a98 <__ssputs_r+0x58>
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	f000 fb6f 	bl	80031c4 <_realloc_r>
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d1e1      	bne.n	8002ab0 <__ssputs_r+0x70>
 8002aec:	6921      	ldr	r1, [r4, #16]
 8002aee:	4650      	mov	r0, sl
 8002af0:	f000 fabe 	bl	8003070 <_free_r>
 8002af4:	e7c7      	b.n	8002a86 <__ssputs_r+0x46>
	...

08002af8 <_svfiprintf_r>:
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	4698      	mov	r8, r3
 8002afe:	898b      	ldrh	r3, [r1, #12]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	b09d      	sub	sp, #116	; 0x74
 8002b04:	4607      	mov	r7, r0
 8002b06:	460d      	mov	r5, r1
 8002b08:	4614      	mov	r4, r2
 8002b0a:	d50e      	bpl.n	8002b2a <_svfiprintf_r+0x32>
 8002b0c:	690b      	ldr	r3, [r1, #16]
 8002b0e:	b963      	cbnz	r3, 8002b2a <_svfiprintf_r+0x32>
 8002b10:	2140      	movs	r1, #64	; 0x40
 8002b12:	f000 fafd 	bl	8003110 <_malloc_r>
 8002b16:	6028      	str	r0, [r5, #0]
 8002b18:	6128      	str	r0, [r5, #16]
 8002b1a:	b920      	cbnz	r0, 8002b26 <_svfiprintf_r+0x2e>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	e0d1      	b.n	8002cca <_svfiprintf_r+0x1d2>
 8002b26:	2340      	movs	r3, #64	; 0x40
 8002b28:	616b      	str	r3, [r5, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2e:	2320      	movs	r3, #32
 8002b30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b38:	2330      	movs	r3, #48	; 0x30
 8002b3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ce4 <_svfiprintf_r+0x1ec>
 8002b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b42:	f04f 0901 	mov.w	r9, #1
 8002b46:	4623      	mov	r3, r4
 8002b48:	469a      	mov	sl, r3
 8002b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b4e:	b10a      	cbz	r2, 8002b54 <_svfiprintf_r+0x5c>
 8002b50:	2a25      	cmp	r2, #37	; 0x25
 8002b52:	d1f9      	bne.n	8002b48 <_svfiprintf_r+0x50>
 8002b54:	ebba 0b04 	subs.w	fp, sl, r4
 8002b58:	d00b      	beq.n	8002b72 <_svfiprintf_r+0x7a>
 8002b5a:	465b      	mov	r3, fp
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4638      	mov	r0, r7
 8002b62:	f7ff ff6d 	bl	8002a40 <__ssputs_r>
 8002b66:	3001      	adds	r0, #1
 8002b68:	f000 80aa 	beq.w	8002cc0 <_svfiprintf_r+0x1c8>
 8002b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b6e:	445a      	add	r2, fp
 8002b70:	9209      	str	r2, [sp, #36]	; 0x24
 8002b72:	f89a 3000 	ldrb.w	r3, [sl]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80a2 	beq.w	8002cc0 <_svfiprintf_r+0x1c8>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b86:	f10a 0a01 	add.w	sl, sl, #1
 8002b8a:	9304      	str	r3, [sp, #16]
 8002b8c:	9307      	str	r3, [sp, #28]
 8002b8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b92:	931a      	str	r3, [sp, #104]	; 0x68
 8002b94:	4654      	mov	r4, sl
 8002b96:	2205      	movs	r2, #5
 8002b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9c:	4851      	ldr	r0, [pc, #324]	; (8002ce4 <_svfiprintf_r+0x1ec>)
 8002b9e:	f7fd fb17 	bl	80001d0 <memchr>
 8002ba2:	9a04      	ldr	r2, [sp, #16]
 8002ba4:	b9d8      	cbnz	r0, 8002bde <_svfiprintf_r+0xe6>
 8002ba6:	06d0      	lsls	r0, r2, #27
 8002ba8:	bf44      	itt	mi
 8002baa:	2320      	movmi	r3, #32
 8002bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bb0:	0711      	lsls	r1, r2, #28
 8002bb2:	bf44      	itt	mi
 8002bb4:	232b      	movmi	r3, #43	; 0x2b
 8002bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bba:	f89a 3000 	ldrb.w	r3, [sl]
 8002bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc0:	d015      	beq.n	8002bee <_svfiprintf_r+0xf6>
 8002bc2:	9a07      	ldr	r2, [sp, #28]
 8002bc4:	4654      	mov	r4, sl
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f04f 0c0a 	mov.w	ip, #10
 8002bcc:	4621      	mov	r1, r4
 8002bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd2:	3b30      	subs	r3, #48	; 0x30
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d94e      	bls.n	8002c76 <_svfiprintf_r+0x17e>
 8002bd8:	b1b0      	cbz	r0, 8002c08 <_svfiprintf_r+0x110>
 8002bda:	9207      	str	r2, [sp, #28]
 8002bdc:	e014      	b.n	8002c08 <_svfiprintf_r+0x110>
 8002bde:	eba0 0308 	sub.w	r3, r0, r8
 8002be2:	fa09 f303 	lsl.w	r3, r9, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	9304      	str	r3, [sp, #16]
 8002bea:	46a2      	mov	sl, r4
 8002bec:	e7d2      	b.n	8002b94 <_svfiprintf_r+0x9c>
 8002bee:	9b03      	ldr	r3, [sp, #12]
 8002bf0:	1d19      	adds	r1, r3, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	9103      	str	r1, [sp, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bfbb      	ittet	lt
 8002bfa:	425b      	neglt	r3, r3
 8002bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8002c00:	9307      	strge	r3, [sp, #28]
 8002c02:	9307      	strlt	r3, [sp, #28]
 8002c04:	bfb8      	it	lt
 8002c06:	9204      	strlt	r2, [sp, #16]
 8002c08:	7823      	ldrb	r3, [r4, #0]
 8002c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c0c:	d10c      	bne.n	8002c28 <_svfiprintf_r+0x130>
 8002c0e:	7863      	ldrb	r3, [r4, #1]
 8002c10:	2b2a      	cmp	r3, #42	; 0x2a
 8002c12:	d135      	bne.n	8002c80 <_svfiprintf_r+0x188>
 8002c14:	9b03      	ldr	r3, [sp, #12]
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	9203      	str	r2, [sp, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bfb8      	it	lt
 8002c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c24:	3402      	adds	r4, #2
 8002c26:	9305      	str	r3, [sp, #20]
 8002c28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cf4 <_svfiprintf_r+0x1fc>
 8002c2c:	7821      	ldrb	r1, [r4, #0]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	4650      	mov	r0, sl
 8002c32:	f7fd facd 	bl	80001d0 <memchr>
 8002c36:	b140      	cbz	r0, 8002c4a <_svfiprintf_r+0x152>
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	eba0 000a 	sub.w	r0, r0, sl
 8002c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002c42:	9b04      	ldr	r3, [sp, #16]
 8002c44:	4303      	orrs	r3, r0
 8002c46:	3401      	adds	r4, #1
 8002c48:	9304      	str	r3, [sp, #16]
 8002c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c4e:	4826      	ldr	r0, [pc, #152]	; (8002ce8 <_svfiprintf_r+0x1f0>)
 8002c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c54:	2206      	movs	r2, #6
 8002c56:	f7fd fabb 	bl	80001d0 <memchr>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d038      	beq.n	8002cd0 <_svfiprintf_r+0x1d8>
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <_svfiprintf_r+0x1f4>)
 8002c60:	bb1b      	cbnz	r3, 8002caa <_svfiprintf_r+0x1b2>
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	3307      	adds	r3, #7
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c70:	4433      	add	r3, r6
 8002c72:	9309      	str	r3, [sp, #36]	; 0x24
 8002c74:	e767      	b.n	8002b46 <_svfiprintf_r+0x4e>
 8002c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e7a5      	b.n	8002bcc <_svfiprintf_r+0xd4>
 8002c80:	2300      	movs	r3, #0
 8002c82:	3401      	adds	r4, #1
 8002c84:	9305      	str	r3, [sp, #20]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 0c0a 	mov.w	ip, #10
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c92:	3a30      	subs	r2, #48	; 0x30
 8002c94:	2a09      	cmp	r2, #9
 8002c96:	d903      	bls.n	8002ca0 <_svfiprintf_r+0x1a8>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0c5      	beq.n	8002c28 <_svfiprintf_r+0x130>
 8002c9c:	9105      	str	r1, [sp, #20]
 8002c9e:	e7c3      	b.n	8002c28 <_svfiprintf_r+0x130>
 8002ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e7f0      	b.n	8002c8c <_svfiprintf_r+0x194>
 8002caa:	ab03      	add	r3, sp, #12
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	462a      	mov	r2, r5
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <_svfiprintf_r+0x1f8>)
 8002cb2:	a904      	add	r1, sp, #16
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f3af 8000 	nop.w
 8002cba:	1c42      	adds	r2, r0, #1
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	d1d6      	bne.n	8002c6e <_svfiprintf_r+0x176>
 8002cc0:	89ab      	ldrh	r3, [r5, #12]
 8002cc2:	065b      	lsls	r3, r3, #25
 8002cc4:	f53f af2c 	bmi.w	8002b20 <_svfiprintf_r+0x28>
 8002cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cca:	b01d      	add	sp, #116	; 0x74
 8002ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd0:	ab03      	add	r3, sp, #12
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	462a      	mov	r2, r5
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <_svfiprintf_r+0x1f8>)
 8002cd8:	a904      	add	r1, sp, #16
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 f87a 	bl	8002dd4 <_printf_i>
 8002ce0:	e7eb      	b.n	8002cba <_svfiprintf_r+0x1c2>
 8002ce2:	bf00      	nop
 8002ce4:	080032a8 	.word	0x080032a8
 8002ce8:	080032b2 	.word	0x080032b2
 8002cec:	00000000 	.word	0x00000000
 8002cf0:	08002a41 	.word	0x08002a41
 8002cf4:	080032ae 	.word	0x080032ae

08002cf8 <_printf_common>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	4616      	mov	r6, r2
 8002cfe:	4699      	mov	r9, r3
 8002d00:	688a      	ldr	r2, [r1, #8]
 8002d02:	690b      	ldr	r3, [r1, #16]
 8002d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bfb8      	it	lt
 8002d0c:	4613      	movlt	r3, r2
 8002d0e:	6033      	str	r3, [r6, #0]
 8002d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d14:	4607      	mov	r7, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	b10a      	cbz	r2, 8002d1e <_printf_common+0x26>
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	0699      	lsls	r1, r3, #26
 8002d22:	bf42      	ittt	mi
 8002d24:	6833      	ldrmi	r3, [r6, #0]
 8002d26:	3302      	addmi	r3, #2
 8002d28:	6033      	strmi	r3, [r6, #0]
 8002d2a:	6825      	ldr	r5, [r4, #0]
 8002d2c:	f015 0506 	ands.w	r5, r5, #6
 8002d30:	d106      	bne.n	8002d40 <_printf_common+0x48>
 8002d32:	f104 0a19 	add.w	sl, r4, #25
 8002d36:	68e3      	ldr	r3, [r4, #12]
 8002d38:	6832      	ldr	r2, [r6, #0]
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	dc26      	bgt.n	8002d8e <_printf_common+0x96>
 8002d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d44:	1e13      	subs	r3, r2, #0
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	bf18      	it	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	0692      	lsls	r2, r2, #26
 8002d4e:	d42b      	bmi.n	8002da8 <_printf_common+0xb0>
 8002d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d54:	4649      	mov	r1, r9
 8002d56:	4638      	mov	r0, r7
 8002d58:	47c0      	blx	r8
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d01e      	beq.n	8002d9c <_printf_common+0xa4>
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	68e5      	ldr	r5, [r4, #12]
 8002d62:	6832      	ldr	r2, [r6, #0]
 8002d64:	f003 0306 	and.w	r3, r3, #6
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	bf08      	it	eq
 8002d6c:	1aad      	subeq	r5, r5, r2
 8002d6e:	68a3      	ldr	r3, [r4, #8]
 8002d70:	6922      	ldr	r2, [r4, #16]
 8002d72:	bf0c      	ite	eq
 8002d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d78:	2500      	movne	r5, #0
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	bfc4      	itt	gt
 8002d7e:	1a9b      	subgt	r3, r3, r2
 8002d80:	18ed      	addgt	r5, r5, r3
 8002d82:	2600      	movs	r6, #0
 8002d84:	341a      	adds	r4, #26
 8002d86:	42b5      	cmp	r5, r6
 8002d88:	d11a      	bne.n	8002dc0 <_printf_common+0xc8>
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	e008      	b.n	8002da0 <_printf_common+0xa8>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4652      	mov	r2, sl
 8002d92:	4649      	mov	r1, r9
 8002d94:	4638      	mov	r0, r7
 8002d96:	47c0      	blx	r8
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d103      	bne.n	8002da4 <_printf_common+0xac>
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	3501      	adds	r5, #1
 8002da6:	e7c6      	b.n	8002d36 <_printf_common+0x3e>
 8002da8:	18e1      	adds	r1, r4, r3
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	2030      	movs	r0, #48	; 0x30
 8002dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002db2:	4422      	add	r2, r4
 8002db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	e7c7      	b.n	8002d50 <_printf_common+0x58>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	47c0      	blx	r8
 8002dca:	3001      	adds	r0, #1
 8002dcc:	d0e6      	beq.n	8002d9c <_printf_common+0xa4>
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7d9      	b.n	8002d86 <_printf_common+0x8e>
	...

08002dd4 <_printf_i>:
 8002dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	460c      	mov	r4, r1
 8002dda:	4691      	mov	r9, r2
 8002ddc:	7e27      	ldrb	r7, [r4, #24]
 8002dde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002de0:	2f78      	cmp	r7, #120	; 0x78
 8002de2:	4680      	mov	r8, r0
 8002de4:	469a      	mov	sl, r3
 8002de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dea:	d807      	bhi.n	8002dfc <_printf_i+0x28>
 8002dec:	2f62      	cmp	r7, #98	; 0x62
 8002dee:	d80a      	bhi.n	8002e06 <_printf_i+0x32>
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	f000 80d8 	beq.w	8002fa6 <_printf_i+0x1d2>
 8002df6:	2f58      	cmp	r7, #88	; 0x58
 8002df8:	f000 80a3 	beq.w	8002f42 <_printf_i+0x16e>
 8002dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e04:	e03a      	b.n	8002e7c <_printf_i+0xa8>
 8002e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e0a:	2b15      	cmp	r3, #21
 8002e0c:	d8f6      	bhi.n	8002dfc <_printf_i+0x28>
 8002e0e:	a001      	add	r0, pc, #4	; (adr r0, 8002e14 <_printf_i+0x40>)
 8002e10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e81 	.word	0x08002e81
 8002e1c:	08002dfd 	.word	0x08002dfd
 8002e20:	08002dfd 	.word	0x08002dfd
 8002e24:	08002dfd 	.word	0x08002dfd
 8002e28:	08002dfd 	.word	0x08002dfd
 8002e2c:	08002e81 	.word	0x08002e81
 8002e30:	08002dfd 	.word	0x08002dfd
 8002e34:	08002dfd 	.word	0x08002dfd
 8002e38:	08002dfd 	.word	0x08002dfd
 8002e3c:	08002dfd 	.word	0x08002dfd
 8002e40:	08002f8d 	.word	0x08002f8d
 8002e44:	08002eb1 	.word	0x08002eb1
 8002e48:	08002f6f 	.word	0x08002f6f
 8002e4c:	08002dfd 	.word	0x08002dfd
 8002e50:	08002dfd 	.word	0x08002dfd
 8002e54:	08002faf 	.word	0x08002faf
 8002e58:	08002dfd 	.word	0x08002dfd
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002dfd 	.word	0x08002dfd
 8002e64:	08002dfd 	.word	0x08002dfd
 8002e68:	08002f77 	.word	0x08002f77
 8002e6c:	680b      	ldr	r3, [r1, #0]
 8002e6e:	1d1a      	adds	r2, r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	600a      	str	r2, [r1, #0]
 8002e74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0a3      	b.n	8002fc8 <_printf_i+0x1f4>
 8002e80:	6825      	ldr	r5, [r4, #0]
 8002e82:	6808      	ldr	r0, [r1, #0]
 8002e84:	062e      	lsls	r6, r5, #24
 8002e86:	f100 0304 	add.w	r3, r0, #4
 8002e8a:	d50a      	bpl.n	8002ea2 <_printf_i+0xce>
 8002e8c:	6805      	ldr	r5, [r0, #0]
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	da03      	bge.n	8002e9c <_printf_i+0xc8>
 8002e94:	232d      	movs	r3, #45	; 0x2d
 8002e96:	426d      	negs	r5, r5
 8002e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e9c:	485e      	ldr	r0, [pc, #376]	; (8003018 <_printf_i+0x244>)
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	e019      	b.n	8002ed6 <_printf_i+0x102>
 8002ea2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ea6:	6805      	ldr	r5, [r0, #0]
 8002ea8:	600b      	str	r3, [r1, #0]
 8002eaa:	bf18      	it	ne
 8002eac:	b22d      	sxthne	r5, r5
 8002eae:	e7ef      	b.n	8002e90 <_printf_i+0xbc>
 8002eb0:	680b      	ldr	r3, [r1, #0]
 8002eb2:	6825      	ldr	r5, [r4, #0]
 8002eb4:	1d18      	adds	r0, r3, #4
 8002eb6:	6008      	str	r0, [r1, #0]
 8002eb8:	0628      	lsls	r0, r5, #24
 8002eba:	d501      	bpl.n	8002ec0 <_printf_i+0xec>
 8002ebc:	681d      	ldr	r5, [r3, #0]
 8002ebe:	e002      	b.n	8002ec6 <_printf_i+0xf2>
 8002ec0:	0669      	lsls	r1, r5, #25
 8002ec2:	d5fb      	bpl.n	8002ebc <_printf_i+0xe8>
 8002ec4:	881d      	ldrh	r5, [r3, #0]
 8002ec6:	4854      	ldr	r0, [pc, #336]	; (8003018 <_printf_i+0x244>)
 8002ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8002eca:	bf0c      	ite	eq
 8002ecc:	2308      	moveq	r3, #8
 8002ece:	230a      	movne	r3, #10
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ed6:	6866      	ldr	r6, [r4, #4]
 8002ed8:	60a6      	str	r6, [r4, #8]
 8002eda:	2e00      	cmp	r6, #0
 8002edc:	bfa2      	ittt	ge
 8002ede:	6821      	ldrge	r1, [r4, #0]
 8002ee0:	f021 0104 	bicge.w	r1, r1, #4
 8002ee4:	6021      	strge	r1, [r4, #0]
 8002ee6:	b90d      	cbnz	r5, 8002eec <_printf_i+0x118>
 8002ee8:	2e00      	cmp	r6, #0
 8002eea:	d04d      	beq.n	8002f88 <_printf_i+0x1b4>
 8002eec:	4616      	mov	r6, r2
 8002eee:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ef2:	fb03 5711 	mls	r7, r3, r1, r5
 8002ef6:	5dc7      	ldrb	r7, [r0, r7]
 8002ef8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002efc:	462f      	mov	r7, r5
 8002efe:	42bb      	cmp	r3, r7
 8002f00:	460d      	mov	r5, r1
 8002f02:	d9f4      	bls.n	8002eee <_printf_i+0x11a>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d10b      	bne.n	8002f20 <_printf_i+0x14c>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	07df      	lsls	r7, r3, #31
 8002f0c:	d508      	bpl.n	8002f20 <_printf_i+0x14c>
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	6861      	ldr	r1, [r4, #4]
 8002f12:	4299      	cmp	r1, r3
 8002f14:	bfde      	ittt	le
 8002f16:	2330      	movle	r3, #48	; 0x30
 8002f18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f20:	1b92      	subs	r2, r2, r6
 8002f22:	6122      	str	r2, [r4, #16]
 8002f24:	f8cd a000 	str.w	sl, [sp]
 8002f28:	464b      	mov	r3, r9
 8002f2a:	aa03      	add	r2, sp, #12
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4640      	mov	r0, r8
 8002f30:	f7ff fee2 	bl	8002cf8 <_printf_common>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d14c      	bne.n	8002fd2 <_printf_i+0x1fe>
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	b004      	add	sp, #16
 8002f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f42:	4835      	ldr	r0, [pc, #212]	; (8003018 <_printf_i+0x244>)
 8002f44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	680e      	ldr	r6, [r1, #0]
 8002f4c:	061f      	lsls	r7, r3, #24
 8002f4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f52:	600e      	str	r6, [r1, #0]
 8002f54:	d514      	bpl.n	8002f80 <_printf_i+0x1ac>
 8002f56:	07d9      	lsls	r1, r3, #31
 8002f58:	bf44      	itt	mi
 8002f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002f5e:	6023      	strmi	r3, [r4, #0]
 8002f60:	b91d      	cbnz	r5, 8002f6a <_printf_i+0x196>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f023 0320 	bic.w	r3, r3, #32
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	e7b0      	b.n	8002ed0 <_printf_i+0xfc>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f043 0320 	orr.w	r3, r3, #32
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	2378      	movs	r3, #120	; 0x78
 8002f78:	4828      	ldr	r0, [pc, #160]	; (800301c <_printf_i+0x248>)
 8002f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f7e:	e7e3      	b.n	8002f48 <_printf_i+0x174>
 8002f80:	065e      	lsls	r6, r3, #25
 8002f82:	bf48      	it	mi
 8002f84:	b2ad      	uxthmi	r5, r5
 8002f86:	e7e6      	b.n	8002f56 <_printf_i+0x182>
 8002f88:	4616      	mov	r6, r2
 8002f8a:	e7bb      	b.n	8002f04 <_printf_i+0x130>
 8002f8c:	680b      	ldr	r3, [r1, #0]
 8002f8e:	6826      	ldr	r6, [r4, #0]
 8002f90:	6960      	ldr	r0, [r4, #20]
 8002f92:	1d1d      	adds	r5, r3, #4
 8002f94:	600d      	str	r5, [r1, #0]
 8002f96:	0635      	lsls	r5, r6, #24
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_i+0x1cc>
 8002f9c:	6018      	str	r0, [r3, #0]
 8002f9e:	e002      	b.n	8002fa6 <_printf_i+0x1d2>
 8002fa0:	0671      	lsls	r1, r6, #25
 8002fa2:	d5fb      	bpl.n	8002f9c <_printf_i+0x1c8>
 8002fa4:	8018      	strh	r0, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6123      	str	r3, [r4, #16]
 8002faa:	4616      	mov	r6, r2
 8002fac:	e7ba      	b.n	8002f24 <_printf_i+0x150>
 8002fae:	680b      	ldr	r3, [r1, #0]
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	600a      	str	r2, [r1, #0]
 8002fb4:	681e      	ldr	r6, [r3, #0]
 8002fb6:	6862      	ldr	r2, [r4, #4]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f7fd f908 	bl	80001d0 <memchr>
 8002fc0:	b108      	cbz	r0, 8002fc6 <_printf_i+0x1f2>
 8002fc2:	1b80      	subs	r0, r0, r6
 8002fc4:	6060      	str	r0, [r4, #4]
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	6123      	str	r3, [r4, #16]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd0:	e7a8      	b.n	8002f24 <_printf_i+0x150>
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	4632      	mov	r2, r6
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	4640      	mov	r0, r8
 8002fda:	47d0      	blx	sl
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d0ab      	beq.n	8002f38 <_printf_i+0x164>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	079b      	lsls	r3, r3, #30
 8002fe4:	d413      	bmi.n	800300e <_printf_i+0x23a>
 8002fe6:	68e0      	ldr	r0, [r4, #12]
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	4298      	cmp	r0, r3
 8002fec:	bfb8      	it	lt
 8002fee:	4618      	movlt	r0, r3
 8002ff0:	e7a4      	b.n	8002f3c <_printf_i+0x168>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	47d0      	blx	sl
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d09b      	beq.n	8002f38 <_printf_i+0x164>
 8003000:	3501      	adds	r5, #1
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	9903      	ldr	r1, [sp, #12]
 8003006:	1a5b      	subs	r3, r3, r1
 8003008:	42ab      	cmp	r3, r5
 800300a:	dcf2      	bgt.n	8002ff2 <_printf_i+0x21e>
 800300c:	e7eb      	b.n	8002fe6 <_printf_i+0x212>
 800300e:	2500      	movs	r5, #0
 8003010:	f104 0619 	add.w	r6, r4, #25
 8003014:	e7f5      	b.n	8003002 <_printf_i+0x22e>
 8003016:	bf00      	nop
 8003018:	080032b9 	.word	0x080032b9
 800301c:	080032ca 	.word	0x080032ca

08003020 <memcpy>:
 8003020:	440a      	add	r2, r1
 8003022:	4291      	cmp	r1, r2
 8003024:	f100 33ff 	add.w	r3, r0, #4294967295
 8003028:	d100      	bne.n	800302c <memcpy+0xc>
 800302a:	4770      	bx	lr
 800302c:	b510      	push	{r4, lr}
 800302e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003036:	4291      	cmp	r1, r2
 8003038:	d1f9      	bne.n	800302e <memcpy+0xe>
 800303a:	bd10      	pop	{r4, pc}

0800303c <memmove>:
 800303c:	4288      	cmp	r0, r1
 800303e:	b510      	push	{r4, lr}
 8003040:	eb01 0402 	add.w	r4, r1, r2
 8003044:	d902      	bls.n	800304c <memmove+0x10>
 8003046:	4284      	cmp	r4, r0
 8003048:	4623      	mov	r3, r4
 800304a:	d807      	bhi.n	800305c <memmove+0x20>
 800304c:	1e43      	subs	r3, r0, #1
 800304e:	42a1      	cmp	r1, r4
 8003050:	d008      	beq.n	8003064 <memmove+0x28>
 8003052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800305a:	e7f8      	b.n	800304e <memmove+0x12>
 800305c:	4402      	add	r2, r0
 800305e:	4601      	mov	r1, r0
 8003060:	428a      	cmp	r2, r1
 8003062:	d100      	bne.n	8003066 <memmove+0x2a>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800306a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800306e:	e7f7      	b.n	8003060 <memmove+0x24>

08003070 <_free_r>:
 8003070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003072:	2900      	cmp	r1, #0
 8003074:	d048      	beq.n	8003108 <_free_r+0x98>
 8003076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800307a:	9001      	str	r0, [sp, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f1a1 0404 	sub.w	r4, r1, #4
 8003082:	bfb8      	it	lt
 8003084:	18e4      	addlt	r4, r4, r3
 8003086:	f000 f8d3 	bl	8003230 <__malloc_lock>
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <_free_r+0x9c>)
 800308c:	9801      	ldr	r0, [sp, #4]
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	4615      	mov	r5, r2
 8003092:	b933      	cbnz	r3, 80030a2 <_free_r+0x32>
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	6014      	str	r4, [r2, #0]
 8003098:	b003      	add	sp, #12
 800309a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800309e:	f000 b8cd 	b.w	800323c <__malloc_unlock>
 80030a2:	42a3      	cmp	r3, r4
 80030a4:	d90b      	bls.n	80030be <_free_r+0x4e>
 80030a6:	6821      	ldr	r1, [r4, #0]
 80030a8:	1862      	adds	r2, r4, r1
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bf04      	itt	eq
 80030ae:	681a      	ldreq	r2, [r3, #0]
 80030b0:	685b      	ldreq	r3, [r3, #4]
 80030b2:	6063      	str	r3, [r4, #4]
 80030b4:	bf04      	itt	eq
 80030b6:	1852      	addeq	r2, r2, r1
 80030b8:	6022      	streq	r2, [r4, #0]
 80030ba:	602c      	str	r4, [r5, #0]
 80030bc:	e7ec      	b.n	8003098 <_free_r+0x28>
 80030be:	461a      	mov	r2, r3
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b10b      	cbz	r3, 80030c8 <_free_r+0x58>
 80030c4:	42a3      	cmp	r3, r4
 80030c6:	d9fa      	bls.n	80030be <_free_r+0x4e>
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	1855      	adds	r5, r2, r1
 80030cc:	42a5      	cmp	r5, r4
 80030ce:	d10b      	bne.n	80030e8 <_free_r+0x78>
 80030d0:	6824      	ldr	r4, [r4, #0]
 80030d2:	4421      	add	r1, r4
 80030d4:	1854      	adds	r4, r2, r1
 80030d6:	42a3      	cmp	r3, r4
 80030d8:	6011      	str	r1, [r2, #0]
 80030da:	d1dd      	bne.n	8003098 <_free_r+0x28>
 80030dc:	681c      	ldr	r4, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	6053      	str	r3, [r2, #4]
 80030e2:	4421      	add	r1, r4
 80030e4:	6011      	str	r1, [r2, #0]
 80030e6:	e7d7      	b.n	8003098 <_free_r+0x28>
 80030e8:	d902      	bls.n	80030f0 <_free_r+0x80>
 80030ea:	230c      	movs	r3, #12
 80030ec:	6003      	str	r3, [r0, #0]
 80030ee:	e7d3      	b.n	8003098 <_free_r+0x28>
 80030f0:	6825      	ldr	r5, [r4, #0]
 80030f2:	1961      	adds	r1, r4, r5
 80030f4:	428b      	cmp	r3, r1
 80030f6:	bf04      	itt	eq
 80030f8:	6819      	ldreq	r1, [r3, #0]
 80030fa:	685b      	ldreq	r3, [r3, #4]
 80030fc:	6063      	str	r3, [r4, #4]
 80030fe:	bf04      	itt	eq
 8003100:	1949      	addeq	r1, r1, r5
 8003102:	6021      	streq	r1, [r4, #0]
 8003104:	6054      	str	r4, [r2, #4]
 8003106:	e7c7      	b.n	8003098 <_free_r+0x28>
 8003108:	b003      	add	sp, #12
 800310a:	bd30      	pop	{r4, r5, pc}
 800310c:	20000090 	.word	0x20000090

08003110 <_malloc_r>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	1ccd      	adds	r5, r1, #3
 8003114:	f025 0503 	bic.w	r5, r5, #3
 8003118:	3508      	adds	r5, #8
 800311a:	2d0c      	cmp	r5, #12
 800311c:	bf38      	it	cc
 800311e:	250c      	movcc	r5, #12
 8003120:	2d00      	cmp	r5, #0
 8003122:	4606      	mov	r6, r0
 8003124:	db01      	blt.n	800312a <_malloc_r+0x1a>
 8003126:	42a9      	cmp	r1, r5
 8003128:	d903      	bls.n	8003132 <_malloc_r+0x22>
 800312a:	230c      	movs	r3, #12
 800312c:	6033      	str	r3, [r6, #0]
 800312e:	2000      	movs	r0, #0
 8003130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003132:	f000 f87d 	bl	8003230 <__malloc_lock>
 8003136:	4921      	ldr	r1, [pc, #132]	; (80031bc <_malloc_r+0xac>)
 8003138:	680a      	ldr	r2, [r1, #0]
 800313a:	4614      	mov	r4, r2
 800313c:	b99c      	cbnz	r4, 8003166 <_malloc_r+0x56>
 800313e:	4f20      	ldr	r7, [pc, #128]	; (80031c0 <_malloc_r+0xb0>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b923      	cbnz	r3, 800314e <_malloc_r+0x3e>
 8003144:	4621      	mov	r1, r4
 8003146:	4630      	mov	r0, r6
 8003148:	f000 f862 	bl	8003210 <_sbrk_r>
 800314c:	6038      	str	r0, [r7, #0]
 800314e:	4629      	mov	r1, r5
 8003150:	4630      	mov	r0, r6
 8003152:	f000 f85d 	bl	8003210 <_sbrk_r>
 8003156:	1c43      	adds	r3, r0, #1
 8003158:	d123      	bne.n	80031a2 <_malloc_r+0x92>
 800315a:	230c      	movs	r3, #12
 800315c:	6033      	str	r3, [r6, #0]
 800315e:	4630      	mov	r0, r6
 8003160:	f000 f86c 	bl	800323c <__malloc_unlock>
 8003164:	e7e3      	b.n	800312e <_malloc_r+0x1e>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	1b5b      	subs	r3, r3, r5
 800316a:	d417      	bmi.n	800319c <_malloc_r+0x8c>
 800316c:	2b0b      	cmp	r3, #11
 800316e:	d903      	bls.n	8003178 <_malloc_r+0x68>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	441c      	add	r4, r3
 8003174:	6025      	str	r5, [r4, #0]
 8003176:	e004      	b.n	8003182 <_malloc_r+0x72>
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	42a2      	cmp	r2, r4
 800317c:	bf0c      	ite	eq
 800317e:	600b      	streq	r3, [r1, #0]
 8003180:	6053      	strne	r3, [r2, #4]
 8003182:	4630      	mov	r0, r6
 8003184:	f000 f85a 	bl	800323c <__malloc_unlock>
 8003188:	f104 000b 	add.w	r0, r4, #11
 800318c:	1d23      	adds	r3, r4, #4
 800318e:	f020 0007 	bic.w	r0, r0, #7
 8003192:	1ac2      	subs	r2, r0, r3
 8003194:	d0cc      	beq.n	8003130 <_malloc_r+0x20>
 8003196:	1a1b      	subs	r3, r3, r0
 8003198:	50a3      	str	r3, [r4, r2]
 800319a:	e7c9      	b.n	8003130 <_malloc_r+0x20>
 800319c:	4622      	mov	r2, r4
 800319e:	6864      	ldr	r4, [r4, #4]
 80031a0:	e7cc      	b.n	800313c <_malloc_r+0x2c>
 80031a2:	1cc4      	adds	r4, r0, #3
 80031a4:	f024 0403 	bic.w	r4, r4, #3
 80031a8:	42a0      	cmp	r0, r4
 80031aa:	d0e3      	beq.n	8003174 <_malloc_r+0x64>
 80031ac:	1a21      	subs	r1, r4, r0
 80031ae:	4630      	mov	r0, r6
 80031b0:	f000 f82e 	bl	8003210 <_sbrk_r>
 80031b4:	3001      	adds	r0, #1
 80031b6:	d1dd      	bne.n	8003174 <_malloc_r+0x64>
 80031b8:	e7cf      	b.n	800315a <_malloc_r+0x4a>
 80031ba:	bf00      	nop
 80031bc:	20000090 	.word	0x20000090
 80031c0:	20000094 	.word	0x20000094

080031c4 <_realloc_r>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	4607      	mov	r7, r0
 80031c8:	4614      	mov	r4, r2
 80031ca:	460e      	mov	r6, r1
 80031cc:	b921      	cbnz	r1, 80031d8 <_realloc_r+0x14>
 80031ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031d2:	4611      	mov	r1, r2
 80031d4:	f7ff bf9c 	b.w	8003110 <_malloc_r>
 80031d8:	b922      	cbnz	r2, 80031e4 <_realloc_r+0x20>
 80031da:	f7ff ff49 	bl	8003070 <_free_r>
 80031de:	4625      	mov	r5, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e4:	f000 f830 	bl	8003248 <_malloc_usable_size_r>
 80031e8:	42a0      	cmp	r0, r4
 80031ea:	d20f      	bcs.n	800320c <_realloc_r+0x48>
 80031ec:	4621      	mov	r1, r4
 80031ee:	4638      	mov	r0, r7
 80031f0:	f7ff ff8e 	bl	8003110 <_malloc_r>
 80031f4:	4605      	mov	r5, r0
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d0f2      	beq.n	80031e0 <_realloc_r+0x1c>
 80031fa:	4631      	mov	r1, r6
 80031fc:	4622      	mov	r2, r4
 80031fe:	f7ff ff0f 	bl	8003020 <memcpy>
 8003202:	4631      	mov	r1, r6
 8003204:	4638      	mov	r0, r7
 8003206:	f7ff ff33 	bl	8003070 <_free_r>
 800320a:	e7e9      	b.n	80031e0 <_realloc_r+0x1c>
 800320c:	4635      	mov	r5, r6
 800320e:	e7e7      	b.n	80031e0 <_realloc_r+0x1c>

08003210 <_sbrk_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4d06      	ldr	r5, [pc, #24]	; (800322c <_sbrk_r+0x1c>)
 8003214:	2300      	movs	r3, #0
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fcf0 	bl	8000c00 <_sbrk>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_sbrk_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_sbrk_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	200001b8 	.word	0x200001b8

08003230 <__malloc_lock>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__malloc_lock+0x8>)
 8003232:	f000 b811 	b.w	8003258 <__retarget_lock_acquire_recursive>
 8003236:	bf00      	nop
 8003238:	200001c0 	.word	0x200001c0

0800323c <__malloc_unlock>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__malloc_unlock+0x8>)
 800323e:	f000 b80c 	b.w	800325a <__retarget_lock_release_recursive>
 8003242:	bf00      	nop
 8003244:	200001c0 	.word	0x200001c0

08003248 <_malloc_usable_size_r>:
 8003248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324c:	1f18      	subs	r0, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfbc      	itt	lt
 8003252:	580b      	ldrlt	r3, [r1, r0]
 8003254:	18c0      	addlt	r0, r0, r3
 8003256:	4770      	bx	lr

08003258 <__retarget_lock_acquire_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_release_recursive>:
 800325a:	4770      	bx	lr

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
