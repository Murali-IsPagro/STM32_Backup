
pick_and-place_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004090  08004090  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000258  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f6a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001776  00000000  00000000  0002a00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0002b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000688  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f29  00000000  00000000  0002c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000868b  00000000  00000000  0004d449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4049  00000000  00000000  00055ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00119b1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002768  00000000  00000000  00119b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c98 	.word	0x08003c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003c98 	.word	0x08003c98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <goright>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void goright() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	Relay_1_ON;
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <goright+0x1c>)
 8000582:	f001 f8bb 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_2_OFF;
 8000586:	2201      	movs	r2, #1
 8000588:	2120      	movs	r1, #32
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <goright+0x1c>)
 800058c:	f001 f8b6 	bl	80016fc <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40020400 	.word	0x40020400

08000598 <goleft>:

void goleft() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	Relay_1_OFF;
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <goleft+0x1c>)
 80005a2:	f001 f8ab 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_2_ON;
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <goleft+0x1c>)
 80005ac:	f001 f8a6 	bl	80016fc <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020400 	.word	0x40020400

080005b8 <go_up>:

void go_up() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	Relay_3_ON;
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <go_up+0x1c>)
 80005c2:	f001 f89b 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_4_OFF;
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4802      	ldr	r0, [pc, #8]	; (80005d4 <go_up+0x1c>)
 80005cc:	f001 f896 	bl	80016fc <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400

080005d8 <go_down>:

void go_down() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	Relay_3_OFF;
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <go_down+0x1c>)
 80005e2:	f001 f88b 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_4_ON;
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4802      	ldr	r0, [pc, #8]	; (80005f4 <go_down+0x1c>)
 80005ec:	f001 f886 	bl	80016fc <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020400 	.word	0x40020400

080005f8 <initialization>:

void initialization() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	goright();
 80005fc:	f7ff ffbc 	bl	8000578 <goright>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <initialization+0x24>)
 8000608:	f001 f878 	bl	80016fc <HAL_GPIO_WritePin>
	go_up();
 800060c:	f7ff ffd4 	bl	80005b8 <go_up>
	HAL_Delay(5000);
 8000610:	f241 3088 	movw	r0, #5000	; 0x1388
 8000614:	f000 fdb4 	bl	8001180 <HAL_Delay>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020400 	.word	0x40020400

08000620 <turnoff_init>:

void turnoff_init() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	Relay_1_OFF;
 8000624:	2201      	movs	r2, #1
 8000626:	2108      	movs	r1, #8
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <turnoff_init+0x3c>)
 800062a:	f001 f867 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_2_OFF;
 800062e:	2201      	movs	r2, #1
 8000630:	2120      	movs	r1, #32
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <turnoff_init+0x3c>)
 8000634:	f001 f862 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_3_OFF;
 8000638:	2201      	movs	r2, #1
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <turnoff_init+0x3c>)
 800063e:	f001 f85d 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_4_OFF;
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <turnoff_init+0x3c>)
 8000648:	f001 f858 	bl	80016fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <turnoff_init+0x3c>)
 8000654:	f001 f852 	bl	80016fc <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <turnoff>:

void turnoff() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	Relay_1_OFF;
 8000664:	2201      	movs	r2, #1
 8000666:	2108      	movs	r1, #8
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <turnoff+0x30>)
 800066a:	f001 f847 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_2_OFF;
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <turnoff+0x30>)
 8000674:	f001 f842 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_3_OFF;
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <turnoff+0x30>)
 800067e:	f001 f83d 	bl	80016fc <HAL_GPIO_WritePin>
	Relay_4_OFF;
 8000682:	2201      	movs	r2, #1
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turnoff+0x30>)
 8000688:	f001 f838 	bl	80016fc <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020400 	.word	0x40020400

08000694 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800069a:	f000 fcff 	bl	800109c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800069e:	f000 f9d3 	bl	8000a48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006a2:	f000 fa8f 	bl	8000bc4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80006a6:	f000 fa39 	bl	8000b1c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80006aa:	f000 fa61 	bl	8000b70 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
//	count = 0;
//	dlay = 0;
	initialization();
 80006ae:	f7ff ffa3 	bl	80005f8 <initialization>
	turnoff_init();
 80006b2:	f7ff ffb5 	bl	8000620 <turnoff_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	4875      	ldr	r0, [pc, #468]	; (8000890 <main+0x1fc>)
 80006bc:	f001 f81e 	bl	80016fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4872      	ldr	r0, [pc, #456]	; (8000890 <main+0x1fc>)
 80006c6:	f001 f819 	bl	80016fc <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_UART_Receive(&huart1, Rx_data, 10, 1500) == HAL_OK) {
 80006ca:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80006ce:	220a      	movs	r2, #10
 80006d0:	4970      	ldr	r1, [pc, #448]	; (8000894 <main+0x200>)
 80006d2:	4871      	ldr	r0, [pc, #452]	; (8000898 <main+0x204>)
 80006d4:	f001 fd53 	bl	800217e <HAL_UART_Receive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d174      	bne.n	80007c8 <main+0x134>
			HAL_UART_Transmit(&huart2, Rx_data, 10, 1500);
 80006de:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80006e2:	220a      	movs	r2, #10
 80006e4:	496b      	ldr	r1, [pc, #428]	; (8000894 <main+0x200>)
 80006e6:	486d      	ldr	r0, [pc, #436]	; (800089c <main+0x208>)
 80006e8:	f001 fcb7 	bl	800205a <HAL_UART_Transmit>
			HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f000 fd46 	bl	8001180 <HAL_Delay>

			init_size = strlen(Rx_data);
 80006f4:	4867      	ldr	r0, [pc, #412]	; (8000894 <main+0x200>)
 80006f6:	f7ff fd6b 	bl	80001d0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b68      	ldr	r3, [pc, #416]	; (80008a0 <main+0x20c>)
 8000700:	601a      	str	r2, [r3, #0]
			char *ptr = strtok(Rx_data, delim);
 8000702:	4968      	ldr	r1, [pc, #416]	; (80008a4 <main+0x210>)
 8000704:	4863      	ldr	r0, [pc, #396]	; (8000894 <main+0x200>)
 8000706:	f002 f869 	bl	80027dc <strtok>
 800070a:	60f8      	str	r0, [r7, #12]

			while (ptr != NULL) {
 800070c:	e031      	b.n	8000772 <main+0xde>
				for (int i = 0; i <= 4; i++) {
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	e02b      	b.n	800076c <main+0xd8>

					// printf("'%s'\n", ptr);
					str1[i] = ptr;
 8000714:	4964      	ldr	r1, [pc, #400]	; (80008a8 <main+0x214>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//					printf("'%s'\n", str1[i]);

//					sprintf(msg, "%s,%d\r\n", str1[i], i);
//					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
//							100);
					count[i] = atoi(str1[i]);
 800071e:	4a62      	ldr	r2, [pc, #392]	; (80008a8 <main+0x214>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f802 	bl	8002730 <atoi>
 800072c:	4602      	mov	r2, r0
 800072e:	495f      	ldr	r1, [pc, #380]	; (80008ac <main+0x218>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					sprintf(msg, "count=%d\r\n", count[i]);
 8000736:	4a5d      	ldr	r2, [pc, #372]	; (80008ac <main+0x218>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	461a      	mov	r2, r3
 8000740:	495b      	ldr	r1, [pc, #364]	; (80008b0 <main+0x21c>)
 8000742:	485c      	ldr	r0, [pc, #368]	; (80008b4 <main+0x220>)
 8000744:	f002 f82a 	bl	800279c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000748:	485a      	ldr	r0, [pc, #360]	; (80008b4 <main+0x220>)
 800074a:	f7ff fd41 	bl	80001d0 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	b29a      	uxth	r2, r3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	4957      	ldr	r1, [pc, #348]	; (80008b4 <main+0x220>)
 8000756:	4851      	ldr	r0, [pc, #324]	; (800089c <main+0x208>)
 8000758:	f001 fc7f 	bl	800205a <HAL_UART_Transmit>
							100);
					ptr = strtok(NULL, delim);
 800075c:	4951      	ldr	r1, [pc, #324]	; (80008a4 <main+0x210>)
 800075e:	2000      	movs	r0, #0
 8000760:	f002 f83c 	bl	80027dc <strtok>
 8000764:	60f8      	str	r0, [r7, #12]
				for (int i = 0; i <= 4; i++) {
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3301      	adds	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b04      	cmp	r3, #4
 8000770:	ddd0      	ble.n	8000714 <main+0x80>
			while (ptr != NULL) {
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1ca      	bne.n	800070e <main+0x7a>

				}
			}
			for (int i = 0; i < 5; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	e021      	b.n	80007c2 <main+0x12e>
				count[i] = atoi(str1[i]);
 800077e:	4a4a      	ldr	r2, [pc, #296]	; (80008a8 <main+0x214>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ffd2 	bl	8002730 <atoi>
 800078c:	4602      	mov	r2, r0
 800078e:	4947      	ldr	r1, [pc, #284]	; (80008ac <main+0x218>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				sprintf(msg, "cou=%d\r\n", count[i]);
 8000796:	4a45      	ldr	r2, [pc, #276]	; (80008ac <main+0x218>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	461a      	mov	r2, r3
 80007a0:	4945      	ldr	r1, [pc, #276]	; (80008b8 <main+0x224>)
 80007a2:	4844      	ldr	r0, [pc, #272]	; (80008b4 <main+0x220>)
 80007a4:	f001 fffa 	bl	800279c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 80007a8:	4842      	ldr	r0, [pc, #264]	; (80008b4 <main+0x220>)
 80007aa:	f7ff fd11 	bl	80001d0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	493f      	ldr	r1, [pc, #252]	; (80008b4 <main+0x220>)
 80007b6:	4839      	ldr	r0, [pc, #228]	; (800089c <main+0x208>)
 80007b8:	f001 fc4f 	bl	800205a <HAL_UART_Transmit>
			for (int i = 0; i < 5; i++) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	ddda      	ble.n	800077e <main+0xea>
			}
		}

//		HAL_UART_Transmit(&huart2, Rx_data, sizeof(Rx_data), 100);

		if (count[0] != 0 && count[1] != 0) {
 80007c8:	4b38      	ldr	r3, [pc, #224]	; (80008ac <main+0x218>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 811e 	beq.w	8000a0e <main+0x37a>
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <main+0x218>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f000 8119 	beq.w	8000a0e <main+0x37a>
			count[1] = count[1] * 1000; // up
 80007dc:	4b33      	ldr	r3, [pc, #204]	; (80008ac <main+0x218>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	4a30      	ldr	r2, [pc, #192]	; (80008ac <main+0x218>)
 80007ea:	6053      	str	r3, [r2, #4]
			count[2] = count[2] * 1000; //down
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <main+0x218>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f4:	fb02 f303 	mul.w	r3, r2, r3
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <main+0x218>)
 80007fa:	6093      	str	r3, [r2, #8]
			count[3] = count[3] * 1000; //right
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <main+0x218>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	4a28      	ldr	r2, [pc, #160]	; (80008ac <main+0x218>)
 800080a:	60d3      	str	r3, [r2, #12]
			sprintf(msg,
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <main+0x218>)
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <main+0x218>)
 8000812:	6858      	ldr	r0, [r3, #4]
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <main+0x218>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	4a24      	ldr	r2, [pc, #144]	; (80008ac <main+0x218>)
 800081a:	68d2      	ldr	r2, [r2, #12]
 800081c:	9201      	str	r2, [sp, #4]
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	4603      	mov	r3, r0
 8000822:	460a      	mov	r2, r1
 8000824:	4925      	ldr	r1, [pc, #148]	; (80008bc <main+0x228>)
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <main+0x220>)
 8000828:	f001 ffb8 	bl	800279c <siprintf>
					"inside count loop... count=%d,delayup= %d,delaydown= %d,delayright= %d\r\n",
					count[0], count[1], count[2], count[3]);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 800082c:	4821      	ldr	r0, [pc, #132]	; (80008b4 <main+0x220>)
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	491e      	ldr	r1, [pc, #120]	; (80008b4 <main+0x220>)
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0x208>)
 800083c:	f001 fc0d 	bl	800205a <HAL_UART_Transmit>

			//data received from arduino
			start = 1;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <main+0x22c>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]

		}
		while (start == 1) {
 8000846:	e0e2      	b.n	8000a0e <main+0x37a>
			if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) {
 8000848:	2101      	movs	r1, #1
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <main+0x230>)
 800084c:	f000 ff3e 	bl	80016cc <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	f040 80db 	bne.w	8000a0e <main+0x37a>
				sprintf(msg,
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <main+0x218>)
 800085a:	6819      	ldr	r1, [r3, #0]
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <main+0x218>)
 800085e:	6858      	ldr	r0, [r3, #4]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <main+0x218>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <main+0x218>)
 8000866:	68d2      	ldr	r2, [r2, #12]
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4603      	mov	r3, r0
 800086e:	460a      	mov	r2, r1
 8000870:	4915      	ldr	r1, [pc, #84]	; (80008c8 <main+0x234>)
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <main+0x220>)
 8000874:	f001 ff92 	bl	800279c <siprintf>
						"inside start loop... count=%d,delayup= %d,delaydown= %d,delayright= %d\r\n",
						count[0], count[1], count[2], count[3]);
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 8000878:	480e      	ldr	r0, [pc, #56]	; (80008b4 <main+0x220>)
 800087a:	f7ff fca9 	bl	80001d0 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	b29a      	uxth	r2, r3
 8000882:	2364      	movs	r3, #100	; 0x64
 8000884:	490b      	ldr	r1, [pc, #44]	; (80008b4 <main+0x220>)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <main+0x208>)
 8000888:	f001 fbe7 	bl	800205a <HAL_UART_Transmit>
				while (count[0] > real_count) {
 800088c:	e084      	b.n	8000998 <main+0x304>
 800088e:	bf00      	nop
 8000890:	40020000 	.word	0x40020000
 8000894:	200000b0 	.word	0x200000b0
 8000898:	200001a4 	.word	0x200001a4
 800089c:	20000274 	.word	0x20000274
 80008a0:	20000098 	.word	0x20000098
 80008a4:	20000000 	.word	0x20000000
 80008a8:	200001e8 	.word	0x200001e8
 80008ac:	20000260 	.word	0x20000260
 80008b0:	08003cb0 	.word	0x08003cb0
 80008b4:	200000d8 	.word	0x200000d8
 80008b8:	08003cbc 	.word	0x08003cbc
 80008bc:	08003cc8 	.word	0x08003cc8
 80008c0:	20000094 	.word	0x20000094
 80008c4:	40020400 	.word	0x40020400
 80008c8:	08003d14 	.word	0x08003d14
					go_down(); // coming down R3 off, R4 On
 80008cc:	f7ff fe84 	bl	80005d8 <go_down>
					HAL_Delay(count[2]);
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <main+0x388>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fc53 	bl	8001180 <HAL_Delay>
					turnoff();
 80008da:	f7ff fec1 	bl	8000660 <turnoff>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //suction on
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	484e      	ldr	r0, [pc, #312]	; (8000a20 <main+0x38c>)
 80008e6:	f000 ff09 	bl	80016fc <HAL_GPIO_WritePin>
					go_up(); //Go Up, R3 On, R4 off
 80008ea:	f7ff fe65 	bl	80005b8 <go_up>
					HAL_Delay(count[1]);
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <main+0x388>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fc44 	bl	8001180 <HAL_Delay>
					turnoff();
 80008f8:	f7ff feb2 	bl	8000660 <turnoff>
					goleft();    ///// go left R1 Off, R2 On
 80008fc:	f7ff fe4c 	bl	8000598 <goleft>
					HAL_Delay(count[3]);
 8000900:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <main+0x388>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fc3b 	bl	8001180 <HAL_Delay>
					turnoff();
 800090a:	f7ff fea9 	bl	8000660 <turnoff>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //suction off
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000914:	4842      	ldr	r0, [pc, #264]	; (8000a20 <main+0x38c>)
 8000916:	f000 fef1 	bl	80016fc <HAL_GPIO_WritePin>
					HAL_Delay(200);
 800091a:	20c8      	movs	r0, #200	; 0xc8
 800091c:	f000 fc30 	bl	8001180 <HAL_Delay>
					goright();      // Go right R1 On, R2 Off
 8000920:	f7ff fe2a 	bl	8000578 <goright>
					HAL_Delay(count[3]);
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <main+0x388>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fc29 	bl	8001180 <HAL_Delay>
					turnoff();
 800092e:	f7ff fe97 	bl	8000660 <turnoff>
					real_count++;
 8000932:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <main+0x390>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <main+0x390>)
 800093a:	6013      	str	r3, [r2, #0]
					sprintf(msg,
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <main+0x388>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <main+0x388>)
 8000942:	685c      	ldr	r4, [r3, #4]
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <main+0x388>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <main+0x388>)
 800094a:	68d2      	ldr	r2, [r2, #12]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <main+0x390>)
 800094e:	6809      	ldr	r1, [r1, #0]
 8000950:	9102      	str	r1, [sp, #8]
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4623      	mov	r3, r4
 8000958:	4602      	mov	r2, r0
 800095a:	4933      	ldr	r1, [pc, #204]	; (8000a28 <main+0x394>)
 800095c:	4833      	ldr	r0, [pc, #204]	; (8000a2c <main+0x398>)
 800095e:	f001 ff1d 	bl	800279c <siprintf>
							"inside real loop... count=%d,delayup= %d,delaydown= %d,delayright= %d,real_count=%d\r\n",
							count[0], count[1], count[2], count[3], real_count);
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000962:	4832      	ldr	r0, [pc, #200]	; (8000a2c <main+0x398>)
 8000964:	f7ff fc34 	bl	80001d0 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	492f      	ldr	r1, [pc, #188]	; (8000a2c <main+0x398>)
 8000970:	482f      	ldr	r0, [pc, #188]	; (8000a30 <main+0x39c>)
 8000972:	f001 fb72 	bl	800205a <HAL_UART_Transmit>
							100);
					sprintf(msg,"real_count=%d\r\n",real_count);
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <main+0x390>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	492d      	ldr	r1, [pc, #180]	; (8000a34 <main+0x3a0>)
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <main+0x398>)
 8000980:	f001 ff0c 	bl	800279c <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 8000984:	4829      	ldr	r0, [pc, #164]	; (8000a2c <main+0x398>)
 8000986:	f7ff fc23 	bl	80001d0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	4926      	ldr	r1, [pc, #152]	; (8000a2c <main+0x398>)
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <main+0x3a4>)
 8000994:	f001 fb61 	bl	800205a <HAL_UART_Transmit>
				while (count[0] > real_count) {
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <main+0x388>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <main+0x390>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dc93      	bgt.n	80008cc <main+0x238>
							100);
				}
				if (count[0] <= real_count) {
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <main+0x388>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <main+0x390>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dc2e      	bgt.n	8000a0e <main+0x37a>
					start = 0;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <main+0x3a8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
					real_count = 0;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <main+0x390>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
					count[0] = 0;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <main+0x388>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
					count[1] = 0;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <main+0x388>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
					HAL_UART_Transmit(&huart1, "a", 1, 100);
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	2201      	movs	r2, #1
 80009cc:	491c      	ldr	r1, [pc, #112]	; (8000a40 <main+0x3ac>)
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <main+0x3a4>)
 80009d0:	f001 fb43 	bl	800205a <HAL_UART_Transmit>
					sprintf(msg,
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x388>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <main+0x388>)
 80009da:	685c      	ldr	r4, [r3, #4]
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <main+0x388>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <main+0x388>)
 80009e2:	68d2      	ldr	r2, [r2, #12]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <main+0x390>)
 80009e6:	6809      	ldr	r1, [r1, #0]
 80009e8:	9102      	str	r1, [sp, #8]
 80009ea:	9201      	str	r2, [sp, #4]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4623      	mov	r3, r4
 80009f0:	4602      	mov	r2, r0
 80009f2:	4914      	ldr	r1, [pc, #80]	; (8000a44 <main+0x3b0>)
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <main+0x398>)
 80009f6:	f001 fed1 	bl	800279c <siprintf>
							"inside final loop...  count=%d,delayup= %d,delaydown= %d,delayright= %d,real_count=%d\r\n",
							count[0], count[1], count[2], count[3], real_count);
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <main+0x398>)
 80009fc:	f7ff fbe8 	bl	80001d0 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	4909      	ldr	r1, [pc, #36]	; (8000a2c <main+0x398>)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <main+0x39c>)
 8000a0a:	f001 fb26 	bl	800205a <HAL_UART_Transmit>
		while (start == 1) {
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <main+0x3a8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	f43f af18 	beq.w	8000848 <main+0x1b4>
		if (HAL_UART_Receive(&huart1, Rx_data, 10, 1500) == HAL_OK) {
 8000a18:	e657      	b.n	80006ca <main+0x36>
 8000a1a:	bf00      	nop
 8000a1c:	20000260 	.word	0x20000260
 8000a20:	40020400 	.word	0x40020400
 8000a24:	20000090 	.word	0x20000090
 8000a28:	08003d60 	.word	0x08003d60
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	20000274 	.word	0x20000274
 8000a34:	08003db8 	.word	0x08003db8
 8000a38:	200001a4 	.word	0x200001a4
 8000a3c:	20000094 	.word	0x20000094
 8000a40:	08003dc8 	.word	0x08003dc8
 8000a44:	08003dcc 	.word	0x08003dcc

08000a48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fe98 	bl	800278c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aac:	2310      	movs	r3, #16
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000abc:	23a8      	movs	r3, #168	; 0xa8
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fe2f 	bl	8001730 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x94>
		Error_Handler();
 8000ad8:	f000 f90a 	bl	8000cf0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2105      	movs	r1, #5
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f890 	bl	8001c20 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xc2>
		Error_Handler();
 8000b06:	f000 f8f3 	bl	8000cf0 <Error_Handler>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART1_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b54:	f001 fa34 	bl	8001fc0 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b5e:	f000 f8c7 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200001a4 	.word	0x200001a4
 8000b6c:	40011000 	.word	0x40011000

08000b70 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_USART2_UART_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f001 fa0a 	bl	8001fc0 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000bb2:	f000 f89d 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000274 	.word	0x20000274
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0x11c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	21c0      	movs	r1, #192	; 0xc0
 8000c4e:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0x120>)
 8000c50:	f000 fd54 	bl	80016fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c5a:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <MX_GPIO_Init+0x124>)
 8000c5c:	f000 fd4e 	bl	80016fc <HAL_GPIO_WritePin>
	GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <MX_GPIO_Init+0x128>)
 8000c66:	f000 fd49 	bl	80016fc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <MX_GPIO_Init+0x120>)
 8000c82:	f000 fb87 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_GPIO_Init+0x124>)
 8000c9a:	f000 fb7b 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB5 PB6 PB7
	 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_GPIO_Init+0x124>)
 8000cb8:	f000 fb6c 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_GPIO_Init+0x128>)
 8000cd4:	f000 fb5e 	bl	8001394 <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40021000 	.word	0x40021000

08000cf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <HAL_UART_MspInit+0xe8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12d      	bne.n	8000dca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a30      	ldr	r2, [pc, #192]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000db8:	2307      	movs	r3, #7
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <HAL_UART_MspInit+0xf0>)
 8000dc4:	f000 fae6 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc8:	e030      	b.n	8000e2c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <HAL_UART_MspInit+0xf4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d12b      	bne.n	8000e2c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0xf0>)
 8000e28:	f000 fab4 	bl	8001394 <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40004400 	.word	0x40004400

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f956 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_kill>:

int _kill(int pid, int sig)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eb2:	f001 fc41 	bl	8002738 <__errno>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2216      	movs	r2, #22
 8000eba:	601a      	str	r2, [r3, #0]
	return -1;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_exit>:

void _exit (int status)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffe7 	bl	8000ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eda:	e7fe      	b.n	8000eda <_exit+0x12>

08000edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
	}

return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
	}
	return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f001 fba6 	bl	8002738 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	2000009c 	.word	0x2000009c
 8001020:	200002d0 	.word	0x200002d0

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f001 fb65 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fb0b 	bl	8000694 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800108c:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 8001090:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001094:	200002cc 	.word	0x200002cc

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f931 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe14 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f93b 	bl	800137a <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f911 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c
 8001164:	200002b8 	.word	0x200002b8

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200002b8 	.word	0x200002b8

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff5c 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff8e 	bl	8001280 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffb0 	bl	80012e8 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e16b      	b.n	8001688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 815a 	bne.w	8001682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80b4 	beq.w	8001682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b60      	ldr	r3, [pc, #384]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a5f      	ldr	r2, [pc, #380]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x310>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_GPIO_Init+0x314>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d02b      	beq.n	80015ba <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x318>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d025      	beq.n	80015b6 <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_GPIO_Init+0x31c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x320>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_GPIO_Init+0x324>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x216>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x328>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x212>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x32c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x20a>
 800159a:	2307      	movs	r3, #7
 800159c:	e00e      	b.n	80015bc <HAL_GPIO_Init+0x228>
 800159e:	2308      	movs	r3, #8
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x310>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_GPIO_Init+0x334>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001652:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae90 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021c00 	.word	0x40021c00
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	619a      	str	r2, [r3, #24]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e264      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d075      	beq.n	800183a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174e:	4ba3      	ldr	r3, [pc, #652]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00c      	beq.n	8001774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4ba0      	ldr	r3, [pc, #640]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	2b08      	cmp	r3, #8
 8001764:	d112      	bne.n	800178c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001766:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d10b      	bne.n	800178c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d05b      	beq.n	8001838 <HAL_RCC_OscConfig+0x108>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d157      	bne.n	8001838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e23f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x74>
 8001796:	4b91      	ldr	r3, [pc, #580]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0xb0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x98>
 80017ae:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a8a      	ldr	r2, [pc, #552]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a87      	ldr	r2, [pc, #540]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xb0>
 80017c8:	4b84      	ldr	r3, [pc, #528]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a83      	ldr	r2, [pc, #524]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b81      	ldr	r3, [pc, #516]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a80      	ldr	r2, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fcbe 	bl	8001168 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fcba 	bl	8001168 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e204      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0xc0>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcaa 	bl	8001168 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fca6 	bl	8001168 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1f0      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	4b6c      	ldr	r3, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0xe8>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	2b08      	cmp	r3, #8
 800185c:	d11c      	bne.n	8001898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185e:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d116      	bne.n	8001898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x152>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1c4      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4952      	ldr	r1, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	e03a      	b.n	800190e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0x2b0>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fc5f 	bl	8001168 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fc5b 	bl	8001168 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1a5      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b43      	ldr	r3, [pc, #268]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4940      	ldr	r1, [pc, #256]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_OscConfig+0x2b0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc3e 	bl	8001168 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fc3a 	bl	8001168 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e184      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d030      	beq.n	800197c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x2b4>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fc1e 	bl	8001168 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fc1a 	bl	8001168 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e164      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x200>
 800194e:	e015      	b.n	800197c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x2b4>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fc07 	bl	8001168 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fc03 	bl	8001168 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e14d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a0 	beq.w	8001aca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_RCC_OscConfig+0x2b8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fbc9 	bl	8001168 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e011      	b.n	80019fe <HAL_RCC_OscConfig+0x2ce>
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	42470000 	.word	0x42470000
 80019e4:	42470e80 	.word	0x42470e80
 80019e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff fbbc 	bl	8001168 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e106      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x4e4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
 8001a12:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x32a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x312>
 8001a28:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x32a>
 8001a42:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a74      	ldr	r2, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb81 	bl	8001168 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb7d 	bl	8001168 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0c5      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x33a>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb6b 	bl	8001168 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb67 	bl	8001168 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0af      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 809b 	beq.w	8001c0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d05c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d141      	bne.n	8001b6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb3b 	bl	8001168 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fb37 	bl	8001168 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e081      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	4937      	ldr	r1, [pc, #220]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb10 	bl	8001168 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fb0c 	bl	8001168 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e056      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x41c>
 8001b6a:	e04e      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x4ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff faf9 	bl	8001168 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff faf5 	bl	8001168 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e03f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x44a>
 8001b98:	e037      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e032      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d028      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d121      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d11a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40007000 	.word	0x40007000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470060 	.word	0x42470060

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0cc      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d90c      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d044      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e067      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4934      	ldr	r1, [pc, #208]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d10:	f7ff fa2a 	bl	8001168 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7ff fa26 	bl	8001168 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e04f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1eb      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d20c      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f98a 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	08003e24 	.word	0x08003e24
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df2:	2100      	movs	r1, #0
 8001df4:	6079      	str	r1, [r7, #4]
 8001df6:	2100      	movs	r1, #0
 8001df8:	60f9      	str	r1, [r7, #12]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dfe:	2100      	movs	r1, #0
 8001e00:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e02:	4952      	ldr	r1, [pc, #328]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e04:	6889      	ldr	r1, [r1, #8]
 8001e06:	f001 010c 	and.w	r1, r1, #12
 8001e0a:	2908      	cmp	r1, #8
 8001e0c:	d00d      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e0e:	2908      	cmp	r1, #8
 8001e10:	f200 8094 	bhi.w	8001f3c <HAL_RCC_GetSysClockFreq+0x150>
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d002      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x32>
 8001e18:	2904      	cmp	r1, #4
 8001e1a:	d003      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x38>
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e20:	60bb      	str	r3, [r7, #8]
       break;
 8001e22:	e08e      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e26:	60bb      	str	r3, [r7, #8]
      break;
 8001e28:	e08b      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2a:	4948      	ldr	r1, [pc, #288]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e2c:	6849      	ldr	r1, [r1, #4]
 8001e2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e32:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e34:	4945      	ldr	r1, [pc, #276]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e36:	6849      	ldr	r1, [r1, #4]
 8001e38:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	d024      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e40:	4942      	ldr	r1, [pc, #264]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e42:	6849      	ldr	r1, [r1, #4]
 8001e44:	0989      	lsrs	r1, r1, #6
 8001e46:	4608      	mov	r0, r1
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e50:	f04f 0500 	mov.w	r5, #0
 8001e54:	ea00 0204 	and.w	r2, r0, r4
 8001e58:	ea01 0305 	and.w	r3, r1, r5
 8001e5c:	493d      	ldr	r1, [pc, #244]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e5e:	fb01 f003 	mul.w	r0, r1, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	fb01 f102 	mul.w	r1, r1, r2
 8001e68:	1844      	adds	r4, r0, r1
 8001e6a:	493a      	ldr	r1, [pc, #232]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e6c:	fba2 0101 	umull	r0, r1, r2, r1
 8001e70:	1863      	adds	r3, r4, r1
 8001e72:	4619      	mov	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	f7fe fa00 	bl	8000280 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4613      	mov	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e04a      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	461a      	mov	r2, r3
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	ea02 0400 	and.w	r4, r2, r0
 8001ea2:	ea03 0501 	and.w	r5, r3, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	014b      	lsls	r3, r1, #5
 8001eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eb8:	0142      	lsls	r2, r0, #5
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	1b00      	subs	r0, r0, r4
 8001ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	018b      	lsls	r3, r1, #6
 8001ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ed2:	0182      	lsls	r2, r0, #6
 8001ed4:	1a12      	subs	r2, r2, r0
 8001ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	00d9      	lsls	r1, r3, #3
 8001ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ee8:	00d0      	lsls	r0, r2, #3
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	1912      	adds	r2, r2, r4
 8001ef0:	eb45 0303 	adc.w	r3, r5, r3
 8001ef4:	f04f 0000 	mov.w	r0, #0
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	0299      	lsls	r1, r3, #10
 8001efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f02:	0290      	lsls	r0, r2, #10
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f7fe f9b4 	bl	8000280 <__aeabi_uldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	60bb      	str	r3, [r7, #8]
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f3e:	60bb      	str	r3, [r7, #8]
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	68bb      	ldr	r3, [r7, #8]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	017d7840 	.word	0x017d7840

08001f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08003e34 	.word	0x08003e34

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f9c:	f7ff ffdc 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	08003e34 	.word	0x08003e34

08001fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e03f      	b.n	8002052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe feb0 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f9cb 	bl	80023a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08a      	sub	sp, #40	; 0x28
 800205e:	af02      	add	r7, sp, #8
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	d17c      	bne.n	8002174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_UART_Transmit+0x2c>
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e075      	b.n	8002176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_UART_Transmit+0x3e>
 8002094:	2302      	movs	r3, #2
 8002096:	e06e      	b.n	8002176 <HAL_UART_Transmit+0x11c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2221      	movs	r2, #33	; 0x21
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ae:	f7ff f85b 	bl	8001168 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c8:	d108      	bne.n	80020dc <HAL_UART_Transmit+0x82>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e003      	b.n	80020e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020ec:	e02a      	b.n	8002144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f8e2 	bl	80022c2 <UART_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e036      	b.n	8002176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800211c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3302      	adds	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e007      	b.n	8002136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1cf      	bne.n	80020ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f8b2 	bl	80022c2 <UART_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e006      	b.n	8002176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b08a      	sub	sp, #40	; 0x28
 8002182:	af02      	add	r7, sp, #8
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	f040 808c 	bne.w	80022b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_UART_Receive+0x2e>
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e084      	b.n	80022ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_UART_Receive+0x40>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e07d      	b.n	80022ba <HAL_UART_Receive+0x13c>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2222      	movs	r2, #34	; 0x22
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021da:	f7fe ffc5 	bl	8001168 <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d108      	bne.n	8002208 <HAL_UART_Receive+0x8a>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e003      	b.n	8002210 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002218:	e043      	b.n	80022a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2200      	movs	r2, #0
 8002222:	2120      	movs	r1, #32
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f84c 	bl	80022c2 <UART_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e042      	b.n	80022ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	b29a      	uxth	r2, r3
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	3302      	adds	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e01f      	b.n	8002294 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d007      	beq.n	800226e <HAL_UART_Receive+0xf0>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_UART_Receive+0xfe>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e008      	b.n	800228e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	b2da      	uxtb	r2, r3
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1b6      	bne.n	800221a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b090      	sub	sp, #64	; 0x40
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d2:	e050      	b.n	8002376 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022da:	d04c      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022e2:	f7fe ff41 	bl	8001168 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d241      	bcs.n	8002376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	330c      	adds	r3, #12
 8002310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002312:	637a      	str	r2, [r7, #52]	; 0x34
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1e5      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3314      	adds	r3, #20
 800232c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	613b      	str	r3, [r7, #16]
   return(result);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002346:	623a      	str	r2, [r7, #32]
 8002348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	69f9      	ldr	r1, [r7, #28]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	e841 2300 	strex	r3, r2, [r1]
 8002352:	61bb      	str	r3, [r7, #24]
   return(result);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e5      	bne.n	8002326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e00f      	b.n	8002396 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	429a      	cmp	r2, r3
 8002392:	d09f      	beq.n	80022d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3740      	adds	r7, #64	; 0x40
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a4:	b09f      	sub	sp, #124	; 0x7c
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b6:	68d9      	ldr	r1, [r3, #12]
 80023b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	ea40 0301 	orr.w	r3, r0, r1
 80023c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80023da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023e4:	f021 010c 	bic.w	r1, r1, #12
 80023e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ee:	430b      	orrs	r3, r1
 80023f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	6999      	ldr	r1, [r3, #24]
 8002400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	ea40 0301 	orr.w	r3, r0, r1
 8002408:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4bc5      	ldr	r3, [pc, #788]	; (8002724 <UART_SetConfig+0x384>)
 8002410:	429a      	cmp	r2, r3
 8002412:	d004      	beq.n	800241e <UART_SetConfig+0x7e>
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4bc3      	ldr	r3, [pc, #780]	; (8002728 <UART_SetConfig+0x388>)
 800241a:	429a      	cmp	r2, r3
 800241c:	d103      	bne.n	8002426 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800241e:	f7ff fdbb 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002422:	6778      	str	r0, [r7, #116]	; 0x74
 8002424:	e002      	b.n	800242c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002426:	f7ff fda3 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 800242a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002434:	f040 80b6 	bne.w	80025a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243a:	461c      	mov	r4, r3
 800243c:	f04f 0500 	mov.w	r5, #0
 8002440:	4622      	mov	r2, r4
 8002442:	462b      	mov	r3, r5
 8002444:	1891      	adds	r1, r2, r2
 8002446:	6439      	str	r1, [r7, #64]	; 0x40
 8002448:	415b      	adcs	r3, r3
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
 800244c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002450:	1912      	adds	r2, r2, r4
 8002452:	eb45 0303 	adc.w	r3, r5, r3
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	00d9      	lsls	r1, r3, #3
 8002460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002464:	00d0      	lsls	r0, r2, #3
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	1911      	adds	r1, r2, r4
 800246c:	6639      	str	r1, [r7, #96]	; 0x60
 800246e:	416b      	adcs	r3, r5
 8002470:	667b      	str	r3, [r7, #100]	; 0x64
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	461a      	mov	r2, r3
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	1891      	adds	r1, r2, r2
 800247e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002480:	415b      	adcs	r3, r3
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002488:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800248c:	f7fd fef8 	bl	8000280 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4ba5      	ldr	r3, [pc, #660]	; (800272c <UART_SetConfig+0x38c>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	011e      	lsls	r6, r3, #4
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	461c      	mov	r4, r3
 80024a2:	f04f 0500 	mov.w	r5, #0
 80024a6:	4622      	mov	r2, r4
 80024a8:	462b      	mov	r3, r5
 80024aa:	1891      	adds	r1, r2, r2
 80024ac:	6339      	str	r1, [r7, #48]	; 0x30
 80024ae:	415b      	adcs	r3, r3
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
 80024b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024b6:	1912      	adds	r2, r2, r4
 80024b8:	eb45 0303 	adc.w	r3, r5, r3
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	00d9      	lsls	r1, r3, #3
 80024c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ca:	00d0      	lsls	r0, r2, #3
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	1911      	adds	r1, r2, r4
 80024d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80024d4:	416b      	adcs	r3, r5
 80024d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	461a      	mov	r2, r3
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	1891      	adds	r1, r2, r2
 80024e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80024e6:	415b      	adcs	r3, r3
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024f2:	f7fd fec5 	bl	8000280 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4b8c      	ldr	r3, [pc, #560]	; (800272c <UART_SetConfig+0x38c>)
 80024fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	2164      	movs	r1, #100	; 0x64
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	3332      	adds	r3, #50	; 0x32
 800250e:	4a87      	ldr	r2, [pc, #540]	; (800272c <UART_SetConfig+0x38c>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800251c:	441e      	add	r6, r3
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	4618      	mov	r0, r3
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	1894      	adds	r4, r2, r2
 800252c:	623c      	str	r4, [r7, #32]
 800252e:	415b      	adcs	r3, r3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002536:	1812      	adds	r2, r2, r0
 8002538:	eb41 0303 	adc.w	r3, r1, r3
 800253c:	f04f 0400 	mov.w	r4, #0
 8002540:	f04f 0500 	mov.w	r5, #0
 8002544:	00dd      	lsls	r5, r3, #3
 8002546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800254a:	00d4      	lsls	r4, r2, #3
 800254c:	4622      	mov	r2, r4
 800254e:	462b      	mov	r3, r5
 8002550:	1814      	adds	r4, r2, r0
 8002552:	653c      	str	r4, [r7, #80]	; 0x50
 8002554:	414b      	adcs	r3, r1
 8002556:	657b      	str	r3, [r7, #84]	; 0x54
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	461a      	mov	r2, r3
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	1891      	adds	r1, r2, r2
 8002564:	61b9      	str	r1, [r7, #24]
 8002566:	415b      	adcs	r3, r3
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800256e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002572:	f7fd fe85 	bl	8000280 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <UART_SetConfig+0x38c>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a67      	ldr	r2, [pc, #412]	; (800272c <UART_SetConfig+0x38c>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 0207 	and.w	r2, r3, #7
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4432      	add	r2, r6
 80025a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025a2:	e0b9      	b.n	8002718 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a6:	461c      	mov	r4, r3
 80025a8:	f04f 0500 	mov.w	r5, #0
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	6139      	str	r1, [r7, #16]
 80025b4:	415b      	adcs	r3, r3
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025bc:	1912      	adds	r2, r2, r4
 80025be:	eb45 0303 	adc.w	r3, r5, r3
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	00d9      	lsls	r1, r3, #3
 80025cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d0:	00d0      	lsls	r0, r2, #3
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	eb12 0804 	adds.w	r8, r2, r4
 80025da:	eb43 0905 	adc.w	r9, r3, r5
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f04f 0100 	mov.w	r1, #0
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	008b      	lsls	r3, r1, #2
 80025f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025f6:	0082      	lsls	r2, r0, #2
 80025f8:	4640      	mov	r0, r8
 80025fa:	4649      	mov	r1, r9
 80025fc:	f7fd fe40 	bl	8000280 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4b49      	ldr	r3, [pc, #292]	; (800272c <UART_SetConfig+0x38c>)
 8002606:	fba3 2302 	umull	r2, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	011e      	lsls	r6, r3, #4
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	4618      	mov	r0, r3
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	1894      	adds	r4, r2, r2
 800261c:	60bc      	str	r4, [r7, #8]
 800261e:	415b      	adcs	r3, r3
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002626:	1812      	adds	r2, r2, r0
 8002628:	eb41 0303 	adc.w	r3, r1, r3
 800262c:	f04f 0400 	mov.w	r4, #0
 8002630:	f04f 0500 	mov.w	r5, #0
 8002634:	00dd      	lsls	r5, r3, #3
 8002636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800263a:	00d4      	lsls	r4, r2, #3
 800263c:	4622      	mov	r2, r4
 800263e:	462b      	mov	r3, r5
 8002640:	1814      	adds	r4, r2, r0
 8002642:	64bc      	str	r4, [r7, #72]	; 0x48
 8002644:	414b      	adcs	r3, r1
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	008b      	lsls	r3, r1, #2
 800265c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002660:	0082      	lsls	r2, r0, #2
 8002662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002666:	f7fd fe0b 	bl	8000280 <__aeabi_uldivmod>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4b2f      	ldr	r3, [pc, #188]	; (800272c <UART_SetConfig+0x38c>)
 8002670:	fba3 1302 	umull	r1, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	2164      	movs	r1, #100	; 0x64
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	3332      	adds	r3, #50	; 0x32
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <UART_SetConfig+0x38c>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268e:	441e      	add	r6, r3
 8002690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002692:	4618      	mov	r0, r3
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	1894      	adds	r4, r2, r2
 800269e:	603c      	str	r4, [r7, #0]
 80026a0:	415b      	adcs	r3, r3
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a8:	1812      	adds	r2, r2, r0
 80026aa:	eb41 0303 	adc.w	r3, r1, r3
 80026ae:	f04f 0400 	mov.w	r4, #0
 80026b2:	f04f 0500 	mov.w	r5, #0
 80026b6:	00dd      	lsls	r5, r3, #3
 80026b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026bc:	00d4      	lsls	r4, r2, #3
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	eb12 0a00 	adds.w	sl, r2, r0
 80026c6:	eb43 0b01 	adc.w	fp, r3, r1
 80026ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	008b      	lsls	r3, r1, #2
 80026de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026e2:	0082      	lsls	r2, r0, #2
 80026e4:	4650      	mov	r0, sl
 80026e6:	4659      	mov	r1, fp
 80026e8:	f7fd fdca 	bl	8000280 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <UART_SetConfig+0x38c>)
 80026f2:	fba3 1302 	umull	r1, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	3332      	adds	r3, #50	; 0x32
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <UART_SetConfig+0x38c>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4432      	add	r2, r6
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	377c      	adds	r7, #124	; 0x7c
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002722:	bf00      	nop
 8002724:	40011000 	.word	0x40011000
 8002728:	40011400 	.word	0x40011400
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <atoi>:
 8002730:	220a      	movs	r2, #10
 8002732:	2100      	movs	r1, #0
 8002734:	f000 b932 	b.w	800299c <strtol>

08002738 <__errno>:
 8002738:	4b01      	ldr	r3, [pc, #4]	; (8002740 <__errno+0x8>)
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000010 	.word	0x20000010

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4d0d      	ldr	r5, [pc, #52]	; (800277c <__libc_init_array+0x38>)
 8002748:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <__libc_init_array+0x3c>)
 800274a:	1b64      	subs	r4, r4, r5
 800274c:	10a4      	asrs	r4, r4, #2
 800274e:	2600      	movs	r6, #0
 8002750:	42a6      	cmp	r6, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	4d0b      	ldr	r5, [pc, #44]	; (8002784 <__libc_init_array+0x40>)
 8002756:	4c0c      	ldr	r4, [pc, #48]	; (8002788 <__libc_init_array+0x44>)
 8002758:	f001 fa9e 	bl	8003c98 <_init>
 800275c:	1b64      	subs	r4, r4, r5
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	2600      	movs	r6, #0
 8002762:	42a6      	cmp	r6, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f855 3b04 	ldr.w	r3, [r5], #4
 800276c:	4798      	blx	r3
 800276e:	3601      	adds	r6, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f855 3b04 	ldr.w	r3, [r5], #4
 8002776:	4798      	blx	r3
 8002778:	3601      	adds	r6, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	08004090 	.word	0x08004090
 8002780:	08004090 	.word	0x08004090
 8002784:	08004090 	.word	0x08004090
 8002788:	08004094 	.word	0x08004094

0800278c <memset>:
 800278c:	4402      	add	r2, r0
 800278e:	4603      	mov	r3, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <siprintf>:
 800279c:	b40e      	push	{r1, r2, r3}
 800279e:	b500      	push	{lr}
 80027a0:	b09c      	sub	sp, #112	; 0x70
 80027a2:	ab1d      	add	r3, sp, #116	; 0x74
 80027a4:	9002      	str	r0, [sp, #8]
 80027a6:	9006      	str	r0, [sp, #24]
 80027a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027ac:	4809      	ldr	r0, [pc, #36]	; (80027d4 <siprintf+0x38>)
 80027ae:	9107      	str	r1, [sp, #28]
 80027b0:	9104      	str	r1, [sp, #16]
 80027b2:	4909      	ldr	r1, [pc, #36]	; (80027d8 <siprintf+0x3c>)
 80027b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80027b8:	9105      	str	r1, [sp, #20]
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	a902      	add	r1, sp, #8
 80027c0:	f000 fa34 	bl	8002c2c <_svfiprintf_r>
 80027c4:	9b02      	ldr	r3, [sp, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	b01c      	add	sp, #112	; 0x70
 80027cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d0:	b003      	add	sp, #12
 80027d2:	4770      	bx	lr
 80027d4:	20000010 	.word	0x20000010
 80027d8:	ffff0208 	.word	0xffff0208

080027dc <strtok>:
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <strtok+0x5c>)
 80027de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027e0:	681e      	ldr	r6, [r3, #0]
 80027e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80027e4:	4605      	mov	r5, r0
 80027e6:	b9fc      	cbnz	r4, 8002828 <strtok+0x4c>
 80027e8:	2050      	movs	r0, #80	; 0x50
 80027ea:	9101      	str	r1, [sp, #4]
 80027ec:	f000 f910 	bl	8002a10 <malloc>
 80027f0:	9901      	ldr	r1, [sp, #4]
 80027f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80027f4:	4602      	mov	r2, r0
 80027f6:	b920      	cbnz	r0, 8002802 <strtok+0x26>
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <strtok+0x60>)
 80027fa:	4811      	ldr	r0, [pc, #68]	; (8002840 <strtok+0x64>)
 80027fc:	2157      	movs	r1, #87	; 0x57
 80027fe:	f000 f8d7 	bl	80029b0 <__assert_func>
 8002802:	e9c0 4400 	strd	r4, r4, [r0]
 8002806:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800280a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800280e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002812:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002816:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800281a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800281e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002822:	6184      	str	r4, [r0, #24]
 8002824:	7704      	strb	r4, [r0, #28]
 8002826:	6244      	str	r4, [r0, #36]	; 0x24
 8002828:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800282a:	2301      	movs	r3, #1
 800282c:	4628      	mov	r0, r5
 800282e:	b002      	add	sp, #8
 8002830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002834:	f000 b806 	b.w	8002844 <__strtok_r>
 8002838:	20000010 	.word	0x20000010
 800283c:	08003e40 	.word	0x08003e40
 8002840:	08003e57 	.word	0x08003e57

08002844 <__strtok_r>:
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	b908      	cbnz	r0, 800284c <__strtok_r+0x8>
 8002848:	6810      	ldr	r0, [r2, #0]
 800284a:	b188      	cbz	r0, 8002870 <__strtok_r+0x2c>
 800284c:	4604      	mov	r4, r0
 800284e:	4620      	mov	r0, r4
 8002850:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002854:	460f      	mov	r7, r1
 8002856:	f817 6b01 	ldrb.w	r6, [r7], #1
 800285a:	b91e      	cbnz	r6, 8002864 <__strtok_r+0x20>
 800285c:	b965      	cbnz	r5, 8002878 <__strtok_r+0x34>
 800285e:	6015      	str	r5, [r2, #0]
 8002860:	4628      	mov	r0, r5
 8002862:	e005      	b.n	8002870 <__strtok_r+0x2c>
 8002864:	42b5      	cmp	r5, r6
 8002866:	d1f6      	bne.n	8002856 <__strtok_r+0x12>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <__strtok_r+0xa>
 800286c:	6014      	str	r4, [r2, #0]
 800286e:	7003      	strb	r3, [r0, #0]
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002872:	461c      	mov	r4, r3
 8002874:	e00c      	b.n	8002890 <__strtok_r+0x4c>
 8002876:	b915      	cbnz	r5, 800287e <__strtok_r+0x3a>
 8002878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800287c:	460e      	mov	r6, r1
 800287e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002882:	42ab      	cmp	r3, r5
 8002884:	d1f7      	bne.n	8002876 <__strtok_r+0x32>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f3      	beq.n	8002872 <__strtok_r+0x2e>
 800288a:	2300      	movs	r3, #0
 800288c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002890:	6014      	str	r4, [r2, #0]
 8002892:	e7ed      	b.n	8002870 <__strtok_r+0x2c>

08002894 <_strtol_l.isra.0>:
 8002894:	2b01      	cmp	r3, #1
 8002896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289a:	d001      	beq.n	80028a0 <_strtol_l.isra.0+0xc>
 800289c:	2b24      	cmp	r3, #36	; 0x24
 800289e:	d906      	bls.n	80028ae <_strtol_l.isra.0+0x1a>
 80028a0:	f7ff ff4a 	bl	8002738 <__errno>
 80028a4:	2316      	movs	r3, #22
 80028a6:	6003      	str	r3, [r0, #0]
 80028a8:	2000      	movs	r0, #0
 80028aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ae:	4f3a      	ldr	r7, [pc, #232]	; (8002998 <_strtol_l.isra.0+0x104>)
 80028b0:	468e      	mov	lr, r1
 80028b2:	4676      	mov	r6, lr
 80028b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80028b8:	5de5      	ldrb	r5, [r4, r7]
 80028ba:	f015 0508 	ands.w	r5, r5, #8
 80028be:	d1f8      	bne.n	80028b2 <_strtol_l.isra.0+0x1e>
 80028c0:	2c2d      	cmp	r4, #45	; 0x2d
 80028c2:	d134      	bne.n	800292e <_strtol_l.isra.0+0x9a>
 80028c4:	f89e 4000 	ldrb.w	r4, [lr]
 80028c8:	f04f 0801 	mov.w	r8, #1
 80028cc:	f106 0e02 	add.w	lr, r6, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d05c      	beq.n	800298e <_strtol_l.isra.0+0xfa>
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d10c      	bne.n	80028f2 <_strtol_l.isra.0+0x5e>
 80028d8:	2c30      	cmp	r4, #48	; 0x30
 80028da:	d10a      	bne.n	80028f2 <_strtol_l.isra.0+0x5e>
 80028dc:	f89e 4000 	ldrb.w	r4, [lr]
 80028e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80028e4:	2c58      	cmp	r4, #88	; 0x58
 80028e6:	d14d      	bne.n	8002984 <_strtol_l.isra.0+0xf0>
 80028e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80028ec:	2310      	movs	r3, #16
 80028ee:	f10e 0e02 	add.w	lr, lr, #2
 80028f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80028f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80028fa:	2600      	movs	r6, #0
 80028fc:	fbbc f9f3 	udiv	r9, ip, r3
 8002900:	4635      	mov	r5, r6
 8002902:	fb03 ca19 	mls	sl, r3, r9, ip
 8002906:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800290a:	2f09      	cmp	r7, #9
 800290c:	d818      	bhi.n	8002940 <_strtol_l.isra.0+0xac>
 800290e:	463c      	mov	r4, r7
 8002910:	42a3      	cmp	r3, r4
 8002912:	dd24      	ble.n	800295e <_strtol_l.isra.0+0xca>
 8002914:	2e00      	cmp	r6, #0
 8002916:	db1f      	blt.n	8002958 <_strtol_l.isra.0+0xc4>
 8002918:	45a9      	cmp	r9, r5
 800291a:	d31d      	bcc.n	8002958 <_strtol_l.isra.0+0xc4>
 800291c:	d101      	bne.n	8002922 <_strtol_l.isra.0+0x8e>
 800291e:	45a2      	cmp	sl, r4
 8002920:	db1a      	blt.n	8002958 <_strtol_l.isra.0+0xc4>
 8002922:	fb05 4503 	mla	r5, r5, r3, r4
 8002926:	2601      	movs	r6, #1
 8002928:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800292c:	e7eb      	b.n	8002906 <_strtol_l.isra.0+0x72>
 800292e:	2c2b      	cmp	r4, #43	; 0x2b
 8002930:	bf08      	it	eq
 8002932:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002936:	46a8      	mov	r8, r5
 8002938:	bf08      	it	eq
 800293a:	f106 0e02 	addeq.w	lr, r6, #2
 800293e:	e7c7      	b.n	80028d0 <_strtol_l.isra.0+0x3c>
 8002940:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002944:	2f19      	cmp	r7, #25
 8002946:	d801      	bhi.n	800294c <_strtol_l.isra.0+0xb8>
 8002948:	3c37      	subs	r4, #55	; 0x37
 800294a:	e7e1      	b.n	8002910 <_strtol_l.isra.0+0x7c>
 800294c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002950:	2f19      	cmp	r7, #25
 8002952:	d804      	bhi.n	800295e <_strtol_l.isra.0+0xca>
 8002954:	3c57      	subs	r4, #87	; 0x57
 8002956:	e7db      	b.n	8002910 <_strtol_l.isra.0+0x7c>
 8002958:	f04f 36ff 	mov.w	r6, #4294967295
 800295c:	e7e4      	b.n	8002928 <_strtol_l.isra.0+0x94>
 800295e:	2e00      	cmp	r6, #0
 8002960:	da05      	bge.n	800296e <_strtol_l.isra.0+0xda>
 8002962:	2322      	movs	r3, #34	; 0x22
 8002964:	6003      	str	r3, [r0, #0]
 8002966:	4665      	mov	r5, ip
 8002968:	b942      	cbnz	r2, 800297c <_strtol_l.isra.0+0xe8>
 800296a:	4628      	mov	r0, r5
 800296c:	e79d      	b.n	80028aa <_strtol_l.isra.0+0x16>
 800296e:	f1b8 0f00 	cmp.w	r8, #0
 8002972:	d000      	beq.n	8002976 <_strtol_l.isra.0+0xe2>
 8002974:	426d      	negs	r5, r5
 8002976:	2a00      	cmp	r2, #0
 8002978:	d0f7      	beq.n	800296a <_strtol_l.isra.0+0xd6>
 800297a:	b10e      	cbz	r6, 8002980 <_strtol_l.isra.0+0xec>
 800297c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002980:	6011      	str	r1, [r2, #0]
 8002982:	e7f2      	b.n	800296a <_strtol_l.isra.0+0xd6>
 8002984:	2430      	movs	r4, #48	; 0x30
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1b3      	bne.n	80028f2 <_strtol_l.isra.0+0x5e>
 800298a:	2308      	movs	r3, #8
 800298c:	e7b1      	b.n	80028f2 <_strtol_l.isra.0+0x5e>
 800298e:	2c30      	cmp	r4, #48	; 0x30
 8002990:	d0a4      	beq.n	80028dc <_strtol_l.isra.0+0x48>
 8002992:	230a      	movs	r3, #10
 8002994:	e7ad      	b.n	80028f2 <_strtol_l.isra.0+0x5e>
 8002996:	bf00      	nop
 8002998:	08003ef5 	.word	0x08003ef5

0800299c <strtol>:
 800299c:	4613      	mov	r3, r2
 800299e:	460a      	mov	r2, r1
 80029a0:	4601      	mov	r1, r0
 80029a2:	4802      	ldr	r0, [pc, #8]	; (80029ac <strtol+0x10>)
 80029a4:	6800      	ldr	r0, [r0, #0]
 80029a6:	f7ff bf75 	b.w	8002894 <_strtol_l.isra.0>
 80029aa:	bf00      	nop
 80029ac:	20000010 	.word	0x20000010

080029b0 <__assert_func>:
 80029b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80029b2:	4614      	mov	r4, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <__assert_func+0x2c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4605      	mov	r5, r0
 80029bc:	68d8      	ldr	r0, [r3, #12]
 80029be:	b14c      	cbz	r4, 80029d4 <__assert_func+0x24>
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <__assert_func+0x30>)
 80029c2:	9100      	str	r1, [sp, #0]
 80029c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80029c8:	4906      	ldr	r1, [pc, #24]	; (80029e4 <__assert_func+0x34>)
 80029ca:	462b      	mov	r3, r5
 80029cc:	f000 f80e 	bl	80029ec <fiprintf>
 80029d0:	f000 fdea 	bl	80035a8 <abort>
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__assert_func+0x38>)
 80029d6:	461c      	mov	r4, r3
 80029d8:	e7f3      	b.n	80029c2 <__assert_func+0x12>
 80029da:	bf00      	nop
 80029dc:	20000010 	.word	0x20000010
 80029e0:	08003eb8 	.word	0x08003eb8
 80029e4:	08003ec5 	.word	0x08003ec5
 80029e8:	08003ef3 	.word	0x08003ef3

080029ec <fiprintf>:
 80029ec:	b40e      	push	{r1, r2, r3}
 80029ee:	b503      	push	{r0, r1, lr}
 80029f0:	4601      	mov	r1, r0
 80029f2:	ab03      	add	r3, sp, #12
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <fiprintf+0x20>)
 80029f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80029fa:	6800      	ldr	r0, [r0, #0]
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	f000 fa3f 	bl	8002e80 <_vfiprintf_r>
 8002a02:	b002      	add	sp, #8
 8002a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a08:	b003      	add	sp, #12
 8002a0a:	4770      	bx	lr
 8002a0c:	20000010 	.word	0x20000010

08002a10 <malloc>:
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <malloc+0xc>)
 8002a12:	4601      	mov	r1, r0
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f000 b853 	b.w	8002ac0 <_malloc_r>
 8002a1a:	bf00      	nop
 8002a1c:	20000010 	.word	0x20000010

08002a20 <_free_r>:
 8002a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a22:	2900      	cmp	r1, #0
 8002a24:	d048      	beq.n	8002ab8 <_free_r+0x98>
 8002a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2a:	9001      	str	r0, [sp, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a32:	bfb8      	it	lt
 8002a34:	18e4      	addlt	r4, r4, r3
 8002a36:	f001 f805 	bl	8003a44 <__malloc_lock>
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <_free_r+0x9c>)
 8002a3c:	9801      	ldr	r0, [sp, #4]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	4615      	mov	r5, r2
 8002a42:	b933      	cbnz	r3, 8002a52 <_free_r+0x32>
 8002a44:	6063      	str	r3, [r4, #4]
 8002a46:	6014      	str	r4, [r2, #0]
 8002a48:	b003      	add	sp, #12
 8002a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a4e:	f000 bfff 	b.w	8003a50 <__malloc_unlock>
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	d90b      	bls.n	8002a6e <_free_r+0x4e>
 8002a56:	6821      	ldr	r1, [r4, #0]
 8002a58:	1862      	adds	r2, r4, r1
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf04      	itt	eq
 8002a5e:	681a      	ldreq	r2, [r3, #0]
 8002a60:	685b      	ldreq	r3, [r3, #4]
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	bf04      	itt	eq
 8002a66:	1852      	addeq	r2, r2, r1
 8002a68:	6022      	streq	r2, [r4, #0]
 8002a6a:	602c      	str	r4, [r5, #0]
 8002a6c:	e7ec      	b.n	8002a48 <_free_r+0x28>
 8002a6e:	461a      	mov	r2, r3
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b10b      	cbz	r3, 8002a78 <_free_r+0x58>
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	d9fa      	bls.n	8002a6e <_free_r+0x4e>
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	1855      	adds	r5, r2, r1
 8002a7c:	42a5      	cmp	r5, r4
 8002a7e:	d10b      	bne.n	8002a98 <_free_r+0x78>
 8002a80:	6824      	ldr	r4, [r4, #0]
 8002a82:	4421      	add	r1, r4
 8002a84:	1854      	adds	r4, r2, r1
 8002a86:	42a3      	cmp	r3, r4
 8002a88:	6011      	str	r1, [r2, #0]
 8002a8a:	d1dd      	bne.n	8002a48 <_free_r+0x28>
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	6053      	str	r3, [r2, #4]
 8002a92:	4421      	add	r1, r4
 8002a94:	6011      	str	r1, [r2, #0]
 8002a96:	e7d7      	b.n	8002a48 <_free_r+0x28>
 8002a98:	d902      	bls.n	8002aa0 <_free_r+0x80>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	6003      	str	r3, [r0, #0]
 8002a9e:	e7d3      	b.n	8002a48 <_free_r+0x28>
 8002aa0:	6825      	ldr	r5, [r4, #0]
 8002aa2:	1961      	adds	r1, r4, r5
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	bf04      	itt	eq
 8002aa8:	6819      	ldreq	r1, [r3, #0]
 8002aaa:	685b      	ldreq	r3, [r3, #4]
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	bf04      	itt	eq
 8002ab0:	1949      	addeq	r1, r1, r5
 8002ab2:	6021      	streq	r1, [r4, #0]
 8002ab4:	6054      	str	r4, [r2, #4]
 8002ab6:	e7c7      	b.n	8002a48 <_free_r+0x28>
 8002ab8:	b003      	add	sp, #12
 8002aba:	bd30      	pop	{r4, r5, pc}
 8002abc:	200000a0 	.word	0x200000a0

08002ac0 <_malloc_r>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	1ccd      	adds	r5, r1, #3
 8002ac4:	f025 0503 	bic.w	r5, r5, #3
 8002ac8:	3508      	adds	r5, #8
 8002aca:	2d0c      	cmp	r5, #12
 8002acc:	bf38      	it	cc
 8002ace:	250c      	movcc	r5, #12
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	db01      	blt.n	8002ada <_malloc_r+0x1a>
 8002ad6:	42a9      	cmp	r1, r5
 8002ad8:	d903      	bls.n	8002ae2 <_malloc_r+0x22>
 8002ada:	230c      	movs	r3, #12
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	2000      	movs	r0, #0
 8002ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae2:	f000 ffaf 	bl	8003a44 <__malloc_lock>
 8002ae6:	4921      	ldr	r1, [pc, #132]	; (8002b6c <_malloc_r+0xac>)
 8002ae8:	680a      	ldr	r2, [r1, #0]
 8002aea:	4614      	mov	r4, r2
 8002aec:	b99c      	cbnz	r4, 8002b16 <_malloc_r+0x56>
 8002aee:	4f20      	ldr	r7, [pc, #128]	; (8002b70 <_malloc_r+0xb0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b923      	cbnz	r3, 8002afe <_malloc_r+0x3e>
 8002af4:	4621      	mov	r1, r4
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 fc86 	bl	8003408 <_sbrk_r>
 8002afc:	6038      	str	r0, [r7, #0]
 8002afe:	4629      	mov	r1, r5
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 fc81 	bl	8003408 <_sbrk_r>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	d123      	bne.n	8002b52 <_malloc_r+0x92>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	6033      	str	r3, [r6, #0]
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f000 ff9e 	bl	8003a50 <__malloc_unlock>
 8002b14:	e7e3      	b.n	8002ade <_malloc_r+0x1e>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	1b5b      	subs	r3, r3, r5
 8002b1a:	d417      	bmi.n	8002b4c <_malloc_r+0x8c>
 8002b1c:	2b0b      	cmp	r3, #11
 8002b1e:	d903      	bls.n	8002b28 <_malloc_r+0x68>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	441c      	add	r4, r3
 8002b24:	6025      	str	r5, [r4, #0]
 8002b26:	e004      	b.n	8002b32 <_malloc_r+0x72>
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	42a2      	cmp	r2, r4
 8002b2c:	bf0c      	ite	eq
 8002b2e:	600b      	streq	r3, [r1, #0]
 8002b30:	6053      	strne	r3, [r2, #4]
 8002b32:	4630      	mov	r0, r6
 8002b34:	f000 ff8c 	bl	8003a50 <__malloc_unlock>
 8002b38:	f104 000b 	add.w	r0, r4, #11
 8002b3c:	1d23      	adds	r3, r4, #4
 8002b3e:	f020 0007 	bic.w	r0, r0, #7
 8002b42:	1ac2      	subs	r2, r0, r3
 8002b44:	d0cc      	beq.n	8002ae0 <_malloc_r+0x20>
 8002b46:	1a1b      	subs	r3, r3, r0
 8002b48:	50a3      	str	r3, [r4, r2]
 8002b4a:	e7c9      	b.n	8002ae0 <_malloc_r+0x20>
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	6864      	ldr	r4, [r4, #4]
 8002b50:	e7cc      	b.n	8002aec <_malloc_r+0x2c>
 8002b52:	1cc4      	adds	r4, r0, #3
 8002b54:	f024 0403 	bic.w	r4, r4, #3
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d0e3      	beq.n	8002b24 <_malloc_r+0x64>
 8002b5c:	1a21      	subs	r1, r4, r0
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f000 fc52 	bl	8003408 <_sbrk_r>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d1dd      	bne.n	8002b24 <_malloc_r+0x64>
 8002b68:	e7cf      	b.n	8002b0a <_malloc_r+0x4a>
 8002b6a:	bf00      	nop
 8002b6c:	200000a0 	.word	0x200000a0
 8002b70:	200000a4 	.word	0x200000a4

08002b74 <__ssputs_r>:
 8002b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b78:	688e      	ldr	r6, [r1, #8]
 8002b7a:	429e      	cmp	r6, r3
 8002b7c:	4682      	mov	sl, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	4690      	mov	r8, r2
 8002b82:	461f      	mov	r7, r3
 8002b84:	d838      	bhi.n	8002bf8 <__ssputs_r+0x84>
 8002b86:	898a      	ldrh	r2, [r1, #12]
 8002b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b8c:	d032      	beq.n	8002bf4 <__ssputs_r+0x80>
 8002b8e:	6825      	ldr	r5, [r4, #0]
 8002b90:	6909      	ldr	r1, [r1, #16]
 8002b92:	eba5 0901 	sub.w	r9, r5, r1
 8002b96:	6965      	ldr	r5, [r4, #20]
 8002b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	444b      	add	r3, r9
 8002ba4:	106d      	asrs	r5, r5, #1
 8002ba6:	429d      	cmp	r5, r3
 8002ba8:	bf38      	it	cc
 8002baa:	461d      	movcc	r5, r3
 8002bac:	0553      	lsls	r3, r2, #21
 8002bae:	d531      	bpl.n	8002c14 <__ssputs_r+0xa0>
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7ff ff85 	bl	8002ac0 <_malloc_r>
 8002bb6:	4606      	mov	r6, r0
 8002bb8:	b950      	cbnz	r0, 8002bd0 <__ssputs_r+0x5c>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	f8ca 3000 	str.w	r3, [sl]
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	f000 ff0e 	bl	80039f4 <memcpy>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be2:	81a3      	strh	r3, [r4, #12]
 8002be4:	6126      	str	r6, [r4, #16]
 8002be6:	6165      	str	r5, [r4, #20]
 8002be8:	444e      	add	r6, r9
 8002bea:	eba5 0509 	sub.w	r5, r5, r9
 8002bee:	6026      	str	r6, [r4, #0]
 8002bf0:	60a5      	str	r5, [r4, #8]
 8002bf2:	463e      	mov	r6, r7
 8002bf4:	42be      	cmp	r6, r7
 8002bf6:	d900      	bls.n	8002bfa <__ssputs_r+0x86>
 8002bf8:	463e      	mov	r6, r7
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	4641      	mov	r1, r8
 8002c00:	f000 ff06 	bl	8003a10 <memmove>
 8002c04:	68a3      	ldr	r3, [r4, #8]
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	1b9b      	subs	r3, r3, r6
 8002c0a:	4432      	add	r2, r6
 8002c0c:	60a3      	str	r3, [r4, #8]
 8002c0e:	6022      	str	r2, [r4, #0]
 8002c10:	2000      	movs	r0, #0
 8002c12:	e7db      	b.n	8002bcc <__ssputs_r+0x58>
 8002c14:	462a      	mov	r2, r5
 8002c16:	f000 ff21 	bl	8003a5c <_realloc_r>
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d1e1      	bne.n	8002be4 <__ssputs_r+0x70>
 8002c20:	6921      	ldr	r1, [r4, #16]
 8002c22:	4650      	mov	r0, sl
 8002c24:	f7ff fefc 	bl	8002a20 <_free_r>
 8002c28:	e7c7      	b.n	8002bba <__ssputs_r+0x46>
	...

08002c2c <_svfiprintf_r>:
 8002c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c30:	4698      	mov	r8, r3
 8002c32:	898b      	ldrh	r3, [r1, #12]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	b09d      	sub	sp, #116	; 0x74
 8002c38:	4607      	mov	r7, r0
 8002c3a:	460d      	mov	r5, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	d50e      	bpl.n	8002c5e <_svfiprintf_r+0x32>
 8002c40:	690b      	ldr	r3, [r1, #16]
 8002c42:	b963      	cbnz	r3, 8002c5e <_svfiprintf_r+0x32>
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	f7ff ff3b 	bl	8002ac0 <_malloc_r>
 8002c4a:	6028      	str	r0, [r5, #0]
 8002c4c:	6128      	str	r0, [r5, #16]
 8002c4e:	b920      	cbnz	r0, 8002c5a <_svfiprintf_r+0x2e>
 8002c50:	230c      	movs	r3, #12
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	e0d1      	b.n	8002dfe <_svfiprintf_r+0x1d2>
 8002c5a:	2340      	movs	r3, #64	; 0x40
 8002c5c:	616b      	str	r3, [r5, #20]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9309      	str	r3, [sp, #36]	; 0x24
 8002c62:	2320      	movs	r3, #32
 8002c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c6c:	2330      	movs	r3, #48	; 0x30
 8002c6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e18 <_svfiprintf_r+0x1ec>
 8002c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c76:	f04f 0901 	mov.w	r9, #1
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	469a      	mov	sl, r3
 8002c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c82:	b10a      	cbz	r2, 8002c88 <_svfiprintf_r+0x5c>
 8002c84:	2a25      	cmp	r2, #37	; 0x25
 8002c86:	d1f9      	bne.n	8002c7c <_svfiprintf_r+0x50>
 8002c88:	ebba 0b04 	subs.w	fp, sl, r4
 8002c8c:	d00b      	beq.n	8002ca6 <_svfiprintf_r+0x7a>
 8002c8e:	465b      	mov	r3, fp
 8002c90:	4622      	mov	r2, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	4638      	mov	r0, r7
 8002c96:	f7ff ff6d 	bl	8002b74 <__ssputs_r>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	f000 80aa 	beq.w	8002df4 <_svfiprintf_r+0x1c8>
 8002ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ca2:	445a      	add	r2, fp
 8002ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80a2 	beq.w	8002df4 <_svfiprintf_r+0x1c8>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cba:	f10a 0a01 	add.w	sl, sl, #1
 8002cbe:	9304      	str	r3, [sp, #16]
 8002cc0:	9307      	str	r3, [sp, #28]
 8002cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc8:	4654      	mov	r4, sl
 8002cca:	2205      	movs	r2, #5
 8002ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd0:	4851      	ldr	r0, [pc, #324]	; (8002e18 <_svfiprintf_r+0x1ec>)
 8002cd2:	f7fd fa85 	bl	80001e0 <memchr>
 8002cd6:	9a04      	ldr	r2, [sp, #16]
 8002cd8:	b9d8      	cbnz	r0, 8002d12 <_svfiprintf_r+0xe6>
 8002cda:	06d0      	lsls	r0, r2, #27
 8002cdc:	bf44      	itt	mi
 8002cde:	2320      	movmi	r3, #32
 8002ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ce4:	0711      	lsls	r1, r2, #28
 8002ce6:	bf44      	itt	mi
 8002ce8:	232b      	movmi	r3, #43	; 0x2b
 8002cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cee:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf4:	d015      	beq.n	8002d22 <_svfiprintf_r+0xf6>
 8002cf6:	9a07      	ldr	r2, [sp, #28]
 8002cf8:	4654      	mov	r4, sl
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f04f 0c0a 	mov.w	ip, #10
 8002d00:	4621      	mov	r1, r4
 8002d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d06:	3b30      	subs	r3, #48	; 0x30
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	d94e      	bls.n	8002daa <_svfiprintf_r+0x17e>
 8002d0c:	b1b0      	cbz	r0, 8002d3c <_svfiprintf_r+0x110>
 8002d0e:	9207      	str	r2, [sp, #28]
 8002d10:	e014      	b.n	8002d3c <_svfiprintf_r+0x110>
 8002d12:	eba0 0308 	sub.w	r3, r0, r8
 8002d16:	fa09 f303 	lsl.w	r3, r9, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	9304      	str	r3, [sp, #16]
 8002d1e:	46a2      	mov	sl, r4
 8002d20:	e7d2      	b.n	8002cc8 <_svfiprintf_r+0x9c>
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	1d19      	adds	r1, r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	9103      	str	r1, [sp, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bfbb      	ittet	lt
 8002d2e:	425b      	neglt	r3, r3
 8002d30:	f042 0202 	orrlt.w	r2, r2, #2
 8002d34:	9307      	strge	r3, [sp, #28]
 8002d36:	9307      	strlt	r3, [sp, #28]
 8002d38:	bfb8      	it	lt
 8002d3a:	9204      	strlt	r2, [sp, #16]
 8002d3c:	7823      	ldrb	r3, [r4, #0]
 8002d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d40:	d10c      	bne.n	8002d5c <_svfiprintf_r+0x130>
 8002d42:	7863      	ldrb	r3, [r4, #1]
 8002d44:	2b2a      	cmp	r3, #42	; 0x2a
 8002d46:	d135      	bne.n	8002db4 <_svfiprintf_r+0x188>
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	1d1a      	adds	r2, r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	9203      	str	r2, [sp, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bfb8      	it	lt
 8002d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d58:	3402      	adds	r4, #2
 8002d5a:	9305      	str	r3, [sp, #20]
 8002d5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e28 <_svfiprintf_r+0x1fc>
 8002d60:	7821      	ldrb	r1, [r4, #0]
 8002d62:	2203      	movs	r2, #3
 8002d64:	4650      	mov	r0, sl
 8002d66:	f7fd fa3b 	bl	80001e0 <memchr>
 8002d6a:	b140      	cbz	r0, 8002d7e <_svfiprintf_r+0x152>
 8002d6c:	2340      	movs	r3, #64	; 0x40
 8002d6e:	eba0 000a 	sub.w	r0, r0, sl
 8002d72:	fa03 f000 	lsl.w	r0, r3, r0
 8002d76:	9b04      	ldr	r3, [sp, #16]
 8002d78:	4303      	orrs	r3, r0
 8002d7a:	3401      	adds	r4, #1
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d82:	4826      	ldr	r0, [pc, #152]	; (8002e1c <_svfiprintf_r+0x1f0>)
 8002d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d88:	2206      	movs	r2, #6
 8002d8a:	f7fd fa29 	bl	80001e0 <memchr>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d038      	beq.n	8002e04 <_svfiprintf_r+0x1d8>
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <_svfiprintf_r+0x1f4>)
 8002d94:	bb1b      	cbnz	r3, 8002dde <_svfiprintf_r+0x1b2>
 8002d96:	9b03      	ldr	r3, [sp, #12]
 8002d98:	3307      	adds	r3, #7
 8002d9a:	f023 0307 	bic.w	r3, r3, #7
 8002d9e:	3308      	adds	r3, #8
 8002da0:	9303      	str	r3, [sp, #12]
 8002da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002da4:	4433      	add	r3, r6
 8002da6:	9309      	str	r3, [sp, #36]	; 0x24
 8002da8:	e767      	b.n	8002c7a <_svfiprintf_r+0x4e>
 8002daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dae:	460c      	mov	r4, r1
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7a5      	b.n	8002d00 <_svfiprintf_r+0xd4>
 8002db4:	2300      	movs	r3, #0
 8002db6:	3401      	adds	r4, #1
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0c0a 	mov.w	ip, #10
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dc6:	3a30      	subs	r2, #48	; 0x30
 8002dc8:	2a09      	cmp	r2, #9
 8002dca:	d903      	bls.n	8002dd4 <_svfiprintf_r+0x1a8>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0c5      	beq.n	8002d5c <_svfiprintf_r+0x130>
 8002dd0:	9105      	str	r1, [sp, #20]
 8002dd2:	e7c3      	b.n	8002d5c <_svfiprintf_r+0x130>
 8002dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dd8:	4604      	mov	r4, r0
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e7f0      	b.n	8002dc0 <_svfiprintf_r+0x194>
 8002dde:	ab03      	add	r3, sp, #12
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	462a      	mov	r2, r5
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <_svfiprintf_r+0x1f8>)
 8002de6:	a904      	add	r1, sp, #16
 8002de8:	4638      	mov	r0, r7
 8002dea:	f3af 8000 	nop.w
 8002dee:	1c42      	adds	r2, r0, #1
 8002df0:	4606      	mov	r6, r0
 8002df2:	d1d6      	bne.n	8002da2 <_svfiprintf_r+0x176>
 8002df4:	89ab      	ldrh	r3, [r5, #12]
 8002df6:	065b      	lsls	r3, r3, #25
 8002df8:	f53f af2c 	bmi.w	8002c54 <_svfiprintf_r+0x28>
 8002dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dfe:	b01d      	add	sp, #116	; 0x74
 8002e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e04:	ab03      	add	r3, sp, #12
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	462a      	mov	r2, r5
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <_svfiprintf_r+0x1f8>)
 8002e0c:	a904      	add	r1, sp, #16
 8002e0e:	4638      	mov	r0, r7
 8002e10:	f000 f9d4 	bl	80031bc <_printf_i>
 8002e14:	e7eb      	b.n	8002dee <_svfiprintf_r+0x1c2>
 8002e16:	bf00      	nop
 8002e18:	08003ff5 	.word	0x08003ff5
 8002e1c:	08003fff 	.word	0x08003fff
 8002e20:	00000000 	.word	0x00000000
 8002e24:	08002b75 	.word	0x08002b75
 8002e28:	08003ffb 	.word	0x08003ffb

08002e2c <__sfputc_r>:
 8002e2c:	6893      	ldr	r3, [r2, #8]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	b410      	push	{r4}
 8002e34:	6093      	str	r3, [r2, #8]
 8002e36:	da08      	bge.n	8002e4a <__sfputc_r+0x1e>
 8002e38:	6994      	ldr	r4, [r2, #24]
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	db01      	blt.n	8002e42 <__sfputc_r+0x16>
 8002e3e:	290a      	cmp	r1, #10
 8002e40:	d103      	bne.n	8002e4a <__sfputc_r+0x1e>
 8002e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e46:	f000 baef 	b.w	8003428 <__swbuf_r>
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	1c58      	adds	r0, r3, #1
 8002e4e:	6010      	str	r0, [r2, #0]
 8002e50:	7019      	strb	r1, [r3, #0]
 8002e52:	4608      	mov	r0, r1
 8002e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <__sfputs_r>:
 8002e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	460f      	mov	r7, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	18d5      	adds	r5, r2, r3
 8002e64:	42ac      	cmp	r4, r5
 8002e66:	d101      	bne.n	8002e6c <__sfputs_r+0x12>
 8002e68:	2000      	movs	r0, #0
 8002e6a:	e007      	b.n	8002e7c <__sfputs_r+0x22>
 8002e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e70:	463a      	mov	r2, r7
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7ff ffda 	bl	8002e2c <__sfputc_r>
 8002e78:	1c43      	adds	r3, r0, #1
 8002e7a:	d1f3      	bne.n	8002e64 <__sfputs_r+0xa>
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e80 <_vfiprintf_r>:
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	460d      	mov	r5, r1
 8002e86:	b09d      	sub	sp, #116	; 0x74
 8002e88:	4614      	mov	r4, r2
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	b118      	cbz	r0, 8002e98 <_vfiprintf_r+0x18>
 8002e90:	6983      	ldr	r3, [r0, #24]
 8002e92:	b90b      	cbnz	r3, 8002e98 <_vfiprintf_r+0x18>
 8002e94:	f000 fcaa 	bl	80037ec <__sinit>
 8002e98:	4b89      	ldr	r3, [pc, #548]	; (80030c0 <_vfiprintf_r+0x240>)
 8002e9a:	429d      	cmp	r5, r3
 8002e9c:	d11b      	bne.n	8002ed6 <_vfiprintf_r+0x56>
 8002e9e:	6875      	ldr	r5, [r6, #4]
 8002ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ea2:	07d9      	lsls	r1, r3, #31
 8002ea4:	d405      	bmi.n	8002eb2 <_vfiprintf_r+0x32>
 8002ea6:	89ab      	ldrh	r3, [r5, #12]
 8002ea8:	059a      	lsls	r2, r3, #22
 8002eaa:	d402      	bmi.n	8002eb2 <_vfiprintf_r+0x32>
 8002eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eae:	f000 fd3b 	bl	8003928 <__retarget_lock_acquire_recursive>
 8002eb2:	89ab      	ldrh	r3, [r5, #12]
 8002eb4:	071b      	lsls	r3, r3, #28
 8002eb6:	d501      	bpl.n	8002ebc <_vfiprintf_r+0x3c>
 8002eb8:	692b      	ldr	r3, [r5, #16]
 8002eba:	b9eb      	cbnz	r3, 8002ef8 <_vfiprintf_r+0x78>
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	f000 fb04 	bl	80034cc <__swsetup_r>
 8002ec4:	b1c0      	cbz	r0, 8002ef8 <_vfiprintf_r+0x78>
 8002ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ec8:	07dc      	lsls	r4, r3, #31
 8002eca:	d50e      	bpl.n	8002eea <_vfiprintf_r+0x6a>
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	b01d      	add	sp, #116	; 0x74
 8002ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <_vfiprintf_r+0x244>)
 8002ed8:	429d      	cmp	r5, r3
 8002eda:	d101      	bne.n	8002ee0 <_vfiprintf_r+0x60>
 8002edc:	68b5      	ldr	r5, [r6, #8]
 8002ede:	e7df      	b.n	8002ea0 <_vfiprintf_r+0x20>
 8002ee0:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <_vfiprintf_r+0x248>)
 8002ee2:	429d      	cmp	r5, r3
 8002ee4:	bf08      	it	eq
 8002ee6:	68f5      	ldreq	r5, [r6, #12]
 8002ee8:	e7da      	b.n	8002ea0 <_vfiprintf_r+0x20>
 8002eea:	89ab      	ldrh	r3, [r5, #12]
 8002eec:	0598      	lsls	r0, r3, #22
 8002eee:	d4ed      	bmi.n	8002ecc <_vfiprintf_r+0x4c>
 8002ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ef2:	f000 fd1a 	bl	800392a <__retarget_lock_release_recursive>
 8002ef6:	e7e9      	b.n	8002ecc <_vfiprintf_r+0x4c>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	2320      	movs	r3, #32
 8002efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f06:	2330      	movs	r3, #48	; 0x30
 8002f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80030cc <_vfiprintf_r+0x24c>
 8002f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f10:	f04f 0901 	mov.w	r9, #1
 8002f14:	4623      	mov	r3, r4
 8002f16:	469a      	mov	sl, r3
 8002f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f1c:	b10a      	cbz	r2, 8002f22 <_vfiprintf_r+0xa2>
 8002f1e:	2a25      	cmp	r2, #37	; 0x25
 8002f20:	d1f9      	bne.n	8002f16 <_vfiprintf_r+0x96>
 8002f22:	ebba 0b04 	subs.w	fp, sl, r4
 8002f26:	d00b      	beq.n	8002f40 <_vfiprintf_r+0xc0>
 8002f28:	465b      	mov	r3, fp
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f7ff ff93 	bl	8002e5a <__sfputs_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	f000 80aa 	beq.w	800308e <_vfiprintf_r+0x20e>
 8002f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f3c:	445a      	add	r2, fp
 8002f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f40:	f89a 3000 	ldrb.w	r3, [sl]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a2 	beq.w	800308e <_vfiprintf_r+0x20e>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f54:	f10a 0a01 	add.w	sl, sl, #1
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	9307      	str	r3, [sp, #28]
 8002f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f60:	931a      	str	r3, [sp, #104]	; 0x68
 8002f62:	4654      	mov	r4, sl
 8002f64:	2205      	movs	r2, #5
 8002f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f6a:	4858      	ldr	r0, [pc, #352]	; (80030cc <_vfiprintf_r+0x24c>)
 8002f6c:	f7fd f938 	bl	80001e0 <memchr>
 8002f70:	9a04      	ldr	r2, [sp, #16]
 8002f72:	b9d8      	cbnz	r0, 8002fac <_vfiprintf_r+0x12c>
 8002f74:	06d1      	lsls	r1, r2, #27
 8002f76:	bf44      	itt	mi
 8002f78:	2320      	movmi	r3, #32
 8002f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7e:	0713      	lsls	r3, r2, #28
 8002f80:	bf44      	itt	mi
 8002f82:	232b      	movmi	r3, #43	; 0x2b
 8002f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f88:	f89a 3000 	ldrb.w	r3, [sl]
 8002f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f8e:	d015      	beq.n	8002fbc <_vfiprintf_r+0x13c>
 8002f90:	9a07      	ldr	r2, [sp, #28]
 8002f92:	4654      	mov	r4, sl
 8002f94:	2000      	movs	r0, #0
 8002f96:	f04f 0c0a 	mov.w	ip, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa0:	3b30      	subs	r3, #48	; 0x30
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	d94e      	bls.n	8003044 <_vfiprintf_r+0x1c4>
 8002fa6:	b1b0      	cbz	r0, 8002fd6 <_vfiprintf_r+0x156>
 8002fa8:	9207      	str	r2, [sp, #28]
 8002faa:	e014      	b.n	8002fd6 <_vfiprintf_r+0x156>
 8002fac:	eba0 0308 	sub.w	r3, r0, r8
 8002fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	9304      	str	r3, [sp, #16]
 8002fb8:	46a2      	mov	sl, r4
 8002fba:	e7d2      	b.n	8002f62 <_vfiprintf_r+0xe2>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	1d19      	adds	r1, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9103      	str	r1, [sp, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bfbb      	ittet	lt
 8002fc8:	425b      	neglt	r3, r3
 8002fca:	f042 0202 	orrlt.w	r2, r2, #2
 8002fce:	9307      	strge	r3, [sp, #28]
 8002fd0:	9307      	strlt	r3, [sp, #28]
 8002fd2:	bfb8      	it	lt
 8002fd4:	9204      	strlt	r2, [sp, #16]
 8002fd6:	7823      	ldrb	r3, [r4, #0]
 8002fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fda:	d10c      	bne.n	8002ff6 <_vfiprintf_r+0x176>
 8002fdc:	7863      	ldrb	r3, [r4, #1]
 8002fde:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe0:	d135      	bne.n	800304e <_vfiprintf_r+0x1ce>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	9203      	str	r2, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfb8      	it	lt
 8002fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ff2:	3402      	adds	r4, #2
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80030dc <_vfiprintf_r+0x25c>
 8002ffa:	7821      	ldrb	r1, [r4, #0]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4650      	mov	r0, sl
 8003000:	f7fd f8ee 	bl	80001e0 <memchr>
 8003004:	b140      	cbz	r0, 8003018 <_vfiprintf_r+0x198>
 8003006:	2340      	movs	r3, #64	; 0x40
 8003008:	eba0 000a 	sub.w	r0, r0, sl
 800300c:	fa03 f000 	lsl.w	r0, r3, r0
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	4303      	orrs	r3, r0
 8003014:	3401      	adds	r4, #1
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301c:	482c      	ldr	r0, [pc, #176]	; (80030d0 <_vfiprintf_r+0x250>)
 800301e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003022:	2206      	movs	r2, #6
 8003024:	f7fd f8dc 	bl	80001e0 <memchr>
 8003028:	2800      	cmp	r0, #0
 800302a:	d03f      	beq.n	80030ac <_vfiprintf_r+0x22c>
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <_vfiprintf_r+0x254>)
 800302e:	bb1b      	cbnz	r3, 8003078 <_vfiprintf_r+0x1f8>
 8003030:	9b03      	ldr	r3, [sp, #12]
 8003032:	3307      	adds	r3, #7
 8003034:	f023 0307 	bic.w	r3, r3, #7
 8003038:	3308      	adds	r3, #8
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303e:	443b      	add	r3, r7
 8003040:	9309      	str	r3, [sp, #36]	; 0x24
 8003042:	e767      	b.n	8002f14 <_vfiprintf_r+0x94>
 8003044:	fb0c 3202 	mla	r2, ip, r2, r3
 8003048:	460c      	mov	r4, r1
 800304a:	2001      	movs	r0, #1
 800304c:	e7a5      	b.n	8002f9a <_vfiprintf_r+0x11a>
 800304e:	2300      	movs	r3, #0
 8003050:	3401      	adds	r4, #1
 8003052:	9305      	str	r3, [sp, #20]
 8003054:	4619      	mov	r1, r3
 8003056:	f04f 0c0a 	mov.w	ip, #10
 800305a:	4620      	mov	r0, r4
 800305c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003060:	3a30      	subs	r2, #48	; 0x30
 8003062:	2a09      	cmp	r2, #9
 8003064:	d903      	bls.n	800306e <_vfiprintf_r+0x1ee>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0c5      	beq.n	8002ff6 <_vfiprintf_r+0x176>
 800306a:	9105      	str	r1, [sp, #20]
 800306c:	e7c3      	b.n	8002ff6 <_vfiprintf_r+0x176>
 800306e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003072:	4604      	mov	r4, r0
 8003074:	2301      	movs	r3, #1
 8003076:	e7f0      	b.n	800305a <_vfiprintf_r+0x1da>
 8003078:	ab03      	add	r3, sp, #12
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	462a      	mov	r2, r5
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <_vfiprintf_r+0x258>)
 8003080:	a904      	add	r1, sp, #16
 8003082:	4630      	mov	r0, r6
 8003084:	f3af 8000 	nop.w
 8003088:	4607      	mov	r7, r0
 800308a:	1c78      	adds	r0, r7, #1
 800308c:	d1d6      	bne.n	800303c <_vfiprintf_r+0x1bc>
 800308e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003090:	07d9      	lsls	r1, r3, #31
 8003092:	d405      	bmi.n	80030a0 <_vfiprintf_r+0x220>
 8003094:	89ab      	ldrh	r3, [r5, #12]
 8003096:	059a      	lsls	r2, r3, #22
 8003098:	d402      	bmi.n	80030a0 <_vfiprintf_r+0x220>
 800309a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800309c:	f000 fc45 	bl	800392a <__retarget_lock_release_recursive>
 80030a0:	89ab      	ldrh	r3, [r5, #12]
 80030a2:	065b      	lsls	r3, r3, #25
 80030a4:	f53f af12 	bmi.w	8002ecc <_vfiprintf_r+0x4c>
 80030a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030aa:	e711      	b.n	8002ed0 <_vfiprintf_r+0x50>
 80030ac:	ab03      	add	r3, sp, #12
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	462a      	mov	r2, r5
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <_vfiprintf_r+0x258>)
 80030b4:	a904      	add	r1, sp, #16
 80030b6:	4630      	mov	r0, r6
 80030b8:	f000 f880 	bl	80031bc <_printf_i>
 80030bc:	e7e4      	b.n	8003088 <_vfiprintf_r+0x208>
 80030be:	bf00      	nop
 80030c0:	08004048 	.word	0x08004048
 80030c4:	08004068 	.word	0x08004068
 80030c8:	08004028 	.word	0x08004028
 80030cc:	08003ff5 	.word	0x08003ff5
 80030d0:	08003fff 	.word	0x08003fff
 80030d4:	00000000 	.word	0x00000000
 80030d8:	08002e5b 	.word	0x08002e5b
 80030dc:	08003ffb 	.word	0x08003ffb

080030e0 <_printf_common>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	4616      	mov	r6, r2
 80030e6:	4699      	mov	r9, r3
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bfb8      	it	lt
 80030f4:	4613      	movlt	r3, r2
 80030f6:	6033      	str	r3, [r6, #0]
 80030f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030fc:	4607      	mov	r7, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	b10a      	cbz	r2, 8003106 <_printf_common+0x26>
 8003102:	3301      	adds	r3, #1
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	0699      	lsls	r1, r3, #26
 800310a:	bf42      	ittt	mi
 800310c:	6833      	ldrmi	r3, [r6, #0]
 800310e:	3302      	addmi	r3, #2
 8003110:	6033      	strmi	r3, [r6, #0]
 8003112:	6825      	ldr	r5, [r4, #0]
 8003114:	f015 0506 	ands.w	r5, r5, #6
 8003118:	d106      	bne.n	8003128 <_printf_common+0x48>
 800311a:	f104 0a19 	add.w	sl, r4, #25
 800311e:	68e3      	ldr	r3, [r4, #12]
 8003120:	6832      	ldr	r2, [r6, #0]
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	42ab      	cmp	r3, r5
 8003126:	dc26      	bgt.n	8003176 <_printf_common+0x96>
 8003128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800312c:	1e13      	subs	r3, r2, #0
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	bf18      	it	ne
 8003132:	2301      	movne	r3, #1
 8003134:	0692      	lsls	r2, r2, #26
 8003136:	d42b      	bmi.n	8003190 <_printf_common+0xb0>
 8003138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800313c:	4649      	mov	r1, r9
 800313e:	4638      	mov	r0, r7
 8003140:	47c0      	blx	r8
 8003142:	3001      	adds	r0, #1
 8003144:	d01e      	beq.n	8003184 <_printf_common+0xa4>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	68e5      	ldr	r5, [r4, #12]
 800314a:	6832      	ldr	r2, [r6, #0]
 800314c:	f003 0306 	and.w	r3, r3, #6
 8003150:	2b04      	cmp	r3, #4
 8003152:	bf08      	it	eq
 8003154:	1aad      	subeq	r5, r5, r2
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	bf0c      	ite	eq
 800315c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003160:	2500      	movne	r5, #0
 8003162:	4293      	cmp	r3, r2
 8003164:	bfc4      	itt	gt
 8003166:	1a9b      	subgt	r3, r3, r2
 8003168:	18ed      	addgt	r5, r5, r3
 800316a:	2600      	movs	r6, #0
 800316c:	341a      	adds	r4, #26
 800316e:	42b5      	cmp	r5, r6
 8003170:	d11a      	bne.n	80031a8 <_printf_common+0xc8>
 8003172:	2000      	movs	r0, #0
 8003174:	e008      	b.n	8003188 <_printf_common+0xa8>
 8003176:	2301      	movs	r3, #1
 8003178:	4652      	mov	r2, sl
 800317a:	4649      	mov	r1, r9
 800317c:	4638      	mov	r0, r7
 800317e:	47c0      	blx	r8
 8003180:	3001      	adds	r0, #1
 8003182:	d103      	bne.n	800318c <_printf_common+0xac>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318c:	3501      	adds	r5, #1
 800318e:	e7c6      	b.n	800311e <_printf_common+0x3e>
 8003190:	18e1      	adds	r1, r4, r3
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	2030      	movs	r0, #48	; 0x30
 8003196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800319a:	4422      	add	r2, r4
 800319c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a4:	3302      	adds	r3, #2
 80031a6:	e7c7      	b.n	8003138 <_printf_common+0x58>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4622      	mov	r2, r4
 80031ac:	4649      	mov	r1, r9
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c0      	blx	r8
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0e6      	beq.n	8003184 <_printf_common+0xa4>
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7d9      	b.n	800316e <_printf_common+0x8e>
	...

080031bc <_printf_i>:
 80031bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	460c      	mov	r4, r1
 80031c2:	4691      	mov	r9, r2
 80031c4:	7e27      	ldrb	r7, [r4, #24]
 80031c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031c8:	2f78      	cmp	r7, #120	; 0x78
 80031ca:	4680      	mov	r8, r0
 80031cc:	469a      	mov	sl, r3
 80031ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031d2:	d807      	bhi.n	80031e4 <_printf_i+0x28>
 80031d4:	2f62      	cmp	r7, #98	; 0x62
 80031d6:	d80a      	bhi.n	80031ee <_printf_i+0x32>
 80031d8:	2f00      	cmp	r7, #0
 80031da:	f000 80d8 	beq.w	800338e <_printf_i+0x1d2>
 80031de:	2f58      	cmp	r7, #88	; 0x58
 80031e0:	f000 80a3 	beq.w	800332a <_printf_i+0x16e>
 80031e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031ec:	e03a      	b.n	8003264 <_printf_i+0xa8>
 80031ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031f2:	2b15      	cmp	r3, #21
 80031f4:	d8f6      	bhi.n	80031e4 <_printf_i+0x28>
 80031f6:	a001      	add	r0, pc, #4	; (adr r0, 80031fc <_printf_i+0x40>)
 80031f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003269 	.word	0x08003269
 8003204:	080031e5 	.word	0x080031e5
 8003208:	080031e5 	.word	0x080031e5
 800320c:	080031e5 	.word	0x080031e5
 8003210:	080031e5 	.word	0x080031e5
 8003214:	08003269 	.word	0x08003269
 8003218:	080031e5 	.word	0x080031e5
 800321c:	080031e5 	.word	0x080031e5
 8003220:	080031e5 	.word	0x080031e5
 8003224:	080031e5 	.word	0x080031e5
 8003228:	08003375 	.word	0x08003375
 800322c:	08003299 	.word	0x08003299
 8003230:	08003357 	.word	0x08003357
 8003234:	080031e5 	.word	0x080031e5
 8003238:	080031e5 	.word	0x080031e5
 800323c:	08003397 	.word	0x08003397
 8003240:	080031e5 	.word	0x080031e5
 8003244:	08003299 	.word	0x08003299
 8003248:	080031e5 	.word	0x080031e5
 800324c:	080031e5 	.word	0x080031e5
 8003250:	0800335f 	.word	0x0800335f
 8003254:	680b      	ldr	r3, [r1, #0]
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	600a      	str	r2, [r1, #0]
 800325c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003264:	2301      	movs	r3, #1
 8003266:	e0a3      	b.n	80033b0 <_printf_i+0x1f4>
 8003268:	6825      	ldr	r5, [r4, #0]
 800326a:	6808      	ldr	r0, [r1, #0]
 800326c:	062e      	lsls	r6, r5, #24
 800326e:	f100 0304 	add.w	r3, r0, #4
 8003272:	d50a      	bpl.n	800328a <_printf_i+0xce>
 8003274:	6805      	ldr	r5, [r0, #0]
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	2d00      	cmp	r5, #0
 800327a:	da03      	bge.n	8003284 <_printf_i+0xc8>
 800327c:	232d      	movs	r3, #45	; 0x2d
 800327e:	426d      	negs	r5, r5
 8003280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003284:	485e      	ldr	r0, [pc, #376]	; (8003400 <_printf_i+0x244>)
 8003286:	230a      	movs	r3, #10
 8003288:	e019      	b.n	80032be <_printf_i+0x102>
 800328a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800328e:	6805      	ldr	r5, [r0, #0]
 8003290:	600b      	str	r3, [r1, #0]
 8003292:	bf18      	it	ne
 8003294:	b22d      	sxthne	r5, r5
 8003296:	e7ef      	b.n	8003278 <_printf_i+0xbc>
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	6825      	ldr	r5, [r4, #0]
 800329c:	1d18      	adds	r0, r3, #4
 800329e:	6008      	str	r0, [r1, #0]
 80032a0:	0628      	lsls	r0, r5, #24
 80032a2:	d501      	bpl.n	80032a8 <_printf_i+0xec>
 80032a4:	681d      	ldr	r5, [r3, #0]
 80032a6:	e002      	b.n	80032ae <_printf_i+0xf2>
 80032a8:	0669      	lsls	r1, r5, #25
 80032aa:	d5fb      	bpl.n	80032a4 <_printf_i+0xe8>
 80032ac:	881d      	ldrh	r5, [r3, #0]
 80032ae:	4854      	ldr	r0, [pc, #336]	; (8003400 <_printf_i+0x244>)
 80032b0:	2f6f      	cmp	r7, #111	; 0x6f
 80032b2:	bf0c      	ite	eq
 80032b4:	2308      	moveq	r3, #8
 80032b6:	230a      	movne	r3, #10
 80032b8:	2100      	movs	r1, #0
 80032ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032be:	6866      	ldr	r6, [r4, #4]
 80032c0:	60a6      	str	r6, [r4, #8]
 80032c2:	2e00      	cmp	r6, #0
 80032c4:	bfa2      	ittt	ge
 80032c6:	6821      	ldrge	r1, [r4, #0]
 80032c8:	f021 0104 	bicge.w	r1, r1, #4
 80032cc:	6021      	strge	r1, [r4, #0]
 80032ce:	b90d      	cbnz	r5, 80032d4 <_printf_i+0x118>
 80032d0:	2e00      	cmp	r6, #0
 80032d2:	d04d      	beq.n	8003370 <_printf_i+0x1b4>
 80032d4:	4616      	mov	r6, r2
 80032d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80032da:	fb03 5711 	mls	r7, r3, r1, r5
 80032de:	5dc7      	ldrb	r7, [r0, r7]
 80032e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032e4:	462f      	mov	r7, r5
 80032e6:	42bb      	cmp	r3, r7
 80032e8:	460d      	mov	r5, r1
 80032ea:	d9f4      	bls.n	80032d6 <_printf_i+0x11a>
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d10b      	bne.n	8003308 <_printf_i+0x14c>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	07df      	lsls	r7, r3, #31
 80032f4:	d508      	bpl.n	8003308 <_printf_i+0x14c>
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	6861      	ldr	r1, [r4, #4]
 80032fa:	4299      	cmp	r1, r3
 80032fc:	bfde      	ittt	le
 80032fe:	2330      	movle	r3, #48	; 0x30
 8003300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003304:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003308:	1b92      	subs	r2, r2, r6
 800330a:	6122      	str	r2, [r4, #16]
 800330c:	f8cd a000 	str.w	sl, [sp]
 8003310:	464b      	mov	r3, r9
 8003312:	aa03      	add	r2, sp, #12
 8003314:	4621      	mov	r1, r4
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff fee2 	bl	80030e0 <_printf_common>
 800331c:	3001      	adds	r0, #1
 800331e:	d14c      	bne.n	80033ba <_printf_i+0x1fe>
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	b004      	add	sp, #16
 8003326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332a:	4835      	ldr	r0, [pc, #212]	; (8003400 <_printf_i+0x244>)
 800332c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	680e      	ldr	r6, [r1, #0]
 8003334:	061f      	lsls	r7, r3, #24
 8003336:	f856 5b04 	ldr.w	r5, [r6], #4
 800333a:	600e      	str	r6, [r1, #0]
 800333c:	d514      	bpl.n	8003368 <_printf_i+0x1ac>
 800333e:	07d9      	lsls	r1, r3, #31
 8003340:	bf44      	itt	mi
 8003342:	f043 0320 	orrmi.w	r3, r3, #32
 8003346:	6023      	strmi	r3, [r4, #0]
 8003348:	b91d      	cbnz	r5, 8003352 <_printf_i+0x196>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	f023 0320 	bic.w	r3, r3, #32
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	2310      	movs	r3, #16
 8003354:	e7b0      	b.n	80032b8 <_printf_i+0xfc>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	f043 0320 	orr.w	r3, r3, #32
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	2378      	movs	r3, #120	; 0x78
 8003360:	4828      	ldr	r0, [pc, #160]	; (8003404 <_printf_i+0x248>)
 8003362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003366:	e7e3      	b.n	8003330 <_printf_i+0x174>
 8003368:	065e      	lsls	r6, r3, #25
 800336a:	bf48      	it	mi
 800336c:	b2ad      	uxthmi	r5, r5
 800336e:	e7e6      	b.n	800333e <_printf_i+0x182>
 8003370:	4616      	mov	r6, r2
 8003372:	e7bb      	b.n	80032ec <_printf_i+0x130>
 8003374:	680b      	ldr	r3, [r1, #0]
 8003376:	6826      	ldr	r6, [r4, #0]
 8003378:	6960      	ldr	r0, [r4, #20]
 800337a:	1d1d      	adds	r5, r3, #4
 800337c:	600d      	str	r5, [r1, #0]
 800337e:	0635      	lsls	r5, r6, #24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	d501      	bpl.n	8003388 <_printf_i+0x1cc>
 8003384:	6018      	str	r0, [r3, #0]
 8003386:	e002      	b.n	800338e <_printf_i+0x1d2>
 8003388:	0671      	lsls	r1, r6, #25
 800338a:	d5fb      	bpl.n	8003384 <_printf_i+0x1c8>
 800338c:	8018      	strh	r0, [r3, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	6123      	str	r3, [r4, #16]
 8003392:	4616      	mov	r6, r2
 8003394:	e7ba      	b.n	800330c <_printf_i+0x150>
 8003396:	680b      	ldr	r3, [r1, #0]
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	600a      	str	r2, [r1, #0]
 800339c:	681e      	ldr	r6, [r3, #0]
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4630      	mov	r0, r6
 80033a4:	f7fc ff1c 	bl	80001e0 <memchr>
 80033a8:	b108      	cbz	r0, 80033ae <_printf_i+0x1f2>
 80033aa:	1b80      	subs	r0, r0, r6
 80033ac:	6060      	str	r0, [r4, #4]
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	6123      	str	r3, [r4, #16]
 80033b2:	2300      	movs	r3, #0
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b8:	e7a8      	b.n	800330c <_printf_i+0x150>
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	4632      	mov	r2, r6
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	47d0      	blx	sl
 80033c4:	3001      	adds	r0, #1
 80033c6:	d0ab      	beq.n	8003320 <_printf_i+0x164>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	079b      	lsls	r3, r3, #30
 80033cc:	d413      	bmi.n	80033f6 <_printf_i+0x23a>
 80033ce:	68e0      	ldr	r0, [r4, #12]
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	4298      	cmp	r0, r3
 80033d4:	bfb8      	it	lt
 80033d6:	4618      	movlt	r0, r3
 80033d8:	e7a4      	b.n	8003324 <_printf_i+0x168>
 80033da:	2301      	movs	r3, #1
 80033dc:	4632      	mov	r2, r6
 80033de:	4649      	mov	r1, r9
 80033e0:	4640      	mov	r0, r8
 80033e2:	47d0      	blx	sl
 80033e4:	3001      	adds	r0, #1
 80033e6:	d09b      	beq.n	8003320 <_printf_i+0x164>
 80033e8:	3501      	adds	r5, #1
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	9903      	ldr	r1, [sp, #12]
 80033ee:	1a5b      	subs	r3, r3, r1
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	dcf2      	bgt.n	80033da <_printf_i+0x21e>
 80033f4:	e7eb      	b.n	80033ce <_printf_i+0x212>
 80033f6:	2500      	movs	r5, #0
 80033f8:	f104 0619 	add.w	r6, r4, #25
 80033fc:	e7f5      	b.n	80033ea <_printf_i+0x22e>
 80033fe:	bf00      	nop
 8003400:	08004006 	.word	0x08004006
 8003404:	08004017 	.word	0x08004017

08003408 <_sbrk_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4d06      	ldr	r5, [pc, #24]	; (8003424 <_sbrk_r+0x1c>)
 800340c:	2300      	movs	r3, #0
 800340e:	4604      	mov	r4, r0
 8003410:	4608      	mov	r0, r1
 8003412:	602b      	str	r3, [r5, #0]
 8003414:	f7fd fdd0 	bl	8000fb8 <_sbrk>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_sbrk_r+0x1a>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	b103      	cbz	r3, 8003422 <_sbrk_r+0x1a>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	200002c8 	.word	0x200002c8

08003428 <__swbuf_r>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	460e      	mov	r6, r1
 800342c:	4614      	mov	r4, r2
 800342e:	4605      	mov	r5, r0
 8003430:	b118      	cbz	r0, 800343a <__swbuf_r+0x12>
 8003432:	6983      	ldr	r3, [r0, #24]
 8003434:	b90b      	cbnz	r3, 800343a <__swbuf_r+0x12>
 8003436:	f000 f9d9 	bl	80037ec <__sinit>
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <__swbuf_r+0x98>)
 800343c:	429c      	cmp	r4, r3
 800343e:	d12b      	bne.n	8003498 <__swbuf_r+0x70>
 8003440:	686c      	ldr	r4, [r5, #4]
 8003442:	69a3      	ldr	r3, [r4, #24]
 8003444:	60a3      	str	r3, [r4, #8]
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	071a      	lsls	r2, r3, #28
 800344a:	d52f      	bpl.n	80034ac <__swbuf_r+0x84>
 800344c:	6923      	ldr	r3, [r4, #16]
 800344e:	b36b      	cbz	r3, 80034ac <__swbuf_r+0x84>
 8003450:	6923      	ldr	r3, [r4, #16]
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	1ac0      	subs	r0, r0, r3
 8003456:	6963      	ldr	r3, [r4, #20]
 8003458:	b2f6      	uxtb	r6, r6
 800345a:	4283      	cmp	r3, r0
 800345c:	4637      	mov	r7, r6
 800345e:	dc04      	bgt.n	800346a <__swbuf_r+0x42>
 8003460:	4621      	mov	r1, r4
 8003462:	4628      	mov	r0, r5
 8003464:	f000 f92e 	bl	80036c4 <_fflush_r>
 8003468:	bb30      	cbnz	r0, 80034b8 <__swbuf_r+0x90>
 800346a:	68a3      	ldr	r3, [r4, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	60a3      	str	r3, [r4, #8]
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	6022      	str	r2, [r4, #0]
 8003476:	701e      	strb	r6, [r3, #0]
 8003478:	6963      	ldr	r3, [r4, #20]
 800347a:	3001      	adds	r0, #1
 800347c:	4283      	cmp	r3, r0
 800347e:	d004      	beq.n	800348a <__swbuf_r+0x62>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	07db      	lsls	r3, r3, #31
 8003484:	d506      	bpl.n	8003494 <__swbuf_r+0x6c>
 8003486:	2e0a      	cmp	r6, #10
 8003488:	d104      	bne.n	8003494 <__swbuf_r+0x6c>
 800348a:	4621      	mov	r1, r4
 800348c:	4628      	mov	r0, r5
 800348e:	f000 f919 	bl	80036c4 <_fflush_r>
 8003492:	b988      	cbnz	r0, 80034b8 <__swbuf_r+0x90>
 8003494:	4638      	mov	r0, r7
 8003496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <__swbuf_r+0x9c>)
 800349a:	429c      	cmp	r4, r3
 800349c:	d101      	bne.n	80034a2 <__swbuf_r+0x7a>
 800349e:	68ac      	ldr	r4, [r5, #8]
 80034a0:	e7cf      	b.n	8003442 <__swbuf_r+0x1a>
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <__swbuf_r+0xa0>)
 80034a4:	429c      	cmp	r4, r3
 80034a6:	bf08      	it	eq
 80034a8:	68ec      	ldreq	r4, [r5, #12]
 80034aa:	e7ca      	b.n	8003442 <__swbuf_r+0x1a>
 80034ac:	4621      	mov	r1, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 f80c 	bl	80034cc <__swsetup_r>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d0cb      	beq.n	8003450 <__swbuf_r+0x28>
 80034b8:	f04f 37ff 	mov.w	r7, #4294967295
 80034bc:	e7ea      	b.n	8003494 <__swbuf_r+0x6c>
 80034be:	bf00      	nop
 80034c0:	08004048 	.word	0x08004048
 80034c4:	08004068 	.word	0x08004068
 80034c8:	08004028 	.word	0x08004028

080034cc <__swsetup_r>:
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <__swsetup_r+0xcc>)
 80034ce:	b570      	push	{r4, r5, r6, lr}
 80034d0:	681d      	ldr	r5, [r3, #0]
 80034d2:	4606      	mov	r6, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	b125      	cbz	r5, 80034e2 <__swsetup_r+0x16>
 80034d8:	69ab      	ldr	r3, [r5, #24]
 80034da:	b913      	cbnz	r3, 80034e2 <__swsetup_r+0x16>
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 f985 	bl	80037ec <__sinit>
 80034e2:	4b2e      	ldr	r3, [pc, #184]	; (800359c <__swsetup_r+0xd0>)
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d10f      	bne.n	8003508 <__swsetup_r+0x3c>
 80034e8:	686c      	ldr	r4, [r5, #4]
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034f0:	0719      	lsls	r1, r3, #28
 80034f2:	d42c      	bmi.n	800354e <__swsetup_r+0x82>
 80034f4:	06dd      	lsls	r5, r3, #27
 80034f6:	d411      	bmi.n	800351c <__swsetup_r+0x50>
 80034f8:	2309      	movs	r3, #9
 80034fa:	6033      	str	r3, [r6, #0]
 80034fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e03e      	b.n	8003586 <__swsetup_r+0xba>
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <__swsetup_r+0xd4>)
 800350a:	429c      	cmp	r4, r3
 800350c:	d101      	bne.n	8003512 <__swsetup_r+0x46>
 800350e:	68ac      	ldr	r4, [r5, #8]
 8003510:	e7eb      	b.n	80034ea <__swsetup_r+0x1e>
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <__swsetup_r+0xd8>)
 8003514:	429c      	cmp	r4, r3
 8003516:	bf08      	it	eq
 8003518:	68ec      	ldreq	r4, [r5, #12]
 800351a:	e7e6      	b.n	80034ea <__swsetup_r+0x1e>
 800351c:	0758      	lsls	r0, r3, #29
 800351e:	d512      	bpl.n	8003546 <__swsetup_r+0x7a>
 8003520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003522:	b141      	cbz	r1, 8003536 <__swsetup_r+0x6a>
 8003524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003528:	4299      	cmp	r1, r3
 800352a:	d002      	beq.n	8003532 <__swsetup_r+0x66>
 800352c:	4630      	mov	r0, r6
 800352e:	f7ff fa77 	bl	8002a20 <_free_r>
 8003532:	2300      	movs	r3, #0
 8003534:	6363      	str	r3, [r4, #52]	; 0x34
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	2300      	movs	r3, #0
 8003540:	6063      	str	r3, [r4, #4]
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	6923      	ldr	r3, [r4, #16]
 8003550:	b94b      	cbnz	r3, 8003566 <__swsetup_r+0x9a>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d003      	beq.n	8003566 <__swsetup_r+0x9a>
 800355e:	4621      	mov	r1, r4
 8003560:	4630      	mov	r0, r6
 8003562:	f000 fa07 	bl	8003974 <__smakebuf_r>
 8003566:	89a0      	ldrh	r0, [r4, #12]
 8003568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800356c:	f010 0301 	ands.w	r3, r0, #1
 8003570:	d00a      	beq.n	8003588 <__swsetup_r+0xbc>
 8003572:	2300      	movs	r3, #0
 8003574:	60a3      	str	r3, [r4, #8]
 8003576:	6963      	ldr	r3, [r4, #20]
 8003578:	425b      	negs	r3, r3
 800357a:	61a3      	str	r3, [r4, #24]
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	b943      	cbnz	r3, 8003592 <__swsetup_r+0xc6>
 8003580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003584:	d1ba      	bne.n	80034fc <__swsetup_r+0x30>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	0781      	lsls	r1, r0, #30
 800358a:	bf58      	it	pl
 800358c:	6963      	ldrpl	r3, [r4, #20]
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	e7f4      	b.n	800357c <__swsetup_r+0xb0>
 8003592:	2000      	movs	r0, #0
 8003594:	e7f7      	b.n	8003586 <__swsetup_r+0xba>
 8003596:	bf00      	nop
 8003598:	20000010 	.word	0x20000010
 800359c:	08004048 	.word	0x08004048
 80035a0:	08004068 	.word	0x08004068
 80035a4:	08004028 	.word	0x08004028

080035a8 <abort>:
 80035a8:	b508      	push	{r3, lr}
 80035aa:	2006      	movs	r0, #6
 80035ac:	f000 faa4 	bl	8003af8 <raise>
 80035b0:	2001      	movs	r0, #1
 80035b2:	f7fd fc89 	bl	8000ec8 <_exit>
	...

080035b8 <__sflush_r>:
 80035b8:	898a      	ldrh	r2, [r1, #12]
 80035ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035be:	4605      	mov	r5, r0
 80035c0:	0710      	lsls	r0, r2, #28
 80035c2:	460c      	mov	r4, r1
 80035c4:	d458      	bmi.n	8003678 <__sflush_r+0xc0>
 80035c6:	684b      	ldr	r3, [r1, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dc05      	bgt.n	80035d8 <__sflush_r+0x20>
 80035cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dc02      	bgt.n	80035d8 <__sflush_r+0x20>
 80035d2:	2000      	movs	r0, #0
 80035d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d0f9      	beq.n	80035d2 <__sflush_r+0x1a>
 80035de:	2300      	movs	r3, #0
 80035e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035e4:	682f      	ldr	r7, [r5, #0]
 80035e6:	602b      	str	r3, [r5, #0]
 80035e8:	d032      	beq.n	8003650 <__sflush_r+0x98>
 80035ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	075a      	lsls	r2, r3, #29
 80035f0:	d505      	bpl.n	80035fe <__sflush_r+0x46>
 80035f2:	6863      	ldr	r3, [r4, #4]
 80035f4:	1ac0      	subs	r0, r0, r3
 80035f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035f8:	b10b      	cbz	r3, 80035fe <__sflush_r+0x46>
 80035fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035fc:	1ac0      	subs	r0, r0, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	4602      	mov	r2, r0
 8003602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	4628      	mov	r0, r5
 8003608:	47b0      	blx	r6
 800360a:	1c43      	adds	r3, r0, #1
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	d106      	bne.n	800361e <__sflush_r+0x66>
 8003610:	6829      	ldr	r1, [r5, #0]
 8003612:	291d      	cmp	r1, #29
 8003614:	d82c      	bhi.n	8003670 <__sflush_r+0xb8>
 8003616:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <__sflush_r+0x108>)
 8003618:	40ca      	lsrs	r2, r1
 800361a:	07d6      	lsls	r6, r2, #31
 800361c:	d528      	bpl.n	8003670 <__sflush_r+0xb8>
 800361e:	2200      	movs	r2, #0
 8003620:	6062      	str	r2, [r4, #4]
 8003622:	04d9      	lsls	r1, r3, #19
 8003624:	6922      	ldr	r2, [r4, #16]
 8003626:	6022      	str	r2, [r4, #0]
 8003628:	d504      	bpl.n	8003634 <__sflush_r+0x7c>
 800362a:	1c42      	adds	r2, r0, #1
 800362c:	d101      	bne.n	8003632 <__sflush_r+0x7a>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	b903      	cbnz	r3, 8003634 <__sflush_r+0x7c>
 8003632:	6560      	str	r0, [r4, #84]	; 0x54
 8003634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003636:	602f      	str	r7, [r5, #0]
 8003638:	2900      	cmp	r1, #0
 800363a:	d0ca      	beq.n	80035d2 <__sflush_r+0x1a>
 800363c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003640:	4299      	cmp	r1, r3
 8003642:	d002      	beq.n	800364a <__sflush_r+0x92>
 8003644:	4628      	mov	r0, r5
 8003646:	f7ff f9eb 	bl	8002a20 <_free_r>
 800364a:	2000      	movs	r0, #0
 800364c:	6360      	str	r0, [r4, #52]	; 0x34
 800364e:	e7c1      	b.n	80035d4 <__sflush_r+0x1c>
 8003650:	6a21      	ldr	r1, [r4, #32]
 8003652:	2301      	movs	r3, #1
 8003654:	4628      	mov	r0, r5
 8003656:	47b0      	blx	r6
 8003658:	1c41      	adds	r1, r0, #1
 800365a:	d1c7      	bne.n	80035ec <__sflush_r+0x34>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0c4      	beq.n	80035ec <__sflush_r+0x34>
 8003662:	2b1d      	cmp	r3, #29
 8003664:	d001      	beq.n	800366a <__sflush_r+0xb2>
 8003666:	2b16      	cmp	r3, #22
 8003668:	d101      	bne.n	800366e <__sflush_r+0xb6>
 800366a:	602f      	str	r7, [r5, #0]
 800366c:	e7b1      	b.n	80035d2 <__sflush_r+0x1a>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	e7ad      	b.n	80035d4 <__sflush_r+0x1c>
 8003678:	690f      	ldr	r7, [r1, #16]
 800367a:	2f00      	cmp	r7, #0
 800367c:	d0a9      	beq.n	80035d2 <__sflush_r+0x1a>
 800367e:	0793      	lsls	r3, r2, #30
 8003680:	680e      	ldr	r6, [r1, #0]
 8003682:	bf08      	it	eq
 8003684:	694b      	ldreq	r3, [r1, #20]
 8003686:	600f      	str	r7, [r1, #0]
 8003688:	bf18      	it	ne
 800368a:	2300      	movne	r3, #0
 800368c:	eba6 0807 	sub.w	r8, r6, r7
 8003690:	608b      	str	r3, [r1, #8]
 8003692:	f1b8 0f00 	cmp.w	r8, #0
 8003696:	dd9c      	ble.n	80035d2 <__sflush_r+0x1a>
 8003698:	6a21      	ldr	r1, [r4, #32]
 800369a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800369c:	4643      	mov	r3, r8
 800369e:	463a      	mov	r2, r7
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b0      	blx	r6
 80036a4:	2800      	cmp	r0, #0
 80036a6:	dc06      	bgt.n	80036b6 <__sflush_r+0xfe>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e78e      	b.n	80035d4 <__sflush_r+0x1c>
 80036b6:	4407      	add	r7, r0
 80036b8:	eba8 0800 	sub.w	r8, r8, r0
 80036bc:	e7e9      	b.n	8003692 <__sflush_r+0xda>
 80036be:	bf00      	nop
 80036c0:	20400001 	.word	0x20400001

080036c4 <_fflush_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	4605      	mov	r5, r0
 80036ca:	460c      	mov	r4, r1
 80036cc:	b913      	cbnz	r3, 80036d4 <_fflush_r+0x10>
 80036ce:	2500      	movs	r5, #0
 80036d0:	4628      	mov	r0, r5
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	b118      	cbz	r0, 80036de <_fflush_r+0x1a>
 80036d6:	6983      	ldr	r3, [r0, #24]
 80036d8:	b90b      	cbnz	r3, 80036de <_fflush_r+0x1a>
 80036da:	f000 f887 	bl	80037ec <__sinit>
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <_fflush_r+0x6c>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	d11b      	bne.n	800371c <_fflush_r+0x58>
 80036e4:	686c      	ldr	r4, [r5, #4]
 80036e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ef      	beq.n	80036ce <_fflush_r+0xa>
 80036ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036f0:	07d0      	lsls	r0, r2, #31
 80036f2:	d404      	bmi.n	80036fe <_fflush_r+0x3a>
 80036f4:	0599      	lsls	r1, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_fflush_r+0x3a>
 80036f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fa:	f000 f915 	bl	8003928 <__retarget_lock_acquire_recursive>
 80036fe:	4628      	mov	r0, r5
 8003700:	4621      	mov	r1, r4
 8003702:	f7ff ff59 	bl	80035b8 <__sflush_r>
 8003706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003708:	07da      	lsls	r2, r3, #31
 800370a:	4605      	mov	r5, r0
 800370c:	d4e0      	bmi.n	80036d0 <_fflush_r+0xc>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	059b      	lsls	r3, r3, #22
 8003712:	d4dd      	bmi.n	80036d0 <_fflush_r+0xc>
 8003714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003716:	f000 f908 	bl	800392a <__retarget_lock_release_recursive>
 800371a:	e7d9      	b.n	80036d0 <_fflush_r+0xc>
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <_fflush_r+0x70>)
 800371e:	429c      	cmp	r4, r3
 8003720:	d101      	bne.n	8003726 <_fflush_r+0x62>
 8003722:	68ac      	ldr	r4, [r5, #8]
 8003724:	e7df      	b.n	80036e6 <_fflush_r+0x22>
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <_fflush_r+0x74>)
 8003728:	429c      	cmp	r4, r3
 800372a:	bf08      	it	eq
 800372c:	68ec      	ldreq	r4, [r5, #12]
 800372e:	e7da      	b.n	80036e6 <_fflush_r+0x22>
 8003730:	08004048 	.word	0x08004048
 8003734:	08004068 	.word	0x08004068
 8003738:	08004028 	.word	0x08004028

0800373c <std>:
 800373c:	2300      	movs	r3, #0
 800373e:	b510      	push	{r4, lr}
 8003740:	4604      	mov	r4, r0
 8003742:	e9c0 3300 	strd	r3, r3, [r0]
 8003746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800374a:	6083      	str	r3, [r0, #8]
 800374c:	8181      	strh	r1, [r0, #12]
 800374e:	6643      	str	r3, [r0, #100]	; 0x64
 8003750:	81c2      	strh	r2, [r0, #14]
 8003752:	6183      	str	r3, [r0, #24]
 8003754:	4619      	mov	r1, r3
 8003756:	2208      	movs	r2, #8
 8003758:	305c      	adds	r0, #92	; 0x5c
 800375a:	f7ff f817 	bl	800278c <memset>
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <std+0x38>)
 8003760:	6263      	str	r3, [r4, #36]	; 0x24
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <std+0x3c>)
 8003764:	62a3      	str	r3, [r4, #40]	; 0x28
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <std+0x40>)
 8003768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <std+0x44>)
 800376c:	6224      	str	r4, [r4, #32]
 800376e:	6323      	str	r3, [r4, #48]	; 0x30
 8003770:	bd10      	pop	{r4, pc}
 8003772:	bf00      	nop
 8003774:	08003b31 	.word	0x08003b31
 8003778:	08003b53 	.word	0x08003b53
 800377c:	08003b8b 	.word	0x08003b8b
 8003780:	08003baf 	.word	0x08003baf

08003784 <_cleanup_r>:
 8003784:	4901      	ldr	r1, [pc, #4]	; (800378c <_cleanup_r+0x8>)
 8003786:	f000 b8af 	b.w	80038e8 <_fwalk_reent>
 800378a:	bf00      	nop
 800378c:	080036c5 	.word	0x080036c5

08003790 <__sfmoreglue>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	1e4a      	subs	r2, r1, #1
 8003794:	2568      	movs	r5, #104	; 0x68
 8003796:	4355      	muls	r5, r2
 8003798:	460e      	mov	r6, r1
 800379a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800379e:	f7ff f98f 	bl	8002ac0 <_malloc_r>
 80037a2:	4604      	mov	r4, r0
 80037a4:	b140      	cbz	r0, 80037b8 <__sfmoreglue+0x28>
 80037a6:	2100      	movs	r1, #0
 80037a8:	e9c0 1600 	strd	r1, r6, [r0]
 80037ac:	300c      	adds	r0, #12
 80037ae:	60a0      	str	r0, [r4, #8]
 80037b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037b4:	f7fe ffea 	bl	800278c <memset>
 80037b8:	4620      	mov	r0, r4
 80037ba:	bd70      	pop	{r4, r5, r6, pc}

080037bc <__sfp_lock_acquire>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__sfp_lock_acquire+0x8>)
 80037be:	f000 b8b3 	b.w	8003928 <__retarget_lock_acquire_recursive>
 80037c2:	bf00      	nop
 80037c4:	200002c4 	.word	0x200002c4

080037c8 <__sfp_lock_release>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__sfp_lock_release+0x8>)
 80037ca:	f000 b8ae 	b.w	800392a <__retarget_lock_release_recursive>
 80037ce:	bf00      	nop
 80037d0:	200002c4 	.word	0x200002c4

080037d4 <__sinit_lock_acquire>:
 80037d4:	4801      	ldr	r0, [pc, #4]	; (80037dc <__sinit_lock_acquire+0x8>)
 80037d6:	f000 b8a7 	b.w	8003928 <__retarget_lock_acquire_recursive>
 80037da:	bf00      	nop
 80037dc:	200002bf 	.word	0x200002bf

080037e0 <__sinit_lock_release>:
 80037e0:	4801      	ldr	r0, [pc, #4]	; (80037e8 <__sinit_lock_release+0x8>)
 80037e2:	f000 b8a2 	b.w	800392a <__retarget_lock_release_recursive>
 80037e6:	bf00      	nop
 80037e8:	200002bf 	.word	0x200002bf

080037ec <__sinit>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	f7ff fff0 	bl	80037d4 <__sinit_lock_acquire>
 80037f4:	69a3      	ldr	r3, [r4, #24]
 80037f6:	b11b      	cbz	r3, 8003800 <__sinit+0x14>
 80037f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037fc:	f7ff bff0 	b.w	80037e0 <__sinit_lock_release>
 8003800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003804:	6523      	str	r3, [r4, #80]	; 0x50
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <__sinit+0x68>)
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <__sinit+0x6c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	62a2      	str	r2, [r4, #40]	; 0x28
 800380e:	42a3      	cmp	r3, r4
 8003810:	bf04      	itt	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	61a3      	streq	r3, [r4, #24]
 8003816:	4620      	mov	r0, r4
 8003818:	f000 f820 	bl	800385c <__sfp>
 800381c:	6060      	str	r0, [r4, #4]
 800381e:	4620      	mov	r0, r4
 8003820:	f000 f81c 	bl	800385c <__sfp>
 8003824:	60a0      	str	r0, [r4, #8]
 8003826:	4620      	mov	r0, r4
 8003828:	f000 f818 	bl	800385c <__sfp>
 800382c:	2200      	movs	r2, #0
 800382e:	60e0      	str	r0, [r4, #12]
 8003830:	2104      	movs	r1, #4
 8003832:	6860      	ldr	r0, [r4, #4]
 8003834:	f7ff ff82 	bl	800373c <std>
 8003838:	68a0      	ldr	r0, [r4, #8]
 800383a:	2201      	movs	r2, #1
 800383c:	2109      	movs	r1, #9
 800383e:	f7ff ff7d 	bl	800373c <std>
 8003842:	68e0      	ldr	r0, [r4, #12]
 8003844:	2202      	movs	r2, #2
 8003846:	2112      	movs	r1, #18
 8003848:	f7ff ff78 	bl	800373c <std>
 800384c:	2301      	movs	r3, #1
 800384e:	61a3      	str	r3, [r4, #24]
 8003850:	e7d2      	b.n	80037f8 <__sinit+0xc>
 8003852:	bf00      	nop
 8003854:	08003e3c 	.word	0x08003e3c
 8003858:	08003785 	.word	0x08003785

0800385c <__sfp>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	4607      	mov	r7, r0
 8003860:	f7ff ffac 	bl	80037bc <__sfp_lock_acquire>
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <__sfp+0x84>)
 8003866:	681e      	ldr	r6, [r3, #0]
 8003868:	69b3      	ldr	r3, [r6, #24]
 800386a:	b913      	cbnz	r3, 8003872 <__sfp+0x16>
 800386c:	4630      	mov	r0, r6
 800386e:	f7ff ffbd 	bl	80037ec <__sinit>
 8003872:	3648      	adds	r6, #72	; 0x48
 8003874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	d503      	bpl.n	8003884 <__sfp+0x28>
 800387c:	6833      	ldr	r3, [r6, #0]
 800387e:	b30b      	cbz	r3, 80038c4 <__sfp+0x68>
 8003880:	6836      	ldr	r6, [r6, #0]
 8003882:	e7f7      	b.n	8003874 <__sfp+0x18>
 8003884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003888:	b9d5      	cbnz	r5, 80038c0 <__sfp+0x64>
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <__sfp+0x88>)
 800388c:	60e3      	str	r3, [r4, #12]
 800388e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003892:	6665      	str	r5, [r4, #100]	; 0x64
 8003894:	f000 f847 	bl	8003926 <__retarget_lock_init_recursive>
 8003898:	f7ff ff96 	bl	80037c8 <__sfp_lock_release>
 800389c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038a4:	6025      	str	r5, [r4, #0]
 80038a6:	61a5      	str	r5, [r4, #24]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4629      	mov	r1, r5
 80038ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038b0:	f7fe ff6c 	bl	800278c <memset>
 80038b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038bc:	4620      	mov	r0, r4
 80038be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c0:	3468      	adds	r4, #104	; 0x68
 80038c2:	e7d9      	b.n	8003878 <__sfp+0x1c>
 80038c4:	2104      	movs	r1, #4
 80038c6:	4638      	mov	r0, r7
 80038c8:	f7ff ff62 	bl	8003790 <__sfmoreglue>
 80038cc:	4604      	mov	r4, r0
 80038ce:	6030      	str	r0, [r6, #0]
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d1d5      	bne.n	8003880 <__sfp+0x24>
 80038d4:	f7ff ff78 	bl	80037c8 <__sfp_lock_release>
 80038d8:	230c      	movs	r3, #12
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	e7ee      	b.n	80038bc <__sfp+0x60>
 80038de:	bf00      	nop
 80038e0:	08003e3c 	.word	0x08003e3c
 80038e4:	ffff0001 	.word	0xffff0001

080038e8 <_fwalk_reent>:
 80038e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038ec:	4606      	mov	r6, r0
 80038ee:	4688      	mov	r8, r1
 80038f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038f4:	2700      	movs	r7, #0
 80038f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038fa:	f1b9 0901 	subs.w	r9, r9, #1
 80038fe:	d505      	bpl.n	800390c <_fwalk_reent+0x24>
 8003900:	6824      	ldr	r4, [r4, #0]
 8003902:	2c00      	cmp	r4, #0
 8003904:	d1f7      	bne.n	80038f6 <_fwalk_reent+0xe>
 8003906:	4638      	mov	r0, r7
 8003908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390c:	89ab      	ldrh	r3, [r5, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d907      	bls.n	8003922 <_fwalk_reent+0x3a>
 8003912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003916:	3301      	adds	r3, #1
 8003918:	d003      	beq.n	8003922 <_fwalk_reent+0x3a>
 800391a:	4629      	mov	r1, r5
 800391c:	4630      	mov	r0, r6
 800391e:	47c0      	blx	r8
 8003920:	4307      	orrs	r7, r0
 8003922:	3568      	adds	r5, #104	; 0x68
 8003924:	e7e9      	b.n	80038fa <_fwalk_reent+0x12>

08003926 <__retarget_lock_init_recursive>:
 8003926:	4770      	bx	lr

08003928 <__retarget_lock_acquire_recursive>:
 8003928:	4770      	bx	lr

0800392a <__retarget_lock_release_recursive>:
 800392a:	4770      	bx	lr

0800392c <__swhatbuf_r>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	460e      	mov	r6, r1
 8003930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003934:	2900      	cmp	r1, #0
 8003936:	b096      	sub	sp, #88	; 0x58
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	da07      	bge.n	800394e <__swhatbuf_r+0x22>
 800393e:	2300      	movs	r3, #0
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	89b3      	ldrh	r3, [r6, #12]
 8003944:	061a      	lsls	r2, r3, #24
 8003946:	d410      	bmi.n	800396a <__swhatbuf_r+0x3e>
 8003948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394c:	e00e      	b.n	800396c <__swhatbuf_r+0x40>
 800394e:	466a      	mov	r2, sp
 8003950:	f000 f954 	bl	8003bfc <_fstat_r>
 8003954:	2800      	cmp	r0, #0
 8003956:	dbf2      	blt.n	800393e <__swhatbuf_r+0x12>
 8003958:	9a01      	ldr	r2, [sp, #4]
 800395a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800395e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003962:	425a      	negs	r2, r3
 8003964:	415a      	adcs	r2, r3
 8003966:	602a      	str	r2, [r5, #0]
 8003968:	e7ee      	b.n	8003948 <__swhatbuf_r+0x1c>
 800396a:	2340      	movs	r3, #64	; 0x40
 800396c:	2000      	movs	r0, #0
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	b016      	add	sp, #88	; 0x58
 8003972:	bd70      	pop	{r4, r5, r6, pc}

08003974 <__smakebuf_r>:
 8003974:	898b      	ldrh	r3, [r1, #12]
 8003976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003978:	079d      	lsls	r5, r3, #30
 800397a:	4606      	mov	r6, r0
 800397c:	460c      	mov	r4, r1
 800397e:	d507      	bpl.n	8003990 <__smakebuf_r+0x1c>
 8003980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	6123      	str	r3, [r4, #16]
 8003988:	2301      	movs	r3, #1
 800398a:	6163      	str	r3, [r4, #20]
 800398c:	b002      	add	sp, #8
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	ab01      	add	r3, sp, #4
 8003992:	466a      	mov	r2, sp
 8003994:	f7ff ffca 	bl	800392c <__swhatbuf_r>
 8003998:	9900      	ldr	r1, [sp, #0]
 800399a:	4605      	mov	r5, r0
 800399c:	4630      	mov	r0, r6
 800399e:	f7ff f88f 	bl	8002ac0 <_malloc_r>
 80039a2:	b948      	cbnz	r0, 80039b8 <__smakebuf_r+0x44>
 80039a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a8:	059a      	lsls	r2, r3, #22
 80039aa:	d4ef      	bmi.n	800398c <__smakebuf_r+0x18>
 80039ac:	f023 0303 	bic.w	r3, r3, #3
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	e7e3      	b.n	8003980 <__smakebuf_r+0xc>
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <__smakebuf_r+0x7c>)
 80039ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	6020      	str	r0, [r4, #0]
 80039c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	9b00      	ldr	r3, [sp, #0]
 80039c8:	6163      	str	r3, [r4, #20]
 80039ca:	9b01      	ldr	r3, [sp, #4]
 80039cc:	6120      	str	r0, [r4, #16]
 80039ce:	b15b      	cbz	r3, 80039e8 <__smakebuf_r+0x74>
 80039d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d4:	4630      	mov	r0, r6
 80039d6:	f000 f923 	bl	8003c20 <_isatty_r>
 80039da:	b128      	cbz	r0, 80039e8 <__smakebuf_r+0x74>
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	89a0      	ldrh	r0, [r4, #12]
 80039ea:	4305      	orrs	r5, r0
 80039ec:	81a5      	strh	r5, [r4, #12]
 80039ee:	e7cd      	b.n	800398c <__smakebuf_r+0x18>
 80039f0:	08003785 	.word	0x08003785

080039f4 <memcpy>:
 80039f4:	440a      	add	r2, r1
 80039f6:	4291      	cmp	r1, r2
 80039f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039fc:	d100      	bne.n	8003a00 <memcpy+0xc>
 80039fe:	4770      	bx	lr
 8003a00:	b510      	push	{r4, lr}
 8003a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a0a:	4291      	cmp	r1, r2
 8003a0c:	d1f9      	bne.n	8003a02 <memcpy+0xe>
 8003a0e:	bd10      	pop	{r4, pc}

08003a10 <memmove>:
 8003a10:	4288      	cmp	r0, r1
 8003a12:	b510      	push	{r4, lr}
 8003a14:	eb01 0402 	add.w	r4, r1, r2
 8003a18:	d902      	bls.n	8003a20 <memmove+0x10>
 8003a1a:	4284      	cmp	r4, r0
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	d807      	bhi.n	8003a30 <memmove+0x20>
 8003a20:	1e43      	subs	r3, r0, #1
 8003a22:	42a1      	cmp	r1, r4
 8003a24:	d008      	beq.n	8003a38 <memmove+0x28>
 8003a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a2e:	e7f8      	b.n	8003a22 <memmove+0x12>
 8003a30:	4402      	add	r2, r0
 8003a32:	4601      	mov	r1, r0
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d100      	bne.n	8003a3a <memmove+0x2a>
 8003a38:	bd10      	pop	{r4, pc}
 8003a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a42:	e7f7      	b.n	8003a34 <memmove+0x24>

08003a44 <__malloc_lock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_lock+0x8>)
 8003a46:	f7ff bf6f 	b.w	8003928 <__retarget_lock_acquire_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	200002c0 	.word	0x200002c0

08003a50 <__malloc_unlock>:
 8003a50:	4801      	ldr	r0, [pc, #4]	; (8003a58 <__malloc_unlock+0x8>)
 8003a52:	f7ff bf6a 	b.w	800392a <__retarget_lock_release_recursive>
 8003a56:	bf00      	nop
 8003a58:	200002c0 	.word	0x200002c0

08003a5c <_realloc_r>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	4607      	mov	r7, r0
 8003a60:	4614      	mov	r4, r2
 8003a62:	460e      	mov	r6, r1
 8003a64:	b921      	cbnz	r1, 8003a70 <_realloc_r+0x14>
 8003a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	f7ff b828 	b.w	8002ac0 <_malloc_r>
 8003a70:	b922      	cbnz	r2, 8003a7c <_realloc_r+0x20>
 8003a72:	f7fe ffd5 	bl	8002a20 <_free_r>
 8003a76:	4625      	mov	r5, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7c:	f000 f8f2 	bl	8003c64 <_malloc_usable_size_r>
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d20f      	bcs.n	8003aa4 <_realloc_r+0x48>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff f81a 	bl	8002ac0 <_malloc_r>
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0f2      	beq.n	8003a78 <_realloc_r+0x1c>
 8003a92:	4631      	mov	r1, r6
 8003a94:	4622      	mov	r2, r4
 8003a96:	f7ff ffad 	bl	80039f4 <memcpy>
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f7fe ffbf 	bl	8002a20 <_free_r>
 8003aa2:	e7e9      	b.n	8003a78 <_realloc_r+0x1c>
 8003aa4:	4635      	mov	r5, r6
 8003aa6:	e7e7      	b.n	8003a78 <_realloc_r+0x1c>

08003aa8 <_raise_r>:
 8003aa8:	291f      	cmp	r1, #31
 8003aaa:	b538      	push	{r3, r4, r5, lr}
 8003aac:	4604      	mov	r4, r0
 8003aae:	460d      	mov	r5, r1
 8003ab0:	d904      	bls.n	8003abc <_raise_r+0x14>
 8003ab2:	2316      	movs	r3, #22
 8003ab4:	6003      	str	r3, [r0, #0]
 8003ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003abe:	b112      	cbz	r2, 8003ac6 <_raise_r+0x1e>
 8003ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ac4:	b94b      	cbnz	r3, 8003ada <_raise_r+0x32>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 f830 	bl	8003b2c <_getpid_r>
 8003acc:	462a      	mov	r2, r5
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad6:	f000 b817 	b.w	8003b08 <_kill_r>
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d00a      	beq.n	8003af4 <_raise_r+0x4c>
 8003ade:	1c59      	adds	r1, r3, #1
 8003ae0:	d103      	bne.n	8003aea <_raise_r+0x42>
 8003ae2:	2316      	movs	r3, #22
 8003ae4:	6003      	str	r3, [r0, #0]
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	e7e7      	b.n	8003aba <_raise_r+0x12>
 8003aea:	2400      	movs	r4, #0
 8003aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003af0:	4628      	mov	r0, r5
 8003af2:	4798      	blx	r3
 8003af4:	2000      	movs	r0, #0
 8003af6:	e7e0      	b.n	8003aba <_raise_r+0x12>

08003af8 <raise>:
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <raise+0xc>)
 8003afa:	4601      	mov	r1, r0
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f7ff bfd3 	b.w	8003aa8 <_raise_r>
 8003b02:	bf00      	nop
 8003b04:	20000010 	.word	0x20000010

08003b08 <_kill_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d07      	ldr	r5, [pc, #28]	; (8003b28 <_kill_r+0x20>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	f7fd f9c7 	bl	8000ea8 <_kill>
 8003b1a:	1c43      	adds	r3, r0, #1
 8003b1c:	d102      	bne.n	8003b24 <_kill_r+0x1c>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	b103      	cbz	r3, 8003b24 <_kill_r+0x1c>
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	bf00      	nop
 8003b28:	200002c8 	.word	0x200002c8

08003b2c <_getpid_r>:
 8003b2c:	f7fd b9b4 	b.w	8000e98 <_getpid>

08003b30 <__sread>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	460c      	mov	r4, r1
 8003b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b38:	f000 f89c 	bl	8003c74 <_read_r>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	bfab      	itete	ge
 8003b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b42:	89a3      	ldrhlt	r3, [r4, #12]
 8003b44:	181b      	addge	r3, r3, r0
 8003b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b4a:	bfac      	ite	ge
 8003b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b4e:	81a3      	strhlt	r3, [r4, #12]
 8003b50:	bd10      	pop	{r4, pc}

08003b52 <__swrite>:
 8003b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b56:	461f      	mov	r7, r3
 8003b58:	898b      	ldrh	r3, [r1, #12]
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4616      	mov	r6, r2
 8003b62:	d505      	bpl.n	8003b70 <__swrite+0x1e>
 8003b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b68:	2302      	movs	r3, #2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f000 f868 	bl	8003c40 <_lseek_r>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	463b      	mov	r3, r7
 8003b80:	4628      	mov	r0, r5
 8003b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	f000 b817 	b.w	8003bb8 <_write_r>

08003b8a <__sseek>:
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b92:	f000 f855 	bl	8003c40 <_lseek_r>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	bf15      	itete	ne
 8003b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ba6:	81a3      	strheq	r3, [r4, #12]
 8003ba8:	bf18      	it	ne
 8003baa:	81a3      	strhne	r3, [r4, #12]
 8003bac:	bd10      	pop	{r4, pc}

08003bae <__sclose>:
 8003bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb2:	f000 b813 	b.w	8003bdc <_close_r>
	...

08003bb8 <_write_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4d07      	ldr	r5, [pc, #28]	; (8003bd8 <_write_r+0x20>)
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	4608      	mov	r0, r1
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	602a      	str	r2, [r5, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f7fd f9a5 	bl	8000f16 <_write>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_write_r+0x1e>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_write_r+0x1e>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	200002c8 	.word	0x200002c8

08003bdc <_close_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d06      	ldr	r5, [pc, #24]	; (8003bf8 <_close_r+0x1c>)
 8003be0:	2300      	movs	r3, #0
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fd f9b1 	bl	8000f4e <_close>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_close_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_close_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	200002c8 	.word	0x200002c8

08003bfc <_fstat_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	; (8003c1c <_fstat_r+0x20>)
 8003c00:	2300      	movs	r3, #0
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f7fd f9ac 	bl	8000f66 <_fstat>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d102      	bne.n	8003c18 <_fstat_r+0x1c>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	b103      	cbz	r3, 8003c18 <_fstat_r+0x1c>
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200002c8 	.word	0x200002c8

08003c20 <_isatty_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d06      	ldr	r5, [pc, #24]	; (8003c3c <_isatty_r+0x1c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fd f9ab 	bl	8000f86 <_isatty>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_isatty_r+0x1a>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_isatty_r+0x1a>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	200002c8 	.word	0x200002c8

08003c40 <_lseek_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d07      	ldr	r5, [pc, #28]	; (8003c60 <_lseek_r+0x20>)
 8003c44:	4604      	mov	r4, r0
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	602a      	str	r2, [r5, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f7fd f9a4 	bl	8000f9c <_lseek>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_lseek_r+0x1e>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_lseek_r+0x1e>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	200002c8 	.word	0x200002c8

08003c64 <_malloc_usable_size_r>:
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f18      	subs	r0, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbc      	itt	lt
 8003c6e:	580b      	ldrlt	r3, [r1, r0]
 8003c70:	18c0      	addlt	r0, r0, r3
 8003c72:	4770      	bx	lr

08003c74 <_read_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4d07      	ldr	r5, [pc, #28]	; (8003c94 <_read_r+0x20>)
 8003c78:	4604      	mov	r4, r0
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	2200      	movs	r2, #0
 8003c80:	602a      	str	r2, [r5, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f7fd f92a 	bl	8000edc <_read>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_read_r+0x1e>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_read_r+0x1e>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	200002c8 	.word	0x200002c8

08003c98 <_init>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr

08003ca4 <_fini>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr
